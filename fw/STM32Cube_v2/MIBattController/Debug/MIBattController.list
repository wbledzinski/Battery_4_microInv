
MIBattController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    0001a800  08020000  08020000  00040000  2**2
                  ALLOC, READONLY
  1 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00012a3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000fc8  08012bd0  08012bd0  00022bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08013b98  08013b98  00030218  2**0
                  CONTENTS
  5 .ARM          00000008  08013b98  08013b98  00023b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08013ba0  08013ba0  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08013ba0  08013ba0  00023ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08013ba4  08013ba4  00023ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000218  20000000  08013ba8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006190  20000218  08013dc0  00030218  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200063a8  08013dc0  000363a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a143  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bf5  00000000  00000000  0005a38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e28  00000000  00000000  0005ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c70  00000000  00000000  00060da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277c3  00000000  00000000  00062a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000215f4  00000000  00000000  0008a1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee9e7  00000000  00000000  000ab7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019a1b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009750  00000000  00000000  0019a20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012bb4 	.word	0x08012bb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08012bb4 	.word	0x08012bb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DelayedOn_Wait>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DelayedOn_Wait(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	//is batt OK to charge? (and discharge as well)
	if ((Adc1Measurements.Batt_voltage) < (BATT_MAX_VOLTAGE+VoltHysteresisChg)
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <DelayedOn_Wait+0x34>)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <DelayedOn_Wait+0x38>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f203 1391 	addw	r3, r3, #401	; 0x191
 8001030:	429a      	cmp	r2, r3
 8001032:	d208      	bcs.n	8001046 <DelayedOn_Wait+0x26>
			&& Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <DelayedOn_Wait+0x34>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2bf0      	cmp	r3, #240	; 0xf0
 800103a:	d904      	bls.n	8001046 <DelayedOn_Wait+0x26>
	{//yes, ok to charge
		InverterMOS_OFF();	//INV blocked, battery to power controller, if some PV still is (at dusk), it will charge BATT
 800103c:	f001 f86c 	bl	8002118 <InverterMOS_OFF>
		BatteryMOS_ON();
 8001040:	f000 ffe2 	bl	8002008 <BatteryMOS_ON>
 8001044:	e004      	b.n	8001050 <DelayedOn_Wait+0x30>
	{//not ok to charge battery
#if HW_VER > 01		//charging/discharging blocked, PV might go only to INV
		BatteryMOS_OFF();
		InverterMOS_ON();
#else
		InverterMOS_OFF();	//INV blocked, battery to power controller, if some PV still is it will charge BATT (no other choice in HW01)
 8001046:	f001 f867 	bl	8002118 <InverterMOS_OFF>
		BatteryMOS_ON();
 800104a:	f000 ffdd 	bl	8002008 <BatteryMOS_ON>
#endif
	}
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20005998 	.word	0x20005998
 8001058:	20000250 	.word	0x20000250

0800105c <DelayedOn_On>:

void DelayedOn_On(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	InverterMOS_ON();
 8001060:	f001 f842 	bl	80020e8 <InverterMOS_ON>
	BatteryMOS_ON();
 8001064:	f000 ffd0 	bl	8002008 <BatteryMOS_ON>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <DelayedInvMosOn>:
/*function switches on inverter mosfet, according to actual config in an instant or with delay*/
void DelayedInvMosOn(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	switch (ConfigReg)
 8001070:	4b5b      	ldr	r3, [pc, #364]	; (80011e0 <DelayedInvMosOn+0x174>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b0d      	cmp	r3, #13
 8001076:	f200 80ae 	bhi.w	80011d6 <DelayedInvMosOn+0x16a>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <DelayedInvMosOn+0x14>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	080010b9 	.word	0x080010b9
 8001084:	080010bf 	.word	0x080010bf
 8001088:	080010d5 	.word	0x080010d5
 800108c:	080010eb 	.word	0x080010eb
 8001090:	08001103 	.word	0x08001103
 8001094:	08001119 	.word	0x08001119
 8001098:	08001131 	.word	0x08001131
 800109c:	08001147 	.word	0x08001147
 80010a0:	0800114d 	.word	0x0800114d
 80010a4:	08001163 	.word	0x08001163
 80010a8:	08001179 	.word	0x08001179
 80010ac:	08001191 	.word	0x08001191
 80010b0:	080011a7 	.word	0x080011a7
 80010b4:	080011bf 	.word	0x080011bf
	{
	case CONFIG_MAINS_0DELAY:
		DelayedOn_On();
 80010b8:	f7ff ffd0 	bl	800105c <DelayedOn_On>
		break;
 80010bc:	e08e      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_1DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME1)
 80010be:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <DelayedInvMosOn+0x178>)
 80010c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80010c6:	d902      	bls.n	80010ce <DelayedInvMosOn+0x62>
		{
			DelayedOn_On();
 80010c8:	f7ff ffc8 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80010cc:	e086      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80010ce:	f7ff ffa7 	bl	8001020 <DelayedOn_Wait>
		break;
 80010d2:	e083      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_2DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME2)
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <DelayedInvMosOn+0x178>)
 80010d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80010dc:	d902      	bls.n	80010e4 <DelayedInvMosOn+0x78>
		{
			DelayedOn_On();
 80010de:	f7ff ffbd 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80010e2:	e07b      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80010e4:	f7ff ff9c 	bl	8001020 <DelayedOn_Wait>
		break;
 80010e8:	e078      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_3DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME3)
 80010ea:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <DelayedInvMosOn+0x178>)
 80010ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ee:	f642 2230 	movw	r2, #10800	; 0x2a30
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d902      	bls.n	80010fc <DelayedInvMosOn+0x90>
		{
			DelayedOn_On();
 80010f6:	f7ff ffb1 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80010fa:	e06f      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80010fc:	f7ff ff90 	bl	8001020 <DelayedOn_Wait>
		break;
 8001100:	e06c      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_4DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME4)
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001106:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 800110a:	d902      	bls.n	8001112 <DelayedInvMosOn+0xa6>
		{
			DelayedOn_On();
 800110c:	f7ff ffa6 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001110:	e064      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 8001112:	f7ff ff85 	bl	8001020 <DelayedOn_Wait>
		break;
 8001116:	e061      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_5DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME5)
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <DelayedInvMosOn+0x178>)
 800111a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111c:	f244 6250 	movw	r2, #18000	; 0x4650
 8001120:	4293      	cmp	r3, r2
 8001122:	d902      	bls.n	800112a <DelayedInvMosOn+0xbe>
		{
			DelayedOn_On();
 8001124:	f7ff ff9a 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001128:	e058      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 800112a:	f7ff ff79 	bl	8001020 <DelayedOn_Wait>
		break;
 800112e:	e055      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_6DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME6)
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001134:	f245 4260 	movw	r2, #21600	; 0x5460
 8001138:	4293      	cmp	r3, r2
 800113a:	d902      	bls.n	8001142 <DelayedInvMosOn+0xd6>
		{
			DelayedOn_On();
 800113c:	f7ff ff8e 	bl	800105c <DelayedOn_On>
 8001140:	e001      	b.n	8001146 <DelayedInvMosOn+0xda>
		}
		else
		{
			DelayedOn_Wait();
 8001142:	f7ff ff6d 	bl	8001020 <DelayedOn_Wait>
		}
	case CONFIG_BATT_0DELAY:
		DelayedOn_On();
 8001146:	f7ff ff89 	bl	800105c <DelayedOn_On>
		break;
 800114a:	e047      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_1DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME1)
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <DelayedInvMosOn+0x178>)
 800114e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001150:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001154:	d902      	bls.n	800115c <DelayedInvMosOn+0xf0>
		{
			DelayedOn_On();
 8001156:	f7ff ff81 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 800115a:	e03f      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 800115c:	f7ff ff60 	bl	8001020 <DelayedOn_Wait>
		break;
 8001160:	e03c      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_2DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME2)
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001166:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800116a:	d902      	bls.n	8001172 <DelayedInvMosOn+0x106>
		{
			DelayedOn_On();
 800116c:	f7ff ff76 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001170:	e034      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 8001172:	f7ff ff55 	bl	8001020 <DelayedOn_Wait>
		break;
 8001176:	e031      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_3DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME3)
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <DelayedInvMosOn+0x178>)
 800117a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117c:	f642 2230 	movw	r2, #10800	; 0x2a30
 8001180:	4293      	cmp	r3, r2
 8001182:	d902      	bls.n	800118a <DelayedInvMosOn+0x11e>
		{
			DelayedOn_On();
 8001184:	f7ff ff6a 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001188:	e028      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 800118a:	f7ff ff49 	bl	8001020 <DelayedOn_Wait>
		break;
 800118e:	e025      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_4DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME4)
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001194:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 8001198:	d902      	bls.n	80011a0 <DelayedInvMosOn+0x134>
		{
			DelayedOn_On();
 800119a:	f7ff ff5f 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 800119e:	e01d      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80011a0:	f7ff ff3e 	bl	8001020 <DelayedOn_Wait>
		break;
 80011a4:	e01a      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_5DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME5)
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <DelayedInvMosOn+0x178>)
 80011a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011aa:	f244 6250 	movw	r2, #18000	; 0x4650
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d902      	bls.n	80011b8 <DelayedInvMosOn+0x14c>
		{
			DelayedOn_On();
 80011b2:	f7ff ff53 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80011b6:	e011      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80011b8:	f7ff ff32 	bl	8001020 <DelayedOn_Wait>
		break;
 80011bc:	e00e      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_6DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME6)
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <DelayedInvMosOn+0x178>)
 80011c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c2:	f245 4260 	movw	r2, #21600	; 0x5460
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d902      	bls.n	80011d0 <DelayedInvMosOn+0x164>
		{
			DelayedOn_On();
 80011ca:	f7ff ff47 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80011ce:	e005      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80011d0:	f7ff ff26 	bl	8001020 <DelayedOn_Wait>
		break;
 80011d4:	e002      	b.n	80011dc <DelayedInvMosOn+0x170>
	default:
		InverterMOS_ON();
 80011d6:	f000 ff87 	bl	80020e8 <InverterMOS_ON>
		break;
 80011da:	bf00      	nop
	}
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20005994 	.word	0x20005994
 80011e4:	20005c74 	.word	0x20005c74

080011e8 <ResetInverterDay>:
 * reset is needed due to issue with starting Inverter from low voltage at dawn (e.g. when battery is charging)
 * to reset MPPT algorithm at least few second long voltage spike (OCV) is needed
 * to do that procedure will disconnect INV, Battery, wait few seconds and start Inverter again
 */
void ResetInverterDay(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	switch (StateResetInv)
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <ResetInverterDay+0x124>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b1b      	cmp	r3, #27
 80011f2:	f200 8081 	bhi.w	80012f8 <ResetInverterDay+0x110>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <ResetInverterDay+0x14>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800126d 	.word	0x0800126d
 8001200:	0800129f 	.word	0x0800129f
 8001204:	080012c3 	.word	0x080012c3
 8001208:	080012c3 	.word	0x080012c3
 800120c:	080012c3 	.word	0x080012c3
 8001210:	080012c3 	.word	0x080012c3
 8001214:	080012c3 	.word	0x080012c3
 8001218:	080012c3 	.word	0x080012c3
 800121c:	080012c3 	.word	0x080012c3
 8001220:	080012c3 	.word	0x080012c3
 8001224:	080012c3 	.word	0x080012c3
 8001228:	080012c3 	.word	0x080012c3
 800122c:	080012c3 	.word	0x080012c3
 8001230:	080012c3 	.word	0x080012c3
 8001234:	080012c3 	.word	0x080012c3
 8001238:	080012c3 	.word	0x080012c3
 800123c:	080012c3 	.word	0x080012c3
 8001240:	080012cf 	.word	0x080012cf
 8001244:	080012cf 	.word	0x080012cf
 8001248:	080012cf 	.word	0x080012cf
 800124c:	080012cf 	.word	0x080012cf
 8001250:	080012cf 	.word	0x080012cf
 8001254:	080012cf 	.word	0x080012cf
 8001258:	080012cf 	.word	0x080012cf
 800125c:	080012cf 	.word	0x080012cf
 8001260:	080012cf 	.word	0x080012cf
 8001264:	080012cf 	.word	0x080012cf
 8001268:	080012e3 	.word	0x080012e3
	{
	case 0:
#if HW_VER > 01
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN && FlagExt_I == 0)
#else
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN )
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <ResetInverterDay+0x128>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2bfa      	cmp	r3, #250	; 0xfa
 8001272:	d903      	bls.n	800127c <ResetInverterDay+0x94>
#endif
		{
			TimeToResetInv = TIME2RESET_INV;	//reset time to 30 minutes if inv is working
 8001274:	4b27      	ldr	r3, [pc, #156]	; (8001314 <ResetInverterDay+0x12c>)
 8001276:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800127a:	601a      	str	r2, [r3, #0]
		{
			TimeToResetInv = 1;
			StatCurrentWh.InvExtResetCnt++;
		}
#endif
		if (TimeToResetInv)	TimeToResetInv--;
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <ResetInverterDay+0x12c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <ResetInverterDay+0xa6>
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <ResetInverterDay+0x12c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3b01      	subs	r3, #1
 800128a:	4a22      	ldr	r2, [pc, #136]	; (8001314 <ResetInverterDay+0x12c>)
 800128c:	6013      	str	r3, [r2, #0]
		if (!TimeToResetInv) StateResetInv=1;	//start Inv Reset procedure
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <ResetInverterDay+0x12c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d137      	bne.n	8001306 <ResetInverterDay+0x11e>
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <ResetInverterDay+0x124>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
		break;
 800129c:	e033      	b.n	8001306 <ResetInverterDay+0x11e>
	case 1:	//30 minutes without inv currrent. set flag that procedure is ON,
		FlagResetInverter = 1;	//procedure is on
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <ResetInverterDay+0x130>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
		BatteryMOS_OFF();		//switch off all loads causing OCV
 80012a4:	f000 fef0 	bl	8002088 <BatteryMOS_OFF>
		InverterMOS_OFF();
 80012a8:	f000 ff36 	bl	8002118 <InverterMOS_OFF>
		StateResetInv = 2;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <ResetInverterDay+0x124>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	601a      	str	r2, [r3, #0]
		StatCurrentWh.InvResetCntr++;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <ResetInverterDay+0x134>)
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <ResetInverterDay+0x134>)
 80012ba:	62d3      	str	r3, [r2, #44]	; 0x2c
		ExtOut_InvResetStart();
 80012bc:	f000 fe34 	bl	8001f28 <ExtOut_InvResetStart>
		break;
 80012c0:	e022      	b.n	8001308 <ResetInverterDay+0x120>
	case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10:
	case 11: case 12: case 13: case 14: case 15: case 16:
		//wait 15 seconds
		StateResetInv++;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <ResetInverterDay+0x124>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	4a10      	ldr	r2, [pc, #64]	; (800130c <ResetInverterDay+0x124>)
 80012ca:	6013      	str	r3, [r2, #0]
		break;
 80012cc:	e01c      	b.n	8001308 <ResetInverterDay+0x120>
	case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26:
		//ON inverter MOS and wait 10 seconds
		InverterMOS_ON();
 80012ce:	f000 ff0b 	bl	80020e8 <InverterMOS_ON>
		StateResetInv++;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <ResetInverterDay+0x124>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <ResetInverterDay+0x124>)
 80012da:	6013      	str	r3, [r2, #0]
		ExtOut_InvResetStop();
 80012dc:	f000 fe5c 	bl	8001f98 <ExtOut_InvResetStop>
		break;
 80012e0:	e012      	b.n	8001308 <ResetInverterDay+0x120>
	case 27:	//now return to regular operation of controller
		StateResetInv=0;
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <ResetInverterDay+0x124>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <ResetInverterDay+0x130>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
		TimeToResetInv = TIME2RESET_INV;	//reset timer for 30 minutes
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <ResetInverterDay+0x12c>)
 80012f0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80012f4:	601a      	str	r2, [r3, #0]
		break;
 80012f6:	e007      	b.n	8001308 <ResetInverterDay+0x120>
	default:
		StateResetInv=0;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <ResetInverterDay+0x124>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <ResetInverterDay+0x130>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
		break;
 8001304:	e000      	b.n	8001308 <ResetInverterDay+0x120>
		break;
 8001306:	bf00      	nop
	}
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20006304 	.word	0x20006304
 8001310:	20005998 	.word	0x20005998
 8001314:	2000000c 	.word	0x2000000c
 8001318:	20006198 	.word	0x20006198
 800131c:	20005a20 	.word	0x20005a20

08001320 <ResetInverterNight>:
 * reset is needed due to excessive current consumption (when batt voltage < MPP but battery can supply higher current than PV)
 * its due to mppt alg in inverter. Not needed when battery has operating voltage higher than MPP of inverter or PV panel
 * procedure will disconnect INV, wait few seconds and start Inverter again
 */
void ResetInverterNight(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	switch (StateResetInv)
 8001324:	4b62      	ldr	r3, [pc, #392]	; (80014b0 <ResetInverterNight+0x190>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b25      	cmp	r3, #37	; 0x25
 800132a:	f200 80b5 	bhi.w	8001498 <ResetInverterNight+0x178>
 800132e:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <ResetInverterNight+0x14>)
 8001330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001334:	080013cd 	.word	0x080013cd
 8001338:	0800141b 	.word	0x0800141b
 800133c:	08001449 	.word	0x08001449
 8001340:	08001449 	.word	0x08001449
 8001344:	08001449 	.word	0x08001449
 8001348:	08001449 	.word	0x08001449
 800134c:	08001449 	.word	0x08001449
 8001350:	08001449 	.word	0x08001449
 8001354:	08001449 	.word	0x08001449
 8001358:	08001449 	.word	0x08001449
 800135c:	08001449 	.word	0x08001449
 8001360:	08001449 	.word	0x08001449
 8001364:	08001449 	.word	0x08001449
 8001368:	08001449 	.word	0x08001449
 800136c:	08001449 	.word	0x08001449
 8001370:	08001449 	.word	0x08001449
 8001374:	08001449 	.word	0x08001449
 8001378:	08001449 	.word	0x08001449
 800137c:	08001449 	.word	0x08001449
 8001380:	08001449 	.word	0x08001449
 8001384:	08001449 	.word	0x08001449
 8001388:	08001449 	.word	0x08001449
 800138c:	08001449 	.word	0x08001449
 8001390:	08001449 	.word	0x08001449
 8001394:	08001449 	.word	0x08001449
 8001398:	08001449 	.word	0x08001449
 800139c:	08001449 	.word	0x08001449
 80013a0:	08001455 	.word	0x08001455
 80013a4:	08001455 	.word	0x08001455
 80013a8:	08001455 	.word	0x08001455
 80013ac:	08001455 	.word	0x08001455
 80013b0:	08001455 	.word	0x08001455
 80013b4:	08001455 	.word	0x08001455
 80013b8:	08001455 	.word	0x08001455
 80013bc:	08001455 	.word	0x08001455
 80013c0:	08001455 	.word	0x08001455
 80013c4:	08001455 	.word	0x08001455
 80013c8:	0800147f 	.word	0x0800147f
	{
	case 0:
		//if (Adc1Measurements.Inv_current > INV_CURRENT_MIN &&
		if ( Adc1Measurements.Inv_current < INV_CURRENT_MAX)
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <ResetInverterNight+0x194>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f243 02d3 	movw	r2, #12499	; 0x30d3
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d803      	bhi.n	80013e0 <ResetInverterNight+0xc0>
		{
			TimeToResetInv = TIME2OVLD_INV;	//set overload timer for x seconds
 80013d8:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <ResetInverterNight+0x198>)
 80013da:	2223      	movs	r2, #35	; 0x23
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e00b      	b.n	80013f8 <ResetInverterNight+0xd8>
		}
		else if (Adc1Measurements.Inv_current > INV_CURR_SC)	//considered as short-circuit
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <ResetInverterNight+0x194>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f244 6250 	movw	r2, #18000	; 0x4650
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d905      	bls.n	80013f8 <ResetInverterNight+0xd8>
		{
			TimeToResetInv = 0;
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <ResetInverterNight+0x198>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
			StatCountFlagsWs.InvOutShorted = 1;
 80013f2:	4b32      	ldr	r3, [pc, #200]	; (80014bc <ResetInverterNight+0x19c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	639a      	str	r2, [r3, #56]	; 0x38
		{
			TimeToResetInv = 1;
			StatCurrentWh.InvExtResetCnt++;
		}
#endif
		if (TimeToResetInv)	TimeToResetInv--;
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <ResetInverterNight+0x198>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <ResetInverterNight+0xea>
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <ResetInverterNight+0x198>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <ResetInverterNight+0x198>)
 8001408:	6013      	str	r3, [r2, #0]
		if (!TimeToResetInv) StateResetInv=1;	//start Inv Reset procedure
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <ResetInverterNight+0x198>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d149      	bne.n	80014a6 <ResetInverterNight+0x186>
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <ResetInverterNight+0x190>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
		break;
 8001418:	e045      	b.n	80014a6 <ResetInverterNight+0x186>
	case 1:	//10 sec ovld (or no current) inv currrent. set flag that procedure is ON,
		FlagResetInverter = 1;	//procedure is on
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <ResetInverterNight+0x1a0>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]

#if HW_VER > 01
		BatteryMOS_OFF();			//disconnect load (HW02>)and..
#endif
		InverterMOS_OFF();			//disconnect load
 8001420:	f000 fe7a 	bl	8002118 <InverterMOS_OFF>
		StateResetInv = 17;			//for regular overload wait 10 seconds
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <ResetInverterNight+0x190>)
 8001426:	2211      	movs	r2, #17
 8001428:	601a      	str	r2, [r3, #0]
		if (StatCountFlagsWs.InvOutShorted) StateResetInv = 2;	//for short circuit wait 25 seconds
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <ResetInverterNight+0x19c>)
 800142c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <ResetInverterNight+0x118>
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <ResetInverterNight+0x190>)
 8001434:	2202      	movs	r2, #2
 8001436:	601a      	str	r2, [r3, #0]
		//StatCurrentWh.InvResetCntr++;
		StatCurrentWh.InvOvcCounter++;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <ResetInverterNight+0x1a4>)
 800143a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800143c:	3301      	adds	r3, #1
 800143e:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <ResetInverterNight+0x1a4>)
 8001440:	6653      	str	r3, [r2, #100]	; 0x64
		ExtOut_InvResetStart();
 8001442:	f000 fd71 	bl	8001f28 <ExtOut_InvResetStart>
		break;
 8001446:	e031      	b.n	80014ac <ResetInverterNight+0x18c>
	case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10:
	case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18:
	case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26:
		//wait 25 seconds
		StateResetInv++;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <ResetInverterNight+0x190>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <ResetInverterNight+0x190>)
 8001450:	6013      	str	r3, [r2, #0]
		break;
 8001452:	e02b      	b.n	80014ac <ResetInverterNight+0x18c>
	case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36:
		//ON inverter MOS and wait 10 seconds
		InverterMOS_ON();
 8001454:	f000 fe48 	bl	80020e8 <InverterMOS_ON>
		BatteryMOS_ON();
 8001458:	f000 fdd6 	bl	8002008 <BatteryMOS_ON>
		StateResetInv++;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <ResetInverterNight+0x190>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <ResetInverterNight+0x190>)
 8001464:	6013      	str	r3, [r2, #0]
		ExtOut_InvResetStop();
 8001466:	f000 fd97 	bl	8001f98 <ExtOut_InvResetStop>
		if (Adc1Measurements.Inv_current > INV_CURR_SC) StateResetInv = 1;	//if SC occurs launch again reset procedure, instantly
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <ResetInverterNight+0x194>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f244 6250 	movw	r2, #18000	; 0x4650
 8001472:	4293      	cmp	r3, r2
 8001474:	d919      	bls.n	80014aa <ResetInverterNight+0x18a>
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <ResetInverterNight+0x190>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
		break;
 800147c:	e015      	b.n	80014aa <ResetInverterNight+0x18a>
	case 37:	//now return to regular operation of controller
		StatCountFlagsWs.InvOutShorted = 0;
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <ResetInverterNight+0x19c>)
 8001480:	2200      	movs	r2, #0
 8001482:	639a      	str	r2, [r3, #56]	; 0x38
		StateResetInv=0;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <ResetInverterNight+0x190>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <ResetInverterNight+0x1a0>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
		TimeToResetInv = TIME2OVLD_INV;	//reset timer for 30 minutes
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <ResetInverterNight+0x198>)
 8001492:	2223      	movs	r2, #35	; 0x23
 8001494:	601a      	str	r2, [r3, #0]
		break;
 8001496:	e009      	b.n	80014ac <ResetInverterNight+0x18c>
	default:
		StateResetInv=0;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <ResetInverterNight+0x190>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <ResetInverterNight+0x1a0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
		break;
 80014a4:	e002      	b.n	80014ac <ResetInverterNight+0x18c>
		break;
 80014a6:	bf00      	nop
 80014a8:	e000      	b.n	80014ac <ResetInverterNight+0x18c>
		break;
 80014aa:	bf00      	nop
	}
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20006304 	.word	0x20006304
 80014b4:	20005998 	.word	0x20005998
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	200059bc 	.word	0x200059bc
 80014c0:	20006198 	.word	0x20006198
 80014c4:	20005a20 	.word	0x20005a20

080014c8 <setPWM_TIM2>:

void setPWM_TIM2(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 80014c8:	b084      	sub	sp, #16
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b088      	sub	sp, #32
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80014d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 //HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 TIM_OC_InitTypeDef sConfigOC;
 //timer.Init.Period = period; // set the period duration
 //HAL_TIM_PWM_Init(&timer); // re-inititialise with new period value
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	607b      	str	r3, [r7, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 80014dc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80014e0:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80014e6:	2308      	movs	r3, #8
 80014e8:	613b      	str	r3, [r7, #16]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80014f2:	4619      	mov	r1, r3
 80014f4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80014f8:	f006 fe5c 	bl	80081b4 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80014fc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80014fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001502:	f006 fbd1 	bl	8007ca8 <HAL_TIM_PWM_Start>
}
 8001506:	bf00      	nop
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001510:	b004      	add	sp, #16
 8001512:	4770      	bx	lr

08001514 <setPWM_TIM16>:

void setPWM_TIM16(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse)
{
 8001514:	b084      	sub	sp, #16
 8001516:	b580      	push	{r7, lr}
 8001518:	b088      	sub	sp, #32
 800151a:	af00      	add	r7, sp, #0
 800151c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001520:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 TIM_OC_InitTypeDef sConfigOC;
 sConfigOC.Pulse = pulse; // set the pulse duration
 8001524:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001528:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152a:	2360      	movs	r3, #96	; 0x60
 800152c:	607b      	str	r3, [r7, #4]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
 sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001546:	4619      	mov	r1, r3
 8001548:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800154c:	f006 fe32 	bl	80081b4 <HAL_TIM_PWM_ConfigChannel>
 /* Set the Capture Compare Register value */
 //*timer->CCR1 = pulse;
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001550:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001552:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001556:	f006 fba7 	bl	8007ca8 <HAL_TIM_PWM_Start>
}
 800155a:	bf00      	nop
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001564:	b004      	add	sp, #16
 8001566:	4770      	bx	lr

08001568 <LedStatusShow>:

/*function called once a 1 second to show mashine-state status thru LEDs*/
void LedStatusShow(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	if (LedStatusTimer)
 800156c:	4b61      	ldr	r3, [pc, #388]	; (80016f4 <LedStatusShow+0x18c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01d      	beq.n	80015b0 <LedStatusShow+0x48>
	{
		LedStatusTimer--;
 8001574:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <LedStatusShow+0x18c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	4a5e      	ldr	r2, [pc, #376]	; (80016f4 <LedStatusShow+0x18c>)
 800157c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001584:	485c      	ldr	r0, [pc, #368]	; (80016f8 <LedStatusShow+0x190>)
 8001586:	f005 f883 	bl	8006690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001590:	4859      	ldr	r0, [pc, #356]	; (80016f8 <LedStatusShow+0x190>)
 8001592:	f005 f87d 	bl	8006690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159c:	4856      	ldr	r0, [pc, #344]	; (80016f8 <LedStatusShow+0x190>)
 800159e:	f005 f877 	bl	8006690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a8:	4853      	ldr	r0, [pc, #332]	; (80016f8 <LedStatusShow+0x190>)
 80015aa:	f005 f871 	bl	8006690 <HAL_GPIO_WritePin>
		{//lowest priority to show
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
		}
	}
}
 80015ae:	e09f      	b.n	80016f0 <LedStatusShow+0x188>
		if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP || Adc1Measurements.NTC2_Inverter_mos>MOSFET_MAX_TEMP)	//powerMOSFET OVT 0
 80015b0:	4b52      	ldr	r3, [pc, #328]	; (80016fc <LedStatusShow+0x194>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b50      	cmp	r3, #80	; 0x50
 80015b6:	d803      	bhi.n	80015c0 <LedStatusShow+0x58>
 80015b8:	4b50      	ldr	r3, [pc, #320]	; (80016fc <LedStatusShow+0x194>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	2b50      	cmp	r3, #80	; 0x50
 80015be:	d91d      	bls.n	80015fc <LedStatusShow+0x94>
			if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80015c0:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <LedStatusShow+0x194>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b50      	cmp	r3, #80	; 0x50
 80015c6:	d905      	bls.n	80015d4 <LedStatusShow+0x6c>
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ce:	484a      	ldr	r0, [pc, #296]	; (80016f8 <LedStatusShow+0x190>)
 80015d0:	f005 f85e 	bl	8006690 <HAL_GPIO_WritePin>
			if (Adc1Measurements.NTC2_Inverter_mos>MOSFET_MAX_TEMP) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80015d4:	4b49      	ldr	r3, [pc, #292]	; (80016fc <LedStatusShow+0x194>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	2b50      	cmp	r3, #80	; 0x50
 80015da:	d905      	bls.n	80015e8 <LedStatusShow+0x80>
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e2:	4845      	ldr	r0, [pc, #276]	; (80016f8 <LedStatusShow+0x190>)
 80015e4:	f005 f854 	bl	8006690 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ee:	4842      	ldr	r0, [pc, #264]	; (80016f8 <LedStatusShow+0x190>)
 80015f0:	f005 f84e 	bl	8006690 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 80015f4:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <LedStatusShow+0x18c>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e079      	b.n	80016f0 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Time_NoBattery2Chg)	//cant charge battery (its full) 1 high priority
 80015fc:	4b40      	ldr	r3, [pc, #256]	; (8001700 <LedStatusShow+0x198>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00f      	beq.n	8001624 <LedStatusShow+0xbc>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800160a:	483b      	ldr	r0, [pc, #236]	; (80016f8 <LedStatusShow+0x190>)
 800160c:	f005 f840 	bl	8006690 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001616:	4838      	ldr	r0, [pc, #224]	; (80016f8 <LedStatusShow+0x190>)
 8001618:	f005 f83a 	bl	8006690 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <LedStatusShow+0x18c>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]
}
 8001622:	e065      	b.n	80016f0 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattRecharge)	//battery charging (mains mode) 2
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <LedStatusShow+0x198>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d009      	beq.n	8001640 <LedStatusShow+0xd8>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001632:	4831      	ldr	r0, [pc, #196]	; (80016f8 <LedStatusShow+0x190>)
 8001634:	f005 f82c 	bl	8006690 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <LedStatusShow+0x18c>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
}
 800163e:	e057      	b.n	80016f0 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattOut)	//battery discharging 3
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <LedStatusShow+0x198>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01b      	beq.n	8001680 <LedStatusShow+0x118>
			if (FlagInverterMOS && FlagBatteryMOS)
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <LedStatusShow+0x19c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00d      	beq.n	800166c <LedStatusShow+0x104>
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <LedStatusShow+0x1a0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d009      	beq.n	800166c <LedStatusShow+0x104>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165e:	4826      	ldr	r0, [pc, #152]	; (80016f8 <LedStatusShow+0x190>)
 8001660:	f005 f816 	bl	8006690 <HAL_GPIO_WritePin>
				LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001664:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <LedStatusShow+0x18c>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e041      	b.n	80016f0 <LedStatusShow+0x188>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001672:	4821      	ldr	r0, [pc, #132]	; (80016f8 <LedStatusShow+0x190>)
 8001674:	f005 f80c 	bl	8006690 <HAL_GPIO_WritePin>
				LedStatusTimer = LEDSTATUS_TIMER_MED;
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <LedStatusShow+0x18c>)
 800167a:	2203      	movs	r2, #3
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	e037      	b.n	80016f0 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_Inverter)	//inverter operational (mains mode) 3
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <LedStatusShow+0x198>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d009      	beq.n	800169c <LedStatusShow+0x134>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168e:	481a      	ldr	r0, [pc, #104]	; (80016f8 <LedStatusShow+0x190>)
 8001690:	f004 fffe 	bl	8006690 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <LedStatusShow+0x18c>)
 8001696:	2209      	movs	r2, #9
 8001698:	601a      	str	r2, [r3, #0]
}
 800169a:	e029      	b.n	80016f0 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattNoInv)	//battery charging, no inverter (mains mode) 4
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <LedStatusShow+0x198>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d009      	beq.n	80016b8 <LedStatusShow+0x150>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016aa:	4813      	ldr	r0, [pc, #76]	; (80016f8 <LedStatusShow+0x190>)
 80016ac:	f004 fff0 	bl	8006690 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <LedStatusShow+0x18c>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	e01b      	b.n	80016f0 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattIn)	//battery charging (battery mode) 5
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <LedStatusShow+0x198>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d009      	beq.n	80016d4 <LedStatusShow+0x16c>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <LedStatusShow+0x190>)
 80016c8:	f004 ffe2 	bl	8006690 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <LedStatusShow+0x18c>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
}
 80016d2:	e00d      	b.n	80016f0 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Time_NightTime)	//night time, lowest priority to show 6
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <LedStatusShow+0x198>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <LedStatusShow+0x188>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <LedStatusShow+0x190>)
 80016e4:	f004 ffd4 	bl	8006690 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <LedStatusShow+0x18c>)
 80016ea:	2209      	movs	r2, #9
 80016ec:	601a      	str	r2, [r3, #0]
}
 80016ee:	e7ff      	b.n	80016f0 <LedStatusShow+0x188>
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200059b8 	.word	0x200059b8
 80016f8:	48000400 	.word	0x48000400
 80016fc:	20005998 	.word	0x20005998
 8001700:	200059bc 	.word	0x200059bc
 8001704:	20000244 	.word	0x20000244
 8001708:	20000240 	.word	0x20000240

0800170c <RestoreCalValuesFromFLASH>:

/*Function restoring  saved cal data from FLASH memory */
void RestoreCalValuesFromFLASH(void)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
int i;

	for(i = 0; i < sizeof(CalibrationValues); i++)
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	e00a      	b.n	800172e <RestoreCalValuesFromFLASH+0x22>
	{
		((uint8_t *) &CalibrationValues)[i] = Cal_savedInFLASH[i];
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <RestoreCalValuesFromFLASH+0x5c>)
 800171c:	4413      	add	r3, r2
 800171e:	4913      	ldr	r1, [pc, #76]	; (800176c <RestoreCalValuesFromFLASH+0x60>)
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	440a      	add	r2, r1
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(CalibrationValues); i++)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3301      	adds	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b27      	cmp	r3, #39	; 0x27
 8001732:	d9f1      	bls.n	8001718 <RestoreCalValuesFromFLASH+0xc>
	}
	if (CalibrationValues.Indicator == 0xffffffff)
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <RestoreCalValuesFromFLASH+0x5c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d10d      	bne.n	800175a <RestoreCalValuesFromFLASH+0x4e>
	{
		for(i = 0; i < sizeof(CalibrationValues); i++)
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	e007      	b.n	8001754 <RestoreCalValuesFromFLASH+0x48>
		{
			((uint8_t *) &CalibrationValues)[i] = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <RestoreCalValuesFromFLASH+0x5c>)
 8001748:	4413      	add	r3, r2
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < sizeof(CalibrationValues); i++)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3301      	adds	r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b27      	cmp	r3, #39	; 0x27
 8001758:	d9f4      	bls.n	8001744 <RestoreCalValuesFromFLASH+0x38>
		}
	}

}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20005c4c 	.word	0x20005c4c
 800176c:	0803a000 	.word	0x0803a000

08001770 <StoreCalData2FLASH>:

void StoreCalData2FLASH(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
	uint32_t temp, sofar=0, PageAddress=0;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef flash_conf;

	osTimerStop(myTimer01Handle);
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <StoreCalData2FLASH+0xa8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f008 ffd6 	bl	800a734 <osTimerStop>
	StatCurrentWh.FlashPageCounter++;
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <StoreCalData2FLASH+0xac>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	4a23      	ldr	r2, [pc, #140]	; (800181c <StoreCalData2FLASH+0xac>)
 8001790:	6013      	str	r3, [r2, #0]
	flash_conf.TypeErase = FLASH_TYPEERASE_PAGES;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
	flash_conf.NbPages = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
	flash_conf.Page = NO_FLASH_PAGES+64;
 800179a:	2374      	movs	r3, #116	; 0x74
 800179c:	60fb      	str	r3, [r7, #12]
	//flash_conf.Page = (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0];
	flash_conf.Banks = FLASH_BANK_1;
 800179e:	2301      	movs	r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
#ifndef DEBUG_EN
	HAL_FLASH_Unlock();
 80017a2:	f004 fbcb 	bl	8005f3c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <StoreCalData2FLASH+0xb0>)
 80017a8:	22b3      	movs	r2, #179	; 0xb3
 80017aa:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&flash_conf, &temp);// FLASH_Erase_Sector(&Stats_savedInFLASH+RecentPage_pointer, VOLTAGE_RANGE_3);
 80017ac:	f107 0214 	add.w	r2, r7, #20
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 fcb3 	bl	8006120 <HAL_FLASHEx_Erase>
	//HAL_FLASH_Lock();
	//HAL_FLASH_Unlock();
	//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );

	 while (sofar<((sizeof(CalibrationValues)/(4*2))))	//should divided by number of bytes@word wrote at once
 80017ba:	e01f      	b.n	80017fc <StoreCalData2FLASH+0x8c>
	 {
		 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&Cal_savedInFLASH[PageAddress], ((uint64_t *) &CalibrationValues)[sofar]) == HAL_OK)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	4a19      	ldr	r2, [pc, #100]	; (8001824 <StoreCalData2FLASH+0xb4>)
 80017c0:	4413      	add	r3, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <StoreCalData2FLASH+0xb8>)
 80017ca:	4413      	add	r3, r2
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	2000      	movs	r0, #0
 80017d2:	f004 fb47 	bl	8005e64 <HAL_FLASH_Program>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d106      	bne.n	80017ea <StoreCalData2FLASH+0x7a>
		 {
			 PageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	3308      	adds	r3, #8
 80017e0:	61bb      	str	r3, [r7, #24]
			 sofar++;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3301      	adds	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	e008      	b.n	80017fc <StoreCalData2FLASH+0x8c>
		 }
		 else
		 {
		   /* Error occurred while writing data in Flash memory*/
			 osTimerStart(myTimer01Handle, 100);
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <StoreCalData2FLASH+0xa8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2164      	movs	r1, #100	; 0x64
 80017f0:	4618      	mov	r0, r3
 80017f2:	f008 ff71 	bl	800a6d8 <osTimerStart>
			 return HAL_FLASH_GetError ();
 80017f6:	f004 fbd3 	bl	8005fa0 <HAL_FLASH_GetError>
 80017fa:	e00a      	b.n	8001812 <StoreCalData2FLASH+0xa2>
	 while (sofar<((sizeof(CalibrationValues)/(4*2))))	//should divided by number of bytes@word wrote at once
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d9dc      	bls.n	80017bc <StoreCalData2FLASH+0x4c>
		 }
	}
#endif
	HAL_FLASH_Lock();
 8001802:	f004 fbbd 	bl	8005f80 <HAL_FLASH_Lock>
	osTimerStart(myTimer01Handle, 100);
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <StoreCalData2FLASH+0xa8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2164      	movs	r1, #100	; 0x64
 800180c:	4618      	mov	r0, r3
 800180e:	f008 ff63 	bl	800a6d8 <osTimerStart>
}
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20005d90 	.word	0x20005d90
 800181c:	20005a20 	.word	0x20005a20
 8001820:	40022000 	.word	0x40022000
 8001824:	0803a000 	.word	0x0803a000
 8001828:	20005c4c 	.word	0x20005c4c

0800182c <RestoreStatisticsFromFLASH>:

/*Function restoring last saved statistics from FLASH memory */
void RestoreStatisticsFromFLASH(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
	uint32_t i, curr_val=0, Highest_val=0;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
	//Stats_savedInFLASH[NO_FLASH_PAGES][FLASH_PAGE_SIZE]
	RecentPage_pointer = 0;
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <RestoreStatisticsFromFLASH+0x10c>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (NO_FLASH_PAGES); i++)
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e02f      	b.n	80018a6 <RestoreStatisticsFromFLASH+0x7a>
		{
			for(uint32_t j=4;j>0;)
 8001846:	2304      	movs	r3, #4
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	e00d      	b.n	8001868 <RestoreStatisticsFromFLASH+0x3c>
			{
				j--;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	3b01      	subs	r3, #1
 8001850:	603b      	str	r3, [r7, #0]
				curr_val = (curr_val<<8) | Stats_savedInFLASH[i][j];
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	4939      	ldr	r1, [pc, #228]	; (800193c <RestoreStatisticsFromFLASH+0x110>)
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	02d2      	lsls	r2, r2, #11
 800185c:	4411      	add	r1, r2
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	440a      	add	r2, r1
 8001862:	7812      	ldrb	r2, [r2, #0]
 8001864:	4313      	orrs	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
			for(uint32_t j=4;j>0;)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ee      	bne.n	800184c <RestoreStatisticsFromFLASH+0x20>
			}
			if (curr_val == 0xffffffff)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d101      	bne.n	800187a <RestoreStatisticsFromFLASH+0x4e>
			{
				curr_val = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
			}
			if (curr_val > Highest_val)
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	d909      	bls.n	8001896 <RestoreStatisticsFromFLASH+0x6a>
			{
				RecentPage_pointer = i;
 8001882:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <RestoreStatisticsFromFLASH+0x10c>)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6013      	str	r3, [r2, #0]
				Highest_val = curr_val;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	607b      	str	r3, [r7, #4]
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800188c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001890:	482b      	ldr	r0, [pc, #172]	; (8001940 <RestoreStatisticsFromFLASH+0x114>)
 8001892:	f004 ff15 	bl	80066c0 <HAL_GPIO_TogglePin>
			}
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001896:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189a:	4829      	ldr	r0, [pc, #164]	; (8001940 <RestoreStatisticsFromFLASH+0x114>)
 800189c:	f004 ff10 	bl	80066c0 <HAL_GPIO_TogglePin>
	for (i = 0; i < (NO_FLASH_PAGES); i++)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b33      	cmp	r3, #51	; 0x33
 80018aa:	d9cc      	bls.n	8001846 <RestoreStatisticsFromFLASH+0x1a>
		}

	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b2:	4823      	ldr	r0, [pc, #140]	; (8001940 <RestoreStatisticsFromFLASH+0x114>)
 80018b4:	f004 feec 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018be:	4820      	ldr	r0, [pc, #128]	; (8001940 <RestoreStatisticsFromFLASH+0x114>)
 80018c0:	f004 fee6 	bl	8006690 <HAL_GPIO_WritePin>

	for(i = 0; i < sizeof(Stat_Flash); i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	e00e      	b.n	80018e8 <RestoreStatisticsFromFLASH+0xbc>
	{
		((uint8_t *) &Stat_Flash)[i] = Stats_savedInFLASH[RecentPage_pointer][i];
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <RestoreStatisticsFromFLASH+0x10c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	491c      	ldr	r1, [pc, #112]	; (8001944 <RestoreStatisticsFromFLASH+0x118>)
 80018d2:	440b      	add	r3, r1
 80018d4:	4919      	ldr	r1, [pc, #100]	; (800193c <RestoreStatisticsFromFLASH+0x110>)
 80018d6:	02d2      	lsls	r2, r2, #11
 80018d8:	4411      	add	r1, r2
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	440a      	add	r2, r1
 80018de:	7812      	ldrb	r2, [r2, #0]
 80018e0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(Stat_Flash); i++)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3301      	adds	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2baf      	cmp	r3, #175	; 0xaf
 80018ec:	d9ed      	bls.n	80018ca <RestoreStatisticsFromFLASH+0x9e>
	}
	if (Stat_Flash.Time_NightTime == 0xffffffff)
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <RestoreStatisticsFromFLASH+0x118>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f6:	d113      	bne.n	8001920 <RestoreStatisticsFromFLASH+0xf4>
	{
		for(i = 0; i < sizeof(Stat_Flash); i++) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e00c      	b.n	8001918 <RestoreStatisticsFromFLASH+0xec>
			    ((uint8_t *) &StatCurrentWh)[i] = 0;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <RestoreStatisticsFromFLASH+0x11c>)
 8001902:	4413      	add	r3, r2
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
			    ((uint8_t *) &Stat_Flash)[i] = 0;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <RestoreStatisticsFromFLASH+0x118>)
 800190c:	4413      	add	r3, r2
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < sizeof(Stat_Flash); i++) {
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2baf      	cmp	r3, #175	; 0xaf
 800191c:	d9ef      	bls.n	80018fe <RestoreStatisticsFromFLASH+0xd2>
			}
	}
	else StatCurrentWh = Stat_Flash;
}
 800191e:	e007      	b.n	8001930 <RestoreStatisticsFromFLASH+0x104>
	else StatCurrentWh = Stat_Flash;
 8001920:	4a09      	ldr	r2, [pc, #36]	; (8001948 <RestoreStatisticsFromFLASH+0x11c>)
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <RestoreStatisticsFromFLASH+0x118>)
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	23b0      	movs	r3, #176	; 0xb0
 800192a:	461a      	mov	r2, r3
 800192c:	f00b fdf9 	bl	800d522 <memcpy>
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20006194 	.word	0x20006194
 800193c:	08020000 	.word	0x08020000
 8001940:	48000400 	.word	0x48000400
 8001944:	20006208 	.word	0x20006208
 8001948:	20005a20 	.word	0x20005a20

0800194c <StoreStatistics2FLASH>:

/*Function storing last  statistics to FLASH memory */
void StoreStatistics2FLASH(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
	uint32_t temp, sofar=0, StartPageAddress=0;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef flash_conf;

	osTimerStop(myTimer01Handle);
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <StoreStatistics2FLASH+0xec>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f008 fee8 	bl	800a734 <osTimerStop>
	Stat_Flash = StatCurrentWh;
 8001964:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <StoreStatistics2FLASH+0xf0>)
 8001966:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <StoreStatistics2FLASH+0xf4>)
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	23b0      	movs	r3, #176	; 0xb0
 800196e:	461a      	mov	r2, r3
 8001970:	f00b fdd7 	bl	800d522 <memcpy>
	if (RecentPage_pointer < NO_FLASH_PAGES-1) RecentPage_pointer++;
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <StoreStatistics2FLASH+0xf8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b32      	cmp	r3, #50	; 0x32
 800197a:	d805      	bhi.n	8001988 <StoreStatistics2FLASH+0x3c>
 800197c:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <StoreStatistics2FLASH+0xf8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	4a30      	ldr	r2, [pc, #192]	; (8001a44 <StoreStatistics2FLASH+0xf8>)
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e002      	b.n	800198e <StoreStatistics2FLASH+0x42>
	else RecentPage_pointer = 0;
 8001988:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <StoreStatistics2FLASH+0xf8>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
	StatCurrentWh.FlashPageCounter++;
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <StoreStatistics2FLASH+0xf4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	4a2a      	ldr	r2, [pc, #168]	; (8001a40 <StoreStatistics2FLASH+0xf4>)
 8001996:	6013      	str	r3, [r2, #0]
//	return;
	flash_conf.TypeErase = FLASH_TYPEERASE_PAGES;
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
	flash_conf.NbPages = 1;
 800199c:	2301      	movs	r3, #1
 800199e:	613b      	str	r3, [r7, #16]
	flash_conf.Page = RecentPage_pointer + 64;
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <StoreStatistics2FLASH+0xf8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3340      	adds	r3, #64	; 0x40
 80019a6:	60fb      	str	r3, [r7, #12]
	//flash_conf.Page = (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0];
	flash_conf.Banks = FLASH_BANK_1;
 80019a8:	2301      	movs	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
#ifndef DEBUG_EN
	HAL_FLASH_Unlock();
 80019ac:	f004 fac6 	bl	8005f3c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <StoreStatistics2FLASH+0xfc>)
 80019b2:	22b3      	movs	r2, #179	; 0xb3
 80019b4:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&flash_conf, &temp);// FLASH_Erase_Sector(&Stats_savedInFLASH+RecentPage_pointer, VOLTAGE_RANGE_3);
 80019b6:	f107 0214 	add.w	r2, r7, #20
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f004 fbae 	bl	8006120 <HAL_FLASHEx_Erase>
	//HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0], ((uint8_t *) &Stat_Flash)[i]);
	HAL_FLASH_Lock();
 80019c4:	f004 fadc 	bl	8005f80 <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 80019c8:	f004 fab8 	bl	8005f3c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <StoreStatistics2FLASH+0xfc>)
 80019ce:	22b3      	movs	r2, #179	; 0xb3
 80019d0:	611a      	str	r2, [r3, #16]

	 while (sofar<((sizeof(Stat_Flash)/(4*2))))	//should divided by number of bytes@word wrote at once
 80019d2:	e023      	b.n	8001a1c <StoreStatistics2FLASH+0xd0>
		   {
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][StartPageAddress], ((uint64_t *) &Stat_Flash)[sofar]) == HAL_OK)
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <StoreStatistics2FLASH+0xf8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	02da      	lsls	r2, r3, #11
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4413      	add	r3, r2
 80019de:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <StoreStatistics2FLASH+0x100>)
 80019e0:	4413      	add	r3, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <StoreStatistics2FLASH+0xf0>)
 80019ea:	4413      	add	r3, r2
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	2000      	movs	r0, #0
 80019f2:	f004 fa37 	bl	8005e64 <HAL_FLASH_Program>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d106      	bne.n	8001a0a <StoreStatistics2FLASH+0xbe>
		     {
		    	 StartPageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3308      	adds	r3, #8
 8001a00:	61bb      	str	r3, [r7, #24]
		    	 sofar++;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	e008      	b.n	8001a1c <StoreStatistics2FLASH+0xd0>
		     }
		     else
		     {
		       /* Error occurred while writing data in Flash memory*/
		    	 osTimerStart(myTimer01Handle, 100);
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <StoreStatistics2FLASH+0xec>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2164      	movs	r1, #100	; 0x64
 8001a10:	4618      	mov	r0, r3
 8001a12:	f008 fe61 	bl	800a6d8 <osTimerStart>
		    	 return HAL_FLASH_GetError ();
 8001a16:	f004 fac3 	bl	8005fa0 <HAL_FLASH_GetError>
 8001a1a:	e00a      	b.n	8001a32 <StoreStatistics2FLASH+0xe6>
	 while (sofar<((sizeof(Stat_Flash)/(4*2))))	//should divided by number of bytes@word wrote at once
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b15      	cmp	r3, #21
 8001a20:	d9d8      	bls.n	80019d4 <StoreStatistics2FLASH+0x88>
		     }
		   }
#endif
	HAL_FLASH_Lock();
 8001a22:	f004 faad 	bl	8005f80 <HAL_FLASH_Lock>
	osTimerStart(myTimer01Handle, 100);
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <StoreStatistics2FLASH+0xec>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2164      	movs	r1, #100	; 0x64
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f008 fe53 	bl	800a6d8 <osTimerStart>
}
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20005d90 	.word	0x20005d90
 8001a3c:	20006208 	.word	0x20006208
 8001a40:	20005a20 	.word	0x20005a20
 8001a44:	20006194 	.word	0x20006194
 8001a48:	40022000 	.word	0x40022000
 8001a4c:	08020000 	.word	0x08020000

08001a50 <DeleteStatistics2FLASH>:
/*Function storing last  statistics to FLASH memory */
void DeleteStatistics2FLASH(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
	uint32_t temp, i;
	FLASH_EraseInitTypeDef flash_conf;

	osTimerStop(myTimer01Handle);
 8001a56:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <DeleteStatistics2FLASH+0xa4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f008 fe6a 	bl	800a734 <osTimerStop>
	for(i = 0; i < sizeof(Stat_Flash); i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e00c      	b.n	8001a80 <DeleteStatistics2FLASH+0x30>
	{
		((uint8_t *) &StatCurrentWh)[i] = 0;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <DeleteStatistics2FLASH+0xa8>)
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
		((uint8_t *) &Stat_Flash)[i] = 0;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	4a22      	ldr	r2, [pc, #136]	; (8001afc <DeleteStatistics2FLASH+0xac>)
 8001a74:	4413      	add	r3, r2
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(Stat_Flash); i++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2baf      	cmp	r3, #175	; 0xaf
 8001a84:	d9ef      	bls.n	8001a66 <DeleteStatistics2FLASH+0x16>
	}
	RecentPage_pointer = 0;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <DeleteStatistics2FLASH+0xb0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
	flash_conf.TypeErase = FLASH_TYPEERASE_PAGES;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	603b      	str	r3, [r7, #0]
	flash_conf.NbPages = 1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
	flash_conf.Page = RecentPage_pointer + 64;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <DeleteStatistics2FLASH+0xb0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3340      	adds	r3, #64	; 0x40
 8001a9a:	60bb      	str	r3, [r7, #8]
	flash_conf.Banks = FLASH_BANK_1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	607b      	str	r3, [r7, #4]
#ifndef DEBUG_EN
	HAL_FLASH_Unlock();
 8001aa0:	f004 fa4c 	bl	8005f3c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <DeleteStatistics2FLASH+0xb4>)
 8001aa6:	22b3      	movs	r2, #179	; 0xb3
 8001aa8:	611a      	str	r2, [r3, #16]
	while (RecentPage_pointer < NO_FLASH_PAGES-1)
 8001aaa:	e00f      	b.n	8001acc <DeleteStatistics2FLASH+0x7c>
	{
		HAL_FLASHEx_Erase(&flash_conf, &temp);
 8001aac:	f107 0210 	add.w	r2, r7, #16
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fb33 	bl	8006120 <HAL_FLASHEx_Erase>
		RecentPage_pointer++;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <DeleteStatistics2FLASH+0xb0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <DeleteStatistics2FLASH+0xb0>)
 8001ac2:	6013      	str	r3, [r2, #0]
		flash_conf.Page = RecentPage_pointer + 64;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <DeleteStatistics2FLASH+0xb0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3340      	adds	r3, #64	; 0x40
 8001aca:	60bb      	str	r3, [r7, #8]
	while (RecentPage_pointer < NO_FLASH_PAGES-1)
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <DeleteStatistics2FLASH+0xb0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b32      	cmp	r3, #50	; 0x32
 8001ad2:	d9eb      	bls.n	8001aac <DeleteStatistics2FLASH+0x5c>
	}

#endif
	HAL_FLASH_Lock();
 8001ad4:	f004 fa54 	bl	8005f80 <HAL_FLASH_Lock>
	RecentPage_pointer = 0;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <DeleteStatistics2FLASH+0xb0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
	osTimerStart(myTimer01Handle, 100);
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <DeleteStatistics2FLASH+0xa4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2164      	movs	r1, #100	; 0x64
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f008 fdf7 	bl	800a6d8 <osTimerStart>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20005d90 	.word	0x20005d90
 8001af8:	20005a20 	.word	0x20005a20
 8001afc:	20006208 	.word	0x20006208
 8001b00:	20006194 	.word	0x20006194
 8001b04:	40022000 	.word	0x40022000

08001b08 <Calculate_WattSeconds>:
/*function launched every second to calculate Watt-seconds for given machine state on basis of flags */
void Calculate_WattSeconds(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
#ifndef TESTING_VALUES
	if (StatCountFlagsWs.Ws_BattIn)		//Watt-seconds when battery is charging
 8001b0c:	4b92      	ldr	r3, [pc, #584]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d011      	beq.n	8001b38 <Calculate_WattSeconds+0x30>
	{
		StatCountFlagsWs.Ws_BattIn = 0;
 8001b14:	4b90      	ldr	r3, [pc, #576]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
		StatCurrentWs.Ws_BattIn += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 8001b1a:	4b90      	ldr	r3, [pc, #576]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4b90      	ldr	r3, [pc, #576]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	498f      	ldr	r1, [pc, #572]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001b24:	6849      	ldr	r1, [r1, #4]
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	498e      	ldr	r1, [pc, #568]	; (8001d64 <Calculate_WattSeconds+0x25c>)
 8001b2c:	fba1 1303 	umull	r1, r3, r1, r3
 8001b30:	0b5b      	lsrs	r3, r3, #13
 8001b32:	4413      	add	r3, r2
 8001b34:	4a89      	ldr	r2, [pc, #548]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001b36:	6013      	str	r3, [r2, #0]
	}
	if (StatCountFlagsWs.Ws_BattNoInv)		//Watt-seconds when battery is charging but energy should go into mains (but cant)
 8001b38:	4b87      	ldr	r3, [pc, #540]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d011      	beq.n	8001b64 <Calculate_WattSeconds+0x5c>
	{
		StatCountFlagsWs.Ws_BattNoInv = 0;
 8001b40:	4b85      	ldr	r3, [pc, #532]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	605a      	str	r2, [r3, #4]
		StatCurrentWs.Ws_BattNoInv += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 8001b46:	4b85      	ldr	r3, [pc, #532]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4b85      	ldr	r3, [pc, #532]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4984      	ldr	r1, [pc, #528]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001b50:	6849      	ldr	r1, [r1, #4]
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4983      	ldr	r1, [pc, #524]	; (8001d64 <Calculate_WattSeconds+0x25c>)
 8001b58:	fba1 1303 	umull	r1, r3, r1, r3
 8001b5c:	0b5b      	lsrs	r3, r3, #13
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a7e      	ldr	r2, [pc, #504]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001b62:	6053      	str	r3, [r2, #4]
		//StatCurrentWs.Time_NoInv++;	//double count
	}
	if (StatCountFlagsWs.Ws_Inverter)		//Watt-seconds for inverter
 8001b64:	4b7c      	ldr	r3, [pc, #496]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d011      	beq.n	8001b90 <Calculate_WattSeconds+0x88>
	{
		StatCountFlagsWs.Ws_Inverter = 0;
 8001b6c:	4b7a      	ldr	r3, [pc, #488]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
		StatCurrentWs.Ws_Inverter += (Adc1Measurements.PV_voltage*Adc1Measurements.Inv_current)/10000;
 8001b72:	4b7a      	ldr	r3, [pc, #488]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	4b7a      	ldr	r3, [pc, #488]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4979      	ldr	r1, [pc, #484]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001b7c:	6809      	ldr	r1, [r1, #0]
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4978      	ldr	r1, [pc, #480]	; (8001d64 <Calculate_WattSeconds+0x25c>)
 8001b84:	fba1 1303 	umull	r1, r3, r1, r3
 8001b88:	0b5b      	lsrs	r3, r3, #13
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a73      	ldr	r2, [pc, #460]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001b8e:	6093      	str	r3, [r2, #8]
	}
	if (StatCountFlagsWs.Ws_BattOut)		//Watt-seconds when battery is discharging
 8001b90:	4b71      	ldr	r3, [pc, #452]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d011      	beq.n	8001bbc <Calculate_WattSeconds+0xb4>
	{
		StatCountFlagsWs.Ws_BattOut = 0;
 8001b98:	4b6f      	ldr	r3, [pc, #444]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
		StatCurrentWs.Ws_BattOut += (Adc1Measurements.Batt_voltage*Adc1Measurements.Inv_current)/10000;
 8001b9e:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	496e      	ldr	r1, [pc, #440]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001ba8:	6809      	ldr	r1, [r1, #0]
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	496d      	ldr	r1, [pc, #436]	; (8001d64 <Calculate_WattSeconds+0x25c>)
 8001bb0:	fba1 1303 	umull	r1, r3, r1, r3
 8001bb4:	0b5b      	lsrs	r3, r3, #13
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a68      	ldr	r2, [pc, #416]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001bba:	60d3      	str	r3, [r2, #12]
	}
	if (StatCountFlagsWs.Ws_BattRecharge)		//Watt-seconds when battery is recharging
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d011      	beq.n	8001be8 <Calculate_WattSeconds+0xe0>
	{
		StatCountFlagsWs.Ws_BattRecharge = 0;
 8001bc4:	4b64      	ldr	r3, [pc, #400]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
		StatCurrentWs.Ws_BattRecharge += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 8001bca:	4b64      	ldr	r3, [pc, #400]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	4b64      	ldr	r3, [pc, #400]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4963      	ldr	r1, [pc, #396]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001bd4:	6849      	ldr	r1, [r1, #4]
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4962      	ldr	r1, [pc, #392]	; (8001d64 <Calculate_WattSeconds+0x25c>)
 8001bdc:	fba1 1303 	umull	r1, r3, r1, r3
 8001be0:	0b5b      	lsrs	r3, r3, #13
 8001be2:	4413      	add	r3, r2
 8001be4:	4a5d      	ldr	r2, [pc, #372]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001be6:	6113      	str	r3, [r2, #16]
	}
	if (StatCountFlagsWs.Time_NightTime)		//darkness time
 8001be8:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <Calculate_WattSeconds+0xf8>
	{
		StatCountFlagsWs.Time_NightTime = 0;
 8001bf0:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
		StatCurrentWs.Time_NightTime++;
 8001bf6:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a57      	ldr	r2, [pc, #348]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001bfe:	61d3      	str	r3, [r2, #28]
	}
	if (StatCountFlagsWs.Time_NoBattery2Chg)		//time when battery is not ready to be charged
 8001c00:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <Calculate_WattSeconds+0x110>
	{
		StatCountFlagsWs.Time_NoBattery2Chg = 0;
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	621a      	str	r2, [r3, #32]
		StatCurrentWs.Time_NoBattery2Chg++;
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001c16:	6213      	str	r3, [r2, #32]
	}
	if (StatCountFlagsWs.Time_NoInv)		//time when INV is not working
 8001c18:	4b4f      	ldr	r3, [pc, #316]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <Calculate_WattSeconds+0x128>
	{
		StatCountFlagsWs.Time_NoInv = 0;
 8001c20:	4b4d      	ldr	r3, [pc, #308]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
		StatCurrentWs.Time_NoInv++;
 8001c26:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a4b      	ldr	r2, [pc, #300]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001c2e:	6193      	str	r3, [r2, #24]
	}
	if (StatCountFlagsWs.Time_DuskTime)		//time after dusk
 8001c30:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <Calculate_WattSeconds+0x140>
	{
		StatCountFlagsWs.Time_DuskTime = 0;
 8001c38:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	649a      	str	r2, [r3, #72]	; 0x48
		StatCurrentWs.Time_DuskTime++;
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a45      	ldr	r2, [pc, #276]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001c46:	6493      	str	r3, [r2, #72]	; 0x48
	}
	if (StatCountFlagsWs.Time_Daytime)		//daytime
 8001c48:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <Calculate_WattSeconds+0x15c>
	{
		StatCountFlagsWs.Time_Daytime=0;
 8001c50:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	63da      	str	r2, [r3, #60]	; 0x3c
		StatCurrentWh.DayDuration_current++;
 8001c56:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001c58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	4a42      	ldr	r2, [pc, #264]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001c60:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	}
	if (StatCountFlagsWs.ChgAs)		//count mAs
 8001c64:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <Calculate_WattSeconds+0x178>
	{
		StatCountFlagsWs.ChgAs = 0;
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	64da      	str	r2, [r3, #76]	; 0x4c
		StatCurrentWs.ChgAs += (Adc1Measurements.PV_current);
 8001c72:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a37      	ldr	r2, [pc, #220]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
	}
	if (StatCountFlagsWs.DschgAs)		//count mAs
 8001c80:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d009      	beq.n	8001c9c <Calculate_WattSeconds+0x194>
	{
		StatCountFlagsWs.DschgAs = 0;
 8001c88:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <Calculate_WattSeconds+0x250>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	651a      	str	r2, [r3, #80]	; 0x50
		StatCurrentWs.DschgAs += (Adc1Measurements.Inv_current);
 8001c8e:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c92:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a30      	ldr	r2, [pc, #192]	; (8001d5c <Calculate_WattSeconds+0x254>)
 8001c9a:	6513      	str	r3, [r2, #80]	; 0x50
	{
		StatCountFlagsWs.DschgAs = 0;
		StatCurrentWs.DschgAs += (Adc1Measurements.PV_current)
	}
#endif
	if (Adc1Measurements.NTC2_Inverter_mos >= StatCurrentWh.MaxTempInvMos)
 8001c9c:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d308      	bcc.n	8001cba <Calculate_WattSeconds+0x1b2>
	{
		StatCurrentWh.MaxTempInvMos = Adc1Measurements.NTC2_Inverter_mos;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	4a2e      	ldr	r2, [pc, #184]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cae:	6353      	str	r3, [r2, #52]	; 0x34
		StatCurrentWh.MaxTempInvMosCntr++;
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cb8:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (Adc1Measurements.NTC3_Battery_mos >= StatCurrentWh.MaxTempBatMos)
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d308      	bcc.n	8001cd8 <Calculate_WattSeconds+0x1d0>
	{
		StatCurrentWh.MaxTempBatMos = Adc1Measurements.NTC3_Battery_mos;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	4a27      	ldr	r2, [pc, #156]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001ccc:	63d3      	str	r3, [r2, #60]	; 0x3c
		StatCurrentWh.MaxTempBatMosCntr++;
 8001cce:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
	}
	if (Adc1Measurements.Inv_current >= StatCurrentWh.MaxInvCurrent)
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d308      	bcc.n	8001cf6 <Calculate_WattSeconds+0x1ee>
	{
		StatCurrentWh.MaxInvCurrent = Adc1Measurements.Inv_current;
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cea:	6453      	str	r3, [r2, #68]	; 0x44
		StatCurrentWh.MaxInvCurrentCntr++;
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cf4:	6493      	str	r3, [r2, #72]	; 0x48
	}
	if (Adc1Measurements.PV_current >= StatCurrentWh.MaxPVCurrent)
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d308      	bcc.n	8001d14 <Calculate_WattSeconds+0x20c>
	{
		StatCurrentWh.MaxPVCurrent = Adc1Measurements.PV_current;
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
		StatCurrentWh.MaxPVCurrentCntr++;
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a15      	ldr	r2, [pc, #84]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d12:	6513      	str	r3, [r2, #80]	; 0x50
	}
	if (Adc1Measurements.Batt_voltage >= StatCurrentWh.MaxBatVoltage)
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d308      	bcc.n	8001d32 <Calculate_WattSeconds+0x22a>
	{
		StatCurrentWh.MaxBatVoltage = Adc1Measurements.Batt_voltage;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d26:	6553      	str	r3, [r2, #84]	; 0x54
		StatCurrentWh.MaxBatVoltageCntr++;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
	}
	if (Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2bf0      	cmp	r3, #240	; 0xf0
 8001d38:	d927      	bls.n	8001d8a <Calculate_WattSeconds+0x282>
	{
		if (StatCurrentWh.MinBatVoltage <= BATT_CRITICAL_MIN_VOLTAGE)	//first launch value is "0", this 'if' is to cover that option
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2bf0      	cmp	r3, #240	; 0xf0
 8001d40:	d814      	bhi.n	8001d6c <Calculate_WattSeconds+0x264>
		{
			StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <Calculate_WattSeconds+0x258>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d48:	65d3      	str	r3, [r2, #92]	; 0x5c
			StatCurrentWh.MinBatVoltageCntr++;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4e:	3301      	adds	r3, #1
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <Calculate_WattSeconds+0x260>)
 8001d52:	6613      	str	r3, [r2, #96]	; 0x60
		{
			StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
			StatCurrentWh.MinBatVoltageCntr++;
		}
	}
}
 8001d54:	e019      	b.n	8001d8a <Calculate_WattSeconds+0x282>
 8001d56:	bf00      	nop
 8001d58:	200059bc 	.word	0x200059bc
 8001d5c:	20005c74 	.word	0x20005c74
 8001d60:	20005998 	.word	0x20005998
 8001d64:	d1b71759 	.word	0xd1b71759
 8001d68:	20005a20 	.word	0x20005a20
		else if (Adc1Measurements.Batt_voltage <= StatCurrentWh.MinBatVoltage)
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <Calculate_WattSeconds+0x28c>)
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <Calculate_WattSeconds+0x290>)
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d808      	bhi.n	8001d8a <Calculate_WattSeconds+0x282>
			StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <Calculate_WattSeconds+0x28c>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <Calculate_WattSeconds+0x290>)
 8001d7e:	65d3      	str	r3, [r2, #92]	; 0x5c
			StatCurrentWh.MinBatVoltageCntr++;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <Calculate_WattSeconds+0x290>)
 8001d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d84:	3301      	adds	r3, #1
 8001d86:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <Calculate_WattSeconds+0x290>)
 8001d88:	6613      	str	r3, [r2, #96]	; 0x60
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20005998 	.word	0x20005998
 8001d98:	20005a20 	.word	0x20005a20

08001d9c <Calculate_WattHours>:

/*function launched every hour to calculate Watt-hours watt-seconds hourly statistics */
void Calculate_WattHours(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
	StatCurrentWh.Wh_BattIn=+StatCurrentWs.Ws_BattIn/SECONDS_HOUR;
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a41      	ldr	r2, [pc, #260]	; (8001eac <Calculate_WattHours+0x110>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0adb      	lsrs	r3, r3, #11
 8001dac:	4a40      	ldr	r2, [pc, #256]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001dae:	6053      	str	r3, [r2, #4]
	StatCurrentWh.Wh_BattNoInv+=StatCurrentWs.Ws_BattNoInv/SECONDS_HOUR;
 8001db0:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	493c      	ldr	r1, [pc, #240]	; (8001eac <Calculate_WattHours+0x110>)
 8001dba:	fba1 1303 	umull	r1, r3, r1, r3
 8001dbe:	0adb      	lsrs	r3, r3, #11
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001dc4:	6093      	str	r3, [r2, #8]
	StatCurrentWh.Time_NoInv+=StatCurrentWs.Time_NoInv;
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001dc8:	699a      	ldr	r2, [r3, #24]
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a37      	ldr	r2, [pc, #220]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001dd2:	6193      	str	r3, [r2, #24]
	StatCurrentWh.Wh_Inverter+=StatCurrentWs.Ws_Inverter/SECONDS_HOUR;
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4933      	ldr	r1, [pc, #204]	; (8001eac <Calculate_WattHours+0x110>)
 8001dde:	fba1 1303 	umull	r1, r3, r1, r3
 8001de2:	0adb      	lsrs	r3, r3, #11
 8001de4:	4413      	add	r3, r2
 8001de6:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001de8:	60d3      	str	r3, [r2, #12]
	StatCurrentWh.Wh_BattOut+=StatCurrentWs.Ws_BattOut/SECONDS_HOUR;
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	492e      	ldr	r1, [pc, #184]	; (8001eac <Calculate_WattHours+0x110>)
 8001df4:	fba1 1303 	umull	r1, r3, r1, r3
 8001df8:	0adb      	lsrs	r3, r3, #11
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001dfe:	6113      	str	r3, [r2, #16]
	StatCurrentWh.Wh_BattRecharge+=StatCurrentWs.Ws_BattRecharge/SECONDS_HOUR;
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	4928      	ldr	r1, [pc, #160]	; (8001eac <Calculate_WattHours+0x110>)
 8001e0a:	fba1 1303 	umull	r1, r3, r1, r3
 8001e0e:	0adb      	lsrs	r3, r3, #11
 8001e10:	4413      	add	r3, r2
 8001e12:	4a27      	ldr	r2, [pc, #156]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001e14:	6153      	str	r3, [r2, #20]
	StatCurrentWh.Chg_Ah_current+=StatCurrentWs.ChgAs/SECONDS_HOUR;
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001e18:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e20:	4922      	ldr	r1, [pc, #136]	; (8001eac <Calculate_WattHours+0x110>)
 8001e22:	fba1 1303 	umull	r1, r3, r1, r3
 8001e26:	0adb      	lsrs	r3, r3, #11
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001e2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	//StatCurrentWh.Chg_Ah_current=StatCurrentWh.Chg_Ah_current/1000;	//because current is stored in 0,001A
	StatCurrentWh.Dschg_Ah_current+=StatCurrentWs.DschgAs/SECONDS_HOUR;
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001e32:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e38:	491c      	ldr	r1, [pc, #112]	; (8001eac <Calculate_WattHours+0x110>)
 8001e3a:	fba1 1303 	umull	r1, r3, r1, r3
 8001e3e:	0adb      	lsrs	r3, r3, #11
 8001e40:	4413      	add	r3, r2
 8001e42:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001e44:	67d3      	str	r3, [r2, #124]	; 0x7c
	//StatCurrentWh.Dschg_Ah_current=StatCurrentWh.Dschg_Ah_current/1000;	//because current is stored in 0,001A
	StatCurrentWh.Time_NightTime+=StatCurrentWs.Time_NightTime;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001e52:	61d3      	str	r3, [r2, #28]
	StatCurrentWh.Time_NoBattery2Chg+=StatCurrentWs.Time_NoBattery2Chg;
 8001e54:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001e56:	6a1a      	ldr	r2, [r3, #32]
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <Calculate_WattHours+0x114>)
 8001e60:	6213      	str	r3, [r2, #32]
	StatCurrentWs.ChgAs=0;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	64da      	str	r2, [r3, #76]	; 0x4c
	StatCurrentWs.DschgAs=0;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	651a      	str	r2, [r3, #80]	; 0x50
	StatCurrentWs.Ws_BattIn=0;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
	StatCurrentWs.Ws_BattNoInv=0;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
	StatCurrentWs.Time_NoInv=0;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
	StatCurrentWs.Ws_Inverter=0;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
	StatCurrentWs.Ws_BattOut=0;
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
	StatCurrentWs.Ws_BattRecharge=0;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
	StatCurrentWs.Time_NightTime=0;
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	61da      	str	r2, [r3, #28]
	StatCurrentWs.Time_NoBattery2Chg=0;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <Calculate_WattHours+0x10c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	621a      	str	r2, [r3, #32]
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	20005c74 	.word	0x20005c74
 8001eac:	91a2b3c5 	.word	0x91a2b3c5
 8001eb0:	20005a20 	.word	0x20005a20

08001eb4 <ReadConfig>:
void ReadConfig(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	ConfigReg += HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)<<2;
	ConfigReg += HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)<<3;	//MSB
	ConfigReg = ~ConfigReg;
	ConfigReg = ConfigReg &0x0f;
#else
	ConfigReg = HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)<<0;	//LSB, config for EECO 330041GS
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4818      	ldr	r0, [pc, #96]	; (8001f1c <ReadConfig+0x68>)
 8001ebc:	f004 fbd0 	bl	8006660 <HAL_GPIO_ReadPin>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <ReadConfig+0x6c>)
 8001ec6:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)<<1;
 8001ec8:	2110      	movs	r1, #16
 8001eca:	4816      	ldr	r0, [pc, #88]	; (8001f24 <ReadConfig+0x70>)
 8001ecc:	f004 fbc8 	bl	8006660 <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <ReadConfig+0x6c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <ReadConfig+0x6c>)
 8001ee0:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)<<2;
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	480d      	ldr	r0, [pc, #52]	; (8001f1c <ReadConfig+0x68>)
 8001ee6:	f004 fbbb 	bl	8006660 <HAL_GPIO_ReadPin>
 8001eea:	4603      	mov	r3, r0
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <ReadConfig+0x6c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <ReadConfig+0x6c>)
 8001efa:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)<<3;	//MSB
 8001efc:	2120      	movs	r1, #32
 8001efe:	4809      	ldr	r0, [pc, #36]	; (8001f24 <ReadConfig+0x70>)
 8001f00:	f004 fbae 	bl	8006660 <HAL_GPIO_ReadPin>
 8001f04:	4603      	mov	r3, r0
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <ReadConfig+0x6c>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <ReadConfig+0x6c>)
 8001f14:	701a      	strb	r2, [r3, #0]
#endif
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	48000400 	.word	0x48000400
 8001f20:	20005994 	.word	0x20005994
 8001f24:	48000800 	.word	0x48000800

08001f28 <ExtOut_InvResetStart>:
	osDelay(100);
}
#endif
//generate signal to inform other controllers: "INV reset procedure is in progress"
void ExtOut_InvResetStart(void)
{
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	b099      	sub	sp, #100	; 0x64
 8001f2c:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM16(htim16, TIM_CHANNEL_1, 200);		//500 ->50% @ 4kHz, 50 @ 33khz, 100 @ 16khz, 200 @ 8khz
 8001f2e:	4e18      	ldr	r6, [pc, #96]	; (8001f90 <ExtOut_InvResetStart+0x68>)
 8001f30:	23c8      	movs	r3, #200	; 0xc8
 8001f32:	9310      	str	r3, [sp, #64]	; 0x40
 8001f34:	2300      	movs	r3, #0
 8001f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8001f38:	466d      	mov	r5, sp
 8001f3a:	f106 0410 	add.w	r4, r6, #16
 8001f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f4e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001f52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f56:	f7ff fadd 	bl	8001514 <setPWM_TIM16>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <ExtOut_InvResetStart+0x68>)
 8001f5e:	f005 fea3 	bl	8007ca8 <HAL_TIM_PWM_Start>
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = EXT_I_Pin;
 8001f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f74:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//prevent excessive voltage on EXT_I by pulldown
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4804      	ldr	r0, [pc, #16]	; (8001f94 <ExtOut_InvResetStart+0x6c>)
 8001f84:	f004 f9f2 	bl	800636c <HAL_GPIO_Init>
}
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f90:	200062b8 	.word	0x200062b8
 8001f94:	48000400 	.word	0x48000400

08001f98 <ExtOut_InvResetStop>:

void ExtOut_InvResetStop(void)
{
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	b099      	sub	sp, #100	; 0x64
 8001f9c:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM16(htim16, TIM_CHANNEL_1, 0);		//0% @ 4kHz
 8001f9e:	4e18      	ldr	r6, [pc, #96]	; (8002000 <ExtOut_InvResetStop+0x68>)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9310      	str	r3, [sp, #64]	; 0x40
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8001fa8:	466d      	mov	r5, sp
 8001faa:	f106 0410 	add.w	r4, r6, #16
 8001fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001fbe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001fc2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001fc6:	f7ff faa5 	bl	8001514 <setPWM_TIM16>
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <ExtOut_InvResetStop+0x68>)
 8001fce:	f005 ff49 	bl	8007e64 <HAL_TIM_PWM_Stop>
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = EXT_I_Pin;
 8001fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
#if HW_VER > 01
	  GPIO_InitStruct.Pull = GPIO_NOPULL;			//disable pulldown
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//apply pulldown - in humid environment it oftyen it sets this input without real signal coming in. for testing purposes
#else
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//prevent excessive voltage on EXT_I by pulldown
 8001fea:	2302      	movs	r3, #2
 8001fec:	60fb      	str	r3, [r7, #12]
#endif
	  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4804      	ldr	r0, [pc, #16]	; (8002004 <ExtOut_InvResetStop+0x6c>)
 8001ff4:	f004 f9ba 	bl	800636c <HAL_GPIO_Init>
}
 8001ff8:	bf00      	nop
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002000:	200062b8 	.word	0x200062b8
 8002004:	48000400 	.word	0x48000400

08002008 <BatteryMOS_ON>:

void BatteryMOS_ON(void)
{
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200a:	b093      	sub	sp, #76	; 0x4c
 800200c:	af12      	add	r7, sp, #72	; 0x48

	if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP)
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <BatteryMOS_ON+0x74>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b50      	cmp	r3, #80	; 0x50
 8002014:	d902      	bls.n	800201c <BatteryMOS_ON+0x14>
	{
		BatteryMOS_OFF();
 8002016:	f000 f837 	bl	8002088 <BatteryMOS_OFF>
 800201a:	e02b      	b.n	8002074 <BatteryMOS_ON+0x6c>
	}
	else
	{
		if (FlagBatteryMOS) return;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <BatteryMOS_ON+0x78>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d126      	bne.n	8002072 <BatteryMOS_ON+0x6a>
		HAL_GPIO_WritePin(BAT_SWITCH_OFF_GPIO_Port, BAT_SWITCH_OFF_Pin, 0);	//disable powerMosfet pulldown
 8002024:	2200      	movs	r2, #0
 8002026:	2140      	movs	r1, #64	; 0x40
 8002028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202c:	f004 fb30 	bl	8006690 <HAL_GPIO_WritePin>
		setPWM_TIM2(htim2, TIM_CHANNEL_1, 254, 500);		//500->50% @ 4kHz
 8002030:	4e14      	ldr	r6, [pc, #80]	; (8002084 <BatteryMOS_ON+0x7c>)
 8002032:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002036:	9311      	str	r3, [sp, #68]	; 0x44
 8002038:	23fe      	movs	r3, #254	; 0xfe
 800203a:	9310      	str	r3, [sp, #64]	; 0x40
 800203c:	2300      	movs	r3, #0
 800203e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002040:	466d      	mov	r5, sp
 8002042:	f106 0410 	add.w	r4, r6, #16
 8002046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002052:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002056:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800205a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800205e:	f7ff fa33 	bl	80014c8 <setPWM_TIM2>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002062:	2100      	movs	r1, #0
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <BatteryMOS_ON+0x7c>)
 8002066:	f005 fe1f 	bl	8007ca8 <HAL_TIM_PWM_Start>
		FlagBatteryMOS = 1;
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <BatteryMOS_ON+0x78>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e000      	b.n	8002074 <BatteryMOS_ON+0x6c>
		if (FlagBatteryMOS) return;
 8002072:	bf00      	nop
	}
}
 8002074:	3704      	adds	r7, #4
 8002076:	46bd      	mov	sp, r7
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207a:	bf00      	nop
 800207c:	20005998 	.word	0x20005998
 8002080:	20000240 	.word	0x20000240
 8002084:	200061bc 	.word	0x200061bc

08002088 <BatteryMOS_OFF>:

void BatteryMOS_OFF(void)
{
 8002088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208a:	b093      	sub	sp, #76	; 0x4c
 800208c:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM2(htim2, TIM_CHANNEL_1, 254, 0);
 800208e:	4e14      	ldr	r6, [pc, #80]	; (80020e0 <BatteryMOS_OFF+0x58>)
 8002090:	2300      	movs	r3, #0
 8002092:	9311      	str	r3, [sp, #68]	; 0x44
 8002094:	23fe      	movs	r3, #254	; 0xfe
 8002096:	9310      	str	r3, [sp, #64]	; 0x40
 8002098:	2300      	movs	r3, #0
 800209a:	930f      	str	r3, [sp, #60]	; 0x3c
 800209c:	466d      	mov	r5, sp
 800209e:	f106 0410 	add.w	r4, r6, #16
 80020a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80020b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020ba:	f7ff fa05 	bl	80014c8 <setPWM_TIM2>
	HAL_GPIO_WritePin(BAT_SWITCH_OFF_GPIO_Port, BAT_SWITCH_OFF_Pin, 1);	//enable powerMosfet pulldown
 80020be:	2201      	movs	r2, #1
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c6:	f004 fae3 	bl	8006690 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80020ca:	2100      	movs	r1, #0
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <BatteryMOS_OFF+0x58>)
 80020ce:	f005 fec9 	bl	8007e64 <HAL_TIM_PWM_Stop>
	FlagBatteryMOS = 0;
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <BatteryMOS_OFF+0x5c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
}
 80020d8:	bf00      	nop
 80020da:	3704      	adds	r7, #4
 80020dc:	46bd      	mov	sp, r7
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	200061bc 	.word	0x200061bc
 80020e4:	20000240 	.word	0x20000240

080020e8 <InverterMOS_ON>:

void InverterMOS_ON(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <InverterMOS_ON+0x28>)
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	2b50      	cmp	r3, #80	; 0x50
 80020f2:	d902      	bls.n	80020fa <InverterMOS_ON+0x12>
	{
		InverterMOS_OFF();
 80020f4:	f000 f810 	bl	8002118 <InverterMOS_OFF>
	else
	{
		HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 0);	//disable powerMosfet pulldown
		FlagInverterMOS = 1;
	}
}
 80020f8:	e008      	b.n	800210c <InverterMOS_ON+0x24>
		HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 0);	//disable powerMosfet pulldown
 80020fa:	2200      	movs	r2, #0
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f004 fac5 	bl	8006690 <HAL_GPIO_WritePin>
		FlagInverterMOS = 1;
 8002106:	4b03      	ldr	r3, [pc, #12]	; (8002114 <InverterMOS_ON+0x2c>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20005998 	.word	0x20005998
 8002114:	20000244 	.word	0x20000244

08002118 <InverterMOS_OFF>:

void InverterMOS_OFF(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 1);	//enable powerMosfet pulldown
 800211c:	2201      	movs	r2, #1
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002124:	f004 fab4 	bl	8006690 <HAL_GPIO_WritePin>
	FlagInverterMOS = 0;
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <InverterMOS_OFF+0x1c>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000244 	.word	0x20000244

08002138 <ConvertNTCvalue>:

uint32_t ConvertNTCvalue(uint32_t RawReading)
{
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
double i, y;
uint32_t t;
	      i = (double) RawReading;	//
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7fe f9df 	bl	8000504 <__aeabi_ui2d>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	      //y = -3*pow(10,-15)*pow(i,5) + 3*pow(10,-11)*pow(i,4)-pow(10,-7)*pow(i,3)+0.0002*pow(i,2)-0.2204*i+138.71;
	      y = -7*pow(10,-9)*pow(i,3) + 5*pow(10,-5)*pow(i,2)-0.1154*i+123.68;
 800214e:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80021f0 <ConvertNTCvalue+0xb8>
 8002152:	ed97 0b06 	vldr	d0, [r7, #24]
 8002156:	f00f fd83 	bl	8011c60 <pow>
 800215a:	ec51 0b10 	vmov	r0, r1, d0
 800215e:	a328      	add	r3, pc, #160	; (adr r3, 8002200 <ConvertNTCvalue+0xc8>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	f7fe fa48 	bl	80005f8 <__aeabi_dmul>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4614      	mov	r4, r2
 800216e:	461d      	mov	r5, r3
 8002170:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80021f8 <ConvertNTCvalue+0xc0>
 8002174:	ed97 0b06 	vldr	d0, [r7, #24]
 8002178:	f00f fd72 	bl	8011c60 <pow>
 800217c:	ec51 0b10 	vmov	r0, r1, d0
 8002180:	a321      	add	r3, pc, #132	; (adr r3, 8002208 <ConvertNTCvalue+0xd0>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	f7fe fa37 	bl	80005f8 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4620      	mov	r0, r4
 8002190:	4629      	mov	r1, r5
 8002192:	f7fe f87b 	bl	800028c <__adddf3>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4614      	mov	r4, r2
 800219c:	461d      	mov	r5, r3
 800219e:	a31c      	add	r3, pc, #112	; (adr r3, 8002210 <ConvertNTCvalue+0xd8>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a8:	f7fe fa26 	bl	80005f8 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4620      	mov	r0, r4
 80021b2:	4629      	mov	r1, r5
 80021b4:	f7fe f868 	bl	8000288 <__aeabi_dsub>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	a315      	add	r3, pc, #84	; (adr r3, 8002218 <ConvertNTCvalue+0xe0>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe f861 	bl	800028c <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
	      t = (uint32_t) y;
 80021d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021d6:	f7fe fce7 	bl	8000ba8 <__aeabi_d2uiz>
 80021da:	4603      	mov	r3, r0
 80021dc:	60fb      	str	r3, [r7, #12]
	      t = (t - 13);				// some offset removal
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3b0d      	subs	r3, #13
 80021e2:	60fb      	str	r3, [r7, #12]
	      return t;	//result in *C
 80021e4:	68fb      	ldr	r3, [r7, #12]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bdb0      	pop	{r4, r5, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	00000000 	.word	0x00000000
 80021f4:	40080000 	.word	0x40080000
 80021f8:	00000000 	.word	0x00000000
 80021fc:	40000000 	.word	0x40000000
 8002200:	d643f785 	.word	0xd643f785
 8002204:	be3e1094 	.word	0xbe3e1094
 8002208:	eb1c432d 	.word	0xeb1c432d
 800220c:	3f0a36e2 	.word	0x3f0a36e2
 8002210:	b9f559b4 	.word	0xb9f559b4
 8002214:	3fbd8ada 	.word	0x3fbd8ada
 8002218:	1eb851ec 	.word	0x1eb851ec
 800221c:	405eeb85 	.word	0x405eeb85

08002220 <ConvertVValue>:

uint32_t ConvertVValue(uint32_t RawReading)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    double i;
    i = (((float)RawReading))*100/4095;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80022d0 <ConvertVValue+0xb0>
 8002236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800223a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80022d4 <ConvertVValue+0xb4>
 800223e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002242:	ee16 0a90 	vmov	r0, s13
 8002246:	f7fe f97f 	bl	8000548 <__aeabi_f2d>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i*(float)3.29;					//ref voltage value
 8002252:	a319      	add	r3, pc, #100	; (adr r3, 80022b8 <ConvertVValue+0x98>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800225c:	f7fe f9cc 	bl	80005f8 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i*(float)(470+16)/(float)16; //resistor divider R1+R2/R1
 8002268:	a315      	add	r3, pc, #84	; (adr r3, 80022c0 <ConvertVValue+0xa0>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002272:	f7fe f9c1 	bl	80005f8 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <ConvertVValue+0xb8>)
 8002284:	f7fe fae2 	bl	800084c <__aeabi_ddiv>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    //i *= (10.5/10.0)/10;					//coefficient due to tolerances, //without adc internal calibration
    i *= (10.0/10.0)/10;					//coefficient due to tolerances, //witht adc internal calibration
 8002290:	a30d      	add	r3, pc, #52	; (adr r3, 80022c8 <ConvertVValue+0xa8>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800229a:	f7fe f9ad 	bl	80005f8 <__aeabi_dmul>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (uint32_t) i;			//result in 100mV
 80022a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022aa:	f7fe fc7d 	bl	8000ba8 <__aeabi_d2uiz>
 80022ae:	4603      	mov	r3, r0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	80000000 	.word	0x80000000
 80022bc:	400a51eb 	.word	0x400a51eb
 80022c0:	00000000 	.word	0x00000000
 80022c4:	407e6000 	.word	0x407e6000
 80022c8:	9999999a 	.word	0x9999999a
 80022cc:	3fb99999 	.word	0x3fb99999
 80022d0:	42c80000 	.word	0x42c80000
 80022d4:	457ff000 	.word	0x457ff000
 80022d8:	40300000 	.word	0x40300000
 80022dc:	00000000 	.word	0x00000000

080022e0 <ConvertIValue>:

uint32_t ConvertIValue(uint32_t RawReading)
{	//xls equation from 120 gain and 2mR shunt: y = 0,2954x - 36,931 -> x=10000/2954*y + 36.931
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    i = (double)(3824)*(double)RawReading;
    i = i/1000;
    i = i + 25;
#else
    //from XLS trendline
    i = ((10000/2510)*(float)RawReading);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80022f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fa:	ee17 0a90 	vmov	r0, s15
 80022fe:	f7fe f923 	bl	8000548 <__aeabi_f2d>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i + 38.1;
 800230a:	a313      	add	r3, pc, #76	; (adr r3, 8002358 <ConvertIValue+0x78>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002314:	f7fd ffba 	bl	800028c <__adddf3>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	e9c7 2302 	strd	r2, r3, [r7, #8]
#endif
    if (i<0) i=0;
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800232c:	f7fe fbd6 	bl	8000adc <__aeabi_dcmplt>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <ConvertIValue+0x62>
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (uint32_t) i;	//result in 100mA
 8002342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002346:	f7fe fc2f 	bl	8000ba8 <__aeabi_d2uiz>
 800234a:	4603      	mov	r3, r0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	f3af 8000 	nop.w
 8002358:	cccccccd 	.word	0xcccccccd
 800235c:	40430ccc 	.word	0x40430ccc

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002364:	f001 ffbf 	bl	80042e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002368:	f000 f82e 	bl	80023c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236c:	f000 fa86 	bl	800287c <MX_GPIO_Init>
  MX_DMA_Init();
 8002370:	f000 fa4a 	bl	8002808 <MX_DMA_Init>
  MX_ADC1_Init();
 8002374:	f000 f86c 	bl	8002450 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002378:	f000 fa16 	bl	80027a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800237c:	f000 f942 	bl	8002604 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002380:	f000 f99a 	bl	80026b8 <MX_TIM16_Init>
  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002384:	f008 f81e 	bl	800a3c4 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <main+0x50>)
 800238a:	2200      	movs	r2, #0
 800238c:	2101      	movs	r1, #1
 800238e:	4809      	ldr	r0, [pc, #36]	; (80023b4 <main+0x54>)
 8002390:	f008 f926 	bl	800a5e0 <osTimerNew>
 8002394:	4603      	mov	r3, r0
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <main+0x58>)
 8002398:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <main+0x5c>)
 800239c:	2100      	movs	r1, #0
 800239e:	4808      	ldr	r0, [pc, #32]	; (80023c0 <main+0x60>)
 80023a0:	f008 f85a 	bl	800a458 <osThreadNew>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <main+0x64>)
 80023a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80023aa:	f008 f82f 	bl	800a40c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <main+0x4e>
 80023b0:	08013644 	.word	0x08013644
 80023b4:	08003929 	.word	0x08003929
 80023b8:	20005d90 	.word	0x20005d90
 80023bc:	08013620 	.word	0x08013620
 80023c0:	0800339d 	.word	0x0800339d
 80023c4:	20005990 	.word	0x20005990

080023c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b096      	sub	sp, #88	; 0x58
 80023cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	2244      	movs	r2, #68	; 0x44
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f00b f8b1 	bl	800d53e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023dc:	463b      	mov	r3, r7
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
 80023e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80023ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80023ee:	f004 f98f 	bl	8006710 <HAL_PWREx_ControlVoltageScaling>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80023f8:	f001 fb98 	bl	8003b2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023fc:	2301      	movs	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002404:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002406:	2300      	movs	r3, #0
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	4618      	mov	r0, r3
 8002410:	f004 f9d4 	bl	80067bc <HAL_RCC_OscConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800241a:	f001 fb87 	bl	8003b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800241e:	230f      	movs	r3, #15
 8002420:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002422:	2302      	movs	r3, #2
 8002424:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002432:	463b      	mov	r3, r7
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f004 fdd2 	bl	8006fe0 <HAL_RCC_ClockConfig>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002442:	f001 fb73 	bl	8003b2c <Error_Handler>
  }
}
 8002446:	bf00      	nop
 8002448:	3758      	adds	r7, #88	; 0x58
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002456:	463b      	mov	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
 8002464:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002466:	4b5d      	ldr	r3, [pc, #372]	; (80025dc <MX_ADC1_Init+0x18c>)
 8002468:	4a5d      	ldr	r2, [pc, #372]	; (80025e0 <MX_ADC1_Init+0x190>)
 800246a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800246c:	4b5b      	ldr	r3, [pc, #364]	; (80025dc <MX_ADC1_Init+0x18c>)
 800246e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002472:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <MX_ADC1_Init+0x18c>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800247a:	4b58      	ldr	r3, [pc, #352]	; (80025dc <MX_ADC1_Init+0x18c>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <MX_ADC1_Init+0x18c>)
 8002482:	2201      	movs	r2, #1
 8002484:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002486:	4b55      	ldr	r3, [pc, #340]	; (80025dc <MX_ADC1_Init+0x18c>)
 8002488:	2204      	movs	r2, #4
 800248a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <MX_ADC1_Init+0x18c>)
 800248e:	2200      	movs	r2, #0
 8002490:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002492:	4b52      	ldr	r3, [pc, #328]	; (80025dc <MX_ADC1_Init+0x18c>)
 8002494:	2200      	movs	r2, #0
 8002496:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <MX_ADC1_Init+0x18c>)
 800249a:	2208      	movs	r2, #8
 800249c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800249e:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <MX_ADC1_Init+0x18c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024a6:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <MX_ADC1_Init+0x18c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024ac:	4b4b      	ldr	r3, [pc, #300]	; (80025dc <MX_ADC1_Init+0x18c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80024b2:	4b4a      	ldr	r3, [pc, #296]	; (80025dc <MX_ADC1_Init+0x18c>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024ba:	4b48      	ldr	r3, [pc, #288]	; (80025dc <MX_ADC1_Init+0x18c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80024c0:	4b46      	ldr	r3, [pc, #280]	; (80025dc <MX_ADC1_Init+0x18c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024c8:	4844      	ldr	r0, [pc, #272]	; (80025dc <MX_ADC1_Init+0x18c>)
 80024ca:	f002 f933 	bl	8004734 <HAL_ADC_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80024d4:	f001 fb2a 	bl	8003b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024d8:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <MX_ADC1_Init+0x194>)
 80024da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024dc:	2306      	movs	r3, #6
 80024de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80024e0:	2301      	movs	r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80024e4:	237f      	movs	r3, #127	; 0x7f
 80024e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80024e8:	2304      	movs	r3, #4
 80024ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f0:	463b      	mov	r3, r7
 80024f2:	4619      	mov	r1, r3
 80024f4:	4839      	ldr	r0, [pc, #228]	; (80025dc <MX_ADC1_Init+0x18c>)
 80024f6:	f002 fb6b 	bl	8004bd0 <HAL_ADC_ConfigChannel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002500:	f001 fb14 	bl	8003b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002504:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <MX_ADC1_Init+0x198>)
 8002506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002508:	230c      	movs	r3, #12
 800250a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800250c:	463b      	mov	r3, r7
 800250e:	4619      	mov	r1, r3
 8002510:	4832      	ldr	r0, [pc, #200]	; (80025dc <MX_ADC1_Init+0x18c>)
 8002512:	f002 fb5d 	bl	8004bd0 <HAL_ADC_ConfigChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800251c:	f001 fb06 	bl	8003b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002520:	4b32      	ldr	r3, [pc, #200]	; (80025ec <MX_ADC1_Init+0x19c>)
 8002522:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002524:	2312      	movs	r3, #18
 8002526:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800252c:	463b      	mov	r3, r7
 800252e:	4619      	mov	r1, r3
 8002530:	482a      	ldr	r0, [pc, #168]	; (80025dc <MX_ADC1_Init+0x18c>)
 8002532:	f002 fb4d 	bl	8004bd0 <HAL_ADC_ConfigChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800253c:	f001 faf6 	bl	8003b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <MX_ADC1_Init+0x1a0>)
 8002542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002544:	2318      	movs	r3, #24
 8002546:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002548:	463b      	mov	r3, r7
 800254a:	4619      	mov	r1, r3
 800254c:	4823      	ldr	r0, [pc, #140]	; (80025dc <MX_ADC1_Init+0x18c>)
 800254e:	f002 fb3f 	bl	8004bd0 <HAL_ADC_ConfigChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8002558:	f001 fae8 	bl	8003b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <MX_ADC1_Init+0x1a4>)
 800255e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002564:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002566:	463b      	mov	r3, r7
 8002568:	4619      	mov	r1, r3
 800256a:	481c      	ldr	r0, [pc, #112]	; (80025dc <MX_ADC1_Init+0x18c>)
 800256c:	f002 fb30 	bl	8004bd0 <HAL_ADC_ConfigChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8002576:	f001 fad9 	bl	8003b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <MX_ADC1_Init+0x1a8>)
 800257c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800257e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002582:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002584:	463b      	mov	r3, r7
 8002586:	4619      	mov	r1, r3
 8002588:	4814      	ldr	r0, [pc, #80]	; (80025dc <MX_ADC1_Init+0x18c>)
 800258a:	f002 fb21 	bl	8004bd0 <HAL_ADC_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8002594:	f001 faca 	bl	8003b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002598:	4b18      	ldr	r3, [pc, #96]	; (80025fc <MX_ADC1_Init+0x1ac>)
 800259a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800259c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80025a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025a2:	463b      	mov	r3, r7
 80025a4:	4619      	mov	r1, r3
 80025a6:	480d      	ldr	r0, [pc, #52]	; (80025dc <MX_ADC1_Init+0x18c>)
 80025a8:	f002 fb12 	bl	8004bd0 <HAL_ADC_ConfigChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 80025b2:	f001 fabb 	bl	8003b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <MX_ADC1_Init+0x1b0>)
 80025b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80025ba:	f44f 7389 	mov.w	r3, #274	; 0x112
 80025be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025c0:	463b      	mov	r3, r7
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_ADC1_Init+0x18c>)
 80025c6:	f002 fb03 	bl	8004bd0 <HAL_ADC_ConfigChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_ADC1_Init+0x184>
  {
    Error_Handler();
 80025d0:	f001 faac 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025d4:	bf00      	nop
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20005b1c 	.word	0x20005b1c
 80025e0:	50040000 	.word	0x50040000
 80025e4:	04300002 	.word	0x04300002
 80025e8:	08600004 	.word	0x08600004
 80025ec:	0c900008 	.word	0x0c900008
 80025f0:	10c00010 	.word	0x10c00010
 80025f4:	14f00020 	.word	0x14f00020
 80025f8:	19200040 	.word	0x19200040
 80025fc:	1d500080 	.word	0x1d500080
 8002600:	80000001 	.word	0x80000001

08002604 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260a:	f107 031c 	add.w	r3, r7, #28
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002616:	463b      	mov	r3, r7
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
 8002624:	615a      	str	r2, [r3, #20]
 8002626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002628:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <MX_TIM2_Init+0xb0>)
 800262a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800262e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8002630:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <MX_TIM2_Init+0xb0>)
 8002632:	2201      	movs	r2, #1
 8002634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <MX_TIM2_Init+0xb0>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <MX_TIM2_Init+0xb0>)
 800263e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002642:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <MX_TIM2_Init+0xb0>)
 8002646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <MX_TIM2_Init+0xb0>)
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002652:	4818      	ldr	r0, [pc, #96]	; (80026b4 <MX_TIM2_Init+0xb0>)
 8002654:	f005 fad0 	bl	8007bf8 <HAL_TIM_PWM_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800265e:	f001 fa65 	bl	8003b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800266a:	f107 031c 	add.w	r3, r7, #28
 800266e:	4619      	mov	r1, r3
 8002670:	4810      	ldr	r0, [pc, #64]	; (80026b4 <MX_TIM2_Init+0xb0>)
 8002672:	f006 f9e3 	bl	8008a3c <HAL_TIMEx_MasterConfigSynchronization>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800267c:	f001 fa56 	bl	8003b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002680:	2360      	movs	r3, #96	; 0x60
 8002682:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002688:	2300      	movs	r3, #0
 800268a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002690:	463b      	mov	r3, r7
 8002692:	2200      	movs	r2, #0
 8002694:	4619      	mov	r1, r3
 8002696:	4807      	ldr	r0, [pc, #28]	; (80026b4 <MX_TIM2_Init+0xb0>)
 8002698:	f005 fd8c 	bl	80081b4 <HAL_TIM_PWM_ConfigChannel>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80026a2:	f001 fa43 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026a6:	4803      	ldr	r0, [pc, #12]	; (80026b4 <MX_TIM2_Init+0xb0>)
 80026a8:	f001 fb4a 	bl	8003d40 <HAL_TIM_MspPostInit>

}
 80026ac:	bf00      	nop
 80026ae:	3728      	adds	r7, #40	; 0x28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200061bc 	.word	0x200061bc

080026b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b092      	sub	sp, #72	; 0x48
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	611a      	str	r2, [r3, #16]
 80026ce:	615a      	str	r2, [r3, #20]
 80026d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026d2:	463b      	mov	r3, r7
 80026d4:	222c      	movs	r2, #44	; 0x2c
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f00a ff30 	bl	800d53e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80026de:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <MX_TIM16_Init+0xe8>)
 80026e0:	4a30      	ldr	r2, [pc, #192]	; (80027a4 <MX_TIM16_Init+0xec>)
 80026e2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 80026e4:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <MX_TIM16_Init+0xe8>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ea:	4b2d      	ldr	r3, [pc, #180]	; (80027a0 <MX_TIM16_Init+0xe8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 500;
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <MX_TIM16_Init+0xe8>)
 80026f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f8:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <MX_TIM16_Init+0xe8>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <MX_TIM16_Init+0xe8>)
 8002700:	2200      	movs	r2, #0
 8002702:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <MX_TIM16_Init+0xe8>)
 8002706:	2280      	movs	r2, #128	; 0x80
 8002708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800270a:	4825      	ldr	r0, [pc, #148]	; (80027a0 <MX_TIM16_Init+0xe8>)
 800270c:	f005 f9c8 	bl	8007aa0 <HAL_TIM_Base_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002716:	f001 fa09 	bl	8003b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800271a:	4821      	ldr	r0, [pc, #132]	; (80027a0 <MX_TIM16_Init+0xe8>)
 800271c:	f005 fa6c 	bl	8007bf8 <HAL_TIM_PWM_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002726:	f001 fa01 	bl	8003b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800272a:	2360      	movs	r3, #96	; 0x60
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 254;
 800272e:	23fe      	movs	r3, #254	; 0xfe
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002732:	2300      	movs	r3, #0
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002736:	2300      	movs	r3, #0
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800274a:	2200      	movs	r2, #0
 800274c:	4619      	mov	r1, r3
 800274e:	4814      	ldr	r0, [pc, #80]	; (80027a0 <MX_TIM16_Init+0xe8>)
 8002750:	f005 fd30 	bl	80081b4 <HAL_TIM_PWM_ConfigChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800275a:	f001 f9e7 	bl	8003b2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002776:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800277c:	463b      	mov	r3, r7
 800277e:	4619      	mov	r1, r3
 8002780:	4807      	ldr	r0, [pc, #28]	; (80027a0 <MX_TIM16_Init+0xe8>)
 8002782:	f006 f9c1 	bl	8008b08 <HAL_TIMEx_ConfigBreakDeadTime>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800278c:	f001 f9ce 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002790:	4803      	ldr	r0, [pc, #12]	; (80027a0 <MX_TIM16_Init+0xe8>)
 8002792:	f001 fad5 	bl	8003d40 <HAL_TIM_MspPostInit>

}
 8002796:	bf00      	nop
 8002798:	3748      	adds	r7, #72	; 0x48
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200062b8 	.word	0x200062b8
 80027a4:	40014400 	.word	0x40014400

080027a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027ae:	4a15      	ldr	r2, [pc, #84]	; (8002804 <MX_USART1_UART_Init+0x5c>)
 80027b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027ce:	220c      	movs	r2, #12
 80027d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027de:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ec:	4804      	ldr	r0, [pc, #16]	; (8002800 <MX_USART1_UART_Init+0x58>)
 80027ee:	f006 fa21 	bl	8008c34 <HAL_UART_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80027f8:	f001 f998 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20005bc8 	.word	0x20005bc8
 8002804:	40013800 	.word	0x40013800

08002808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <MX_DMA_Init+0x70>)
 8002810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002812:	4a19      	ldr	r2, [pc, #100]	; (8002878 <MX_DMA_Init+0x70>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6493      	str	r3, [r2, #72]	; 0x48
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <MX_DMA_Init+0x70>)
 800281c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <MX_DMA_Init+0x70>)
 8002828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282a:	4a13      	ldr	r2, [pc, #76]	; (8002878 <MX_DMA_Init+0x70>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	6493      	str	r3, [r2, #72]	; 0x48
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_DMA_Init+0x70>)
 8002834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2105      	movs	r1, #5
 8002842:	200b      	movs	r0, #11
 8002844:	f003 f862 	bl	800590c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002848:	200b      	movs	r0, #11
 800284a:	f003 f87b 	bl	8005944 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2105      	movs	r1, #5
 8002852:	2044      	movs	r0, #68	; 0x44
 8002854:	f003 f85a 	bl	800590c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8002858:	2044      	movs	r0, #68	; 0x44
 800285a:	f003 f873 	bl	8005944 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2105      	movs	r1, #5
 8002862:	2045      	movs	r0, #69	; 0x45
 8002864:	f003 f852 	bl	800590c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8002868:	2045      	movs	r0, #69	; 0x45
 800286a:	f003 f86b 	bl	8005944 <HAL_NVIC_EnableIRQ>

}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000

0800287c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002892:	4b42      	ldr	r3, [pc, #264]	; (800299c <MX_GPIO_Init+0x120>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	4a41      	ldr	r2, [pc, #260]	; (800299c <MX_GPIO_Init+0x120>)
 8002898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <MX_GPIO_Init+0x120>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	4b3c      	ldr	r3, [pc, #240]	; (800299c <MX_GPIO_Init+0x120>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	4a3b      	ldr	r2, [pc, #236]	; (800299c <MX_GPIO_Init+0x120>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <MX_GPIO_Init+0x120>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <MX_GPIO_Init+0x120>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a35      	ldr	r2, [pc, #212]	; (800299c <MX_GPIO_Init+0x120>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ce:	4b33      	ldr	r3, [pc, #204]	; (800299c <MX_GPIO_Init+0x120>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	4b30      	ldr	r3, [pc, #192]	; (800299c <MX_GPIO_Init+0x120>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	4a2f      	ldr	r2, [pc, #188]	; (800299c <MX_GPIO_Init+0x120>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <MX_GPIO_Init+0x120>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BATT_BCKP_DRV_Pin|BAT_SWITCH_OFF_Pin|INV_SWITCH_DRV_Pin|MEAS_PWR_Pin, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80028f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028fc:	f003 fec8 	bl	8006690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002906:	4826      	ldr	r0, [pc, #152]	; (80029a0 <MX_GPIO_Init+0x124>)
 8002908:	f003 fec2 	bl	8006690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BATT_BCKP_DRV_Pin BAT_SWITCH_OFF_Pin INV_SWITCH_DRV_Pin MEAS_PWR_Pin */
  GPIO_InitStruct.Pin = BATT_BCKP_DRV_Pin|BAT_SWITCH_OFF_Pin|INV_SWITCH_DRV_Pin|MEAS_PWR_Pin;
 800290c:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8002910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002928:	f003 fd20 	bl	800636c <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C1_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C1_Pin;
 800292c:	2330      	movs	r3, #48	; 0x30
 800292e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002934:	2301      	movs	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4619      	mov	r1, r3
 800293e:	4819      	ldr	r0, [pc, #100]	; (80029a4 <MX_GPIO_Init+0x128>)
 8002940:	f003 fd14 	bl	800636c <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C2_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C2_Pin;
 8002944:	2303      	movs	r3, #3
 8002946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800294c:	2301      	movs	r3, #1
 800294e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	4812      	ldr	r0, [pc, #72]	; (80029a0 <MX_GPIO_Init+0x124>)
 8002958:	f003 fd08 	bl	800636c <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_Pin EXT_I_Pin */
  GPIO_InitStruct.Pin = CD_Pin|EXT_I_Pin;
 800295c:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002966:	2302      	movs	r3, #2
 8002968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	480b      	ldr	r0, [pc, #44]	; (80029a0 <MX_GPIO_Init+0x124>)
 8002972:	f003 fcfb 	bl	800636c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8002976:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800297a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297c:	2301      	movs	r3, #1
 800297e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4619      	mov	r1, r3
 800298e:	4804      	ldr	r0, [pc, #16]	; (80029a0 <MX_GPIO_Init+0x124>)
 8002990:	f003 fcec 	bl	800636c <HAL_GPIO_Init>

}
 8002994:	bf00      	nop
 8002996:	3728      	adds	r7, #40	; 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	48000400 	.word	0x48000400
 80029a4:	48000800 	.word	0x48000800

080029a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	// idle detection needs at least one UART clock to detect the bus is idle. So
	// in the case, that the transmission length is one full buffer length
	// and the start buffer pointer is at 0, it will be also 0 at the end of the
	// transmission. In this case the DMA rollover will increment the RxRollover
	// variable first and len will not be zero.
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {									// Check if it is an "Idle Interrupt"
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	f040 8186 	bne.w	8002ccc <HAL_UART_RxCpltCallback+0x324>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);												// clear the interrupt
 80029c0:	4b93      	ldr	r3, [pc, #588]	; (8002c10 <HAL_UART_RxCpltCallback+0x268>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2210      	movs	r2, #16
 80029c6:	621a      	str	r2, [r3, #32]
		RxCounter++;																	// increment the Rx Counter
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_UART_RxCpltCallback+0x26c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b90      	ldr	r3, [pc, #576]	; (8002c14 <HAL_UART_RxCpltCallback+0x26c>)
 80029d2:	701a      	strb	r2, [r3, #0]
		uint8_t TxSize = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	76fb      	strb	r3, [r7, #27]
		uint16_t start = RxBfrPos;														// Rx bytes start position (=last buffer position)
 80029d8:	4b8f      	ldr	r3, [pc, #572]	; (8002c18 <HAL_UART_RxCpltCallback+0x270>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	833b      	strh	r3, [r7, #24]
		RxBfrPos = RX_BFR_SIZE - (uint16_t)huart->hdmarx->Instance->CNDTR;				// determine actual buffer position
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b8a      	ldr	r3, [pc, #552]	; (8002c18 <HAL_UART_RxCpltCallback+0x270>)
 80029f0:	801a      	strh	r2, [r3, #0]
		uint16_t len = RX_BFR_SIZE;														// init len with max. size
 80029f2:	237f      	movs	r3, #127	; 0x7f
 80029f4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if(RxRollover < 2)  {
 80029f6:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <HAL_UART_RxCpltCallback+0x274>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d819      	bhi.n	8002a32 <HAL_UART_RxCpltCallback+0x8a>
			if(RxRollover) {															// rolled over once
 80029fe:	4b87      	ldr	r3, [pc, #540]	; (8002c1c <HAL_UART_RxCpltCallback+0x274>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00f      	beq.n	8002a26 <HAL_UART_RxCpltCallback+0x7e>
				if(RxBfrPos <= start) len = RxBfrPos + RX_BFR_SIZE - start;				// no bytes overwritten
 8002a06:	4b84      	ldr	r3, [pc, #528]	; (8002c18 <HAL_UART_RxCpltCallback+0x270>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	8b3a      	ldrh	r2, [r7, #24]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d307      	bcc.n	8002a20 <HAL_UART_RxCpltCallback+0x78>
 8002a10:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <HAL_UART_RxCpltCallback+0x270>)
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	8b3b      	ldrh	r3, [r7, #24]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	337f      	adds	r3, #127	; 0x7f
 8002a1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a1e:	e00a      	b.n	8002a36 <HAL_UART_RxCpltCallback+0x8e>
				else len = RX_BFR_SIZE + 1;												// bytes overwritten error
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a24:	e007      	b.n	8002a36 <HAL_UART_RxCpltCallback+0x8e>
			} else {
				len = RxBfrPos - start;													// no bytes overwritten
 8002a26:	4b7c      	ldr	r3, [pc, #496]	; (8002c18 <HAL_UART_RxCpltCallback+0x270>)
 8002a28:	881a      	ldrh	r2, [r3, #0]
 8002a2a:	8b3b      	ldrh	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a30:	e001      	b.n	8002a36 <HAL_UART_RxCpltCallback+0x8e>
			}
		} else {
			len = RX_BFR_SIZE + 2;														// dual rollover error
 8002a32:	2381      	movs	r3, #129	; 0x81
 8002a34:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if(len && (len <= RX_BFR_SIZE)) {
 8002a36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8125 	beq.w	8002c88 <HAL_UART_RxCpltCallback+0x2e0>
 8002a3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a40:	2b7f      	cmp	r3, #127	; 0x7f
 8002a42:	f200 8121 	bhi.w	8002c88 <HAL_UART_RxCpltCallback+0x2e0>
//			TxSize = strlen(TxBuffer);
			// add received bytes to TxBuffer
//			uint8_t i;
//			for(i = 0; i < len; i++) *(TxBuffer + TxSize + i) = *(RxBuffer + ((start + i) % RX_BFR_SIZE));
//			TxSize += i;
			if (RxBuffer[start] == 'f' || RxBuffer[start] == 'F') Flag_ShowStats = 4;	//show statistics from Flash
 8002a46:	8b3b      	ldrh	r3, [r7, #24]
 8002a48:	4a75      	ldr	r2, [pc, #468]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	2b66      	cmp	r3, #102	; 0x66
 8002a4e:	d004      	beq.n	8002a5a <HAL_UART_RxCpltCallback+0xb2>
 8002a50:	8b3b      	ldrh	r3, [r7, #24]
 8002a52:	4a73      	ldr	r2, [pc, #460]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002a54:	5cd3      	ldrb	r3, [r2, r3]
 8002a56:	2b46      	cmp	r3, #70	; 0x46
 8002a58:	d102      	bne.n	8002a60 <HAL_UART_RxCpltCallback+0xb8>
 8002a5a:	4b72      	ldr	r3, [pc, #456]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'c' || RxBuffer[start] == 'C') Flag_ShowStats = 5;	//show current statistics
 8002a60:	8b3b      	ldrh	r3, [r7, #24]
 8002a62:	4a6f      	ldr	r2, [pc, #444]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	2b63      	cmp	r3, #99	; 0x63
 8002a68:	d004      	beq.n	8002a74 <HAL_UART_RxCpltCallback+0xcc>
 8002a6a:	8b3b      	ldrh	r3, [r7, #24]
 8002a6c:	4a6c      	ldr	r2, [pc, #432]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	2b43      	cmp	r3, #67	; 0x43
 8002a72:	d102      	bne.n	8002a7a <HAL_UART_RxCpltCallback+0xd2>
 8002a74:	4b6b      	ldr	r3, [pc, #428]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002a76:	2205      	movs	r2, #5
 8002a78:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'w' || RxBuffer[start] == 'W') Flag_ShowStats = 3;	//show WattHours statistics
 8002a7a:	8b3b      	ldrh	r3, [r7, #24]
 8002a7c:	4a68      	ldr	r2, [pc, #416]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	2b77      	cmp	r3, #119	; 0x77
 8002a82:	d004      	beq.n	8002a8e <HAL_UART_RxCpltCallback+0xe6>
 8002a84:	8b3b      	ldrh	r3, [r7, #24]
 8002a86:	4a66      	ldr	r2, [pc, #408]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002a88:	5cd3      	ldrb	r3, [r2, r3]
 8002a8a:	2b57      	cmp	r3, #87	; 0x57
 8002a8c:	d102      	bne.n	8002a94 <HAL_UART_RxCpltCallback+0xec>
 8002a8e:	4b65      	ldr	r3, [pc, #404]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002a90:	2203      	movs	r2, #3
 8002a92:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'e' || RxBuffer[start] == 'E')						//erase statistics in flash - only newest
 8002a94:	8b3b      	ldrh	r3, [r7, #24]
 8002a96:	4a62      	ldr	r2, [pc, #392]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	2b65      	cmp	r3, #101	; 0x65
 8002a9c:	d004      	beq.n	8002aa8 <HAL_UART_RxCpltCallback+0x100>
 8002a9e:	8b3b      	ldrh	r3, [r7, #24]
 8002aa0:	4a5f      	ldr	r2, [pc, #380]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	2b45      	cmp	r3, #69	; 0x45
 8002aa6:	d11e      	bne.n	8002ae6 <HAL_UART_RxCpltCallback+0x13e>
			{
				uint32_t i, temp;
				temp = StatCurrentWh.FlashPageCounter;
 8002aa8:	4b5f      	ldr	r3, [pc, #380]	; (8002c28 <HAL_UART_RxCpltCallback+0x280>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	617b      	str	r3, [r7, #20]
				for(i = 0; i < sizeof(Stat_Flash); i++)		//clear statistics that will be stored in flash at top of the hour
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	e00c      	b.n	8002ace <HAL_UART_RxCpltCallback+0x126>
				{
					((uint8_t *) &StatCurrentWh)[i] = 0;
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	4a5c      	ldr	r2, [pc, #368]	; (8002c28 <HAL_UART_RxCpltCallback+0x280>)
 8002ab8:	4413      	add	r3, r2
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
					((uint8_t *) &Stat_Flash)[i] = 0;
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	4a5a      	ldr	r2, [pc, #360]	; (8002c2c <HAL_UART_RxCpltCallback+0x284>)
 8002ac2:	4413      	add	r3, r2
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
				for(i = 0; i < sizeof(Stat_Flash); i++)		//clear statistics that will be stored in flash at top of the hour
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	3301      	adds	r3, #1
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2baf      	cmp	r3, #175	; 0xaf
 8002ad2:	d9ef      	bls.n	8002ab4 <HAL_UART_RxCpltCallback+0x10c>
				}
				StatCurrentWh.FlashPageCounter = temp;
 8002ad4:	4a54      	ldr	r2, [pc, #336]	; (8002c28 <HAL_UART_RxCpltCallback+0x280>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	6013      	str	r3, [r2, #0]
				Stat_Flash.FlashPageCounter = temp;
 8002ada:	4a54      	ldr	r2, [pc, #336]	; (8002c2c <HAL_UART_RxCpltCallback+0x284>)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	6013      	str	r3, [r2, #0]
				Flag_ShowStats = 4;
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'd' || RxBuffer[start] == 'D')						//delete current and historical statistics stored in flash
 8002ae6:	8b3b      	ldrh	r3, [r7, #24]
 8002ae8:	4a4d      	ldr	r2, [pc, #308]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	2b64      	cmp	r3, #100	; 0x64
 8002aee:	d004      	beq.n	8002afa <HAL_UART_RxCpltCallback+0x152>
 8002af0:	8b3b      	ldrh	r3, [r7, #24]
 8002af2:	4a4b      	ldr	r2, [pc, #300]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	2b44      	cmp	r3, #68	; 0x44
 8002af8:	d104      	bne.n	8002b04 <HAL_UART_RxCpltCallback+0x15c>
			{
				DeleteStatistics2FLASH();
 8002afa:	f7fe ffa9 	bl	8001a50 <DeleteStatistics2FLASH>
				Flag_ShowStats = 4;
 8002afe:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002b00:	2204      	movs	r2, #4
 8002b02:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'p' || RxBuffer[start] == 'P')						//show calibration data
 8002b04:	8b3b      	ldrh	r3, [r7, #24]
 8002b06:	4a46      	ldr	r2, [pc, #280]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	2b70      	cmp	r3, #112	; 0x70
 8002b0c:	d004      	beq.n	8002b18 <HAL_UART_RxCpltCallback+0x170>
 8002b0e:	8b3b      	ldrh	r3, [r7, #24]
 8002b10:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	2b50      	cmp	r3, #80	; 0x50
 8002b16:	d102      	bne.n	8002b1e <HAL_UART_RxCpltCallback+0x176>
			{
				Flag_ShowStats = 62;
 8002b18:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002b1a:	223e      	movs	r2, #62	; 0x3e
 8002b1c:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'o' || RxBuffer[start] == 'O')						//read calibration data from flash
 8002b1e:	8b3b      	ldrh	r3, [r7, #24]
 8002b20:	4a3f      	ldr	r2, [pc, #252]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	2b6f      	cmp	r3, #111	; 0x6f
 8002b26:	d004      	beq.n	8002b32 <HAL_UART_RxCpltCallback+0x18a>
 8002b28:	8b3b      	ldrh	r3, [r7, #24]
 8002b2a:	4a3d      	ldr	r2, [pc, #244]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002b2c:	5cd3      	ldrb	r3, [r2, r3]
 8002b2e:	2b4f      	cmp	r3, #79	; 0x4f
 8002b30:	d104      	bne.n	8002b3c <HAL_UART_RxCpltCallback+0x194>
			{
				Flag_ShowStats = 62;
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002b34:	223e      	movs	r2, #62	; 0x3e
 8002b36:	601a      	str	r2, [r3, #0]
				RestoreCalValuesFromFLASH();
 8002b38:	f7fe fde8 	bl	800170c <RestoreCalValuesFromFLASH>
			}
			if (RxBuffer[start] == 'l' || RxBuffer[start] == 'L')						//save calibration data
 8002b3c:	8b3b      	ldrh	r3, [r7, #24]
 8002b3e:	4a38      	ldr	r2, [pc, #224]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002b40:	5cd3      	ldrb	r3, [r2, r3]
 8002b42:	2b6c      	cmp	r3, #108	; 0x6c
 8002b44:	d004      	beq.n	8002b50 <HAL_UART_RxCpltCallback+0x1a8>
 8002b46:	8b3b      	ldrh	r3, [r7, #24]
 8002b48:	4a35      	ldr	r2, [pc, #212]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	2b4c      	cmp	r3, #76	; 0x4c
 8002b4e:	d104      	bne.n	8002b5a <HAL_UART_RxCpltCallback+0x1b2>
			{
				StoreCalData2FLASH();
 8002b50:	f7fe fe0e 	bl	8001770 <StoreCalData2FLASH>
				Flag_ShowStats = 62;
 8002b54:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002b56:	223e      	movs	r2, #62	; 0x3e
 8002b58:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'k' || RxBuffer[start] == 'K')						//save calibration data
 8002b5a:	8b3b      	ldrh	r3, [r7, #24]
 8002b5c:	4a30      	ldr	r2, [pc, #192]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002b5e:	5cd3      	ldrb	r3, [r2, r3]
 8002b60:	2b6b      	cmp	r3, #107	; 0x6b
 8002b62:	d004      	beq.n	8002b6e <HAL_UART_RxCpltCallback+0x1c6>
 8002b64:	8b3b      	ldrh	r3, [r7, #24]
 8002b66:	4a2e      	ldr	r2, [pc, #184]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002b68:	5cd3      	ldrb	r3, [r2, r3]
 8002b6a:	2b4b      	cmp	r3, #75	; 0x4b
 8002b6c:	d110      	bne.n	8002b90 <HAL_UART_RxCpltCallback+0x1e8>
			{
				Flag_ShowStats = 62;
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002b70:	223e      	movs	r2, #62	; 0x3e
 8002b72:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < sizeof(CalibrationValues); i++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	e007      	b.n	8002b8a <HAL_UART_RxCpltCallback+0x1e2>
				{
					((uint8_t *) &CalibrationValues)[i] = 0;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	4a2c      	ldr	r2, [pc, #176]	; (8002c30 <HAL_UART_RxCpltCallback+0x288>)
 8002b7e:	4413      	add	r3, r2
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < sizeof(CalibrationValues); i++)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	3301      	adds	r3, #1
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	2b27      	cmp	r3, #39	; 0x27
 8002b8e:	d9f4      	bls.n	8002b7a <HAL_UART_RxCpltCallback+0x1d2>
				}
			}
			if (RxBuffer[start] == '0')													//calibrate inverter "0" current
 8002b90:	8b3b      	ldrh	r3, [r7, #24]
 8002b92:	4a23      	ldr	r2, [pc, #140]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002b94:	5cd3      	ldrb	r3, [r2, r3]
 8002b96:	2b30      	cmp	r3, #48	; 0x30
 8002b98:	d11d      	bne.n	8002bd6 <HAL_UART_RxCpltCallback+0x22e>
			{
				Flag_ShowStats = 62;
 8002b9a:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002b9c:	223e      	movs	r2, #62	; 0x3e
 8002b9e:	601a      	str	r2, [r3, #0]
				uint32_t temp;
				temp = 	ConvertIValue(Adc1RawReadings.Inv_current);
 8002ba0:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_UART_RxCpltCallback+0x28c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fb9b 	bl	80022e0 <ConvertIValue>
 8002baa:	6138      	str	r0, [r7, #16]
				if (temp < 500)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bb2:	d209      	bcs.n	8002bc8 <HAL_UART_RxCpltCallback+0x220>
				{
					CalibrationValues.Inv_current_off = (int)temp;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <HAL_UART_RxCpltCallback+0x288>)
 8002bb8:	6053      	str	r3, [r2, #4]
					sprintf(TxBuffer, "\r\nInverter current offset: %i\r\n",( int)temp);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	491e      	ldr	r1, [pc, #120]	; (8002c38 <HAL_UART_RxCpltCallback+0x290>)
 8002bc0:	481e      	ldr	r0, [pc, #120]	; (8002c3c <HAL_UART_RxCpltCallback+0x294>)
 8002bc2:	f00b fc19 	bl	800e3f8 <siprintf>
 8002bc6:	e006      	b.n	8002bd6 <HAL_UART_RxCpltCallback+0x22e>
				}
				else
				{
					sprintf(TxBuffer, "\r\nInverter Zero current too high: %i\r\n",( int)Adc1Measurements.Inv_current);
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_UART_RxCpltCallback+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	491d      	ldr	r1, [pc, #116]	; (8002c44 <HAL_UART_RxCpltCallback+0x29c>)
 8002bd0:	481a      	ldr	r0, [pc, #104]	; (8002c3c <HAL_UART_RxCpltCallback+0x294>)
 8002bd2:	f00b fc11 	bl	800e3f8 <siprintf>
				}
			}
			if (RxBuffer[start] == '1')													//calibrate PV "0" current
 8002bd6:	8b3b      	ldrh	r3, [r7, #24]
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_UART_RxCpltCallback+0x278>)
 8002bda:	5cd3      	ldrb	r3, [r2, r3]
 8002bdc:	2b31      	cmp	r3, #49	; 0x31
 8002bde:	d13c      	bne.n	8002c5a <HAL_UART_RxCpltCallback+0x2b2>
			{
				Flag_ShowStats = 62;
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_UART_RxCpltCallback+0x27c>)
 8002be2:	223e      	movs	r2, #62	; 0x3e
 8002be4:	601a      	str	r2, [r3, #0]
				uint32_t temp;
				temp = 	ConvertIValue(Adc1RawReadings.PV_current);
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_UART_RxCpltCallback+0x28c>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fb78 	bl	80022e0 <ConvertIValue>
 8002bf0:	60f8      	str	r0, [r7, #12]
				if (temp < 500)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bf8:	d228      	bcs.n	8002c4c <HAL_UART_RxCpltCallback+0x2a4>
				{
					CalibrationValues.PV_current_off = (int)temp;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <HAL_UART_RxCpltCallback+0x288>)
 8002bfe:	6093      	str	r3, [r2, #8]
					sprintf(TxBuffer, "\r\nPV current offset: %i\r\n",( int)temp);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	461a      	mov	r2, r3
 8002c04:	4910      	ldr	r1, [pc, #64]	; (8002c48 <HAL_UART_RxCpltCallback+0x2a0>)
 8002c06:	480d      	ldr	r0, [pc, #52]	; (8002c3c <HAL_UART_RxCpltCallback+0x294>)
 8002c08:	f00b fbf6 	bl	800e3f8 <siprintf>
 8002c0c:	e025      	b.n	8002c5a <HAL_UART_RxCpltCallback+0x2b2>
 8002c0e:	bf00      	nop
 8002c10:	20005bc8 	.word	0x20005bc8
 8002c14:	20000235 	.word	0x20000235
 8002c18:	20000236 	.word	0x20000236
 8002c1c:	20000234 	.word	0x20000234
 8002c20:	20005d10 	.word	0x20005d10
 8002c24:	2000025c 	.word	0x2000025c
 8002c28:	20005a20 	.word	0x20005a20
 8002c2c:	20006208 	.word	0x20006208
 8002c30:	20005c4c 	.word	0x20005c4c
 8002c34:	2000619c 	.word	0x2000619c
 8002c38:	08012be8 	.word	0x08012be8
 8002c3c:	20005d94 	.word	0x20005d94
 8002c40:	20005998 	.word	0x20005998
 8002c44:	08012c08 	.word	0x08012c08
 8002c48:	08012c30 	.word	0x08012c30
				}
				else
				{
					sprintf(TxBuffer, "\r\nPV Zero current too high: %i\r\n",( int)Adc1Measurements.PV_current);
 8002c4c:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_UART_RxCpltCallback+0x338>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4924      	ldr	r1, [pc, #144]	; (8002ce4 <HAL_UART_RxCpltCallback+0x33c>)
 8002c54:	4824      	ldr	r0, [pc, #144]	; (8002ce8 <HAL_UART_RxCpltCallback+0x340>)
 8002c56:	f00b fbcf 	bl	800e3f8 <siprintf>
				}
			}
			if (RxBuffer[start] == 'h' || RxBuffer[start] == 'H' || RxBuffer[start] == '?')
 8002c5a:	8b3b      	ldrh	r3, [r7, #24]
 8002c5c:	4a23      	ldr	r2, [pc, #140]	; (8002cec <HAL_UART_RxCpltCallback+0x344>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	2b68      	cmp	r3, #104	; 0x68
 8002c62:	d009      	beq.n	8002c78 <HAL_UART_RxCpltCallback+0x2d0>
 8002c64:	8b3b      	ldrh	r3, [r7, #24]
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <HAL_UART_RxCpltCallback+0x344>)
 8002c68:	5cd3      	ldrb	r3, [r2, r3]
 8002c6a:	2b48      	cmp	r3, #72	; 0x48
 8002c6c:	d004      	beq.n	8002c78 <HAL_UART_RxCpltCallback+0x2d0>
 8002c6e:	8b3b      	ldrh	r3, [r7, #24]
 8002c70:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <HAL_UART_RxCpltCallback+0x344>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	2b3f      	cmp	r3, #63	; 0x3f
 8002c76:	d124      	bne.n	8002cc2 <HAL_UART_RxCpltCallback+0x31a>
			{
				Flag_ShowStats = 60;
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_UART_RxCpltCallback+0x348>)
 8002c7a:	223c      	movs	r2, #60	; 0x3c
 8002c7c:	601a      	str	r2, [r3, #0]
				sprintf(TxBuffer, "\r\nhelp: \r\n"
 8002c7e:	491d      	ldr	r1, [pc, #116]	; (8002cf4 <HAL_UART_RxCpltCallback+0x34c>)
 8002c80:	4819      	ldr	r0, [pc, #100]	; (8002ce8 <HAL_UART_RxCpltCallback+0x340>)
 8002c82:	f00b fbb9 	bl	800e3f8 <siprintf>
			if (RxBuffer[start] == 'h' || RxBuffer[start] == 'H' || RxBuffer[start] == '?')
 8002c86:	e01c      	b.n	8002cc2 <HAL_UART_RxCpltCallback+0x31a>

		} else {
			// buffer overflow error:
//			sprintf(TxBuffer, "NAK RX BUFFER OVERFLOW ERROR %d\r\n", (len - RX_BFR_SIZE));
//			TxSize = strlen(TxBuffer);
			if(HAL_UART_GetError(&huart1)) {	//clear RX errors if occured
 8002c88:	481b      	ldr	r0, [pc, #108]	; (8002cf8 <HAL_UART_RxCpltCallback+0x350>)
 8002c8a:	f006 fca5 	bl	80095d8 <HAL_UART_GetError>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d017      	beq.n	8002cc4 <HAL_UART_RxCpltCallback+0x31c>
			        HAL_UART_DMAStop(&huart1);                          // STOP Uart
 8002c94:	4818      	ldr	r0, [pc, #96]	; (8002cf8 <HAL_UART_RxCpltCallback+0x350>)
 8002c96:	f006 f901 	bl	8008e9c <HAL_UART_DMAStop>
			        MX_USART1_UART_Init();                              // INIT Uart
 8002c9a:	f7ff fd85 	bl	80027a8 <MX_USART1_UART_Init>
			        HAL_UART_Receive_DMA(&huart1, RxBuffer, RX_BFR_SIZE);  // START Uart DMA
 8002c9e:	227f      	movs	r2, #127	; 0x7f
 8002ca0:	4912      	ldr	r1, [pc, #72]	; (8002cec <HAL_UART_RxCpltCallback+0x344>)
 8002ca2:	4815      	ldr	r0, [pc, #84]	; (8002cf8 <HAL_UART_RxCpltCallback+0x350>)
 8002ca4:	f006 f8a4 	bl	8008df0 <HAL_UART_Receive_DMA>
			        __HAL_UART_CLEAR_IDLEFLAG(&huart1);                 // Clear Idle IT-Flag
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_UART_RxCpltCallback+0x350>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2210      	movs	r2, #16
 8002cae:	621a      	str	r2, [r3, #32]
			        __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);        // Enable Idle Interrupt
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_UART_RxCpltCallback+0x350>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_UART_RxCpltCallback+0x350>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0210 	orr.w	r2, r2, #16
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e000      	b.n	8002cc4 <HAL_UART_RxCpltCallback+0x31c>
			if (RxBuffer[start] == 'h' || RxBuffer[start] == 'H' || RxBuffer[start] == '?')
 8002cc2:	bf00      	nop
			   }
		}

//		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);						// send a response

		RxRollover = 0;																	// reset the Rollover variable
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <HAL_UART_RxCpltCallback+0x354>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
	} else {
		// no idle flag? --> DMA rollover occurred
		RxRollover++;		// increment Rollover Counter
	}
}
 8002cca:	e005      	b.n	8002cd8 <HAL_UART_RxCpltCallback+0x330>
		RxRollover++;		// increment Rollover Counter
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_UART_RxCpltCallback+0x354>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_UART_RxCpltCallback+0x354>)
 8002cd6:	701a      	strb	r2, [r3, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	3728      	adds	r7, #40	; 0x28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20005998 	.word	0x20005998
 8002ce4:	08012c4c 	.word	0x08012c4c
 8002ce8:	20005d94 	.word	0x20005d94
 8002cec:	20005d10 	.word	0x20005d10
 8002cf0:	2000025c 	.word	0x2000025c
 8002cf4:	08012c70 	.word	0x08012c70
 8002cf8:	20005bc8 	.word	0x20005bc8
 8002cfc:	20000234 	.word	0x20000234

08002d00 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	// UART Tx Complete Callback;
	TxCounter++;
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_UART_TxCpltCallback+0x20>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_UART_TxCpltCallback+0x20>)
 8002d12:	701a      	strb	r2, [r3, #0]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	20000238 	.word	0x20000238

08002d24 <InverterOn_batteryAsBackup>:

void InverterOn_batteryAsBackup(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
	if (StatCurrentWh.DayDuration_current > 900)	//15 minutes in the day/after dawn
 8002d28:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <InverterOn_batteryAsBackup+0x168>)
 8002d2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d2e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002d32:	d905      	bls.n	8002d40 <InverterOn_batteryAsBackup+0x1c>
	{
		StatCurrentWs.Time_DuskTime = 0;		//clear "after dusk timer" - it's day
 8002d34:	4b56      	ldr	r3, [pc, #344]	; (8002e90 <InverterOn_batteryAsBackup+0x16c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	649a      	str	r2, [r3, #72]	; 0x48
		StatCountFlagsWs.ChgStatSaved = 0;		//enable saving daytime stats at dusk
 8002d3a:	4b56      	ldr	r3, [pc, #344]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
	}
					//charge battery slightly?
					if (((Adc1Measurements.Batt_voltage) < (BATT_MIN_VOLTAGE-BATT_VOLTAGE_MINHYSTERESIS+VoltHysteresisDsChg))  &&
 8002d40:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <InverterOn_batteryAsBackup+0x174>)
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	4b55      	ldr	r3, [pc, #340]	; (8002e9c <InverterOn_batteryAsBackup+0x178>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f203 1347 	addw	r3, r3, #327	; 0x147
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d219      	bcs.n	8002d84 <InverterOn_batteryAsBackup+0x60>
							((Adc1Measurements.Batt_voltage) > BATT_CRITICAL_MIN_VOLTAGE) &&
 8002d50:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <InverterOn_batteryAsBackup+0x174>)
 8002d52:	68db      	ldr	r3, [r3, #12]
					if (((Adc1Measurements.Batt_voltage) < (BATT_MIN_VOLTAGE-BATT_VOLTAGE_MINHYSTERESIS+VoltHysteresisDsChg))  &&
 8002d54:	2bf0      	cmp	r3, #240	; 0xf0
 8002d56:	d915      	bls.n	8002d84 <InverterOn_batteryAsBackup+0x60>
							StatCurrentWs.Ws_BattRecharge < TOUT_BATTRECHARGE)	//prevent too long recharging (be carefoul, cleared every hour)
 8002d58:	4b4d      	ldr	r3, [pc, #308]	; (8002e90 <InverterOn_batteryAsBackup+0x16c>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
							((Adc1Measurements.Batt_voltage) > BATT_CRITICAL_MIN_VOLTAGE) &&
 8002d5c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002d60:	d210      	bcs.n	8002d84 <InverterOn_batteryAsBackup+0x60>
					{//yes, re-charge battery
						BatteryMOS_ON();
 8002d62:	f7ff f951 	bl	8002008 <BatteryMOS_ON>
						VoltHysteresisDsChg = BATT_VOLTAGE_MINHYSTERESIS;	//hysteresis for min operation batery voltage
 8002d66:	4b4d      	ldr	r3, [pc, #308]	; (8002e9c <InverterOn_batteryAsBackup+0x178>)
 8002d68:	2216      	movs	r2, #22
 8002d6a:	601a      	str	r2, [r3, #0]
						InverterMOS_OFF();	//tbd
 8002d6c:	f7ff f9d4 	bl	8002118 <InverterMOS_OFF>
						StatCountFlagsWs.Ws_BattRecharge=1;	//enable to count energy supplied for recharging, in 1Sectimer; will be cleared automatically
 8002d70:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	611a      	str	r2, [r3, #16]
						StatCountFlagsWs.Time_BattRecharge=1;	//set flag to prevent INV mos ON
 8002d76:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	615a      	str	r2, [r3, #20]
						StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 8002d7c:	4b45      	ldr	r3, [pc, #276]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d82:	e081      	b.n	8002e88 <InverterOn_batteryAsBackup+0x164>
					}
					else
					{//no need to recharge battery, check what else you can do
						//prevent BatMosOff when no inv operation; MosOff only once when exiting from batt recharge
						if (StatCountFlagsWs.Time_BattRecharge) BatteryMOS_OFF();
 8002d84:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <InverterOn_batteryAsBackup+0x6c>
 8002d8c:	f7ff f97c 	bl	8002088 <BatteryMOS_OFF>
						VoltHysteresisDsChg = 0;
 8002d90:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <InverterOn_batteryAsBackup+0x178>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
						StatCountFlagsWs.Time_BattRecharge=0;	//reset flag to enable INV mos ON and disable counting time recharge
 8002d96:	4b3f      	ldr	r3, [pc, #252]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]

						//switch INV ON only if not battery recharge AND Inverter reset procedure isnt in progress
						//if (!StatCountFlagsWs.Time_BattRecharge
						//		&& !FlagResetInverter) InverterMOS_ON();
						InverterMOS_ON();
 8002d9c:	f7ff f9a4 	bl	80020e8 <InverterMOS_ON>
						//is inverter working?
						if (Adc1Measurements.Inv_current > INV_CURRENT_MIN)
 8002da0:	4b3d      	ldr	r3, [pc, #244]	; (8002e98 <InverterOn_batteryAsBackup+0x174>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2bfa      	cmp	r3, #250	; 0xfa
 8002da6:	d908      	bls.n	8002dba <InverterOn_batteryAsBackup+0x96>
						{//yes, inverter working
							StatCountFlagsWs.Ws_Inverter=1;	//inverter working, enable to count energy, in 1Sectimer
 8002da8:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	609a      	str	r2, [r3, #8]
							BatteryMOS_OFF();		//it's day, inv working-> switch off battery mos
 8002dae:	f7ff f96b 	bl	8002088 <BatteryMOS_OFF>
							StatCountFlagsWs.InvFault = 0;	//flag to clear invfault occurence
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34
									}//end of battery fully charged
								}//end of batt not OK to charge
							}//end of inv reset  procedure not launched
						}//end of its day, inv not working
					}//end of no need to recharge battery
}
 8002db8:	e066      	b.n	8002e88 <InverterOn_batteryAsBackup+0x164>
							if (!StatCountFlagsWs.InvFault)
 8002dba:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <InverterOn_batteryAsBackup+0xae>
									StatCurrentWh.InvFaultCntr++;
 8002dc2:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <InverterOn_batteryAsBackup+0x168>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	4a30      	ldr	r2, [pc, #192]	; (8002e8c <InverterOn_batteryAsBackup+0x168>)
 8002dca:	6313      	str	r3, [r2, #48]	; 0x30
									StatCountFlagsWs.InvFault = 1;
 8002dcc:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34
							StatCountFlagsWs.Time_NoInv=1;	//enable to count time when inv is not working, in 1Sectimer
 8002dd2:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	619a      	str	r2, [r3, #24]
							ResetInverterDay();	//try reset inv
 8002dd8:	f7fe fa06 	bl	80011e8 <ResetInverterDay>
							if (!FlagResetInverter ) 			//if INV Reset procedure is not launched
 8002ddc:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <InverterOn_batteryAsBackup+0x17c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d151      	bne.n	8002e88 <InverterOn_batteryAsBackup+0x164>
								if ((Adc1Measurements.Batt_voltage) < (BATT_MAX_VOLTAGE+VoltHysteresisChg)
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <InverterOn_batteryAsBackup+0x174>)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <InverterOn_batteryAsBackup+0x180>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f203 1391 	addw	r3, r3, #401	; 0x191
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d212      	bcs.n	8002e1a <InverterOn_batteryAsBackup+0xf6>
										&& Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <InverterOn_batteryAsBackup+0x174>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2bf0      	cmp	r3, #240	; 0xf0
 8002dfa:	d90e      	bls.n	8002e1a <InverterOn_batteryAsBackup+0xf6>
									BatteryMOS_ON();
 8002dfc:	f7ff f904 	bl	8002008 <BatteryMOS_ON>
									StatCountFlagsWs.Ws_BattNoInv=1;	//enable to count energy to battery when INV isnt working, in 1Sectimer
 8002e00:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	605a      	str	r2, [r3, #4]
									StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	64da      	str	r2, [r3, #76]	; 0x4c
									VoltHysteresisChg = BATT_VOLTAGE_MAXHYSTERESIS;
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <InverterOn_batteryAsBackup+0x180>)
 8002e0e:	2214      	movs	r2, #20
 8002e10:	601a      	str	r2, [r3, #0]
									StatCountFlagsWs.Chg_cycle_count = 0;	//when battery charging unlock flag enabling counting dschg cycles
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
 8002e18:	e036      	b.n	8002e88 <InverterOn_batteryAsBackup+0x164>
									BatteryMOS_OFF();
 8002e1a:	f7ff f935 	bl	8002088 <BatteryMOS_OFF>
									StatCountFlagsWs.Time_NoBattery2Chg=1;	//enable to count time without possibility to charge battery, in 1Sectimer
 8002e1e:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	621a      	str	r2, [r3, #32]
									VoltHysteresisChg = 0;
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <InverterOn_batteryAsBackup+0x180>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
									if ((Adc1Measurements.Batt_voltage) > (BATT_MAX_VOLTAGE+VoltHysteresisChg))
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <InverterOn_batteryAsBackup+0x174>)
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <InverterOn_batteryAsBackup+0x180>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f203 1391 	addw	r3, r3, #401	; 0x191
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d926      	bls.n	8002e88 <InverterOn_batteryAsBackup+0x164>
										StatCurrentWh.Chg_Ah_lastFull=StatCurrentWh.Chg_Ah_current;	//store fully chg Ah
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <InverterOn_batteryAsBackup+0x168>)
 8002e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e40:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <InverterOn_batteryAsBackup+0x168>)
 8002e42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
										if (!StatCountFlagsWs.Chg_cycle_c2 && StatCountFlagsWs.Chg_cycle_count)
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10e      	bne.n	8002e6c <InverterOn_batteryAsBackup+0x148>
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <InverterOn_batteryAsBackup+0x148>
											StatCurrentWh.Chg_Volt_lastFull = Adc1Measurements.Batt_voltage;	//store lastvoltage
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <InverterOn_batteryAsBackup+0x174>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <InverterOn_batteryAsBackup+0x168>)
 8002e5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
											StatCountFlagsWs.Chg_cycle_c2 = 1;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
											StatCountFlagsWs.Dschg_cycle_c2 = 0;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c
										if (!StatCountFlagsWs.Chg_cycle_count)
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <InverterOn_batteryAsBackup+0x164>
											StatCountFlagsWs.Chg_cycle_count = 1; //if not, set flag 'fully charged' to count/set only once
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
											StatCountFlagsWs.Dschg_cycle_count = 0;	//clear flag to enable dschg counter when batt empty
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <InverterOn_batteryAsBackup+0x170>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
											StatCurrentWh.Dschg_Ah_current=0;	//clear discharge Ah
 8002e80:	4b02      	ldr	r3, [pc, #8]	; (8002e8c <InverterOn_batteryAsBackup+0x168>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002e86:	e7ff      	b.n	8002e88 <InverterOn_batteryAsBackup+0x164>
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20005a20 	.word	0x20005a20
 8002e90:	20005c74 	.word	0x20005c74
 8002e94:	200059bc 	.word	0x200059bc
 8002e98:	20005998 	.word	0x20005998
 8002e9c:	20000254 	.word	0x20000254
 8002ea0:	20006198 	.word	0x20006198
 8002ea4:	20000250 	.word	0x20000250

08002ea8 <DischargeProcedure>:

void DischargeProcedure(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	//VoltHysteresisChg = 0;		//leave Chg hysteresis elevated for transition period during dusk
	StatCountFlagsWs.Time_BattRecharge=0;	//you cant recharge during night, reset procedure
 8002eac:	4b64      	ldr	r3, [pc, #400]	; (8003040 <DischargeProcedure+0x198>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	615a      	str	r2, [r3, #20]
	StatCountFlagsWs.Time_NightTime=1;	//its nighttime, enable to count nightime in 1Sectimer
 8002eb2:	4b63      	ldr	r3, [pc, #396]	; (8003040 <DischargeProcedure+0x198>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	61da      	str	r2, [r3, #28]
	StatCountFlagsWs.Time_DuskTime=1;	//its nightitme, enable flag to count time passed from recent dusk;
 8002eb8:	4b61      	ldr	r3, [pc, #388]	; (8003040 <DischargeProcedure+0x198>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	649a      	str	r2, [r3, #72]	; 0x48
	if (StatCurrentWs.Time_DuskTime > 900 && !StatCountFlagsWs.ChgStatSaved)	//15 minutes in the night/after dusk store Chg_Ah_last
 8002ebe:	4b61      	ldr	r3, [pc, #388]	; (8003044 <DischargeProcedure+0x19c>)
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002ec6:	d934      	bls.n	8002f32 <DischargeProcedure+0x8a>
 8002ec8:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <DischargeProcedure+0x198>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d130      	bne.n	8002f32 <DischargeProcedure+0x8a>
	{
		StatCountFlagsWs.ChgStatSaved = 1;			//block saving daytime stats at dusk more than once
 8002ed0:	4b5b      	ldr	r3, [pc, #364]	; (8003040 <DischargeProcedure+0x198>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
		StatCurrentWh.Chg_Ah_3 = StatCurrentWh.Chg_Ah_2;
 8002ed6:	4b5c      	ldr	r3, [pc, #368]	; (8003048 <DischargeProcedure+0x1a0>)
 8002ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002edc:	4a5a      	ldr	r2, [pc, #360]	; (8003048 <DischargeProcedure+0x1a0>)
 8002ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		StatCurrentWh.Chg_Ah_2 = StatCurrentWh.Chg_Ah_1;
 8002ee2:	4b59      	ldr	r3, [pc, #356]	; (8003048 <DischargeProcedure+0x1a0>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	4a57      	ldr	r2, [pc, #348]	; (8003048 <DischargeProcedure+0x1a0>)
 8002eea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		StatCurrentWh.Chg_Ah_1 = StatCurrentWh.Chg_Ah_last;
 8002eee:	4b56      	ldr	r3, [pc, #344]	; (8003048 <DischargeProcedure+0x1a0>)
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef4:	4a54      	ldr	r2, [pc, #336]	; (8003048 <DischargeProcedure+0x1a0>)
 8002ef6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		StatCurrentWh.Chg_Ah_last = StatCurrentWh.Chg_Ah_current;
 8002efa:	4b53      	ldr	r3, [pc, #332]	; (8003048 <DischargeProcedure+0x1a0>)
 8002efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f00:	4a51      	ldr	r2, [pc, #324]	; (8003048 <DischargeProcedure+0x1a0>)
 8002f02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		StatCurrentWh.DayDuration_3 = StatCurrentWh.DayDuration_2;
 8002f06:	4b50      	ldr	r3, [pc, #320]	; (8003048 <DischargeProcedure+0x1a0>)
 8002f08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f0c:	4a4e      	ldr	r2, [pc, #312]	; (8003048 <DischargeProcedure+0x1a0>)
 8002f0e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
		StatCurrentWh.DayDuration_2 = StatCurrentWh.DayDuration_1;
 8002f12:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <DischargeProcedure+0x1a0>)
 8002f14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f18:	4a4b      	ldr	r2, [pc, #300]	; (8003048 <DischargeProcedure+0x1a0>)
 8002f1a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		StatCurrentWh.DayDuration_1 = StatCurrentWh.DayDuration_current;
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <DischargeProcedure+0x1a0>)
 8002f20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f24:	4a48      	ldr	r2, [pc, #288]	; (8003048 <DischargeProcedure+0x1a0>)
 8002f26:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		StatCurrentWh.DayDuration_current = 0;
 8002f2a:	4b47      	ldr	r3, [pc, #284]	; (8003048 <DischargeProcedure+0x1a0>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	//batt OK to discharge?
	if (Adc1Measurements.Batt_voltage > (BATT_MIN_VOLTAGE-VoltHysteresisDsChg))
 8002f32:	4b46      	ldr	r3, [pc, #280]	; (800304c <DischargeProcedure+0x1a4>)
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	4b46      	ldr	r3, [pc, #280]	; (8003050 <DischargeProcedure+0x1a8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f5c3 73ae 	rsb	r3, r3, #348	; 0x15c
 8002f3e:	3301      	adds	r3, #1
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d928      	bls.n	8002f96 <DischargeProcedure+0xee>
	{//yes, OK to discharge
		if (!FlagResetInverter)
 8002f44:	4b43      	ldr	r3, [pc, #268]	; (8003054 <DischargeProcedure+0x1ac>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <DischargeProcedure+0xa8>
		{//if reset procedure isn't in progress, turn on batt mos and inv mos
			//BatteryMOS_ON();
			DelayedInvMosOn();
 8002f4c:	f7fe f88e 	bl	800106c <DelayedInvMosOn>
		}
		ResetInverterNight();
 8002f50:	f7fe f9e6 	bl	8001320 <ResetInverterNight>
		VoltHysteresisDsChg = BATT_VOLTAGE_MINHYSTERESIS;	//hysteresis for discharge
 8002f54:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <DischargeProcedure+0x1a8>)
 8002f56:	2216      	movs	r2, #22
 8002f58:	601a      	str	r2, [r3, #0]
		if (FlagInverterMOS)
 8002f5a:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <DischargeProcedure+0x1b0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <DischargeProcedure+0xc6>
		{
			StatCountFlagsWs.Ws_BattOut=1;	//enable to count energy taken from battery in 1Sectimer
 8002f62:	4b37      	ldr	r3, [pc, #220]	; (8003040 <DischargeProcedure+0x198>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	60da      	str	r2, [r3, #12]
			StatCountFlagsWs.DschgAs=1;		//enable counting ampere-seconds
 8002f68:	4b35      	ldr	r3, [pc, #212]	; (8003040 <DischargeProcedure+0x198>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	651a      	str	r2, [r3, #80]	; 0x50
		}
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN)
 8002f6e:	4b37      	ldr	r3, [pc, #220]	; (800304c <DischargeProcedure+0x1a4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2bfa      	cmp	r3, #250	; 0xfa
 8002f74:	d961      	bls.n	800303a <DischargeProcedure+0x192>
			if (StatCountFlagsWs.Chg_cycle_count)
 8002f76:	4b32      	ldr	r3, [pc, #200]	; (8003040 <DischargeProcedure+0x198>)
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d05d      	beq.n	800303a <DischargeProcedure+0x192>
			{	//if battery was fully charged before night, increment counter of charge cycles as night starts
				StatCountFlagsWs.Chg_cycle_count=0;
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <DischargeProcedure+0x198>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
				StatCountFlagsWs.Chg_cycle_c2=0;
 8002f84:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <DischargeProcedure+0x198>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
				StatCurrentWh.Chg_cycle_count++;
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <DischargeProcedure+0x1a0>)
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <DischargeProcedure+0x1a0>)
 8002f92:	6293      	str	r3, [r2, #40]	; 0x28
			InverterMOS_ON();		//can be left on, just in any case
			BatteryMOS_OFF();		//shut off controller completely
			}
		}
	}
}
 8002f94:	e051      	b.n	800303a <DischargeProcedure+0x192>
		InverterMOS_OFF();		//disconnect load (HW 01)and..
 8002f96:	f7ff f8bf 	bl	8002118 <InverterMOS_OFF>
		VoltHysteresisDsChg = 0;
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <DischargeProcedure+0x1a8>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
		VoltHysteresisChg = 0;		//most likely will be cleared by uP reset anyway
 8002fa0:	4b2e      	ldr	r3, [pc, #184]	; (800305c <DischargeProcedure+0x1b4>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
		StatCurrentWh.Dschg_Ah_lastFull_3 = StatCurrentWh.Dschg_Ah_lastFull_2;
 8002fa6:	4b28      	ldr	r3, [pc, #160]	; (8003048 <DischargeProcedure+0x1a0>)
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002faa:	4a27      	ldr	r2, [pc, #156]	; (8003048 <DischargeProcedure+0x1a0>)
 8002fac:	6793      	str	r3, [r2, #120]	; 0x78
		StatCurrentWh.Dschg_Ah_lastFull_2 = StatCurrentWh.Dschg_Ah_lastFull_1;
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <DischargeProcedure+0x1a0>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a25      	ldr	r2, [pc, #148]	; (8003048 <DischargeProcedure+0x1a0>)
 8002fb4:	6753      	str	r3, [r2, #116]	; 0x74
		StatCurrentWh.Dschg_Ah_lastFull_1 = StatCurrentWh.Dschg_Ah_lastFull;
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <DischargeProcedure+0x1a0>)
 8002fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fba:	4a23      	ldr	r2, [pc, #140]	; (8003048 <DischargeProcedure+0x1a0>)
 8002fbc:	6713      	str	r3, [r2, #112]	; 0x70
		StatCurrentWh.Dschg_Ah_lastFull = StatCurrentWh.Dschg_Ah_current;	//store fully dschg Ah
 8002fbe:	4b22      	ldr	r3, [pc, #136]	; (8003048 <DischargeProcedure+0x1a0>)
 8002fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fc2:	4a21      	ldr	r2, [pc, #132]	; (8003048 <DischargeProcedure+0x1a0>)
 8002fc4:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (!StatCountFlagsWs.Dschg_cycle_c2 && StatCountFlagsWs.Dschg_cycle_count)
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <DischargeProcedure+0x198>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10e      	bne.n	8002fec <DischargeProcedure+0x144>
 8002fce:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <DischargeProcedure+0x198>)
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <DischargeProcedure+0x144>
			StatCurrentWh.Dschg_Volt_lastFull = Adc1Measurements.Batt_voltage;
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <DischargeProcedure+0x1a4>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <DischargeProcedure+0x1a0>)
 8002fdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			StatCountFlagsWs.Dschg_cycle_c2 = 1;
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <DischargeProcedure+0x198>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	62da      	str	r2, [r3, #44]	; 0x2c
			StatCountFlagsWs.Chg_cycle_c2 = 0;
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <DischargeProcedure+0x198>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
		if (!StatCountFlagsWs.Dschg_cycle_count)	//if battery wasn't fully discharged before, but now it is
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <DischargeProcedure+0x198>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10e      	bne.n	8003012 <DischargeProcedure+0x16a>
			StatCountFlagsWs.Dschg_cycle_count = 1;	//to count only once
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <DischargeProcedure+0x198>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
			StatCurrentWh.Dschg_cycle_count++;	//count only once
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <DischargeProcedure+0x1a0>)
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	3301      	adds	r3, #1
 8003000:	4a11      	ldr	r2, [pc, #68]	; (8003048 <DischargeProcedure+0x1a0>)
 8003002:	6253      	str	r3, [r2, #36]	; 0x24
			StatCountFlagsWs.Chg_cycle_count = 0;	//most likely will be cleared by system reset
 8003004:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <DischargeProcedure+0x198>)
 8003006:	2200      	movs	r2, #0
 8003008:	629a      	str	r2, [r3, #40]	; 0x28
			StatCurrentWh.Chg_Ah_current=0;	//clear charge Ah, likely ill be cleared by reset
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <DischargeProcedure+0x1a0>)
 800300c:	2200      	movs	r2, #0
 800300e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (StatCountFlagsWs.Dschg_cycle_count && StatCountFlagsWs.Dschg_cycle_c2)
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <DischargeProcedure+0x198>)
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00f      	beq.n	800303a <DischargeProcedure+0x192>
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <DischargeProcedure+0x198>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <DischargeProcedure+0x192>
			if (Uptime.minutes == 0	//and wait for statistics to be saved and then...
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <DischargeProcedure+0x1b8>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d107      	bne.n	800303a <DischargeProcedure+0x192>
					&& Uptime.seconds == 2)
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <DischargeProcedure+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d103      	bne.n	800303a <DischargeProcedure+0x192>
			InverterMOS_ON();		//can be left on, just in any case
 8003032:	f7ff f859 	bl	80020e8 <InverterMOS_ON>
			BatteryMOS_OFF();		//shut off controller completely
 8003036:	f7ff f827 	bl	8002088 <BatteryMOS_OFF>
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200059bc 	.word	0x200059bc
 8003044:	20005c74 	.word	0x20005c74
 8003048:	20005a20 	.word	0x20005a20
 800304c:	20005998 	.word	0x20005998
 8003050:	20000254 	.word	0x20000254
 8003054:	20006198 	.word	0x20006198
 8003058:	20000244 	.word	0x20000244
 800305c:	20000250 	.word	0x20000250
 8003060:	20005a10 	.word	0x20005a10

08003064 <PrintConfig2TxBuffer>:

void PrintConfig2TxBuffer(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af0e      	add	r7, sp, #56	; 0x38
	sprintf(TxBuffer,  "\r\nBattery controller for On-Grid PV microinverter\r\n"
 800306a:	f244 6350 	movw	r3, #18000	; 0x4650
 800306e:	930c      	str	r3, [sp, #48]	; 0x30
 8003070:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8003074:	930b      	str	r3, [sp, #44]	; 0x2c
 8003076:	2323      	movs	r3, #35	; 0x23
 8003078:	930a      	str	r3, [sp, #40]	; 0x28
 800307a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800307e:	9309      	str	r3, [sp, #36]	; 0x24
 8003080:	2316      	movs	r3, #22
 8003082:	9308      	str	r3, [sp, #32]
 8003084:	2314      	movs	r3, #20
 8003086:	9307      	str	r3, [sp, #28]
 8003088:	f240 1391 	movw	r3, #401	; 0x191
 800308c:	9306      	str	r3, [sp, #24]
 800308e:	23f0      	movs	r3, #240	; 0xf0
 8003090:	9305      	str	r3, [sp, #20]
 8003092:	f240 135d 	movw	r3, #349	; 0x15d
 8003096:	9304      	str	r3, [sp, #16]
 8003098:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800309c:	9303      	str	r3, [sp, #12]
 800309e:	23fa      	movs	r3, #250	; 0xfa
 80030a0:	9302      	str	r3, [sp, #8]
 80030a2:	23fa      	movs	r3, #250	; 0xfa
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	2350      	movs	r3, #80	; 0x50
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2334      	movs	r3, #52	; 0x34
 80030ac:	2201      	movs	r2, #1
 80030ae:	4903      	ldr	r1, [pc, #12]	; (80030bc <PrintConfig2TxBuffer+0x58>)
 80030b0:	4803      	ldr	r0, [pc, #12]	; (80030c0 <PrintConfig2TxBuffer+0x5c>)
 80030b2:	f00b f9a1 	bl	800e3f8 <siprintf>
				"\r\nStart\n\r"
				,HW_VER,NO_FLASH_PAGES,MOSFET_MAX_TEMP,PV_CURRENT_MIN,INV_CURRENT_MIN,PV_OCV_VOLGATE
				,BATT_MIN_VOLTAGE,BATT_CRITICAL_MIN_VOLTAGE,BATT_MAX_VOLTAGE,BATT_VOLTAGE_MAXHYSTERESIS
				,BATT_VOLTAGE_MINHYSTERESIS,TIME2RESET_INV, TIME2OVLD_INV, INV_CURRENT_MAX, INV_CURR_SC
				);
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	08012edc 	.word	0x08012edc
 80030c0:	20005d94 	.word	0x20005d94

080030c4 <PrintFlashStats2TxBuffer>:
void PrintFlashStats2TxBuffer(void)
{
 80030c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c6:	b0b9      	sub	sp, #228	; 0xe4
 80030c8:	af1e      	add	r7, sp, #120	; 0x78
	    	    		"InvOvcCntr %u, InvExtRstCnt %u, "
	    	    		"ChmAhLastF %u, DchmAhLastF %u, "
	    	    		"DschVlastF %u, ChVlastF %u, "
	    	    		"ChgAhlast %u, "
	    	    		"\r\n"
	    	    ,(unsigned int)StatCurrentWh.FlashPageCounter, (unsigned int )StatCurrentWh.Time_NightTime, (unsigned int )StatCurrentWh.Time_NoBattery2Chg, (unsigned int )StatCurrentWh.Time_NoInv
 80030ca:	4b4e      	ldr	r3, [pc, #312]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	667b      	str	r3, [r7, #100]	; 0x64
 80030d0:	4b4c      	ldr	r3, [pc, #304]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 80030d2:	69d9      	ldr	r1, [r3, #28]
 80030d4:	6639      	str	r1, [r7, #96]	; 0x60
 80030d6:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 80030d8:	6a18      	ldr	r0, [r3, #32]
 80030da:	65f8      	str	r0, [r7, #92]	; 0x5c
 80030dc:	4b49      	ldr	r3, [pc, #292]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 80030de:	699c      	ldr	r4, [r3, #24]
 80030e0:	65bc      	str	r4, [r7, #88]	; 0x58
	    		,(unsigned int)StatCurrentWh.Wh_BattIn
 80030e2:	4b48      	ldr	r3, [pc, #288]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 80030e4:	685d      	ldr	r5, [r3, #4]
 80030e6:	657d      	str	r5, [r7, #84]	; 0x54
	    	    ,(unsigned int)StatCurrentWh.Wh_BattNoInv, (unsigned int )StatCurrentWh.Wh_BattOut
 80030e8:	4b46      	ldr	r3, [pc, #280]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 80030ea:	689e      	ldr	r6, [r3, #8]
 80030ec:	653e      	str	r6, [r7, #80]	; 0x50
 80030ee:	4b45      	ldr	r3, [pc, #276]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	64fa      	str	r2, [r7, #76]	; 0x4c
	    		,(unsigned int)StatCurrentWh.Wh_BattRecharge, (unsigned int )StatCurrentWh.Wh_Inverter
 80030f4:	4b43      	ldr	r3, [pc, #268]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 80030f6:	6959      	ldr	r1, [r3, #20]
 80030f8:	64b9      	str	r1, [r7, #72]	; 0x48
 80030fa:	4b42      	ldr	r3, [pc, #264]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	647b      	str	r3, [r7, #68]	; 0x44
	    		,(unsigned int)StatCurrentWh.Dschg_cycle_count, (unsigned int )StatCurrentWh.Chg_cycle_count
 8003100:	4b40      	ldr	r3, [pc, #256]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003102:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003104:	6438      	str	r0, [r7, #64]	; 0x40
 8003106:	4b3f      	ldr	r3, [pc, #252]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003108:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800310a:	63fc      	str	r4, [r7, #60]	; 0x3c
	    		,(unsigned int)StatCurrentWh.InvFaultCntr, (unsigned int)StatCurrentWh.InvResetCntr
 800310c:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 800310e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8003110:	63bd      	str	r5, [r7, #56]	; 0x38
 8003112:	4b3c      	ldr	r3, [pc, #240]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003114:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8003116:	637e      	str	r6, [r7, #52]	; 0x34
	    		,(unsigned int)StatCurrentWh.MaxTempBatMos, (unsigned int)StatCurrentWh.MaxTempInvMos
 8003118:	4b3a      	ldr	r3, [pc, #232]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 800311a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800311c:	633a      	str	r2, [r7, #48]	; 0x30
 800311e:	4b39      	ldr	r3, [pc, #228]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003120:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003122:	62f9      	str	r1, [r7, #44]	; 0x2c
				,(unsigned int)StatCurrentWh.MaxTempInvMosCntr, (unsigned int)StatCurrentWh.MaxTempBatMosCntr
 8003124:	4b37      	ldr	r3, [pc, #220]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
 800312a:	4b36      	ldr	r3, [pc, #216]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 800312c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800312e:	6278      	str	r0, [r7, #36]	; 0x24
	    		,(unsigned int)StatCurrentWh.MaxInvCurrent, (unsigned int)StatCurrentWh.MaxPVCurrent
 8003130:	4b34      	ldr	r3, [pc, #208]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003132:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003134:	623c      	str	r4, [r7, #32]
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003138:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800313a:	61fd      	str	r5, [r7, #28]
				,(unsigned int)StatCurrentWh.MaxInvCurrentCntr, (unsigned int)StatCurrentWh.MaxPVCurrentCntr
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 800313e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8003140:	61be      	str	r6, [r7, #24]
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003146:	617a      	str	r2, [r7, #20]
	    		,(unsigned int)StatCurrentWh.MaxBatVoltage, (unsigned int)StatCurrentWh.MinBatVoltage
 8003148:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 800314a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800314c:	6139      	str	r1, [r7, #16]
 800314e:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	60fb      	str	r3, [r7, #12]
				,(unsigned int)StatCurrentWh.MaxBatVoltageCntr, (unsigned int)StatCurrentWh.MinBatVoltageCntr
 8003154:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003156:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003158:	60b8      	str	r0, [r7, #8]
 800315a:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 800315c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800315e:	607c      	str	r4, [r7, #4]
	    		,(unsigned int)StatCurrentWh.InvOvcCounter, (unsigned int)StatCurrentWh.InvExtResetCnt
 8003160:	4b28      	ldr	r3, [pc, #160]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003162:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003166:	6e9d      	ldr	r5, [r3, #104]	; 0x68
	    		,(unsigned int)StatCurrentWh.Chg_Ah_lastFull, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull
 8003168:	4b26      	ldr	r3, [pc, #152]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 800316a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800316e:	4b25      	ldr	r3, [pc, #148]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003170:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
	    		,(unsigned int)StatCurrentWh.Dschg_Volt_lastFull, (unsigned int)StatCurrentWh.Chg_Volt_lastFull
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003174:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 800317a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	    		,(unsigned int)StatCurrentWh.Chg_Ah_last
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <PrintFlashStats2TxBuffer+0x140>)
 8003180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	sprintf(TxBuffer, "Stat_Flash:FlashPCount %u, TNightTime %u,TNoBat2Chg %u,TNoInv %u, "
 8003184:	931d      	str	r3, [sp, #116]	; 0x74
 8003186:	921c      	str	r2, [sp, #112]	; 0x70
 8003188:	911b      	str	r1, [sp, #108]	; 0x6c
 800318a:	901a      	str	r0, [sp, #104]	; 0x68
 800318c:	9419      	str	r4, [sp, #100]	; 0x64
 800318e:	9518      	str	r5, [sp, #96]	; 0x60
 8003190:	9617      	str	r6, [sp, #92]	; 0x5c
 8003192:	687c      	ldr	r4, [r7, #4]
 8003194:	9416      	str	r4, [sp, #88]	; 0x58
 8003196:	68b8      	ldr	r0, [r7, #8]
 8003198:	9015      	str	r0, [sp, #84]	; 0x54
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	9314      	str	r3, [sp, #80]	; 0x50
 800319e:	6939      	ldr	r1, [r7, #16]
 80031a0:	9113      	str	r1, [sp, #76]	; 0x4c
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	9212      	str	r2, [sp, #72]	; 0x48
 80031a6:	69be      	ldr	r6, [r7, #24]
 80031a8:	9611      	str	r6, [sp, #68]	; 0x44
 80031aa:	69fd      	ldr	r5, [r7, #28]
 80031ac:	9510      	str	r5, [sp, #64]	; 0x40
 80031ae:	6a3c      	ldr	r4, [r7, #32]
 80031b0:	940f      	str	r4, [sp, #60]	; 0x3c
 80031b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031b4:	900e      	str	r0, [sp, #56]	; 0x38
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	930d      	str	r3, [sp, #52]	; 0x34
 80031ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031bc:	910c      	str	r1, [sp, #48]	; 0x30
 80031be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80031c2:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80031c4:	960a      	str	r6, [sp, #40]	; 0x28
 80031c6:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 80031c8:	9509      	str	r5, [sp, #36]	; 0x24
 80031ca:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80031cc:	9408      	str	r4, [sp, #32]
 80031ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80031d0:	9007      	str	r0, [sp, #28]
 80031d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d4:	9306      	str	r3, [sp, #24]
 80031d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80031d8:	9105      	str	r1, [sp, #20]
 80031da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031dc:	9204      	str	r2, [sp, #16]
 80031de:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80031e0:	9603      	str	r6, [sp, #12]
 80031e2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80031e4:	9502      	str	r5, [sp, #8]
 80031e6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80031e8:	9401      	str	r4, [sp, #4]
 80031ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80031ec:	9000      	str	r0, [sp, #0]
 80031ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80031f2:	4905      	ldr	r1, [pc, #20]	; (8003208 <PrintFlashStats2TxBuffer+0x144>)
 80031f4:	4805      	ldr	r0, [pc, #20]	; (800320c <PrintFlashStats2TxBuffer+0x148>)
 80031f6:	f00b f8ff 	bl	800e3f8 <siprintf>
	    	    );
}
 80031fa:	bf00      	nop
 80031fc:	376c      	adds	r7, #108	; 0x6c
 80031fe:	46bd      	mov	sp, r7
 8003200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003202:	bf00      	nop
 8003204:	20005a20 	.word	0x20005a20
 8003208:	080130b4 	.word	0x080130b4
 800320c:	20005d94 	.word	0x20005d94

08003210 <ShowWhStats>:

void ShowWhStats(void)
{
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	b0b1      	sub	sp, #196	; 0xc4
 8003214:	af1a      	add	r7, sp, #104	; 0x68
			"ChmAhLF %u, DchmAhLF %u, "
			"ChgmAhL %u; ChgmAh-1 %u; ChgmAh-2 %u; ChgmAh-3 %u;"
			"DayCurr %u, Day-1 %u, "
			"Day-2 %u, Day-3 %u, "
    		"\r\n"
    ,(unsigned int )StatCurrentWh.FlashPageCounter, (unsigned int )StatCurrentWh.Time_NightTime, (unsigned int )StatCurrentWh.Time_NoBattery2Chg, (unsigned int )StatCurrentWh.Time_NoInv
 8003216:	4b47      	ldr	r3, [pc, #284]	; (8003334 <ShowWhStats+0x124>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	657b      	str	r3, [r7, #84]	; 0x54
 800321c:	4b45      	ldr	r3, [pc, #276]	; (8003334 <ShowWhStats+0x124>)
 800321e:	69d9      	ldr	r1, [r3, #28]
 8003220:	6539      	str	r1, [r7, #80]	; 0x50
 8003222:	4b44      	ldr	r3, [pc, #272]	; (8003334 <ShowWhStats+0x124>)
 8003224:	6a18      	ldr	r0, [r3, #32]
 8003226:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003228:	4b42      	ldr	r3, [pc, #264]	; (8003334 <ShowWhStats+0x124>)
 800322a:	699c      	ldr	r4, [r3, #24]
 800322c:	64bc      	str	r4, [r7, #72]	; 0x48
	,(unsigned int )StatCurrentWh.Wh_BattIn
 800322e:	4b41      	ldr	r3, [pc, #260]	; (8003334 <ShowWhStats+0x124>)
 8003230:	685d      	ldr	r5, [r3, #4]
 8003232:	647d      	str	r5, [r7, #68]	; 0x44
    ,(unsigned int )StatCurrentWh.Wh_BattNoInv, (unsigned int )StatCurrentWh.Wh_BattOut
 8003234:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <ShowWhStats+0x124>)
 8003236:	689e      	ldr	r6, [r3, #8]
 8003238:	643e      	str	r6, [r7, #64]	; 0x40
 800323a:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <ShowWhStats+0x124>)
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	63fa      	str	r2, [r7, #60]	; 0x3c
	,(unsigned int )StatCurrentWh.Wh_BattRecharge, (unsigned int )StatCurrentWh.Wh_Inverter
 8003240:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <ShowWhStats+0x124>)
 8003242:	6959      	ldr	r1, [r3, #20]
 8003244:	63b9      	str	r1, [r7, #56]	; 0x38
 8003246:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <ShowWhStats+0x124>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
	,(unsigned int )StatCurrentWh.Dschg_cycle_count, (unsigned int )StatCurrentWh.Chg_cycle_count
 800324c:	4b39      	ldr	r3, [pc, #228]	; (8003334 <ShowWhStats+0x124>)
 800324e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003250:	6338      	str	r0, [r7, #48]	; 0x30
 8003252:	4b38      	ldr	r3, [pc, #224]	; (8003334 <ShowWhStats+0x124>)
 8003254:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003256:	62fc      	str	r4, [r7, #44]	; 0x2c
	,(unsigned int)StatCurrentWh.InvFaultCntr, (unsigned int)StatCurrentWh.InvResetCntr
 8003258:	4b36      	ldr	r3, [pc, #216]	; (8003334 <ShowWhStats+0x124>)
 800325a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800325c:	62bd      	str	r5, [r7, #40]	; 0x28
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <ShowWhStats+0x124>)
 8003260:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8003262:	627e      	str	r6, [r7, #36]	; 0x24
	,(unsigned int)StatCurrentWh.Chg_Ah_current, (unsigned int)StatCurrentWh.Dschg_Ah_current
 8003264:	4b33      	ldr	r3, [pc, #204]	; (8003334 <ShowWhStats+0x124>)
 8003266:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800326a:	623a      	str	r2, [r7, #32]
 800326c:	4b31      	ldr	r3, [pc, #196]	; (8003334 <ShowWhStats+0x124>)
 800326e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003270:	61f9      	str	r1, [r7, #28]
	,(unsigned int)StatCurrentWh.Chg_Ah_lastFull, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull
 8003272:	4b30      	ldr	r3, [pc, #192]	; (8003334 <ShowWhStats+0x124>)
 8003274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <ShowWhStats+0x124>)
 800327c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800327e:	6178      	str	r0, [r7, #20]
	,(unsigned int)StatCurrentWh.Dschg_Ah_lastFull_1, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull_2, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull_3
 8003280:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <ShowWhStats+0x124>)
 8003282:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8003284:	613c      	str	r4, [r7, #16]
 8003286:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <ShowWhStats+0x124>)
 8003288:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 800328a:	60fd      	str	r5, [r7, #12]
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <ShowWhStats+0x124>)
 800328e:	6f9e      	ldr	r6, [r3, #120]	; 0x78
 8003290:	60be      	str	r6, [r7, #8]
	,(unsigned int)StatCurrentWh.Chg_Ah_last, (unsigned int)StatCurrentWh.Chg_Ah_1, (unsigned int)StatCurrentWh.Chg_Ah_2, (unsigned int)StatCurrentWh.Chg_Ah_3
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <ShowWhStats+0x124>)
 8003294:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <ShowWhStats+0x124>)
 800329c:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <ShowWhStats+0x124>)
 80032a2:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <ShowWhStats+0x124>)
 80032a8:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	,(unsigned int)StatCurrentWh.DayDuration_current, (unsigned int)StatCurrentWh.DayDuration_1
 80032ac:	4b21      	ldr	r3, [pc, #132]	; (8003334 <ShowWhStats+0x124>)
 80032ae:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <ShowWhStats+0x124>)
 80032b4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
	,(unsigned int)StatCurrentWh.DayDuration_2, (unsigned int)StatCurrentWh.DayDuration_3
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <ShowWhStats+0x124>)
 80032ba:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <ShowWhStats+0x124>)
 80032c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
	sprintf(TxBuffer, "Wh.FlashPage: %u, TNightTime %u,TNoBatt2Chg %u,TNoInv %u, "
 80032c4:	9319      	str	r3, [sp, #100]	; 0x64
 80032c6:	9218      	str	r2, [sp, #96]	; 0x60
 80032c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80032ca:	9016      	str	r0, [sp, #88]	; 0x58
 80032cc:	9415      	str	r4, [sp, #84]	; 0x54
 80032ce:	9514      	str	r5, [sp, #80]	; 0x50
 80032d0:	9613      	str	r6, [sp, #76]	; 0x4c
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	9212      	str	r2, [sp, #72]	; 0x48
 80032d6:	68be      	ldr	r6, [r7, #8]
 80032d8:	9611      	str	r6, [sp, #68]	; 0x44
 80032da:	68fd      	ldr	r5, [r7, #12]
 80032dc:	9510      	str	r5, [sp, #64]	; 0x40
 80032de:	693c      	ldr	r4, [r7, #16]
 80032e0:	940f      	str	r4, [sp, #60]	; 0x3c
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	900e      	str	r0, [sp, #56]	; 0x38
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	930d      	str	r3, [sp, #52]	; 0x34
 80032ea:	69f9      	ldr	r1, [r7, #28]
 80032ec:	910c      	str	r1, [sp, #48]	; 0x30
 80032ee:	6a3a      	ldr	r2, [r7, #32]
 80032f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80032f2:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80032f4:	960a      	str	r6, [sp, #40]	; 0x28
 80032f6:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80032f8:	9509      	str	r5, [sp, #36]	; 0x24
 80032fa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80032fc:	9408      	str	r4, [sp, #32]
 80032fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003300:	9007      	str	r0, [sp, #28]
 8003302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003304:	9306      	str	r3, [sp, #24]
 8003306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003308:	9105      	str	r1, [sp, #20]
 800330a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800330c:	9204      	str	r2, [sp, #16]
 800330e:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8003310:	9603      	str	r6, [sp, #12]
 8003312:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8003314:	9502      	str	r5, [sp, #8]
 8003316:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8003318:	9401      	str	r4, [sp, #4]
 800331a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800331c:	9000      	str	r0, [sp, #0]
 800331e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003320:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003322:	4905      	ldr	r1, [pc, #20]	; (8003338 <ShowWhStats+0x128>)
 8003324:	4805      	ldr	r0, [pc, #20]	; (800333c <ShowWhStats+0x12c>)
 8003326:	f00b f867 	bl	800e3f8 <siprintf>
    );
}
 800332a:	bf00      	nop
 800332c:	375c      	adds	r7, #92	; 0x5c
 800332e:	46bd      	mov	sp, r7
 8003330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003332:	bf00      	nop
 8003334:	20005a20 	.word	0x20005a20
 8003338:	080132c8 	.word	0x080132c8
 800333c:	20005d94 	.word	0x20005d94

08003340 <PrintfCalData>:

void PrintfCalData(void)
{
 8003340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003342:	b08b      	sub	sp, #44	; 0x2c
 8003344:	af08      	add	r7, sp, #32
	sprintf(TxBuffer, "Cal Data: Indicator %u:   "
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <PrintfCalData+0x50>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <PrintfCalData+0x50>)
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <PrintfCalData+0x50>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <PrintfCalData+0x50>)
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	490d      	ldr	r1, [pc, #52]	; (8003390 <PrintfCalData+0x50>)
 800335c:	6909      	ldr	r1, [r1, #16]
 800335e:	480c      	ldr	r0, [pc, #48]	; (8003390 <PrintfCalData+0x50>)
 8003360:	6940      	ldr	r0, [r0, #20]
 8003362:	4c0b      	ldr	r4, [pc, #44]	; (8003390 <PrintfCalData+0x50>)
 8003364:	69a4      	ldr	r4, [r4, #24]
 8003366:	4d0a      	ldr	r5, [pc, #40]	; (8003390 <PrintfCalData+0x50>)
 8003368:	69ed      	ldr	r5, [r5, #28]
 800336a:	4e09      	ldr	r6, [pc, #36]	; (8003390 <PrintfCalData+0x50>)
 800336c:	6a36      	ldr	r6, [r6, #32]
 800336e:	9606      	str	r6, [sp, #24]
 8003370:	9505      	str	r5, [sp, #20]
 8003372:	9404      	str	r4, [sp, #16]
 8003374:	9003      	str	r0, [sp, #12]
 8003376:	9102      	str	r1, [sp, #8]
 8003378:	9201      	str	r2, [sp, #4]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4904      	ldr	r1, [pc, #16]	; (8003394 <PrintfCalData+0x54>)
 8003382:	4805      	ldr	r0, [pc, #20]	; (8003398 <PrintfCalData+0x58>)
 8003384:	f00b f838 	bl	800e3f8 <siprintf>
	    	,(int )CalibrationValues.Inv_current_off, (int )CalibrationValues.PV_current_off
	    	,(int )CalibrationValues.PV_voltage, (int )CalibrationValues.Batt_voltage
	    	,(int )CalibrationValues.NTC1_PCB, (int )CalibrationValues.NTC2_Inverter_mos
	    	,(int )CalibrationValues.NTC3_Battery_mos, (int )CalibrationValues.VrefInt
	        );
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003390:	20005c4c 	.word	0x20005c4c
 8003394:	08013438 	.word	0x08013438
 8003398:	20005d94 	.word	0x20005d94

0800339c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800339c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339e:	b09b      	sub	sp, #108	; 0x6c
 80033a0:	af0e      	add	r7, sp, #56	; 0x38
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24
  /* USER CODE BEGIN 5 */
	uint16_t TxSize = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

	InverterMOS_ON();
 80033a8:	f7fe fe9e 	bl	80020e8 <InverterMOS_ON>
	HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 0);		//turn ON power for op amp and other stuff
 80033ac:	2200      	movs	r2, #0
 80033ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b6:	f003 f96b 	bl	8006690 <HAL_GPIO_WritePin>
	RestoreStatisticsFromFLASH();
 80033ba:	f7fe fa37 	bl	800182c <RestoreStatisticsFromFLASH>
	RestoreCalValuesFromFLASH();
 80033be:	f7fe f9a5 	bl	800170c <RestoreCalValuesFromFLASH>
	HAL_UART_MspInit(&huart1);
 80033c2:	489b      	ldr	r0, [pc, #620]	; (8003630 <StartDefaultTask+0x294>)
 80033c4:	f000 fd18 	bl	8003df8 <HAL_UART_MspInit>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80033c8:	4b99      	ldr	r3, [pc, #612]	; (8003630 <StartDefaultTask+0x294>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b98      	ldr	r3, [pc, #608]	; (8003630 <StartDefaultTask+0x294>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0210 	orr.w	r2, r2, #16
 80033d6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, RxBuffer, RX_BFR_SIZE);
 80033d8:	227f      	movs	r2, #127	; 0x7f
 80033da:	4996      	ldr	r1, [pc, #600]	; (8003634 <StartDefaultTask+0x298>)
 80033dc:	4894      	ldr	r0, [pc, #592]	; (8003630 <StartDefaultTask+0x294>)
 80033de:	f005 fd07 	bl	8008df0 <HAL_UART_Receive_DMA>
	  //HAL_UART_MspDeInit();
#if HW_VER > 01
	BackupPowerON();
#endif
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80033e2:	217f      	movs	r1, #127	; 0x7f
 80033e4:	4894      	ldr	r0, [pc, #592]	; (8003638 <StartDefaultTask+0x29c>)
 80033e6:	f002 f979 	bl	80056dc <HAL_ADCEx_Calibration_Start>
	osDelay(50);
 80033ea:	2032      	movs	r0, #50	; 0x32
 80033ec:	f007 f8c7 	bl	800a57e <osDelay>
	if (HAL_ADC_Start_DMA(&hadc1, &Adc1RawReadings.Inv_current , sizeof(Adc1RawReadings)/sizeof(uint32_t)) != HAL_OK) return 0;
 80033f0:	2208      	movs	r2, #8
 80033f2:	4992      	ldr	r1, [pc, #584]	; (800363c <StartDefaultTask+0x2a0>)
 80033f4:	4890      	ldr	r0, [pc, #576]	; (8003638 <StartDefaultTask+0x29c>)
 80033f6:	f001 fb49 	bl	8004a8c <HAL_ADC_Start_DMA>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 828b 	bne.w	8003918 <StartDefaultTask+0x57c>

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8003402:	2201      	movs	r2, #1
 8003404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003408:	488d      	ldr	r0, [pc, #564]	; (8003640 <StartDefaultTask+0x2a4>)
 800340a:	f003 f941 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800340e:	2201      	movs	r2, #1
 8003410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003414:	488a      	ldr	r0, [pc, #552]	; (8003640 <StartDefaultTask+0x2a4>)
 8003416:	f003 f93b 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 800341a:	2201      	movs	r2, #1
 800341c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003420:	4887      	ldr	r0, [pc, #540]	; (8003640 <StartDefaultTask+0x2a4>)
 8003422:	f003 f935 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8003426:	2201      	movs	r2, #1
 8003428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800342c:	4884      	ldr	r0, [pc, #528]	; (8003640 <StartDefaultTask+0x2a4>)
 800342e:	f003 f92f 	bl	8006690 <HAL_GPIO_WritePin>
	PrintConfig2TxBuffer();
 8003432:	f7ff fe17 	bl	8003064 <PrintConfig2TxBuffer>
	TxSize = strlen(TxBuffer);
 8003436:	4883      	ldr	r0, [pc, #524]	; (8003644 <StartDefaultTask+0x2a8>)
 8003438:	f7fc feca 	bl	80001d0 <strlen>
 800343c:	4603      	mov	r3, r0
 800343e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8003440:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003442:	461a      	mov	r2, r3
 8003444:	497f      	ldr	r1, [pc, #508]	; (8003644 <StartDefaultTask+0x2a8>)
 8003446:	487a      	ldr	r0, [pc, #488]	; (8003630 <StartDefaultTask+0x294>)
 8003448:	f005 fc42 	bl	8008cd0 <HAL_UART_Transmit_DMA>
	//BatteryMOS_ON();
	//BatteryMOS_OFF();
	//InverterMOS_OFF();
    //InverterMOS_ON();
	osDelay(5);
 800344c:	2005      	movs	r0, #5
 800344e:	f007 f896 	bl	800a57e <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003458:	4879      	ldr	r0, [pc, #484]	; (8003640 <StartDefaultTask+0x2a4>)
 800345a:	f003 f919 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800345e:	2200      	movs	r2, #0
 8003460:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003464:	4876      	ldr	r0, [pc, #472]	; (8003640 <StartDefaultTask+0x2a4>)
 8003466:	f003 f913 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003470:	4873      	ldr	r0, [pc, #460]	; (8003640 <StartDefaultTask+0x2a4>)
 8003472:	f003 f90d 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8003476:	2200      	movs	r2, #0
 8003478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800347c:	4870      	ldr	r0, [pc, #448]	; (8003640 <StartDefaultTask+0x2a4>)
 800347e:	f003 f907 	bl	8006690 <HAL_GPIO_WritePin>
	ReadConfig();
 8003482:	f7fe fd17 	bl	8001eb4 <ReadConfig>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ConfigReg & 0b00000001);
 8003486:	4b70      	ldr	r3, [pc, #448]	; (8003648 <StartDefaultTask+0x2ac>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003496:	486a      	ldr	r0, [pc, #424]	; (8003640 <StartDefaultTask+0x2a4>)
 8003498:	f003 f8fa 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ConfigReg & 0b00000010);
 800349c:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <StartDefaultTask+0x2ac>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ac:	4864      	ldr	r0, [pc, #400]	; (8003640 <StartDefaultTask+0x2a4>)
 80034ae:	f003 f8ef 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ConfigReg & 0b00000100);
 80034b2:	4b65      	ldr	r3, [pc, #404]	; (8003648 <StartDefaultTask+0x2ac>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034c2:	485f      	ldr	r0, [pc, #380]	; (8003640 <StartDefaultTask+0x2a4>)
 80034c4:	f003 f8e4 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ConfigReg & 0b00001000);
 80034c8:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <StartDefaultTask+0x2ac>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034d8:	4859      	ldr	r0, [pc, #356]	; (8003640 <StartDefaultTask+0x2a4>)
 80034da:	f003 f8d9 	bl	8006690 <HAL_GPIO_WritePin>
	osDelay(50);
 80034de:	2032      	movs	r0, #50	; 0x32
 80034e0:	f007 f84d 	bl	800a57e <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80034e4:	2200      	movs	r2, #0
 80034e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034ea:	4855      	ldr	r0, [pc, #340]	; (8003640 <StartDefaultTask+0x2a4>)
 80034ec:	f003 f8d0 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034f6:	4852      	ldr	r0, [pc, #328]	; (8003640 <StartDefaultTask+0x2a4>)
 80034f8:	f003 f8ca 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003502:	484f      	ldr	r0, [pc, #316]	; (8003640 <StartDefaultTask+0x2a4>)
 8003504:	f003 f8c4 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8003508:	2200      	movs	r2, #0
 800350a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800350e:	484c      	ldr	r0, [pc, #304]	; (8003640 <StartDefaultTask+0x2a4>)
 8003510:	f003 f8be 	bl	8006690 <HAL_GPIO_WritePin>
    PrintFlashStats2TxBuffer();
 8003514:	f7ff fdd6 	bl	80030c4 <PrintFlashStats2TxBuffer>
    TxSize = strlen(TxBuffer);
 8003518:	484a      	ldr	r0, [pc, #296]	; (8003644 <StartDefaultTask+0x2a8>)
 800351a:	f7fc fe59 	bl	80001d0 <strlen>
 800351e:	4603      	mov	r3, r0
 8003520:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8003522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003524:	461a      	mov	r2, r3
 8003526:	4947      	ldr	r1, [pc, #284]	; (8003644 <StartDefaultTask+0x2a8>)
 8003528:	4841      	ldr	r0, [pc, #260]	; (8003630 <StartDefaultTask+0x294>)
 800352a:	f005 fbd1 	bl	8008cd0 <HAL_UART_Transmit_DMA>
	osDelay(20);
 800352e:	2014      	movs	r0, #20
 8003530:	f007 f825 	bl	800a57e <osDelay>
    PrintfCalData();
 8003534:	f7ff ff04 	bl	8003340 <PrintfCalData>
    TxSize = strlen(TxBuffer);
 8003538:	4842      	ldr	r0, [pc, #264]	; (8003644 <StartDefaultTask+0x2a8>)
 800353a:	f7fc fe49 	bl	80001d0 <strlen>
 800353e:	4603      	mov	r3, r0
 8003540:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8003542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003544:	461a      	mov	r2, r3
 8003546:	493f      	ldr	r1, [pc, #252]	; (8003644 <StartDefaultTask+0x2a8>)
 8003548:	4839      	ldr	r0, [pc, #228]	; (8003630 <StartDefaultTask+0x294>)
 800354a:	f005 fbc1 	bl	8008cd0 <HAL_UART_Transmit_DMA>
    osTimerStart(myTimer01Handle, 100);		//start timer
 800354e:	4b3f      	ldr	r3, [pc, #252]	; (800364c <StartDefaultTask+0x2b0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2164      	movs	r1, #100	; 0x64
 8003554:	4618      	mov	r0, r3
 8003556:	f007 f8bf 	bl	800a6d8 <osTimerStart>
    StatCurrentWh.Chg_Ah_current=0;
 800355a:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <StartDefaultTask+0x2b4>)
 800355c:	2200      	movs	r2, #0
 800355e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    StatCurrentWh.Dschg_Ah_current=0;
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <StartDefaultTask+0x2b4>)
 8003564:	2200      	movs	r2, #0
 8003566:	67da      	str	r2, [r3, #124]	; 0x7c
  /* Infinite loop */
  for(;;)
  {

	osDelay(90);		//one second delay
 8003568:	205a      	movs	r0, #90	; 0x5a
 800356a:	f007 f808 	bl	800a57e <osDelay>
    HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 0);		//turn ON power for op amp and other stuff; just before soft timer starts
 800356e:	2200      	movs	r2, #0
 8003570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003578:	f003 f88a 	bl	8006690 <HAL_GPIO_WritePin>
    while (!FlagRunMainLoop) {osDelay(2);};		//synchronizing timer with main loop
 800357c:	e002      	b.n	8003584 <StartDefaultTask+0x1e8>
 800357e:	2002      	movs	r0, #2
 8003580:	f006 fffd 	bl	800a57e <osDelay>
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <StartDefaultTask+0x2b8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f8      	beq.n	800357e <StartDefaultTask+0x1e2>
    //diabling pwr for op amp must be synchronized with ADC. for now permanently ON.
    //HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 1);		//turn OFF power for op amp and other stuff; when procedure is complete
    if (Flag_ShowStats == 3)
 800358c:	4b32      	ldr	r3, [pc, #200]	; (8003658 <StartDefaultTask+0x2bc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d105      	bne.n	80035a0 <StartDefaultTask+0x204>
    {
        Flag_ShowStats = 2;
 8003594:	4b30      	ldr	r3, [pc, #192]	; (8003658 <StartDefaultTask+0x2bc>)
 8003596:	2202      	movs	r2, #2
 8003598:	601a      	str	r2, [r3, #0]
        ShowWhStats();
 800359a:	f7ff fe39 	bl	8003210 <ShowWhStats>
 800359e:	e0d7      	b.n	8003750 <StartDefaultTask+0x3b4>
    }
    else if (Flag_ShowStats == 2)
 80035a0:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <StartDefaultTask+0x2bc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d12e      	bne.n	8003606 <StartDefaultTask+0x26a>
    {
    	Flag_ShowStats = 1;
 80035a8:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <StartDefaultTask+0x2bc>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
        		"WsBattNoInv %u; Ws_BattOut %u, "
        		"WsBattRech %u; Ws_Inv %u, "
    			"DuskTime %u, "
    			"ChgmAs %u, DchgmAs %u, "
        		"\r\n"
        ,(unsigned int )StatCurrentWs.Time_NightTime, (unsigned int )StatCurrentWs.Time_NoBattery2Chg, (unsigned int )StatCurrentWs.Time_NoInv
 80035ae:	4b2b      	ldr	r3, [pc, #172]	; (800365c <StartDefaultTask+0x2c0>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	4b29      	ldr	r3, [pc, #164]	; (800365c <StartDefaultTask+0x2c0>)
 80035b6:	6a19      	ldr	r1, [r3, #32]
 80035b8:	61f9      	str	r1, [r7, #28]
 80035ba:	4b28      	ldr	r3, [pc, #160]	; (800365c <StartDefaultTask+0x2c0>)
 80035bc:	699b      	ldr	r3, [r3, #24]
    	,(unsigned int )StatCurrentWs.Ws_BattIn
 80035be:	4a27      	ldr	r2, [pc, #156]	; (800365c <StartDefaultTask+0x2c0>)
 80035c0:	6812      	ldr	r2, [r2, #0]
        ,(unsigned int )StatCurrentWs.Ws_BattNoInv, (unsigned int )StatCurrentWs.Ws_BattOut
 80035c2:	4926      	ldr	r1, [pc, #152]	; (800365c <StartDefaultTask+0x2c0>)
 80035c4:	6849      	ldr	r1, [r1, #4]
 80035c6:	4825      	ldr	r0, [pc, #148]	; (800365c <StartDefaultTask+0x2c0>)
 80035c8:	68c0      	ldr	r0, [r0, #12]
 80035ca:	61b8      	str	r0, [r7, #24]
    	,(unsigned int )StatCurrentWs.Ws_BattRecharge, (unsigned int )StatCurrentWs.Ws_Inverter
 80035cc:	4c23      	ldr	r4, [pc, #140]	; (800365c <StartDefaultTask+0x2c0>)
 80035ce:	6924      	ldr	r4, [r4, #16]
 80035d0:	4d22      	ldr	r5, [pc, #136]	; (800365c <StartDefaultTask+0x2c0>)
 80035d2:	68ad      	ldr	r5, [r5, #8]
		,(unsigned int)StatCurrentWs.Time_DuskTime
 80035d4:	4e21      	ldr	r6, [pc, #132]	; (800365c <StartDefaultTask+0x2c0>)
 80035d6:	6cb6      	ldr	r6, [r6, #72]	; 0x48
		,(unsigned int)StatCurrentWs.ChgAs, (unsigned int)StatCurrentWs.DschgAs
 80035d8:	4820      	ldr	r0, [pc, #128]	; (800365c <StartDefaultTask+0x2c0>)
 80035da:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80035dc:	6178      	str	r0, [r7, #20]
 80035de:	481f      	ldr	r0, [pc, #124]	; (800365c <StartDefaultTask+0x2c0>)
 80035e0:	6d00      	ldr	r0, [r0, #80]	; 0x50
    	sprintf(TxBuffer, "Ws.TNightTime %u,TNoBat2Chg %u,TNoInv %u, "
 80035e2:	9008      	str	r0, [sp, #32]
 80035e4:	6978      	ldr	r0, [r7, #20]
 80035e6:	9007      	str	r0, [sp, #28]
 80035e8:	9606      	str	r6, [sp, #24]
 80035ea:	9505      	str	r5, [sp, #20]
 80035ec:	9404      	str	r4, [sp, #16]
 80035ee:	69b8      	ldr	r0, [r7, #24]
 80035f0:	9003      	str	r0, [sp, #12]
 80035f2:	9102      	str	r1, [sp, #8]
 80035f4:	9201      	str	r2, [sp, #4]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	6a3a      	ldr	r2, [r7, #32]
 80035fc:	4918      	ldr	r1, [pc, #96]	; (8003660 <StartDefaultTask+0x2c4>)
 80035fe:	4811      	ldr	r0, [pc, #68]	; (8003644 <StartDefaultTask+0x2a8>)
 8003600:	f00a fefa 	bl	800e3f8 <siprintf>
 8003604:	e0a4      	b.n	8003750 <StartDefaultTask+0x3b4>
        );
    }
    else if (Flag_ShowStats == 4)	//show flash stats
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <StartDefaultTask+0x2bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d105      	bne.n	800361a <StartDefaultTask+0x27e>
    {
    	PrintFlashStats2TxBuffer();
 800360e:	f7ff fd59 	bl	80030c4 <PrintFlashStats2TxBuffer>
    	Flag_ShowStats = 0;
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <StartDefaultTask+0x2bc>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e09a      	b.n	8003750 <StartDefaultTask+0x3b4>
    }
    else if (Flag_ShowStats == 5)		//show config
 800361a:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <StartDefaultTask+0x2bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b05      	cmp	r3, #5
 8003620:	d120      	bne.n	8003664 <StartDefaultTask+0x2c8>
    {
    	PrintConfig2TxBuffer();
 8003622:	f7ff fd1f 	bl	8003064 <PrintConfig2TxBuffer>
    	Flag_ShowStats = 0;
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <StartDefaultTask+0x2bc>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e090      	b.n	8003750 <StartDefaultTask+0x3b4>
 800362e:	bf00      	nop
 8003630:	20005bc8 	.word	0x20005bc8
 8003634:	20005d10 	.word	0x20005d10
 8003638:	20005b1c 	.word	0x20005b1c
 800363c:	2000619c 	.word	0x2000619c
 8003640:	48000400 	.word	0x48000400
 8003644:	20005d94 	.word	0x20005d94
 8003648:	20005994 	.word	0x20005994
 800364c:	20005d90 	.word	0x20005d90
 8003650:	20005a20 	.word	0x20005a20
 8003654:	20000260 	.word	0x20000260
 8003658:	2000025c 	.word	0x2000025c
 800365c:	20005c74 	.word	0x20005c74
 8003660:	080134d4 	.word	0x080134d4
    }
    else if (Flag_ShowStats == 1)		//show current Values
 8003664:	4b94      	ldr	r3, [pc, #592]	; (80038b8 <StartDefaultTask+0x51c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d147      	bne.n	80036fc <StartDefaultTask+0x360>
	{
    	Flag_ShowStats = 0;
 800366c:	4b92      	ldr	r3, [pc, #584]	; (80038b8 <StartDefaultTask+0x51c>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
				"temp PCB %u; invMOS %u; batMOS %u, "
				" mAInv %u; mAPV %u; "
				"VPV %u; VBat %u; "
				"Ext_I %u, "
				"\r\n"
		,(unsigned int )Uptime.days, (unsigned int )Uptime.hours, (unsigned int )Uptime.minutes, (unsigned int )Uptime.seconds
 8003672:	4b92      	ldr	r3, [pc, #584]	; (80038bc <StartDefaultTask+0x520>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	623b      	str	r3, [r7, #32]
 8003678:	4b90      	ldr	r3, [pc, #576]	; (80038bc <StartDefaultTask+0x520>)
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	61f9      	str	r1, [r7, #28]
 800367e:	4b8f      	ldr	r3, [pc, #572]	; (80038bc <StartDefaultTask+0x520>)
 8003680:	6858      	ldr	r0, [r3, #4]
 8003682:	4b8e      	ldr	r3, [pc, #568]	; (80038bc <StartDefaultTask+0x520>)
 8003684:	681c      	ldr	r4, [r3, #0]
		sprintf(TxBuffer, "%u d %u h %u m %u s "
 8003686:	4b8e      	ldr	r3, [pc, #568]	; (80038c0 <StartDefaultTask+0x524>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	4b8d      	ldr	r3, [pc, #564]	; (80038c4 <StartDefaultTask+0x528>)
 800368e:	681d      	ldr	r5, [r3, #0]
 8003690:	4b8d      	ldr	r3, [pc, #564]	; (80038c8 <StartDefaultTask+0x52c>)
 8003692:	681e      	ldr	r6, [r3, #0]
 8003694:	4b8d      	ldr	r3, [pc, #564]	; (80038cc <StartDefaultTask+0x530>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	617a      	str	r2, [r7, #20]
		,(unsigned int )ConfigReg
		,(unsigned int )FlagInverterMOS, (unsigned int )FlagBatteryMOS, (unsigned int)FlagBackupMOS
		,(unsigned int )Adc1Measurements.NTC1_PCB, (unsigned int )Adc1Measurements.NTC2_Inverter_mos, (unsigned int )Adc1Measurements.NTC3_Battery_mos
 800369a:	4b8d      	ldr	r3, [pc, #564]	; (80038d0 <StartDefaultTask+0x534>)
 800369c:	6919      	ldr	r1, [r3, #16]
 800369e:	6139      	str	r1, [r7, #16]
 80036a0:	4b8b      	ldr	r3, [pc, #556]	; (80038d0 <StartDefaultTask+0x534>)
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	4b8a      	ldr	r3, [pc, #552]	; (80038d0 <StartDefaultTask+0x534>)
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	60ba      	str	r2, [r7, #8]
		,(unsigned int)Adc1Measurements.Inv_current
 80036ac:	4b88      	ldr	r3, [pc, #544]	; (80038d0 <StartDefaultTask+0x534>)
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	6079      	str	r1, [r7, #4]
		,(unsigned int)Adc1Measurements.PV_current
 80036b2:	4b87      	ldr	r3, [pc, #540]	; (80038d0 <StartDefaultTask+0x534>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	603b      	str	r3, [r7, #0]
		,(unsigned int)Adc1Measurements.PV_voltage
 80036b8:	4b85      	ldr	r3, [pc, #532]	; (80038d0 <StartDefaultTask+0x534>)
 80036ba:	6899      	ldr	r1, [r3, #8]
		,(unsigned int)Adc1Measurements.Batt_voltage	// (unsigned int)Adc1Measurements.Batt_voltage%100
 80036bc:	4b84      	ldr	r3, [pc, #528]	; (80038d0 <StartDefaultTask+0x534>)
 80036be:	68da      	ldr	r2, [r3, #12]
		sprintf(TxBuffer, "%u d %u h %u m %u s "
 80036c0:	4b84      	ldr	r3, [pc, #528]	; (80038d4 <StartDefaultTask+0x538>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	930d      	str	r3, [sp, #52]	; 0x34
 80036c6:	920c      	str	r2, [sp, #48]	; 0x30
 80036c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	930a      	str	r3, [sp, #40]	; 0x28
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	9109      	str	r1, [sp, #36]	; 0x24
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	9208      	str	r2, [sp, #32]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	9307      	str	r3, [sp, #28]
 80036da:	6939      	ldr	r1, [r7, #16]
 80036dc:	9106      	str	r1, [sp, #24]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	9205      	str	r2, [sp, #20]
 80036e2:	9604      	str	r6, [sp, #16]
 80036e4:	9503      	str	r5, [sp, #12]
 80036e6:	69bd      	ldr	r5, [r7, #24]
 80036e8:	9502      	str	r5, [sp, #8]
 80036ea:	9401      	str	r4, [sp, #4]
 80036ec:	9000      	str	r0, [sp, #0]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	6a3a      	ldr	r2, [r7, #32]
 80036f2:	4979      	ldr	r1, [pc, #484]	; (80038d8 <StartDefaultTask+0x53c>)
 80036f4:	4879      	ldr	r0, [pc, #484]	; (80038dc <StartDefaultTask+0x540>)
 80036f6:	f00a fe7f 	bl	800e3f8 <siprintf>
 80036fa:	e029      	b.n	8003750 <StartDefaultTask+0x3b4>
		,(unsigned int)FlagExt_I
		);
	}
    else if (Flag_ShowStats == 62)	//show calibration data
 80036fc:	4b6e      	ldr	r3, [pc, #440]	; (80038b8 <StartDefaultTask+0x51c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b3e      	cmp	r3, #62	; 0x3e
 8003702:	d10b      	bne.n	800371c <StartDefaultTask+0x380>
    {
    	PrintfCalData();
 8003704:	f7ff fe1c 	bl	8003340 <PrintfCalData>
    	if (Flag_ShowStats) Flag_ShowStats--;
 8003708:	4b6b      	ldr	r3, [pc, #428]	; (80038b8 <StartDefaultTask+0x51c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01f      	beq.n	8003750 <StartDefaultTask+0x3b4>
 8003710:	4b69      	ldr	r3, [pc, #420]	; (80038b8 <StartDefaultTask+0x51c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3b01      	subs	r3, #1
 8003716:	4a68      	ldr	r2, [pc, #416]	; (80038b8 <StartDefaultTask+0x51c>)
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e019      	b.n	8003750 <StartDefaultTask+0x3b4>
    }
    else if (Flag_ShowStats == 60)		//show help
 800371c:	4b66      	ldr	r3, [pc, #408]	; (80038b8 <StartDefaultTask+0x51c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b3c      	cmp	r3, #60	; 0x3c
 8003722:	d109      	bne.n	8003738 <StartDefaultTask+0x39c>
    {
    	if (Flag_ShowStats) Flag_ShowStats--;
 8003724:	4b64      	ldr	r3, [pc, #400]	; (80038b8 <StartDefaultTask+0x51c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d011      	beq.n	8003750 <StartDefaultTask+0x3b4>
 800372c:	4b62      	ldr	r3, [pc, #392]	; (80038b8 <StartDefaultTask+0x51c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3b01      	subs	r3, #1
 8003732:	4a61      	ldr	r2, [pc, #388]	; (80038b8 <StartDefaultTask+0x51c>)
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e00b      	b.n	8003750 <StartDefaultTask+0x3b4>
    }
    else
    {
    	if (Flag_ShowStats) Flag_ShowStats--;
 8003738:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <StartDefaultTask+0x51c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <StartDefaultTask+0x3ae>
 8003740:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <StartDefaultTask+0x51c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3b01      	subs	r3, #1
 8003746:	4a5c      	ldr	r2, [pc, #368]	; (80038b8 <StartDefaultTask+0x51c>)
 8003748:	6013      	str	r3, [r2, #0]
    	TxBuffer[0]=0;
 800374a:	4b64      	ldr	r3, [pc, #400]	; (80038dc <StartDefaultTask+0x540>)
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
    }
    TxSize = strlen(TxBuffer);
 8003750:	4862      	ldr	r0, [pc, #392]	; (80038dc <StartDefaultTask+0x540>)
 8003752:	f7fc fd3d 	bl	80001d0 <strlen>
 8003756:	4603      	mov	r3, r0
 8003758:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (TxSize>TX_BFR_SIZE) TxSize=TX_BFR_SIZE;
 800375a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800375c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003760:	d302      	bcc.n	8003768 <StartDefaultTask+0x3cc>
 8003762:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003766:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8003768:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800376a:	461a      	mov	r2, r3
 800376c:	495b      	ldr	r1, [pc, #364]	; (80038dc <StartDefaultTask+0x540>)
 800376e:	485c      	ldr	r0, [pc, #368]	; (80038e0 <StartDefaultTask+0x544>)
 8003770:	f005 faae 	bl	8008cd0 <HAL_UART_Transmit_DMA>

    if (Flag_StoreStatistics)
 8003774:	4b5b      	ldr	r3, [pc, #364]	; (80038e4 <StartDefaultTask+0x548>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <StartDefaultTask+0x3ea>
    	{
    		StoreStatistics2FLASH();
 800377c:	f7fe f8e6 	bl	800194c <StoreStatistics2FLASH>
    		Flag_StoreStatistics=0;
 8003780:	4b58      	ldr	r3, [pc, #352]	; (80038e4 <StartDefaultTask+0x548>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
    	}

    /*main algorithm*/
    //**************************************CONFIG ENERGY TO MAINS************************************
    if (ConfigReg < CONFIG_BATT_0DELAY)
 8003786:	4b4e      	ldr	r3, [pc, #312]	; (80038c0 <StartDefaultTask+0x524>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b06      	cmp	r3, #6
 800378c:	d81b      	bhi.n	80037c6 <StartDefaultTask+0x42a>
    {
    	//is OK to switch on INV mosfet?
    	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 800378e:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <StartDefaultTask+0x534>)
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	2b50      	cmp	r3, #80	; 0x50
 8003794:	d905      	bls.n	80037a2 <StartDefaultTask+0x406>
    	{//no, its too hot
    		ConfigReg = CONFIG_BATT_0DELAY;	//config changed 'energy to battery'
 8003796:	4b4a      	ldr	r3, [pc, #296]	; (80038c0 <StartDefaultTask+0x524>)
 8003798:	2207      	movs	r2, #7
 800379a:	701a      	strb	r2, [r3, #0]
			InverterMOS_OFF();		//OVT for InvMosfet usually happens during battery discharge
 800379c:	f7fe fcbc 	bl	8002118 <InverterMOS_OFF>
 80037a0:	e6e2      	b.n	8003568 <StartDefaultTask+0x1cc>
    	else
    	{//yes, you can switch on INV mosfet
    		//is it day?
    		//caution: too high PV_CURRENT_MIN causes troublesome starting at dawn, controllers disables BATMOSON (batt discharged) but PV current is too weak to keep INVerter operational
    		//too low PV_CURRENT_MIN causes troublesome change operation mode at dusk - inverter causes restarts of controller overloading weak PV current source
			if (Adc1Measurements.PV_current > PV_CURRENT_MIN ||
 80037a2:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <StartDefaultTask+0x534>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2bfa      	cmp	r3, #250	; 0xfa
 80037a8:	d804      	bhi.n	80037b4 <StartDefaultTask+0x418>
					Adc1Measurements.PV_voltage > PV_OCV_VOLGATE)
 80037aa:	4b49      	ldr	r3, [pc, #292]	; (80038d0 <StartDefaultTask+0x534>)
 80037ac:	689b      	ldr	r3, [r3, #8]
			if (Adc1Measurements.PV_current > PV_CURRENT_MIN ||
 80037ae:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80037b2:	d905      	bls.n	80037c0 <StartDefaultTask+0x424>
			{//yes, its day
				InverterOn_batteryAsBackup();
 80037b4:	f7ff fab6 	bl	8002d24 <InverterOn_batteryAsBackup>
				StatCountFlagsWs.Time_Daytime=1;		//enable to count daytime
 80037b8:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <StartDefaultTask+0x54c>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80037be:	e0aa      	b.n	8003916 <StartDefaultTask+0x57a>
			}//end of its day
    		else
    		{//no, its night
    			DischargeProcedure();
 80037c0:	f7ff fb72 	bl	8002ea8 <DischargeProcedure>
 80037c4:	e6d0      	b.n	8003568 <StartDefaultTask+0x1cc>
    		}//closing "its night"
    	}//closing "can switch INV ON"
    }//closing MAINS config
    //************************************CONFIG ENERGY TO BATTERY*********************************
    else if (ConfigReg > CONFIG_MAINS_6DELAY &&
 80037c6:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <StartDefaultTask+0x524>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	f240 8092 	bls.w	80038f4 <StartDefaultTask+0x558>
    		ConfigReg < CONFIG_MAINS_NOBATTDSCHG)
 80037d0:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <StartDefaultTask+0x524>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
    else if (ConfigReg > CONFIG_MAINS_6DELAY &&
 80037d4:	2b0d      	cmp	r3, #13
 80037d6:	f200 808d 	bhi.w	80038f4 <StartDefaultTask+0x558>
    {
		//is OK to switch on battery mosfet?
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 80037da:	4b3d      	ldr	r3, [pc, #244]	; (80038d0 <StartDefaultTask+0x534>)
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b50      	cmp	r3, #80	; 0x50
 80037e0:	d903      	bls.n	80037ea <StartDefaultTask+0x44e>
		{//no, mosfet's too hot
			ConfigReg = CONFIG_MAINS_0DELAY;	//change config energy to mains
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <StartDefaultTask+0x524>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 80037e8:	e095      	b.n	8003916 <StartDefaultTask+0x57a>
		}
		else
		{//yes, you can switch on battery mosfet
			//is it a day?
			if (Adc1Measurements.PV_current > PV_CURRENT_MIN || Adc1Measurements.PV_voltage > PV_OCV_VOLGATE)
 80037ea:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <StartDefaultTask+0x534>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2bfa      	cmp	r3, #250	; 0xfa
 80037f0:	d804      	bhi.n	80037fc <StartDefaultTask+0x460>
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <StartDefaultTask+0x534>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80037fa:	d958      	bls.n	80038ae <StartDefaultTask+0x512>
			{//yes, its day
				StatCountFlagsWs.Time_Daytime=1;		//enable to count daytime
 80037fc:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <StartDefaultTask+0x54c>)
 80037fe:	2201      	movs	r2, #1
 8003800:	63da      	str	r2, [r3, #60]	; 0x3c
				//is batt OK to charge
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 8003802:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <StartDefaultTask+0x534>)
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <StartDefaultTask+0x550>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f203 1391 	addw	r3, r3, #401	; 0x191
 800380e:	429a      	cmp	r2, r3
 8003810:	d214      	bcs.n	800383c <StartDefaultTask+0x4a0>
						Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8003812:	4b2f      	ldr	r3, [pc, #188]	; (80038d0 <StartDefaultTask+0x534>)
 8003814:	68db      	ldr	r3, [r3, #12]
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 8003816:	2bf0      	cmp	r3, #240	; 0xf0
 8003818:	d910      	bls.n	800383c <StartDefaultTask+0x4a0>
				{//yes, ok to charge
					BatteryMOS_ON();
 800381a:	f7fe fbf5 	bl	8002008 <BatteryMOS_ON>
					InverterMOS_OFF();
 800381e:	f7fe fc7b 	bl	8002118 <InverterMOS_OFF>
					VoltHysteresisChg = BATT_VOLTAGE_MAXHYSTERESIS;
 8003822:	4b32      	ldr	r3, [pc, #200]	; (80038ec <StartDefaultTask+0x550>)
 8003824:	2214      	movs	r2, #20
 8003826:	601a      	str	r2, [r3, #0]
					StatCountFlagsWs.Ws_BattIn=1;	//enable to count energy stored in battery, in 1Sectimer
 8003828:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <StartDefaultTask+0x54c>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]
					StatCountFlagsWs.Chg_cycle_count = 0;	//when battery charging unlock flag enabling counting dschg cycles
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <StartDefaultTask+0x54c>)
 8003830:	2200      	movs	r2, #0
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
					StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 8003834:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <StartDefaultTask+0x54c>)
 8003836:	2201      	movs	r2, #1
 8003838:	64da      	str	r2, [r3, #76]	; 0x4c
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 800383a:	e03b      	b.n	80038b4 <StartDefaultTask+0x518>
				}
				else
				{//no, batt not OK to charge
					InverterMOS_ON();
 800383c:	f7fe fc54 	bl	80020e8 <InverterMOS_ON>
					BatteryMOS_OFF();
 8003840:	f7fe fc22 	bl	8002088 <BatteryMOS_OFF>
					StatCountFlagsWs.Time_NoBattery2Chg=1;	//enable to count time without possibility to charge battery, in 1Sectimer
 8003844:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <StartDefaultTask+0x54c>)
 8003846:	2201      	movs	r2, #1
 8003848:	621a      	str	r2, [r3, #32]
					VoltHysteresisChg = 0;
 800384a:	4b28      	ldr	r3, [pc, #160]	; (80038ec <StartDefaultTask+0x550>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
					if ((Adc1Measurements.Batt_voltage) > (BATT_MAX_VOLTAGE+VoltHysteresisChg))
 8003850:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <StartDefaultTask+0x534>)
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <StartDefaultTask+0x550>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f203 1391 	addw	r3, r3, #401	; 0x191
 800385c:	429a      	cmp	r2, r3
 800385e:	d929      	bls.n	80038b4 <StartDefaultTask+0x518>
					{//if battery fully charged, check if it was moment ago.
						StatCurrentWh.Chg_Ah_lastFull=StatCurrentWh.Chg_Ah_current;	//store fully chg Ah
 8003860:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <StartDefaultTask+0x554>)
 8003862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003866:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <StartDefaultTask+0x554>)
 8003868:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
						if (!StatCountFlagsWs.Chg_cycle_c2 && StatCountFlagsWs.Chg_cycle_count)
 800386c:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <StartDefaultTask+0x54c>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10e      	bne.n	8003892 <StartDefaultTask+0x4f6>
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <StartDefaultTask+0x54c>)
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <StartDefaultTask+0x4f6>
						{
							StatCurrentWh.Chg_Volt_lastFull = Adc1Measurements.Batt_voltage;	//store lastvoltage
 800387c:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <StartDefaultTask+0x534>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <StartDefaultTask+0x554>)
 8003882:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
							StatCountFlagsWs.Chg_cycle_c2 = 1;
 8003886:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <StartDefaultTask+0x54c>)
 8003888:	2201      	movs	r2, #1
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
							StatCountFlagsWs.Dschg_cycle_c2 = 0;
 800388c:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <StartDefaultTask+0x54c>)
 800388e:	2200      	movs	r2, #0
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
						}
						if (!StatCountFlagsWs.Chg_cycle_count)
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <StartDefaultTask+0x54c>)
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10c      	bne.n	80038b4 <StartDefaultTask+0x518>
						{
							StatCountFlagsWs.Chg_cycle_count = 1; //if not, set flag 'fully charged' to count/set only once
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <StartDefaultTask+0x54c>)
 800389c:	2201      	movs	r2, #1
 800389e:	629a      	str	r2, [r3, #40]	; 0x28
							StatCountFlagsWs.Dschg_cycle_count = 0;	//clear flag to enable dschg counter when batt empty
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <StartDefaultTask+0x54c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
							StatCurrentWh.Dschg_Ah_current=0;	//clear discharge Ah
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <StartDefaultTask+0x554>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	67da      	str	r2, [r3, #124]	; 0x7c
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 80038ac:	e002      	b.n	80038b4 <StartDefaultTask+0x518>
					}
				}
			}
			else
			{//no, its night
				DischargeProcedure();
 80038ae:	f7ff fafb 	bl	8002ea8 <DischargeProcedure>
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 80038b2:	e030      	b.n	8003916 <StartDefaultTask+0x57a>
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 80038b4:	bf00      	nop
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 80038b6:	e02e      	b.n	8003916 <StartDefaultTask+0x57a>
 80038b8:	2000025c 	.word	0x2000025c
 80038bc:	20005a10 	.word	0x20005a10
 80038c0:	20005994 	.word	0x20005994
 80038c4:	20000244 	.word	0x20000244
 80038c8:	20000240 	.word	0x20000240
 80038cc:	20000248 	.word	0x20000248
 80038d0:	20005998 	.word	0x20005998
 80038d4:	2000024c 	.word	0x2000024c
 80038d8:	0801356c 	.word	0x0801356c
 80038dc:	20005d94 	.word	0x20005d94
 80038e0:	20005bc8 	.word	0x20005bc8
 80038e4:	20000258 	.word	0x20000258
 80038e8:	200059bc 	.word	0x200059bc
 80038ec:	20000250 	.word	0x20000250
 80038f0:	20005a20 	.word	0x20005a20
			}//closing "its night"
		}//closing "you can switch on batt mosfet"
    }//closing "config battery"
    //************************************CONFIG Spare ENERGY TO BATTERY, but no battery discharge*********************************
    else if (ConfigReg == CONFIG_MAINS_NOBATTDSCHG)
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <StartDefaultTask+0x584>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b0e      	cmp	r3, #14
 80038fa:	f47f ae35 	bne.w	8003568 <StartDefaultTask+0x1cc>
    {//is OK to switch on INV mosfet?
    	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <StartDefaultTask+0x588>)
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	2b50      	cmp	r3, #80	; 0x50
 8003904:	d905      	bls.n	8003912 <StartDefaultTask+0x576>
    	{//no, its too hot
    		ConfigReg = CONFIG_BATT_0DELAY;	//config changed 'energy to battery'
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <StartDefaultTask+0x584>)
 8003908:	2207      	movs	r2, #7
 800390a:	701a      	strb	r2, [r3, #0]
			InverterMOS_OFF();		//OVT for InvMosfet usually happens during battery discharge
 800390c:	f7fe fc04 	bl	8002118 <InverterMOS_OFF>
 8003910:	e62a      	b.n	8003568 <StartDefaultTask+0x1cc>
    	}
    	else
    	{//yes, you can switch on INV mosfet
    		InverterOn_batteryAsBackup();
 8003912:	f7ff fa07 	bl	8002d24 <InverterOn_batteryAsBackup>
	osDelay(90);		//one second delay
 8003916:	e627      	b.n	8003568 <StartDefaultTask+0x1cc>
	if (HAL_ADC_Start_DMA(&hadc1, &Adc1RawReadings.Inv_current , sizeof(Adc1RawReadings)/sizeof(uint32_t)) != HAL_OK) return 0;
 8003918:	bf00      	nop
    	}//closing "ok to switch ON INV mosfet"
    }//closing config "spare energy to battery"
  }//closing main loop
  /* USER CODE END 5 */
}
 800391a:	3734      	adds	r7, #52	; 0x34
 800391c:	46bd      	mov	sp, r7
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003920:	20005994 	.word	0x20005994
 8003924:	20005998 	.word	0x20005998

08003928 <Callback01>:

/* Callback01 function */
void Callback01(void *argument)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	if (count_second) count_second--;
 8003930:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <Callback01+0x1a8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <Callback01+0x1c>
 8003938:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <Callback01+0x1a8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3b01      	subs	r3, #1
 800393e:	4a64      	ldr	r2, [pc, #400]	; (8003ad0 <Callback01+0x1a8>)
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e059      	b.n	80039f8 <Callback01+0xd0>
					else
					{
						count_second = TICKS_ONESECOND;	//1 for 1sec
 8003944:	4b62      	ldr	r3, [pc, #392]	; (8003ad0 <Callback01+0x1a8>)
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
						Uptime.seconds++;
 800394a:	4b62      	ldr	r3, [pc, #392]	; (8003ad4 <Callback01+0x1ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	4a60      	ldr	r2, [pc, #384]	; (8003ad4 <Callback01+0x1ac>)
 8003952:	6013      	str	r3, [r2, #0]
						LedStatusShow();
 8003954:	f7fd fe08 	bl	8001568 <LedStatusShow>
						if (!Flag_ShowStats) Flag_ShowStats=2;				//once a second show secondy stat alternatively with measurements
 8003958:	4b5f      	ldr	r3, [pc, #380]	; (8003ad8 <Callback01+0x1b0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d102      	bne.n	8003966 <Callback01+0x3e>
 8003960:	4b5d      	ldr	r3, [pc, #372]	; (8003ad8 <Callback01+0x1b0>)
 8003962:	2202      	movs	r2, #2
 8003964:	601a      	str	r2, [r3, #0]
						if (count_minutes) count_minutes--;
 8003966:	4b5d      	ldr	r3, [pc, #372]	; (8003adc <Callback01+0x1b4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <Callback01+0x52>
 800396e:	4b5b      	ldr	r3, [pc, #364]	; (8003adc <Callback01+0x1b4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3b01      	subs	r3, #1
 8003974:	4a59      	ldr	r2, [pc, #356]	; (8003adc <Callback01+0x1b4>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e03e      	b.n	80039f8 <Callback01+0xd0>
						else
						{
							count_minutes = TICKS_ONEMINUTE;	//59 for 1 minute
 800397a:	4b58      	ldr	r3, [pc, #352]	; (8003adc <Callback01+0x1b4>)
 800397c:	223b      	movs	r2, #59	; 0x3b
 800397e:	601a      	str	r2, [r3, #0]
							Uptime.minutes++;
 8003980:	4b54      	ldr	r3, [pc, #336]	; (8003ad4 <Callback01+0x1ac>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	3301      	adds	r3, #1
 8003986:	4a53      	ldr	r2, [pc, #332]	; (8003ad4 <Callback01+0x1ac>)
 8003988:	6053      	str	r3, [r2, #4]
							Uptime.seconds=0;
 800398a:	4b52      	ldr	r3, [pc, #328]	; (8003ad4 <Callback01+0x1ac>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
							ReadConfig();
 8003990:	f7fe fa90 	bl	8001eb4 <ReadConfig>
							Flag_ShowStats=3;				//once a minute show hourly stat
 8003994:	4b50      	ldr	r3, [pc, #320]	; (8003ad8 <Callback01+0x1b0>)
 8003996:	2203      	movs	r2, #3
 8003998:	601a      	str	r2, [r3, #0]
							if (count_hours) count_hours--;	//60 minutes for one hour
 800399a:	4b51      	ldr	r3, [pc, #324]	; (8003ae0 <Callback01+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <Callback01+0x86>
 80039a2:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <Callback01+0x1b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	4a4d      	ldr	r2, [pc, #308]	; (8003ae0 <Callback01+0x1b8>)
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e024      	b.n	80039f8 <Callback01+0xd0>
							else
							{
								Calculate_WattHours();
 80039ae:	f7fe f9f5 	bl	8001d9c <Calculate_WattHours>
								count_hours = TICKS_ONEHOUR;
 80039b2:	4b4b      	ldr	r3, [pc, #300]	; (8003ae0 <Callback01+0x1b8>)
 80039b4:	223b      	movs	r2, #59	; 0x3b
 80039b6:	601a      	str	r2, [r3, #0]
								Uptime.hours++;
 80039b8:	4b46      	ldr	r3, [pc, #280]	; (8003ad4 <Callback01+0x1ac>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	3301      	adds	r3, #1
 80039be:	4a45      	ldr	r2, [pc, #276]	; (8003ad4 <Callback01+0x1ac>)
 80039c0:	6093      	str	r3, [r2, #8]
								Uptime.minutes=0;
 80039c2:	4b44      	ldr	r3, [pc, #272]	; (8003ad4 <Callback01+0x1ac>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]
#if FLASHSTATSAVE_PERIOD == 0	//FLASHSTATSAVE_PERIOD 0-every hour,
								Flag_StoreStatistics = 1;
 80039c8:	4b46      	ldr	r3, [pc, #280]	; (8003ae4 <Callback01+0x1bc>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
#endif
								if (count_days) count_days--;
 80039ce:	4b46      	ldr	r3, [pc, #280]	; (8003ae8 <Callback01+0x1c0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <Callback01+0xba>
 80039d6:	4b44      	ldr	r3, [pc, #272]	; (8003ae8 <Callback01+0x1c0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3b01      	subs	r3, #1
 80039dc:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <Callback01+0x1c0>)
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e00a      	b.n	80039f8 <Callback01+0xd0>
								else
								{
									count_days = TICKS_ONEDAY;
 80039e2:	4b41      	ldr	r3, [pc, #260]	; (8003ae8 <Callback01+0x1c0>)
 80039e4:	2217      	movs	r2, #23
 80039e6:	601a      	str	r2, [r3, #0]
									Uptime.days++;
 80039e8:	4b3a      	ldr	r3, [pc, #232]	; (8003ad4 <Callback01+0x1ac>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	3301      	adds	r3, #1
 80039ee:	4a39      	ldr	r2, [pc, #228]	; (8003ad4 <Callback01+0x1ac>)
 80039f0:	60d3      	str	r3, [r2, #12]
									Uptime.hours=0;
 80039f2:	4b38      	ldr	r3, [pc, #224]	; (8003ad4 <Callback01+0x1ac>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
								}
							}
						}
					}
		Calculate_WattSeconds();
 80039f8:	f7fe f886 	bl	8001b08 <Calculate_WattSeconds>
		HAL_ADC_Start(&hadc1);
 80039fc:	483b      	ldr	r0, [pc, #236]	; (8003aec <Callback01+0x1c4>)
 80039fe:	f000 ffe1 	bl	80049c4 <HAL_ADC_Start>
#ifdef DEBUG_EN
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
#endif
		uint32_t temp;
		//Adc1Measurements.Inv_current = ConvertIValue(Adc1RawReadings.Inv_current);
		temp = 	ConvertIValue(Adc1RawReadings.Inv_current);
 8003a02:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <Callback01+0x1c8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fc6a 	bl	80022e0 <ConvertIValue>
 8003a0c:	60f8      	str	r0, [r7, #12]
		if ( temp > CalibrationValues.Inv_current_off) Adc1Measurements.Inv_current = temp-CalibrationValues.Inv_current_off;
 8003a0e:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <Callback01+0x1cc>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d907      	bls.n	8003a2a <Callback01+0x102>
 8003a1a:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <Callback01+0x1cc>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	4a34      	ldr	r2, [pc, #208]	; (8003af8 <Callback01+0x1d0>)
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	e002      	b.n	8003a30 <Callback01+0x108>
		else Adc1Measurements.Inv_current = 0;
 8003a2a:	4b33      	ldr	r3, [pc, #204]	; (8003af8 <Callback01+0x1d0>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
		//Adc1Measurements.PV_current = ConvertIValue(Adc1RawReadings.PV_current) ;
		temp = 	ConvertIValue(Adc1RawReadings.PV_current);
 8003a30:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <Callback01+0x1c8>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe fc53 	bl	80022e0 <ConvertIValue>
 8003a3a:	60f8      	str	r0, [r7, #12]
		if (temp > CalibrationValues.PV_current_off) Adc1Measurements.PV_current = temp-CalibrationValues.PV_current_off;
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <Callback01+0x1cc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	461a      	mov	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d907      	bls.n	8003a58 <Callback01+0x130>
 8003a48:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <Callback01+0x1cc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	4a29      	ldr	r2, [pc, #164]	; (8003af8 <Callback01+0x1d0>)
 8003a54:	6053      	str	r3, [r2, #4]
 8003a56:	e002      	b.n	8003a5e <Callback01+0x136>
		else Adc1Measurements.PV_current = 0;
 8003a58:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <Callback01+0x1d0>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	605a      	str	r2, [r3, #4]
			Adc1Measurements.PV_voltage = ConvertVValue(Adc1RawReadings.PV_voltage) ;
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <Callback01+0x1c8>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fbdc 	bl	8002220 <ConvertVValue>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a23      	ldr	r2, [pc, #140]	; (8003af8 <Callback01+0x1d0>)
 8003a6c:	6093      	str	r3, [r2, #8]
			Adc1Measurements.Batt_voltage = ConvertVValue(Adc1RawReadings.Batt_voltage) ;
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <Callback01+0x1c8>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fbd4 	bl	8002220 <ConvertVValue>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <Callback01+0x1d0>)
 8003a7c:	60d3      	str	r3, [r2, #12]
			Adc1Measurements.NTC1_PCB = ConvertNTCvalue(Adc1RawReadings.NTC1_PCB) ;
 8003a7e:	4b1c      	ldr	r3, [pc, #112]	; (8003af0 <Callback01+0x1c8>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fb58 	bl	8002138 <ConvertNTCvalue>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <Callback01+0x1d0>)
 8003a8c:	6113      	str	r3, [r2, #16]
			Adc1Measurements.NTC2_Inverter_mos = ConvertNTCvalue(Adc1RawReadings.NTC2_Inverter_mos) ;
 8003a8e:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <Callback01+0x1c8>)
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fb50 	bl	8002138 <ConvertNTCvalue>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <Callback01+0x1d0>)
 8003a9c:	6153      	str	r3, [r2, #20]
			Adc1Measurements.NTC3_Battery_mos = ConvertNTCvalue(Adc1RawReadings.NTC3_Battery_mos) ;
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <Callback01+0x1c8>)
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fb48 	bl	8002138 <ConvertNTCvalue>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <Callback01+0x1d0>)
 8003aac:	6193      	str	r3, [r2, #24]
			FlagExt_I = HAL_GPIO_ReadPin(EXT_I_GPIO_Port, EXT_I_Pin);
 8003aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ab2:	4812      	ldr	r0, [pc, #72]	; (8003afc <Callback01+0x1d4>)
 8003ab4:	f002 fdd4 	bl	8006660 <HAL_GPIO_ReadPin>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <Callback01+0x1d8>)
 8003abe:	601a      	str	r2, [r3, #0]
		FlagRunMainLoop = 1;
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <Callback01+0x1dc>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
  /* USER CODE END Callback01 */
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000023c 	.word	0x2000023c
 8003ad4:	20005a10 	.word	0x20005a10
 8003ad8:	2000025c 	.word	0x2000025c
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	20000004 	.word	0x20000004
 8003ae4:	20000258 	.word	0x20000258
 8003ae8:	20000008 	.word	0x20000008
 8003aec:	20005b1c 	.word	0x20005b1c
 8003af0:	2000619c 	.word	0x2000619c
 8003af4:	20005c4c 	.word	0x20005c4c
 8003af8:	20005998 	.word	0x20005998
 8003afc:	48000400 	.word	0x48000400
 8003b00:	2000024c 	.word	0x2000024c
 8003b04:	20000260 	.word	0x20000260

08003b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b1a:	f000 fbfd 	bl	8004318 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40001000 	.word	0x40001000

08003b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b30:	b672      	cpsid	i
}
 8003b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b34:	e7fe      	b.n	8003b34 <Error_Handler+0x8>
	...

08003b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <HAL_MspInit+0x4c>)
 8003b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b42:	4a10      	ldr	r2, [pc, #64]	; (8003b84 <HAL_MspInit+0x4c>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6613      	str	r3, [r2, #96]	; 0x60
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <HAL_MspInit+0x4c>)
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_MspInit+0x4c>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <HAL_MspInit+0x4c>)
 8003b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6593      	str	r3, [r2, #88]	; 0x58
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <HAL_MspInit+0x4c>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	210f      	movs	r1, #15
 8003b72:	f06f 0001 	mvn.w	r0, #1
 8003b76:	f001 fec9 	bl	800590c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000

08003b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b0a2      	sub	sp, #136	; 0x88
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ba0:	f107 0318 	add.w	r3, r7, #24
 8003ba4:	225c      	movs	r2, #92	; 0x5c
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f009 fcc8 	bl	800d53e <memset>
  if(hadc->Instance==ADC1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a3f      	ldr	r2, [pc, #252]	; (8003cb0 <HAL_ADC_MspInit+0x128>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d177      	bne.n	8003ca8 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003bbe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003bc2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bc4:	f107 0318 	add.w	r3, r7, #24
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f003 fc5f 	bl	800748c <HAL_RCCEx_PeriphCLKConfig>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003bd4:	f7ff ffaa 	bl	8003b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003bd8:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <HAL_ADC_MspInit+0x12c>)
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	4a35      	ldr	r2, [pc, #212]	; (8003cb4 <HAL_ADC_MspInit+0x12c>)
 8003bde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be4:	4b33      	ldr	r3, [pc, #204]	; (8003cb4 <HAL_ADC_MspInit+0x12c>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf0:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <HAL_ADC_MspInit+0x12c>)
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <HAL_ADC_MspInit+0x12c>)
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <HAL_ADC_MspInit+0x12c>)
 8003bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c08:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <HAL_ADC_MspInit+0x12c>)
 8003c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0c:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <HAL_ADC_MspInit+0x12c>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c14:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <HAL_ADC_MspInit+0x12c>)
 8003c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003c20:	230f      	movs	r3, #15
 8003c22:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003c24:	230b      	movs	r3, #11
 8003c26:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c30:	4619      	mov	r1, r3
 8003c32:	4821      	ldr	r0, [pc, #132]	; (8003cb8 <HAL_ADC_MspInit+0x130>)
 8003c34:	f002 fb9a 	bl	800636c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003c38:	2307      	movs	r3, #7
 8003c3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003c3c:	230b      	movs	r3, #11
 8003c3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c4e:	f002 fb8d 	bl	800636c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003c52:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003c54:	4a1a      	ldr	r2, [pc, #104]	; (8003cc0 <HAL_ADC_MspInit+0x138>)
 8003c56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003c58:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c5e:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c64:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c7e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c80:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003c82:	2220      	movs	r2, #32
 8003c84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c86:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c8c:	480b      	ldr	r0, [pc, #44]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003c8e:	f001 fe67 	bl	8005960 <HAL_DMA_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8003c98:	f7ff ff48 	bl	8003b2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003ca0:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ca2:	4a06      	ldr	r2, [pc, #24]	; (8003cbc <HAL_ADC_MspInit+0x134>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ca8:	bf00      	nop
 8003caa:	3788      	adds	r7, #136	; 0x88
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	50040000 	.word	0x50040000
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	48000800 	.word	0x48000800
 8003cbc:	20005cc8 	.word	0x20005cc8
 8003cc0:	40020008 	.word	0x40020008

08003cc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d10b      	bne.n	8003cee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_TIM_PWM_MspInit+0x38>)
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	4a08      	ldr	r2, [pc, #32]	; (8003cfc <HAL_TIM_PWM_MspInit+0x38>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_TIM_PWM_MspInit+0x38>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000

08003d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <HAL_TIM_Base_MspInit+0x38>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d10b      	bne.n	8003d2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <HAL_TIM_Base_MspInit+0x3c>)
 8003d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d16:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <HAL_TIM_Base_MspInit+0x3c>)
 8003d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_TIM_Base_MspInit+0x3c>)
 8003d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40014400 	.word	0x40014400
 8003d3c:	40021000 	.word	0x40021000

08003d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	; 0x28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d48:	f107 0314 	add.w	r3, r7, #20
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d11d      	bne.n	8003d9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <HAL_TIM_MspPostInit+0xac>)
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	4a21      	ldr	r2, [pc, #132]	; (8003dec <HAL_TIM_MspPostInit+0xac>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <HAL_TIM_MspPostInit+0xac>)
 8003d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BAT_SWITCH_PWM_Pin;
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d86:	2300      	movs	r3, #0
 8003d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SWITCH_PWM_GPIO_Port, &GPIO_InitStruct);
 8003d8e:	f107 0314 	add.w	r3, r7, #20
 8003d92:	4619      	mov	r1, r3
 8003d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d98:	f002 fae8 	bl	800636c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003d9c:	e021      	b.n	8003de2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM16)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <HAL_TIM_MspPostInit+0xb0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d11c      	bne.n	8003de2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da8:	4b10      	ldr	r3, [pc, #64]	; (8003dec <HAL_TIM_MspPostInit+0xac>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dac:	4a0f      	ldr	r2, [pc, #60]	; (8003dec <HAL_TIM_MspPostInit+0xac>)
 8003dae:	f043 0302 	orr.w	r3, r3, #2
 8003db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <HAL_TIM_MspPostInit+0xac>)
 8003db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXT_O_Pin;
 8003dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003dd2:	230e      	movs	r3, #14
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_O_GPIO_Port, &GPIO_InitStruct);
 8003dd6:	f107 0314 	add.w	r3, r7, #20
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4805      	ldr	r0, [pc, #20]	; (8003df4 <HAL_TIM_MspPostInit+0xb4>)
 8003dde:	f002 fac5 	bl	800636c <HAL_GPIO_Init>
}
 8003de2:	bf00      	nop
 8003de4:	3728      	adds	r7, #40	; 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	48000400 	.word	0x48000400

08003df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b0a0      	sub	sp, #128	; 0x80
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e10:	f107 0310 	add.w	r3, r7, #16
 8003e14:	225c      	movs	r2, #92	; 0x5c
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f009 fb90 	bl	800d53e <memset>
  if(huart->Instance==USART1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a56      	ldr	r2, [pc, #344]	; (8003f7c <HAL_UART_MspInit+0x184>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	f040 80a4 	bne.w	8003f72 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e32:	f107 0310 	add.w	r3, r7, #16
 8003e36:	4618      	mov	r0, r3
 8003e38:	f003 fb28 	bl	800748c <HAL_RCCEx_PeriphCLKConfig>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e42:	f7ff fe73 	bl	8003b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e46:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <HAL_UART_MspInit+0x188>)
 8003e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4a:	4a4d      	ldr	r2, [pc, #308]	; (8003f80 <HAL_UART_MspInit+0x188>)
 8003e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e50:	6613      	str	r3, [r2, #96]	; 0x60
 8003e52:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <HAL_UART_MspInit+0x188>)
 8003e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5e:	4b48      	ldr	r3, [pc, #288]	; (8003f80 <HAL_UART_MspInit+0x188>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	4a47      	ldr	r2, [pc, #284]	; (8003f80 <HAL_UART_MspInit+0x188>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e6a:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <HAL_UART_MspInit+0x188>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e84:	2302      	movs	r3, #2
 8003e86:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e88:	2307      	movs	r3, #7
 8003e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e90:	4619      	mov	r1, r3
 8003e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e96:	f002 fa69 	bl	800636c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eac:	2307      	movs	r3, #7
 8003eae:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eba:	f002 fa57 	bl	800636c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8003ebe:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003ec0:	4a31      	ldr	r2, [pc, #196]	; (8003f88 <HAL_UART_MspInit+0x190>)
 8003ec2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8003ec4:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eca:	4b2e      	ldr	r3, [pc, #184]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ed0:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ed6:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003ed8:	2280      	movs	r2, #128	; 0x80
 8003eda:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003edc:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ee2:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003ee8:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003eea:	2220      	movs	r2, #32
 8003eec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003eee:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ef4:	4823      	ldr	r0, [pc, #140]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003ef6:	f001 fd33 	bl	8005960 <HAL_DMA_Init>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003f00:	f7ff fe14 	bl	8003b2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003f08:	671a      	str	r2, [r3, #112]	; 0x70
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	; (8003f84 <HAL_UART_MspInit+0x18c>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8003f10:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f12:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <HAL_UART_MspInit+0x198>)
 8003f14:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8003f16:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f18:	2202      	movs	r2, #2
 8003f1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f1e:	2210      	movs	r2, #16
 8003f20:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f28:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f2a:	2280      	movs	r2, #128	; 0x80
 8003f2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f2e:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f34:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f3a:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f46:	4811      	ldr	r0, [pc, #68]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f48:	f001 fd0a 	bl	8005960 <HAL_DMA_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8003f52:	f7ff fdeb 	bl	8003b2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a0c      	ldr	r2, [pc, #48]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f5c:	4a0b      	ldr	r2, [pc, #44]	; (8003f8c <HAL_UART_MspInit+0x194>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003f62:	2200      	movs	r2, #0
 8003f64:	2105      	movs	r1, #5
 8003f66:	2025      	movs	r0, #37	; 0x25
 8003f68:	f001 fcd0 	bl	800590c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f6c:	2025      	movs	r0, #37	; 0x25
 8003f6e:	f001 fce9 	bl	8005944 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003f72:	bf00      	nop
 8003f74:	3780      	adds	r7, #128	; 0x80
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40021000 	.word	0x40021000
 8003f84:	20005b80 	.word	0x20005b80
 8003f88:	40020480 	.word	0x40020480
 8003f8c:	20005ad0 	.word	0x20005ad0
 8003f90:	4002046c 	.word	0x4002046c

08003f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	; 0x30
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	2036      	movs	r0, #54	; 0x36
 8003faa:	f001 fcaf 	bl	800590c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003fae:	2036      	movs	r0, #54	; 0x36
 8003fb0:	f001 fcc8 	bl	8005944 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003fb4:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_InitTick+0x9c>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	4a1d      	ldr	r2, [pc, #116]	; (8004030 <HAL_InitTick+0x9c>)
 8003fba:	f043 0310 	orr.w	r3, r3, #16
 8003fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_InitTick+0x9c>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fcc:	f107 0210 	add.w	r2, r7, #16
 8003fd0:	f107 0314 	add.w	r3, r7, #20
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f003 f9c6 	bl	8007368 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f003 f998 	bl	8007310 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	4a13      	ldr	r2, [pc, #76]	; (8004034 <HAL_InitTick+0xa0>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	0c9b      	lsrs	r3, r3, #18
 8003fec:	3b01      	subs	r3, #1
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_InitTick+0xa4>)
 8003ff2:	4a12      	ldr	r2, [pc, #72]	; (800403c <HAL_InitTick+0xa8>)
 8003ff4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_InitTick+0xa4>)
 8003ff8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ffc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003ffe:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <HAL_InitTick+0xa4>)
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <HAL_InitTick+0xa4>)
 8004006:	2200      	movs	r2, #0
 8004008:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <HAL_InitTick+0xa4>)
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004010:	4809      	ldr	r0, [pc, #36]	; (8004038 <HAL_InitTick+0xa4>)
 8004012:	f003 fd45 	bl	8007aa0 <HAL_TIM_Base_Init>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d104      	bne.n	8004026 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800401c:	4806      	ldr	r0, [pc, #24]	; (8004038 <HAL_InitTick+0xa4>)
 800401e:	f003 fd97 	bl	8007b50 <HAL_TIM_Base_Start_IT>
 8004022:	4603      	mov	r3, r0
 8004024:	e000      	b.n	8004028 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
}
 8004028:	4618      	mov	r0, r3
 800402a:	3730      	adds	r7, #48	; 0x30
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	431bde83 	.word	0x431bde83
 8004038:	20006308 	.word	0x20006308
 800403c:	40001000 	.word	0x40001000

08004040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004044:	e7fe      	b.n	8004044 <NMI_Handler+0x4>

08004046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800404a:	e7fe      	b.n	800404a <HardFault_Handler+0x4>

0800404c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004050:	e7fe      	b.n	8004050 <MemManage_Handler+0x4>

08004052 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004052:	b480      	push	{r7}
 8004054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004056:	e7fe      	b.n	8004056 <BusFault_Handler+0x4>

08004058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800405c:	e7fe      	b.n	800405c <UsageFault_Handler+0x4>

0800405e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800405e:	b480      	push	{r7}
 8004060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004070:	4802      	ldr	r0, [pc, #8]	; (800407c <DMA1_Channel1_IRQHandler+0x10>)
 8004072:	f001 fe0c 	bl	8005c8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20005cc8 	.word	0x20005cc8

08004080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004084:	4807      	ldr	r0, [pc, #28]	; (80040a4 <USART1_IRQHandler+0x24>)
 8004086:	f004 ff9b 	bl	8008fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <USART1_IRQHandler+0x24>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d102      	bne.n	800409e <USART1_IRQHandler+0x1e>
HAL_UART_RxCpltCallback(&huart1);}
 8004098:	4802      	ldr	r0, [pc, #8]	; (80040a4 <USART1_IRQHandler+0x24>)
 800409a:	f7fe fc85 	bl	80029a8 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20005bc8 	.word	0x20005bc8

080040a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80040ac:	4802      	ldr	r0, [pc, #8]	; (80040b8 <TIM6_DAC_IRQHandler+0x10>)
 80040ae:	f003 ff61 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20006308 	.word	0x20006308

080040bc <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80040c0:	4802      	ldr	r0, [pc, #8]	; (80040cc <DMA2_Channel6_IRQHandler+0x10>)
 80040c2:	f001 fde4 	bl	8005c8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20005ad0 	.word	0x20005ad0

080040d0 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80040d4:	4802      	ldr	r0, [pc, #8]	; (80040e0 <DMA2_Channel7_IRQHandler+0x10>)
 80040d6:	f001 fdda 	bl	8005c8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20005b80 	.word	0x20005b80

080040e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
	return 1;
 80040e8:	2301      	movs	r3, #1
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <_kill>:

int _kill(int pid, int sig)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040fe:	f009 f8ed 	bl	800d2dc <__errno>
 8004102:	4603      	mov	r3, r0
 8004104:	2216      	movs	r2, #22
 8004106:	601a      	str	r2, [r3, #0]
	return -1;
 8004108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <_exit>:

void _exit (int status)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800411c:	f04f 31ff 	mov.w	r1, #4294967295
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ffe7 	bl	80040f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004126:	e7fe      	b.n	8004126 <_exit+0x12>

08004128 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e00a      	b.n	8004150 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800413a:	f3af 8000 	nop.w
 800413e:	4601      	mov	r1, r0
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	60ba      	str	r2, [r7, #8]
 8004146:	b2ca      	uxtb	r2, r1
 8004148:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	3301      	adds	r3, #1
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	dbf0      	blt.n	800413a <_read+0x12>
	}

return len;
 8004158:	687b      	ldr	r3, [r7, #4]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	e009      	b.n	8004188 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	60ba      	str	r2, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	3301      	adds	r3, #1
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	dbf1      	blt.n	8004174 <_write+0x12>
	}
	return len;
 8004190:	687b      	ldr	r3, [r7, #4]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <_close>:

int _close(int file)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
	return -1;
 80041a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041c2:	605a      	str	r2, [r3, #4]
	return 0;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <_isatty>:

int _isatty(int file)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
	return 1;
 80041da:	2301      	movs	r3, #1
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
	return 0;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800420c:	4a14      	ldr	r2, [pc, #80]	; (8004260 <_sbrk+0x5c>)
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <_sbrk+0x60>)
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004218:	4b13      	ldr	r3, [pc, #76]	; (8004268 <_sbrk+0x64>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d102      	bne.n	8004226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004220:	4b11      	ldr	r3, [pc, #68]	; (8004268 <_sbrk+0x64>)
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <_sbrk+0x68>)
 8004224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <_sbrk+0x64>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4413      	add	r3, r2
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	429a      	cmp	r2, r3
 8004232:	d207      	bcs.n	8004244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004234:	f009 f852 	bl	800d2dc <__errno>
 8004238:	4603      	mov	r3, r0
 800423a:	220c      	movs	r2, #12
 800423c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295
 8004242:	e009      	b.n	8004258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <_sbrk+0x64>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <_sbrk+0x64>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4413      	add	r3, r2
 8004252:	4a05      	ldr	r2, [pc, #20]	; (8004268 <_sbrk+0x64>)
 8004254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20010000 	.word	0x20010000
 8004264:	00000400 	.word	0x00000400
 8004268:	20000264 	.word	0x20000264
 800426c:	200063a8 	.word	0x200063a8

08004270 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <SystemInit+0x20>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	4a05      	ldr	r2, [pc, #20]	; (8004290 <SystemInit+0x20>)
 800427c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004298:	f7ff ffea 	bl	8004270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800429c:	480c      	ldr	r0, [pc, #48]	; (80042d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800429e:	490d      	ldr	r1, [pc, #52]	; (80042d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042a0:	4a0d      	ldr	r2, [pc, #52]	; (80042d8 <LoopForever+0xe>)
  movs r3, #0
 80042a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042a4:	e002      	b.n	80042ac <LoopCopyDataInit>

080042a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042aa:	3304      	adds	r3, #4

080042ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042b0:	d3f9      	bcc.n	80042a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042b2:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80042b4:	4c0a      	ldr	r4, [pc, #40]	; (80042e0 <LoopForever+0x16>)
  movs r3, #0
 80042b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042b8:	e001      	b.n	80042be <LoopFillZerobss>

080042ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042bc:	3204      	adds	r2, #4

080042be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042c0:	d3fb      	bcc.n	80042ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042c2:	f009 f907 	bl	800d4d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042c6:	f7fe f84b 	bl	8002360 <main>

080042ca <LoopForever>:

LoopForever:
    b LoopForever
 80042ca:	e7fe      	b.n	80042ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80042cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80042d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042d4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80042d8:	08013ba8 	.word	0x08013ba8
  ldr r2, =_sbss
 80042dc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80042e0:	200063a8 	.word	0x200063a8

080042e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042e4:	e7fe      	b.n	80042e4 <ADC1_IRQHandler>

080042e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f0:	2003      	movs	r0, #3
 80042f2:	f001 fb00 	bl	80058f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042f6:	200f      	movs	r0, #15
 80042f8:	f7ff fe4c 	bl	8003f94 <HAL_InitTick>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	71fb      	strb	r3, [r7, #7]
 8004306:	e001      	b.n	800430c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004308:	f7ff fc16 	bl	8003b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800430c:	79fb      	ldrb	r3, [r7, #7]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_IncTick+0x20>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_IncTick+0x24>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4413      	add	r3, r2
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <HAL_IncTick+0x24>)
 800432a:	6013      	str	r3, [r2, #0]
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000018 	.word	0x20000018
 800433c:	20006354 	.word	0x20006354

08004340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return uwTick;
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <HAL_GetTick+0x14>)
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	4618      	mov	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20006354 	.word	0x20006354

08004358 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	609a      	str	r2, [r3, #8]
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	609a      	str	r2, [r3, #8]
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3360      	adds	r3, #96	; 0x60
 80043d2:	461a      	mov	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b08      	ldr	r3, [pc, #32]	; (8004404 <LL_ADC_SetOffset+0x44>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	03fff000 	.word	0x03fff000

08004408 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3360      	adds	r3, #96	; 0x60
 8004416:	461a      	mov	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3360      	adds	r3, #96	; 0x60
 8004444:	461a      	mov	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	431a      	orrs	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3330      	adds	r3, #48	; 0x30
 80044a0:	461a      	mov	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	f003 030c 	and.w	r3, r3, #12
 80044ac:	4413      	add	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	211f      	movs	r1, #31
 80044bc:	fa01 f303 	lsl.w	r3, r1, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	401a      	ands	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	0e9b      	lsrs	r3, r3, #26
 80044c8:	f003 011f 	and.w	r1, r3, #31
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	431a      	orrs	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3314      	adds	r3, #20
 80044f8:	461a      	mov	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	0e5b      	lsrs	r3, r3, #25
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	4413      	add	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	0d1b      	lsrs	r3, r3, #20
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2107      	movs	r1, #7
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	401a      	ands	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	0d1b      	lsrs	r3, r3, #20
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	431a      	orrs	r2, r3
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004558:	43db      	mvns	r3, r3
 800455a:	401a      	ands	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f003 0318 	and.w	r3, r3, #24
 8004562:	4908      	ldr	r1, [pc, #32]	; (8004584 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004564:	40d9      	lsrs	r1, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	400b      	ands	r3, r1
 800456a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456e:	431a      	orrs	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	0007ffff 	.word	0x0007ffff

08004588 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6093      	str	r3, [r2, #8]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c0:	d101      	bne.n	80045c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80045e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004610:	d101      	bne.n	8004616 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004638:	f043 0201 	orr.w	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800465c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004660:	f043 0202 	orr.w	r2, r3, #2
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <LL_ADC_IsEnabled+0x18>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <LL_ADC_IsEnabled+0x1a>
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d101      	bne.n	80046b2 <LL_ADC_IsDisableOngoing+0x18>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <LL_ADC_IsDisableOngoing+0x1a>
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046d4:	f043 0204 	orr.w	r2, r3, #4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d101      	bne.n	8004700 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b08      	cmp	r3, #8
 8004720:	d101      	bne.n	8004726 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004740:	2300      	movs	r3, #0
 8004742:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e12c      	b.n	80049a8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff fa13 	bl	8003b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff19 	bl	80045ac <LL_ADC_IsDeepPowerDownEnabled>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff feff 	bl	8004588 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff34 	bl	80045fc <LL_ADC_IsInternalRegulatorEnabled>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d115      	bne.n	80047c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff ff18 	bl	80045d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047a4:	4b82      	ldr	r3, [pc, #520]	; (80049b0 <HAL_ADC_Init+0x27c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	4a82      	ldr	r2, [pc, #520]	; (80049b4 <HAL_ADC_Init+0x280>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	099b      	lsrs	r3, r3, #6
 80047b2:	3301      	adds	r3, #1
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80047b8:	e002      	b.n	80047c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3b01      	subs	r3, #1
 80047be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f9      	bne.n	80047ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ff16 	bl	80045fc <LL_ADC_IsInternalRegulatorEnabled>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	f043 0210 	orr.w	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	f043 0201 	orr.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff ff76 	bl	80046e8 <LL_ADC_REG_IsConversionOngoing>
 80047fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 80c5 	bne.w	8004996 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 80c1 	bne.w	8004996 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800481c:	f043 0202 	orr.w	r2, r3, #2
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff23 	bl	8004674 <LL_ADC_IsEnabled>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10b      	bne.n	800484c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004834:	4860      	ldr	r0, [pc, #384]	; (80049b8 <HAL_ADC_Init+0x284>)
 8004836:	f7ff ff1d 	bl	8004674 <LL_ADC_IsEnabled>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4619      	mov	r1, r3
 8004846:	485d      	ldr	r0, [pc, #372]	; (80049bc <HAL_ADC_Init+0x288>)
 8004848:	f7ff fd86 	bl	8004358 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	7e5b      	ldrb	r3, [r3, #25]
 8004850:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004856:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800485c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004862:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800486a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d106      	bne.n	8004888 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	3b01      	subs	r3, #1
 8004880:	045b      	lsls	r3, r3, #17
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	4b45      	ldr	r3, [pc, #276]	; (80049c0 <HAL_ADC_Init+0x28c>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	69b9      	ldr	r1, [r7, #24]
 80048b4:	430b      	orrs	r3, r1
 80048b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff ff13 	bl	80046e8 <LL_ADC_REG_IsConversionOngoing>
 80048c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff ff20 	bl	800470e <LL_ADC_INJ_IsConversionOngoing>
 80048ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d13d      	bne.n	8004952 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d13a      	bne.n	8004952 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80048e0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048e8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f8:	f023 0302 	bic.w	r3, r3, #2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	430b      	orrs	r3, r1
 8004904:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800490c:	2b01      	cmp	r3, #1
 800490e:	d118      	bne.n	8004942 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800491a:	f023 0304 	bic.w	r3, r3, #4
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004926:	4311      	orrs	r1, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800492c:	4311      	orrs	r1, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004932:	430a      	orrs	r2, r1
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	611a      	str	r2, [r3, #16]
 8004940:	e007      	b.n	8004952 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d10c      	bne.n	8004974 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	f023 010f 	bic.w	r1, r3, #15
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	1e5a      	subs	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
 8004972:	e007      	b.n	8004984 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 020f 	bic.w	r2, r2, #15
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	f023 0303 	bic.w	r3, r3, #3
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
 8004994:	e007      	b.n	80049a6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	f043 0210 	orr.w	r2, r3, #16
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80049a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000010 	.word	0x20000010
 80049b4:	053e2d63 	.word	0x053e2d63
 80049b8:	50040000 	.word	0x50040000
 80049bc:	50040300 	.word	0x50040300
 80049c0:	fff0c007 	.word	0xfff0c007

080049c4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fe89 	bl	80046e8 <LL_ADC_REG_IsConversionOngoing>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d14f      	bne.n	8004a7c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_ADC_Start+0x26>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e04b      	b.n	8004a82 <HAL_ADC_Start+0xbe>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fccc 	bl	8005390 <ADC_Enable>
 80049f8:	4603      	mov	r3, r0
 80049fa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d137      	bne.n	8004a72 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a22:	d106      	bne.n	8004a32 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a28:	f023 0206 	bic.w	r2, r3, #6
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a30:	e002      	b.n	8004a38 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	221c      	movs	r2, #28
 8004a3e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fe28 	bl	80046c0 <LL_ADC_REG_StartConversion>
 8004a70:	e006      	b.n	8004a80 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a7a:	e001      	b.n	8004a80 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fe23 	bl	80046e8 <LL_ADC_REG_IsConversionOngoing>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d167      	bne.n	8004b78 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_ADC_Start_DMA+0x2a>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e063      	b.n	8004b7e <HAL_ADC_Start_DMA+0xf2>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fc66 	bl	8005390 <ADC_Enable>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d14f      	bne.n	8004b6e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d006      	beq.n	8004afc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	f023 0206 	bic.w	r2, r3, #6
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	659a      	str	r2, [r3, #88]	; 0x58
 8004afa:	e002      	b.n	8004b02 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b06:	4a20      	ldr	r2, [pc, #128]	; (8004b88 <HAL_ADC_Start_DMA+0xfc>)
 8004b08:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	4a1f      	ldr	r2, [pc, #124]	; (8004b8c <HAL_ADC_Start_DMA+0x100>)
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <HAL_ADC_Start_DMA+0x104>)
 8004b18:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	221c      	movs	r2, #28
 8004b20:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0210 	orr.w	r2, r2, #16
 8004b38:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3340      	adds	r3, #64	; 0x40
 8004b54:	4619      	mov	r1, r3
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f000 ffb9 	bl	8005ad0 <HAL_DMA_Start_IT>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fdaa 	bl	80046c0 <LL_ADC_REG_StartConversion>
 8004b6c:	e006      	b.n	8004b7c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004b76:	e001      	b.n	8004b7c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	0800555b 	.word	0x0800555b
 8004b8c:	08005633 	.word	0x08005633
 8004b90:	0800564f 	.word	0x0800564f

08004b94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0b6      	sub	sp, #216	; 0xd8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0x22>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e3b9      	b.n	8005366 <HAL_ADC_ConfigChannel+0x796>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff fd72 	bl	80046e8 <LL_ADC_REG_IsConversionOngoing>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f040 839e 	bne.w	8005348 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b05      	cmp	r3, #5
 8004c12:	d824      	bhi.n	8004c5e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	3b02      	subs	r3, #2
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d81b      	bhi.n	8004c56 <HAL_ADC_ConfigChannel+0x86>
 8004c1e:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <HAL_ADC_ConfigChannel+0x54>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c35 	.word	0x08004c35
 8004c28:	08004c3d 	.word	0x08004c3d
 8004c2c:	08004c45 	.word	0x08004c45
 8004c30:	08004c4d 	.word	0x08004c4d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	220c      	movs	r2, #12
 8004c38:	605a      	str	r2, [r3, #4]
          break;
 8004c3a:	e011      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2212      	movs	r2, #18
 8004c40:	605a      	str	r2, [r3, #4]
          break;
 8004c42:	e00d      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2218      	movs	r2, #24
 8004c48:	605a      	str	r2, [r3, #4]
          break;
 8004c4a:	e009      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c52:	605a      	str	r2, [r3, #4]
          break;
 8004c54:	e004      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2206      	movs	r2, #6
 8004c5a:	605a      	str	r2, [r3, #4]
          break;
 8004c5c:	e000      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004c5e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6859      	ldr	r1, [r3, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f7ff fc0f 	bl	8004490 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fd36 	bl	80046e8 <LL_ADC_REG_IsConversionOngoing>
 8004c7c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fd42 	bl	800470e <LL_ADC_INJ_IsConversionOngoing>
 8004c8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f040 81a6 	bne.w	8004fe4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f040 81a1 	bne.w	8004fe4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f7ff fc1a 	bl	80044e8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	08db      	lsrs	r3, r3, #3
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d00a      	beq.n	8004cec <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6919      	ldr	r1, [r3, #16]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ce6:	f7ff fb6b 	bl	80043c0 <LL_ADC_SetOffset>
 8004cea:	e17b      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff fb88 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x148>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fb7d 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	0e9b      	lsrs	r3, r3, #26
 8004d12:	f003 021f 	and.w	r2, r3, #31
 8004d16:	e01e      	b.n	8004d56 <HAL_ADC_ConfigChannel+0x186>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fb72 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d2e:	fa93 f3a3 	rbit	r3, r3
 8004d32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004d46:	2320      	movs	r3, #32
 8004d48:	e004      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004d4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d4e:	fab3 f383 	clz	r3, r3
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x19e>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	0e9b      	lsrs	r3, r3, #26
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	e018      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x1d0>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004d8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004d92:	2320      	movs	r3, #32
 8004d94:	e004      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d9a:	fab3 f383 	clz	r3, r3
 8004d9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d106      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2200      	movs	r2, #0
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fb41 	bl	8004434 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2101      	movs	r1, #1
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fb25 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x20e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fb1a 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	0e9b      	lsrs	r3, r3, #26
 8004dd8:	f003 021f 	and.w	r2, r3, #31
 8004ddc:	e01e      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x24c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2101      	movs	r1, #1
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fb0f 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004df4:	fa93 f3a3 	rbit	r3, r3
 8004df8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004dfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004e0c:	2320      	movs	r3, #32
 8004e0e:	e004      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e14:	fab3 f383 	clz	r3, r3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x264>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	0e9b      	lsrs	r3, r3, #26
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	e018      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x296>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e40:	fa93 f3a3 	rbit	r3, r3
 8004e44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004e48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004e58:	2320      	movs	r3, #32
 8004e5a:	e004      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e60:	fab3 f383 	clz	r3, r3
 8004e64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d106      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2101      	movs	r1, #1
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fade 	bl	8004434 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fac2 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x2d4>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2102      	movs	r1, #2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fab7 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	0e9b      	lsrs	r3, r3, #26
 8004e9e:	f003 021f 	and.w	r2, r3, #31
 8004ea2:	e01e      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x312>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff faac 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eba:	fa93 f3a3 	rbit	r3, r3
 8004ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004ed2:	2320      	movs	r3, #32
 8004ed4:	e004      	b.n	8004ee0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004eda:	fab3 f383 	clz	r3, r3
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <HAL_ADC_ConfigChannel+0x32a>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	0e9b      	lsrs	r3, r3, #26
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	e016      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x358>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	e004      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f22:	fab3 f383 	clz	r3, r3
 8004f26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d106      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2102      	movs	r1, #2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fa7d 	bl	8004434 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2103      	movs	r1, #3
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fa61 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x396>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2103      	movs	r1, #3
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fa56 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	0e9b      	lsrs	r3, r3, #26
 8004f60:	f003 021f 	and.w	r2, r3, #31
 8004f64:	e017      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x3c6>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2103      	movs	r1, #3
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fa4b 	bl	8004408 <LL_ADC_GetOffsetChannel>
 8004f72:	4603      	mov	r3, r0
 8004f74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f78:	fa93 f3a3 	rbit	r3, r3
 8004f7c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f80:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004f88:	2320      	movs	r3, #32
 8004f8a:	e003      	b.n	8004f94 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d105      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x3de>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	0e9b      	lsrs	r3, r3, #26
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	e011      	b.n	8004fd2 <HAL_ADC_ConfigChannel+0x402>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fb6:	fa93 f3a3 	rbit	r3, r3
 8004fba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004fc6:	2320      	movs	r3, #32
 8004fc8:	e003      	b.n	8004fd2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	fab3 f383 	clz	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d106      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2103      	movs	r1, #3
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fa28 	bl	8004434 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff fb43 	bl	8004674 <LL_ADC_IsEnabled>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f040 813f 	bne.w	8005274 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6819      	ldr	r1, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	461a      	mov	r2, r3
 8005004:	f7ff fa9c 	bl	8004540 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a8e      	ldr	r2, [pc, #568]	; (8005248 <HAL_ADC_ConfigChannel+0x678>)
 800500e:	4293      	cmp	r3, r2
 8005010:	f040 8130 	bne.w	8005274 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <HAL_ADC_ConfigChannel+0x46c>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	0e9b      	lsrs	r3, r3, #26
 800502a:	3301      	adds	r3, #1
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	2b09      	cmp	r3, #9
 8005032:	bf94      	ite	ls
 8005034:	2301      	movls	r3, #1
 8005036:	2300      	movhi	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e019      	b.n	8005070 <HAL_ADC_ConfigChannel+0x4a0>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005044:	fa93 f3a3 	rbit	r3, r3
 8005048:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800504a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800504c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800504e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005054:	2320      	movs	r3, #32
 8005056:	e003      	b.n	8005060 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800505a:	fab3 f383 	clz	r3, r3
 800505e:	b2db      	uxtb	r3, r3
 8005060:	3301      	adds	r3, #1
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2b09      	cmp	r3, #9
 8005068:	bf94      	ite	ls
 800506a:	2301      	movls	r3, #1
 800506c:	2300      	movhi	r3, #0
 800506e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005070:	2b00      	cmp	r3, #0
 8005072:	d079      	beq.n	8005168 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507c:	2b00      	cmp	r3, #0
 800507e:	d107      	bne.n	8005090 <HAL_ADC_ConfigChannel+0x4c0>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	0e9b      	lsrs	r3, r3, #26
 8005086:	3301      	adds	r3, #1
 8005088:	069b      	lsls	r3, r3, #26
 800508a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800508e:	e015      	b.n	80050bc <HAL_ADC_ConfigChannel+0x4ec>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80050a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80050a8:	2320      	movs	r3, #32
 80050aa:	e003      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80050ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ae:	fab3 f383 	clz	r3, r3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	3301      	adds	r3, #1
 80050b6:	069b      	lsls	r3, r3, #26
 80050b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <HAL_ADC_ConfigChannel+0x50c>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	0e9b      	lsrs	r3, r3, #26
 80050ce:	3301      	adds	r3, #1
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	2101      	movs	r1, #1
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	e017      	b.n	800510c <HAL_ADC_ConfigChannel+0x53c>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e4:	fa93 f3a3 	rbit	r3, r3
 80050e8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80050ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80050ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80050f4:	2320      	movs	r3, #32
 80050f6:	e003      	b.n	8005100 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80050f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	3301      	adds	r3, #1
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	2101      	movs	r1, #1
 8005108:	fa01 f303 	lsl.w	r3, r1, r3
 800510c:	ea42 0103 	orr.w	r1, r2, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x562>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	0e9b      	lsrs	r3, r3, #26
 8005122:	3301      	adds	r3, #1
 8005124:	f003 021f 	and.w	r2, r3, #31
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	051b      	lsls	r3, r3, #20
 8005130:	e018      	b.n	8005164 <HAL_ADC_ConfigChannel+0x594>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	fa93 f3a3 	rbit	r3, r3
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005142:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800514a:	2320      	movs	r3, #32
 800514c:	e003      	b.n	8005156 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800514e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005150:	fab3 f383 	clz	r3, r3
 8005154:	b2db      	uxtb	r3, r3
 8005156:	3301      	adds	r3, #1
 8005158:	f003 021f 	and.w	r2, r3, #31
 800515c:	4613      	mov	r3, r2
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	4413      	add	r3, r2
 8005162:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005164:	430b      	orrs	r3, r1
 8005166:	e080      	b.n	800526a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005170:	2b00      	cmp	r3, #0
 8005172:	d107      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x5b4>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	0e9b      	lsrs	r3, r3, #26
 800517a:	3301      	adds	r3, #1
 800517c:	069b      	lsls	r3, r3, #26
 800517e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005182:	e015      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x5e0>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	fa93 f3a3 	rbit	r3, r3
 8005190:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800519c:	2320      	movs	r3, #32
 800519e:	e003      	b.n	80051a8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	fab3 f383 	clz	r3, r3
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	3301      	adds	r3, #1
 80051aa:	069b      	lsls	r3, r3, #26
 80051ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <HAL_ADC_ConfigChannel+0x600>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	0e9b      	lsrs	r3, r3, #26
 80051c2:	3301      	adds	r3, #1
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	2101      	movs	r1, #1
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	e017      	b.n	8005200 <HAL_ADC_ConfigChannel+0x630>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	fa93 f3a3 	rbit	r3, r3
 80051dc:	61fb      	str	r3, [r7, #28]
  return result;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80051e8:	2320      	movs	r3, #32
 80051ea:	e003      	b.n	80051f4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	fab3 f383 	clz	r3, r3
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	3301      	adds	r3, #1
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2101      	movs	r1, #1
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	ea42 0103 	orr.w	r1, r2, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10d      	bne.n	800522c <HAL_ADC_ConfigChannel+0x65c>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	0e9b      	lsrs	r3, r3, #26
 8005216:	3301      	adds	r3, #1
 8005218:	f003 021f 	and.w	r2, r3, #31
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	3b1e      	subs	r3, #30
 8005224:	051b      	lsls	r3, r3, #20
 8005226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800522a:	e01d      	b.n	8005268 <HAL_ADC_ConfigChannel+0x698>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	fa93 f3a3 	rbit	r3, r3
 8005238:	613b      	str	r3, [r7, #16]
  return result;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d103      	bne.n	800524c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005244:	2320      	movs	r3, #32
 8005246:	e005      	b.n	8005254 <HAL_ADC_ConfigChannel+0x684>
 8005248:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	fab3 f383 	clz	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	3301      	adds	r3, #1
 8005256:	f003 021f 	and.w	r2, r3, #31
 800525a:	4613      	mov	r3, r2
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	4413      	add	r3, r2
 8005260:	3b1e      	subs	r3, #30
 8005262:	051b      	lsls	r3, r3, #20
 8005264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005268:	430b      	orrs	r3, r1
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	6892      	ldr	r2, [r2, #8]
 800526e:	4619      	mov	r1, r3
 8005270:	f7ff f93a 	bl	80044e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b3d      	ldr	r3, [pc, #244]	; (8005370 <HAL_ADC_ConfigChannel+0x7a0>)
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d06c      	beq.n	800535a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005280:	483c      	ldr	r0, [pc, #240]	; (8005374 <HAL_ADC_ConfigChannel+0x7a4>)
 8005282:	f7ff f88f 	bl	80043a4 <LL_ADC_GetCommonPathInternalCh>
 8005286:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a3a      	ldr	r2, [pc, #232]	; (8005378 <HAL_ADC_ConfigChannel+0x7a8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d127      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d121      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a35      	ldr	r2, [pc, #212]	; (800537c <HAL_ADC_ConfigChannel+0x7ac>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d157      	bne.n	800535a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052b2:	4619      	mov	r1, r3
 80052b4:	482f      	ldr	r0, [pc, #188]	; (8005374 <HAL_ADC_ConfigChannel+0x7a4>)
 80052b6:	f7ff f862 	bl	800437e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052ba:	4b31      	ldr	r3, [pc, #196]	; (8005380 <HAL_ADC_ConfigChannel+0x7b0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	099b      	lsrs	r3, r3, #6
 80052c0:	4a30      	ldr	r2, [pc, #192]	; (8005384 <HAL_ADC_ConfigChannel+0x7b4>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	099b      	lsrs	r3, r3, #6
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	4613      	mov	r3, r2
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052d4:	e002      	b.n	80052dc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3b01      	subs	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f9      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052e2:	e03a      	b.n	800535a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a27      	ldr	r2, [pc, #156]	; (8005388 <HAL_ADC_ConfigChannel+0x7b8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d113      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x746>
 80052ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10d      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1f      	ldr	r2, [pc, #124]	; (800537c <HAL_ADC_ConfigChannel+0x7ac>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d12a      	bne.n	800535a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800530c:	4619      	mov	r1, r3
 800530e:	4819      	ldr	r0, [pc, #100]	; (8005374 <HAL_ADC_ConfigChannel+0x7a4>)
 8005310:	f7ff f835 	bl	800437e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005314:	e021      	b.n	800535a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1c      	ldr	r2, [pc, #112]	; (800538c <HAL_ADC_ConfigChannel+0x7bc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d11c      	bne.n	800535a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d116      	bne.n	800535a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a12      	ldr	r2, [pc, #72]	; (800537c <HAL_ADC_ConfigChannel+0x7ac>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d111      	bne.n	800535a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005336:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800533a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800533e:	4619      	mov	r1, r3
 8005340:	480c      	ldr	r0, [pc, #48]	; (8005374 <HAL_ADC_ConfigChannel+0x7a4>)
 8005342:	f7ff f81c 	bl	800437e <LL_ADC_SetCommonPathInternalCh>
 8005346:	e008      	b.n	800535a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534c:	f043 0220 	orr.w	r2, r3, #32
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005362:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005366:	4618      	mov	r0, r3
 8005368:	37d8      	adds	r7, #216	; 0xd8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	80080000 	.word	0x80080000
 8005374:	50040300 	.word	0x50040300
 8005378:	c7520000 	.word	0xc7520000
 800537c:	50040000 	.word	0x50040000
 8005380:	20000010 	.word	0x20000010
 8005384:	053e2d63 	.word	0x053e2d63
 8005388:	cb840000 	.word	0xcb840000
 800538c:	80000001 	.word	0x80000001

08005390 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005398:	2300      	movs	r3, #0
 800539a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff f967 	bl	8004674 <LL_ADC_IsEnabled>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d169      	bne.n	8005480 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	4b36      	ldr	r3, [pc, #216]	; (800548c <ADC_Enable+0xfc>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	f043 0210 	orr.w	r2, r3, #16
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f043 0201 	orr.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e055      	b.n	8005482 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff f922 	bl	8004624 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053e0:	482b      	ldr	r0, [pc, #172]	; (8005490 <ADC_Enable+0x100>)
 80053e2:	f7fe ffdf 	bl	80043a4 <LL_ADC_GetCommonPathInternalCh>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d013      	beq.n	8005418 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <ADC_Enable+0x104>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	4a28      	ldr	r2, [pc, #160]	; (8005498 <ADC_Enable+0x108>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	099b      	lsrs	r3, r3, #6
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	4613      	mov	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800540a:	e002      	b.n	8005412 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	3b01      	subs	r3, #1
 8005410:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f9      	bne.n	800540c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005418:	f7fe ff92 	bl	8004340 <HAL_GetTick>
 800541c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800541e:	e028      	b.n	8005472 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff f925 	bl	8004674 <LL_ADC_IsEnabled>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff f8f5 	bl	8004624 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800543a:	f7fe ff81 	bl	8004340 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d914      	bls.n	8005472 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b01      	cmp	r3, #1
 8005454:	d00d      	beq.n	8005472 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	f043 0210 	orr.w	r2, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	f043 0201 	orr.w	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e007      	b.n	8005482 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b01      	cmp	r3, #1
 800547e:	d1cf      	bne.n	8005420 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	8000003f 	.word	0x8000003f
 8005490:	50040300 	.word	0x50040300
 8005494:	20000010 	.word	0x20000010
 8005498:	053e2d63 	.word	0x053e2d63

0800549c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff f8f6 	bl	800469a <LL_ADC_IsDisableOngoing>
 80054ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f8dd 	bl	8004674 <LL_ADC_IsEnabled>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d047      	beq.n	8005550 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d144      	bne.n	8005550 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 030d 	and.w	r3, r3, #13
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d10c      	bne.n	80054ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff f8b7 	bl	800464c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2203      	movs	r2, #3
 80054e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054e6:	f7fe ff2b 	bl	8004340 <HAL_GetTick>
 80054ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054ec:	e029      	b.n	8005542 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	f043 0210 	orr.w	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	f043 0201 	orr.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e023      	b.n	8005552 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800550a:	f7fe ff19 	bl	8004340 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d914      	bls.n	8005542 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00d      	beq.n	8005542 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552a:	f043 0210 	orr.w	r2, r3, #16
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	f043 0201 	orr.w	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e007      	b.n	8005552 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1dc      	bne.n	800550a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005570:	2b00      	cmp	r3, #0
 8005572:	d14b      	bne.n	800560c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005578:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d021      	beq.n	80055d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe ff69 	bl	800446a <LL_ADC_REG_IsTriggerSourceSWStart>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d032      	beq.n	8005604 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d12b      	bne.n	8005604 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d11f      	bne.n	8005604 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	f043 0201 	orr.w	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54
 80055d0:	e018      	b.n	8005604 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d111      	bne.n	8005604 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	f043 0201 	orr.w	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff fac5 	bl	8004b94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800560a:	e00e      	b.n	800562a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff facf 	bl	8004bbc <HAL_ADC_ErrorCallback>
}
 800561e:	e004      	b.n	800562a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	4798      	blx	r3
}
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff fab1 	bl	8004ba8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	f043 0204 	orr.w	r2, r3, #4
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff faa1 	bl	8004bbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <LL_ADC_StartCalibration>:
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005694:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800569e:	4313      	orrs	r3, r2
 80056a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	609a      	str	r2, [r3, #8]
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c8:	d101      	bne.n	80056ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_ADCEx_Calibration_Start+0x1c>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e04d      	b.n	8005794 <HAL_ADCEx_Calibration_Start+0xb8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fecb 	bl	800549c <ADC_Disable>
 8005706:	4603      	mov	r3, r0
 8005708:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d136      	bne.n	800577e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005718:	f023 0302 	bic.w	r3, r3, #2
 800571c:	f043 0202 	orr.w	r2, r3, #2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6839      	ldr	r1, [r7, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff ffa9 	bl	8005682 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005730:	e014      	b.n	800575c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	3301      	adds	r3, #1
 8005736:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800573e:	d30d      	bcc.n	800575c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	f023 0312 	bic.w	r3, r3, #18
 8005748:	f043 0210 	orr.w	r2, r3, #16
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e01b      	b.n	8005794 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff ffa7 	bl	80056b4 <LL_ADC_IsCalibrationOnGoing>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e2      	bne.n	8005732 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	f023 0303 	bic.w	r3, r3, #3
 8005774:	f043 0201 	orr.w	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	655a      	str	r2, [r3, #84]	; 0x54
 800577c:	e005      	b.n	800578a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	f043 0210 	orr.w	r2, r3, #16
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057ac:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <__NVIC_SetPriorityGrouping+0x44>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057b8:	4013      	ands	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057ce:	4a04      	ldr	r2, [pc, #16]	; (80057e0 <__NVIC_SetPriorityGrouping+0x44>)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	60d3      	str	r3, [r2, #12]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	e000ed00 	.word	0xe000ed00

080057e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057e8:	4b04      	ldr	r3, [pc, #16]	; (80057fc <__NVIC_GetPriorityGrouping+0x18>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	f003 0307 	and.w	r3, r3, #7
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800580a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580e:	2b00      	cmp	r3, #0
 8005810:	db0b      	blt.n	800582a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	f003 021f 	and.w	r2, r3, #31
 8005818:	4907      	ldr	r1, [pc, #28]	; (8005838 <__NVIC_EnableIRQ+0x38>)
 800581a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	2001      	movs	r0, #1
 8005822:	fa00 f202 	lsl.w	r2, r0, r2
 8005826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	e000e100 	.word	0xe000e100

0800583c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	6039      	str	r1, [r7, #0]
 8005846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800584c:	2b00      	cmp	r3, #0
 800584e:	db0a      	blt.n	8005866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	b2da      	uxtb	r2, r3
 8005854:	490c      	ldr	r1, [pc, #48]	; (8005888 <__NVIC_SetPriority+0x4c>)
 8005856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585a:	0112      	lsls	r2, r2, #4
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	440b      	add	r3, r1
 8005860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005864:	e00a      	b.n	800587c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	4908      	ldr	r1, [pc, #32]	; (800588c <__NVIC_SetPriority+0x50>)
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	3b04      	subs	r3, #4
 8005874:	0112      	lsls	r2, r2, #4
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	440b      	add	r3, r1
 800587a:	761a      	strb	r2, [r3, #24]
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	e000e100 	.word	0xe000e100
 800588c:	e000ed00 	.word	0xe000ed00

08005890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005890:	b480      	push	{r7}
 8005892:	b089      	sub	sp, #36	; 0x24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f1c3 0307 	rsb	r3, r3, #7
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	bf28      	it	cs
 80058ae:	2304      	movcs	r3, #4
 80058b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3304      	adds	r3, #4
 80058b6:	2b06      	cmp	r3, #6
 80058b8:	d902      	bls.n	80058c0 <NVIC_EncodePriority+0x30>
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	3b03      	subs	r3, #3
 80058be:	e000      	b.n	80058c2 <NVIC_EncodePriority+0x32>
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c4:	f04f 32ff 	mov.w	r2, #4294967295
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	43da      	mvns	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	401a      	ands	r2, r3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058d8:	f04f 31ff 	mov.w	r1, #4294967295
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	43d9      	mvns	r1, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058e8:	4313      	orrs	r3, r2
         );
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3724      	adds	r7, #36	; 0x24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff ff4c 	bl	800579c <__NVIC_SetPriorityGrouping>
}
 8005904:	bf00      	nop
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800591e:	f7ff ff61 	bl	80057e4 <__NVIC_GetPriorityGrouping>
 8005922:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	6978      	ldr	r0, [r7, #20]
 800592a:	f7ff ffb1 	bl	8005890 <NVIC_EncodePriority>
 800592e:	4602      	mov	r2, r0
 8005930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005934:	4611      	mov	r1, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ff80 	bl	800583c <__NVIC_SetPriority>
}
 800593c:	bf00      	nop
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800594e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ff54 	bl	8005800 <__NVIC_EnableIRQ>
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e098      	b.n	8005aa4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	4b4d      	ldr	r3, [pc, #308]	; (8005ab0 <HAL_DMA_Init+0x150>)
 800597a:	429a      	cmp	r2, r3
 800597c:	d80f      	bhi.n	800599e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <HAL_DMA_Init+0x154>)
 8005986:	4413      	add	r3, r2
 8005988:	4a4b      	ldr	r2, [pc, #300]	; (8005ab8 <HAL_DMA_Init+0x158>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	009a      	lsls	r2, r3, #2
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a48      	ldr	r2, [pc, #288]	; (8005abc <HAL_DMA_Init+0x15c>)
 800599a:	641a      	str	r2, [r3, #64]	; 0x40
 800599c:	e00e      	b.n	80059bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	4b46      	ldr	r3, [pc, #280]	; (8005ac0 <HAL_DMA_Init+0x160>)
 80059a6:	4413      	add	r3, r2
 80059a8:	4a43      	ldr	r2, [pc, #268]	; (8005ab8 <HAL_DMA_Init+0x158>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	009a      	lsls	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a42      	ldr	r2, [pc, #264]	; (8005ac4 <HAL_DMA_Init+0x164>)
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80059e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a16:	d039      	beq.n	8005a8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	4a27      	ldr	r2, [pc, #156]	; (8005abc <HAL_DMA_Init+0x15c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d11a      	bne.n	8005a58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a22:	4b29      	ldr	r3, [pc, #164]	; (8005ac8 <HAL_DMA_Init+0x168>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	f003 031c 	and.w	r3, r3, #28
 8005a2e:	210f      	movs	r1, #15
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	4924      	ldr	r1, [pc, #144]	; (8005ac8 <HAL_DMA_Init+0x168>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005a3c:	4b22      	ldr	r3, [pc, #136]	; (8005ac8 <HAL_DMA_Init+0x168>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6859      	ldr	r1, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a48:	f003 031c 	and.w	r3, r3, #28
 8005a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a50:	491d      	ldr	r1, [pc, #116]	; (8005ac8 <HAL_DMA_Init+0x168>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]
 8005a56:	e019      	b.n	8005a8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a58:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <HAL_DMA_Init+0x16c>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	f003 031c 	and.w	r3, r3, #28
 8005a64:	210f      	movs	r1, #15
 8005a66:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	4917      	ldr	r1, [pc, #92]	; (8005acc <HAL_DMA_Init+0x16c>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <HAL_DMA_Init+0x16c>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6859      	ldr	r1, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7e:	f003 031c 	and.w	r3, r3, #28
 8005a82:	fa01 f303 	lsl.w	r3, r1, r3
 8005a86:	4911      	ldr	r1, [pc, #68]	; (8005acc <HAL_DMA_Init+0x16c>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	40020407 	.word	0x40020407
 8005ab4:	bffdfff8 	.word	0xbffdfff8
 8005ab8:	cccccccd 	.word	0xcccccccd
 8005abc:	40020000 	.word	0x40020000
 8005ac0:	bffdfbf8 	.word	0xbffdfbf8
 8005ac4:	40020400 	.word	0x40020400
 8005ac8:	400200a8 	.word	0x400200a8
 8005acc:	400204a8 	.word	0x400204a8

08005ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_DMA_Start_IT+0x20>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e04b      	b.n	8005b88 <HAL_DMA_Start_IT+0xb8>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d13a      	bne.n	8005b7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f96b 	bl	8005e04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d008      	beq.n	8005b48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 020e 	orr.w	r2, r2, #14
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	e00f      	b.n	8005b68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0204 	bic.w	r2, r2, #4
 8005b56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 020a 	orr.w	r2, r2, #10
 8005b66:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	e005      	b.n	8005b86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
 8005b84:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d008      	beq.n	8005bba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2204      	movs	r2, #4
 8005bac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e022      	b.n	8005c00 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 020e 	bic.w	r2, r2, #14
 8005bc8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	f003 021c 	and.w	r2, r3, #28
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2101      	movs	r1, #1
 8005be8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d005      	beq.n	8005c30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2204      	movs	r2, #4
 8005c28:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	73fb      	strb	r3, [r7, #15]
 8005c2e:	e029      	b.n	8005c84 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 020e 	bic.w	r2, r2, #14
 8005c3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c54:	f003 021c 	and.w	r2, r3, #28
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c62:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4798      	blx	r3
    }
  }
  return status;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f003 031c 	and.w	r3, r3, #28
 8005cae:	2204      	movs	r2, #4
 8005cb0:	409a      	lsls	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d026      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x7a>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d021      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d107      	bne.n	8005ce2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0204 	bic.w	r2, r2, #4
 8005ce0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	f003 021c 	and.w	r2, r3, #28
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	2104      	movs	r1, #4
 8005cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d071      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005d06:	e06c      	b.n	8005de2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0c:	f003 031c 	and.w	r3, r3, #28
 8005d10:	2202      	movs	r2, #2
 8005d12:	409a      	lsls	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4013      	ands	r3, r2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d02e      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xec>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d029      	beq.n	8005d7a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 020a 	bic.w	r2, r2, #10
 8005d42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d50:	f003 021c 	and.w	r2, r3, #28
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	2102      	movs	r1, #2
 8005d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d038      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005d78:	e033      	b.n	8005de2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	f003 031c 	and.w	r3, r3, #28
 8005d82:	2208      	movs	r2, #8
 8005d84:	409a      	lsls	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d02a      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x156>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d025      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 020e 	bic.w	r2, r2, #14
 8005da6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	f003 021c 	and.w	r2, r3, #28
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	2101      	movs	r1, #1
 8005db6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d004      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
}
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e16:	f003 021c 	and.w	r2, r3, #28
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	2101      	movs	r1, #1
 8005e20:	fa01 f202 	lsl.w	r2, r1, r2
 8005e24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d108      	bne.n	8005e48 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e46:	e007      	b.n	8005e58 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	60da      	str	r2, [r3, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e76:	4b2f      	ldr	r3, [pc, #188]	; (8005f34 <HAL_FLASH_Program+0xd0>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_FLASH_Program+0x1e>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e053      	b.n	8005f2a <HAL_FLASH_Program+0xc6>
 8005e82:	4b2c      	ldr	r3, [pc, #176]	; (8005f34 <HAL_FLASH_Program+0xd0>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e8c:	f000 f894 	bl	8005fb8 <FLASH_WaitForLastOperation>
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d143      	bne.n	8005f22 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e9a:	4b26      	ldr	r3, [pc, #152]	; (8005f34 <HAL_FLASH_Program+0xd0>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <HAL_FLASH_Program+0xd4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005eac:	4b22      	ldr	r3, [pc, #136]	; (8005f38 <HAL_FLASH_Program+0xd4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <HAL_FLASH_Program+0xd4>)
 8005eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eb6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005eb8:	4b1e      	ldr	r3, [pc, #120]	; (8005f34 <HAL_FLASH_Program+0xd0>)
 8005eba:	2202      	movs	r2, #2
 8005ebc:	771a      	strb	r2, [r3, #28]
 8005ebe:	e002      	b.n	8005ec6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005ec0:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <HAL_FLASH_Program+0xd0>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d107      	bne.n	8005edc <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed0:	68b8      	ldr	r0, [r7, #8]
 8005ed2:	f000 f8c9 	bl	8006068 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	e010      	b.n	8005efe <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d002      	beq.n	8005ee8 <HAL_FLASH_Program+0x84>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d10a      	bne.n	8005efe <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	68b8      	ldr	r0, [r7, #8]
 8005eee:	f000 f8e1 	bl	80060b4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d102      	bne.n	8005efe <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005ef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005efc:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005efe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f02:	f000 f859 	bl	8005fb8 <FLASH_WaitForLastOperation>
 8005f06:	4603      	mov	r3, r0
 8005f08:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d006      	beq.n	8005f1e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <HAL_FLASH_Program+0xd4>)
 8005f12:	695a      	ldr	r2, [r3, #20]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	43db      	mvns	r3, r3
 8005f18:	4907      	ldr	r1, [pc, #28]	; (8005f38 <HAL_FLASH_Program+0xd4>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005f1e:	f000 f9db 	bl	80062d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f22:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <HAL_FLASH_Program+0xd0>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]

  return status;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	2000001c 	.word	0x2000001c
 8005f38:	40022000 	.word	0x40022000

08005f3c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <HAL_FLASH_Unlock+0x38>)
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	da0b      	bge.n	8005f66 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <HAL_FLASH_Unlock+0x38>)
 8005f50:	4a09      	ldr	r2, [pc, #36]	; (8005f78 <HAL_FLASH_Unlock+0x3c>)
 8005f52:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005f54:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <HAL_FLASH_Unlock+0x38>)
 8005f56:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <HAL_FLASH_Unlock+0x40>)
 8005f58:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005f5a:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <HAL_FLASH_Unlock+0x38>)
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	da01      	bge.n	8005f66 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005f66:	79fb      	ldrb	r3, [r7, #7]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40022000 	.word	0x40022000
 8005f78:	45670123 	.word	0x45670123
 8005f7c:	cdef89ab 	.word	0xcdef89ab

08005f80 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <HAL_FLASH_Lock+0x1c>)
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	4a04      	ldr	r2, [pc, #16]	; (8005f9c <HAL_FLASH_Lock+0x1c>)
 8005f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f8e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	40022000 	.word	0x40022000

08005fa0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005fa4:	4b03      	ldr	r3, [pc, #12]	; (8005fb4 <HAL_FLASH_GetError+0x14>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	2000001c 	.word	0x2000001c

08005fb8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005fc0:	f7fe f9be 	bl	8004340 <HAL_GetTick>
 8005fc4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005fc6:	e00d      	b.n	8005fe4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d009      	beq.n	8005fe4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005fd0:	f7fe f9b6 	bl	8004340 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d801      	bhi.n	8005fe4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e036      	b.n	8006052 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <FLASH_WaitForLastOperation+0xa4>)
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1eb      	bne.n	8005fc8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <FLASH_WaitForLastOperation+0xa4>)
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	4b1a      	ldr	r3, [pc, #104]	; (8006060 <FLASH_WaitForLastOperation+0xa8>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01e      	beq.n	800603e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8006000:	4b18      	ldr	r3, [pc, #96]	; (8006064 <FLASH_WaitForLastOperation+0xac>)
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4313      	orrs	r3, r2
 8006008:	4a16      	ldr	r2, [pc, #88]	; (8006064 <FLASH_WaitForLastOperation+0xac>)
 800600a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <FLASH_WaitForLastOperation+0x6e>
 8006016:	4b11      	ldr	r3, [pc, #68]	; (800605c <FLASH_WaitForLastOperation+0xa4>)
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006020:	490e      	ldr	r1, [pc, #56]	; (800605c <FLASH_WaitForLastOperation+0xa4>)
 8006022:	4313      	orrs	r3, r2
 8006024:	618b      	str	r3, [r1, #24]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d004      	beq.n	800603a <FLASH_WaitForLastOperation+0x82>
 8006030:	4a0a      	ldr	r2, [pc, #40]	; (800605c <FLASH_WaitForLastOperation+0xa4>)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006038:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e009      	b.n	8006052 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <FLASH_WaitForLastOperation+0xa4>)
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800604a:	4b04      	ldr	r3, [pc, #16]	; (800605c <FLASH_WaitForLastOperation+0xa4>)
 800604c:	2201      	movs	r2, #1
 800604e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40022000 	.word	0x40022000
 8006060:	0002c3fa 	.word	0x0002c3fa
 8006064:	2000001c 	.word	0x2000001c

08006068 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006074:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <FLASH_Program_DoubleWord+0x48>)
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	4a0d      	ldr	r2, [pc, #52]	; (80060b0 <FLASH_Program_DoubleWord+0x48>)
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006086:	f3bf 8f6f 	isb	sy
}
 800608a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800608c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	000a      	movs	r2, r1
 800609a:	2300      	movs	r3, #0
 800609c:	68f9      	ldr	r1, [r7, #12]
 800609e:	3104      	adds	r1, #4
 80060a0:	4613      	mov	r3, r2
 80060a2:	600b      	str	r3, [r1, #0]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40022000 	.word	0x40022000

080060b4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b089      	sub	sp, #36	; 0x24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80060be:	2340      	movs	r3, #64	; 0x40
 80060c0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80060ca:	4b14      	ldr	r3, [pc, #80]	; (800611c <FLASH_Program_Fast+0x68>)
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	4a13      	ldr	r2, [pc, #76]	; (800611c <FLASH_Program_Fast+0x68>)
 80060d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d6:	f3ef 8310 	mrs	r3, PRIMASK
 80060da:	60fb      	str	r3, [r7, #12]
  return(result);
 80060dc:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80060de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80060e0:	b672      	cpsid	i
}
 80060e2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	3304      	adds	r3, #4
 80060f0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	3304      	adds	r3, #4
 80060f6:	617b      	str	r3, [r7, #20]
    row_index--;
 80060f8:	7ffb      	ldrb	r3, [r7, #31]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80060fe:	7ffb      	ldrb	r3, [r7, #31]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1ef      	bne.n	80060e4 <FLASH_Program_Fast+0x30>
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f383 8810 	msr	PRIMASK, r3
}
 800610e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8006110:	bf00      	nop
 8006112:	3724      	adds	r7, #36	; 0x24
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40022000 	.word	0x40022000

08006120 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800612a:	4b48      	ldr	r3, [pc, #288]	; (800624c <HAL_FLASHEx_Erase+0x12c>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_FLASHEx_Erase+0x16>
 8006132:	2302      	movs	r3, #2
 8006134:	e085      	b.n	8006242 <HAL_FLASHEx_Erase+0x122>
 8006136:	4b45      	ldr	r3, [pc, #276]	; (800624c <HAL_FLASHEx_Erase+0x12c>)
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800613c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006140:	f7ff ff3a 	bl	8005fb8 <FLASH_WaitForLastOperation>
 8006144:	4603      	mov	r3, r0
 8006146:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d175      	bne.n	800623a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800614e:	4b3f      	ldr	r3, [pc, #252]	; (800624c <HAL_FLASHEx_Erase+0x12c>)
 8006150:	2200      	movs	r2, #0
 8006152:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006154:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800615c:	2b00      	cmp	r3, #0
 800615e:	d013      	beq.n	8006188 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006160:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800616c:	4b38      	ldr	r3, [pc, #224]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a37      	ldr	r2, [pc, #220]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 8006172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006176:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006178:	4b34      	ldr	r3, [pc, #208]	; (800624c <HAL_FLASHEx_Erase+0x12c>)
 800617a:	2203      	movs	r2, #3
 800617c:	771a      	strb	r2, [r3, #28]
 800617e:	e016      	b.n	80061ae <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006180:	4b32      	ldr	r3, [pc, #200]	; (800624c <HAL_FLASHEx_Erase+0x12c>)
 8006182:	2201      	movs	r2, #1
 8006184:	771a      	strb	r2, [r3, #28]
 8006186:	e012      	b.n	80061ae <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006188:	4b31      	ldr	r3, [pc, #196]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006190:	2b00      	cmp	r3, #0
 8006192:	d009      	beq.n	80061a8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006194:	4b2e      	ldr	r3, [pc, #184]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2d      	ldr	r2, [pc, #180]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 800619a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800619e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80061a0:	4b2a      	ldr	r3, [pc, #168]	; (800624c <HAL_FLASHEx_Erase+0x12c>)
 80061a2:	2202      	movs	r2, #2
 80061a4:	771a      	strb	r2, [r3, #28]
 80061a6:	e002      	b.n	80061ae <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80061a8:	4b28      	ldr	r3, [pc, #160]	; (800624c <HAL_FLASHEx_Erase+0x12c>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d111      	bne.n	80061da <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f84a 	bl	8006254 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80061c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80061c4:	f7ff fef8 	bl	8005fb8 <FLASH_WaitForLastOperation>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80061cc:	4b20      	ldr	r3, [pc, #128]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 80061d2:	f023 0304 	bic.w	r3, r3, #4
 80061d6:	6153      	str	r3, [r2, #20]
 80061d8:	e02d      	b.n	8006236 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	f04f 32ff 	mov.w	r2, #4294967295
 80061e0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60bb      	str	r3, [r7, #8]
 80061e8:	e01d      	b.n	8006226 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4619      	mov	r1, r3
 80061f0:	68b8      	ldr	r0, [r7, #8]
 80061f2:	f000 f84d 	bl	8006290 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80061f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80061fa:	f7ff fedd 	bl	8005fb8 <FLASH_WaitForLastOperation>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006202:	4b13      	ldr	r3, [pc, #76]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	4a12      	ldr	r2, [pc, #72]	; (8006250 <HAL_FLASHEx_Erase+0x130>)
 8006208:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800620c:	f023 0302 	bic.w	r3, r3, #2
 8006210:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	601a      	str	r2, [r3, #0]
          break;
 800621e:	e00a      	b.n	8006236 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	3301      	adds	r3, #1
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	4413      	add	r3, r2
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	429a      	cmp	r2, r3
 8006234:	d3d9      	bcc.n	80061ea <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006236:	f000 f84f 	bl	80062d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800623a:	4b04      	ldr	r3, [pc, #16]	; (800624c <HAL_FLASHEx_Erase+0x12c>)
 800623c:	2200      	movs	r2, #0
 800623e:	701a      	strb	r2, [r3, #0]

  return status;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	2000001c 	.word	0x2000001c
 8006250:	40022000 	.word	0x40022000

08006254 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006266:	4b09      	ldr	r3, [pc, #36]	; (800628c <FLASH_MassErase+0x38>)
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	4a08      	ldr	r2, [pc, #32]	; (800628c <FLASH_MassErase+0x38>)
 800626c:	f043 0304 	orr.w	r3, r3, #4
 8006270:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006272:	4b06      	ldr	r3, [pc, #24]	; (800628c <FLASH_MassErase+0x38>)
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	4a05      	ldr	r2, [pc, #20]	; (800628c <FLASH_MassErase+0x38>)
 8006278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800627c:	6153      	str	r3, [r2, #20]
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40022000 	.word	0x40022000

08006290 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <FLASH_PageErase+0x44>)
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80062aa:	490a      	ldr	r1, [pc, #40]	; (80062d4 <FLASH_PageErase+0x44>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <FLASH_PageErase+0x44>)
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <FLASH_PageErase+0x44>)
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80062bc:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <FLASH_PageErase+0x44>)
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	4a04      	ldr	r2, [pc, #16]	; (80062d4 <FLASH_PageErase+0x44>)
 80062c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c6:	6153      	str	r3, [r2, #20]
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	40022000 	.word	0x40022000

080062d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80062de:	4b21      	ldr	r3, [pc, #132]	; (8006364 <FLASH_FlushCaches+0x8c>)
 80062e0:	7f1b      	ldrb	r3, [r3, #28]
 80062e2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d002      	beq.n	80062f0 <FLASH_FlushCaches+0x18>
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d117      	bne.n	8006320 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80062f0:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <FLASH_FlushCaches+0x90>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <FLASH_FlushCaches+0x90>)
 80062f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062fa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80062fc:	4b1a      	ldr	r3, [pc, #104]	; (8006368 <FLASH_FlushCaches+0x90>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a19      	ldr	r2, [pc, #100]	; (8006368 <FLASH_FlushCaches+0x90>)
 8006302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	4b17      	ldr	r3, [pc, #92]	; (8006368 <FLASH_FlushCaches+0x90>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a16      	ldr	r2, [pc, #88]	; (8006368 <FLASH_FlushCaches+0x90>)
 800630e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006312:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006314:	4b14      	ldr	r3, [pc, #80]	; (8006368 <FLASH_FlushCaches+0x90>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a13      	ldr	r2, [pc, #76]	; (8006368 <FLASH_FlushCaches+0x90>)
 800631a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800631e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d002      	beq.n	800632c <FLASH_FlushCaches+0x54>
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	2b03      	cmp	r3, #3
 800632a:	d111      	bne.n	8006350 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800632c:	4b0e      	ldr	r3, [pc, #56]	; (8006368 <FLASH_FlushCaches+0x90>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0d      	ldr	r2, [pc, #52]	; (8006368 <FLASH_FlushCaches+0x90>)
 8006332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <FLASH_FlushCaches+0x90>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a0a      	ldr	r2, [pc, #40]	; (8006368 <FLASH_FlushCaches+0x90>)
 800633e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006342:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006344:	4b08      	ldr	r3, [pc, #32]	; (8006368 <FLASH_FlushCaches+0x90>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a07      	ldr	r2, [pc, #28]	; (8006368 <FLASH_FlushCaches+0x90>)
 800634a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800634e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006350:	4b04      	ldr	r3, [pc, #16]	; (8006364 <FLASH_FlushCaches+0x8c>)
 8006352:	2200      	movs	r2, #0
 8006354:	771a      	strb	r2, [r3, #28]
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000001c 	.word	0x2000001c
 8006368:	40022000 	.word	0x40022000

0800636c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800637a:	e154      	b.n	8006626 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	2101      	movs	r1, #1
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	fa01 f303 	lsl.w	r3, r1, r3
 8006388:	4013      	ands	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8146 	beq.w	8006620 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	2b01      	cmp	r3, #1
 800639e:	d005      	beq.n	80063ac <HAL_GPIO_Init+0x40>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d130      	bne.n	800640e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	2203      	movs	r2, #3
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	43db      	mvns	r3, r3
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4013      	ands	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063e2:	2201      	movs	r2, #1
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	43db      	mvns	r3, r3
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4013      	ands	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	091b      	lsrs	r3, r3, #4
 80063f8:	f003 0201 	and.w	r2, r3, #1
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	2b03      	cmp	r3, #3
 8006418:	d017      	beq.n	800644a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	2203      	movs	r2, #3
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	43db      	mvns	r3, r3
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4013      	ands	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d123      	bne.n	800649e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	08da      	lsrs	r2, r3, #3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	3208      	adds	r2, #8
 800645e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006462:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	220f      	movs	r2, #15
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	43db      	mvns	r3, r3
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4013      	ands	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	08da      	lsrs	r2, r3, #3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3208      	adds	r2, #8
 8006498:	6939      	ldr	r1, [r7, #16]
 800649a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	2203      	movs	r2, #3
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	43db      	mvns	r3, r3
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4013      	ands	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 0203 	and.w	r2, r3, #3
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80a0 	beq.w	8006620 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064e0:	4b58      	ldr	r3, [pc, #352]	; (8006644 <HAL_GPIO_Init+0x2d8>)
 80064e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e4:	4a57      	ldr	r2, [pc, #348]	; (8006644 <HAL_GPIO_Init+0x2d8>)
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	6613      	str	r3, [r2, #96]	; 0x60
 80064ec:	4b55      	ldr	r3, [pc, #340]	; (8006644 <HAL_GPIO_Init+0x2d8>)
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064f8:	4a53      	ldr	r2, [pc, #332]	; (8006648 <HAL_GPIO_Init+0x2dc>)
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	089b      	lsrs	r3, r3, #2
 80064fe:	3302      	adds	r3, #2
 8006500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006504:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	220f      	movs	r2, #15
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	43db      	mvns	r3, r3
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4013      	ands	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006522:	d019      	beq.n	8006558 <HAL_GPIO_Init+0x1ec>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a49      	ldr	r2, [pc, #292]	; (800664c <HAL_GPIO_Init+0x2e0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <HAL_GPIO_Init+0x1e8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a48      	ldr	r2, [pc, #288]	; (8006650 <HAL_GPIO_Init+0x2e4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00d      	beq.n	8006550 <HAL_GPIO_Init+0x1e4>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a47      	ldr	r2, [pc, #284]	; (8006654 <HAL_GPIO_Init+0x2e8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d007      	beq.n	800654c <HAL_GPIO_Init+0x1e0>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a46      	ldr	r2, [pc, #280]	; (8006658 <HAL_GPIO_Init+0x2ec>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d101      	bne.n	8006548 <HAL_GPIO_Init+0x1dc>
 8006544:	2304      	movs	r3, #4
 8006546:	e008      	b.n	800655a <HAL_GPIO_Init+0x1ee>
 8006548:	2307      	movs	r3, #7
 800654a:	e006      	b.n	800655a <HAL_GPIO_Init+0x1ee>
 800654c:	2303      	movs	r3, #3
 800654e:	e004      	b.n	800655a <HAL_GPIO_Init+0x1ee>
 8006550:	2302      	movs	r3, #2
 8006552:	e002      	b.n	800655a <HAL_GPIO_Init+0x1ee>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <HAL_GPIO_Init+0x1ee>
 8006558:	2300      	movs	r3, #0
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	f002 0203 	and.w	r2, r2, #3
 8006560:	0092      	lsls	r2, r2, #2
 8006562:	4093      	lsls	r3, r2
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800656a:	4937      	ldr	r1, [pc, #220]	; (8006648 <HAL_GPIO_Init+0x2dc>)
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	089b      	lsrs	r3, r3, #2
 8006570:	3302      	adds	r3, #2
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006578:	4b38      	ldr	r3, [pc, #224]	; (800665c <HAL_GPIO_Init+0x2f0>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	43db      	mvns	r3, r3
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	4013      	ands	r3, r2
 8006586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800659c:	4a2f      	ldr	r2, [pc, #188]	; (800665c <HAL_GPIO_Init+0x2f0>)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065a2:	4b2e      	ldr	r3, [pc, #184]	; (800665c <HAL_GPIO_Init+0x2f0>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	43db      	mvns	r3, r3
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4013      	ands	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065c6:	4a25      	ldr	r2, [pc, #148]	; (800665c <HAL_GPIO_Init+0x2f0>)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80065cc:	4b23      	ldr	r3, [pc, #140]	; (800665c <HAL_GPIO_Init+0x2f0>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	43db      	mvns	r3, r3
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4013      	ands	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80065f0:	4a1a      	ldr	r2, [pc, #104]	; (800665c <HAL_GPIO_Init+0x2f0>)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80065f6:	4b19      	ldr	r3, [pc, #100]	; (800665c <HAL_GPIO_Init+0x2f0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	43db      	mvns	r3, r3
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4013      	ands	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800661a:	4a10      	ldr	r2, [pc, #64]	; (800665c <HAL_GPIO_Init+0x2f0>)
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	3301      	adds	r3, #1
 8006624:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	f47f aea3 	bne.w	800637c <HAL_GPIO_Init+0x10>
  }
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	40021000 	.word	0x40021000
 8006648:	40010000 	.word	0x40010000
 800664c:	48000400 	.word	0x48000400
 8006650:	48000800 	.word	0x48000800
 8006654:	48000c00 	.word	0x48000c00
 8006658:	48001000 	.word	0x48001000
 800665c:	40010400 	.word	0x40010400

08006660 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	4013      	ands	r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
 800667c:	e001      	b.n	8006682 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800667e:	2300      	movs	r3, #0
 8006680:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	807b      	strh	r3, [r7, #2]
 800669c:	4613      	mov	r3, r2
 800669e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066a0:	787b      	ldrb	r3, [r7, #1]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066a6:	887a      	ldrh	r2, [r7, #2]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80066ac:	e002      	b.n	80066b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066ae:	887a      	ldrh	r2, [r7, #2]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066d2:	887a      	ldrh	r2, [r7, #2]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4013      	ands	r3, r2
 80066d8:	041a      	lsls	r2, r3, #16
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	43d9      	mvns	r1, r3
 80066de:	887b      	ldrh	r3, [r7, #2]
 80066e0:	400b      	ands	r3, r1
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	619a      	str	r2, [r3, #24]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80066f8:	4b04      	ldr	r3, [pc, #16]	; (800670c <HAL_PWREx_GetVoltageRange+0x18>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006700:	4618      	mov	r0, r3
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40007000 	.word	0x40007000

08006710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671e:	d130      	bne.n	8006782 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006720:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672c:	d038      	beq.n	80067a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800672e:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006736:	4a1e      	ldr	r2, [pc, #120]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800673c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800673e:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2232      	movs	r2, #50	; 0x32
 8006744:	fb02 f303 	mul.w	r3, r2, r3
 8006748:	4a1b      	ldr	r2, [pc, #108]	; (80067b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800674a:	fba2 2303 	umull	r2, r3, r2, r3
 800674e:	0c9b      	lsrs	r3, r3, #18
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006754:	e002      	b.n	800675c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3b01      	subs	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800675c:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006768:	d102      	bne.n	8006770 <HAL_PWREx_ControlVoltageScaling+0x60>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1f2      	bne.n	8006756 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006770:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677c:	d110      	bne.n	80067a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e00f      	b.n	80067a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800678a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678e:	d007      	beq.n	80067a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006798:	4a05      	ldr	r2, [pc, #20]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800679a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800679e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40007000 	.word	0x40007000
 80067b4:	20000010 	.word	0x20000010
 80067b8:	431bde83 	.word	0x431bde83

080067bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e3fe      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ce:	4ba1      	ldr	r3, [pc, #644]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 030c 	and.w	r3, r3, #12
 80067d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067d8:	4b9e      	ldr	r3, [pc, #632]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0310 	and.w	r3, r3, #16
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 80e4 	beq.w	80069b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <HAL_RCC_OscConfig+0x4a>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b0c      	cmp	r3, #12
 80067fa:	f040 808b 	bne.w	8006914 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b01      	cmp	r3, #1
 8006802:	f040 8087 	bne.w	8006914 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006806:	4b93      	ldr	r3, [pc, #588]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_RCC_OscConfig+0x62>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e3d6      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1a      	ldr	r2, [r3, #32]
 8006822:	4b8c      	ldr	r3, [pc, #560]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <HAL_RCC_OscConfig+0x7c>
 800682e:	4b89      	ldr	r3, [pc, #548]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006836:	e005      	b.n	8006844 <HAL_RCC_OscConfig+0x88>
 8006838:	4b86      	ldr	r3, [pc, #536]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800683a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800683e:	091b      	lsrs	r3, r3, #4
 8006840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006844:	4293      	cmp	r3, r2
 8006846:	d223      	bcs.n	8006890 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fdbd 	bl	80073cc <RCC_SetFlashLatencyFromMSIRange>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e3b7      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800685c:	4b7d      	ldr	r3, [pc, #500]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a7c      	ldr	r2, [pc, #496]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006862:	f043 0308 	orr.w	r3, r3, #8
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	4b7a      	ldr	r3, [pc, #488]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	4977      	ldr	r1, [pc, #476]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006876:	4313      	orrs	r3, r2
 8006878:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800687a:	4b76      	ldr	r3, [pc, #472]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	4972      	ldr	r1, [pc, #456]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800688a:	4313      	orrs	r3, r2
 800688c:	604b      	str	r3, [r1, #4]
 800688e:	e025      	b.n	80068dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006890:	4b70      	ldr	r3, [pc, #448]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a6f      	ldr	r2, [pc, #444]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006896:	f043 0308 	orr.w	r3, r3, #8
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	4b6d      	ldr	r3, [pc, #436]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	496a      	ldr	r1, [pc, #424]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068ae:	4b69      	ldr	r3, [pc, #420]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	4965      	ldr	r1, [pc, #404]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d109      	bne.n	80068dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fd7d 	bl	80073cc <RCC_SetFlashLatencyFromMSIRange>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e377      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068dc:	f000 fc80 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 80068e0:	4602      	mov	r2, r0
 80068e2:	4b5c      	ldr	r3, [pc, #368]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	091b      	lsrs	r3, r3, #4
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	495a      	ldr	r1, [pc, #360]	; (8006a58 <HAL_RCC_OscConfig+0x29c>)
 80068ee:	5ccb      	ldrb	r3, [r1, r3]
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	fa22 f303 	lsr.w	r3, r2, r3
 80068f8:	4a58      	ldr	r2, [pc, #352]	; (8006a5c <HAL_RCC_OscConfig+0x2a0>)
 80068fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80068fc:	4b58      	ldr	r3, [pc, #352]	; (8006a60 <HAL_RCC_OscConfig+0x2a4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4618      	mov	r0, r3
 8006902:	f7fd fb47 	bl	8003f94 <HAL_InitTick>
 8006906:	4603      	mov	r3, r0
 8006908:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d052      	beq.n	80069b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	e35b      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d032      	beq.n	8006982 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800691c:	4b4d      	ldr	r3, [pc, #308]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a4c      	ldr	r2, [pc, #304]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006928:	f7fd fd0a 	bl	8004340 <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006930:	f7fd fd06 	bl	8004340 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e344      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006942:	4b44      	ldr	r3, [pc, #272]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0f0      	beq.n	8006930 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800694e:	4b41      	ldr	r3, [pc, #260]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a40      	ldr	r2, [pc, #256]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006954:	f043 0308 	orr.w	r3, r3, #8
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	4b3e      	ldr	r3, [pc, #248]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	493b      	ldr	r1, [pc, #236]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006968:	4313      	orrs	r3, r2
 800696a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800696c:	4b39      	ldr	r3, [pc, #228]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	4936      	ldr	r1, [pc, #216]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 800697c:	4313      	orrs	r3, r2
 800697e:	604b      	str	r3, [r1, #4]
 8006980:	e01a      	b.n	80069b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006982:	4b34      	ldr	r3, [pc, #208]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a33      	ldr	r2, [pc, #204]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800698e:	f7fd fcd7 	bl	8004340 <HAL_GetTick>
 8006992:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006996:	f7fd fcd3 	bl	8004340 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e311      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069a8:	4b2a      	ldr	r3, [pc, #168]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1f0      	bne.n	8006996 <HAL_RCC_OscConfig+0x1da>
 80069b4:	e000      	b.n	80069b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d074      	beq.n	8006aae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b08      	cmp	r3, #8
 80069c8:	d005      	beq.n	80069d6 <HAL_RCC_OscConfig+0x21a>
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	d10e      	bne.n	80069ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d10b      	bne.n	80069ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d6:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d064      	beq.n	8006aac <HAL_RCC_OscConfig+0x2f0>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d160      	bne.n	8006aac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e2ee      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f6:	d106      	bne.n	8006a06 <HAL_RCC_OscConfig+0x24a>
 80069f8:	4b16      	ldr	r3, [pc, #88]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a15      	ldr	r2, [pc, #84]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 80069fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	e01d      	b.n	8006a42 <HAL_RCC_OscConfig+0x286>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a0e:	d10c      	bne.n	8006a2a <HAL_RCC_OscConfig+0x26e>
 8006a10:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a0f      	ldr	r2, [pc, #60]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a0c      	ldr	r2, [pc, #48]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	e00b      	b.n	8006a42 <HAL_RCC_OscConfig+0x286>
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a06      	ldr	r2, [pc, #24]	; (8006a54 <HAL_RCC_OscConfig+0x298>)
 8006a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01c      	beq.n	8006a84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4a:	f7fd fc79 	bl	8004340 <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a50:	e011      	b.n	8006a76 <HAL_RCC_OscConfig+0x2ba>
 8006a52:	bf00      	nop
 8006a54:	40021000 	.word	0x40021000
 8006a58:	08013654 	.word	0x08013654
 8006a5c:	20000010 	.word	0x20000010
 8006a60:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a64:	f7fd fc6c 	bl	8004340 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b64      	cmp	r3, #100	; 0x64
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e2aa      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a76:	4baf      	ldr	r3, [pc, #700]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f0      	beq.n	8006a64 <HAL_RCC_OscConfig+0x2a8>
 8006a82:	e014      	b.n	8006aae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a84:	f7fd fc5c 	bl	8004340 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a8c:	f7fd fc58 	bl	8004340 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e296      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a9e:	4ba5      	ldr	r3, [pc, #660]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1f0      	bne.n	8006a8c <HAL_RCC_OscConfig+0x2d0>
 8006aaa:	e000      	b.n	8006aae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d060      	beq.n	8006b7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d005      	beq.n	8006acc <HAL_RCC_OscConfig+0x310>
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	d119      	bne.n	8006afa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d116      	bne.n	8006afa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006acc:	4b99      	ldr	r3, [pc, #612]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x328>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e273      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae4:	4b93      	ldr	r3, [pc, #588]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	061b      	lsls	r3, r3, #24
 8006af2:	4990      	ldr	r1, [pc, #576]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006af8:	e040      	b.n	8006b7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d023      	beq.n	8006b4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b02:	4b8c      	ldr	r3, [pc, #560]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a8b      	ldr	r2, [pc, #556]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0e:	f7fd fc17 	bl	8004340 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b14:	e008      	b.n	8006b28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b16:	f7fd fc13 	bl	8004340 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e251      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b28:	4b82      	ldr	r3, [pc, #520]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0f0      	beq.n	8006b16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b34:	4b7f      	ldr	r3, [pc, #508]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	497c      	ldr	r1, [pc, #496]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]
 8006b48:	e018      	b.n	8006b7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b4a:	4b7a      	ldr	r3, [pc, #488]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a79      	ldr	r2, [pc, #484]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b56:	f7fd fbf3 	bl	8004340 <HAL_GetTick>
 8006b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b5e:	f7fd fbef 	bl	8004340 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e22d      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b70:	4b70      	ldr	r3, [pc, #448]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f0      	bne.n	8006b5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d03c      	beq.n	8006c02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01c      	beq.n	8006bca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b90:	4b68      	ldr	r3, [pc, #416]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b96:	4a67      	ldr	r2, [pc, #412]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006b98:	f043 0301 	orr.w	r3, r3, #1
 8006b9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba0:	f7fd fbce 	bl	8004340 <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba8:	f7fd fbca 	bl	8004340 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e208      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bba:	4b5e      	ldr	r3, [pc, #376]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0ef      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x3ec>
 8006bc8:	e01b      	b.n	8006c02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bca:	4b5a      	ldr	r3, [pc, #360]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bd0:	4a58      	ldr	r2, [pc, #352]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006bd2:	f023 0301 	bic.w	r3, r3, #1
 8006bd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bda:	f7fd fbb1 	bl	8004340 <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006be0:	e008      	b.n	8006bf4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006be2:	f7fd fbad 	bl	8004340 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e1eb      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bf4:	4b4f      	ldr	r3, [pc, #316]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1ef      	bne.n	8006be2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80a6 	beq.w	8006d5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c10:	2300      	movs	r3, #0
 8006c12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c14:	4b47      	ldr	r3, [pc, #284]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10d      	bne.n	8006c3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c20:	4b44      	ldr	r3, [pc, #272]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	4a43      	ldr	r2, [pc, #268]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8006c2c:	4b41      	ldr	r3, [pc, #260]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c3c:	4b3e      	ldr	r3, [pc, #248]	; (8006d38 <HAL_RCC_OscConfig+0x57c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d118      	bne.n	8006c7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c48:	4b3b      	ldr	r3, [pc, #236]	; (8006d38 <HAL_RCC_OscConfig+0x57c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a3a      	ldr	r2, [pc, #232]	; (8006d38 <HAL_RCC_OscConfig+0x57c>)
 8006c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c54:	f7fd fb74 	bl	8004340 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c5c:	f7fd fb70 	bl	8004340 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e1ae      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c6e:	4b32      	ldr	r3, [pc, #200]	; (8006d38 <HAL_RCC_OscConfig+0x57c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0f0      	beq.n	8006c5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d108      	bne.n	8006c94 <HAL_RCC_OscConfig+0x4d8>
 8006c82:	4b2c      	ldr	r3, [pc, #176]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c88:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c92:	e024      	b.n	8006cde <HAL_RCC_OscConfig+0x522>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b05      	cmp	r3, #5
 8006c9a:	d110      	bne.n	8006cbe <HAL_RCC_OscConfig+0x502>
 8006c9c:	4b25      	ldr	r3, [pc, #148]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	4a24      	ldr	r2, [pc, #144]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006ca4:	f043 0304 	orr.w	r3, r3, #4
 8006ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cac:	4b21      	ldr	r3, [pc, #132]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb2:	4a20      	ldr	r2, [pc, #128]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cb4:	f043 0301 	orr.w	r3, r3, #1
 8006cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cbc:	e00f      	b.n	8006cde <HAL_RCC_OscConfig+0x522>
 8006cbe:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc4:	4a1b      	ldr	r2, [pc, #108]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cc6:	f023 0301 	bic.w	r3, r3, #1
 8006cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cce:	4b19      	ldr	r3, [pc, #100]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd4:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006cd6:	f023 0304 	bic.w	r3, r3, #4
 8006cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d016      	beq.n	8006d14 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce6:	f7fd fb2b 	bl	8004340 <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cec:	e00a      	b.n	8006d04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fd fb27 	bl	8004340 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e163      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d04:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <HAL_RCC_OscConfig+0x578>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0ed      	beq.n	8006cee <HAL_RCC_OscConfig+0x532>
 8006d12:	e01a      	b.n	8006d4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d14:	f7fd fb14 	bl	8004340 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d1a:	e00f      	b.n	8006d3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1c:	f7fd fb10 	bl	8004340 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d906      	bls.n	8006d3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e14c      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
 8006d32:	bf00      	nop
 8006d34:	40021000 	.word	0x40021000
 8006d38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d3c:	4ba5      	ldr	r3, [pc, #660]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e8      	bne.n	8006d1c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d4a:	7ffb      	ldrb	r3, [r7, #31]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d105      	bne.n	8006d5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d50:	4ba0      	ldr	r3, [pc, #640]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d54:	4a9f      	ldr	r2, [pc, #636]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d03c      	beq.n	8006de2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01c      	beq.n	8006daa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d70:	4b98      	ldr	r3, [pc, #608]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d76:	4a97      	ldr	r2, [pc, #604]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006d78:	f043 0301 	orr.w	r3, r3, #1
 8006d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7fd fade 	bl	8004340 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d88:	f7fd fada 	bl	8004340 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e118      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d9a:	4b8e      	ldr	r3, [pc, #568]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0ef      	beq.n	8006d88 <HAL_RCC_OscConfig+0x5cc>
 8006da8:	e01b      	b.n	8006de2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006daa:	4b8a      	ldr	r3, [pc, #552]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006db0:	4a88      	ldr	r2, [pc, #544]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dba:	f7fd fac1 	bl	8004340 <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dc2:	f7fd fabd 	bl	8004340 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e0fb      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006dd4:	4b7f      	ldr	r3, [pc, #508]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1ef      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 80ef 	beq.w	8006fca <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	f040 80c5 	bne.w	8006f80 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006df6:	4b77      	ldr	r3, [pc, #476]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f003 0203 	and.w	r2, r3, #3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d12c      	bne.n	8006e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e14:	3b01      	subs	r3, #1
 8006e16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d123      	bne.n	8006e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d11b      	bne.n	8006e64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d113      	bne.n	8006e64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d109      	bne.n	8006e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	085b      	lsrs	r3, r3, #1
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d067      	beq.n	8006f34 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b0c      	cmp	r3, #12
 8006e68:	d062      	beq.n	8006f30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e6a:	4b5a      	ldr	r3, [pc, #360]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e0a8      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e7a:	4b56      	ldr	r3, [pc, #344]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a55      	ldr	r2, [pc, #340]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e86:	f7fd fa5b 	bl	8004340 <HAL_GetTick>
 8006e8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e8c:	e008      	b.n	8006ea0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e8e:	f7fd fa57 	bl	8004340 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d901      	bls.n	8006ea0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e095      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ea0:	4b4c      	ldr	r3, [pc, #304]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f0      	bne.n	8006e8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eac:	4b49      	ldr	r3, [pc, #292]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	4b49      	ldr	r3, [pc, #292]	; (8006fd8 <HAL_RCC_OscConfig+0x81c>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	0112      	lsls	r2, r2, #4
 8006ec0:	4311      	orrs	r1, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ec6:	0212      	lsls	r2, r2, #8
 8006ec8:	4311      	orrs	r1, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ece:	0852      	lsrs	r2, r2, #1
 8006ed0:	3a01      	subs	r2, #1
 8006ed2:	0552      	lsls	r2, r2, #21
 8006ed4:	4311      	orrs	r1, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006eda:	0852      	lsrs	r2, r2, #1
 8006edc:	3a01      	subs	r2, #1
 8006ede:	0652      	lsls	r2, r2, #25
 8006ee0:	4311      	orrs	r1, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ee6:	06d2      	lsls	r2, r2, #27
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	493a      	ldr	r1, [pc, #232]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ef0:	4b38      	ldr	r3, [pc, #224]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a37      	ldr	r2, [pc, #220]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006efa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006efc:	4b35      	ldr	r3, [pc, #212]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	4a34      	ldr	r2, [pc, #208]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f08:	f7fd fa1a 	bl	8004340 <HAL_GetTick>
 8006f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f0e:	e008      	b.n	8006f22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f10:	f7fd fa16 	bl	8004340 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e054      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f22:	4b2c      	ldr	r3, [pc, #176]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0f0      	beq.n	8006f10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f2e:	e04c      	b.n	8006fca <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e04b      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f34:	4b27      	ldr	r3, [pc, #156]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d144      	bne.n	8006fca <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f40:	4b24      	ldr	r3, [pc, #144]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a23      	ldr	r2, [pc, #140]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f4c:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	4a20      	ldr	r2, [pc, #128]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f58:	f7fd f9f2 	bl	8004340 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f60:	f7fd f9ee 	bl	8004340 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e02c      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f72:	4b18      	ldr	r3, [pc, #96]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0f0      	beq.n	8006f60 <HAL_RCC_OscConfig+0x7a4>
 8006f7e:	e024      	b.n	8006fca <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b0c      	cmp	r3, #12
 8006f84:	d01f      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f86:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a12      	ldr	r2, [pc, #72]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006f8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f92:	f7fd f9d5 	bl	8004340 <HAL_GetTick>
 8006f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f98:	e008      	b.n	8006fac <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f9a:	f7fd f9d1 	bl	8004340 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e00f      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fac:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f0      	bne.n	8006f9a <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006fb8:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	4905      	ldr	r1, [pc, #20]	; (8006fd4 <HAL_RCC_OscConfig+0x818>)
 8006fbe:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <HAL_RCC_OscConfig+0x820>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	60cb      	str	r3, [r1, #12]
 8006fc4:	e001      	b.n	8006fca <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3720      	adds	r7, #32
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	019d808c 	.word	0x019d808c
 8006fdc:	feeefffc 	.word	0xfeeefffc

08006fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0e7      	b.n	80071c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff4:	4b75      	ldr	r3, [pc, #468]	; (80071cc <HAL_RCC_ClockConfig+0x1ec>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d910      	bls.n	8007024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007002:	4b72      	ldr	r3, [pc, #456]	; (80071cc <HAL_RCC_ClockConfig+0x1ec>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f023 0207 	bic.w	r2, r3, #7
 800700a:	4970      	ldr	r1, [pc, #448]	; (80071cc <HAL_RCC_ClockConfig+0x1ec>)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	4313      	orrs	r3, r2
 8007010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007012:	4b6e      	ldr	r3, [pc, #440]	; (80071cc <HAL_RCC_ClockConfig+0x1ec>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d001      	beq.n	8007024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e0cf      	b.n	80071c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d010      	beq.n	8007052 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	4b66      	ldr	r3, [pc, #408]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800703c:	429a      	cmp	r2, r3
 800703e:	d908      	bls.n	8007052 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007040:	4b63      	ldr	r3, [pc, #396]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	4960      	ldr	r1, [pc, #384]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 800704e:	4313      	orrs	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d04c      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b03      	cmp	r3, #3
 8007064:	d107      	bne.n	8007076 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007066:	4b5a      	ldr	r3, [pc, #360]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d121      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e0a6      	b.n	80071c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d107      	bne.n	800708e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800707e:	4b54      	ldr	r3, [pc, #336]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d115      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e09a      	b.n	80071c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d107      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007096:	4b4e      	ldr	r3, [pc, #312]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e08e      	b.n	80071c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070a6:	4b4a      	ldr	r3, [pc, #296]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e086      	b.n	80071c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070b6:	4b46      	ldr	r3, [pc, #280]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f023 0203 	bic.w	r2, r3, #3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	4943      	ldr	r1, [pc, #268]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c8:	f7fd f93a 	bl	8004340 <HAL_GetTick>
 80070cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ce:	e00a      	b.n	80070e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d0:	f7fd f936 	bl	8004340 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	f241 3288 	movw	r2, #5000	; 0x1388
 80070de:	4293      	cmp	r3, r2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e06e      	b.n	80071c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070e6:	4b3a      	ldr	r3, [pc, #232]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 020c 	and.w	r2, r3, #12
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d1eb      	bne.n	80070d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d010      	beq.n	8007126 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	4b31      	ldr	r3, [pc, #196]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007110:	429a      	cmp	r2, r3
 8007112:	d208      	bcs.n	8007126 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007114:	4b2e      	ldr	r3, [pc, #184]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	492b      	ldr	r1, [pc, #172]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007122:	4313      	orrs	r3, r2
 8007124:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007126:	4b29      	ldr	r3, [pc, #164]	; (80071cc <HAL_RCC_ClockConfig+0x1ec>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d210      	bcs.n	8007156 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007134:	4b25      	ldr	r3, [pc, #148]	; (80071cc <HAL_RCC_ClockConfig+0x1ec>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f023 0207 	bic.w	r2, r3, #7
 800713c:	4923      	ldr	r1, [pc, #140]	; (80071cc <HAL_RCC_ClockConfig+0x1ec>)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	4313      	orrs	r3, r2
 8007142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007144:	4b21      	ldr	r3, [pc, #132]	; (80071cc <HAL_RCC_ClockConfig+0x1ec>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d001      	beq.n	8007156 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e036      	b.n	80071c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	2b00      	cmp	r3, #0
 8007160:	d008      	beq.n	8007174 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007162:	4b1b      	ldr	r3, [pc, #108]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	4918      	ldr	r1, [pc, #96]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007170:	4313      	orrs	r3, r2
 8007172:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007180:	4b13      	ldr	r3, [pc, #76]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	00db      	lsls	r3, r3, #3
 800718e:	4910      	ldr	r1, [pc, #64]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 8007190:	4313      	orrs	r3, r2
 8007192:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007194:	f000 f824 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8007198:	4602      	mov	r2, r0
 800719a:	4b0d      	ldr	r3, [pc, #52]	; (80071d0 <HAL_RCC_ClockConfig+0x1f0>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	091b      	lsrs	r3, r3, #4
 80071a0:	f003 030f 	and.w	r3, r3, #15
 80071a4:	490b      	ldr	r1, [pc, #44]	; (80071d4 <HAL_RCC_ClockConfig+0x1f4>)
 80071a6:	5ccb      	ldrb	r3, [r1, r3]
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
 80071b0:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <HAL_RCC_ClockConfig+0x1f8>)
 80071b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <HAL_RCC_ClockConfig+0x1fc>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fc feeb 	bl	8003f94 <HAL_InitTick>
 80071be:	4603      	mov	r3, r0
 80071c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80071c2:	7afb      	ldrb	r3, [r7, #11]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	40022000 	.word	0x40022000
 80071d0:	40021000 	.word	0x40021000
 80071d4:	08013654 	.word	0x08013654
 80071d8:	20000010 	.word	0x20000010
 80071dc:	20000014 	.word	0x20000014

080071e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b089      	sub	sp, #36	; 0x24
 80071e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	2300      	movs	r3, #0
 80071ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ee:	4b3e      	ldr	r3, [pc, #248]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 030c 	and.w	r3, r3, #12
 80071f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071f8:	4b3b      	ldr	r3, [pc, #236]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <HAL_RCC_GetSysClockFreq+0x34>
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b0c      	cmp	r3, #12
 800720c:	d121      	bne.n	8007252 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d11e      	bne.n	8007252 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007214:	4b34      	ldr	r3, [pc, #208]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d107      	bne.n	8007230 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007220:	4b31      	ldr	r3, [pc, #196]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	e005      	b.n	800723c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007230:	4b2d      	ldr	r3, [pc, #180]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	091b      	lsrs	r3, r3, #4
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800723c:	4a2b      	ldr	r2, [pc, #172]	; (80072ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007244:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10d      	bne.n	8007268 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007250:	e00a      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b04      	cmp	r3, #4
 8007256:	d102      	bne.n	800725e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007258:	4b25      	ldr	r3, [pc, #148]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	e004      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d101      	bne.n	8007268 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007264:	4b23      	ldr	r3, [pc, #140]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007266:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b0c      	cmp	r3, #12
 800726c:	d134      	bne.n	80072d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800726e:	4b1e      	ldr	r3, [pc, #120]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d003      	beq.n	8007286 <HAL_RCC_GetSysClockFreq+0xa6>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b03      	cmp	r3, #3
 8007282:	d003      	beq.n	800728c <HAL_RCC_GetSysClockFreq+0xac>
 8007284:	e005      	b.n	8007292 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007286:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007288:	617b      	str	r3, [r7, #20]
      break;
 800728a:	e005      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800728c:	4b19      	ldr	r3, [pc, #100]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800728e:	617b      	str	r3, [r7, #20]
      break;
 8007290:	e002      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	617b      	str	r3, [r7, #20]
      break;
 8007296:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	091b      	lsrs	r3, r3, #4
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	3301      	adds	r3, #1
 80072a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80072a6:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	fb02 f203 	mul.w	r2, r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072be:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	0e5b      	lsrs	r3, r3, #25
 80072c4:	f003 0303 	and.w	r3, r3, #3
 80072c8:	3301      	adds	r3, #1
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80072d8:	69bb      	ldr	r3, [r7, #24]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3724      	adds	r7, #36	; 0x24
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40021000 	.word	0x40021000
 80072ec:	0801366c 	.word	0x0801366c
 80072f0:	00f42400 	.word	0x00f42400
 80072f4:	007a1200 	.word	0x007a1200

080072f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072fc:	4b03      	ldr	r3, [pc, #12]	; (800730c <HAL_RCC_GetHCLKFreq+0x14>)
 80072fe:	681b      	ldr	r3, [r3, #0]
}
 8007300:	4618      	mov	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20000010 	.word	0x20000010

08007310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007314:	f7ff fff0 	bl	80072f8 <HAL_RCC_GetHCLKFreq>
 8007318:	4602      	mov	r2, r0
 800731a:	4b06      	ldr	r3, [pc, #24]	; (8007334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	4904      	ldr	r1, [pc, #16]	; (8007338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007326:	5ccb      	ldrb	r3, [r1, r3]
 8007328:	f003 031f 	and.w	r3, r3, #31
 800732c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007330:	4618      	mov	r0, r3
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40021000 	.word	0x40021000
 8007338:	08013664 	.word	0x08013664

0800733c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007340:	f7ff ffda 	bl	80072f8 <HAL_RCC_GetHCLKFreq>
 8007344:	4602      	mov	r2, r0
 8007346:	4b06      	ldr	r3, [pc, #24]	; (8007360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	0adb      	lsrs	r3, r3, #11
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	4904      	ldr	r1, [pc, #16]	; (8007364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007352:	5ccb      	ldrb	r3, [r1, r3]
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800735c:	4618      	mov	r0, r3
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40021000 	.word	0x40021000
 8007364:	08013664 	.word	0x08013664

08007368 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	220f      	movs	r2, #15
 8007376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007378:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <HAL_RCC_GetClockConfig+0x5c>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f003 0203 	and.w	r2, r3, #3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007384:	4b0f      	ldr	r3, [pc, #60]	; (80073c4 <HAL_RCC_GetClockConfig+0x5c>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007390:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <HAL_RCC_GetClockConfig+0x5c>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800739c:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <HAL_RCC_GetClockConfig+0x5c>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	08db      	lsrs	r3, r3, #3
 80073a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80073aa:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <HAL_RCC_GetClockConfig+0x60>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0207 	and.w	r2, r3, #7
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	601a      	str	r2, [r3, #0]
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40021000 	.word	0x40021000
 80073c8:	40022000 	.word	0x40022000

080073cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80073d4:	2300      	movs	r3, #0
 80073d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80073d8:	4b2a      	ldr	r3, [pc, #168]	; (8007484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80073e4:	f7ff f986 	bl	80066f4 <HAL_PWREx_GetVoltageRange>
 80073e8:	6178      	str	r0, [r7, #20]
 80073ea:	e014      	b.n	8007416 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80073ec:	4b25      	ldr	r3, [pc, #148]	; (8007484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f0:	4a24      	ldr	r2, [pc, #144]	; (8007484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f6:	6593      	str	r3, [r2, #88]	; 0x58
 80073f8:	4b22      	ldr	r3, [pc, #136]	; (8007484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007404:	f7ff f976 	bl	80066f4 <HAL_PWREx_GetVoltageRange>
 8007408:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800740a:	4b1e      	ldr	r3, [pc, #120]	; (8007484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800740c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740e:	4a1d      	ldr	r2, [pc, #116]	; (8007484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007414:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800741c:	d10b      	bne.n	8007436 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b80      	cmp	r3, #128	; 0x80
 8007422:	d919      	bls.n	8007458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2ba0      	cmp	r3, #160	; 0xa0
 8007428:	d902      	bls.n	8007430 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800742a:	2302      	movs	r3, #2
 800742c:	613b      	str	r3, [r7, #16]
 800742e:	e013      	b.n	8007458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007430:	2301      	movs	r3, #1
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	e010      	b.n	8007458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d902      	bls.n	8007442 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800743c:	2303      	movs	r3, #3
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	e00a      	b.n	8007458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b80      	cmp	r3, #128	; 0x80
 8007446:	d102      	bne.n	800744e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007448:	2302      	movs	r3, #2
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	e004      	b.n	8007458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b70      	cmp	r3, #112	; 0x70
 8007452:	d101      	bne.n	8007458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007454:	2301      	movs	r3, #1
 8007456:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007458:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f023 0207 	bic.w	r2, r3, #7
 8007460:	4909      	ldr	r1, [pc, #36]	; (8007488 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	4313      	orrs	r3, r2
 8007466:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007468:	4b07      	ldr	r3, [pc, #28]	; (8007488 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	429a      	cmp	r2, r3
 8007474:	d001      	beq.n	800747a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	40021000 	.word	0x40021000
 8007488:	40022000 	.word	0x40022000

0800748c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007494:	2300      	movs	r3, #0
 8007496:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007498:	2300      	movs	r3, #0
 800749a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d031      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074b0:	d01a      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80074b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074b6:	d814      	bhi.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d009      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80074bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074c0:	d10f      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80074c2:	4b5d      	ldr	r3, [pc, #372]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	4a5c      	ldr	r2, [pc, #368]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074ce:	e00c      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f9f0 	bl	80078bc <RCCEx_PLLSAI1_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074e0:	e003      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	74fb      	strb	r3, [r7, #19]
      break;
 80074e6:	e000      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80074e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ea:	7cfb      	ldrb	r3, [r7, #19]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10b      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074f0:	4b51      	ldr	r3, [pc, #324]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80074f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fe:	494e      	ldr	r1, [pc, #312]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007500:	4313      	orrs	r3, r2
 8007502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007506:	e001      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007508:	7cfb      	ldrb	r3, [r7, #19]
 800750a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 809e 	beq.w	8007656 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800751a:	2300      	movs	r3, #0
 800751c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800751e:	4b46      	ldr	r3, [pc, #280]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800752a:	2301      	movs	r3, #1
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800752e:	2300      	movs	r3, #0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00d      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007534:	4b40      	ldr	r3, [pc, #256]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007538:	4a3f      	ldr	r2, [pc, #252]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800753a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800753e:	6593      	str	r3, [r2, #88]	; 0x58
 8007540:	4b3d      	ldr	r3, [pc, #244]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800754c:	2301      	movs	r3, #1
 800754e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007550:	4b3a      	ldr	r3, [pc, #232]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a39      	ldr	r2, [pc, #228]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800755c:	f7fc fef0 	bl	8004340 <HAL_GetTick>
 8007560:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007562:	e009      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007564:	f7fc feec 	bl	8004340 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d902      	bls.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	74fb      	strb	r3, [r7, #19]
        break;
 8007576:	e005      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007578:	4b30      	ldr	r3, [pc, #192]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0ef      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007584:	7cfb      	ldrb	r3, [r7, #19]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d15a      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800758a:	4b2b      	ldr	r3, [pc, #172]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800758c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007594:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d01e      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d019      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075a6:	4b24      	ldr	r3, [pc, #144]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075b2:	4b21      	ldr	r3, [pc, #132]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b8:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075c2:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c8:	4a1b      	ldr	r2, [pc, #108]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075d2:	4a19      	ldr	r2, [pc, #100]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d016      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e4:	f7fc feac 	bl	8004340 <HAL_GetTick>
 80075e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ea:	e00b      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ec:	f7fc fea8 	bl	8004340 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d902      	bls.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	74fb      	strb	r3, [r7, #19]
            break;
 8007602:	e006      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007604:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0ec      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007612:	7cfb      	ldrb	r3, [r7, #19]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10b      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007618:	4b07      	ldr	r3, [pc, #28]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007626:	4904      	ldr	r1, [pc, #16]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007628:	4313      	orrs	r3, r2
 800762a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800762e:	e009      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007630:	7cfb      	ldrb	r3, [r7, #19]
 8007632:	74bb      	strb	r3, [r7, #18]
 8007634:	e006      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007636:	bf00      	nop
 8007638:	40021000 	.word	0x40021000
 800763c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007640:	7cfb      	ldrb	r3, [r7, #19]
 8007642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007644:	7c7b      	ldrb	r3, [r7, #17]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d105      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800764a:	4b9b      	ldr	r3, [pc, #620]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	4a9a      	ldr	r2, [pc, #616]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007654:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007662:	4b95      	ldr	r3, [pc, #596]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007668:	f023 0203 	bic.w	r2, r3, #3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	4991      	ldr	r1, [pc, #580]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007684:	4b8c      	ldr	r3, [pc, #560]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800768a:	f023 020c 	bic.w	r2, r3, #12
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	4989      	ldr	r1, [pc, #548]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076a6:	4b84      	ldr	r3, [pc, #528]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b4:	4980      	ldr	r1, [pc, #512]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076c8:	4b7b      	ldr	r3, [pc, #492]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d6:	4978      	ldr	r1, [pc, #480]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076ea:	4b73      	ldr	r3, [pc, #460]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f8:	496f      	ldr	r1, [pc, #444]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800770c:	4b6a      	ldr	r3, [pc, #424]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	4967      	ldr	r1, [pc, #412]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800772e:	4b62      	ldr	r3, [pc, #392]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007734:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	495e      	ldr	r1, [pc, #376]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007750:	4b59      	ldr	r3, [pc, #356]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007756:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775e:	4956      	ldr	r1, [pc, #344]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007760:	4313      	orrs	r3, r2
 8007762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007772:	4b51      	ldr	r3, [pc, #324]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	494d      	ldr	r1, [pc, #308]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007782:	4313      	orrs	r3, r2
 8007784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d028      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007794:	4b48      	ldr	r3, [pc, #288]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a2:	4945      	ldr	r1, [pc, #276]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b2:	d106      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b4:	4b40      	ldr	r3, [pc, #256]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4a3f      	ldr	r2, [pc, #252]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077be:	60d3      	str	r3, [r2, #12]
 80077c0:	e011      	b.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077ca:	d10c      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	2101      	movs	r1, #1
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 f872 	bl	80078bc <RCCEx_PLLSAI1_Config>
 80077d8:	4603      	mov	r3, r0
 80077da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077dc:	7cfb      	ldrb	r3, [r7, #19]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80077e2:	7cfb      	ldrb	r3, [r7, #19]
 80077e4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d028      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077f2:	4b31      	ldr	r3, [pc, #196]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007800:	492d      	ldr	r1, [pc, #180]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007802:	4313      	orrs	r3, r2
 8007804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007810:	d106      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007812:	4b29      	ldr	r3, [pc, #164]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	4a28      	ldr	r2, [pc, #160]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800781c:	60d3      	str	r3, [r2, #12]
 800781e:	e011      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007824:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007828:	d10c      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3304      	adds	r3, #4
 800782e:	2101      	movs	r1, #1
 8007830:	4618      	mov	r0, r3
 8007832:	f000 f843 	bl	80078bc <RCCEx_PLLSAI1_Config>
 8007836:	4603      	mov	r3, r0
 8007838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800783a:	7cfb      	ldrb	r3, [r7, #19]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007840:	7cfb      	ldrb	r3, [r7, #19]
 8007842:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01c      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007850:	4b19      	ldr	r3, [pc, #100]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007856:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785e:	4916      	ldr	r1, [pc, #88]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800786e:	d10c      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3304      	adds	r3, #4
 8007874:	2102      	movs	r1, #2
 8007876:	4618      	mov	r0, r3
 8007878:	f000 f820 	bl	80078bc <RCCEx_PLLSAI1_Config>
 800787c:	4603      	mov	r3, r0
 800787e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007880:	7cfb      	ldrb	r3, [r7, #19]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007886:	7cfb      	ldrb	r3, [r7, #19]
 8007888:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a4:	4904      	ldr	r1, [pc, #16]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80078ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	40021000 	.word	0x40021000

080078bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80078ca:	4b74      	ldr	r3, [pc, #464]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d018      	beq.n	8007908 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80078d6:	4b71      	ldr	r3, [pc, #452]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	f003 0203 	and.w	r2, r3, #3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d10d      	bne.n	8007902 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
       ||
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80078ee:	4b6b      	ldr	r3, [pc, #428]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	091b      	lsrs	r3, r3, #4
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
       ||
 80078fe:	429a      	cmp	r2, r3
 8007900:	d047      	beq.n	8007992 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	73fb      	strb	r3, [r7, #15]
 8007906:	e044      	b.n	8007992 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b03      	cmp	r3, #3
 800790e:	d018      	beq.n	8007942 <RCCEx_PLLSAI1_Config+0x86>
 8007910:	2b03      	cmp	r3, #3
 8007912:	d825      	bhi.n	8007960 <RCCEx_PLLSAI1_Config+0xa4>
 8007914:	2b01      	cmp	r3, #1
 8007916:	d002      	beq.n	800791e <RCCEx_PLLSAI1_Config+0x62>
 8007918:	2b02      	cmp	r3, #2
 800791a:	d009      	beq.n	8007930 <RCCEx_PLLSAI1_Config+0x74>
 800791c:	e020      	b.n	8007960 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800791e:	4b5f      	ldr	r3, [pc, #380]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d11d      	bne.n	8007966 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800792e:	e01a      	b.n	8007966 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007930:	4b5a      	ldr	r3, [pc, #360]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007938:	2b00      	cmp	r3, #0
 800793a:	d116      	bne.n	800796a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007940:	e013      	b.n	800796a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007942:	4b56      	ldr	r3, [pc, #344]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10f      	bne.n	800796e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800794e:	4b53      	ldr	r3, [pc, #332]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800795e:	e006      	b.n	800796e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
      break;
 8007964:	e004      	b.n	8007970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007966:	bf00      	nop
 8007968:	e002      	b.n	8007970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800796e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10d      	bne.n	8007992 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007976:	4b49      	ldr	r3, [pc, #292]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6819      	ldr	r1, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	3b01      	subs	r3, #1
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	430b      	orrs	r3, r1
 800798c:	4943      	ldr	r1, [pc, #268]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 800798e:	4313      	orrs	r3, r2
 8007990:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d17c      	bne.n	8007a92 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007998:	4b40      	ldr	r3, [pc, #256]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a3f      	ldr	r2, [pc, #252]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 800799e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079a4:	f7fc fccc 	bl	8004340 <HAL_GetTick>
 80079a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80079aa:	e009      	b.n	80079c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079ac:	f7fc fcc8 	bl	8004340 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d902      	bls.n	80079c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	73fb      	strb	r3, [r7, #15]
        break;
 80079be:	e005      	b.n	80079cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80079c0:	4b36      	ldr	r3, [pc, #216]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1ef      	bne.n	80079ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d15f      	bne.n	8007a92 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d110      	bne.n	80079fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80079d8:	4b30      	ldr	r3, [pc, #192]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80079e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6892      	ldr	r2, [r2, #8]
 80079e8:	0211      	lsls	r1, r2, #8
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	68d2      	ldr	r2, [r2, #12]
 80079ee:	06d2      	lsls	r2, r2, #27
 80079f0:	430a      	orrs	r2, r1
 80079f2:	492a      	ldr	r1, [pc, #168]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	610b      	str	r3, [r1, #16]
 80079f8:	e027      	b.n	8007a4a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d112      	bne.n	8007a26 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a00:	4b26      	ldr	r3, [pc, #152]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6892      	ldr	r2, [r2, #8]
 8007a10:	0211      	lsls	r1, r2, #8
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6912      	ldr	r2, [r2, #16]
 8007a16:	0852      	lsrs	r2, r2, #1
 8007a18:	3a01      	subs	r2, #1
 8007a1a:	0552      	lsls	r2, r2, #21
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	491f      	ldr	r1, [pc, #124]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	610b      	str	r3, [r1, #16]
 8007a24:	e011      	b.n	8007a4a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a26:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007a2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6892      	ldr	r2, [r2, #8]
 8007a36:	0211      	lsls	r1, r2, #8
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6952      	ldr	r2, [r2, #20]
 8007a3c:	0852      	lsrs	r2, r2, #1
 8007a3e:	3a01      	subs	r2, #1
 8007a40:	0652      	lsls	r2, r2, #25
 8007a42:	430a      	orrs	r2, r1
 8007a44:	4915      	ldr	r1, [pc, #84]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007a4a:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a13      	ldr	r2, [pc, #76]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a56:	f7fc fc73 	bl	8004340 <HAL_GetTick>
 8007a5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a5c:	e009      	b.n	8007a72 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a5e:	f7fc fc6f 	bl	8004340 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d902      	bls.n	8007a72 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	73fb      	strb	r3, [r7, #15]
          break;
 8007a70:	e005      	b.n	8007a7e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a72:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0ef      	beq.n	8007a5e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a86:	691a      	ldr	r2, [r3, #16]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	4903      	ldr	r1, [pc, #12]	; (8007a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40021000 	.word	0x40021000

08007aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e049      	b.n	8007b46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d106      	bne.n	8007acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fc f91a 	bl	8003d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4619      	mov	r1, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	f000 fca4 	bl	800842c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d001      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e03b      	b.n	8007be0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0201 	orr.w	r2, r2, #1
 8007b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a19      	ldr	r2, [pc, #100]	; (8007bec <HAL_TIM_Base_Start_IT+0x9c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d009      	beq.n	8007b9e <HAL_TIM_Base_Start_IT+0x4e>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b92:	d004      	beq.n	8007b9e <HAL_TIM_Base_Start_IT+0x4e>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <HAL_TIM_Base_Start_IT+0xa0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d115      	bne.n	8007bca <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	4b13      	ldr	r3, [pc, #76]	; (8007bf4 <HAL_TIM_Base_Start_IT+0xa4>)
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b06      	cmp	r3, #6
 8007bae:	d015      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x8c>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb6:	d011      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0201 	orr.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc8:	e008      	b.n	8007bdc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0201 	orr.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	e000      	b.n	8007bde <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	40012c00 	.word	0x40012c00
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	00010007 	.word	0x00010007

08007bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e049      	b.n	8007c9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7fc f850 	bl	8003cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f000 fbf8 	bl	800842c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d109      	bne.n	8007ccc <HAL_TIM_PWM_Start+0x24>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	bf14      	ite	ne
 8007cc4:	2301      	movne	r3, #1
 8007cc6:	2300      	moveq	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	e03c      	b.n	8007d46 <HAL_TIM_PWM_Start+0x9e>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d109      	bne.n	8007ce6 <HAL_TIM_PWM_Start+0x3e>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	bf14      	ite	ne
 8007cde:	2301      	movne	r3, #1
 8007ce0:	2300      	moveq	r3, #0
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	e02f      	b.n	8007d46 <HAL_TIM_PWM_Start+0x9e>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	d109      	bne.n	8007d00 <HAL_TIM_PWM_Start+0x58>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	bf14      	ite	ne
 8007cf8:	2301      	movne	r3, #1
 8007cfa:	2300      	moveq	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	e022      	b.n	8007d46 <HAL_TIM_PWM_Start+0x9e>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b0c      	cmp	r3, #12
 8007d04:	d109      	bne.n	8007d1a <HAL_TIM_PWM_Start+0x72>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	bf14      	ite	ne
 8007d12:	2301      	movne	r3, #1
 8007d14:	2300      	moveq	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	e015      	b.n	8007d46 <HAL_TIM_PWM_Start+0x9e>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b10      	cmp	r3, #16
 8007d1e:	d109      	bne.n	8007d34 <HAL_TIM_PWM_Start+0x8c>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	bf14      	ite	ne
 8007d2c:	2301      	movne	r3, #1
 8007d2e:	2300      	moveq	r3, #0
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	e008      	b.n	8007d46 <HAL_TIM_PWM_Start+0x9e>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	bf14      	ite	ne
 8007d40:	2301      	movne	r3, #1
 8007d42:	2300      	moveq	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e07e      	b.n	8007e4c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <HAL_TIM_PWM_Start+0xb6>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d5c:	e023      	b.n	8007da6 <HAL_TIM_PWM_Start+0xfe>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d104      	bne.n	8007d6e <HAL_TIM_PWM_Start+0xc6>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d6c:	e01b      	b.n	8007da6 <HAL_TIM_PWM_Start+0xfe>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d104      	bne.n	8007d7e <HAL_TIM_PWM_Start+0xd6>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d7c:	e013      	b.n	8007da6 <HAL_TIM_PWM_Start+0xfe>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b0c      	cmp	r3, #12
 8007d82:	d104      	bne.n	8007d8e <HAL_TIM_PWM_Start+0xe6>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d8c:	e00b      	b.n	8007da6 <HAL_TIM_PWM_Start+0xfe>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b10      	cmp	r3, #16
 8007d92:	d104      	bne.n	8007d9e <HAL_TIM_PWM_Start+0xf6>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d9c:	e003      	b.n	8007da6 <HAL_TIM_PWM_Start+0xfe>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2201      	movs	r2, #1
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fe1e 	bl	80089f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a26      	ldr	r2, [pc, #152]	; (8007e54 <HAL_TIM_PWM_Start+0x1ac>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d009      	beq.n	8007dd2 <HAL_TIM_PWM_Start+0x12a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a25      	ldr	r2, [pc, #148]	; (8007e58 <HAL_TIM_PWM_Start+0x1b0>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d004      	beq.n	8007dd2 <HAL_TIM_PWM_Start+0x12a>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a23      	ldr	r2, [pc, #140]	; (8007e5c <HAL_TIM_PWM_Start+0x1b4>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d101      	bne.n	8007dd6 <HAL_TIM_PWM_Start+0x12e>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e000      	b.n	8007dd8 <HAL_TIM_PWM_Start+0x130>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d007      	beq.n	8007dec <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a18      	ldr	r2, [pc, #96]	; (8007e54 <HAL_TIM_PWM_Start+0x1ac>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d009      	beq.n	8007e0a <HAL_TIM_PWM_Start+0x162>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfe:	d004      	beq.n	8007e0a <HAL_TIM_PWM_Start+0x162>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a14      	ldr	r2, [pc, #80]	; (8007e58 <HAL_TIM_PWM_Start+0x1b0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d115      	bne.n	8007e36 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <HAL_TIM_PWM_Start+0x1b8>)
 8007e12:	4013      	ands	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b06      	cmp	r3, #6
 8007e1a:	d015      	beq.n	8007e48 <HAL_TIM_PWM_Start+0x1a0>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e22:	d011      	beq.n	8007e48 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f042 0201 	orr.w	r2, r2, #1
 8007e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e34:	e008      	b.n	8007e48 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f042 0201 	orr.w	r2, r2, #1
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	e000      	b.n	8007e4a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40012c00 	.word	0x40012c00
 8007e58:	40014000 	.word	0x40014000
 8007e5c:	40014400 	.word	0x40014400
 8007e60:	00010007 	.word	0x00010007

08007e64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2200      	movs	r2, #0
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fdba 	bl	80089f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a39      	ldr	r2, [pc, #228]	; (8007f68 <HAL_TIM_PWM_Stop+0x104>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d009      	beq.n	8007e9a <HAL_TIM_PWM_Stop+0x36>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a38      	ldr	r2, [pc, #224]	; (8007f6c <HAL_TIM_PWM_Stop+0x108>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d004      	beq.n	8007e9a <HAL_TIM_PWM_Stop+0x36>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a36      	ldr	r2, [pc, #216]	; (8007f70 <HAL_TIM_PWM_Stop+0x10c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d101      	bne.n	8007e9e <HAL_TIM_PWM_Stop+0x3a>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <HAL_TIM_PWM_Stop+0x3c>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d017      	beq.n	8007ed4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6a1a      	ldr	r2, [r3, #32]
 8007eaa:	f241 1311 	movw	r3, #4369	; 0x1111
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10f      	bne.n	8007ed4 <HAL_TIM_PWM_Stop+0x70>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6a1a      	ldr	r2, [r3, #32]
 8007eba:	f240 4344 	movw	r3, #1092	; 0x444
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d107      	bne.n	8007ed4 <HAL_TIM_PWM_Stop+0x70>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ed2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6a1a      	ldr	r2, [r3, #32]
 8007eda:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10f      	bne.n	8007f04 <HAL_TIM_PWM_Stop+0xa0>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6a1a      	ldr	r2, [r3, #32]
 8007eea:	f240 4344 	movw	r3, #1092	; 0x444
 8007eee:	4013      	ands	r3, r2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d107      	bne.n	8007f04 <HAL_TIM_PWM_Stop+0xa0>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0201 	bic.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d104      	bne.n	8007f14 <HAL_TIM_PWM_Stop+0xb0>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f12:	e023      	b.n	8007f5c <HAL_TIM_PWM_Stop+0xf8>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d104      	bne.n	8007f24 <HAL_TIM_PWM_Stop+0xc0>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f22:	e01b      	b.n	8007f5c <HAL_TIM_PWM_Stop+0xf8>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b08      	cmp	r3, #8
 8007f28:	d104      	bne.n	8007f34 <HAL_TIM_PWM_Stop+0xd0>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f32:	e013      	b.n	8007f5c <HAL_TIM_PWM_Stop+0xf8>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b0c      	cmp	r3, #12
 8007f38:	d104      	bne.n	8007f44 <HAL_TIM_PWM_Stop+0xe0>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f42:	e00b      	b.n	8007f5c <HAL_TIM_PWM_Stop+0xf8>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2b10      	cmp	r3, #16
 8007f48:	d104      	bne.n	8007f54 <HAL_TIM_PWM_Stop+0xf0>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f52:	e003      	b.n	8007f5c <HAL_TIM_PWM_Stop+0xf8>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	40012c00 	.word	0x40012c00
 8007f6c:	40014000 	.word	0x40014000
 8007f70:	40014400 	.word	0x40014400

08007f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d122      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d11b      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0202 	mvn.w	r2, #2
 8007fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa1a 	bl	80083f0 <HAL_TIM_IC_CaptureCallback>
 8007fbc:	e005      	b.n	8007fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa0c 	bl	80083dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fa1d 	bl	8008404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d122      	bne.n	8008024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d11b      	bne.n	8008024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0204 	mvn.w	r2, #4
 8007ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f9f0 	bl	80083f0 <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f9e2 	bl	80083dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f9f3 	bl	8008404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 0308 	and.w	r3, r3, #8
 800802e:	2b08      	cmp	r3, #8
 8008030:	d122      	bne.n	8008078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b08      	cmp	r3, #8
 800803e:	d11b      	bne.n	8008078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0208 	mvn.w	r2, #8
 8008048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2204      	movs	r2, #4
 800804e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	f003 0303 	and.w	r3, r3, #3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f9c6 	bl	80083f0 <HAL_TIM_IC_CaptureCallback>
 8008064:	e005      	b.n	8008072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f9b8 	bl	80083dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f9c9 	bl	8008404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0310 	and.w	r3, r3, #16
 8008082:	2b10      	cmp	r3, #16
 8008084:	d122      	bne.n	80080cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f003 0310 	and.w	r3, r3, #16
 8008090:	2b10      	cmp	r3, #16
 8008092:	d11b      	bne.n	80080cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0210 	mvn.w	r2, #16
 800809c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2208      	movs	r2, #8
 80080a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f99c 	bl	80083f0 <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f98e 	bl	80083dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f99f 	bl	8008404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d10e      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d107      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0201 	mvn.w	r2, #1
 80080f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7fb fd08 	bl	8003b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	d10e      	bne.n	8008124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008110:	2b80      	cmp	r3, #128	; 0x80
 8008112:	d107      	bne.n	8008124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800811c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fd74 	bl	8008c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008132:	d10e      	bne.n	8008152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813e:	2b80      	cmp	r3, #128	; 0x80
 8008140:	d107      	bne.n	8008152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800814a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fd67 	bl	8008c20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815c:	2b40      	cmp	r3, #64	; 0x40
 800815e:	d10e      	bne.n	800817e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816a:	2b40      	cmp	r3, #64	; 0x40
 800816c:	d107      	bne.n	800817e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f94d 	bl	8008418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b20      	cmp	r3, #32
 800818a:	d10e      	bne.n	80081aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b20      	cmp	r3, #32
 8008198:	d107      	bne.n	80081aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f06f 0220 	mvn.w	r2, #32
 80081a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fd27 	bl	8008bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081ce:	2302      	movs	r3, #2
 80081d0:	e0ff      	b.n	80083d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b14      	cmp	r3, #20
 80081de:	f200 80f0 	bhi.w	80083c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80081e2:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	0800823d 	.word	0x0800823d
 80081ec:	080083c3 	.word	0x080083c3
 80081f0:	080083c3 	.word	0x080083c3
 80081f4:	080083c3 	.word	0x080083c3
 80081f8:	0800827d 	.word	0x0800827d
 80081fc:	080083c3 	.word	0x080083c3
 8008200:	080083c3 	.word	0x080083c3
 8008204:	080083c3 	.word	0x080083c3
 8008208:	080082bf 	.word	0x080082bf
 800820c:	080083c3 	.word	0x080083c3
 8008210:	080083c3 	.word	0x080083c3
 8008214:	080083c3 	.word	0x080083c3
 8008218:	080082ff 	.word	0x080082ff
 800821c:	080083c3 	.word	0x080083c3
 8008220:	080083c3 	.word	0x080083c3
 8008224:	080083c3 	.word	0x080083c3
 8008228:	08008341 	.word	0x08008341
 800822c:	080083c3 	.word	0x080083c3
 8008230:	080083c3 	.word	0x080083c3
 8008234:	080083c3 	.word	0x080083c3
 8008238:	08008381 	.word	0x08008381
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	4618      	mov	r0, r3
 8008244:	f000 f956 	bl	80084f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0208 	orr.w	r2, r2, #8
 8008256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0204 	bic.w	r2, r2, #4
 8008266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6999      	ldr	r1, [r3, #24]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	691a      	ldr	r2, [r3, #16]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	619a      	str	r2, [r3, #24]
      break;
 800827a:	e0a5      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68b9      	ldr	r1, [r7, #8]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 f9b2 	bl	80085ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6999      	ldr	r1, [r3, #24]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	021a      	lsls	r2, r3, #8
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	619a      	str	r2, [r3, #24]
      break;
 80082bc:	e084      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fa0b 	bl	80086e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69da      	ldr	r2, [r3, #28]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0208 	orr.w	r2, r2, #8
 80082d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69da      	ldr	r2, [r3, #28]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0204 	bic.w	r2, r2, #4
 80082e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69d9      	ldr	r1, [r3, #28]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	691a      	ldr	r2, [r3, #16]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	61da      	str	r2, [r3, #28]
      break;
 80082fc:	e064      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68b9      	ldr	r1, [r7, #8]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 fa63 	bl	80087d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69da      	ldr	r2, [r3, #28]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69da      	ldr	r2, [r3, #28]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69d9      	ldr	r1, [r3, #28]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	021a      	lsls	r2, r3, #8
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	61da      	str	r2, [r3, #28]
      break;
 800833e:	e043      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 faa0 	bl	800888c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0208 	orr.w	r2, r2, #8
 800835a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0204 	bic.w	r2, r2, #4
 800836a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	691a      	ldr	r2, [r3, #16]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800837e:	e023      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68b9      	ldr	r1, [r7, #8]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fad8 	bl	800893c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800839a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	021a      	lsls	r2, r3, #8
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	430a      	orrs	r2, r1
 80083be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083c0:	e002      	b.n	80083c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	75fb      	strb	r3, [r7, #23]
      break;
 80083c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop

080083dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a2a      	ldr	r2, [pc, #168]	; (80084e8 <TIM_Base_SetConfig+0xbc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d003      	beq.n	800844c <TIM_Base_SetConfig+0x20>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844a:	d108      	bne.n	800845e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a21      	ldr	r2, [pc, #132]	; (80084e8 <TIM_Base_SetConfig+0xbc>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00b      	beq.n	800847e <TIM_Base_SetConfig+0x52>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846c:	d007      	beq.n	800847e <TIM_Base_SetConfig+0x52>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a1e      	ldr	r2, [pc, #120]	; (80084ec <TIM_Base_SetConfig+0xc0>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d003      	beq.n	800847e <TIM_Base_SetConfig+0x52>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a1d      	ldr	r2, [pc, #116]	; (80084f0 <TIM_Base_SetConfig+0xc4>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d108      	bne.n	8008490 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4313      	orrs	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a0c      	ldr	r2, [pc, #48]	; (80084e8 <TIM_Base_SetConfig+0xbc>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d007      	beq.n	80084cc <TIM_Base_SetConfig+0xa0>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a0b      	ldr	r2, [pc, #44]	; (80084ec <TIM_Base_SetConfig+0xc0>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d003      	beq.n	80084cc <TIM_Base_SetConfig+0xa0>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a0a      	ldr	r2, [pc, #40]	; (80084f0 <TIM_Base_SetConfig+0xc4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d103      	bne.n	80084d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	691a      	ldr	r2, [r3, #16]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	615a      	str	r2, [r3, #20]
}
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40012c00 	.word	0x40012c00
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400

080084f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f023 0201 	bic.w	r2, r3, #1
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f023 0302 	bic.w	r3, r3, #2
 8008540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a24      	ldr	r2, [pc, #144]	; (80085e0 <TIM_OC1_SetConfig+0xec>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d007      	beq.n	8008564 <TIM_OC1_SetConfig+0x70>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a23      	ldr	r2, [pc, #140]	; (80085e4 <TIM_OC1_SetConfig+0xf0>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d003      	beq.n	8008564 <TIM_OC1_SetConfig+0x70>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a22      	ldr	r2, [pc, #136]	; (80085e8 <TIM_OC1_SetConfig+0xf4>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d10c      	bne.n	800857e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f023 0308 	bic.w	r3, r3, #8
 800856a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	4313      	orrs	r3, r2
 8008574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f023 0304 	bic.w	r3, r3, #4
 800857c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a17      	ldr	r2, [pc, #92]	; (80085e0 <TIM_OC1_SetConfig+0xec>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d007      	beq.n	8008596 <TIM_OC1_SetConfig+0xa2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a16      	ldr	r2, [pc, #88]	; (80085e4 <TIM_OC1_SetConfig+0xf0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d003      	beq.n	8008596 <TIM_OC1_SetConfig+0xa2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a15      	ldr	r2, [pc, #84]	; (80085e8 <TIM_OC1_SetConfig+0xf4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d111      	bne.n	80085ba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800859c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	621a      	str	r2, [r3, #32]
}
 80085d4:	bf00      	nop
 80085d6:	371c      	adds	r7, #28
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40014000 	.word	0x40014000
 80085e8:	40014400 	.word	0x40014400

080085ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	f023 0210 	bic.w	r2, r3, #16
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800861a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f023 0320 	bic.w	r3, r3, #32
 800863a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4313      	orrs	r3, r2
 8008646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a22      	ldr	r2, [pc, #136]	; (80086d4 <TIM_OC2_SetConfig+0xe8>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d10d      	bne.n	800866c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	011b      	lsls	r3, r3, #4
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800866a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a19      	ldr	r2, [pc, #100]	; (80086d4 <TIM_OC2_SetConfig+0xe8>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d007      	beq.n	8008684 <TIM_OC2_SetConfig+0x98>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a18      	ldr	r2, [pc, #96]	; (80086d8 <TIM_OC2_SetConfig+0xec>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d003      	beq.n	8008684 <TIM_OC2_SetConfig+0x98>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a17      	ldr	r2, [pc, #92]	; (80086dc <TIM_OC2_SetConfig+0xf0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d113      	bne.n	80086ac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800868a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	621a      	str	r2, [r3, #32]
}
 80086c6:	bf00      	nop
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	40014000 	.word	0x40014000
 80086dc:	40014400 	.word	0x40014400

080086e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800870e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800872c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a21      	ldr	r2, [pc, #132]	; (80087c4 <TIM_OC3_SetConfig+0xe4>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d10d      	bne.n	800875e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800875c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a18      	ldr	r2, [pc, #96]	; (80087c4 <TIM_OC3_SetConfig+0xe4>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d007      	beq.n	8008776 <TIM_OC3_SetConfig+0x96>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <TIM_OC3_SetConfig+0xe8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d003      	beq.n	8008776 <TIM_OC3_SetConfig+0x96>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a16      	ldr	r2, [pc, #88]	; (80087cc <TIM_OC3_SetConfig+0xec>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d113      	bne.n	800879e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800877c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	011b      	lsls	r3, r3, #4
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4313      	orrs	r3, r2
 800879c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	621a      	str	r2, [r3, #32]
}
 80087b8:	bf00      	nop
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	40012c00 	.word	0x40012c00
 80087c8:	40014000 	.word	0x40014000
 80087cc:	40014400 	.word	0x40014400

080087d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800880a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	021b      	lsls	r3, r3, #8
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800881e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	031b      	lsls	r3, r3, #12
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	4313      	orrs	r3, r2
 800882a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a14      	ldr	r2, [pc, #80]	; (8008880 <TIM_OC4_SetConfig+0xb0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_OC4_SetConfig+0x74>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a13      	ldr	r2, [pc, #76]	; (8008884 <TIM_OC4_SetConfig+0xb4>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC4_SetConfig+0x74>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a12      	ldr	r2, [pc, #72]	; (8008888 <TIM_OC4_SetConfig+0xb8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d109      	bne.n	8008858 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800884a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	019b      	lsls	r3, r3, #6
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	621a      	str	r2, [r3, #32]
}
 8008872:	bf00      	nop
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40012c00 	.word	0x40012c00
 8008884:	40014000 	.word	0x40014000
 8008888:	40014400 	.word	0x40014400

0800888c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	041b      	lsls	r3, r3, #16
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a13      	ldr	r2, [pc, #76]	; (8008930 <TIM_OC5_SetConfig+0xa4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d007      	beq.n	80088f6 <TIM_OC5_SetConfig+0x6a>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a12      	ldr	r2, [pc, #72]	; (8008934 <TIM_OC5_SetConfig+0xa8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d003      	beq.n	80088f6 <TIM_OC5_SetConfig+0x6a>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a11      	ldr	r2, [pc, #68]	; (8008938 <TIM_OC5_SetConfig+0xac>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d109      	bne.n	800890a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	621a      	str	r2, [r3, #32]
}
 8008924:	bf00      	nop
 8008926:	371c      	adds	r7, #28
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	40012c00 	.word	0x40012c00
 8008934:	40014000 	.word	0x40014000
 8008938:	40014400 	.word	0x40014400

0800893c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800896a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800896e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	4313      	orrs	r3, r2
 800897a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	051b      	lsls	r3, r3, #20
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	4313      	orrs	r3, r2
 800898e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a14      	ldr	r2, [pc, #80]	; (80089e4 <TIM_OC6_SetConfig+0xa8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d007      	beq.n	80089a8 <TIM_OC6_SetConfig+0x6c>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <TIM_OC6_SetConfig+0xac>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d003      	beq.n	80089a8 <TIM_OC6_SetConfig+0x6c>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a12      	ldr	r2, [pc, #72]	; (80089ec <TIM_OC6_SetConfig+0xb0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d109      	bne.n	80089bc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	029b      	lsls	r3, r3, #10
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	621a      	str	r2, [r3, #32]
}
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	40012c00 	.word	0x40012c00
 80089e8:	40014000 	.word	0x40014000
 80089ec:	40014400 	.word	0x40014400

080089f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f003 031f 	and.w	r3, r3, #31
 8008a02:	2201      	movs	r2, #1
 8008a04:	fa02 f303 	lsl.w	r3, r2, r3
 8008a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a1a      	ldr	r2, [r3, #32]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	43db      	mvns	r3, r3
 8008a12:	401a      	ands	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a1a      	ldr	r2, [r3, #32]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f003 031f 	and.w	r3, r3, #31
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	fa01 f303 	lsl.w	r3, r1, r3
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	621a      	str	r2, [r3, #32]
}
 8008a2e:	bf00      	nop
 8008a30:	371c      	adds	r7, #28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
	...

08008a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d101      	bne.n	8008a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a50:	2302      	movs	r3, #2
 8008a52:	e04f      	b.n	8008af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a21      	ldr	r2, [pc, #132]	; (8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d108      	bne.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a14      	ldr	r2, [pc, #80]	; (8008b00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d009      	beq.n	8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008abc:	d004      	beq.n	8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a10      	ldr	r2, [pc, #64]	; (8008b04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d10c      	bne.n	8008ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ace:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	40012c00 	.word	0x40012c00
 8008b04:	40014000 	.word	0x40014000

08008b08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d101      	bne.n	8008b24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b20:	2302      	movs	r3, #2
 8008b22:	e060      	b.n	8008be6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	041b      	lsls	r3, r3, #16
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a14      	ldr	r2, [pc, #80]	; (8008bf4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d115      	bne.n	8008bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	051b      	lsls	r3, r3, #20
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40012c00 	.word	0x40012c00

08008bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e040      	b.n	8008cc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fb f8ce 	bl	8003df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2224      	movs	r2, #36	; 0x24
 8008c60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 0201 	bic.w	r2, r2, #1
 8008c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fcbe 	bl	80095f4 <UART_SetConfig>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d101      	bne.n	8008c82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e022      	b.n	8008cc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fee6 	bl	8009a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689a      	ldr	r2, [r3, #8]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f042 0201 	orr.w	r2, r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 ff6d 	bl	8009ba0 <UART_CheckIdleState>
 8008cc6:	4603      	mov	r3, r0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08a      	sub	sp, #40	; 0x28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d178      	bne.n	8008dd8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <HAL_UART_Transmit_DMA+0x22>
 8008cec:	88fb      	ldrh	r3, [r7, #6]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e071      	b.n	8008dda <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d101      	bne.n	8008d04 <HAL_UART_Transmit_DMA+0x34>
 8008d00:	2302      	movs	r3, #2
 8008d02:	e06a      	b.n	8008dda <HAL_UART_Transmit_DMA+0x10a>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	88fa      	ldrh	r2, [r7, #6]
 8008d16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	88fa      	ldrh	r2, [r7, #6]
 8008d1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2221      	movs	r2, #33	; 0x21
 8008d2e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d02b      	beq.n	8008d90 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d3c:	4a29      	ldr	r2, [pc, #164]	; (8008de4 <HAL_UART_Transmit_DMA+0x114>)
 8008d3e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d44:	4a28      	ldr	r2, [pc, #160]	; (8008de8 <HAL_UART_Transmit_DMA+0x118>)
 8008d46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d4c:	4a27      	ldr	r2, [pc, #156]	; (8008dec <HAL_UART_Transmit_DMA+0x11c>)
 8008d4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d54:	2200      	movs	r2, #0
 8008d56:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d60:	4619      	mov	r1, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3328      	adds	r3, #40	; 0x28
 8008d68:	461a      	mov	r2, r3
 8008d6a:	88fb      	ldrh	r3, [r7, #6]
 8008d6c:	f7fc feb0 	bl	8005ad0 <HAL_DMA_Start_IT>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00c      	beq.n	8008d90 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2210      	movs	r2, #16
 8008d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e024      	b.n	8008dda <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2240      	movs	r2, #64	; 0x40
 8008d96:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3308      	adds	r3, #8
 8008da6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	613b      	str	r3, [r7, #16]
   return(result);
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc0:	623a      	str	r2, [r7, #32]
 8008dc2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	69f9      	ldr	r1, [r7, #28]
 8008dc6:	6a3a      	ldr	r2, [r7, #32]
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e5      	bne.n	8008da0 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e000      	b.n	8008dda <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008dd8:	2302      	movs	r3, #2
  }
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3728      	adds	r7, #40	; 0x28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	0800a01b 	.word	0x0800a01b
 8008de8:	0800a0b5 	.word	0x0800a0b5
 8008dec:	0800a22d 	.word	0x0800a22d

08008df0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08a      	sub	sp, #40	; 0x28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d142      	bne.n	8008e8c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <HAL_UART_Receive_DMA+0x22>
 8008e0c:	88fb      	ldrh	r3, [r7, #6]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e03b      	b.n	8008e8e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d101      	bne.n	8008e24 <HAL_UART_Receive_DMA+0x34>
 8008e20:	2302      	movs	r3, #2
 8008e22:	e034      	b.n	8008e8e <HAL_UART_Receive_DMA+0x9e>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <HAL_UART_Receive_DMA+0xa8>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d01f      	beq.n	8008e7c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d018      	beq.n	8008e7c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	613b      	str	r3, [r7, #16]
   return(result);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e68:	623b      	str	r3, [r7, #32]
 8008e6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	69f9      	ldr	r1, [r7, #28]
 8008e6e:	6a3a      	ldr	r2, [r7, #32]
 8008e70:	e841 2300 	strex	r3, r2, [r1]
 8008e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e6      	bne.n	8008e4a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68b9      	ldr	r1, [r7, #8]
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 ff9a 	bl	8009dbc <UART_Start_Receive_DMA>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	e000      	b.n	8008e8e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008e8c:	2302      	movs	r3, #2
  }
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3728      	adds	r7, #40	; 0x28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	40008000 	.word	0x40008000

08008e9c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b090      	sub	sp, #64	; 0x40
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eba:	2b80      	cmp	r3, #128	; 0x80
 8008ebc:	d139      	bne.n	8008f32 <HAL_UART_DMAStop+0x96>
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	2b21      	cmp	r3, #33	; 0x21
 8008ec2:	d136      	bne.n	8008f32 <HAL_UART_DMAStop+0x96>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3308      	adds	r3, #8
 8008eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eda:	637b      	str	r3, [r7, #52]	; 0x34
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e5      	bne.n	8008ec4 <HAL_UART_DMAStop+0x28>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d015      	beq.n	8008f2c <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fc fe43 	bl	8005b90 <HAL_DMA_Abort>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00d      	beq.n	8008f2c <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fc ff69 	bl	8005dec <HAL_DMA_GetError>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	d105      	bne.n	8008f2c <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2210      	movs	r2, #16
 8008f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e044      	b.n	8008fb6 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 ffeb 	bl	8009f08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3c:	2b40      	cmp	r3, #64	; 0x40
 8008f3e:	d139      	bne.n	8008fb4 <HAL_UART_DMAStop+0x118>
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	2b22      	cmp	r3, #34	; 0x22
 8008f44:	d136      	bne.n	8008fb4 <HAL_UART_DMAStop+0x118>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f66:	61ba      	str	r2, [r7, #24]
 8008f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6979      	ldr	r1, [r7, #20]
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	613b      	str	r3, [r7, #16]
   return(result);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e5      	bne.n	8008f46 <HAL_UART_DMAStop+0xaa>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d015      	beq.n	8008fae <HAL_UART_DMAStop+0x112>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fc fe02 	bl	8005b90 <HAL_DMA_Abort>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00d      	beq.n	8008fae <HAL_UART_DMAStop+0x112>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fc ff28 	bl	8005dec <HAL_DMA_GetError>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d105      	bne.n	8008fae <HAL_UART_DMAStop+0x112>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2210      	movs	r2, #16
 8008fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e003      	b.n	8008fb6 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 ffd0 	bl	8009f54 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3740      	adds	r7, #64	; 0x40
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b0ba      	sub	sp, #232	; 0xe8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008fea:	f640 030f 	movw	r3, #2063	; 0x80f
 8008fee:	4013      	ands	r3, r2
 8008ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d115      	bne.n	8009028 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00f      	beq.n	8009028 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b00      	cmp	r3, #0
 8009012:	d009      	beq.n	8009028 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 82a6 	beq.w	800956a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	4798      	blx	r3
      }
      return;
 8009026:	e2a0      	b.n	800956a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 8117 	beq.w	8009260 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d106      	bne.n	800904c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800903e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009042:	4b85      	ldr	r3, [pc, #532]	; (8009258 <HAL_UART_IRQHandler+0x298>)
 8009044:	4013      	ands	r3, r2
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 810a 	beq.w	8009260 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800904c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d011      	beq.n	800907c <HAL_UART_IRQHandler+0xbc>
 8009058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800905c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00b      	beq.n	800907c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2201      	movs	r2, #1
 800906a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009072:	f043 0201 	orr.w	r2, r3, #1
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800907c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d011      	beq.n	80090ac <HAL_UART_IRQHandler+0xec>
 8009088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2202      	movs	r2, #2
 800909a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090a2:	f043 0204 	orr.w	r2, r3, #4
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d011      	beq.n	80090dc <HAL_UART_IRQHandler+0x11c>
 80090b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2204      	movs	r2, #4
 80090ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090d2:	f043 0202 	orr.w	r2, r3, #2
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d017      	beq.n	8009118 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090ec:	f003 0320 	and.w	r3, r3, #32
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d105      	bne.n	8009100 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80090f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00b      	beq.n	8009118 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2208      	movs	r2, #8
 8009106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800910e:	f043 0208 	orr.w	r2, r3, #8
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800911c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009120:	2b00      	cmp	r3, #0
 8009122:	d012      	beq.n	800914a <HAL_UART_IRQHandler+0x18a>
 8009124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00c      	beq.n	800914a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009140:	f043 0220 	orr.w	r2, r3, #32
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 820c 	beq.w	800956e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915a:	f003 0320 	and.w	r3, r3, #32
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00d      	beq.n	800917e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009192:	2b40      	cmp	r3, #64	; 0x40
 8009194:	d005      	beq.n	80091a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800919a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d04f      	beq.n	8009242 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fed6 	bl	8009f54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b2:	2b40      	cmp	r3, #64	; 0x40
 80091b4:	d141      	bne.n	800923a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3308      	adds	r3, #8
 80091de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1d9      	bne.n	80091b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009206:	2b00      	cmp	r3, #0
 8009208:	d013      	beq.n	8009232 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920e:	4a13      	ldr	r2, [pc, #76]	; (800925c <HAL_UART_IRQHandler+0x29c>)
 8009210:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009216:	4618      	mov	r0, r3
 8009218:	f7fc fcf8 	bl	8005c0c <HAL_DMA_Abort_IT>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d017      	beq.n	8009252 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800922c:	4610      	mov	r0, r2
 800922e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009230:	e00f      	b.n	8009252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f9ba 	bl	80095ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009238:	e00b      	b.n	8009252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f9b6 	bl	80095ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009240:	e007      	b.n	8009252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f9b2 	bl	80095ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009250:	e18d      	b.n	800956e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009252:	bf00      	nop
    return;
 8009254:	e18b      	b.n	800956e <HAL_UART_IRQHandler+0x5ae>
 8009256:	bf00      	nop
 8009258:	04000120 	.word	0x04000120
 800925c:	0800a2a9 	.word	0x0800a2a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009264:	2b01      	cmp	r3, #1
 8009266:	f040 8146 	bne.w	80094f6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800926a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926e:	f003 0310 	and.w	r3, r3, #16
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 813f 	beq.w	80094f6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800927c:	f003 0310 	and.w	r3, r3, #16
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 8138 	beq.w	80094f6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2210      	movs	r2, #16
 800928c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009298:	2b40      	cmp	r3, #64	; 0x40
 800929a:	f040 80b4 	bne.w	8009406 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 815f 	beq.w	8009572 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80092ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092be:	429a      	cmp	r2, r3
 80092c0:	f080 8157 	bcs.w	8009572 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f040 8085 	bne.w	80093ea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80092f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800930a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800930e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009316:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1da      	bne.n	80092e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3308      	adds	r3, #8
 8009330:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800933a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800933c:	f023 0301 	bic.w	r3, r3, #1
 8009340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3308      	adds	r3, #8
 800934a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800934e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009352:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009356:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e1      	bne.n	800932a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3308      	adds	r3, #8
 800936c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800937c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3308      	adds	r3, #8
 8009386:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800938a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800938c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009390:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009392:	e841 2300 	strex	r3, r2, [r1]
 8009396:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1e3      	bne.n	8009366 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2220      	movs	r2, #32
 80093a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ba:	f023 0310 	bic.w	r3, r3, #16
 80093be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80093ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e4      	bne.n	80093aa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fc fbd3 	bl	8005b90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f8de 	bl	80095c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009404:	e0b5      	b.n	8009572 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009412:	b29b      	uxth	r3, r3
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009420:	b29b      	uxth	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 80a7 	beq.w	8009576 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8009428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80a2 	beq.w	8009576 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009454:	647b      	str	r3, [r7, #68]	; 0x44
 8009456:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800945a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e4      	bne.n	8009432 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	623b      	str	r3, [r7, #32]
   return(result);
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	f023 0301 	bic.w	r3, r3, #1
 800947e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800948c:	633a      	str	r2, [r7, #48]	; 0x30
 800948e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009494:	e841 2300 	strex	r3, r2, [r1]
 8009498:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e3      	bne.n	8009468 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2220      	movs	r2, #32
 80094a4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	60fb      	str	r3, [r7, #12]
   return(result);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0310 	bic.w	r3, r3, #16
 80094c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094d4:	61fb      	str	r3, [r7, #28]
 80094d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	69b9      	ldr	r1, [r7, #24]
 80094da:	69fa      	ldr	r2, [r7, #28]
 80094dc:	e841 2300 	strex	r3, r2, [r1]
 80094e0:	617b      	str	r3, [r7, #20]
   return(result);
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e4      	bne.n	80094b2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f866 	bl	80095c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094f4:	e03f      	b.n	8009576 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00e      	beq.n	8009520 <HAL_UART_IRQHandler+0x560>
 8009502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d008      	beq.n	8009520 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009516:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 ff05 	bl	800a328 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800951e:	e02d      	b.n	800957c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00e      	beq.n	800954a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800952c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009534:	2b00      	cmp	r3, #0
 8009536:	d008      	beq.n	800954a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800953c:	2b00      	cmp	r3, #0
 800953e:	d01c      	beq.n	800957a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
    }
    return;
 8009548:	e017      	b.n	800957a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800954a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800954e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	d012      	beq.n	800957c <HAL_UART_IRQHandler+0x5bc>
 8009556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800955a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00c      	beq.n	800957c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 feb6 	bl	800a2d4 <UART_EndTransmit_IT>
    return;
 8009568:	e008      	b.n	800957c <HAL_UART_IRQHandler+0x5bc>
      return;
 800956a:	bf00      	nop
 800956c:	e006      	b.n	800957c <HAL_UART_IRQHandler+0x5bc>
    return;
 800956e:	bf00      	nop
 8009570:	e004      	b.n	800957c <HAL_UART_IRQHandler+0x5bc>
      return;
 8009572:	bf00      	nop
 8009574:	e002      	b.n	800957c <HAL_UART_IRQHandler+0x5bc>
      return;
 8009576:	bf00      	nop
 8009578:	e000      	b.n	800957c <HAL_UART_IRQHandler+0x5bc>
    return;
 800957a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800957c:	37e8      	adds	r7, #232	; 0xe8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop

08009584 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
	...

080095f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095f4:	b5b0      	push	{r4, r5, r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689a      	ldr	r2, [r3, #8]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	431a      	orrs	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	4313      	orrs	r3, r2
 8009616:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	4baa      	ldr	r3, [pc, #680]	; (80098c8 <UART_SetConfig+0x2d4>)
 8009620:	4013      	ands	r3, r2
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	6812      	ldr	r2, [r2, #0]
 8009626:	69f9      	ldr	r1, [r7, #28]
 8009628:	430b      	orrs	r3, r1
 800962a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68da      	ldr	r2, [r3, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a9f      	ldr	r2, [pc, #636]	; (80098cc <UART_SetConfig+0x2d8>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d004      	beq.n	800965c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	69fa      	ldr	r2, [r7, #28]
 8009658:	4313      	orrs	r3, r2
 800965a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	69fa      	ldr	r2, [r7, #28]
 800966c:	430a      	orrs	r2, r1
 800966e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a96      	ldr	r2, [pc, #600]	; (80098d0 <UART_SetConfig+0x2dc>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d121      	bne.n	80096be <UART_SetConfig+0xca>
 800967a:	4b96      	ldr	r3, [pc, #600]	; (80098d4 <UART_SetConfig+0x2e0>)
 800967c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009680:	f003 0303 	and.w	r3, r3, #3
 8009684:	2b03      	cmp	r3, #3
 8009686:	d817      	bhi.n	80096b8 <UART_SetConfig+0xc4>
 8009688:	a201      	add	r2, pc, #4	; (adr r2, 8009690 <UART_SetConfig+0x9c>)
 800968a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968e:	bf00      	nop
 8009690:	080096a1 	.word	0x080096a1
 8009694:	080096ad 	.word	0x080096ad
 8009698:	080096a7 	.word	0x080096a7
 800969c:	080096b3 	.word	0x080096b3
 80096a0:	2301      	movs	r3, #1
 80096a2:	76fb      	strb	r3, [r7, #27]
 80096a4:	e096      	b.n	80097d4 <UART_SetConfig+0x1e0>
 80096a6:	2302      	movs	r3, #2
 80096a8:	76fb      	strb	r3, [r7, #27]
 80096aa:	e093      	b.n	80097d4 <UART_SetConfig+0x1e0>
 80096ac:	2304      	movs	r3, #4
 80096ae:	76fb      	strb	r3, [r7, #27]
 80096b0:	e090      	b.n	80097d4 <UART_SetConfig+0x1e0>
 80096b2:	2308      	movs	r3, #8
 80096b4:	76fb      	strb	r3, [r7, #27]
 80096b6:	e08d      	b.n	80097d4 <UART_SetConfig+0x1e0>
 80096b8:	2310      	movs	r3, #16
 80096ba:	76fb      	strb	r3, [r7, #27]
 80096bc:	e08a      	b.n	80097d4 <UART_SetConfig+0x1e0>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a85      	ldr	r2, [pc, #532]	; (80098d8 <UART_SetConfig+0x2e4>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d132      	bne.n	800972e <UART_SetConfig+0x13a>
 80096c8:	4b82      	ldr	r3, [pc, #520]	; (80098d4 <UART_SetConfig+0x2e0>)
 80096ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ce:	f003 030c 	and.w	r3, r3, #12
 80096d2:	2b0c      	cmp	r3, #12
 80096d4:	d828      	bhi.n	8009728 <UART_SetConfig+0x134>
 80096d6:	a201      	add	r2, pc, #4	; (adr r2, 80096dc <UART_SetConfig+0xe8>)
 80096d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096dc:	08009711 	.word	0x08009711
 80096e0:	08009729 	.word	0x08009729
 80096e4:	08009729 	.word	0x08009729
 80096e8:	08009729 	.word	0x08009729
 80096ec:	0800971d 	.word	0x0800971d
 80096f0:	08009729 	.word	0x08009729
 80096f4:	08009729 	.word	0x08009729
 80096f8:	08009729 	.word	0x08009729
 80096fc:	08009717 	.word	0x08009717
 8009700:	08009729 	.word	0x08009729
 8009704:	08009729 	.word	0x08009729
 8009708:	08009729 	.word	0x08009729
 800970c:	08009723 	.word	0x08009723
 8009710:	2300      	movs	r3, #0
 8009712:	76fb      	strb	r3, [r7, #27]
 8009714:	e05e      	b.n	80097d4 <UART_SetConfig+0x1e0>
 8009716:	2302      	movs	r3, #2
 8009718:	76fb      	strb	r3, [r7, #27]
 800971a:	e05b      	b.n	80097d4 <UART_SetConfig+0x1e0>
 800971c:	2304      	movs	r3, #4
 800971e:	76fb      	strb	r3, [r7, #27]
 8009720:	e058      	b.n	80097d4 <UART_SetConfig+0x1e0>
 8009722:	2308      	movs	r3, #8
 8009724:	76fb      	strb	r3, [r7, #27]
 8009726:	e055      	b.n	80097d4 <UART_SetConfig+0x1e0>
 8009728:	2310      	movs	r3, #16
 800972a:	76fb      	strb	r3, [r7, #27]
 800972c:	e052      	b.n	80097d4 <UART_SetConfig+0x1e0>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a6a      	ldr	r2, [pc, #424]	; (80098dc <UART_SetConfig+0x2e8>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d120      	bne.n	800977a <UART_SetConfig+0x186>
 8009738:	4b66      	ldr	r3, [pc, #408]	; (80098d4 <UART_SetConfig+0x2e0>)
 800973a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800973e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009742:	2b30      	cmp	r3, #48	; 0x30
 8009744:	d013      	beq.n	800976e <UART_SetConfig+0x17a>
 8009746:	2b30      	cmp	r3, #48	; 0x30
 8009748:	d814      	bhi.n	8009774 <UART_SetConfig+0x180>
 800974a:	2b20      	cmp	r3, #32
 800974c:	d009      	beq.n	8009762 <UART_SetConfig+0x16e>
 800974e:	2b20      	cmp	r3, #32
 8009750:	d810      	bhi.n	8009774 <UART_SetConfig+0x180>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <UART_SetConfig+0x168>
 8009756:	2b10      	cmp	r3, #16
 8009758:	d006      	beq.n	8009768 <UART_SetConfig+0x174>
 800975a:	e00b      	b.n	8009774 <UART_SetConfig+0x180>
 800975c:	2300      	movs	r3, #0
 800975e:	76fb      	strb	r3, [r7, #27]
 8009760:	e038      	b.n	80097d4 <UART_SetConfig+0x1e0>
 8009762:	2302      	movs	r3, #2
 8009764:	76fb      	strb	r3, [r7, #27]
 8009766:	e035      	b.n	80097d4 <UART_SetConfig+0x1e0>
 8009768:	2304      	movs	r3, #4
 800976a:	76fb      	strb	r3, [r7, #27]
 800976c:	e032      	b.n	80097d4 <UART_SetConfig+0x1e0>
 800976e:	2308      	movs	r3, #8
 8009770:	76fb      	strb	r3, [r7, #27]
 8009772:	e02f      	b.n	80097d4 <UART_SetConfig+0x1e0>
 8009774:	2310      	movs	r3, #16
 8009776:	76fb      	strb	r3, [r7, #27]
 8009778:	e02c      	b.n	80097d4 <UART_SetConfig+0x1e0>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a53      	ldr	r2, [pc, #332]	; (80098cc <UART_SetConfig+0x2d8>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d125      	bne.n	80097d0 <UART_SetConfig+0x1dc>
 8009784:	4b53      	ldr	r3, [pc, #332]	; (80098d4 <UART_SetConfig+0x2e0>)
 8009786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800978e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009792:	d017      	beq.n	80097c4 <UART_SetConfig+0x1d0>
 8009794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009798:	d817      	bhi.n	80097ca <UART_SetConfig+0x1d6>
 800979a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800979e:	d00b      	beq.n	80097b8 <UART_SetConfig+0x1c4>
 80097a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097a4:	d811      	bhi.n	80097ca <UART_SetConfig+0x1d6>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <UART_SetConfig+0x1be>
 80097aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ae:	d006      	beq.n	80097be <UART_SetConfig+0x1ca>
 80097b0:	e00b      	b.n	80097ca <UART_SetConfig+0x1d6>
 80097b2:	2300      	movs	r3, #0
 80097b4:	76fb      	strb	r3, [r7, #27]
 80097b6:	e00d      	b.n	80097d4 <UART_SetConfig+0x1e0>
 80097b8:	2302      	movs	r3, #2
 80097ba:	76fb      	strb	r3, [r7, #27]
 80097bc:	e00a      	b.n	80097d4 <UART_SetConfig+0x1e0>
 80097be:	2304      	movs	r3, #4
 80097c0:	76fb      	strb	r3, [r7, #27]
 80097c2:	e007      	b.n	80097d4 <UART_SetConfig+0x1e0>
 80097c4:	2308      	movs	r3, #8
 80097c6:	76fb      	strb	r3, [r7, #27]
 80097c8:	e004      	b.n	80097d4 <UART_SetConfig+0x1e0>
 80097ca:	2310      	movs	r3, #16
 80097cc:	76fb      	strb	r3, [r7, #27]
 80097ce:	e001      	b.n	80097d4 <UART_SetConfig+0x1e0>
 80097d0:	2310      	movs	r3, #16
 80097d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a3c      	ldr	r2, [pc, #240]	; (80098cc <UART_SetConfig+0x2d8>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	f040 8082 	bne.w	80098e4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097e0:	7efb      	ldrb	r3, [r7, #27]
 80097e2:	2b08      	cmp	r3, #8
 80097e4:	d823      	bhi.n	800982e <UART_SetConfig+0x23a>
 80097e6:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <UART_SetConfig+0x1f8>)
 80097e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ec:	08009811 	.word	0x08009811
 80097f0:	0800982f 	.word	0x0800982f
 80097f4:	08009819 	.word	0x08009819
 80097f8:	0800982f 	.word	0x0800982f
 80097fc:	0800981f 	.word	0x0800981f
 8009800:	0800982f 	.word	0x0800982f
 8009804:	0800982f 	.word	0x0800982f
 8009808:	0800982f 	.word	0x0800982f
 800980c:	08009827 	.word	0x08009827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009810:	f7fd fd7e 	bl	8007310 <HAL_RCC_GetPCLK1Freq>
 8009814:	6178      	str	r0, [r7, #20]
        break;
 8009816:	e00f      	b.n	8009838 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009818:	4b31      	ldr	r3, [pc, #196]	; (80098e0 <UART_SetConfig+0x2ec>)
 800981a:	617b      	str	r3, [r7, #20]
        break;
 800981c:	e00c      	b.n	8009838 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800981e:	f7fd fcdf 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8009822:	6178      	str	r0, [r7, #20]
        break;
 8009824:	e008      	b.n	8009838 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800982a:	617b      	str	r3, [r7, #20]
        break;
 800982c:	e004      	b.n	8009838 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	76bb      	strb	r3, [r7, #26]
        break;
 8009836:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 8100 	beq.w	8009a40 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	4613      	mov	r3, r2
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	4413      	add	r3, r2
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	429a      	cmp	r2, r3
 800984e:	d305      	bcc.n	800985c <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	429a      	cmp	r2, r3
 800985a:	d902      	bls.n	8009862 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	76bb      	strb	r3, [r7, #26]
 8009860:	e0ee      	b.n	8009a40 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	4618      	mov	r0, r3
 8009866:	f04f 0100 	mov.w	r1, #0
 800986a:	f04f 0200 	mov.w	r2, #0
 800986e:	f04f 0300 	mov.w	r3, #0
 8009872:	020b      	lsls	r3, r1, #8
 8009874:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009878:	0202      	lsls	r2, r0, #8
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	6849      	ldr	r1, [r1, #4]
 800987e:	0849      	lsrs	r1, r1, #1
 8009880:	4608      	mov	r0, r1
 8009882:	f04f 0100 	mov.w	r1, #0
 8009886:	1814      	adds	r4, r2, r0
 8009888:	eb43 0501 	adc.w	r5, r3, r1
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	461a      	mov	r2, r3
 8009892:	f04f 0300 	mov.w	r3, #0
 8009896:	4620      	mov	r0, r4
 8009898:	4629      	mov	r1, r5
 800989a:	f7f7 f9f5 	bl	8000c88 <__aeabi_uldivmod>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4613      	mov	r3, r2
 80098a4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098ac:	d308      	bcc.n	80098c0 <UART_SetConfig+0x2cc>
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098b4:	d204      	bcs.n	80098c0 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	60da      	str	r2, [r3, #12]
 80098be:	e0bf      	b.n	8009a40 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	76bb      	strb	r3, [r7, #26]
 80098c4:	e0bc      	b.n	8009a40 <UART_SetConfig+0x44c>
 80098c6:	bf00      	nop
 80098c8:	efff69f3 	.word	0xefff69f3
 80098cc:	40008000 	.word	0x40008000
 80098d0:	40013800 	.word	0x40013800
 80098d4:	40021000 	.word	0x40021000
 80098d8:	40004400 	.word	0x40004400
 80098dc:	40004800 	.word	0x40004800
 80098e0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098ec:	d15b      	bne.n	80099a6 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 80098ee:	7efb      	ldrb	r3, [r7, #27]
 80098f0:	2b08      	cmp	r3, #8
 80098f2:	d828      	bhi.n	8009946 <UART_SetConfig+0x352>
 80098f4:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <UART_SetConfig+0x308>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	08009921 	.word	0x08009921
 8009900:	08009929 	.word	0x08009929
 8009904:	08009931 	.word	0x08009931
 8009908:	08009947 	.word	0x08009947
 800990c:	08009937 	.word	0x08009937
 8009910:	08009947 	.word	0x08009947
 8009914:	08009947 	.word	0x08009947
 8009918:	08009947 	.word	0x08009947
 800991c:	0800993f 	.word	0x0800993f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009920:	f7fd fcf6 	bl	8007310 <HAL_RCC_GetPCLK1Freq>
 8009924:	6178      	str	r0, [r7, #20]
        break;
 8009926:	e013      	b.n	8009950 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009928:	f7fd fd08 	bl	800733c <HAL_RCC_GetPCLK2Freq>
 800992c:	6178      	str	r0, [r7, #20]
        break;
 800992e:	e00f      	b.n	8009950 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009930:	4b49      	ldr	r3, [pc, #292]	; (8009a58 <UART_SetConfig+0x464>)
 8009932:	617b      	str	r3, [r7, #20]
        break;
 8009934:	e00c      	b.n	8009950 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009936:	f7fd fc53 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 800993a:	6178      	str	r0, [r7, #20]
        break;
 800993c:	e008      	b.n	8009950 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800993e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009942:	617b      	str	r3, [r7, #20]
        break;
 8009944:	e004      	b.n	8009950 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	76bb      	strb	r3, [r7, #26]
        break;
 800994e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d074      	beq.n	8009a40 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	005a      	lsls	r2, r3, #1
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	441a      	add	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	fbb2 f3f3 	udiv	r3, r2, r3
 800996a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	2b0f      	cmp	r3, #15
 8009970:	d916      	bls.n	80099a0 <UART_SetConfig+0x3ac>
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009978:	d212      	bcs.n	80099a0 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	b29b      	uxth	r3, r3
 800997e:	f023 030f 	bic.w	r3, r3, #15
 8009982:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	085b      	lsrs	r3, r3, #1
 8009988:	b29b      	uxth	r3, r3
 800998a:	f003 0307 	and.w	r3, r3, #7
 800998e:	b29a      	uxth	r2, r3
 8009990:	89fb      	ldrh	r3, [r7, #14]
 8009992:	4313      	orrs	r3, r2
 8009994:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	89fa      	ldrh	r2, [r7, #14]
 800999c:	60da      	str	r2, [r3, #12]
 800999e:	e04f      	b.n	8009a40 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	76bb      	strb	r3, [r7, #26]
 80099a4:	e04c      	b.n	8009a40 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099a6:	7efb      	ldrb	r3, [r7, #27]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d828      	bhi.n	80099fe <UART_SetConfig+0x40a>
 80099ac:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <UART_SetConfig+0x3c0>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099d9 	.word	0x080099d9
 80099b8:	080099e1 	.word	0x080099e1
 80099bc:	080099e9 	.word	0x080099e9
 80099c0:	080099ff 	.word	0x080099ff
 80099c4:	080099ef 	.word	0x080099ef
 80099c8:	080099ff 	.word	0x080099ff
 80099cc:	080099ff 	.word	0x080099ff
 80099d0:	080099ff 	.word	0x080099ff
 80099d4:	080099f7 	.word	0x080099f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099d8:	f7fd fc9a 	bl	8007310 <HAL_RCC_GetPCLK1Freq>
 80099dc:	6178      	str	r0, [r7, #20]
        break;
 80099de:	e013      	b.n	8009a08 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099e0:	f7fd fcac 	bl	800733c <HAL_RCC_GetPCLK2Freq>
 80099e4:	6178      	str	r0, [r7, #20]
        break;
 80099e6:	e00f      	b.n	8009a08 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099e8:	4b1b      	ldr	r3, [pc, #108]	; (8009a58 <UART_SetConfig+0x464>)
 80099ea:	617b      	str	r3, [r7, #20]
        break;
 80099ec:	e00c      	b.n	8009a08 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ee:	f7fd fbf7 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 80099f2:	6178      	str	r0, [r7, #20]
        break;
 80099f4:	e008      	b.n	8009a08 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099fa:	617b      	str	r3, [r7, #20]
        break;
 80099fc:	e004      	b.n	8009a08 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	76bb      	strb	r3, [r7, #26]
        break;
 8009a06:	bf00      	nop
    }

    if (pclk != 0U)
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d018      	beq.n	8009a40 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	085a      	lsrs	r2, r3, #1
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	441a      	add	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a20:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	2b0f      	cmp	r3, #15
 8009a26:	d909      	bls.n	8009a3c <UART_SetConfig+0x448>
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a2e:	d205      	bcs.n	8009a3c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	e001      	b.n	8009a40 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009a4c:	7ebb      	ldrb	r3, [r7, #26]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3720      	adds	r7, #32
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bdb0      	pop	{r4, r5, r7, pc}
 8009a56:	bf00      	nop
 8009a58:	00f42400 	.word	0x00f42400

08009a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00a      	beq.n	8009a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00a      	beq.n	8009aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00a      	beq.n	8009aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	f003 0308 	and.w	r3, r3, #8
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	f003 0310 	and.w	r3, r3, #16
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00a      	beq.n	8009b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00a      	beq.n	8009b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01a      	beq.n	8009b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b5a:	d10a      	bne.n	8009b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00a      	beq.n	8009b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	605a      	str	r2, [r3, #4]
  }
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af02      	add	r7, sp, #8
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bb0:	f7fa fbc6 	bl	8004340 <HAL_GetTick>
 8009bb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0308 	and.w	r3, r3, #8
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d10e      	bne.n	8009be2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f82d 	bl	8009c32 <UART_WaitOnFlagUntilTimeout>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e023      	b.n	8009c2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	d10e      	bne.n	8009c0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f817 	bl	8009c32 <UART_WaitOnFlagUntilTimeout>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e00d      	b.n	8009c2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2220      	movs	r2, #32
 8009c12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2220      	movs	r2, #32
 8009c18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b09c      	sub	sp, #112	; 0x70
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	603b      	str	r3, [r7, #0]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c42:	e0a5      	b.n	8009d90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4a:	f000 80a1 	beq.w	8009d90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c4e:	f7fa fb77 	bl	8004340 <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d302      	bcc.n	8009c64 <UART_WaitOnFlagUntilTimeout+0x32>
 8009c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d13e      	bne.n	8009ce2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c78:	667b      	str	r3, [r7, #100]	; 0x64
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c8a:	e841 2300 	strex	r3, r2, [r1]
 8009c8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1e6      	bne.n	8009c64 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3308      	adds	r3, #8
 8009c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca0:	e853 3f00 	ldrex	r3, [r3]
 8009ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca8:	f023 0301 	bic.w	r3, r3, #1
 8009cac:	663b      	str	r3, [r7, #96]	; 0x60
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009cb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cbe:	e841 2300 	strex	r3, r2, [r1]
 8009cc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1e5      	bne.n	8009c96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e067      	b.n	8009db2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d04f      	beq.n	8009d90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cfe:	d147      	bne.n	8009d90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	e853 3f00 	ldrex	r3, [r3]
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	461a      	mov	r2, r3
 8009d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d28:	637b      	str	r3, [r7, #52]	; 0x34
 8009d2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d30:	e841 2300 	strex	r3, r2, [r1]
 8009d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1e6      	bne.n	8009d0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3308      	adds	r3, #8
 8009d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	e853 3f00 	ldrex	r3, [r3]
 8009d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f023 0301 	bic.w	r3, r3, #1
 8009d52:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d5c:	623a      	str	r2, [r7, #32]
 8009d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	69f9      	ldr	r1, [r7, #28]
 8009d62:	6a3a      	ldr	r2, [r7, #32]
 8009d64:	e841 2300 	strex	r3, r2, [r1]
 8009d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1e5      	bne.n	8009d3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2220      	movs	r2, #32
 8009d74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2220      	movs	r2, #32
 8009d7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e010      	b.n	8009db2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	69da      	ldr	r2, [r3, #28]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	bf0c      	ite	eq
 8009da0:	2301      	moveq	r3, #1
 8009da2:	2300      	movne	r3, #0
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	461a      	mov	r2, r3
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	f43f af4a 	beq.w	8009c44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3770      	adds	r7, #112	; 0x70
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b096      	sub	sp, #88	; 0x58
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	88fa      	ldrh	r2, [r7, #6]
 8009dd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2222      	movs	r2, #34	; 0x22
 8009de4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d02b      	beq.n	8009e46 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df2:	4a42      	ldr	r2, [pc, #264]	; (8009efc <UART_Start_Receive_DMA+0x140>)
 8009df4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfa:	4a41      	ldr	r2, [pc, #260]	; (8009f00 <UART_Start_Receive_DMA+0x144>)
 8009dfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e02:	4a40      	ldr	r2, [pc, #256]	; (8009f04 <UART_Start_Receive_DMA+0x148>)
 8009e04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3324      	adds	r3, #36	; 0x24
 8009e18:	4619      	mov	r1, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1e:	461a      	mov	r2, r3
 8009e20:	88fb      	ldrh	r3, [r7, #6]
 8009e22:	f7fb fe55 	bl	8005ad0 <HAL_DMA_Start_IT>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00c      	beq.n	8009e46 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2210      	movs	r2, #16
 8009e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e055      	b.n	8009ef2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d018      	beq.n	8009e88 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5e:	e853 3f00 	ldrex	r3, [r3]
 8009e62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e76:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e6      	bne.n	8009e56 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e92:	e853 3f00 	ldrex	r3, [r3]
 8009e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	f043 0301 	orr.w	r3, r3, #1
 8009e9e:	653b      	str	r3, [r7, #80]	; 0x50
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ea8:	637a      	str	r2, [r7, #52]	; 0x34
 8009eaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eb0:	e841 2300 	strex	r3, r2, [r1]
 8009eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e5      	bne.n	8009e88 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	e853 3f00 	ldrex	r3, [r3]
 8009eca:	613b      	str	r3, [r7, #16]
   return(result);
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3308      	adds	r3, #8
 8009eda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009edc:	623a      	str	r2, [r7, #32]
 8009ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	69f9      	ldr	r1, [r7, #28]
 8009ee2:	6a3a      	ldr	r2, [r7, #32]
 8009ee4:	e841 2300 	strex	r3, r2, [r1]
 8009ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e5      	bne.n	8009ebc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3758      	adds	r7, #88	; 0x58
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	0800a0d1 	.word	0x0800a0d1
 8009f00:	0800a1f5 	.word	0x0800a1f5
 8009f04:	0800a22d 	.word	0x0800a22d

08009f08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b089      	sub	sp, #36	; 0x24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009f24:	61fb      	str	r3, [r7, #28]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	61bb      	str	r3, [r7, #24]
 8009f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	6979      	ldr	r1, [r7, #20]
 8009f34:	69ba      	ldr	r2, [r7, #24]
 8009f36:	e841 2300 	strex	r3, r2, [r1]
 8009f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e6      	bne.n	8009f10 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009f48:	bf00      	nop
 8009f4a:	3724      	adds	r7, #36	; 0x24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b095      	sub	sp, #84	; 0x54
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f64:	e853 3f00 	ldrex	r3, [r3]
 8009f68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8009f7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f82:	e841 2300 	strex	r3, r2, [r1]
 8009f86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1e6      	bne.n	8009f5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3308      	adds	r3, #8
 8009f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	e853 3f00 	ldrex	r3, [r3]
 8009f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	f023 0301 	bic.w	r3, r3, #1
 8009fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3308      	adds	r3, #8
 8009fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009fb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb6:	e841 2300 	strex	r3, r2, [r1]
 8009fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1e5      	bne.n	8009f8e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d118      	bne.n	8009ffc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	e853 3f00 	ldrex	r3, [r3]
 8009fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f023 0310 	bic.w	r3, r3, #16
 8009fde:	647b      	str	r3, [r7, #68]	; 0x44
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe8:	61bb      	str	r3, [r7, #24]
 8009fea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fec:	6979      	ldr	r1, [r7, #20]
 8009fee:	69ba      	ldr	r2, [r7, #24]
 8009ff0:	e841 2300 	strex	r3, r2, [r1]
 8009ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e6      	bne.n	8009fca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2220      	movs	r2, #32
 800a000:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a00e:	bf00      	nop
 800a010:	3754      	adds	r7, #84	; 0x54
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b090      	sub	sp, #64	; 0x40
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0320 	and.w	r3, r3, #32
 800a032:	2b00      	cmp	r3, #0
 800a034:	d137      	bne.n	800a0a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a038:	2200      	movs	r2, #0
 800a03a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3308      	adds	r3, #8
 800a044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	623b      	str	r3, [r7, #32]
   return(result);
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a054:	63bb      	str	r3, [r7, #56]	; 0x38
 800a056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3308      	adds	r3, #8
 800a05c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a05e:	633a      	str	r2, [r7, #48]	; 0x30
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e5      	bne.n	800a03e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a086:	637b      	str	r3, [r7, #52]	; 0x34
 800a088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a090:	61fb      	str	r3, [r7, #28]
 800a092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	69b9      	ldr	r1, [r7, #24]
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	617b      	str	r3, [r7, #20]
   return(result);
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e6      	bne.n	800a072 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0a4:	e002      	b.n	800a0ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a0a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a0a8:	f7f8 fe2a 	bl	8002d00 <HAL_UART_TxCpltCallback>
}
 800a0ac:	bf00      	nop
 800a0ae:	3740      	adds	r7, #64	; 0x40
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f7ff fa5e 	bl	8009584 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0c8:	bf00      	nop
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b09c      	sub	sp, #112	; 0x70
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0dc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0320 	and.w	r3, r3, #32
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d170      	bne.n	800a1ce <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800a0ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0fc:	e853 3f00 	ldrex	r3, [r3]
 800a100:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a108:	66bb      	str	r3, [r7, #104]	; 0x68
 800a10a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	461a      	mov	r2, r3
 800a110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a112:	65bb      	str	r3, [r7, #88]	; 0x58
 800a114:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a116:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a118:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a11a:	e841 2300 	strex	r3, r2, [r1]
 800a11e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1e6      	bne.n	800a0f4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3308      	adds	r3, #8
 800a12c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a130:	e853 3f00 	ldrex	r3, [r3]
 800a134:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a138:	f023 0301 	bic.w	r3, r3, #1
 800a13c:	667b      	str	r3, [r7, #100]	; 0x64
 800a13e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3308      	adds	r3, #8
 800a144:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a146:	647a      	str	r2, [r7, #68]	; 0x44
 800a148:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a14c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a14e:	e841 2300 	strex	r3, r2, [r1]
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1e5      	bne.n	800a126 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a15a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3308      	adds	r3, #8
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	623b      	str	r3, [r7, #32]
   return(result);
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a170:	663b      	str	r3, [r7, #96]	; 0x60
 800a172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3308      	adds	r3, #8
 800a178:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a17a:	633a      	str	r2, [r7, #48]	; 0x30
 800a17c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e5      	bne.n	800a15a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a18e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a190:	2220      	movs	r2, #32
 800a192:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d118      	bne.n	800a1ce <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f023 0310 	bic.w	r3, r3, #16
 800a1b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ba:	61fb      	str	r3, [r7, #28]
 800a1bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1be:	69b9      	ldr	r1, [r7, #24]
 800a1c0:	69fa      	ldr	r2, [r7, #28]
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e6      	bne.n	800a19c <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d107      	bne.n	800a1e6 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a1e0:	f7ff f9ee 	bl	80095c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1e4:	e002      	b.n	800a1ec <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a1e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a1e8:	f7f8 fbde 	bl	80029a8 <HAL_UART_RxCpltCallback>
}
 800a1ec:	bf00      	nop
 800a1ee:	3770      	adds	r7, #112	; 0x70
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a200:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a206:	2b01      	cmp	r3, #1
 800a208:	d109      	bne.n	800a21e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a210:	085b      	lsrs	r3, r3, #1
 800a212:	b29b      	uxth	r3, r3
 800a214:	4619      	mov	r1, r3
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f7ff f9d2 	bl	80095c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a21c:	e002      	b.n	800a224 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff f9ba 	bl	8009598 <HAL_UART_RxHalfCpltCallback>
}
 800a224:	bf00      	nop
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a238:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a23e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a244:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a250:	2b80      	cmp	r3, #128	; 0x80
 800a252:	d109      	bne.n	800a268 <UART_DMAError+0x3c>
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	2b21      	cmp	r3, #33	; 0x21
 800a258:	d106      	bne.n	800a268 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a262:	6978      	ldr	r0, [r7, #20]
 800a264:	f7ff fe50 	bl	8009f08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a272:	2b40      	cmp	r3, #64	; 0x40
 800a274:	d109      	bne.n	800a28a <UART_DMAError+0x5e>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b22      	cmp	r3, #34	; 0x22
 800a27a:	d106      	bne.n	800a28a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2200      	movs	r2, #0
 800a280:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a284:	6978      	ldr	r0, [r7, #20]
 800a286:	f7ff fe65 	bl	8009f54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a290:	f043 0210 	orr.w	r2, r3, #16
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a29a:	6978      	ldr	r0, [r7, #20]
 800a29c:	f7ff f986 	bl	80095ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2a0:	bf00      	nop
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7ff f970 	bl	80095ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2cc:	bf00      	nop
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b088      	sub	sp, #32
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	e853 3f00 	ldrex	r3, [r3]
 800a2e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2f0:	61fb      	str	r3, [r7, #28]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	61bb      	str	r3, [r7, #24]
 800a2fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fe:	6979      	ldr	r1, [r7, #20]
 800a300:	69ba      	ldr	r2, [r7, #24]
 800a302:	e841 2300 	strex	r3, r2, [r1]
 800a306:	613b      	str	r3, [r7, #16]
   return(result);
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e6      	bne.n	800a2dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2220      	movs	r2, #32
 800a312:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7f8 fcf0 	bl	8002d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a320:	bf00      	nop
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <__NVIC_SetPriority>:
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	6039      	str	r1, [r7, #0]
 800a346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	db0a      	blt.n	800a366 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	b2da      	uxtb	r2, r3
 800a354:	490c      	ldr	r1, [pc, #48]	; (800a388 <__NVIC_SetPriority+0x4c>)
 800a356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a35a:	0112      	lsls	r2, r2, #4
 800a35c:	b2d2      	uxtb	r2, r2
 800a35e:	440b      	add	r3, r1
 800a360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a364:	e00a      	b.n	800a37c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	4908      	ldr	r1, [pc, #32]	; (800a38c <__NVIC_SetPriority+0x50>)
 800a36c:	79fb      	ldrb	r3, [r7, #7]
 800a36e:	f003 030f 	and.w	r3, r3, #15
 800a372:	3b04      	subs	r3, #4
 800a374:	0112      	lsls	r2, r2, #4
 800a376:	b2d2      	uxtb	r2, r2
 800a378:	440b      	add	r3, r1
 800a37a:	761a      	strb	r2, [r3, #24]
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	e000e100 	.word	0xe000e100
 800a38c:	e000ed00 	.word	0xe000ed00

0800a390 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a390:	b580      	push	{r7, lr}
 800a392:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <SysTick_Handler+0x1c>)
 800a396:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a398:	f001 fe52 	bl	800c040 <xTaskGetSchedulerState>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d001      	beq.n	800a3a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a3a2:	f002 fd21 	bl	800cde8 <xPortSysTickHandler>
  }
}
 800a3a6:	bf00      	nop
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	e000e010 	.word	0xe000e010

0800a3b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	f06f 0004 	mvn.w	r0, #4
 800a3ba:	f7ff ffbf 	bl	800a33c <__NVIC_SetPriority>
#endif
}
 800a3be:	bf00      	nop
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3ca:	f3ef 8305 	mrs	r3, IPSR
 800a3ce:	603b      	str	r3, [r7, #0]
  return(result);
 800a3d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a3d6:	f06f 0305 	mvn.w	r3, #5
 800a3da:	607b      	str	r3, [r7, #4]
 800a3dc:	e00c      	b.n	800a3f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a3de:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <osKernelInitialize+0x44>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d105      	bne.n	800a3f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a3e6:	4b08      	ldr	r3, [pc, #32]	; (800a408 <osKernelInitialize+0x44>)
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	607b      	str	r3, [r7, #4]
 800a3f0:	e002      	b.n	800a3f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3f8:	687b      	ldr	r3, [r7, #4]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20000268 	.word	0x20000268

0800a40c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a412:	f3ef 8305 	mrs	r3, IPSR
 800a416:	603b      	str	r3, [r7, #0]
  return(result);
 800a418:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a41e:	f06f 0305 	mvn.w	r3, #5
 800a422:	607b      	str	r3, [r7, #4]
 800a424:	e010      	b.n	800a448 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a426:	4b0b      	ldr	r3, [pc, #44]	; (800a454 <osKernelStart+0x48>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d109      	bne.n	800a442 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a42e:	f7ff ffbf 	bl	800a3b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a432:	4b08      	ldr	r3, [pc, #32]	; (800a454 <osKernelStart+0x48>)
 800a434:	2202      	movs	r2, #2
 800a436:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a438:	f001 f978 	bl	800b72c <vTaskStartScheduler>
      stat = osOK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	607b      	str	r3, [r7, #4]
 800a440:	e002      	b.n	800a448 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a442:	f04f 33ff 	mov.w	r3, #4294967295
 800a446:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a448:	687b      	ldr	r3, [r7, #4]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20000268 	.word	0x20000268

0800a458 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08e      	sub	sp, #56	; 0x38
 800a45c:	af04      	add	r7, sp, #16
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a464:	2300      	movs	r3, #0
 800a466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a468:	f3ef 8305 	mrs	r3, IPSR
 800a46c:	617b      	str	r3, [r7, #20]
  return(result);
 800a46e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a470:	2b00      	cmp	r3, #0
 800a472:	d17f      	bne.n	800a574 <osThreadNew+0x11c>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d07c      	beq.n	800a574 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a47e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a480:	2318      	movs	r3, #24
 800a482:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a484:	2300      	movs	r3, #0
 800a486:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a488:	f04f 33ff 	mov.w	r3, #4294967295
 800a48c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d045      	beq.n	800a520 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <osThreadNew+0x4a>
        name = attr->name;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d008      	beq.n	800a4c8 <osThreadNew+0x70>
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	2b38      	cmp	r3, #56	; 0x38
 800a4ba:	d805      	bhi.n	800a4c8 <osThreadNew+0x70>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <osThreadNew+0x74>
        return (NULL);
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	e054      	b.n	800a576 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	089b      	lsrs	r3, r3, #2
 800a4da:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00e      	beq.n	800a502 <osThreadNew+0xaa>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	2bbf      	cmp	r3, #191	; 0xbf
 800a4ea:	d90a      	bls.n	800a502 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d006      	beq.n	800a502 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <osThreadNew+0xaa>
        mem = 1;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	61bb      	str	r3, [r7, #24]
 800a500:	e010      	b.n	800a524 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10c      	bne.n	800a524 <osThreadNew+0xcc>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d108      	bne.n	800a524 <osThreadNew+0xcc>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d104      	bne.n	800a524 <osThreadNew+0xcc>
          mem = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	61bb      	str	r3, [r7, #24]
 800a51e:	e001      	b.n	800a524 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a520:	2300      	movs	r3, #0
 800a522:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d110      	bne.n	800a54c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a532:	9202      	str	r2, [sp, #8]
 800a534:	9301      	str	r3, [sp, #4]
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	6a3a      	ldr	r2, [r7, #32]
 800a53e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 ff03 	bl	800b34c <xTaskCreateStatic>
 800a546:	4603      	mov	r3, r0
 800a548:	613b      	str	r3, [r7, #16]
 800a54a:	e013      	b.n	800a574 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d110      	bne.n	800a574 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a552:	6a3b      	ldr	r3, [r7, #32]
 800a554:	b29a      	uxth	r2, r3
 800a556:	f107 0310 	add.w	r3, r7, #16
 800a55a:	9301      	str	r3, [sp, #4]
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 ff4e 	bl	800b406 <xTaskCreate>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d001      	beq.n	800a574 <osThreadNew+0x11c>
            hTask = NULL;
 800a570:	2300      	movs	r3, #0
 800a572:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a574:	693b      	ldr	r3, [r7, #16]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3728      	adds	r7, #40	; 0x28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a586:	f3ef 8305 	mrs	r3, IPSR
 800a58a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a58c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <osDelay+0x1c>
    stat = osErrorISR;
 800a592:	f06f 0305 	mvn.w	r3, #5
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	e007      	b.n	800a5aa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <osDelay+0x2c>
      vTaskDelay(ticks);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 f88d 	bl	800b6c4 <vTaskDelay>
    }
  }

  return (stat);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f002 fa30 	bl	800ca22 <pvTimerGetTimerID>
 800a5c2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d005      	beq.n	800a5d6 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	6852      	ldr	r2, [r2, #4]
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	4798      	blx	r3
  }
}
 800a5d6:	bf00      	nop
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08c      	sub	sp, #48	; 0x30
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	607a      	str	r2, [r7, #4]
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5f4:	f3ef 8305 	mrs	r3, IPSR
 800a5f8:	613b      	str	r3, [r7, #16]
  return(result);
 800a5fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d163      	bne.n	800a6c8 <osTimerNew+0xe8>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d060      	beq.n	800a6c8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a606:	2008      	movs	r0, #8
 800a608:	f002 fc7e 	bl	800cf08 <pvPortMalloc>
 800a60c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d059      	beq.n	800a6c8 <osTimerNew+0xe8>
      callb->func = func;
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a620:	7afb      	ldrb	r3, [r7, #11]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d102      	bne.n	800a62c <osTimerNew+0x4c>
        reload = pdFALSE;
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
 800a62a:	e001      	b.n	800a630 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a62c:	2301      	movs	r3, #1
 800a62e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a630:	f04f 33ff 	mov.w	r3, #4294967295
 800a634:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a636:	2300      	movs	r3, #0
 800a638:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d01c      	beq.n	800a67a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d002      	beq.n	800a64e <osTimerNew+0x6e>
          name = attr->name;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d006      	beq.n	800a664 <osTimerNew+0x84>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	2b2b      	cmp	r3, #43	; 0x2b
 800a65c:	d902      	bls.n	800a664 <osTimerNew+0x84>
          mem = 1;
 800a65e:	2301      	movs	r3, #1
 800a660:	61bb      	str	r3, [r7, #24]
 800a662:	e00c      	b.n	800a67e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d108      	bne.n	800a67e <osTimerNew+0x9e>
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d104      	bne.n	800a67e <osTimerNew+0x9e>
            mem = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	61bb      	str	r3, [r7, #24]
 800a678:	e001      	b.n	800a67e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d10c      	bne.n	800a69e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	9301      	str	r3, [sp, #4]
 800a68a:	4b12      	ldr	r3, [pc, #72]	; (800a6d4 <osTimerNew+0xf4>)
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	69fa      	ldr	r2, [r7, #28]
 800a692:	2101      	movs	r1, #1
 800a694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a696:	f001 fe1c 	bl	800c2d2 <xTimerCreateStatic>
 800a69a:	6238      	str	r0, [r7, #32]
 800a69c:	e00b      	b.n	800a6b6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d108      	bne.n	800a6b6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a6a4:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <osTimerNew+0xf4>)
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6b0:	f001 fdee 	bl	800c290 <xTimerCreate>
 800a6b4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d105      	bne.n	800a6c8 <osTimerNew+0xe8>
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <osTimerNew+0xe8>
        vPortFree (callb);
 800a6c2:	6978      	ldr	r0, [r7, #20]
 800a6c4:	f002 fcec 	bl	800d0a0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3728      	adds	r7, #40	; 0x28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	0800a5b5 	.word	0x0800a5b5

0800a6d8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6e6:	f3ef 8305 	mrs	r3, IPSR
 800a6ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <osTimerStart+0x22>
    stat = osErrorISR;
 800a6f2:	f06f 0305 	mvn.w	r3, #5
 800a6f6:	617b      	str	r3, [r7, #20]
 800a6f8:	e017      	b.n	800a72a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d103      	bne.n	800a708 <osTimerStart+0x30>
    stat = osErrorParameter;
 800a700:	f06f 0303 	mvn.w	r3, #3
 800a704:	617b      	str	r3, [r7, #20]
 800a706:	e010      	b.n	800a72a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a708:	2300      	movs	r3, #0
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	2300      	movs	r3, #0
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	2104      	movs	r1, #4
 800a712:	6938      	ldr	r0, [r7, #16]
 800a714:	f001 fe56 	bl	800c3c4 <xTimerGenericCommand>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d102      	bne.n	800a724 <osTimerStart+0x4c>
      stat = osOK;
 800a71e:	2300      	movs	r3, #0
 800a720:	617b      	str	r3, [r7, #20]
 800a722:	e002      	b.n	800a72a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a724:	f06f 0302 	mvn.w	r3, #2
 800a728:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a72a:	697b      	ldr	r3, [r7, #20]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af02      	add	r7, sp, #8
 800a73a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a740:	f3ef 8305 	mrs	r3, IPSR
 800a744:	60fb      	str	r3, [r7, #12]
  return(result);
 800a746:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <osTimerStop+0x20>
    stat = osErrorISR;
 800a74c:	f06f 0305 	mvn.w	r3, #5
 800a750:	617b      	str	r3, [r7, #20]
 800a752:	e021      	b.n	800a798 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d103      	bne.n	800a762 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800a75a:	f06f 0303 	mvn.w	r3, #3
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	e01a      	b.n	800a798 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800a762:	6938      	ldr	r0, [r7, #16]
 800a764:	f002 f934 	bl	800c9d0 <xTimerIsTimerActive>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d103      	bne.n	800a776 <osTimerStop+0x42>
      stat = osErrorResource;
 800a76e:	f06f 0302 	mvn.w	r3, #2
 800a772:	617b      	str	r3, [r7, #20]
 800a774:	e010      	b.n	800a798 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800a776:	2300      	movs	r3, #0
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	2300      	movs	r3, #0
 800a77c:	2200      	movs	r2, #0
 800a77e:	2103      	movs	r1, #3
 800a780:	6938      	ldr	r0, [r7, #16]
 800a782:	f001 fe1f 	bl	800c3c4 <xTimerGenericCommand>
 800a786:	4603      	mov	r3, r0
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d102      	bne.n	800a792 <osTimerStop+0x5e>
        stat = osOK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	617b      	str	r3, [r7, #20]
 800a790:	e002      	b.n	800a798 <osTimerStop+0x64>
      } else {
        stat = osError;
 800a792:	f04f 33ff 	mov.w	r3, #4294967295
 800a796:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a798:	697b      	ldr	r3, [r7, #20]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	4a07      	ldr	r2, [pc, #28]	; (800a7d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a7b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	4a06      	ldr	r2, [pc, #24]	; (800a7d4 <vApplicationGetIdleTaskMemory+0x30>)
 800a7ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7c2:	601a      	str	r2, [r3, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	2000026c 	.word	0x2000026c
 800a7d4:	2000032c 	.word	0x2000032c

0800a7d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	4a07      	ldr	r2, [pc, #28]	; (800a804 <vApplicationGetTimerTaskMemory+0x2c>)
 800a7e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	4a06      	ldr	r2, [pc, #24]	; (800a808 <vApplicationGetTimerTaskMemory+0x30>)
 800a7ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7f6:	601a      	str	r2, [r3, #0]
}
 800a7f8:	bf00      	nop
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr
 800a804:	2000132c 	.word	0x2000132c
 800a808:	200013ec 	.word	0x200013ec

0800a80c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f103 0208 	add.w	r2, r3, #8
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f04f 32ff 	mov.w	r2, #4294967295
 800a824:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f103 0208 	add.w	r2, r3, #8
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f103 0208 	add.w	r2, r3, #8
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a85a:	bf00      	nop
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a866:	b480      	push	{r7}
 800a868:	b085      	sub	sp, #20
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	689a      	ldr	r2, [r3, #8]
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	601a      	str	r2, [r3, #0]
}
 800a8a2:	bf00      	nop
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	b085      	sub	sp, #20
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c4:	d103      	bne.n	800a8ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	60fb      	str	r3, [r7, #12]
 800a8cc:	e00c      	b.n	800a8e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	e002      	b.n	800a8dc <vListInsert+0x2e>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d2f6      	bcs.n	800a8d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	601a      	str	r2, [r3, #0]
}
 800a914:	bf00      	nop
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	6892      	ldr	r2, [r2, #8]
 800a936:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	6852      	ldr	r2, [r2, #4]
 800a940:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d103      	bne.n	800a954 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689a      	ldr	r2, [r3, #8]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	1e5a      	subs	r2, r3, #1
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10a      	bne.n	800a99e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a99a:	bf00      	nop
 800a99c:	e7fe      	b.n	800a99c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a99e:	f002 f991 	bl	800ccc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9aa:	68f9      	ldr	r1, [r7, #12]
 800a9ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a9ae:	fb01 f303 	mul.w	r3, r1, r3
 800a9b2:	441a      	add	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	68f9      	ldr	r1, [r7, #12]
 800a9d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a9d4:	fb01 f303 	mul.w	r3, r1, r3
 800a9d8:	441a      	add	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	22ff      	movs	r2, #255	; 0xff
 800a9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	22ff      	movs	r2, #255	; 0xff
 800a9ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d114      	bne.n	800aa1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d01a      	beq.n	800aa32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	3310      	adds	r3, #16
 800aa00:	4618      	mov	r0, r3
 800aa02:	f001 f95b 	bl	800bcbc <xTaskRemoveFromEventList>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d012      	beq.n	800aa32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa0c:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <xQueueGenericReset+0xcc>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	e009      	b.n	800aa32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	3310      	adds	r3, #16
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7ff fef2 	bl	800a80c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	3324      	adds	r3, #36	; 0x24
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff feed 	bl	800a80c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa32:	f002 f977 	bl	800cd24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa36:	2301      	movs	r3, #1
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	e000ed04 	.word	0xe000ed04

0800aa44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b08e      	sub	sp, #56	; 0x38
 800aa48:	af02      	add	r7, sp, #8
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa6a:	bf00      	nop
 800aa6c:	e7fe      	b.n	800aa6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10a      	bne.n	800aa8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <xQueueGenericCreateStatic+0x52>
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <xQueueGenericCreateStatic+0x56>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e000      	b.n	800aa9c <xQueueGenericCreateStatic+0x58>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10a      	bne.n	800aab6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	623b      	str	r3, [r7, #32]
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d102      	bne.n	800aac2 <xQueueGenericCreateStatic+0x7e>
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <xQueueGenericCreateStatic+0x82>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e000      	b.n	800aac8 <xQueueGenericCreateStatic+0x84>
 800aac6:	2300      	movs	r3, #0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10a      	bne.n	800aae2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	61fb      	str	r3, [r7, #28]
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aae2:	2350      	movs	r3, #80	; 0x50
 800aae4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b50      	cmp	r3, #80	; 0x50
 800aaea:	d00a      	beq.n	800ab02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	61bb      	str	r3, [r7, #24]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ab02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ab08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00d      	beq.n	800ab2a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f000 f805 	bl	800ab34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3730      	adds	r7, #48	; 0x30
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
 800ab40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d103      	bne.n	800ab50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	601a      	str	r2, [r3, #0]
 800ab4e:	e002      	b.n	800ab56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab62:	2101      	movs	r1, #1
 800ab64:	69b8      	ldr	r0, [r7, #24]
 800ab66:	f7ff ff05 	bl	800a974 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	78fa      	ldrb	r2, [r7, #3]
 800ab6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab72:	bf00      	nop
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08e      	sub	sp, #56	; 0x38
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
 800ab88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <xQueueGenericSend+0x32>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abaa:	bf00      	nop
 800abac:	e7fe      	b.n	800abac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d103      	bne.n	800abbc <xQueueGenericSend+0x40>
 800abb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d101      	bne.n	800abc0 <xQueueGenericSend+0x44>
 800abbc:	2301      	movs	r3, #1
 800abbe:	e000      	b.n	800abc2 <xQueueGenericSend+0x46>
 800abc0:	2300      	movs	r3, #0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10a      	bne.n	800abdc <xQueueGenericSend+0x60>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abd8:	bf00      	nop
 800abda:	e7fe      	b.n	800abda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d103      	bne.n	800abea <xQueueGenericSend+0x6e>
 800abe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d101      	bne.n	800abee <xQueueGenericSend+0x72>
 800abea:	2301      	movs	r3, #1
 800abec:	e000      	b.n	800abf0 <xQueueGenericSend+0x74>
 800abee:	2300      	movs	r3, #0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <xQueueGenericSend+0x8e>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	623b      	str	r3, [r7, #32]
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac0a:	f001 fa19 	bl	800c040 <xTaskGetSchedulerState>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d102      	bne.n	800ac1a <xQueueGenericSend+0x9e>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <xQueueGenericSend+0xa2>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e000      	b.n	800ac20 <xQueueGenericSend+0xa4>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10a      	bne.n	800ac3a <xQueueGenericSend+0xbe>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	61fb      	str	r3, [r7, #28]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac3a:	f002 f843 	bl	800ccc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d302      	bcc.n	800ac50 <xQueueGenericSend+0xd4>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d129      	bne.n	800aca4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	68b9      	ldr	r1, [r7, #8]
 800ac54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac56:	f000 fa0b 	bl	800b070 <prvCopyDataToQueue>
 800ac5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d010      	beq.n	800ac86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac66:	3324      	adds	r3, #36	; 0x24
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f001 f827 	bl	800bcbc <xTaskRemoveFromEventList>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d013      	beq.n	800ac9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac74:	4b3f      	ldr	r3, [pc, #252]	; (800ad74 <xQueueGenericSend+0x1f8>)
 800ac76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac7a:	601a      	str	r2, [r3, #0]
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	e00a      	b.n	800ac9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d007      	beq.n	800ac9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac8c:	4b39      	ldr	r3, [pc, #228]	; (800ad74 <xQueueGenericSend+0x1f8>)
 800ac8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac9c:	f002 f842 	bl	800cd24 <vPortExitCritical>
				return pdPASS;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e063      	b.n	800ad6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d103      	bne.n	800acb2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acaa:	f002 f83b 	bl	800cd24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	e05c      	b.n	800ad6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d106      	bne.n	800acc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acb8:	f107 0314 	add.w	r3, r7, #20
 800acbc:	4618      	mov	r0, r3
 800acbe:	f001 f861 	bl	800bd84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acc2:	2301      	movs	r3, #1
 800acc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acc6:	f002 f82d 	bl	800cd24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acca:	f000 fda1 	bl	800b810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acce:	f001 fff9 	bl	800ccc4 <vPortEnterCritical>
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acd8:	b25b      	sxtb	r3, r3
 800acda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acde:	d103      	bne.n	800ace8 <xQueueGenericSend+0x16c>
 800ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acee:	b25b      	sxtb	r3, r3
 800acf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf4:	d103      	bne.n	800acfe <xQueueGenericSend+0x182>
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acfe:	f002 f811 	bl	800cd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad02:	1d3a      	adds	r2, r7, #4
 800ad04:	f107 0314 	add.w	r3, r7, #20
 800ad08:	4611      	mov	r1, r2
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 f850 	bl	800bdb0 <xTaskCheckForTimeOut>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d124      	bne.n	800ad60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ad16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad18:	f000 faa2 	bl	800b260 <prvIsQueueFull>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d018      	beq.n	800ad54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	3310      	adds	r3, #16
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	4611      	mov	r1, r2
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 ff76 	bl	800bc1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad32:	f000 fa2d 	bl	800b190 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad36:	f000 fd79 	bl	800b82c <xTaskResumeAll>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f47f af7c 	bne.w	800ac3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ad42:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <xQueueGenericSend+0x1f8>)
 800ad44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	e772      	b.n	800ac3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ad54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad56:	f000 fa1b 	bl	800b190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad5a:	f000 fd67 	bl	800b82c <xTaskResumeAll>
 800ad5e:	e76c      	b.n	800ac3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad62:	f000 fa15 	bl	800b190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad66:	f000 fd61 	bl	800b82c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3738      	adds	r7, #56	; 0x38
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	e000ed04 	.word	0xe000ed04

0800ad78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b090      	sub	sp, #64	; 0x40
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d103      	bne.n	800adb4 <xQueueGenericSendFromISR+0x3c>
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <xQueueGenericSendFromISR+0x40>
 800adb4:	2301      	movs	r3, #1
 800adb6:	e000      	b.n	800adba <xQueueGenericSendFromISR+0x42>
 800adb8:	2300      	movs	r3, #0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2b02      	cmp	r3, #2
 800add8:	d103      	bne.n	800ade2 <xQueueGenericSendFromISR+0x6a>
 800adda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800addc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d101      	bne.n	800ade6 <xQueueGenericSendFromISR+0x6e>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e000      	b.n	800ade8 <xQueueGenericSendFromISR+0x70>
 800ade6:	2300      	movs	r3, #0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10a      	bne.n	800ae02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	623b      	str	r3, [r7, #32]
}
 800adfe:	bf00      	nop
 800ae00:	e7fe      	b.n	800ae00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae02:	f002 f841 	bl	800ce88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ae06:	f3ef 8211 	mrs	r2, BASEPRI
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	61fa      	str	r2, [r7, #28]
 800ae1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ae1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d302      	bcc.n	800ae34 <xQueueGenericSendFromISR+0xbc>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d12f      	bne.n	800ae94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	68b9      	ldr	r1, [r7, #8]
 800ae48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae4a:	f000 f911 	bl	800b070 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ae52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae56:	d112      	bne.n	800ae7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d016      	beq.n	800ae8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae62:	3324      	adds	r3, #36	; 0x24
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 ff29 	bl	800bcbc <xTaskRemoveFromEventList>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00e      	beq.n	800ae8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00b      	beq.n	800ae8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]
 800ae7c:	e007      	b.n	800ae8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae82:	3301      	adds	r3, #1
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	b25a      	sxtb	r2, r3
 800ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ae92:	e001      	b.n	800ae98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae94:	2300      	movs	r3, #0
 800ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aea2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3740      	adds	r7, #64	; 0x40
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
	...

0800aeb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08c      	sub	sp, #48	; 0x30
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aebc:	2300      	movs	r3, #0
 800aebe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10a      	bne.n	800aee0 <xQueueReceive+0x30>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	623b      	str	r3, [r7, #32]
}
 800aedc:	bf00      	nop
 800aede:	e7fe      	b.n	800aede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d103      	bne.n	800aeee <xQueueReceive+0x3e>
 800aee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d101      	bne.n	800aef2 <xQueueReceive+0x42>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e000      	b.n	800aef4 <xQueueReceive+0x44>
 800aef2:	2300      	movs	r3, #0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10a      	bne.n	800af0e <xQueueReceive+0x5e>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	61fb      	str	r3, [r7, #28]
}
 800af0a:	bf00      	nop
 800af0c:	e7fe      	b.n	800af0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af0e:	f001 f897 	bl	800c040 <xTaskGetSchedulerState>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <xQueueReceive+0x6e>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d101      	bne.n	800af22 <xQueueReceive+0x72>
 800af1e:	2301      	movs	r3, #1
 800af20:	e000      	b.n	800af24 <xQueueReceive+0x74>
 800af22:	2300      	movs	r3, #0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d10a      	bne.n	800af3e <xQueueReceive+0x8e>
	__asm volatile
 800af28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2c:	f383 8811 	msr	BASEPRI, r3
 800af30:	f3bf 8f6f 	isb	sy
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	61bb      	str	r3, [r7, #24]
}
 800af3a:	bf00      	nop
 800af3c:	e7fe      	b.n	800af3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af3e:	f001 fec1 	bl	800ccc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d01f      	beq.n	800af8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af4e:	68b9      	ldr	r1, [r7, #8]
 800af50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af52:	f000 f8f7 	bl	800b144 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af58:	1e5a      	subs	r2, r3, #1
 800af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00f      	beq.n	800af86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	3310      	adds	r3, #16
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fea6 	bl	800bcbc <xTaskRemoveFromEventList>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d007      	beq.n	800af86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af76:	4b3d      	ldr	r3, [pc, #244]	; (800b06c <xQueueReceive+0x1bc>)
 800af78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af7c:	601a      	str	r2, [r3, #0]
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af86:	f001 fecd 	bl	800cd24 <vPortExitCritical>
				return pdPASS;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e069      	b.n	800b062 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d103      	bne.n	800af9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af94:	f001 fec6 	bl	800cd24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af98:	2300      	movs	r3, #0
 800af9a:	e062      	b.n	800b062 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afa2:	f107 0310 	add.w	r3, r7, #16
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 feec 	bl	800bd84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afac:	2301      	movs	r3, #1
 800afae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afb0:	f001 feb8 	bl	800cd24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afb4:	f000 fc2c 	bl	800b810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afb8:	f001 fe84 	bl	800ccc4 <vPortEnterCritical>
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afc2:	b25b      	sxtb	r3, r3
 800afc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc8:	d103      	bne.n	800afd2 <xQueueReceive+0x122>
 800afca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afd8:	b25b      	sxtb	r3, r3
 800afda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afde:	d103      	bne.n	800afe8 <xQueueReceive+0x138>
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afe8:	f001 fe9c 	bl	800cd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afec:	1d3a      	adds	r2, r7, #4
 800afee:	f107 0310 	add.w	r3, r7, #16
 800aff2:	4611      	mov	r1, r2
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 fedb 	bl	800bdb0 <xTaskCheckForTimeOut>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d123      	bne.n	800b048 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b002:	f000 f917 	bl	800b234 <prvIsQueueEmpty>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d017      	beq.n	800b03c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	3324      	adds	r3, #36	; 0x24
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	4611      	mov	r1, r2
 800b014:	4618      	mov	r0, r3
 800b016:	f000 fe01 	bl	800bc1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b01c:	f000 f8b8 	bl	800b190 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b020:	f000 fc04 	bl	800b82c <xTaskResumeAll>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d189      	bne.n	800af3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b02a:	4b10      	ldr	r3, [pc, #64]	; (800b06c <xQueueReceive+0x1bc>)
 800b02c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b030:	601a      	str	r2, [r3, #0]
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	e780      	b.n	800af3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b03c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b03e:	f000 f8a7 	bl	800b190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b042:	f000 fbf3 	bl	800b82c <xTaskResumeAll>
 800b046:	e77a      	b.n	800af3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b04a:	f000 f8a1 	bl	800b190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b04e:	f000 fbed 	bl	800b82c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b054:	f000 f8ee 	bl	800b234 <prvIsQueueEmpty>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f43f af6f 	beq.w	800af3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b062:	4618      	mov	r0, r3
 800b064:	3730      	adds	r7, #48	; 0x30
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	e000ed04 	.word	0xe000ed04

0800b070 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b084:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10d      	bne.n	800b0aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d14d      	bne.n	800b132 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 ffee 	bl	800c07c <xTaskPriorityDisinherit>
 800b0a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	609a      	str	r2, [r3, #8]
 800b0a8:	e043      	b.n	800b132 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d119      	bne.n	800b0e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6858      	ldr	r0, [r3, #4]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	f002 fa31 	bl	800d522 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c8:	441a      	add	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	685a      	ldr	r2, [r3, #4]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d32b      	bcc.n	800b132 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	605a      	str	r2, [r3, #4]
 800b0e2:	e026      	b.n	800b132 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	68d8      	ldr	r0, [r3, #12]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	f002 fa17 	bl	800d522 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	68da      	ldr	r2, [r3, #12]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fc:	425b      	negs	r3, r3
 800b0fe:	441a      	add	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	68da      	ldr	r2, [r3, #12]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d207      	bcs.n	800b120 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b118:	425b      	negs	r3, r3
 800b11a:	441a      	add	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b02      	cmp	r3, #2
 800b124:	d105      	bne.n	800b132 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	3b01      	subs	r3, #1
 800b130:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	1c5a      	adds	r2, r3, #1
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b13a:	697b      	ldr	r3, [r7, #20]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b152:	2b00      	cmp	r3, #0
 800b154:	d018      	beq.n	800b188 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68da      	ldr	r2, [r3, #12]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15e:	441a      	add	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68da      	ldr	r2, [r3, #12]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d303      	bcc.n	800b178 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68d9      	ldr	r1, [r3, #12]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	461a      	mov	r2, r3
 800b182:	6838      	ldr	r0, [r7, #0]
 800b184:	f002 f9cd 	bl	800d522 <memcpy>
	}
}
 800b188:	bf00      	nop
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b198:	f001 fd94 	bl	800ccc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1a4:	e011      	b.n	800b1ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d012      	beq.n	800b1d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	3324      	adds	r3, #36	; 0x24
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f000 fd82 	bl	800bcbc <xTaskRemoveFromEventList>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b1be:	f000 fe59 	bl	800be74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	dce9      	bgt.n	800b1a6 <prvUnlockQueue+0x16>
 800b1d2:	e000      	b.n	800b1d6 <prvUnlockQueue+0x46>
					break;
 800b1d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	22ff      	movs	r2, #255	; 0xff
 800b1da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b1de:	f001 fda1 	bl	800cd24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b1e2:	f001 fd6f 	bl	800ccc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1ee:	e011      	b.n	800b214 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d012      	beq.n	800b21e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3310      	adds	r3, #16
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 fd5d 	bl	800bcbc <xTaskRemoveFromEventList>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b208:	f000 fe34 	bl	800be74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	3b01      	subs	r3, #1
 800b210:	b2db      	uxtb	r3, r3
 800b212:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dce9      	bgt.n	800b1f0 <prvUnlockQueue+0x60>
 800b21c:	e000      	b.n	800b220 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b21e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	22ff      	movs	r2, #255	; 0xff
 800b224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b228:	f001 fd7c 	bl	800cd24 <vPortExitCritical>
}
 800b22c:	bf00      	nop
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b23c:	f001 fd42 	bl	800ccc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b244:	2b00      	cmp	r3, #0
 800b246:	d102      	bne.n	800b24e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b248:	2301      	movs	r3, #1
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	e001      	b.n	800b252 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b24e:	2300      	movs	r3, #0
 800b250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b252:	f001 fd67 	bl	800cd24 <vPortExitCritical>

	return xReturn;
 800b256:	68fb      	ldr	r3, [r7, #12]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b268:	f001 fd2c 	bl	800ccc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b274:	429a      	cmp	r2, r3
 800b276:	d102      	bne.n	800b27e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b278:	2301      	movs	r3, #1
 800b27a:	60fb      	str	r3, [r7, #12]
 800b27c:	e001      	b.n	800b282 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b27e:	2300      	movs	r3, #0
 800b280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b282:	f001 fd4f 	bl	800cd24 <vPortExitCritical>

	return xReturn;
 800b286:	68fb      	ldr	r3, [r7, #12]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b29a:	2300      	movs	r3, #0
 800b29c:	60fb      	str	r3, [r7, #12]
 800b29e:	e014      	b.n	800b2ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b2a0:	4a0f      	ldr	r2, [pc, #60]	; (800b2e0 <vQueueAddToRegistry+0x50>)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10b      	bne.n	800b2c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b2ac:	490c      	ldr	r1, [pc, #48]	; (800b2e0 <vQueueAddToRegistry+0x50>)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b2b6:	4a0a      	ldr	r2, [pc, #40]	; (800b2e0 <vQueueAddToRegistry+0x50>)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	4413      	add	r3, r2
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b2c2:	e006      	b.n	800b2d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	60fb      	str	r3, [r7, #12]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2b07      	cmp	r3, #7
 800b2ce:	d9e7      	bls.n	800b2a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b2d0:	bf00      	nop
 800b2d2:	bf00      	nop
 800b2d4:	3714      	adds	r7, #20
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	20006358 	.word	0x20006358

0800b2e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2f4:	f001 fce6 	bl	800ccc4 <vPortEnterCritical>
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2fe:	b25b      	sxtb	r3, r3
 800b300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b304:	d103      	bne.n	800b30e <vQueueWaitForMessageRestricted+0x2a>
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b314:	b25b      	sxtb	r3, r3
 800b316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b31a:	d103      	bne.n	800b324 <vQueueWaitForMessageRestricted+0x40>
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b324:	f001 fcfe 	bl	800cd24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d106      	bne.n	800b33e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	3324      	adds	r3, #36	; 0x24
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	68b9      	ldr	r1, [r7, #8]
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 fc93 	bl	800bc64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b33e:	6978      	ldr	r0, [r7, #20]
 800b340:	f7ff ff26 	bl	800b190 <prvUnlockQueue>
	}
 800b344:	bf00      	nop
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b08e      	sub	sp, #56	; 0x38
 800b350:	af04      	add	r7, sp, #16
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10a      	bne.n	800b376 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	623b      	str	r3, [r7, #32]
}
 800b372:	bf00      	nop
 800b374:	e7fe      	b.n	800b374 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10a      	bne.n	800b392 <xTaskCreateStatic+0x46>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	61fb      	str	r3, [r7, #28]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b392:	23c0      	movs	r3, #192	; 0xc0
 800b394:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	2bc0      	cmp	r3, #192	; 0xc0
 800b39a:	d00a      	beq.n	800b3b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	61bb      	str	r3, [r7, #24]
}
 800b3ae:	bf00      	nop
 800b3b0:	e7fe      	b.n	800b3b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d01e      	beq.n	800b3f8 <xTaskCreateStatic+0xac>
 800b3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d01b      	beq.n	800b3f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	9303      	str	r3, [sp, #12]
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d8:	9302      	str	r3, [sp, #8]
 800b3da:	f107 0314 	add.w	r3, r7, #20
 800b3de:	9301      	str	r3, [sp, #4]
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	68b9      	ldr	r1, [r7, #8]
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 f850 	bl	800b490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3f2:	f000 f8f7 	bl	800b5e4 <prvAddNewTaskToReadyList>
 800b3f6:	e001      	b.n	800b3fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3fc:	697b      	ldr	r3, [r7, #20]
	}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3728      	adds	r7, #40	; 0x28
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b406:	b580      	push	{r7, lr}
 800b408:	b08c      	sub	sp, #48	; 0x30
 800b40a:	af04      	add	r7, sp, #16
 800b40c:	60f8      	str	r0, [r7, #12]
 800b40e:	60b9      	str	r1, [r7, #8]
 800b410:	603b      	str	r3, [r7, #0]
 800b412:	4613      	mov	r3, r2
 800b414:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b416:	88fb      	ldrh	r3, [r7, #6]
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4618      	mov	r0, r3
 800b41c:	f001 fd74 	bl	800cf08 <pvPortMalloc>
 800b420:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00e      	beq.n	800b446 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b428:	20c0      	movs	r0, #192	; 0xc0
 800b42a:	f001 fd6d 	bl	800cf08 <pvPortMalloc>
 800b42e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d003      	beq.n	800b43e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	697a      	ldr	r2, [r7, #20]
 800b43a:	631a      	str	r2, [r3, #48]	; 0x30
 800b43c:	e005      	b.n	800b44a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b43e:	6978      	ldr	r0, [r7, #20]
 800b440:	f001 fe2e 	bl	800d0a0 <vPortFree>
 800b444:	e001      	b.n	800b44a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b446:	2300      	movs	r3, #0
 800b448:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d017      	beq.n	800b480 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b458:	88fa      	ldrh	r2, [r7, #6]
 800b45a:	2300      	movs	r3, #0
 800b45c:	9303      	str	r3, [sp, #12]
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	9302      	str	r3, [sp, #8]
 800b462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	68b9      	ldr	r1, [r7, #8]
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f000 f80e 	bl	800b490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b474:	69f8      	ldr	r0, [r7, #28]
 800b476:	f000 f8b5 	bl	800b5e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b47a:	2301      	movs	r3, #1
 800b47c:	61bb      	str	r3, [r7, #24]
 800b47e:	e002      	b.n	800b486 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b480:	f04f 33ff 	mov.w	r3, #4294967295
 800b484:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b486:	69bb      	ldr	r3, [r7, #24]
	}
 800b488:	4618      	mov	r0, r3
 800b48a:	3720      	adds	r7, #32
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
 800b49c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	21a5      	movs	r1, #165	; 0xa5
 800b4aa:	f002 f848 	bl	800d53e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4413      	add	r3, r2
 800b4be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	f023 0307 	bic.w	r3, r3, #7
 800b4c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	f003 0307 	and.w	r3, r3, #7
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	617b      	str	r3, [r7, #20]
}
 800b4e4:	bf00      	nop
 800b4e6:	e7fe      	b.n	800b4e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d01f      	beq.n	800b52e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	61fb      	str	r3, [r7, #28]
 800b4f2:	e012      	b.n	800b51a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4f4:	68ba      	ldr	r2, [r7, #8]
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	7819      	ldrb	r1, [r3, #0]
 800b4fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	4413      	add	r3, r2
 800b502:	3334      	adds	r3, #52	; 0x34
 800b504:	460a      	mov	r2, r1
 800b506:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	4413      	add	r3, r2
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d006      	beq.n	800b522 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	3301      	adds	r3, #1
 800b518:	61fb      	str	r3, [r7, #28]
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	2b0f      	cmp	r3, #15
 800b51e:	d9e9      	bls.n	800b4f4 <prvInitialiseNewTask+0x64>
 800b520:	e000      	b.n	800b524 <prvInitialiseNewTask+0x94>
			{
				break;
 800b522:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b52c:	e003      	b.n	800b536 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b538:	2b37      	cmp	r3, #55	; 0x37
 800b53a:	d901      	bls.n	800b540 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b53c:	2337      	movs	r3, #55	; 0x37
 800b53e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b544:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b54a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54e:	2200      	movs	r2, #0
 800b550:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	3304      	adds	r3, #4
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff f978 	bl	800a84c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	3318      	adds	r3, #24
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff f973 	bl	800a84c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b56a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b574:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b57a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57e:	2200      	movs	r2, #0
 800b580:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	2200      	movs	r2, #0
 800b586:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	3358      	adds	r3, #88	; 0x58
 800b596:	2260      	movs	r2, #96	; 0x60
 800b598:	2100      	movs	r1, #0
 800b59a:	4618      	mov	r0, r3
 800b59c:	f001 ffcf 	bl	800d53e <memset>
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a2:	4a0d      	ldr	r2, [pc, #52]	; (800b5d8 <prvInitialiseNewTask+0x148>)
 800b5a4:	65da      	str	r2, [r3, #92]	; 0x5c
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a8:	4a0c      	ldr	r2, [pc, #48]	; (800b5dc <prvInitialiseNewTask+0x14c>)
 800b5aa:	661a      	str	r2, [r3, #96]	; 0x60
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ae:	4a0c      	ldr	r2, [pc, #48]	; (800b5e0 <prvInitialiseNewTask+0x150>)
 800b5b0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	68f9      	ldr	r1, [r7, #12]
 800b5b6:	69b8      	ldr	r0, [r7, #24]
 800b5b8:	f001 fa54 	bl	800ca64 <pxPortInitialiseStack>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5ce:	bf00      	nop
 800b5d0:	3720      	adds	r7, #32
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	080136bc 	.word	0x080136bc
 800b5dc:	080136dc 	.word	0x080136dc
 800b5e0:	0801369c 	.word	0x0801369c

0800b5e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5ec:	f001 fb6a 	bl	800ccc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5f0:	4b2d      	ldr	r3, [pc, #180]	; (800b6a8 <prvAddNewTaskToReadyList+0xc4>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	4a2c      	ldr	r2, [pc, #176]	; (800b6a8 <prvAddNewTaskToReadyList+0xc4>)
 800b5f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5fa:	4b2c      	ldr	r3, [pc, #176]	; (800b6ac <prvAddNewTaskToReadyList+0xc8>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d109      	bne.n	800b616 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b602:	4a2a      	ldr	r2, [pc, #168]	; (800b6ac <prvAddNewTaskToReadyList+0xc8>)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b608:	4b27      	ldr	r3, [pc, #156]	; (800b6a8 <prvAddNewTaskToReadyList+0xc4>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d110      	bne.n	800b632 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b610:	f000 fc54 	bl	800bebc <prvInitialiseTaskLists>
 800b614:	e00d      	b.n	800b632 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b616:	4b26      	ldr	r3, [pc, #152]	; (800b6b0 <prvAddNewTaskToReadyList+0xcc>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d109      	bne.n	800b632 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b61e:	4b23      	ldr	r3, [pc, #140]	; (800b6ac <prvAddNewTaskToReadyList+0xc8>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b628:	429a      	cmp	r2, r3
 800b62a:	d802      	bhi.n	800b632 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b62c:	4a1f      	ldr	r2, [pc, #124]	; (800b6ac <prvAddNewTaskToReadyList+0xc8>)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b632:	4b20      	ldr	r3, [pc, #128]	; (800b6b4 <prvAddNewTaskToReadyList+0xd0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	3301      	adds	r3, #1
 800b638:	4a1e      	ldr	r2, [pc, #120]	; (800b6b4 <prvAddNewTaskToReadyList+0xd0>)
 800b63a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b63c:	4b1d      	ldr	r3, [pc, #116]	; (800b6b4 <prvAddNewTaskToReadyList+0xd0>)
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b648:	4b1b      	ldr	r3, [pc, #108]	; (800b6b8 <prvAddNewTaskToReadyList+0xd4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d903      	bls.n	800b658 <prvAddNewTaskToReadyList+0x74>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	4a18      	ldr	r2, [pc, #96]	; (800b6b8 <prvAddNewTaskToReadyList+0xd4>)
 800b656:	6013      	str	r3, [r2, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65c:	4613      	mov	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	4413      	add	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4a15      	ldr	r2, [pc, #84]	; (800b6bc <prvAddNewTaskToReadyList+0xd8>)
 800b666:	441a      	add	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3304      	adds	r3, #4
 800b66c:	4619      	mov	r1, r3
 800b66e:	4610      	mov	r0, r2
 800b670:	f7ff f8f9 	bl	800a866 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b674:	f001 fb56 	bl	800cd24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b678:	4b0d      	ldr	r3, [pc, #52]	; (800b6b0 <prvAddNewTaskToReadyList+0xcc>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00e      	beq.n	800b69e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b680:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <prvAddNewTaskToReadyList+0xc8>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d207      	bcs.n	800b69e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b68e:	4b0c      	ldr	r3, [pc, #48]	; (800b6c0 <prvAddNewTaskToReadyList+0xdc>)
 800b690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b69e:	bf00      	nop
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	200038c0 	.word	0x200038c0
 800b6ac:	200033ec 	.word	0x200033ec
 800b6b0:	200038cc 	.word	0x200038cc
 800b6b4:	200038dc 	.word	0x200038dc
 800b6b8:	200038c8 	.word	0x200038c8
 800b6bc:	200033f0 	.word	0x200033f0
 800b6c0:	e000ed04 	.word	0xe000ed04

0800b6c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d017      	beq.n	800b706 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6d6:	4b13      	ldr	r3, [pc, #76]	; (800b724 <vTaskDelay+0x60>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <vTaskDelay+0x30>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	60bb      	str	r3, [r7, #8]
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b6f4:	f000 f88c 	bl	800b810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fd2c 	bl	800c158 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b700:	f000 f894 	bl	800b82c <xTaskResumeAll>
 800b704:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d107      	bne.n	800b71c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b70c:	4b06      	ldr	r3, [pc, #24]	; (800b728 <vTaskDelay+0x64>)
 800b70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b71c:	bf00      	nop
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	200038e8 	.word	0x200038e8
 800b728:	e000ed04 	.word	0xe000ed04

0800b72c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b08a      	sub	sp, #40	; 0x28
 800b730:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b732:	2300      	movs	r3, #0
 800b734:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b736:	2300      	movs	r3, #0
 800b738:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b73a:	463a      	mov	r2, r7
 800b73c:	1d39      	adds	r1, r7, #4
 800b73e:	f107 0308 	add.w	r3, r7, #8
 800b742:	4618      	mov	r0, r3
 800b744:	f7ff f82e 	bl	800a7a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b748:	6839      	ldr	r1, [r7, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	9202      	str	r2, [sp, #8]
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	2300      	movs	r3, #0
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	2300      	movs	r3, #0
 800b758:	460a      	mov	r2, r1
 800b75a:	4925      	ldr	r1, [pc, #148]	; (800b7f0 <vTaskStartScheduler+0xc4>)
 800b75c:	4825      	ldr	r0, [pc, #148]	; (800b7f4 <vTaskStartScheduler+0xc8>)
 800b75e:	f7ff fdf5 	bl	800b34c <xTaskCreateStatic>
 800b762:	4603      	mov	r3, r0
 800b764:	4a24      	ldr	r2, [pc, #144]	; (800b7f8 <vTaskStartScheduler+0xcc>)
 800b766:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b768:	4b23      	ldr	r3, [pc, #140]	; (800b7f8 <vTaskStartScheduler+0xcc>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b770:	2301      	movs	r3, #1
 800b772:	617b      	str	r3, [r7, #20]
 800b774:	e001      	b.n	800b77a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b776:	2300      	movs	r3, #0
 800b778:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d102      	bne.n	800b786 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b780:	f000 fd3e 	bl	800c200 <xTimerCreateTimerTask>
 800b784:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d11d      	bne.n	800b7c8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	613b      	str	r3, [r7, #16]
}
 800b79e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b7a0:	4b16      	ldr	r3, [pc, #88]	; (800b7fc <vTaskStartScheduler+0xd0>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3358      	adds	r3, #88	; 0x58
 800b7a6:	4a16      	ldr	r2, [pc, #88]	; (800b800 <vTaskStartScheduler+0xd4>)
 800b7a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7aa:	4b16      	ldr	r3, [pc, #88]	; (800b804 <vTaskStartScheduler+0xd8>)
 800b7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7b2:	4b15      	ldr	r3, [pc, #84]	; (800b808 <vTaskStartScheduler+0xdc>)
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b7b8:	4b14      	ldr	r3, [pc, #80]	; (800b80c <vTaskStartScheduler+0xe0>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b7be:	f7f5 fc15 	bl	8000fec <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b7c2:	f001 f9dd 	bl	800cb80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b7c6:	e00e      	b.n	800b7e6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ce:	d10a      	bne.n	800b7e6 <vTaskStartScheduler+0xba>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	60fb      	str	r3, [r7, #12]
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <vTaskStartScheduler+0xb8>
}
 800b7e6:	bf00      	nop
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	08013608 	.word	0x08013608
 800b7f4:	0800be8d 	.word	0x0800be8d
 800b7f8:	200038e4 	.word	0x200038e4
 800b7fc:	200033ec 	.word	0x200033ec
 800b800:	20000040 	.word	0x20000040
 800b804:	200038e0 	.word	0x200038e0
 800b808:	200038cc 	.word	0x200038cc
 800b80c:	200038c4 	.word	0x200038c4

0800b810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b810:	b480      	push	{r7}
 800b812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b814:	4b04      	ldr	r3, [pc, #16]	; (800b828 <vTaskSuspendAll+0x18>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3301      	adds	r3, #1
 800b81a:	4a03      	ldr	r2, [pc, #12]	; (800b828 <vTaskSuspendAll+0x18>)
 800b81c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b81e:	bf00      	nop
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	200038e8 	.word	0x200038e8

0800b82c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b832:	2300      	movs	r3, #0
 800b834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b836:	2300      	movs	r3, #0
 800b838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b83a:	4b42      	ldr	r3, [pc, #264]	; (800b944 <xTaskResumeAll+0x118>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10a      	bne.n	800b858 <xTaskResumeAll+0x2c>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	603b      	str	r3, [r7, #0]
}
 800b854:	bf00      	nop
 800b856:	e7fe      	b.n	800b856 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b858:	f001 fa34 	bl	800ccc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b85c:	4b39      	ldr	r3, [pc, #228]	; (800b944 <xTaskResumeAll+0x118>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	3b01      	subs	r3, #1
 800b862:	4a38      	ldr	r2, [pc, #224]	; (800b944 <xTaskResumeAll+0x118>)
 800b864:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b866:	4b37      	ldr	r3, [pc, #220]	; (800b944 <xTaskResumeAll+0x118>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d162      	bne.n	800b934 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b86e:	4b36      	ldr	r3, [pc, #216]	; (800b948 <xTaskResumeAll+0x11c>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d05e      	beq.n	800b934 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b876:	e02f      	b.n	800b8d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b878:	4b34      	ldr	r3, [pc, #208]	; (800b94c <xTaskResumeAll+0x120>)
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	3318      	adds	r3, #24
 800b884:	4618      	mov	r0, r3
 800b886:	f7ff f84b 	bl	800a920 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3304      	adds	r3, #4
 800b88e:	4618      	mov	r0, r3
 800b890:	f7ff f846 	bl	800a920 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b898:	4b2d      	ldr	r3, [pc, #180]	; (800b950 <xTaskResumeAll+0x124>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d903      	bls.n	800b8a8 <xTaskResumeAll+0x7c>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a4:	4a2a      	ldr	r2, [pc, #168]	; (800b950 <xTaskResumeAll+0x124>)
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4a27      	ldr	r2, [pc, #156]	; (800b954 <xTaskResumeAll+0x128>)
 800b8b6:	441a      	add	r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4610      	mov	r0, r2
 800b8c0:	f7fe ffd1 	bl	800a866 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c8:	4b23      	ldr	r3, [pc, #140]	; (800b958 <xTaskResumeAll+0x12c>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d302      	bcc.n	800b8d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b8d2:	4b22      	ldr	r3, [pc, #136]	; (800b95c <xTaskResumeAll+0x130>)
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8d8:	4b1c      	ldr	r3, [pc, #112]	; (800b94c <xTaskResumeAll+0x120>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d1cb      	bne.n	800b878 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8e6:	f000 fb8b 	bl	800c000 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8ea:	4b1d      	ldr	r3, [pc, #116]	; (800b960 <xTaskResumeAll+0x134>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d010      	beq.n	800b918 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8f6:	f000 f847 	bl	800b988 <xTaskIncrementTick>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b900:	4b16      	ldr	r3, [pc, #88]	; (800b95c <xTaskResumeAll+0x130>)
 800b902:	2201      	movs	r2, #1
 800b904:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3b01      	subs	r3, #1
 800b90a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d1f1      	bne.n	800b8f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b912:	4b13      	ldr	r3, [pc, #76]	; (800b960 <xTaskResumeAll+0x134>)
 800b914:	2200      	movs	r2, #0
 800b916:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b918:	4b10      	ldr	r3, [pc, #64]	; (800b95c <xTaskResumeAll+0x130>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d009      	beq.n	800b934 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b920:	2301      	movs	r3, #1
 800b922:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b924:	4b0f      	ldr	r3, [pc, #60]	; (800b964 <xTaskResumeAll+0x138>)
 800b926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b934:	f001 f9f6 	bl	800cd24 <vPortExitCritical>

	return xAlreadyYielded;
 800b938:	68bb      	ldr	r3, [r7, #8]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	200038e8 	.word	0x200038e8
 800b948:	200038c0 	.word	0x200038c0
 800b94c:	20003880 	.word	0x20003880
 800b950:	200038c8 	.word	0x200038c8
 800b954:	200033f0 	.word	0x200033f0
 800b958:	200033ec 	.word	0x200033ec
 800b95c:	200038d4 	.word	0x200038d4
 800b960:	200038d0 	.word	0x200038d0
 800b964:	e000ed04 	.word	0xe000ed04

0800b968 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b96e:	4b05      	ldr	r3, [pc, #20]	; (800b984 <xTaskGetTickCount+0x1c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b974:	687b      	ldr	r3, [r7, #4]
}
 800b976:	4618      	mov	r0, r3
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	200038c4 	.word	0x200038c4

0800b988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b992:	4b4f      	ldr	r3, [pc, #316]	; (800bad0 <xTaskIncrementTick+0x148>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	f040 808f 	bne.w	800baba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b99c:	4b4d      	ldr	r3, [pc, #308]	; (800bad4 <xTaskIncrementTick+0x14c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9a4:	4a4b      	ldr	r2, [pc, #300]	; (800bad4 <xTaskIncrementTick+0x14c>)
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d120      	bne.n	800b9f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9b0:	4b49      	ldr	r3, [pc, #292]	; (800bad8 <xTaskIncrementTick+0x150>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00a      	beq.n	800b9d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	603b      	str	r3, [r7, #0]
}
 800b9cc:	bf00      	nop
 800b9ce:	e7fe      	b.n	800b9ce <xTaskIncrementTick+0x46>
 800b9d0:	4b41      	ldr	r3, [pc, #260]	; (800bad8 <xTaskIncrementTick+0x150>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	60fb      	str	r3, [r7, #12]
 800b9d6:	4b41      	ldr	r3, [pc, #260]	; (800badc <xTaskIncrementTick+0x154>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a3f      	ldr	r2, [pc, #252]	; (800bad8 <xTaskIncrementTick+0x150>)
 800b9dc:	6013      	str	r3, [r2, #0]
 800b9de:	4a3f      	ldr	r2, [pc, #252]	; (800badc <xTaskIncrementTick+0x154>)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6013      	str	r3, [r2, #0]
 800b9e4:	4b3e      	ldr	r3, [pc, #248]	; (800bae0 <xTaskIncrementTick+0x158>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	4a3d      	ldr	r2, [pc, #244]	; (800bae0 <xTaskIncrementTick+0x158>)
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	f000 fb07 	bl	800c000 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9f2:	4b3c      	ldr	r3, [pc, #240]	; (800bae4 <xTaskIncrementTick+0x15c>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d349      	bcc.n	800ba90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9fc:	4b36      	ldr	r3, [pc, #216]	; (800bad8 <xTaskIncrementTick+0x150>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d104      	bne.n	800ba10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba06:	4b37      	ldr	r3, [pc, #220]	; (800bae4 <xTaskIncrementTick+0x15c>)
 800ba08:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0c:	601a      	str	r2, [r3, #0]
					break;
 800ba0e:	e03f      	b.n	800ba90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba10:	4b31      	ldr	r3, [pc, #196]	; (800bad8 <xTaskIncrementTick+0x150>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d203      	bcs.n	800ba30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba28:	4a2e      	ldr	r2, [pc, #184]	; (800bae4 <xTaskIncrementTick+0x15c>)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba2e:	e02f      	b.n	800ba90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	3304      	adds	r3, #4
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe ff73 	bl	800a920 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d004      	beq.n	800ba4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	3318      	adds	r3, #24
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe ff6a 	bl	800a920 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba50:	4b25      	ldr	r3, [pc, #148]	; (800bae8 <xTaskIncrementTick+0x160>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d903      	bls.n	800ba60 <xTaskIncrementTick+0xd8>
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	4a22      	ldr	r2, [pc, #136]	; (800bae8 <xTaskIncrementTick+0x160>)
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4a1f      	ldr	r2, [pc, #124]	; (800baec <xTaskIncrementTick+0x164>)
 800ba6e:	441a      	add	r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	3304      	adds	r3, #4
 800ba74:	4619      	mov	r1, r3
 800ba76:	4610      	mov	r0, r2
 800ba78:	f7fe fef5 	bl	800a866 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba80:	4b1b      	ldr	r3, [pc, #108]	; (800baf0 <xTaskIncrementTick+0x168>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d3b8      	bcc.n	800b9fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba8e:	e7b5      	b.n	800b9fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba90:	4b17      	ldr	r3, [pc, #92]	; (800baf0 <xTaskIncrementTick+0x168>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba96:	4915      	ldr	r1, [pc, #84]	; (800baec <xTaskIncrementTick+0x164>)
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	440b      	add	r3, r1
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d901      	bls.n	800baac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800baa8:	2301      	movs	r3, #1
 800baaa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800baac:	4b11      	ldr	r3, [pc, #68]	; (800baf4 <xTaskIncrementTick+0x16c>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d007      	beq.n	800bac4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bab4:	2301      	movs	r3, #1
 800bab6:	617b      	str	r3, [r7, #20]
 800bab8:	e004      	b.n	800bac4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800baba:	4b0f      	ldr	r3, [pc, #60]	; (800baf8 <xTaskIncrementTick+0x170>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	3301      	adds	r3, #1
 800bac0:	4a0d      	ldr	r2, [pc, #52]	; (800baf8 <xTaskIncrementTick+0x170>)
 800bac2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bac4:	697b      	ldr	r3, [r7, #20]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3718      	adds	r7, #24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	200038e8 	.word	0x200038e8
 800bad4:	200038c4 	.word	0x200038c4
 800bad8:	20003878 	.word	0x20003878
 800badc:	2000387c 	.word	0x2000387c
 800bae0:	200038d8 	.word	0x200038d8
 800bae4:	200038e0 	.word	0x200038e0
 800bae8:	200038c8 	.word	0x200038c8
 800baec:	200033f0 	.word	0x200033f0
 800baf0:	200033ec 	.word	0x200033ec
 800baf4:	200038d4 	.word	0x200038d4
 800baf8:	200038d0 	.word	0x200038d0

0800bafc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb02:	4b3e      	ldr	r3, [pc, #248]	; (800bbfc <vTaskSwitchContext+0x100>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d003      	beq.n	800bb12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb0a:	4b3d      	ldr	r3, [pc, #244]	; (800bc00 <vTaskSwitchContext+0x104>)
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb10:	e070      	b.n	800bbf4 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800bb12:	4b3b      	ldr	r3, [pc, #236]	; (800bc00 <vTaskSwitchContext+0x104>)
 800bb14:	2200      	movs	r2, #0
 800bb16:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bb18:	f7f5 fa6f 	bl	8000ffa <getRunTimeCounterValue>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	4a39      	ldr	r2, [pc, #228]	; (800bc04 <vTaskSwitchContext+0x108>)
 800bb20:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bb22:	4b38      	ldr	r3, [pc, #224]	; (800bc04 <vTaskSwitchContext+0x108>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4b38      	ldr	r3, [pc, #224]	; (800bc08 <vTaskSwitchContext+0x10c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d909      	bls.n	800bb42 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bb2e:	4b37      	ldr	r3, [pc, #220]	; (800bc0c <vTaskSwitchContext+0x110>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bb34:	4a33      	ldr	r2, [pc, #204]	; (800bc04 <vTaskSwitchContext+0x108>)
 800bb36:	6810      	ldr	r0, [r2, #0]
 800bb38:	4a33      	ldr	r2, [pc, #204]	; (800bc08 <vTaskSwitchContext+0x10c>)
 800bb3a:	6812      	ldr	r2, [r2, #0]
 800bb3c:	1a82      	subs	r2, r0, r2
 800bb3e:	440a      	add	r2, r1
 800bb40:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bb42:	4b30      	ldr	r3, [pc, #192]	; (800bc04 <vTaskSwitchContext+0x108>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a30      	ldr	r2, [pc, #192]	; (800bc08 <vTaskSwitchContext+0x10c>)
 800bb48:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bb4a:	4b30      	ldr	r3, [pc, #192]	; (800bc0c <vTaskSwitchContext+0x110>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	4b2e      	ldr	r3, [pc, #184]	; (800bc0c <vTaskSwitchContext+0x110>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d808      	bhi.n	800bb6c <vTaskSwitchContext+0x70>
 800bb5a:	4b2c      	ldr	r3, [pc, #176]	; (800bc0c <vTaskSwitchContext+0x110>)
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	4b2b      	ldr	r3, [pc, #172]	; (800bc0c <vTaskSwitchContext+0x110>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	3334      	adds	r3, #52	; 0x34
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f7f5 fa4f 	bl	800100a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb6c:	4b28      	ldr	r3, [pc, #160]	; (800bc10 <vTaskSwitchContext+0x114>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	e010      	b.n	800bb96 <vTaskSwitchContext+0x9a>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10a      	bne.n	800bb90 <vTaskSwitchContext+0x94>
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	607b      	str	r3, [r7, #4]
}
 800bb8c:	bf00      	nop
 800bb8e:	e7fe      	b.n	800bb8e <vTaskSwitchContext+0x92>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	3b01      	subs	r3, #1
 800bb94:	60fb      	str	r3, [r7, #12]
 800bb96:	491f      	ldr	r1, [pc, #124]	; (800bc14 <vTaskSwitchContext+0x118>)
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4413      	add	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	440b      	add	r3, r1
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d0e4      	beq.n	800bb74 <vTaskSwitchContext+0x78>
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4613      	mov	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4a17      	ldr	r2, [pc, #92]	; (800bc14 <vTaskSwitchContext+0x118>)
 800bbb6:	4413      	add	r3, r2
 800bbb8:	60bb      	str	r3, [r7, #8]
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	605a      	str	r2, [r3, #4]
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	685a      	ldr	r2, [r3, #4]
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	3308      	adds	r3, #8
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d104      	bne.n	800bbda <vTaskSwitchContext+0xde>
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	685a      	ldr	r2, [r3, #4]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	605a      	str	r2, [r3, #4]
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	4a0a      	ldr	r2, [pc, #40]	; (800bc0c <vTaskSwitchContext+0x110>)
 800bbe2:	6013      	str	r3, [r2, #0]
 800bbe4:	4a0a      	ldr	r2, [pc, #40]	; (800bc10 <vTaskSwitchContext+0x114>)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbea:	4b08      	ldr	r3, [pc, #32]	; (800bc0c <vTaskSwitchContext+0x110>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3358      	adds	r3, #88	; 0x58
 800bbf0:	4a09      	ldr	r2, [pc, #36]	; (800bc18 <vTaskSwitchContext+0x11c>)
 800bbf2:	6013      	str	r3, [r2, #0]
}
 800bbf4:	bf00      	nop
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	200038e8 	.word	0x200038e8
 800bc00:	200038d4 	.word	0x200038d4
 800bc04:	200038f0 	.word	0x200038f0
 800bc08:	200038ec 	.word	0x200038ec
 800bc0c:	200033ec 	.word	0x200033ec
 800bc10:	200038c8 	.word	0x200038c8
 800bc14:	200033f0 	.word	0x200033f0
 800bc18:	20000040 	.word	0x20000040

0800bc1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10a      	bne.n	800bc42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	60fb      	str	r3, [r7, #12]
}
 800bc3e:	bf00      	nop
 800bc40:	e7fe      	b.n	800bc40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc42:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <vTaskPlaceOnEventList+0x44>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3318      	adds	r3, #24
 800bc48:	4619      	mov	r1, r3
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7fe fe2f 	bl	800a8ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc50:	2101      	movs	r1, #1
 800bc52:	6838      	ldr	r0, [r7, #0]
 800bc54:	f000 fa80 	bl	800c158 <prvAddCurrentTaskToDelayedList>
}
 800bc58:	bf00      	nop
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	200033ec 	.word	0x200033ec

0800bc64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10a      	bne.n	800bc8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	617b      	str	r3, [r7, #20]
}
 800bc88:	bf00      	nop
 800bc8a:	e7fe      	b.n	800bc8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc8c:	4b0a      	ldr	r3, [pc, #40]	; (800bcb8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3318      	adds	r3, #24
 800bc92:	4619      	mov	r1, r3
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f7fe fde6 	bl	800a866 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bca0:	f04f 33ff 	mov.w	r3, #4294967295
 800bca4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bca6:	6879      	ldr	r1, [r7, #4]
 800bca8:	68b8      	ldr	r0, [r7, #8]
 800bcaa:	f000 fa55 	bl	800c158 <prvAddCurrentTaskToDelayedList>
	}
 800bcae:	bf00      	nop
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	200033ec 	.word	0x200033ec

0800bcbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	60fb      	str	r3, [r7, #12]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	3318      	adds	r3, #24
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fe fe17 	bl	800a920 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcf2:	4b1e      	ldr	r3, [pc, #120]	; (800bd6c <xTaskRemoveFromEventList+0xb0>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d11d      	bne.n	800bd36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fe fe0e 	bl	800a920 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd08:	4b19      	ldr	r3, [pc, #100]	; (800bd70 <xTaskRemoveFromEventList+0xb4>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d903      	bls.n	800bd18 <xTaskRemoveFromEventList+0x5c>
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd14:	4a16      	ldr	r2, [pc, #88]	; (800bd70 <xTaskRemoveFromEventList+0xb4>)
 800bd16:	6013      	str	r3, [r2, #0]
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4413      	add	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4a13      	ldr	r2, [pc, #76]	; (800bd74 <xTaskRemoveFromEventList+0xb8>)
 800bd26:	441a      	add	r2, r3
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	4610      	mov	r0, r2
 800bd30:	f7fe fd99 	bl	800a866 <vListInsertEnd>
 800bd34:	e005      	b.n	800bd42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	3318      	adds	r3, #24
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	480e      	ldr	r0, [pc, #56]	; (800bd78 <xTaskRemoveFromEventList+0xbc>)
 800bd3e:	f7fe fd92 	bl	800a866 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd46:	4b0d      	ldr	r3, [pc, #52]	; (800bd7c <xTaskRemoveFromEventList+0xc0>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d905      	bls.n	800bd5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd50:	2301      	movs	r3, #1
 800bd52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd54:	4b0a      	ldr	r3, [pc, #40]	; (800bd80 <xTaskRemoveFromEventList+0xc4>)
 800bd56:	2201      	movs	r2, #1
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	e001      	b.n	800bd60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd60:	697b      	ldr	r3, [r7, #20]
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3718      	adds	r7, #24
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	200038e8 	.word	0x200038e8
 800bd70:	200038c8 	.word	0x200038c8
 800bd74:	200033f0 	.word	0x200033f0
 800bd78:	20003880 	.word	0x20003880
 800bd7c:	200033ec 	.word	0x200033ec
 800bd80:	200038d4 	.word	0x200038d4

0800bd84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <vTaskInternalSetTimeOutState+0x24>)
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd94:	4b05      	ldr	r3, [pc, #20]	; (800bdac <vTaskInternalSetTimeOutState+0x28>)
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	605a      	str	r2, [r3, #4]
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	200038d8 	.word	0x200038d8
 800bdac:	200038c4 	.word	0x200038c4

0800bdb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b088      	sub	sp, #32
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10a      	bne.n	800bdd6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	613b      	str	r3, [r7, #16]
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10a      	bne.n	800bdf2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	60fb      	str	r3, [r7, #12]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bdf2:	f000 ff67 	bl	800ccc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bdf6:	4b1d      	ldr	r3, [pc, #116]	; (800be6c <xTaskCheckForTimeOut+0xbc>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0e:	d102      	bne.n	800be16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be10:	2300      	movs	r3, #0
 800be12:	61fb      	str	r3, [r7, #28]
 800be14:	e023      	b.n	800be5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	4b15      	ldr	r3, [pc, #84]	; (800be70 <xTaskCheckForTimeOut+0xc0>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d007      	beq.n	800be32 <xTaskCheckForTimeOut+0x82>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	69ba      	ldr	r2, [r7, #24]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d302      	bcc.n	800be32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be2c:	2301      	movs	r3, #1
 800be2e:	61fb      	str	r3, [r7, #28]
 800be30:	e015      	b.n	800be5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d20b      	bcs.n	800be54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	1ad2      	subs	r2, r2, r3
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7ff ff9b 	bl	800bd84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be4e:	2300      	movs	r3, #0
 800be50:	61fb      	str	r3, [r7, #28]
 800be52:	e004      	b.n	800be5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	2200      	movs	r2, #0
 800be58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be5a:	2301      	movs	r3, #1
 800be5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be5e:	f000 ff61 	bl	800cd24 <vPortExitCritical>

	return xReturn;
 800be62:	69fb      	ldr	r3, [r7, #28]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3720      	adds	r7, #32
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	200038c4 	.word	0x200038c4
 800be70:	200038d8 	.word	0x200038d8

0800be74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be74:	b480      	push	{r7}
 800be76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be78:	4b03      	ldr	r3, [pc, #12]	; (800be88 <vTaskMissedYield+0x14>)
 800be7a:	2201      	movs	r2, #1
 800be7c:	601a      	str	r2, [r3, #0]
}
 800be7e:	bf00      	nop
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	200038d4 	.word	0x200038d4

0800be8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be94:	f000 f852 	bl	800bf3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be98:	4b06      	ldr	r3, [pc, #24]	; (800beb4 <prvIdleTask+0x28>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d9f9      	bls.n	800be94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bea0:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <prvIdleTask+0x2c>)
 800bea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800beb0:	e7f0      	b.n	800be94 <prvIdleTask+0x8>
 800beb2:	bf00      	nop
 800beb4:	200033f0 	.word	0x200033f0
 800beb8:	e000ed04 	.word	0xe000ed04

0800bebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bec2:	2300      	movs	r3, #0
 800bec4:	607b      	str	r3, [r7, #4]
 800bec6:	e00c      	b.n	800bee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	4613      	mov	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4413      	add	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	4a12      	ldr	r2, [pc, #72]	; (800bf1c <prvInitialiseTaskLists+0x60>)
 800bed4:	4413      	add	r3, r2
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fe fc98 	bl	800a80c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3301      	adds	r3, #1
 800bee0:	607b      	str	r3, [r7, #4]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b37      	cmp	r3, #55	; 0x37
 800bee6:	d9ef      	bls.n	800bec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bee8:	480d      	ldr	r0, [pc, #52]	; (800bf20 <prvInitialiseTaskLists+0x64>)
 800beea:	f7fe fc8f 	bl	800a80c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800beee:	480d      	ldr	r0, [pc, #52]	; (800bf24 <prvInitialiseTaskLists+0x68>)
 800bef0:	f7fe fc8c 	bl	800a80c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bef4:	480c      	ldr	r0, [pc, #48]	; (800bf28 <prvInitialiseTaskLists+0x6c>)
 800bef6:	f7fe fc89 	bl	800a80c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800befa:	480c      	ldr	r0, [pc, #48]	; (800bf2c <prvInitialiseTaskLists+0x70>)
 800befc:	f7fe fc86 	bl	800a80c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf00:	480b      	ldr	r0, [pc, #44]	; (800bf30 <prvInitialiseTaskLists+0x74>)
 800bf02:	f7fe fc83 	bl	800a80c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf06:	4b0b      	ldr	r3, [pc, #44]	; (800bf34 <prvInitialiseTaskLists+0x78>)
 800bf08:	4a05      	ldr	r2, [pc, #20]	; (800bf20 <prvInitialiseTaskLists+0x64>)
 800bf0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <prvInitialiseTaskLists+0x7c>)
 800bf0e:	4a05      	ldr	r2, [pc, #20]	; (800bf24 <prvInitialiseTaskLists+0x68>)
 800bf10:	601a      	str	r2, [r3, #0]
}
 800bf12:	bf00      	nop
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	200033f0 	.word	0x200033f0
 800bf20:	20003850 	.word	0x20003850
 800bf24:	20003864 	.word	0x20003864
 800bf28:	20003880 	.word	0x20003880
 800bf2c:	20003894 	.word	0x20003894
 800bf30:	200038ac 	.word	0x200038ac
 800bf34:	20003878 	.word	0x20003878
 800bf38:	2000387c 	.word	0x2000387c

0800bf3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf42:	e019      	b.n	800bf78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf44:	f000 febe 	bl	800ccc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf48:	4b10      	ldr	r3, [pc, #64]	; (800bf8c <prvCheckTasksWaitingTermination+0x50>)
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fe fce3 	bl	800a920 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	; (800bf90 <prvCheckTasksWaitingTermination+0x54>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	4a0b      	ldr	r2, [pc, #44]	; (800bf90 <prvCheckTasksWaitingTermination+0x54>)
 800bf62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf64:	4b0b      	ldr	r3, [pc, #44]	; (800bf94 <prvCheckTasksWaitingTermination+0x58>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	4a0a      	ldr	r2, [pc, #40]	; (800bf94 <prvCheckTasksWaitingTermination+0x58>)
 800bf6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf6e:	f000 fed9 	bl	800cd24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f810 	bl	800bf98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf78:	4b06      	ldr	r3, [pc, #24]	; (800bf94 <prvCheckTasksWaitingTermination+0x58>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1e1      	bne.n	800bf44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf80:	bf00      	nop
 800bf82:	bf00      	nop
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	20003894 	.word	0x20003894
 800bf90:	200038c0 	.word	0x200038c0
 800bf94:	200038a8 	.word	0x200038a8

0800bf98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3358      	adds	r3, #88	; 0x58
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f002 f9b5 	bl	800e314 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d108      	bne.n	800bfc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f001 f871 	bl	800d0a0 <vPortFree>
				vPortFree( pxTCB );
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f001 f86e 	bl	800d0a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bfc4:	e018      	b.n	800bff8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d103      	bne.n	800bfd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f001 f865 	bl	800d0a0 <vPortFree>
	}
 800bfd6:	e00f      	b.n	800bff8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d00a      	beq.n	800bff8 <prvDeleteTCB+0x60>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	60fb      	str	r3, [r7, #12]
}
 800bff4:	bf00      	nop
 800bff6:	e7fe      	b.n	800bff6 <prvDeleteTCB+0x5e>
	}
 800bff8:	bf00      	nop
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c006:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <prvResetNextTaskUnblockTime+0x38>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d104      	bne.n	800c01a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c010:	4b0a      	ldr	r3, [pc, #40]	; (800c03c <prvResetNextTaskUnblockTime+0x3c>)
 800c012:	f04f 32ff 	mov.w	r2, #4294967295
 800c016:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c018:	e008      	b.n	800c02c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01a:	4b07      	ldr	r3, [pc, #28]	; (800c038 <prvResetNextTaskUnblockTime+0x38>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	4a04      	ldr	r2, [pc, #16]	; (800c03c <prvResetNextTaskUnblockTime+0x3c>)
 800c02a:	6013      	str	r3, [r2, #0]
}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr
 800c038:	20003878 	.word	0x20003878
 800c03c:	200038e0 	.word	0x200038e0

0800c040 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c046:	4b0b      	ldr	r3, [pc, #44]	; (800c074 <xTaskGetSchedulerState+0x34>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d102      	bne.n	800c054 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c04e:	2301      	movs	r3, #1
 800c050:	607b      	str	r3, [r7, #4]
 800c052:	e008      	b.n	800c066 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c054:	4b08      	ldr	r3, [pc, #32]	; (800c078 <xTaskGetSchedulerState+0x38>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d102      	bne.n	800c062 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c05c:	2302      	movs	r3, #2
 800c05e:	607b      	str	r3, [r7, #4]
 800c060:	e001      	b.n	800c066 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c062:	2300      	movs	r3, #0
 800c064:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c066:	687b      	ldr	r3, [r7, #4]
	}
 800c068:	4618      	mov	r0, r3
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	200038cc 	.word	0x200038cc
 800c078:	200038e8 	.word	0x200038e8

0800c07c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c088:	2300      	movs	r3, #0
 800c08a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d056      	beq.n	800c140 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c092:	4b2e      	ldr	r3, [pc, #184]	; (800c14c <xTaskPriorityDisinherit+0xd0>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d00a      	beq.n	800c0b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	60fb      	str	r3, [r7, #12]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10a      	bne.n	800c0d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	60bb      	str	r3, [r7, #8]
}
 800c0cc:	bf00      	nop
 800c0ce:	e7fe      	b.n	800c0ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d4:	1e5a      	subs	r2, r3, #1
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d02c      	beq.n	800c140 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d128      	bne.n	800c140 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe fc14 	bl	800a920 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c104:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c110:	4b0f      	ldr	r3, [pc, #60]	; (800c150 <xTaskPriorityDisinherit+0xd4>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	429a      	cmp	r2, r3
 800c116:	d903      	bls.n	800c120 <xTaskPriorityDisinherit+0xa4>
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11c:	4a0c      	ldr	r2, [pc, #48]	; (800c150 <xTaskPriorityDisinherit+0xd4>)
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c124:	4613      	mov	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	4413      	add	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4a09      	ldr	r2, [pc, #36]	; (800c154 <xTaskPriorityDisinherit+0xd8>)
 800c12e:	441a      	add	r2, r3
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	3304      	adds	r3, #4
 800c134:	4619      	mov	r1, r3
 800c136:	4610      	mov	r0, r2
 800c138:	f7fe fb95 	bl	800a866 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c13c:	2301      	movs	r3, #1
 800c13e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c140:	697b      	ldr	r3, [r7, #20]
	}
 800c142:	4618      	mov	r0, r3
 800c144:	3718      	adds	r7, #24
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	200033ec 	.word	0x200033ec
 800c150:	200038c8 	.word	0x200038c8
 800c154:	200033f0 	.word	0x200033f0

0800c158 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c162:	4b21      	ldr	r3, [pc, #132]	; (800c1e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c168:	4b20      	ldr	r3, [pc, #128]	; (800c1ec <prvAddCurrentTaskToDelayedList+0x94>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3304      	adds	r3, #4
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe fbd6 	bl	800a920 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17a:	d10a      	bne.n	800c192 <prvAddCurrentTaskToDelayedList+0x3a>
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d007      	beq.n	800c192 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c182:	4b1a      	ldr	r3, [pc, #104]	; (800c1ec <prvAddCurrentTaskToDelayedList+0x94>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	3304      	adds	r3, #4
 800c188:	4619      	mov	r1, r3
 800c18a:	4819      	ldr	r0, [pc, #100]	; (800c1f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c18c:	f7fe fb6b 	bl	800a866 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c190:	e026      	b.n	800c1e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4413      	add	r3, r2
 800c198:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c19a:	4b14      	ldr	r3, [pc, #80]	; (800c1ec <prvAddCurrentTaskToDelayedList+0x94>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d209      	bcs.n	800c1be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1aa:	4b12      	ldr	r3, [pc, #72]	; (800c1f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <prvAddCurrentTaskToDelayedList+0x94>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	f7fe fb79 	bl	800a8ae <vListInsert>
}
 800c1bc:	e010      	b.n	800c1e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1be:	4b0e      	ldr	r3, [pc, #56]	; (800c1f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	4b0a      	ldr	r3, [pc, #40]	; (800c1ec <prvAddCurrentTaskToDelayedList+0x94>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	f7fe fb6f 	bl	800a8ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1d0:	4b0a      	ldr	r3, [pc, #40]	; (800c1fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68ba      	ldr	r2, [r7, #8]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d202      	bcs.n	800c1e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1da:	4a08      	ldr	r2, [pc, #32]	; (800c1fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	6013      	str	r3, [r2, #0]
}
 800c1e0:	bf00      	nop
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	200038c4 	.word	0x200038c4
 800c1ec:	200033ec 	.word	0x200033ec
 800c1f0:	200038ac 	.word	0x200038ac
 800c1f4:	2000387c 	.word	0x2000387c
 800c1f8:	20003878 	.word	0x20003878
 800c1fc:	200038e0 	.word	0x200038e0

0800c200 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08a      	sub	sp, #40	; 0x28
 800c204:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c206:	2300      	movs	r3, #0
 800c208:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c20a:	f000 fba1 	bl	800c950 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c20e:	4b1c      	ldr	r3, [pc, #112]	; (800c280 <xTimerCreateTimerTask+0x80>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d021      	beq.n	800c25a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c216:	2300      	movs	r3, #0
 800c218:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c21a:	2300      	movs	r3, #0
 800c21c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c21e:	1d3a      	adds	r2, r7, #4
 800c220:	f107 0108 	add.w	r1, r7, #8
 800c224:	f107 030c 	add.w	r3, r7, #12
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fe fad5 	bl	800a7d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c22e:	6879      	ldr	r1, [r7, #4]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	9202      	str	r2, [sp, #8]
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	2302      	movs	r3, #2
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	2300      	movs	r3, #0
 800c23e:	460a      	mov	r2, r1
 800c240:	4910      	ldr	r1, [pc, #64]	; (800c284 <xTimerCreateTimerTask+0x84>)
 800c242:	4811      	ldr	r0, [pc, #68]	; (800c288 <xTimerCreateTimerTask+0x88>)
 800c244:	f7ff f882 	bl	800b34c <xTaskCreateStatic>
 800c248:	4603      	mov	r3, r0
 800c24a:	4a10      	ldr	r2, [pc, #64]	; (800c28c <xTimerCreateTimerTask+0x8c>)
 800c24c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c24e:	4b0f      	ldr	r3, [pc, #60]	; (800c28c <xTimerCreateTimerTask+0x8c>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c256:	2301      	movs	r3, #1
 800c258:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d10a      	bne.n	800c276 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	613b      	str	r3, [r7, #16]
}
 800c272:	bf00      	nop
 800c274:	e7fe      	b.n	800c274 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c276:	697b      	ldr	r3, [r7, #20]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3718      	adds	r7, #24
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	20003924 	.word	0x20003924
 800c284:	08013610 	.word	0x08013610
 800c288:	0800c4f9 	.word	0x0800c4f9
 800c28c:	20003928 	.word	0x20003928

0800c290 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af02      	add	r7, sp, #8
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c29e:	202c      	movs	r0, #44	; 0x2c
 800c2a0:	f000 fe32 	bl	800cf08 <pvPortMalloc>
 800c2a4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00d      	beq.n	800c2c8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	9301      	str	r3, [sp, #4]
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	68b9      	ldr	r1, [r7, #8]
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f000 f843 	bl	800c34e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c2c8:	697b      	ldr	r3, [r7, #20]
	}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b08a      	sub	sp, #40	; 0x28
 800c2d6:	af02      	add	r7, sp, #8
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	60b9      	str	r1, [r7, #8]
 800c2dc:	607a      	str	r2, [r7, #4]
 800c2de:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c2e0:	232c      	movs	r3, #44	; 0x2c
 800c2e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	2b2c      	cmp	r3, #44	; 0x2c
 800c2e8:	d00a      	beq.n	800c300 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	61bb      	str	r3, [r7, #24]
}
 800c2fc:	bf00      	nop
 800c2fe:	e7fe      	b.n	800c2fe <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c300:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10a      	bne.n	800c31e <xTimerCreateStatic+0x4c>
	__asm volatile
 800c308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	617b      	str	r3, [r7, #20]
}
 800c31a:	bf00      	nop
 800c31c:	e7fe      	b.n	800c31c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c320:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00d      	beq.n	800c344 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	2202      	movs	r2, #2
 800c32c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	9301      	str	r3, [sp, #4]
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	9300      	str	r3, [sp, #0]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	68b9      	ldr	r1, [r7, #8]
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f000 f805 	bl	800c34e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c344:	69fb      	ldr	r3, [r7, #28]
	}
 800c346:	4618      	mov	r0, r3
 800c348:	3720      	adds	r7, #32
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b086      	sub	sp, #24
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	60b9      	str	r1, [r7, #8]
 800c358:	607a      	str	r2, [r7, #4]
 800c35a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10a      	bne.n	800c378 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	617b      	str	r3, [r7, #20]
}
 800c374:	bf00      	nop
 800c376:	e7fe      	b.n	800c376 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d01e      	beq.n	800c3bc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c37e:	f000 fae7 	bl	800c950 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c396:	6a3a      	ldr	r2, [r7, #32]
 800c398:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	3304      	adds	r3, #4
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe fa54 	bl	800a84c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d008      	beq.n	800c3bc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3b0:	f043 0304 	orr.w	r3, r3, #4
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c3bc:	bf00      	nop
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08a      	sub	sp, #40	; 0x28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10a      	bne.n	800c3f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	623b      	str	r3, [r7, #32]
}
 800c3ee:	bf00      	nop
 800c3f0:	e7fe      	b.n	800c3f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c3f2:	4b1a      	ldr	r3, [pc, #104]	; (800c45c <xTimerGenericCommand+0x98>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d02a      	beq.n	800c450 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	2b05      	cmp	r3, #5
 800c40a:	dc18      	bgt.n	800c43e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c40c:	f7ff fe18 	bl	800c040 <xTaskGetSchedulerState>
 800c410:	4603      	mov	r3, r0
 800c412:	2b02      	cmp	r3, #2
 800c414:	d109      	bne.n	800c42a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c416:	4b11      	ldr	r3, [pc, #68]	; (800c45c <xTimerGenericCommand+0x98>)
 800c418:	6818      	ldr	r0, [r3, #0]
 800c41a:	f107 0110 	add.w	r1, r7, #16
 800c41e:	2300      	movs	r3, #0
 800c420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c422:	f7fe fbab 	bl	800ab7c <xQueueGenericSend>
 800c426:	6278      	str	r0, [r7, #36]	; 0x24
 800c428:	e012      	b.n	800c450 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c42a:	4b0c      	ldr	r3, [pc, #48]	; (800c45c <xTimerGenericCommand+0x98>)
 800c42c:	6818      	ldr	r0, [r3, #0]
 800c42e:	f107 0110 	add.w	r1, r7, #16
 800c432:	2300      	movs	r3, #0
 800c434:	2200      	movs	r2, #0
 800c436:	f7fe fba1 	bl	800ab7c <xQueueGenericSend>
 800c43a:	6278      	str	r0, [r7, #36]	; 0x24
 800c43c:	e008      	b.n	800c450 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c43e:	4b07      	ldr	r3, [pc, #28]	; (800c45c <xTimerGenericCommand+0x98>)
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	f107 0110 	add.w	r1, r7, #16
 800c446:	2300      	movs	r3, #0
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	f7fe fc95 	bl	800ad78 <xQueueGenericSendFromISR>
 800c44e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c452:	4618      	mov	r0, r3
 800c454:	3728      	adds	r7, #40	; 0x28
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	20003924 	.word	0x20003924

0800c460 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af02      	add	r7, sp, #8
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c46a:	4b22      	ldr	r3, [pc, #136]	; (800c4f4 <prvProcessExpiredTimer+0x94>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	3304      	adds	r3, #4
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fe fa51 	bl	800a920 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d022      	beq.n	800c4d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	699a      	ldr	r2, [r3, #24]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	18d1      	adds	r1, r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	683a      	ldr	r2, [r7, #0]
 800c498:	6978      	ldr	r0, [r7, #20]
 800c49a:	f000 f8d1 	bl	800c640 <prvInsertTimerInActiveList>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d01f      	beq.n	800c4e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	6978      	ldr	r0, [r7, #20]
 800c4b0:	f7ff ff88 	bl	800c3c4 <xTimerGenericCommand>
 800c4b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d113      	bne.n	800c4e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c0:	f383 8811 	msr	BASEPRI, r3
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	60fb      	str	r3, [r7, #12]
}
 800c4ce:	bf00      	nop
 800c4d0:	e7fe      	b.n	800c4d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4d8:	f023 0301 	bic.w	r3, r3, #1
 800c4dc:	b2da      	uxtb	r2, r3
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	6a1b      	ldr	r3, [r3, #32]
 800c4e8:	6978      	ldr	r0, [r7, #20]
 800c4ea:	4798      	blx	r3
}
 800c4ec:	bf00      	nop
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	2000391c 	.word	0x2000391c

0800c4f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c500:	f107 0308 	add.w	r3, r7, #8
 800c504:	4618      	mov	r0, r3
 800c506:	f000 f857 	bl	800c5b8 <prvGetNextExpireTime>
 800c50a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	4619      	mov	r1, r3
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 f803 	bl	800c51c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c516:	f000 f8d5 	bl	800c6c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c51a:	e7f1      	b.n	800c500 <prvTimerTask+0x8>

0800c51c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c526:	f7ff f973 	bl	800b810 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c52a:	f107 0308 	add.w	r3, r7, #8
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 f866 	bl	800c600 <prvSampleTimeNow>
 800c534:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d130      	bne.n	800c59e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10a      	bne.n	800c558 <prvProcessTimerOrBlockTask+0x3c>
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	429a      	cmp	r2, r3
 800c548:	d806      	bhi.n	800c558 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c54a:	f7ff f96f 	bl	800b82c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c54e:	68f9      	ldr	r1, [r7, #12]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7ff ff85 	bl	800c460 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c556:	e024      	b.n	800c5a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d008      	beq.n	800c570 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c55e:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <prvProcessTimerOrBlockTask+0x90>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d101      	bne.n	800c56c <prvProcessTimerOrBlockTask+0x50>
 800c568:	2301      	movs	r3, #1
 800c56a:	e000      	b.n	800c56e <prvProcessTimerOrBlockTask+0x52>
 800c56c:	2300      	movs	r3, #0
 800c56e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c570:	4b0f      	ldr	r3, [pc, #60]	; (800c5b0 <prvProcessTimerOrBlockTask+0x94>)
 800c572:	6818      	ldr	r0, [r3, #0]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	4619      	mov	r1, r3
 800c57e:	f7fe feb1 	bl	800b2e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c582:	f7ff f953 	bl	800b82c <xTaskResumeAll>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10a      	bne.n	800c5a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c58c:	4b09      	ldr	r3, [pc, #36]	; (800c5b4 <prvProcessTimerOrBlockTask+0x98>)
 800c58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c592:	601a      	str	r2, [r3, #0]
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	f3bf 8f6f 	isb	sy
}
 800c59c:	e001      	b.n	800c5a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c59e:	f7ff f945 	bl	800b82c <xTaskResumeAll>
}
 800c5a2:	bf00      	nop
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20003920 	.word	0x20003920
 800c5b0:	20003924 	.word	0x20003924
 800c5b4:	e000ed04 	.word	0xe000ed04

0800c5b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c5c0:	4b0e      	ldr	r3, [pc, #56]	; (800c5fc <prvGetNextExpireTime+0x44>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <prvGetNextExpireTime+0x16>
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	e000      	b.n	800c5d0 <prvGetNextExpireTime+0x18>
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d105      	bne.n	800c5e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5dc:	4b07      	ldr	r3, [pc, #28]	; (800c5fc <prvGetNextExpireTime+0x44>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	60fb      	str	r3, [r7, #12]
 800c5e6:	e001      	b.n	800c5ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	2000391c 	.word	0x2000391c

0800c600 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c608:	f7ff f9ae 	bl	800b968 <xTaskGetTickCount>
 800c60c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c60e:	4b0b      	ldr	r3, [pc, #44]	; (800c63c <prvSampleTimeNow+0x3c>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	429a      	cmp	r2, r3
 800c616:	d205      	bcs.n	800c624 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c618:	f000 f936 	bl	800c888 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	e002      	b.n	800c62a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c62a:	4a04      	ldr	r2, [pc, #16]	; (800c63c <prvSampleTimeNow+0x3c>)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c630:	68fb      	ldr	r3, [r7, #12]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	2000392c 	.word	0x2000392c

0800c640 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	429a      	cmp	r2, r3
 800c664:	d812      	bhi.n	800c68c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	1ad2      	subs	r2, r2, r3
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	699b      	ldr	r3, [r3, #24]
 800c670:	429a      	cmp	r2, r3
 800c672:	d302      	bcc.n	800c67a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c674:	2301      	movs	r3, #1
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	e01b      	b.n	800c6b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c67a:	4b10      	ldr	r3, [pc, #64]	; (800c6bc <prvInsertTimerInActiveList+0x7c>)
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	3304      	adds	r3, #4
 800c682:	4619      	mov	r1, r3
 800c684:	4610      	mov	r0, r2
 800c686:	f7fe f912 	bl	800a8ae <vListInsert>
 800c68a:	e012      	b.n	800c6b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	429a      	cmp	r2, r3
 800c692:	d206      	bcs.n	800c6a2 <prvInsertTimerInActiveList+0x62>
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d302      	bcc.n	800c6a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c69c:	2301      	movs	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
 800c6a0:	e007      	b.n	800c6b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6a2:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <prvInsertTimerInActiveList+0x80>)
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	f7fe f8fe 	bl	800a8ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6b2:	697b      	ldr	r3, [r7, #20]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3718      	adds	r7, #24
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	20003920 	.word	0x20003920
 800c6c0:	2000391c 	.word	0x2000391c

0800c6c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b08e      	sub	sp, #56	; 0x38
 800c6c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6ca:	e0ca      	b.n	800c862 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	da18      	bge.n	800c704 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6d2:	1d3b      	adds	r3, r7, #4
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d10a      	bne.n	800c6f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	61fb      	str	r3, [r7, #28]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6fa:	6850      	ldr	r0, [r2, #4]
 800c6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6fe:	6892      	ldr	r2, [r2, #8]
 800c700:	4611      	mov	r1, r2
 800c702:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f2c0 80aa 	blt.w	800c860 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c712:	695b      	ldr	r3, [r3, #20]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d004      	beq.n	800c722 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	3304      	adds	r3, #4
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fe f8ff 	bl	800a920 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c722:	463b      	mov	r3, r7
 800c724:	4618      	mov	r0, r3
 800c726:	f7ff ff6b 	bl	800c600 <prvSampleTimeNow>
 800c72a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b09      	cmp	r3, #9
 800c730:	f200 8097 	bhi.w	800c862 <prvProcessReceivedCommands+0x19e>
 800c734:	a201      	add	r2, pc, #4	; (adr r2, 800c73c <prvProcessReceivedCommands+0x78>)
 800c736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73a:	bf00      	nop
 800c73c:	0800c765 	.word	0x0800c765
 800c740:	0800c765 	.word	0x0800c765
 800c744:	0800c765 	.word	0x0800c765
 800c748:	0800c7d9 	.word	0x0800c7d9
 800c74c:	0800c7ed 	.word	0x0800c7ed
 800c750:	0800c837 	.word	0x0800c837
 800c754:	0800c765 	.word	0x0800c765
 800c758:	0800c765 	.word	0x0800c765
 800c75c:	0800c7d9 	.word	0x0800c7d9
 800c760:	0800c7ed 	.word	0x0800c7ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c76a:	f043 0301 	orr.w	r3, r3, #1
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	699b      	ldr	r3, [r3, #24]
 800c77c:	18d1      	adds	r1, r2, r3
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c784:	f7ff ff5c 	bl	800c640 <prvInsertTimerInActiveList>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d069      	beq.n	800c862 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c790:	6a1b      	ldr	r3, [r3, #32]
 800c792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c794:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c79c:	f003 0304 	and.w	r3, r3, #4
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d05e      	beq.n	800c862 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a8:	699b      	ldr	r3, [r3, #24]
 800c7aa:	441a      	add	r2, r3
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7b6:	f7ff fe05 	bl	800c3c4 <xTimerGenericCommand>
 800c7ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7bc:	6a3b      	ldr	r3, [r7, #32]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d14f      	bne.n	800c862 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	61bb      	str	r3, [r7, #24]
}
 800c7d4:	bf00      	nop
 800c7d6:	e7fe      	b.n	800c7d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7de:	f023 0301 	bic.w	r3, r3, #1
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c7ea:	e03a      	b.n	800c862 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f2:	f043 0301 	orr.w	r3, r3, #1
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10a      	bne.n	800c822 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	617b      	str	r3, [r7, #20]
}
 800c81e:	bf00      	nop
 800c820:	e7fe      	b.n	800c820 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c824:	699a      	ldr	r2, [r3, #24]
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c828:	18d1      	adds	r1, r2, r3
 800c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c82e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c830:	f7ff ff06 	bl	800c640 <prvInsertTimerInActiveList>
					break;
 800c834:	e015      	b.n	800c862 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c83c:	f003 0302 	and.w	r3, r3, #2
 800c840:	2b00      	cmp	r3, #0
 800c842:	d103      	bne.n	800c84c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c846:	f000 fc2b 	bl	800d0a0 <vPortFree>
 800c84a:	e00a      	b.n	800c862 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c852:	f023 0301 	bic.w	r3, r3, #1
 800c856:	b2da      	uxtb	r2, r3
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c85e:	e000      	b.n	800c862 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c860:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c862:	4b08      	ldr	r3, [pc, #32]	; (800c884 <prvProcessReceivedCommands+0x1c0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	1d39      	adds	r1, r7, #4
 800c868:	2200      	movs	r2, #0
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fe fb20 	bl	800aeb0 <xQueueReceive>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	f47f af2a 	bne.w	800c6cc <prvProcessReceivedCommands+0x8>
	}
}
 800c878:	bf00      	nop
 800c87a:	bf00      	nop
 800c87c:	3730      	adds	r7, #48	; 0x30
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	20003924 	.word	0x20003924

0800c888 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b088      	sub	sp, #32
 800c88c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c88e:	e048      	b.n	800c922 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c890:	4b2d      	ldr	r3, [pc, #180]	; (800c948 <prvSwitchTimerLists+0xc0>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c89a:	4b2b      	ldr	r3, [pc, #172]	; (800c948 <prvSwitchTimerLists+0xc0>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fe f839 	bl	800a920 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8bc:	f003 0304 	and.w	r3, r3, #4
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d02e      	beq.n	800c922 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	699b      	ldr	r3, [r3, #24]
 800c8c8:	693a      	ldr	r2, [r7, #16]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d90e      	bls.n	800c8f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8e2:	4b19      	ldr	r3, [pc, #100]	; (800c948 <prvSwitchTimerLists+0xc0>)
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	4610      	mov	r0, r2
 800c8ee:	f7fd ffde 	bl	800a8ae <vListInsert>
 800c8f2:	e016      	b.n	800c922 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	693a      	ldr	r2, [r7, #16]
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f7ff fd60 	bl	800c3c4 <xTimerGenericCommand>
 800c904:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10a      	bne.n	800c922 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c910:	f383 8811 	msr	BASEPRI, r3
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	603b      	str	r3, [r7, #0]
}
 800c91e:	bf00      	nop
 800c920:	e7fe      	b.n	800c920 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c922:	4b09      	ldr	r3, [pc, #36]	; (800c948 <prvSwitchTimerLists+0xc0>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1b1      	bne.n	800c890 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c92c:	4b06      	ldr	r3, [pc, #24]	; (800c948 <prvSwitchTimerLists+0xc0>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c932:	4b06      	ldr	r3, [pc, #24]	; (800c94c <prvSwitchTimerLists+0xc4>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a04      	ldr	r2, [pc, #16]	; (800c948 <prvSwitchTimerLists+0xc0>)
 800c938:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c93a:	4a04      	ldr	r2, [pc, #16]	; (800c94c <prvSwitchTimerLists+0xc4>)
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	6013      	str	r3, [r2, #0]
}
 800c940:	bf00      	nop
 800c942:	3718      	adds	r7, #24
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	2000391c 	.word	0x2000391c
 800c94c:	20003920 	.word	0x20003920

0800c950 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c956:	f000 f9b5 	bl	800ccc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c95a:	4b15      	ldr	r3, [pc, #84]	; (800c9b0 <prvCheckForValidListAndQueue+0x60>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d120      	bne.n	800c9a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c962:	4814      	ldr	r0, [pc, #80]	; (800c9b4 <prvCheckForValidListAndQueue+0x64>)
 800c964:	f7fd ff52 	bl	800a80c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c968:	4813      	ldr	r0, [pc, #76]	; (800c9b8 <prvCheckForValidListAndQueue+0x68>)
 800c96a:	f7fd ff4f 	bl	800a80c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c96e:	4b13      	ldr	r3, [pc, #76]	; (800c9bc <prvCheckForValidListAndQueue+0x6c>)
 800c970:	4a10      	ldr	r2, [pc, #64]	; (800c9b4 <prvCheckForValidListAndQueue+0x64>)
 800c972:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c974:	4b12      	ldr	r3, [pc, #72]	; (800c9c0 <prvCheckForValidListAndQueue+0x70>)
 800c976:	4a10      	ldr	r2, [pc, #64]	; (800c9b8 <prvCheckForValidListAndQueue+0x68>)
 800c978:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c97a:	2300      	movs	r3, #0
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	4b11      	ldr	r3, [pc, #68]	; (800c9c4 <prvCheckForValidListAndQueue+0x74>)
 800c980:	4a11      	ldr	r2, [pc, #68]	; (800c9c8 <prvCheckForValidListAndQueue+0x78>)
 800c982:	2110      	movs	r1, #16
 800c984:	200a      	movs	r0, #10
 800c986:	f7fe f85d 	bl	800aa44 <xQueueGenericCreateStatic>
 800c98a:	4603      	mov	r3, r0
 800c98c:	4a08      	ldr	r2, [pc, #32]	; (800c9b0 <prvCheckForValidListAndQueue+0x60>)
 800c98e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c990:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <prvCheckForValidListAndQueue+0x60>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d005      	beq.n	800c9a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c998:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <prvCheckForValidListAndQueue+0x60>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	490b      	ldr	r1, [pc, #44]	; (800c9cc <prvCheckForValidListAndQueue+0x7c>)
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fe fc76 	bl	800b290 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9a4:	f000 f9be 	bl	800cd24 <vPortExitCritical>
}
 800c9a8:	bf00      	nop
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	20003924 	.word	0x20003924
 800c9b4:	200038f4 	.word	0x200038f4
 800c9b8:	20003908 	.word	0x20003908
 800c9bc:	2000391c 	.word	0x2000391c
 800c9c0:	20003920 	.word	0x20003920
 800c9c4:	200039d0 	.word	0x200039d0
 800c9c8:	20003930 	.word	0x20003930
 800c9cc:	08013618 	.word	0x08013618

0800c9d0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10a      	bne.n	800c9f8 <xTimerIsTimerActive+0x28>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	60fb      	str	r3, [r7, #12]
}
 800c9f4:	bf00      	nop
 800c9f6:	e7fe      	b.n	800c9f6 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800c9f8:	f000 f964 	bl	800ccc4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	617b      	str	r3, [r7, #20]
 800ca0e:	e001      	b.n	800ca14 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800ca10:	2301      	movs	r3, #1
 800ca12:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800ca14:	f000 f986 	bl	800cd24 <vPortExitCritical>

	return xReturn;
 800ca18:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3718      	adds	r7, #24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b086      	sub	sp, #24
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10a      	bne.n	800ca4a <pvTimerGetTimerID+0x28>
	__asm volatile
 800ca34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	60fb      	str	r3, [r7, #12]
}
 800ca46:	bf00      	nop
 800ca48:	e7fe      	b.n	800ca48 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ca4a:	f000 f93b 	bl	800ccc4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	69db      	ldr	r3, [r3, #28]
 800ca52:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ca54:	f000 f966 	bl	800cd24 <vPortExitCritical>

	return pvReturn;
 800ca58:	693b      	ldr	r3, [r7, #16]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
	...

0800ca64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	3b04      	subs	r3, #4
 800ca74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3b04      	subs	r3, #4
 800ca82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	f023 0201 	bic.w	r2, r3, #1
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3b04      	subs	r3, #4
 800ca92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca94:	4a0c      	ldr	r2, [pc, #48]	; (800cac8 <pxPortInitialiseStack+0x64>)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	3b14      	subs	r3, #20
 800ca9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	3b04      	subs	r3, #4
 800caaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f06f 0202 	mvn.w	r2, #2
 800cab2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	3b20      	subs	r3, #32
 800cab8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800caba:	68fb      	ldr	r3, [r7, #12]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3714      	adds	r7, #20
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	0800cacd 	.word	0x0800cacd

0800cacc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cad6:	4b12      	ldr	r3, [pc, #72]	; (800cb20 <prvTaskExitError+0x54>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cade:	d00a      	beq.n	800caf6 <prvTaskExitError+0x2a>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	60fb      	str	r3, [r7, #12]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <prvTaskExitError+0x28>
	__asm volatile
 800caf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafa:	f383 8811 	msr	BASEPRI, r3
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	60bb      	str	r3, [r7, #8]
}
 800cb08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb0a:	bf00      	nop
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d0fc      	beq.n	800cb0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb12:	bf00      	nop
 800cb14:	bf00      	nop
 800cb16:	3714      	adds	r7, #20
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr
 800cb20:	2000003c 	.word	0x2000003c
	...

0800cb30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb30:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <pxCurrentTCBConst2>)
 800cb32:	6819      	ldr	r1, [r3, #0]
 800cb34:	6808      	ldr	r0, [r1, #0]
 800cb36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3a:	f380 8809 	msr	PSP, r0
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f04f 0000 	mov.w	r0, #0
 800cb46:	f380 8811 	msr	BASEPRI, r0
 800cb4a:	4770      	bx	lr
 800cb4c:	f3af 8000 	nop.w

0800cb50 <pxCurrentTCBConst2>:
 800cb50:	200033ec 	.word	0x200033ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop

0800cb58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb58:	4808      	ldr	r0, [pc, #32]	; (800cb7c <prvPortStartFirstTask+0x24>)
 800cb5a:	6800      	ldr	r0, [r0, #0]
 800cb5c:	6800      	ldr	r0, [r0, #0]
 800cb5e:	f380 8808 	msr	MSP, r0
 800cb62:	f04f 0000 	mov.w	r0, #0
 800cb66:	f380 8814 	msr	CONTROL, r0
 800cb6a:	b662      	cpsie	i
 800cb6c:	b661      	cpsie	f
 800cb6e:	f3bf 8f4f 	dsb	sy
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	df00      	svc	0
 800cb78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb7a:	bf00      	nop
 800cb7c:	e000ed08 	.word	0xe000ed08

0800cb80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb86:	4b46      	ldr	r3, [pc, #280]	; (800cca0 <xPortStartScheduler+0x120>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a46      	ldr	r2, [pc, #280]	; (800cca4 <xPortStartScheduler+0x124>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d10a      	bne.n	800cba6 <xPortStartScheduler+0x26>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	613b      	str	r3, [r7, #16]
}
 800cba2:	bf00      	nop
 800cba4:	e7fe      	b.n	800cba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cba6:	4b3e      	ldr	r3, [pc, #248]	; (800cca0 <xPortStartScheduler+0x120>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a3f      	ldr	r2, [pc, #252]	; (800cca8 <xPortStartScheduler+0x128>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d10a      	bne.n	800cbc6 <xPortStartScheduler+0x46>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	60fb      	str	r3, [r7, #12]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cbc6:	4b39      	ldr	r3, [pc, #228]	; (800ccac <xPortStartScheduler+0x12c>)
 800cbc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	22ff      	movs	r2, #255	; 0xff
 800cbd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	4b31      	ldr	r3, [pc, #196]	; (800ccb0 <xPortStartScheduler+0x130>)
 800cbec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cbee:	4b31      	ldr	r3, [pc, #196]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cbf0:	2207      	movs	r2, #7
 800cbf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbf4:	e009      	b.n	800cc0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cbf6:	4b2f      	ldr	r3, [pc, #188]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	4a2d      	ldr	r2, [pc, #180]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cbfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc00:	78fb      	ldrb	r3, [r7, #3]
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	005b      	lsls	r3, r3, #1
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc0a:	78fb      	ldrb	r3, [r7, #3]
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc12:	2b80      	cmp	r3, #128	; 0x80
 800cc14:	d0ef      	beq.n	800cbf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc16:	4b27      	ldr	r3, [pc, #156]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f1c3 0307 	rsb	r3, r3, #7
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	d00a      	beq.n	800cc38 <xPortStartScheduler+0xb8>
	__asm volatile
 800cc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc26:	f383 8811 	msr	BASEPRI, r3
 800cc2a:	f3bf 8f6f 	isb	sy
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	60bb      	str	r3, [r7, #8]
}
 800cc34:	bf00      	nop
 800cc36:	e7fe      	b.n	800cc36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc38:	4b1e      	ldr	r3, [pc, #120]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	021b      	lsls	r3, r3, #8
 800cc3e:	4a1d      	ldr	r2, [pc, #116]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cc40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc42:	4b1c      	ldr	r3, [pc, #112]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc4a:	4a1a      	ldr	r2, [pc, #104]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cc4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc56:	4b18      	ldr	r3, [pc, #96]	; (800ccb8 <xPortStartScheduler+0x138>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a17      	ldr	r2, [pc, #92]	; (800ccb8 <xPortStartScheduler+0x138>)
 800cc5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc62:	4b15      	ldr	r3, [pc, #84]	; (800ccb8 <xPortStartScheduler+0x138>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a14      	ldr	r2, [pc, #80]	; (800ccb8 <xPortStartScheduler+0x138>)
 800cc68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc6e:	f000 f8dd 	bl	800ce2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc72:	4b12      	ldr	r3, [pc, #72]	; (800ccbc <xPortStartScheduler+0x13c>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc78:	f000 f8fc 	bl	800ce74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc7c:	4b10      	ldr	r3, [pc, #64]	; (800ccc0 <xPortStartScheduler+0x140>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a0f      	ldr	r2, [pc, #60]	; (800ccc0 <xPortStartScheduler+0x140>)
 800cc82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc88:	f7ff ff66 	bl	800cb58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc8c:	f7fe ff36 	bl	800bafc <vTaskSwitchContext>
	prvTaskExitError();
 800cc90:	f7ff ff1c 	bl	800cacc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	e000ed00 	.word	0xe000ed00
 800cca4:	410fc271 	.word	0x410fc271
 800cca8:	410fc270 	.word	0x410fc270
 800ccac:	e000e400 	.word	0xe000e400
 800ccb0:	20003a20 	.word	0x20003a20
 800ccb4:	20003a24 	.word	0x20003a24
 800ccb8:	e000ed20 	.word	0xe000ed20
 800ccbc:	2000003c 	.word	0x2000003c
 800ccc0:	e000ef34 	.word	0xe000ef34

0800ccc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	607b      	str	r3, [r7, #4]
}
 800ccdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ccde:	4b0f      	ldr	r3, [pc, #60]	; (800cd1c <vPortEnterCritical+0x58>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	3301      	adds	r3, #1
 800cce4:	4a0d      	ldr	r2, [pc, #52]	; (800cd1c <vPortEnterCritical+0x58>)
 800cce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cce8:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <vPortEnterCritical+0x58>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d10f      	bne.n	800cd10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccf0:	4b0b      	ldr	r3, [pc, #44]	; (800cd20 <vPortEnterCritical+0x5c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <vPortEnterCritical+0x4c>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	603b      	str	r3, [r7, #0]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <vPortEnterCritical+0x4a>
	}
}
 800cd10:	bf00      	nop
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	2000003c 	.word	0x2000003c
 800cd20:	e000ed04 	.word	0xe000ed04

0800cd24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd2a:	4b12      	ldr	r3, [pc, #72]	; (800cd74 <vPortExitCritical+0x50>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10a      	bne.n	800cd48 <vPortExitCritical+0x24>
	__asm volatile
 800cd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd36:	f383 8811 	msr	BASEPRI, r3
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	607b      	str	r3, [r7, #4]
}
 800cd44:	bf00      	nop
 800cd46:	e7fe      	b.n	800cd46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd48:	4b0a      	ldr	r3, [pc, #40]	; (800cd74 <vPortExitCritical+0x50>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	4a09      	ldr	r2, [pc, #36]	; (800cd74 <vPortExitCritical+0x50>)
 800cd50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd52:	4b08      	ldr	r3, [pc, #32]	; (800cd74 <vPortExitCritical+0x50>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d105      	bne.n	800cd66 <vPortExitCritical+0x42>
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	f383 8811 	msr	BASEPRI, r3
}
 800cd64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd66:	bf00      	nop
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	2000003c 	.word	0x2000003c
	...

0800cd80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd80:	f3ef 8009 	mrs	r0, PSP
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	4b15      	ldr	r3, [pc, #84]	; (800cde0 <pxCurrentTCBConst>)
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	f01e 0f10 	tst.w	lr, #16
 800cd90:	bf08      	it	eq
 800cd92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9a:	6010      	str	r0, [r2, #0]
 800cd9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cda0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cda4:	f380 8811 	msr	BASEPRI, r0
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f7fe fea4 	bl	800bafc <vTaskSwitchContext>
 800cdb4:	f04f 0000 	mov.w	r0, #0
 800cdb8:	f380 8811 	msr	BASEPRI, r0
 800cdbc:	bc09      	pop	{r0, r3}
 800cdbe:	6819      	ldr	r1, [r3, #0]
 800cdc0:	6808      	ldr	r0, [r1, #0]
 800cdc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc6:	f01e 0f10 	tst.w	lr, #16
 800cdca:	bf08      	it	eq
 800cdcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cdd0:	f380 8809 	msr	PSP, r0
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	f3af 8000 	nop.w

0800cde0 <pxCurrentTCBConst>:
 800cde0:	200033ec 	.word	0x200033ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop

0800cde8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
	__asm volatile
 800cdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	607b      	str	r3, [r7, #4]
}
 800ce00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce02:	f7fe fdc1 	bl	800b988 <xTaskIncrementTick>
 800ce06:	4603      	mov	r3, r0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d003      	beq.n	800ce14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce0c:	4b06      	ldr	r3, [pc, #24]	; (800ce28 <xPortSysTickHandler+0x40>)
 800ce0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	2300      	movs	r3, #0
 800ce16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	f383 8811 	msr	BASEPRI, r3
}
 800ce1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce20:	bf00      	nop
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	e000ed04 	.word	0xe000ed04

0800ce2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce30:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <vPortSetupTimerInterrupt+0x34>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce36:	4b0b      	ldr	r3, [pc, #44]	; (800ce64 <vPortSetupTimerInterrupt+0x38>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <vPortSetupTimerInterrupt+0x3c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a0a      	ldr	r2, [pc, #40]	; (800ce6c <vPortSetupTimerInterrupt+0x40>)
 800ce42:	fba2 2303 	umull	r2, r3, r2, r3
 800ce46:	095b      	lsrs	r3, r3, #5
 800ce48:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <vPortSetupTimerInterrupt+0x44>)
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce4e:	4b04      	ldr	r3, [pc, #16]	; (800ce60 <vPortSetupTimerInterrupt+0x34>)
 800ce50:	2207      	movs	r2, #7
 800ce52:	601a      	str	r2, [r3, #0]
}
 800ce54:	bf00      	nop
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	e000e010 	.word	0xe000e010
 800ce64:	e000e018 	.word	0xe000e018
 800ce68:	20000010 	.word	0x20000010
 800ce6c:	51eb851f 	.word	0x51eb851f
 800ce70:	e000e014 	.word	0xe000e014

0800ce74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce84 <vPortEnableVFP+0x10>
 800ce78:	6801      	ldr	r1, [r0, #0]
 800ce7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce7e:	6001      	str	r1, [r0, #0]
 800ce80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce82:	bf00      	nop
 800ce84:	e000ed88 	.word	0xe000ed88

0800ce88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce88:	b480      	push	{r7}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce8e:	f3ef 8305 	mrs	r3, IPSR
 800ce92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b0f      	cmp	r3, #15
 800ce98:	d914      	bls.n	800cec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce9a:	4a17      	ldr	r2, [pc, #92]	; (800cef8 <vPortValidateInterruptPriority+0x70>)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	4413      	add	r3, r2
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cea4:	4b15      	ldr	r3, [pc, #84]	; (800cefc <vPortValidateInterruptPriority+0x74>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	7afa      	ldrb	r2, [r7, #11]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d20a      	bcs.n	800cec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	607b      	str	r3, [r7, #4]
}
 800cec0:	bf00      	nop
 800cec2:	e7fe      	b.n	800cec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cec4:	4b0e      	ldr	r3, [pc, #56]	; (800cf00 <vPortValidateInterruptPriority+0x78>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cecc:	4b0d      	ldr	r3, [pc, #52]	; (800cf04 <vPortValidateInterruptPriority+0x7c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d90a      	bls.n	800ceea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	603b      	str	r3, [r7, #0]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <vPortValidateInterruptPriority+0x60>
	}
 800ceea:	bf00      	nop
 800ceec:	3714      	adds	r7, #20
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	e000e3f0 	.word	0xe000e3f0
 800cefc:	20003a20 	.word	0x20003a20
 800cf00:	e000ed0c 	.word	0xe000ed0c
 800cf04:	20003a24 	.word	0x20003a24

0800cf08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b08a      	sub	sp, #40	; 0x28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf14:	f7fe fc7c 	bl	800b810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf18:	4b5b      	ldr	r3, [pc, #364]	; (800d088 <pvPortMalloc+0x180>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf20:	f000 f920 	bl	800d164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf24:	4b59      	ldr	r3, [pc, #356]	; (800d08c <pvPortMalloc+0x184>)
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f040 8093 	bne.w	800d058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d01d      	beq.n	800cf74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cf38:	2208      	movs	r2, #8
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f003 0307 	and.w	r3, r3, #7
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d014      	beq.n	800cf74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f023 0307 	bic.w	r3, r3, #7
 800cf50:	3308      	adds	r3, #8
 800cf52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f003 0307 	and.w	r3, r3, #7
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00a      	beq.n	800cf74 <pvPortMalloc+0x6c>
	__asm volatile
 800cf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	617b      	str	r3, [r7, #20]
}
 800cf70:	bf00      	nop
 800cf72:	e7fe      	b.n	800cf72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d06e      	beq.n	800d058 <pvPortMalloc+0x150>
 800cf7a:	4b45      	ldr	r3, [pc, #276]	; (800d090 <pvPortMalloc+0x188>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d869      	bhi.n	800d058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf84:	4b43      	ldr	r3, [pc, #268]	; (800d094 <pvPortMalloc+0x18c>)
 800cf86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf88:	4b42      	ldr	r3, [pc, #264]	; (800d094 <pvPortMalloc+0x18c>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf8e:	e004      	b.n	800cf9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d903      	bls.n	800cfac <pvPortMalloc+0xa4>
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1f1      	bne.n	800cf90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cfac:	4b36      	ldr	r3, [pc, #216]	; (800d088 <pvPortMalloc+0x180>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d050      	beq.n	800d058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cfb6:	6a3b      	ldr	r3, [r7, #32]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2208      	movs	r2, #8
 800cfbc:	4413      	add	r3, r2
 800cfbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
 800cfc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	1ad2      	subs	r2, r2, r3
 800cfd0:	2308      	movs	r3, #8
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d91f      	bls.n	800d018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cfd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4413      	add	r3, r2
 800cfde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	f003 0307 	and.w	r3, r3, #7
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00a      	beq.n	800d000 <pvPortMalloc+0xf8>
	__asm volatile
 800cfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfee:	f383 8811 	msr	BASEPRI, r3
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	f3bf 8f4f 	dsb	sy
 800cffa:	613b      	str	r3, [r7, #16]
}
 800cffc:	bf00      	nop
 800cffe:	e7fe      	b.n	800cffe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d002:	685a      	ldr	r2, [r3, #4]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	1ad2      	subs	r2, r2, r3
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d012:	69b8      	ldr	r0, [r7, #24]
 800d014:	f000 f908 	bl	800d228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d018:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <pvPortMalloc+0x188>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	4a1b      	ldr	r2, [pc, #108]	; (800d090 <pvPortMalloc+0x188>)
 800d024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d026:	4b1a      	ldr	r3, [pc, #104]	; (800d090 <pvPortMalloc+0x188>)
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	4b1b      	ldr	r3, [pc, #108]	; (800d098 <pvPortMalloc+0x190>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d203      	bcs.n	800d03a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d032:	4b17      	ldr	r3, [pc, #92]	; (800d090 <pvPortMalloc+0x188>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a18      	ldr	r2, [pc, #96]	; (800d098 <pvPortMalloc+0x190>)
 800d038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	4b13      	ldr	r3, [pc, #76]	; (800d08c <pvPortMalloc+0x184>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	431a      	orrs	r2, r3
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	2200      	movs	r2, #0
 800d04c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d04e:	4b13      	ldr	r3, [pc, #76]	; (800d09c <pvPortMalloc+0x194>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3301      	adds	r3, #1
 800d054:	4a11      	ldr	r2, [pc, #68]	; (800d09c <pvPortMalloc+0x194>)
 800d056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d058:	f7fe fbe8 	bl	800b82c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	f003 0307 	and.w	r3, r3, #7
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00a      	beq.n	800d07c <pvPortMalloc+0x174>
	__asm volatile
 800d066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06a:	f383 8811 	msr	BASEPRI, r3
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	f3bf 8f4f 	dsb	sy
 800d076:	60fb      	str	r3, [r7, #12]
}
 800d078:	bf00      	nop
 800d07a:	e7fe      	b.n	800d07a <pvPortMalloc+0x172>
	return pvReturn;
 800d07c:	69fb      	ldr	r3, [r7, #28]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3728      	adds	r7, #40	; 0x28
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20005970 	.word	0x20005970
 800d08c:	20005984 	.word	0x20005984
 800d090:	20005974 	.word	0x20005974
 800d094:	20005968 	.word	0x20005968
 800d098:	20005978 	.word	0x20005978
 800d09c:	2000597c 	.word	0x2000597c

0800d0a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d04d      	beq.n	800d14e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d0b2:	2308      	movs	r3, #8
 800d0b4:	425b      	negs	r3, r3
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	4b24      	ldr	r3, [pc, #144]	; (800d158 <vPortFree+0xb8>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4013      	ands	r3, r2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10a      	bne.n	800d0e4 <vPortFree+0x44>
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	60fb      	str	r3, [r7, #12]
}
 800d0e0:	bf00      	nop
 800d0e2:	e7fe      	b.n	800d0e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00a      	beq.n	800d102 <vPortFree+0x62>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	60bb      	str	r3, [r7, #8]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	4b14      	ldr	r3, [pc, #80]	; (800d158 <vPortFree+0xb8>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4013      	ands	r3, r2
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d01e      	beq.n	800d14e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d11a      	bne.n	800d14e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	4b0e      	ldr	r3, [pc, #56]	; (800d158 <vPortFree+0xb8>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	43db      	mvns	r3, r3
 800d122:	401a      	ands	r2, r3
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d128:	f7fe fb72 	bl	800b810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	685a      	ldr	r2, [r3, #4]
 800d130:	4b0a      	ldr	r3, [pc, #40]	; (800d15c <vPortFree+0xbc>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4413      	add	r3, r2
 800d136:	4a09      	ldr	r2, [pc, #36]	; (800d15c <vPortFree+0xbc>)
 800d138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d13a:	6938      	ldr	r0, [r7, #16]
 800d13c:	f000 f874 	bl	800d228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d140:	4b07      	ldr	r3, [pc, #28]	; (800d160 <vPortFree+0xc0>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	3301      	adds	r3, #1
 800d146:	4a06      	ldr	r2, [pc, #24]	; (800d160 <vPortFree+0xc0>)
 800d148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d14a:	f7fe fb6f 	bl	800b82c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d14e:	bf00      	nop
 800d150:	3718      	adds	r7, #24
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	20005984 	.word	0x20005984
 800d15c:	20005974 	.word	0x20005974
 800d160:	20005980 	.word	0x20005980

0800d164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d16a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800d16e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d170:	4b27      	ldr	r3, [pc, #156]	; (800d210 <prvHeapInit+0xac>)
 800d172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f003 0307 	and.w	r3, r3, #7
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00c      	beq.n	800d198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	3307      	adds	r3, #7
 800d182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f023 0307 	bic.w	r3, r3, #7
 800d18a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	4a1f      	ldr	r2, [pc, #124]	; (800d210 <prvHeapInit+0xac>)
 800d194:	4413      	add	r3, r2
 800d196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d19c:	4a1d      	ldr	r2, [pc, #116]	; (800d214 <prvHeapInit+0xb0>)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1a2:	4b1c      	ldr	r3, [pc, #112]	; (800d214 <prvHeapInit+0xb0>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d1b0:	2208      	movs	r2, #8
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	1a9b      	subs	r3, r3, r2
 800d1b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f023 0307 	bic.w	r3, r3, #7
 800d1be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	4a15      	ldr	r2, [pc, #84]	; (800d218 <prvHeapInit+0xb4>)
 800d1c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d1c6:	4b14      	ldr	r3, [pc, #80]	; (800d218 <prvHeapInit+0xb4>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d1ce:	4b12      	ldr	r3, [pc, #72]	; (800d218 <prvHeapInit+0xb4>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	1ad2      	subs	r2, r2, r3
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d1e4:	4b0c      	ldr	r3, [pc, #48]	; (800d218 <prvHeapInit+0xb4>)
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	4a0a      	ldr	r2, [pc, #40]	; (800d21c <prvHeapInit+0xb8>)
 800d1f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	4a09      	ldr	r2, [pc, #36]	; (800d220 <prvHeapInit+0xbc>)
 800d1fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d1fc:	4b09      	ldr	r3, [pc, #36]	; (800d224 <prvHeapInit+0xc0>)
 800d1fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d202:	601a      	str	r2, [r3, #0]
}
 800d204:	bf00      	nop
 800d206:	3714      	adds	r7, #20
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr
 800d210:	20003a28 	.word	0x20003a28
 800d214:	20005968 	.word	0x20005968
 800d218:	20005970 	.word	0x20005970
 800d21c:	20005978 	.word	0x20005978
 800d220:	20005974 	.word	0x20005974
 800d224:	20005984 	.word	0x20005984

0800d228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d230:	4b28      	ldr	r3, [pc, #160]	; (800d2d4 <prvInsertBlockIntoFreeList+0xac>)
 800d232:	60fb      	str	r3, [r7, #12]
 800d234:	e002      	b.n	800d23c <prvInsertBlockIntoFreeList+0x14>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	60fb      	str	r3, [r7, #12]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	429a      	cmp	r2, r3
 800d244:	d8f7      	bhi.n	800d236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	68ba      	ldr	r2, [r7, #8]
 800d250:	4413      	add	r3, r2
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	429a      	cmp	r2, r3
 800d256:	d108      	bne.n	800d26a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	441a      	add	r2, r3
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	441a      	add	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d118      	bne.n	800d2b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	4b15      	ldr	r3, [pc, #84]	; (800d2d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	429a      	cmp	r2, r3
 800d288:	d00d      	beq.n	800d2a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	685a      	ldr	r2, [r3, #4]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	441a      	add	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	e008      	b.n	800d2b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2a6:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	e003      	b.n	800d2b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d002      	beq.n	800d2c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2c6:	bf00      	nop
 800d2c8:	3714      	adds	r7, #20
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop
 800d2d4:	20005968 	.word	0x20005968
 800d2d8:	20005970 	.word	0x20005970

0800d2dc <__errno>:
 800d2dc:	4b01      	ldr	r3, [pc, #4]	; (800d2e4 <__errno+0x8>)
 800d2de:	6818      	ldr	r0, [r3, #0]
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	20000040 	.word	0x20000040

0800d2e8 <std>:
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	b510      	push	{r4, lr}
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d2f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2f6:	6083      	str	r3, [r0, #8]
 800d2f8:	8181      	strh	r1, [r0, #12]
 800d2fa:	6643      	str	r3, [r0, #100]	; 0x64
 800d2fc:	81c2      	strh	r2, [r0, #14]
 800d2fe:	6183      	str	r3, [r0, #24]
 800d300:	4619      	mov	r1, r3
 800d302:	2208      	movs	r2, #8
 800d304:	305c      	adds	r0, #92	; 0x5c
 800d306:	f000 f91a 	bl	800d53e <memset>
 800d30a:	4b05      	ldr	r3, [pc, #20]	; (800d320 <std+0x38>)
 800d30c:	6263      	str	r3, [r4, #36]	; 0x24
 800d30e:	4b05      	ldr	r3, [pc, #20]	; (800d324 <std+0x3c>)
 800d310:	62a3      	str	r3, [r4, #40]	; 0x28
 800d312:	4b05      	ldr	r3, [pc, #20]	; (800d328 <std+0x40>)
 800d314:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d316:	4b05      	ldr	r3, [pc, #20]	; (800d32c <std+0x44>)
 800d318:	6224      	str	r4, [r4, #32]
 800d31a:	6323      	str	r3, [r4, #48]	; 0x30
 800d31c:	bd10      	pop	{r4, pc}
 800d31e:	bf00      	nop
 800d320:	0800e439 	.word	0x0800e439
 800d324:	0800e45b 	.word	0x0800e45b
 800d328:	0800e493 	.word	0x0800e493
 800d32c:	0800e4b7 	.word	0x0800e4b7

0800d330 <_cleanup_r>:
 800d330:	4901      	ldr	r1, [pc, #4]	; (800d338 <_cleanup_r+0x8>)
 800d332:	f000 b8af 	b.w	800d494 <_fwalk_reent>
 800d336:	bf00      	nop
 800d338:	08010065 	.word	0x08010065

0800d33c <__sfmoreglue>:
 800d33c:	b570      	push	{r4, r5, r6, lr}
 800d33e:	1e4a      	subs	r2, r1, #1
 800d340:	2568      	movs	r5, #104	; 0x68
 800d342:	4355      	muls	r5, r2
 800d344:	460e      	mov	r6, r1
 800d346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d34a:	f000 f901 	bl	800d550 <_malloc_r>
 800d34e:	4604      	mov	r4, r0
 800d350:	b140      	cbz	r0, 800d364 <__sfmoreglue+0x28>
 800d352:	2100      	movs	r1, #0
 800d354:	e9c0 1600 	strd	r1, r6, [r0]
 800d358:	300c      	adds	r0, #12
 800d35a:	60a0      	str	r0, [r4, #8]
 800d35c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d360:	f000 f8ed 	bl	800d53e <memset>
 800d364:	4620      	mov	r0, r4
 800d366:	bd70      	pop	{r4, r5, r6, pc}

0800d368 <__sfp_lock_acquire>:
 800d368:	4801      	ldr	r0, [pc, #4]	; (800d370 <__sfp_lock_acquire+0x8>)
 800d36a:	f000 b8d8 	b.w	800d51e <__retarget_lock_acquire_recursive>
 800d36e:	bf00      	nop
 800d370:	200063a0 	.word	0x200063a0

0800d374 <__sfp_lock_release>:
 800d374:	4801      	ldr	r0, [pc, #4]	; (800d37c <__sfp_lock_release+0x8>)
 800d376:	f000 b8d3 	b.w	800d520 <__retarget_lock_release_recursive>
 800d37a:	bf00      	nop
 800d37c:	200063a0 	.word	0x200063a0

0800d380 <__sinit_lock_acquire>:
 800d380:	4801      	ldr	r0, [pc, #4]	; (800d388 <__sinit_lock_acquire+0x8>)
 800d382:	f000 b8cc 	b.w	800d51e <__retarget_lock_acquire_recursive>
 800d386:	bf00      	nop
 800d388:	2000639b 	.word	0x2000639b

0800d38c <__sinit_lock_release>:
 800d38c:	4801      	ldr	r0, [pc, #4]	; (800d394 <__sinit_lock_release+0x8>)
 800d38e:	f000 b8c7 	b.w	800d520 <__retarget_lock_release_recursive>
 800d392:	bf00      	nop
 800d394:	2000639b 	.word	0x2000639b

0800d398 <__sinit>:
 800d398:	b510      	push	{r4, lr}
 800d39a:	4604      	mov	r4, r0
 800d39c:	f7ff fff0 	bl	800d380 <__sinit_lock_acquire>
 800d3a0:	69a3      	ldr	r3, [r4, #24]
 800d3a2:	b11b      	cbz	r3, 800d3ac <__sinit+0x14>
 800d3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3a8:	f7ff bff0 	b.w	800d38c <__sinit_lock_release>
 800d3ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d3b0:	6523      	str	r3, [r4, #80]	; 0x50
 800d3b2:	4b13      	ldr	r3, [pc, #76]	; (800d400 <__sinit+0x68>)
 800d3b4:	4a13      	ldr	r2, [pc, #76]	; (800d404 <__sinit+0x6c>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d3ba:	42a3      	cmp	r3, r4
 800d3bc:	bf04      	itt	eq
 800d3be:	2301      	moveq	r3, #1
 800d3c0:	61a3      	streq	r3, [r4, #24]
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 f820 	bl	800d408 <__sfp>
 800d3c8:	6060      	str	r0, [r4, #4]
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f000 f81c 	bl	800d408 <__sfp>
 800d3d0:	60a0      	str	r0, [r4, #8]
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f000 f818 	bl	800d408 <__sfp>
 800d3d8:	2200      	movs	r2, #0
 800d3da:	60e0      	str	r0, [r4, #12]
 800d3dc:	2104      	movs	r1, #4
 800d3de:	6860      	ldr	r0, [r4, #4]
 800d3e0:	f7ff ff82 	bl	800d2e8 <std>
 800d3e4:	68a0      	ldr	r0, [r4, #8]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	2109      	movs	r1, #9
 800d3ea:	f7ff ff7d 	bl	800d2e8 <std>
 800d3ee:	68e0      	ldr	r0, [r4, #12]
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	2112      	movs	r1, #18
 800d3f4:	f7ff ff78 	bl	800d2e8 <std>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	61a3      	str	r3, [r4, #24]
 800d3fc:	e7d2      	b.n	800d3a4 <__sinit+0xc>
 800d3fe:	bf00      	nop
 800d400:	080136fc 	.word	0x080136fc
 800d404:	0800d331 	.word	0x0800d331

0800d408 <__sfp>:
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	4607      	mov	r7, r0
 800d40c:	f7ff ffac 	bl	800d368 <__sfp_lock_acquire>
 800d410:	4b1e      	ldr	r3, [pc, #120]	; (800d48c <__sfp+0x84>)
 800d412:	681e      	ldr	r6, [r3, #0]
 800d414:	69b3      	ldr	r3, [r6, #24]
 800d416:	b913      	cbnz	r3, 800d41e <__sfp+0x16>
 800d418:	4630      	mov	r0, r6
 800d41a:	f7ff ffbd 	bl	800d398 <__sinit>
 800d41e:	3648      	adds	r6, #72	; 0x48
 800d420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d424:	3b01      	subs	r3, #1
 800d426:	d503      	bpl.n	800d430 <__sfp+0x28>
 800d428:	6833      	ldr	r3, [r6, #0]
 800d42a:	b30b      	cbz	r3, 800d470 <__sfp+0x68>
 800d42c:	6836      	ldr	r6, [r6, #0]
 800d42e:	e7f7      	b.n	800d420 <__sfp+0x18>
 800d430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d434:	b9d5      	cbnz	r5, 800d46c <__sfp+0x64>
 800d436:	4b16      	ldr	r3, [pc, #88]	; (800d490 <__sfp+0x88>)
 800d438:	60e3      	str	r3, [r4, #12]
 800d43a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d43e:	6665      	str	r5, [r4, #100]	; 0x64
 800d440:	f000 f86c 	bl	800d51c <__retarget_lock_init_recursive>
 800d444:	f7ff ff96 	bl	800d374 <__sfp_lock_release>
 800d448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d44c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d450:	6025      	str	r5, [r4, #0]
 800d452:	61a5      	str	r5, [r4, #24]
 800d454:	2208      	movs	r2, #8
 800d456:	4629      	mov	r1, r5
 800d458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d45c:	f000 f86f 	bl	800d53e <memset>
 800d460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d468:	4620      	mov	r0, r4
 800d46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d46c:	3468      	adds	r4, #104	; 0x68
 800d46e:	e7d9      	b.n	800d424 <__sfp+0x1c>
 800d470:	2104      	movs	r1, #4
 800d472:	4638      	mov	r0, r7
 800d474:	f7ff ff62 	bl	800d33c <__sfmoreglue>
 800d478:	4604      	mov	r4, r0
 800d47a:	6030      	str	r0, [r6, #0]
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d1d5      	bne.n	800d42c <__sfp+0x24>
 800d480:	f7ff ff78 	bl	800d374 <__sfp_lock_release>
 800d484:	230c      	movs	r3, #12
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	e7ee      	b.n	800d468 <__sfp+0x60>
 800d48a:	bf00      	nop
 800d48c:	080136fc 	.word	0x080136fc
 800d490:	ffff0001 	.word	0xffff0001

0800d494 <_fwalk_reent>:
 800d494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d498:	4606      	mov	r6, r0
 800d49a:	4688      	mov	r8, r1
 800d49c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d4a0:	2700      	movs	r7, #0
 800d4a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4a6:	f1b9 0901 	subs.w	r9, r9, #1
 800d4aa:	d505      	bpl.n	800d4b8 <_fwalk_reent+0x24>
 800d4ac:	6824      	ldr	r4, [r4, #0]
 800d4ae:	2c00      	cmp	r4, #0
 800d4b0:	d1f7      	bne.n	800d4a2 <_fwalk_reent+0xe>
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4b8:	89ab      	ldrh	r3, [r5, #12]
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d907      	bls.n	800d4ce <_fwalk_reent+0x3a>
 800d4be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	d003      	beq.n	800d4ce <_fwalk_reent+0x3a>
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	47c0      	blx	r8
 800d4cc:	4307      	orrs	r7, r0
 800d4ce:	3568      	adds	r5, #104	; 0x68
 800d4d0:	e7e9      	b.n	800d4a6 <_fwalk_reent+0x12>
	...

0800d4d4 <__libc_init_array>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	4d0d      	ldr	r5, [pc, #52]	; (800d50c <__libc_init_array+0x38>)
 800d4d8:	4c0d      	ldr	r4, [pc, #52]	; (800d510 <__libc_init_array+0x3c>)
 800d4da:	1b64      	subs	r4, r4, r5
 800d4dc:	10a4      	asrs	r4, r4, #2
 800d4de:	2600      	movs	r6, #0
 800d4e0:	42a6      	cmp	r6, r4
 800d4e2:	d109      	bne.n	800d4f8 <__libc_init_array+0x24>
 800d4e4:	4d0b      	ldr	r5, [pc, #44]	; (800d514 <__libc_init_array+0x40>)
 800d4e6:	4c0c      	ldr	r4, [pc, #48]	; (800d518 <__libc_init_array+0x44>)
 800d4e8:	f005 fb64 	bl	8012bb4 <_init>
 800d4ec:	1b64      	subs	r4, r4, r5
 800d4ee:	10a4      	asrs	r4, r4, #2
 800d4f0:	2600      	movs	r6, #0
 800d4f2:	42a6      	cmp	r6, r4
 800d4f4:	d105      	bne.n	800d502 <__libc_init_array+0x2e>
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}
 800d4f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4fc:	4798      	blx	r3
 800d4fe:	3601      	adds	r6, #1
 800d500:	e7ee      	b.n	800d4e0 <__libc_init_array+0xc>
 800d502:	f855 3b04 	ldr.w	r3, [r5], #4
 800d506:	4798      	blx	r3
 800d508:	3601      	adds	r6, #1
 800d50a:	e7f2      	b.n	800d4f2 <__libc_init_array+0x1e>
 800d50c:	08013ba0 	.word	0x08013ba0
 800d510:	08013ba0 	.word	0x08013ba0
 800d514:	08013ba0 	.word	0x08013ba0
 800d518:	08013ba4 	.word	0x08013ba4

0800d51c <__retarget_lock_init_recursive>:
 800d51c:	4770      	bx	lr

0800d51e <__retarget_lock_acquire_recursive>:
 800d51e:	4770      	bx	lr

0800d520 <__retarget_lock_release_recursive>:
 800d520:	4770      	bx	lr

0800d522 <memcpy>:
 800d522:	440a      	add	r2, r1
 800d524:	4291      	cmp	r1, r2
 800d526:	f100 33ff 	add.w	r3, r0, #4294967295
 800d52a:	d100      	bne.n	800d52e <memcpy+0xc>
 800d52c:	4770      	bx	lr
 800d52e:	b510      	push	{r4, lr}
 800d530:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d534:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d538:	4291      	cmp	r1, r2
 800d53a:	d1f9      	bne.n	800d530 <memcpy+0xe>
 800d53c:	bd10      	pop	{r4, pc}

0800d53e <memset>:
 800d53e:	4402      	add	r2, r0
 800d540:	4603      	mov	r3, r0
 800d542:	4293      	cmp	r3, r2
 800d544:	d100      	bne.n	800d548 <memset+0xa>
 800d546:	4770      	bx	lr
 800d548:	f803 1b01 	strb.w	r1, [r3], #1
 800d54c:	e7f9      	b.n	800d542 <memset+0x4>
	...

0800d550 <_malloc_r>:
 800d550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d552:	1ccd      	adds	r5, r1, #3
 800d554:	f025 0503 	bic.w	r5, r5, #3
 800d558:	3508      	adds	r5, #8
 800d55a:	2d0c      	cmp	r5, #12
 800d55c:	bf38      	it	cc
 800d55e:	250c      	movcc	r5, #12
 800d560:	2d00      	cmp	r5, #0
 800d562:	4606      	mov	r6, r0
 800d564:	db01      	blt.n	800d56a <_malloc_r+0x1a>
 800d566:	42a9      	cmp	r1, r5
 800d568:	d903      	bls.n	800d572 <_malloc_r+0x22>
 800d56a:	230c      	movs	r3, #12
 800d56c:	6033      	str	r3, [r6, #0]
 800d56e:	2000      	movs	r0, #0
 800d570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d572:	f003 f953 	bl	801081c <__malloc_lock>
 800d576:	4921      	ldr	r1, [pc, #132]	; (800d5fc <_malloc_r+0xac>)
 800d578:	680a      	ldr	r2, [r1, #0]
 800d57a:	4614      	mov	r4, r2
 800d57c:	b99c      	cbnz	r4, 800d5a6 <_malloc_r+0x56>
 800d57e:	4f20      	ldr	r7, [pc, #128]	; (800d600 <_malloc_r+0xb0>)
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	b923      	cbnz	r3, 800d58e <_malloc_r+0x3e>
 800d584:	4621      	mov	r1, r4
 800d586:	4630      	mov	r0, r6
 800d588:	f000 ff20 	bl	800e3cc <_sbrk_r>
 800d58c:	6038      	str	r0, [r7, #0]
 800d58e:	4629      	mov	r1, r5
 800d590:	4630      	mov	r0, r6
 800d592:	f000 ff1b 	bl	800e3cc <_sbrk_r>
 800d596:	1c43      	adds	r3, r0, #1
 800d598:	d123      	bne.n	800d5e2 <_malloc_r+0x92>
 800d59a:	230c      	movs	r3, #12
 800d59c:	6033      	str	r3, [r6, #0]
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f003 f942 	bl	8010828 <__malloc_unlock>
 800d5a4:	e7e3      	b.n	800d56e <_malloc_r+0x1e>
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	1b5b      	subs	r3, r3, r5
 800d5aa:	d417      	bmi.n	800d5dc <_malloc_r+0x8c>
 800d5ac:	2b0b      	cmp	r3, #11
 800d5ae:	d903      	bls.n	800d5b8 <_malloc_r+0x68>
 800d5b0:	6023      	str	r3, [r4, #0]
 800d5b2:	441c      	add	r4, r3
 800d5b4:	6025      	str	r5, [r4, #0]
 800d5b6:	e004      	b.n	800d5c2 <_malloc_r+0x72>
 800d5b8:	6863      	ldr	r3, [r4, #4]
 800d5ba:	42a2      	cmp	r2, r4
 800d5bc:	bf0c      	ite	eq
 800d5be:	600b      	streq	r3, [r1, #0]
 800d5c0:	6053      	strne	r3, [r2, #4]
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	f003 f930 	bl	8010828 <__malloc_unlock>
 800d5c8:	f104 000b 	add.w	r0, r4, #11
 800d5cc:	1d23      	adds	r3, r4, #4
 800d5ce:	f020 0007 	bic.w	r0, r0, #7
 800d5d2:	1ac2      	subs	r2, r0, r3
 800d5d4:	d0cc      	beq.n	800d570 <_malloc_r+0x20>
 800d5d6:	1a1b      	subs	r3, r3, r0
 800d5d8:	50a3      	str	r3, [r4, r2]
 800d5da:	e7c9      	b.n	800d570 <_malloc_r+0x20>
 800d5dc:	4622      	mov	r2, r4
 800d5de:	6864      	ldr	r4, [r4, #4]
 800d5e0:	e7cc      	b.n	800d57c <_malloc_r+0x2c>
 800d5e2:	1cc4      	adds	r4, r0, #3
 800d5e4:	f024 0403 	bic.w	r4, r4, #3
 800d5e8:	42a0      	cmp	r0, r4
 800d5ea:	d0e3      	beq.n	800d5b4 <_malloc_r+0x64>
 800d5ec:	1a21      	subs	r1, r4, r0
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	f000 feec 	bl	800e3cc <_sbrk_r>
 800d5f4:	3001      	adds	r0, #1
 800d5f6:	d1dd      	bne.n	800d5b4 <_malloc_r+0x64>
 800d5f8:	e7cf      	b.n	800d59a <_malloc_r+0x4a>
 800d5fa:	bf00      	nop
 800d5fc:	20005988 	.word	0x20005988
 800d600:	2000598c 	.word	0x2000598c

0800d604 <__cvt>:
 800d604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d608:	ec55 4b10 	vmov	r4, r5, d0
 800d60c:	2d00      	cmp	r5, #0
 800d60e:	460e      	mov	r6, r1
 800d610:	4619      	mov	r1, r3
 800d612:	462b      	mov	r3, r5
 800d614:	bfbb      	ittet	lt
 800d616:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d61a:	461d      	movlt	r5, r3
 800d61c:	2300      	movge	r3, #0
 800d61e:	232d      	movlt	r3, #45	; 0x2d
 800d620:	700b      	strb	r3, [r1, #0]
 800d622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d624:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d628:	4691      	mov	r9, r2
 800d62a:	f023 0820 	bic.w	r8, r3, #32
 800d62e:	bfbc      	itt	lt
 800d630:	4622      	movlt	r2, r4
 800d632:	4614      	movlt	r4, r2
 800d634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d638:	d005      	beq.n	800d646 <__cvt+0x42>
 800d63a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d63e:	d100      	bne.n	800d642 <__cvt+0x3e>
 800d640:	3601      	adds	r6, #1
 800d642:	2102      	movs	r1, #2
 800d644:	e000      	b.n	800d648 <__cvt+0x44>
 800d646:	2103      	movs	r1, #3
 800d648:	ab03      	add	r3, sp, #12
 800d64a:	9301      	str	r3, [sp, #4]
 800d64c:	ab02      	add	r3, sp, #8
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	ec45 4b10 	vmov	d0, r4, r5
 800d654:	4653      	mov	r3, sl
 800d656:	4632      	mov	r2, r6
 800d658:	f001 fe92 	bl	800f380 <_dtoa_r>
 800d65c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d660:	4607      	mov	r7, r0
 800d662:	d102      	bne.n	800d66a <__cvt+0x66>
 800d664:	f019 0f01 	tst.w	r9, #1
 800d668:	d022      	beq.n	800d6b0 <__cvt+0xac>
 800d66a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d66e:	eb07 0906 	add.w	r9, r7, r6
 800d672:	d110      	bne.n	800d696 <__cvt+0x92>
 800d674:	783b      	ldrb	r3, [r7, #0]
 800d676:	2b30      	cmp	r3, #48	; 0x30
 800d678:	d10a      	bne.n	800d690 <__cvt+0x8c>
 800d67a:	2200      	movs	r2, #0
 800d67c:	2300      	movs	r3, #0
 800d67e:	4620      	mov	r0, r4
 800d680:	4629      	mov	r1, r5
 800d682:	f7f3 fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 800d686:	b918      	cbnz	r0, 800d690 <__cvt+0x8c>
 800d688:	f1c6 0601 	rsb	r6, r6, #1
 800d68c:	f8ca 6000 	str.w	r6, [sl]
 800d690:	f8da 3000 	ldr.w	r3, [sl]
 800d694:	4499      	add	r9, r3
 800d696:	2200      	movs	r2, #0
 800d698:	2300      	movs	r3, #0
 800d69a:	4620      	mov	r0, r4
 800d69c:	4629      	mov	r1, r5
 800d69e:	f7f3 fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6a2:	b108      	cbz	r0, 800d6a8 <__cvt+0xa4>
 800d6a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6a8:	2230      	movs	r2, #48	; 0x30
 800d6aa:	9b03      	ldr	r3, [sp, #12]
 800d6ac:	454b      	cmp	r3, r9
 800d6ae:	d307      	bcc.n	800d6c0 <__cvt+0xbc>
 800d6b0:	9b03      	ldr	r3, [sp, #12]
 800d6b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6b4:	1bdb      	subs	r3, r3, r7
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	6013      	str	r3, [r2, #0]
 800d6ba:	b004      	add	sp, #16
 800d6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c0:	1c59      	adds	r1, r3, #1
 800d6c2:	9103      	str	r1, [sp, #12]
 800d6c4:	701a      	strb	r2, [r3, #0]
 800d6c6:	e7f0      	b.n	800d6aa <__cvt+0xa6>

0800d6c8 <__exponent>:
 800d6c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2900      	cmp	r1, #0
 800d6ce:	bfb8      	it	lt
 800d6d0:	4249      	neglt	r1, r1
 800d6d2:	f803 2b02 	strb.w	r2, [r3], #2
 800d6d6:	bfb4      	ite	lt
 800d6d8:	222d      	movlt	r2, #45	; 0x2d
 800d6da:	222b      	movge	r2, #43	; 0x2b
 800d6dc:	2909      	cmp	r1, #9
 800d6de:	7042      	strb	r2, [r0, #1]
 800d6e0:	dd2a      	ble.n	800d738 <__exponent+0x70>
 800d6e2:	f10d 0407 	add.w	r4, sp, #7
 800d6e6:	46a4      	mov	ip, r4
 800d6e8:	270a      	movs	r7, #10
 800d6ea:	46a6      	mov	lr, r4
 800d6ec:	460a      	mov	r2, r1
 800d6ee:	fb91 f6f7 	sdiv	r6, r1, r7
 800d6f2:	fb07 1516 	mls	r5, r7, r6, r1
 800d6f6:	3530      	adds	r5, #48	; 0x30
 800d6f8:	2a63      	cmp	r2, #99	; 0x63
 800d6fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800d6fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d702:	4631      	mov	r1, r6
 800d704:	dcf1      	bgt.n	800d6ea <__exponent+0x22>
 800d706:	3130      	adds	r1, #48	; 0x30
 800d708:	f1ae 0502 	sub.w	r5, lr, #2
 800d70c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d710:	1c44      	adds	r4, r0, #1
 800d712:	4629      	mov	r1, r5
 800d714:	4561      	cmp	r1, ip
 800d716:	d30a      	bcc.n	800d72e <__exponent+0x66>
 800d718:	f10d 0209 	add.w	r2, sp, #9
 800d71c:	eba2 020e 	sub.w	r2, r2, lr
 800d720:	4565      	cmp	r5, ip
 800d722:	bf88      	it	hi
 800d724:	2200      	movhi	r2, #0
 800d726:	4413      	add	r3, r2
 800d728:	1a18      	subs	r0, r3, r0
 800d72a:	b003      	add	sp, #12
 800d72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d72e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d732:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d736:	e7ed      	b.n	800d714 <__exponent+0x4c>
 800d738:	2330      	movs	r3, #48	; 0x30
 800d73a:	3130      	adds	r1, #48	; 0x30
 800d73c:	7083      	strb	r3, [r0, #2]
 800d73e:	70c1      	strb	r1, [r0, #3]
 800d740:	1d03      	adds	r3, r0, #4
 800d742:	e7f1      	b.n	800d728 <__exponent+0x60>

0800d744 <_printf_float>:
 800d744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d748:	ed2d 8b02 	vpush	{d8}
 800d74c:	b08d      	sub	sp, #52	; 0x34
 800d74e:	460c      	mov	r4, r1
 800d750:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d754:	4616      	mov	r6, r2
 800d756:	461f      	mov	r7, r3
 800d758:	4605      	mov	r5, r0
 800d75a:	f003 f82f 	bl	80107bc <_localeconv_r>
 800d75e:	f8d0 a000 	ldr.w	sl, [r0]
 800d762:	4650      	mov	r0, sl
 800d764:	f7f2 fd34 	bl	80001d0 <strlen>
 800d768:	2300      	movs	r3, #0
 800d76a:	930a      	str	r3, [sp, #40]	; 0x28
 800d76c:	6823      	ldr	r3, [r4, #0]
 800d76e:	9305      	str	r3, [sp, #20]
 800d770:	f8d8 3000 	ldr.w	r3, [r8]
 800d774:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d778:	3307      	adds	r3, #7
 800d77a:	f023 0307 	bic.w	r3, r3, #7
 800d77e:	f103 0208 	add.w	r2, r3, #8
 800d782:	f8c8 2000 	str.w	r2, [r8]
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d78e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d792:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d796:	9307      	str	r3, [sp, #28]
 800d798:	f8cd 8018 	str.w	r8, [sp, #24]
 800d79c:	ee08 0a10 	vmov	s16, r0
 800d7a0:	4b9f      	ldr	r3, [pc, #636]	; (800da20 <_printf_float+0x2dc>)
 800d7a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7aa:	f7f3 f9bf 	bl	8000b2c <__aeabi_dcmpun>
 800d7ae:	bb88      	cbnz	r0, 800d814 <_printf_float+0xd0>
 800d7b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7b4:	4b9a      	ldr	r3, [pc, #616]	; (800da20 <_printf_float+0x2dc>)
 800d7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ba:	f7f3 f999 	bl	8000af0 <__aeabi_dcmple>
 800d7be:	bb48      	cbnz	r0, 800d814 <_printf_float+0xd0>
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	4640      	mov	r0, r8
 800d7c6:	4649      	mov	r1, r9
 800d7c8:	f7f3 f988 	bl	8000adc <__aeabi_dcmplt>
 800d7cc:	b110      	cbz	r0, 800d7d4 <_printf_float+0x90>
 800d7ce:	232d      	movs	r3, #45	; 0x2d
 800d7d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7d4:	4b93      	ldr	r3, [pc, #588]	; (800da24 <_printf_float+0x2e0>)
 800d7d6:	4894      	ldr	r0, [pc, #592]	; (800da28 <_printf_float+0x2e4>)
 800d7d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d7dc:	bf94      	ite	ls
 800d7de:	4698      	movls	r8, r3
 800d7e0:	4680      	movhi	r8, r0
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	6123      	str	r3, [r4, #16]
 800d7e6:	9b05      	ldr	r3, [sp, #20]
 800d7e8:	f023 0204 	bic.w	r2, r3, #4
 800d7ec:	6022      	str	r2, [r4, #0]
 800d7ee:	f04f 0900 	mov.w	r9, #0
 800d7f2:	9700      	str	r7, [sp, #0]
 800d7f4:	4633      	mov	r3, r6
 800d7f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800d7f8:	4621      	mov	r1, r4
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	f000 f9d8 	bl	800dbb0 <_printf_common>
 800d800:	3001      	adds	r0, #1
 800d802:	f040 8090 	bne.w	800d926 <_printf_float+0x1e2>
 800d806:	f04f 30ff 	mov.w	r0, #4294967295
 800d80a:	b00d      	add	sp, #52	; 0x34
 800d80c:	ecbd 8b02 	vpop	{d8}
 800d810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d814:	4642      	mov	r2, r8
 800d816:	464b      	mov	r3, r9
 800d818:	4640      	mov	r0, r8
 800d81a:	4649      	mov	r1, r9
 800d81c:	f7f3 f986 	bl	8000b2c <__aeabi_dcmpun>
 800d820:	b140      	cbz	r0, 800d834 <_printf_float+0xf0>
 800d822:	464b      	mov	r3, r9
 800d824:	2b00      	cmp	r3, #0
 800d826:	bfbc      	itt	lt
 800d828:	232d      	movlt	r3, #45	; 0x2d
 800d82a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d82e:	487f      	ldr	r0, [pc, #508]	; (800da2c <_printf_float+0x2e8>)
 800d830:	4b7f      	ldr	r3, [pc, #508]	; (800da30 <_printf_float+0x2ec>)
 800d832:	e7d1      	b.n	800d7d8 <_printf_float+0x94>
 800d834:	6863      	ldr	r3, [r4, #4]
 800d836:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d83a:	9206      	str	r2, [sp, #24]
 800d83c:	1c5a      	adds	r2, r3, #1
 800d83e:	d13f      	bne.n	800d8c0 <_printf_float+0x17c>
 800d840:	2306      	movs	r3, #6
 800d842:	6063      	str	r3, [r4, #4]
 800d844:	9b05      	ldr	r3, [sp, #20]
 800d846:	6861      	ldr	r1, [r4, #4]
 800d848:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d84c:	2300      	movs	r3, #0
 800d84e:	9303      	str	r3, [sp, #12]
 800d850:	ab0a      	add	r3, sp, #40	; 0x28
 800d852:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d856:	ab09      	add	r3, sp, #36	; 0x24
 800d858:	ec49 8b10 	vmov	d0, r8, r9
 800d85c:	9300      	str	r3, [sp, #0]
 800d85e:	6022      	str	r2, [r4, #0]
 800d860:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d864:	4628      	mov	r0, r5
 800d866:	f7ff fecd 	bl	800d604 <__cvt>
 800d86a:	9b06      	ldr	r3, [sp, #24]
 800d86c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d86e:	2b47      	cmp	r3, #71	; 0x47
 800d870:	4680      	mov	r8, r0
 800d872:	d108      	bne.n	800d886 <_printf_float+0x142>
 800d874:	1cc8      	adds	r0, r1, #3
 800d876:	db02      	blt.n	800d87e <_printf_float+0x13a>
 800d878:	6863      	ldr	r3, [r4, #4]
 800d87a:	4299      	cmp	r1, r3
 800d87c:	dd41      	ble.n	800d902 <_printf_float+0x1be>
 800d87e:	f1ab 0b02 	sub.w	fp, fp, #2
 800d882:	fa5f fb8b 	uxtb.w	fp, fp
 800d886:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d88a:	d820      	bhi.n	800d8ce <_printf_float+0x18a>
 800d88c:	3901      	subs	r1, #1
 800d88e:	465a      	mov	r2, fp
 800d890:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d894:	9109      	str	r1, [sp, #36]	; 0x24
 800d896:	f7ff ff17 	bl	800d6c8 <__exponent>
 800d89a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d89c:	1813      	adds	r3, r2, r0
 800d89e:	2a01      	cmp	r2, #1
 800d8a0:	4681      	mov	r9, r0
 800d8a2:	6123      	str	r3, [r4, #16]
 800d8a4:	dc02      	bgt.n	800d8ac <_printf_float+0x168>
 800d8a6:	6822      	ldr	r2, [r4, #0]
 800d8a8:	07d2      	lsls	r2, r2, #31
 800d8aa:	d501      	bpl.n	800d8b0 <_printf_float+0x16c>
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	6123      	str	r3, [r4, #16]
 800d8b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d09c      	beq.n	800d7f2 <_printf_float+0xae>
 800d8b8:	232d      	movs	r3, #45	; 0x2d
 800d8ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8be:	e798      	b.n	800d7f2 <_printf_float+0xae>
 800d8c0:	9a06      	ldr	r2, [sp, #24]
 800d8c2:	2a47      	cmp	r2, #71	; 0x47
 800d8c4:	d1be      	bne.n	800d844 <_printf_float+0x100>
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1bc      	bne.n	800d844 <_printf_float+0x100>
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	e7b9      	b.n	800d842 <_printf_float+0xfe>
 800d8ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d8d2:	d118      	bne.n	800d906 <_printf_float+0x1c2>
 800d8d4:	2900      	cmp	r1, #0
 800d8d6:	6863      	ldr	r3, [r4, #4]
 800d8d8:	dd0b      	ble.n	800d8f2 <_printf_float+0x1ae>
 800d8da:	6121      	str	r1, [r4, #16]
 800d8dc:	b913      	cbnz	r3, 800d8e4 <_printf_float+0x1a0>
 800d8de:	6822      	ldr	r2, [r4, #0]
 800d8e0:	07d0      	lsls	r0, r2, #31
 800d8e2:	d502      	bpl.n	800d8ea <_printf_float+0x1a6>
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	440b      	add	r3, r1
 800d8e8:	6123      	str	r3, [r4, #16]
 800d8ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800d8ec:	f04f 0900 	mov.w	r9, #0
 800d8f0:	e7de      	b.n	800d8b0 <_printf_float+0x16c>
 800d8f2:	b913      	cbnz	r3, 800d8fa <_printf_float+0x1b6>
 800d8f4:	6822      	ldr	r2, [r4, #0]
 800d8f6:	07d2      	lsls	r2, r2, #31
 800d8f8:	d501      	bpl.n	800d8fe <_printf_float+0x1ba>
 800d8fa:	3302      	adds	r3, #2
 800d8fc:	e7f4      	b.n	800d8e8 <_printf_float+0x1a4>
 800d8fe:	2301      	movs	r3, #1
 800d900:	e7f2      	b.n	800d8e8 <_printf_float+0x1a4>
 800d902:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d908:	4299      	cmp	r1, r3
 800d90a:	db05      	blt.n	800d918 <_printf_float+0x1d4>
 800d90c:	6823      	ldr	r3, [r4, #0]
 800d90e:	6121      	str	r1, [r4, #16]
 800d910:	07d8      	lsls	r0, r3, #31
 800d912:	d5ea      	bpl.n	800d8ea <_printf_float+0x1a6>
 800d914:	1c4b      	adds	r3, r1, #1
 800d916:	e7e7      	b.n	800d8e8 <_printf_float+0x1a4>
 800d918:	2900      	cmp	r1, #0
 800d91a:	bfd4      	ite	le
 800d91c:	f1c1 0202 	rsble	r2, r1, #2
 800d920:	2201      	movgt	r2, #1
 800d922:	4413      	add	r3, r2
 800d924:	e7e0      	b.n	800d8e8 <_printf_float+0x1a4>
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	055a      	lsls	r2, r3, #21
 800d92a:	d407      	bmi.n	800d93c <_printf_float+0x1f8>
 800d92c:	6923      	ldr	r3, [r4, #16]
 800d92e:	4642      	mov	r2, r8
 800d930:	4631      	mov	r1, r6
 800d932:	4628      	mov	r0, r5
 800d934:	47b8      	blx	r7
 800d936:	3001      	adds	r0, #1
 800d938:	d12c      	bne.n	800d994 <_printf_float+0x250>
 800d93a:	e764      	b.n	800d806 <_printf_float+0xc2>
 800d93c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d940:	f240 80e0 	bls.w	800db04 <_printf_float+0x3c0>
 800d944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d948:	2200      	movs	r2, #0
 800d94a:	2300      	movs	r3, #0
 800d94c:	f7f3 f8bc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d950:	2800      	cmp	r0, #0
 800d952:	d034      	beq.n	800d9be <_printf_float+0x27a>
 800d954:	4a37      	ldr	r2, [pc, #220]	; (800da34 <_printf_float+0x2f0>)
 800d956:	2301      	movs	r3, #1
 800d958:	4631      	mov	r1, r6
 800d95a:	4628      	mov	r0, r5
 800d95c:	47b8      	blx	r7
 800d95e:	3001      	adds	r0, #1
 800d960:	f43f af51 	beq.w	800d806 <_printf_float+0xc2>
 800d964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d968:	429a      	cmp	r2, r3
 800d96a:	db02      	blt.n	800d972 <_printf_float+0x22e>
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	07d8      	lsls	r0, r3, #31
 800d970:	d510      	bpl.n	800d994 <_printf_float+0x250>
 800d972:	ee18 3a10 	vmov	r3, s16
 800d976:	4652      	mov	r2, sl
 800d978:	4631      	mov	r1, r6
 800d97a:	4628      	mov	r0, r5
 800d97c:	47b8      	blx	r7
 800d97e:	3001      	adds	r0, #1
 800d980:	f43f af41 	beq.w	800d806 <_printf_float+0xc2>
 800d984:	f04f 0800 	mov.w	r8, #0
 800d988:	f104 091a 	add.w	r9, r4, #26
 800d98c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d98e:	3b01      	subs	r3, #1
 800d990:	4543      	cmp	r3, r8
 800d992:	dc09      	bgt.n	800d9a8 <_printf_float+0x264>
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	079b      	lsls	r3, r3, #30
 800d998:	f100 8105 	bmi.w	800dba6 <_printf_float+0x462>
 800d99c:	68e0      	ldr	r0, [r4, #12]
 800d99e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9a0:	4298      	cmp	r0, r3
 800d9a2:	bfb8      	it	lt
 800d9a4:	4618      	movlt	r0, r3
 800d9a6:	e730      	b.n	800d80a <_printf_float+0xc6>
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	464a      	mov	r2, r9
 800d9ac:	4631      	mov	r1, r6
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	47b8      	blx	r7
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	f43f af27 	beq.w	800d806 <_printf_float+0xc2>
 800d9b8:	f108 0801 	add.w	r8, r8, #1
 800d9bc:	e7e6      	b.n	800d98c <_printf_float+0x248>
 800d9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	dc39      	bgt.n	800da38 <_printf_float+0x2f4>
 800d9c4:	4a1b      	ldr	r2, [pc, #108]	; (800da34 <_printf_float+0x2f0>)
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	4631      	mov	r1, r6
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	47b8      	blx	r7
 800d9ce:	3001      	adds	r0, #1
 800d9d0:	f43f af19 	beq.w	800d806 <_printf_float+0xc2>
 800d9d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	d102      	bne.n	800d9e2 <_printf_float+0x29e>
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	07d9      	lsls	r1, r3, #31
 800d9e0:	d5d8      	bpl.n	800d994 <_printf_float+0x250>
 800d9e2:	ee18 3a10 	vmov	r3, s16
 800d9e6:	4652      	mov	r2, sl
 800d9e8:	4631      	mov	r1, r6
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	47b8      	blx	r7
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	f43f af09 	beq.w	800d806 <_printf_float+0xc2>
 800d9f4:	f04f 0900 	mov.w	r9, #0
 800d9f8:	f104 0a1a 	add.w	sl, r4, #26
 800d9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9fe:	425b      	negs	r3, r3
 800da00:	454b      	cmp	r3, r9
 800da02:	dc01      	bgt.n	800da08 <_printf_float+0x2c4>
 800da04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da06:	e792      	b.n	800d92e <_printf_float+0x1ea>
 800da08:	2301      	movs	r3, #1
 800da0a:	4652      	mov	r2, sl
 800da0c:	4631      	mov	r1, r6
 800da0e:	4628      	mov	r0, r5
 800da10:	47b8      	blx	r7
 800da12:	3001      	adds	r0, #1
 800da14:	f43f aef7 	beq.w	800d806 <_printf_float+0xc2>
 800da18:	f109 0901 	add.w	r9, r9, #1
 800da1c:	e7ee      	b.n	800d9fc <_printf_float+0x2b8>
 800da1e:	bf00      	nop
 800da20:	7fefffff 	.word	0x7fefffff
 800da24:	08013700 	.word	0x08013700
 800da28:	08013704 	.word	0x08013704
 800da2c:	0801370c 	.word	0x0801370c
 800da30:	08013708 	.word	0x08013708
 800da34:	08013710 	.word	0x08013710
 800da38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da3c:	429a      	cmp	r2, r3
 800da3e:	bfa8      	it	ge
 800da40:	461a      	movge	r2, r3
 800da42:	2a00      	cmp	r2, #0
 800da44:	4691      	mov	r9, r2
 800da46:	dc37      	bgt.n	800dab8 <_printf_float+0x374>
 800da48:	f04f 0b00 	mov.w	fp, #0
 800da4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da50:	f104 021a 	add.w	r2, r4, #26
 800da54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da56:	9305      	str	r3, [sp, #20]
 800da58:	eba3 0309 	sub.w	r3, r3, r9
 800da5c:	455b      	cmp	r3, fp
 800da5e:	dc33      	bgt.n	800dac8 <_printf_float+0x384>
 800da60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da64:	429a      	cmp	r2, r3
 800da66:	db3b      	blt.n	800dae0 <_printf_float+0x39c>
 800da68:	6823      	ldr	r3, [r4, #0]
 800da6a:	07da      	lsls	r2, r3, #31
 800da6c:	d438      	bmi.n	800dae0 <_printf_float+0x39c>
 800da6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da70:	9b05      	ldr	r3, [sp, #20]
 800da72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da74:	1ad3      	subs	r3, r2, r3
 800da76:	eba2 0901 	sub.w	r9, r2, r1
 800da7a:	4599      	cmp	r9, r3
 800da7c:	bfa8      	it	ge
 800da7e:	4699      	movge	r9, r3
 800da80:	f1b9 0f00 	cmp.w	r9, #0
 800da84:	dc35      	bgt.n	800daf2 <_printf_float+0x3ae>
 800da86:	f04f 0800 	mov.w	r8, #0
 800da8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da8e:	f104 0a1a 	add.w	sl, r4, #26
 800da92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da96:	1a9b      	subs	r3, r3, r2
 800da98:	eba3 0309 	sub.w	r3, r3, r9
 800da9c:	4543      	cmp	r3, r8
 800da9e:	f77f af79 	ble.w	800d994 <_printf_float+0x250>
 800daa2:	2301      	movs	r3, #1
 800daa4:	4652      	mov	r2, sl
 800daa6:	4631      	mov	r1, r6
 800daa8:	4628      	mov	r0, r5
 800daaa:	47b8      	blx	r7
 800daac:	3001      	adds	r0, #1
 800daae:	f43f aeaa 	beq.w	800d806 <_printf_float+0xc2>
 800dab2:	f108 0801 	add.w	r8, r8, #1
 800dab6:	e7ec      	b.n	800da92 <_printf_float+0x34e>
 800dab8:	4613      	mov	r3, r2
 800daba:	4631      	mov	r1, r6
 800dabc:	4642      	mov	r2, r8
 800dabe:	4628      	mov	r0, r5
 800dac0:	47b8      	blx	r7
 800dac2:	3001      	adds	r0, #1
 800dac4:	d1c0      	bne.n	800da48 <_printf_float+0x304>
 800dac6:	e69e      	b.n	800d806 <_printf_float+0xc2>
 800dac8:	2301      	movs	r3, #1
 800daca:	4631      	mov	r1, r6
 800dacc:	4628      	mov	r0, r5
 800dace:	9205      	str	r2, [sp, #20]
 800dad0:	47b8      	blx	r7
 800dad2:	3001      	adds	r0, #1
 800dad4:	f43f ae97 	beq.w	800d806 <_printf_float+0xc2>
 800dad8:	9a05      	ldr	r2, [sp, #20]
 800dada:	f10b 0b01 	add.w	fp, fp, #1
 800dade:	e7b9      	b.n	800da54 <_printf_float+0x310>
 800dae0:	ee18 3a10 	vmov	r3, s16
 800dae4:	4652      	mov	r2, sl
 800dae6:	4631      	mov	r1, r6
 800dae8:	4628      	mov	r0, r5
 800daea:	47b8      	blx	r7
 800daec:	3001      	adds	r0, #1
 800daee:	d1be      	bne.n	800da6e <_printf_float+0x32a>
 800daf0:	e689      	b.n	800d806 <_printf_float+0xc2>
 800daf2:	9a05      	ldr	r2, [sp, #20]
 800daf4:	464b      	mov	r3, r9
 800daf6:	4442      	add	r2, r8
 800daf8:	4631      	mov	r1, r6
 800dafa:	4628      	mov	r0, r5
 800dafc:	47b8      	blx	r7
 800dafe:	3001      	adds	r0, #1
 800db00:	d1c1      	bne.n	800da86 <_printf_float+0x342>
 800db02:	e680      	b.n	800d806 <_printf_float+0xc2>
 800db04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db06:	2a01      	cmp	r2, #1
 800db08:	dc01      	bgt.n	800db0e <_printf_float+0x3ca>
 800db0a:	07db      	lsls	r3, r3, #31
 800db0c:	d538      	bpl.n	800db80 <_printf_float+0x43c>
 800db0e:	2301      	movs	r3, #1
 800db10:	4642      	mov	r2, r8
 800db12:	4631      	mov	r1, r6
 800db14:	4628      	mov	r0, r5
 800db16:	47b8      	blx	r7
 800db18:	3001      	adds	r0, #1
 800db1a:	f43f ae74 	beq.w	800d806 <_printf_float+0xc2>
 800db1e:	ee18 3a10 	vmov	r3, s16
 800db22:	4652      	mov	r2, sl
 800db24:	4631      	mov	r1, r6
 800db26:	4628      	mov	r0, r5
 800db28:	47b8      	blx	r7
 800db2a:	3001      	adds	r0, #1
 800db2c:	f43f ae6b 	beq.w	800d806 <_printf_float+0xc2>
 800db30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db34:	2200      	movs	r2, #0
 800db36:	2300      	movs	r3, #0
 800db38:	f7f2 ffc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800db3c:	b9d8      	cbnz	r0, 800db76 <_printf_float+0x432>
 800db3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db40:	f108 0201 	add.w	r2, r8, #1
 800db44:	3b01      	subs	r3, #1
 800db46:	4631      	mov	r1, r6
 800db48:	4628      	mov	r0, r5
 800db4a:	47b8      	blx	r7
 800db4c:	3001      	adds	r0, #1
 800db4e:	d10e      	bne.n	800db6e <_printf_float+0x42a>
 800db50:	e659      	b.n	800d806 <_printf_float+0xc2>
 800db52:	2301      	movs	r3, #1
 800db54:	4652      	mov	r2, sl
 800db56:	4631      	mov	r1, r6
 800db58:	4628      	mov	r0, r5
 800db5a:	47b8      	blx	r7
 800db5c:	3001      	adds	r0, #1
 800db5e:	f43f ae52 	beq.w	800d806 <_printf_float+0xc2>
 800db62:	f108 0801 	add.w	r8, r8, #1
 800db66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db68:	3b01      	subs	r3, #1
 800db6a:	4543      	cmp	r3, r8
 800db6c:	dcf1      	bgt.n	800db52 <_printf_float+0x40e>
 800db6e:	464b      	mov	r3, r9
 800db70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db74:	e6dc      	b.n	800d930 <_printf_float+0x1ec>
 800db76:	f04f 0800 	mov.w	r8, #0
 800db7a:	f104 0a1a 	add.w	sl, r4, #26
 800db7e:	e7f2      	b.n	800db66 <_printf_float+0x422>
 800db80:	2301      	movs	r3, #1
 800db82:	4642      	mov	r2, r8
 800db84:	e7df      	b.n	800db46 <_printf_float+0x402>
 800db86:	2301      	movs	r3, #1
 800db88:	464a      	mov	r2, r9
 800db8a:	4631      	mov	r1, r6
 800db8c:	4628      	mov	r0, r5
 800db8e:	47b8      	blx	r7
 800db90:	3001      	adds	r0, #1
 800db92:	f43f ae38 	beq.w	800d806 <_printf_float+0xc2>
 800db96:	f108 0801 	add.w	r8, r8, #1
 800db9a:	68e3      	ldr	r3, [r4, #12]
 800db9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db9e:	1a5b      	subs	r3, r3, r1
 800dba0:	4543      	cmp	r3, r8
 800dba2:	dcf0      	bgt.n	800db86 <_printf_float+0x442>
 800dba4:	e6fa      	b.n	800d99c <_printf_float+0x258>
 800dba6:	f04f 0800 	mov.w	r8, #0
 800dbaa:	f104 0919 	add.w	r9, r4, #25
 800dbae:	e7f4      	b.n	800db9a <_printf_float+0x456>

0800dbb0 <_printf_common>:
 800dbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb4:	4616      	mov	r6, r2
 800dbb6:	4699      	mov	r9, r3
 800dbb8:	688a      	ldr	r2, [r1, #8]
 800dbba:	690b      	ldr	r3, [r1, #16]
 800dbbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	bfb8      	it	lt
 800dbc4:	4613      	movlt	r3, r2
 800dbc6:	6033      	str	r3, [r6, #0]
 800dbc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dbcc:	4607      	mov	r7, r0
 800dbce:	460c      	mov	r4, r1
 800dbd0:	b10a      	cbz	r2, 800dbd6 <_printf_common+0x26>
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	6033      	str	r3, [r6, #0]
 800dbd6:	6823      	ldr	r3, [r4, #0]
 800dbd8:	0699      	lsls	r1, r3, #26
 800dbda:	bf42      	ittt	mi
 800dbdc:	6833      	ldrmi	r3, [r6, #0]
 800dbde:	3302      	addmi	r3, #2
 800dbe0:	6033      	strmi	r3, [r6, #0]
 800dbe2:	6825      	ldr	r5, [r4, #0]
 800dbe4:	f015 0506 	ands.w	r5, r5, #6
 800dbe8:	d106      	bne.n	800dbf8 <_printf_common+0x48>
 800dbea:	f104 0a19 	add.w	sl, r4, #25
 800dbee:	68e3      	ldr	r3, [r4, #12]
 800dbf0:	6832      	ldr	r2, [r6, #0]
 800dbf2:	1a9b      	subs	r3, r3, r2
 800dbf4:	42ab      	cmp	r3, r5
 800dbf6:	dc26      	bgt.n	800dc46 <_printf_common+0x96>
 800dbf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dbfc:	1e13      	subs	r3, r2, #0
 800dbfe:	6822      	ldr	r2, [r4, #0]
 800dc00:	bf18      	it	ne
 800dc02:	2301      	movne	r3, #1
 800dc04:	0692      	lsls	r2, r2, #26
 800dc06:	d42b      	bmi.n	800dc60 <_printf_common+0xb0>
 800dc08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc0c:	4649      	mov	r1, r9
 800dc0e:	4638      	mov	r0, r7
 800dc10:	47c0      	blx	r8
 800dc12:	3001      	adds	r0, #1
 800dc14:	d01e      	beq.n	800dc54 <_printf_common+0xa4>
 800dc16:	6823      	ldr	r3, [r4, #0]
 800dc18:	68e5      	ldr	r5, [r4, #12]
 800dc1a:	6832      	ldr	r2, [r6, #0]
 800dc1c:	f003 0306 	and.w	r3, r3, #6
 800dc20:	2b04      	cmp	r3, #4
 800dc22:	bf08      	it	eq
 800dc24:	1aad      	subeq	r5, r5, r2
 800dc26:	68a3      	ldr	r3, [r4, #8]
 800dc28:	6922      	ldr	r2, [r4, #16]
 800dc2a:	bf0c      	ite	eq
 800dc2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc30:	2500      	movne	r5, #0
 800dc32:	4293      	cmp	r3, r2
 800dc34:	bfc4      	itt	gt
 800dc36:	1a9b      	subgt	r3, r3, r2
 800dc38:	18ed      	addgt	r5, r5, r3
 800dc3a:	2600      	movs	r6, #0
 800dc3c:	341a      	adds	r4, #26
 800dc3e:	42b5      	cmp	r5, r6
 800dc40:	d11a      	bne.n	800dc78 <_printf_common+0xc8>
 800dc42:	2000      	movs	r0, #0
 800dc44:	e008      	b.n	800dc58 <_printf_common+0xa8>
 800dc46:	2301      	movs	r3, #1
 800dc48:	4652      	mov	r2, sl
 800dc4a:	4649      	mov	r1, r9
 800dc4c:	4638      	mov	r0, r7
 800dc4e:	47c0      	blx	r8
 800dc50:	3001      	adds	r0, #1
 800dc52:	d103      	bne.n	800dc5c <_printf_common+0xac>
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295
 800dc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc5c:	3501      	adds	r5, #1
 800dc5e:	e7c6      	b.n	800dbee <_printf_common+0x3e>
 800dc60:	18e1      	adds	r1, r4, r3
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	2030      	movs	r0, #48	; 0x30
 800dc66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc6a:	4422      	add	r2, r4
 800dc6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc74:	3302      	adds	r3, #2
 800dc76:	e7c7      	b.n	800dc08 <_printf_common+0x58>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	4622      	mov	r2, r4
 800dc7c:	4649      	mov	r1, r9
 800dc7e:	4638      	mov	r0, r7
 800dc80:	47c0      	blx	r8
 800dc82:	3001      	adds	r0, #1
 800dc84:	d0e6      	beq.n	800dc54 <_printf_common+0xa4>
 800dc86:	3601      	adds	r6, #1
 800dc88:	e7d9      	b.n	800dc3e <_printf_common+0x8e>
	...

0800dc8c <_printf_i>:
 800dc8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc90:	460c      	mov	r4, r1
 800dc92:	4691      	mov	r9, r2
 800dc94:	7e27      	ldrb	r7, [r4, #24]
 800dc96:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dc98:	2f78      	cmp	r7, #120	; 0x78
 800dc9a:	4680      	mov	r8, r0
 800dc9c:	469a      	mov	sl, r3
 800dc9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dca2:	d807      	bhi.n	800dcb4 <_printf_i+0x28>
 800dca4:	2f62      	cmp	r7, #98	; 0x62
 800dca6:	d80a      	bhi.n	800dcbe <_printf_i+0x32>
 800dca8:	2f00      	cmp	r7, #0
 800dcaa:	f000 80d8 	beq.w	800de5e <_printf_i+0x1d2>
 800dcae:	2f58      	cmp	r7, #88	; 0x58
 800dcb0:	f000 80a3 	beq.w	800ddfa <_printf_i+0x16e>
 800dcb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dcb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dcbc:	e03a      	b.n	800dd34 <_printf_i+0xa8>
 800dcbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dcc2:	2b15      	cmp	r3, #21
 800dcc4:	d8f6      	bhi.n	800dcb4 <_printf_i+0x28>
 800dcc6:	a001      	add	r0, pc, #4	; (adr r0, 800dccc <_printf_i+0x40>)
 800dcc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dccc:	0800dd25 	.word	0x0800dd25
 800dcd0:	0800dd39 	.word	0x0800dd39
 800dcd4:	0800dcb5 	.word	0x0800dcb5
 800dcd8:	0800dcb5 	.word	0x0800dcb5
 800dcdc:	0800dcb5 	.word	0x0800dcb5
 800dce0:	0800dcb5 	.word	0x0800dcb5
 800dce4:	0800dd39 	.word	0x0800dd39
 800dce8:	0800dcb5 	.word	0x0800dcb5
 800dcec:	0800dcb5 	.word	0x0800dcb5
 800dcf0:	0800dcb5 	.word	0x0800dcb5
 800dcf4:	0800dcb5 	.word	0x0800dcb5
 800dcf8:	0800de45 	.word	0x0800de45
 800dcfc:	0800dd69 	.word	0x0800dd69
 800dd00:	0800de27 	.word	0x0800de27
 800dd04:	0800dcb5 	.word	0x0800dcb5
 800dd08:	0800dcb5 	.word	0x0800dcb5
 800dd0c:	0800de67 	.word	0x0800de67
 800dd10:	0800dcb5 	.word	0x0800dcb5
 800dd14:	0800dd69 	.word	0x0800dd69
 800dd18:	0800dcb5 	.word	0x0800dcb5
 800dd1c:	0800dcb5 	.word	0x0800dcb5
 800dd20:	0800de2f 	.word	0x0800de2f
 800dd24:	680b      	ldr	r3, [r1, #0]
 800dd26:	1d1a      	adds	r2, r3, #4
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	600a      	str	r2, [r1, #0]
 800dd2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dd30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd34:	2301      	movs	r3, #1
 800dd36:	e0a3      	b.n	800de80 <_printf_i+0x1f4>
 800dd38:	6825      	ldr	r5, [r4, #0]
 800dd3a:	6808      	ldr	r0, [r1, #0]
 800dd3c:	062e      	lsls	r6, r5, #24
 800dd3e:	f100 0304 	add.w	r3, r0, #4
 800dd42:	d50a      	bpl.n	800dd5a <_printf_i+0xce>
 800dd44:	6805      	ldr	r5, [r0, #0]
 800dd46:	600b      	str	r3, [r1, #0]
 800dd48:	2d00      	cmp	r5, #0
 800dd4a:	da03      	bge.n	800dd54 <_printf_i+0xc8>
 800dd4c:	232d      	movs	r3, #45	; 0x2d
 800dd4e:	426d      	negs	r5, r5
 800dd50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd54:	485e      	ldr	r0, [pc, #376]	; (800ded0 <_printf_i+0x244>)
 800dd56:	230a      	movs	r3, #10
 800dd58:	e019      	b.n	800dd8e <_printf_i+0x102>
 800dd5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dd5e:	6805      	ldr	r5, [r0, #0]
 800dd60:	600b      	str	r3, [r1, #0]
 800dd62:	bf18      	it	ne
 800dd64:	b22d      	sxthne	r5, r5
 800dd66:	e7ef      	b.n	800dd48 <_printf_i+0xbc>
 800dd68:	680b      	ldr	r3, [r1, #0]
 800dd6a:	6825      	ldr	r5, [r4, #0]
 800dd6c:	1d18      	adds	r0, r3, #4
 800dd6e:	6008      	str	r0, [r1, #0]
 800dd70:	0628      	lsls	r0, r5, #24
 800dd72:	d501      	bpl.n	800dd78 <_printf_i+0xec>
 800dd74:	681d      	ldr	r5, [r3, #0]
 800dd76:	e002      	b.n	800dd7e <_printf_i+0xf2>
 800dd78:	0669      	lsls	r1, r5, #25
 800dd7a:	d5fb      	bpl.n	800dd74 <_printf_i+0xe8>
 800dd7c:	881d      	ldrh	r5, [r3, #0]
 800dd7e:	4854      	ldr	r0, [pc, #336]	; (800ded0 <_printf_i+0x244>)
 800dd80:	2f6f      	cmp	r7, #111	; 0x6f
 800dd82:	bf0c      	ite	eq
 800dd84:	2308      	moveq	r3, #8
 800dd86:	230a      	movne	r3, #10
 800dd88:	2100      	movs	r1, #0
 800dd8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd8e:	6866      	ldr	r6, [r4, #4]
 800dd90:	60a6      	str	r6, [r4, #8]
 800dd92:	2e00      	cmp	r6, #0
 800dd94:	bfa2      	ittt	ge
 800dd96:	6821      	ldrge	r1, [r4, #0]
 800dd98:	f021 0104 	bicge.w	r1, r1, #4
 800dd9c:	6021      	strge	r1, [r4, #0]
 800dd9e:	b90d      	cbnz	r5, 800dda4 <_printf_i+0x118>
 800dda0:	2e00      	cmp	r6, #0
 800dda2:	d04d      	beq.n	800de40 <_printf_i+0x1b4>
 800dda4:	4616      	mov	r6, r2
 800dda6:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddaa:	fb03 5711 	mls	r7, r3, r1, r5
 800ddae:	5dc7      	ldrb	r7, [r0, r7]
 800ddb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ddb4:	462f      	mov	r7, r5
 800ddb6:	42bb      	cmp	r3, r7
 800ddb8:	460d      	mov	r5, r1
 800ddba:	d9f4      	bls.n	800dda6 <_printf_i+0x11a>
 800ddbc:	2b08      	cmp	r3, #8
 800ddbe:	d10b      	bne.n	800ddd8 <_printf_i+0x14c>
 800ddc0:	6823      	ldr	r3, [r4, #0]
 800ddc2:	07df      	lsls	r7, r3, #31
 800ddc4:	d508      	bpl.n	800ddd8 <_printf_i+0x14c>
 800ddc6:	6923      	ldr	r3, [r4, #16]
 800ddc8:	6861      	ldr	r1, [r4, #4]
 800ddca:	4299      	cmp	r1, r3
 800ddcc:	bfde      	ittt	le
 800ddce:	2330      	movle	r3, #48	; 0x30
 800ddd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ddd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ddd8:	1b92      	subs	r2, r2, r6
 800ddda:	6122      	str	r2, [r4, #16]
 800dddc:	f8cd a000 	str.w	sl, [sp]
 800dde0:	464b      	mov	r3, r9
 800dde2:	aa03      	add	r2, sp, #12
 800dde4:	4621      	mov	r1, r4
 800dde6:	4640      	mov	r0, r8
 800dde8:	f7ff fee2 	bl	800dbb0 <_printf_common>
 800ddec:	3001      	adds	r0, #1
 800ddee:	d14c      	bne.n	800de8a <_printf_i+0x1fe>
 800ddf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf4:	b004      	add	sp, #16
 800ddf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddfa:	4835      	ldr	r0, [pc, #212]	; (800ded0 <_printf_i+0x244>)
 800ddfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800de00:	6823      	ldr	r3, [r4, #0]
 800de02:	680e      	ldr	r6, [r1, #0]
 800de04:	061f      	lsls	r7, r3, #24
 800de06:	f856 5b04 	ldr.w	r5, [r6], #4
 800de0a:	600e      	str	r6, [r1, #0]
 800de0c:	d514      	bpl.n	800de38 <_printf_i+0x1ac>
 800de0e:	07d9      	lsls	r1, r3, #31
 800de10:	bf44      	itt	mi
 800de12:	f043 0320 	orrmi.w	r3, r3, #32
 800de16:	6023      	strmi	r3, [r4, #0]
 800de18:	b91d      	cbnz	r5, 800de22 <_printf_i+0x196>
 800de1a:	6823      	ldr	r3, [r4, #0]
 800de1c:	f023 0320 	bic.w	r3, r3, #32
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	2310      	movs	r3, #16
 800de24:	e7b0      	b.n	800dd88 <_printf_i+0xfc>
 800de26:	6823      	ldr	r3, [r4, #0]
 800de28:	f043 0320 	orr.w	r3, r3, #32
 800de2c:	6023      	str	r3, [r4, #0]
 800de2e:	2378      	movs	r3, #120	; 0x78
 800de30:	4828      	ldr	r0, [pc, #160]	; (800ded4 <_printf_i+0x248>)
 800de32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de36:	e7e3      	b.n	800de00 <_printf_i+0x174>
 800de38:	065e      	lsls	r6, r3, #25
 800de3a:	bf48      	it	mi
 800de3c:	b2ad      	uxthmi	r5, r5
 800de3e:	e7e6      	b.n	800de0e <_printf_i+0x182>
 800de40:	4616      	mov	r6, r2
 800de42:	e7bb      	b.n	800ddbc <_printf_i+0x130>
 800de44:	680b      	ldr	r3, [r1, #0]
 800de46:	6826      	ldr	r6, [r4, #0]
 800de48:	6960      	ldr	r0, [r4, #20]
 800de4a:	1d1d      	adds	r5, r3, #4
 800de4c:	600d      	str	r5, [r1, #0]
 800de4e:	0635      	lsls	r5, r6, #24
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	d501      	bpl.n	800de58 <_printf_i+0x1cc>
 800de54:	6018      	str	r0, [r3, #0]
 800de56:	e002      	b.n	800de5e <_printf_i+0x1d2>
 800de58:	0671      	lsls	r1, r6, #25
 800de5a:	d5fb      	bpl.n	800de54 <_printf_i+0x1c8>
 800de5c:	8018      	strh	r0, [r3, #0]
 800de5e:	2300      	movs	r3, #0
 800de60:	6123      	str	r3, [r4, #16]
 800de62:	4616      	mov	r6, r2
 800de64:	e7ba      	b.n	800dddc <_printf_i+0x150>
 800de66:	680b      	ldr	r3, [r1, #0]
 800de68:	1d1a      	adds	r2, r3, #4
 800de6a:	600a      	str	r2, [r1, #0]
 800de6c:	681e      	ldr	r6, [r3, #0]
 800de6e:	6862      	ldr	r2, [r4, #4]
 800de70:	2100      	movs	r1, #0
 800de72:	4630      	mov	r0, r6
 800de74:	f7f2 f9b4 	bl	80001e0 <memchr>
 800de78:	b108      	cbz	r0, 800de7e <_printf_i+0x1f2>
 800de7a:	1b80      	subs	r0, r0, r6
 800de7c:	6060      	str	r0, [r4, #4]
 800de7e:	6863      	ldr	r3, [r4, #4]
 800de80:	6123      	str	r3, [r4, #16]
 800de82:	2300      	movs	r3, #0
 800de84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de88:	e7a8      	b.n	800dddc <_printf_i+0x150>
 800de8a:	6923      	ldr	r3, [r4, #16]
 800de8c:	4632      	mov	r2, r6
 800de8e:	4649      	mov	r1, r9
 800de90:	4640      	mov	r0, r8
 800de92:	47d0      	blx	sl
 800de94:	3001      	adds	r0, #1
 800de96:	d0ab      	beq.n	800ddf0 <_printf_i+0x164>
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	079b      	lsls	r3, r3, #30
 800de9c:	d413      	bmi.n	800dec6 <_printf_i+0x23a>
 800de9e:	68e0      	ldr	r0, [r4, #12]
 800dea0:	9b03      	ldr	r3, [sp, #12]
 800dea2:	4298      	cmp	r0, r3
 800dea4:	bfb8      	it	lt
 800dea6:	4618      	movlt	r0, r3
 800dea8:	e7a4      	b.n	800ddf4 <_printf_i+0x168>
 800deaa:	2301      	movs	r3, #1
 800deac:	4632      	mov	r2, r6
 800deae:	4649      	mov	r1, r9
 800deb0:	4640      	mov	r0, r8
 800deb2:	47d0      	blx	sl
 800deb4:	3001      	adds	r0, #1
 800deb6:	d09b      	beq.n	800ddf0 <_printf_i+0x164>
 800deb8:	3501      	adds	r5, #1
 800deba:	68e3      	ldr	r3, [r4, #12]
 800debc:	9903      	ldr	r1, [sp, #12]
 800debe:	1a5b      	subs	r3, r3, r1
 800dec0:	42ab      	cmp	r3, r5
 800dec2:	dcf2      	bgt.n	800deaa <_printf_i+0x21e>
 800dec4:	e7eb      	b.n	800de9e <_printf_i+0x212>
 800dec6:	2500      	movs	r5, #0
 800dec8:	f104 0619 	add.w	r6, r4, #25
 800decc:	e7f5      	b.n	800deba <_printf_i+0x22e>
 800dece:	bf00      	nop
 800ded0:	08013712 	.word	0x08013712
 800ded4:	08013723 	.word	0x08013723

0800ded8 <_scanf_float>:
 800ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	b087      	sub	sp, #28
 800dede:	4617      	mov	r7, r2
 800dee0:	9303      	str	r3, [sp, #12]
 800dee2:	688b      	ldr	r3, [r1, #8]
 800dee4:	1e5a      	subs	r2, r3, #1
 800dee6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800deea:	bf83      	ittte	hi
 800deec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800def0:	195b      	addhi	r3, r3, r5
 800def2:	9302      	strhi	r3, [sp, #8]
 800def4:	2300      	movls	r3, #0
 800def6:	bf86      	itte	hi
 800def8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800defc:	608b      	strhi	r3, [r1, #8]
 800defe:	9302      	strls	r3, [sp, #8]
 800df00:	680b      	ldr	r3, [r1, #0]
 800df02:	468b      	mov	fp, r1
 800df04:	2500      	movs	r5, #0
 800df06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800df0a:	f84b 3b1c 	str.w	r3, [fp], #28
 800df0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800df12:	4680      	mov	r8, r0
 800df14:	460c      	mov	r4, r1
 800df16:	465e      	mov	r6, fp
 800df18:	46aa      	mov	sl, r5
 800df1a:	46a9      	mov	r9, r5
 800df1c:	9501      	str	r5, [sp, #4]
 800df1e:	68a2      	ldr	r2, [r4, #8]
 800df20:	b152      	cbz	r2, 800df38 <_scanf_float+0x60>
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	2b4e      	cmp	r3, #78	; 0x4e
 800df28:	d864      	bhi.n	800dff4 <_scanf_float+0x11c>
 800df2a:	2b40      	cmp	r3, #64	; 0x40
 800df2c:	d83c      	bhi.n	800dfa8 <_scanf_float+0xd0>
 800df2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800df32:	b2c8      	uxtb	r0, r1
 800df34:	280e      	cmp	r0, #14
 800df36:	d93a      	bls.n	800dfae <_scanf_float+0xd6>
 800df38:	f1b9 0f00 	cmp.w	r9, #0
 800df3c:	d003      	beq.n	800df46 <_scanf_float+0x6e>
 800df3e:	6823      	ldr	r3, [r4, #0]
 800df40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df44:	6023      	str	r3, [r4, #0]
 800df46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df4a:	f1ba 0f01 	cmp.w	sl, #1
 800df4e:	f200 8113 	bhi.w	800e178 <_scanf_float+0x2a0>
 800df52:	455e      	cmp	r6, fp
 800df54:	f200 8105 	bhi.w	800e162 <_scanf_float+0x28a>
 800df58:	2501      	movs	r5, #1
 800df5a:	4628      	mov	r0, r5
 800df5c:	b007      	add	sp, #28
 800df5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800df66:	2a0d      	cmp	r2, #13
 800df68:	d8e6      	bhi.n	800df38 <_scanf_float+0x60>
 800df6a:	a101      	add	r1, pc, #4	; (adr r1, 800df70 <_scanf_float+0x98>)
 800df6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df70:	0800e0af 	.word	0x0800e0af
 800df74:	0800df39 	.word	0x0800df39
 800df78:	0800df39 	.word	0x0800df39
 800df7c:	0800df39 	.word	0x0800df39
 800df80:	0800e10f 	.word	0x0800e10f
 800df84:	0800e0e7 	.word	0x0800e0e7
 800df88:	0800df39 	.word	0x0800df39
 800df8c:	0800df39 	.word	0x0800df39
 800df90:	0800e0bd 	.word	0x0800e0bd
 800df94:	0800df39 	.word	0x0800df39
 800df98:	0800df39 	.word	0x0800df39
 800df9c:	0800df39 	.word	0x0800df39
 800dfa0:	0800df39 	.word	0x0800df39
 800dfa4:	0800e075 	.word	0x0800e075
 800dfa8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dfac:	e7db      	b.n	800df66 <_scanf_float+0x8e>
 800dfae:	290e      	cmp	r1, #14
 800dfb0:	d8c2      	bhi.n	800df38 <_scanf_float+0x60>
 800dfb2:	a001      	add	r0, pc, #4	; (adr r0, 800dfb8 <_scanf_float+0xe0>)
 800dfb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dfb8:	0800e067 	.word	0x0800e067
 800dfbc:	0800df39 	.word	0x0800df39
 800dfc0:	0800e067 	.word	0x0800e067
 800dfc4:	0800e0fb 	.word	0x0800e0fb
 800dfc8:	0800df39 	.word	0x0800df39
 800dfcc:	0800e015 	.word	0x0800e015
 800dfd0:	0800e051 	.word	0x0800e051
 800dfd4:	0800e051 	.word	0x0800e051
 800dfd8:	0800e051 	.word	0x0800e051
 800dfdc:	0800e051 	.word	0x0800e051
 800dfe0:	0800e051 	.word	0x0800e051
 800dfe4:	0800e051 	.word	0x0800e051
 800dfe8:	0800e051 	.word	0x0800e051
 800dfec:	0800e051 	.word	0x0800e051
 800dff0:	0800e051 	.word	0x0800e051
 800dff4:	2b6e      	cmp	r3, #110	; 0x6e
 800dff6:	d809      	bhi.n	800e00c <_scanf_float+0x134>
 800dff8:	2b60      	cmp	r3, #96	; 0x60
 800dffa:	d8b2      	bhi.n	800df62 <_scanf_float+0x8a>
 800dffc:	2b54      	cmp	r3, #84	; 0x54
 800dffe:	d077      	beq.n	800e0f0 <_scanf_float+0x218>
 800e000:	2b59      	cmp	r3, #89	; 0x59
 800e002:	d199      	bne.n	800df38 <_scanf_float+0x60>
 800e004:	2d07      	cmp	r5, #7
 800e006:	d197      	bne.n	800df38 <_scanf_float+0x60>
 800e008:	2508      	movs	r5, #8
 800e00a:	e029      	b.n	800e060 <_scanf_float+0x188>
 800e00c:	2b74      	cmp	r3, #116	; 0x74
 800e00e:	d06f      	beq.n	800e0f0 <_scanf_float+0x218>
 800e010:	2b79      	cmp	r3, #121	; 0x79
 800e012:	e7f6      	b.n	800e002 <_scanf_float+0x12a>
 800e014:	6821      	ldr	r1, [r4, #0]
 800e016:	05c8      	lsls	r0, r1, #23
 800e018:	d51a      	bpl.n	800e050 <_scanf_float+0x178>
 800e01a:	9b02      	ldr	r3, [sp, #8]
 800e01c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e020:	6021      	str	r1, [r4, #0]
 800e022:	f109 0901 	add.w	r9, r9, #1
 800e026:	b11b      	cbz	r3, 800e030 <_scanf_float+0x158>
 800e028:	3b01      	subs	r3, #1
 800e02a:	3201      	adds	r2, #1
 800e02c:	9302      	str	r3, [sp, #8]
 800e02e:	60a2      	str	r2, [r4, #8]
 800e030:	68a3      	ldr	r3, [r4, #8]
 800e032:	3b01      	subs	r3, #1
 800e034:	60a3      	str	r3, [r4, #8]
 800e036:	6923      	ldr	r3, [r4, #16]
 800e038:	3301      	adds	r3, #1
 800e03a:	6123      	str	r3, [r4, #16]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	3b01      	subs	r3, #1
 800e040:	2b00      	cmp	r3, #0
 800e042:	607b      	str	r3, [r7, #4]
 800e044:	f340 8084 	ble.w	800e150 <_scanf_float+0x278>
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	3301      	adds	r3, #1
 800e04c:	603b      	str	r3, [r7, #0]
 800e04e:	e766      	b.n	800df1e <_scanf_float+0x46>
 800e050:	eb1a 0f05 	cmn.w	sl, r5
 800e054:	f47f af70 	bne.w	800df38 <_scanf_float+0x60>
 800e058:	6822      	ldr	r2, [r4, #0]
 800e05a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e05e:	6022      	str	r2, [r4, #0]
 800e060:	f806 3b01 	strb.w	r3, [r6], #1
 800e064:	e7e4      	b.n	800e030 <_scanf_float+0x158>
 800e066:	6822      	ldr	r2, [r4, #0]
 800e068:	0610      	lsls	r0, r2, #24
 800e06a:	f57f af65 	bpl.w	800df38 <_scanf_float+0x60>
 800e06e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e072:	e7f4      	b.n	800e05e <_scanf_float+0x186>
 800e074:	f1ba 0f00 	cmp.w	sl, #0
 800e078:	d10e      	bne.n	800e098 <_scanf_float+0x1c0>
 800e07a:	f1b9 0f00 	cmp.w	r9, #0
 800e07e:	d10e      	bne.n	800e09e <_scanf_float+0x1c6>
 800e080:	6822      	ldr	r2, [r4, #0]
 800e082:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e086:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e08a:	d108      	bne.n	800e09e <_scanf_float+0x1c6>
 800e08c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e090:	6022      	str	r2, [r4, #0]
 800e092:	f04f 0a01 	mov.w	sl, #1
 800e096:	e7e3      	b.n	800e060 <_scanf_float+0x188>
 800e098:	f1ba 0f02 	cmp.w	sl, #2
 800e09c:	d055      	beq.n	800e14a <_scanf_float+0x272>
 800e09e:	2d01      	cmp	r5, #1
 800e0a0:	d002      	beq.n	800e0a8 <_scanf_float+0x1d0>
 800e0a2:	2d04      	cmp	r5, #4
 800e0a4:	f47f af48 	bne.w	800df38 <_scanf_float+0x60>
 800e0a8:	3501      	adds	r5, #1
 800e0aa:	b2ed      	uxtb	r5, r5
 800e0ac:	e7d8      	b.n	800e060 <_scanf_float+0x188>
 800e0ae:	f1ba 0f01 	cmp.w	sl, #1
 800e0b2:	f47f af41 	bne.w	800df38 <_scanf_float+0x60>
 800e0b6:	f04f 0a02 	mov.w	sl, #2
 800e0ba:	e7d1      	b.n	800e060 <_scanf_float+0x188>
 800e0bc:	b97d      	cbnz	r5, 800e0de <_scanf_float+0x206>
 800e0be:	f1b9 0f00 	cmp.w	r9, #0
 800e0c2:	f47f af3c 	bne.w	800df3e <_scanf_float+0x66>
 800e0c6:	6822      	ldr	r2, [r4, #0]
 800e0c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e0cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e0d0:	f47f af39 	bne.w	800df46 <_scanf_float+0x6e>
 800e0d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e0d8:	6022      	str	r2, [r4, #0]
 800e0da:	2501      	movs	r5, #1
 800e0dc:	e7c0      	b.n	800e060 <_scanf_float+0x188>
 800e0de:	2d03      	cmp	r5, #3
 800e0e0:	d0e2      	beq.n	800e0a8 <_scanf_float+0x1d0>
 800e0e2:	2d05      	cmp	r5, #5
 800e0e4:	e7de      	b.n	800e0a4 <_scanf_float+0x1cc>
 800e0e6:	2d02      	cmp	r5, #2
 800e0e8:	f47f af26 	bne.w	800df38 <_scanf_float+0x60>
 800e0ec:	2503      	movs	r5, #3
 800e0ee:	e7b7      	b.n	800e060 <_scanf_float+0x188>
 800e0f0:	2d06      	cmp	r5, #6
 800e0f2:	f47f af21 	bne.w	800df38 <_scanf_float+0x60>
 800e0f6:	2507      	movs	r5, #7
 800e0f8:	e7b2      	b.n	800e060 <_scanf_float+0x188>
 800e0fa:	6822      	ldr	r2, [r4, #0]
 800e0fc:	0591      	lsls	r1, r2, #22
 800e0fe:	f57f af1b 	bpl.w	800df38 <_scanf_float+0x60>
 800e102:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e106:	6022      	str	r2, [r4, #0]
 800e108:	f8cd 9004 	str.w	r9, [sp, #4]
 800e10c:	e7a8      	b.n	800e060 <_scanf_float+0x188>
 800e10e:	6822      	ldr	r2, [r4, #0]
 800e110:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e114:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e118:	d006      	beq.n	800e128 <_scanf_float+0x250>
 800e11a:	0550      	lsls	r0, r2, #21
 800e11c:	f57f af0c 	bpl.w	800df38 <_scanf_float+0x60>
 800e120:	f1b9 0f00 	cmp.w	r9, #0
 800e124:	f43f af0f 	beq.w	800df46 <_scanf_float+0x6e>
 800e128:	0591      	lsls	r1, r2, #22
 800e12a:	bf58      	it	pl
 800e12c:	9901      	ldrpl	r1, [sp, #4]
 800e12e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e132:	bf58      	it	pl
 800e134:	eba9 0101 	subpl.w	r1, r9, r1
 800e138:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e13c:	bf58      	it	pl
 800e13e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e142:	6022      	str	r2, [r4, #0]
 800e144:	f04f 0900 	mov.w	r9, #0
 800e148:	e78a      	b.n	800e060 <_scanf_float+0x188>
 800e14a:	f04f 0a03 	mov.w	sl, #3
 800e14e:	e787      	b.n	800e060 <_scanf_float+0x188>
 800e150:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e154:	4639      	mov	r1, r7
 800e156:	4640      	mov	r0, r8
 800e158:	4798      	blx	r3
 800e15a:	2800      	cmp	r0, #0
 800e15c:	f43f aedf 	beq.w	800df1e <_scanf_float+0x46>
 800e160:	e6ea      	b.n	800df38 <_scanf_float+0x60>
 800e162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e16a:	463a      	mov	r2, r7
 800e16c:	4640      	mov	r0, r8
 800e16e:	4798      	blx	r3
 800e170:	6923      	ldr	r3, [r4, #16]
 800e172:	3b01      	subs	r3, #1
 800e174:	6123      	str	r3, [r4, #16]
 800e176:	e6ec      	b.n	800df52 <_scanf_float+0x7a>
 800e178:	1e6b      	subs	r3, r5, #1
 800e17a:	2b06      	cmp	r3, #6
 800e17c:	d825      	bhi.n	800e1ca <_scanf_float+0x2f2>
 800e17e:	2d02      	cmp	r5, #2
 800e180:	d836      	bhi.n	800e1f0 <_scanf_float+0x318>
 800e182:	455e      	cmp	r6, fp
 800e184:	f67f aee8 	bls.w	800df58 <_scanf_float+0x80>
 800e188:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e18c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e190:	463a      	mov	r2, r7
 800e192:	4640      	mov	r0, r8
 800e194:	4798      	blx	r3
 800e196:	6923      	ldr	r3, [r4, #16]
 800e198:	3b01      	subs	r3, #1
 800e19a:	6123      	str	r3, [r4, #16]
 800e19c:	e7f1      	b.n	800e182 <_scanf_float+0x2aa>
 800e19e:	9802      	ldr	r0, [sp, #8]
 800e1a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e1a8:	9002      	str	r0, [sp, #8]
 800e1aa:	463a      	mov	r2, r7
 800e1ac:	4640      	mov	r0, r8
 800e1ae:	4798      	blx	r3
 800e1b0:	6923      	ldr	r3, [r4, #16]
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	6123      	str	r3, [r4, #16]
 800e1b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1ba:	fa5f fa8a 	uxtb.w	sl, sl
 800e1be:	f1ba 0f02 	cmp.w	sl, #2
 800e1c2:	d1ec      	bne.n	800e19e <_scanf_float+0x2c6>
 800e1c4:	3d03      	subs	r5, #3
 800e1c6:	b2ed      	uxtb	r5, r5
 800e1c8:	1b76      	subs	r6, r6, r5
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	05da      	lsls	r2, r3, #23
 800e1ce:	d52f      	bpl.n	800e230 <_scanf_float+0x358>
 800e1d0:	055b      	lsls	r3, r3, #21
 800e1d2:	d510      	bpl.n	800e1f6 <_scanf_float+0x31e>
 800e1d4:	455e      	cmp	r6, fp
 800e1d6:	f67f aebf 	bls.w	800df58 <_scanf_float+0x80>
 800e1da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e1e2:	463a      	mov	r2, r7
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	4798      	blx	r3
 800e1e8:	6923      	ldr	r3, [r4, #16]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	6123      	str	r3, [r4, #16]
 800e1ee:	e7f1      	b.n	800e1d4 <_scanf_float+0x2fc>
 800e1f0:	46aa      	mov	sl, r5
 800e1f2:	9602      	str	r6, [sp, #8]
 800e1f4:	e7df      	b.n	800e1b6 <_scanf_float+0x2de>
 800e1f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e1fa:	6923      	ldr	r3, [r4, #16]
 800e1fc:	2965      	cmp	r1, #101	; 0x65
 800e1fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800e202:	f106 35ff 	add.w	r5, r6, #4294967295
 800e206:	6123      	str	r3, [r4, #16]
 800e208:	d00c      	beq.n	800e224 <_scanf_float+0x34c>
 800e20a:	2945      	cmp	r1, #69	; 0x45
 800e20c:	d00a      	beq.n	800e224 <_scanf_float+0x34c>
 800e20e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e212:	463a      	mov	r2, r7
 800e214:	4640      	mov	r0, r8
 800e216:	4798      	blx	r3
 800e218:	6923      	ldr	r3, [r4, #16]
 800e21a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e21e:	3b01      	subs	r3, #1
 800e220:	1eb5      	subs	r5, r6, #2
 800e222:	6123      	str	r3, [r4, #16]
 800e224:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e228:	463a      	mov	r2, r7
 800e22a:	4640      	mov	r0, r8
 800e22c:	4798      	blx	r3
 800e22e:	462e      	mov	r6, r5
 800e230:	6825      	ldr	r5, [r4, #0]
 800e232:	f015 0510 	ands.w	r5, r5, #16
 800e236:	d158      	bne.n	800e2ea <_scanf_float+0x412>
 800e238:	7035      	strb	r5, [r6, #0]
 800e23a:	6823      	ldr	r3, [r4, #0]
 800e23c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e244:	d11c      	bne.n	800e280 <_scanf_float+0x3a8>
 800e246:	9b01      	ldr	r3, [sp, #4]
 800e248:	454b      	cmp	r3, r9
 800e24a:	eba3 0209 	sub.w	r2, r3, r9
 800e24e:	d124      	bne.n	800e29a <_scanf_float+0x3c2>
 800e250:	2200      	movs	r2, #0
 800e252:	4659      	mov	r1, fp
 800e254:	4640      	mov	r0, r8
 800e256:	f000 ff59 	bl	800f10c <_strtod_r>
 800e25a:	9b03      	ldr	r3, [sp, #12]
 800e25c:	6821      	ldr	r1, [r4, #0]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f011 0f02 	tst.w	r1, #2
 800e264:	ec57 6b10 	vmov	r6, r7, d0
 800e268:	f103 0204 	add.w	r2, r3, #4
 800e26c:	d020      	beq.n	800e2b0 <_scanf_float+0x3d8>
 800e26e:	9903      	ldr	r1, [sp, #12]
 800e270:	600a      	str	r2, [r1, #0]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	e9c3 6700 	strd	r6, r7, [r3]
 800e278:	68e3      	ldr	r3, [r4, #12]
 800e27a:	3301      	adds	r3, #1
 800e27c:	60e3      	str	r3, [r4, #12]
 800e27e:	e66c      	b.n	800df5a <_scanf_float+0x82>
 800e280:	9b04      	ldr	r3, [sp, #16]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d0e4      	beq.n	800e250 <_scanf_float+0x378>
 800e286:	9905      	ldr	r1, [sp, #20]
 800e288:	230a      	movs	r3, #10
 800e28a:	462a      	mov	r2, r5
 800e28c:	3101      	adds	r1, #1
 800e28e:	4640      	mov	r0, r8
 800e290:	f000 ffc6 	bl	800f220 <_strtol_r>
 800e294:	9b04      	ldr	r3, [sp, #16]
 800e296:	9e05      	ldr	r6, [sp, #20]
 800e298:	1ac2      	subs	r2, r0, r3
 800e29a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e29e:	429e      	cmp	r6, r3
 800e2a0:	bf28      	it	cs
 800e2a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e2a6:	4912      	ldr	r1, [pc, #72]	; (800e2f0 <_scanf_float+0x418>)
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	f000 f8a5 	bl	800e3f8 <siprintf>
 800e2ae:	e7cf      	b.n	800e250 <_scanf_float+0x378>
 800e2b0:	f011 0f04 	tst.w	r1, #4
 800e2b4:	9903      	ldr	r1, [sp, #12]
 800e2b6:	600a      	str	r2, [r1, #0]
 800e2b8:	d1db      	bne.n	800e272 <_scanf_float+0x39a>
 800e2ba:	f8d3 8000 	ldr.w	r8, [r3]
 800e2be:	ee10 2a10 	vmov	r2, s0
 800e2c2:	ee10 0a10 	vmov	r0, s0
 800e2c6:	463b      	mov	r3, r7
 800e2c8:	4639      	mov	r1, r7
 800e2ca:	f7f2 fc2f 	bl	8000b2c <__aeabi_dcmpun>
 800e2ce:	b128      	cbz	r0, 800e2dc <_scanf_float+0x404>
 800e2d0:	4808      	ldr	r0, [pc, #32]	; (800e2f4 <_scanf_float+0x41c>)
 800e2d2:	f000 f88b 	bl	800e3ec <nanf>
 800e2d6:	ed88 0a00 	vstr	s0, [r8]
 800e2da:	e7cd      	b.n	800e278 <_scanf_float+0x3a0>
 800e2dc:	4630      	mov	r0, r6
 800e2de:	4639      	mov	r1, r7
 800e2e0:	f7f2 fc82 	bl	8000be8 <__aeabi_d2f>
 800e2e4:	f8c8 0000 	str.w	r0, [r8]
 800e2e8:	e7c6      	b.n	800e278 <_scanf_float+0x3a0>
 800e2ea:	2500      	movs	r5, #0
 800e2ec:	e635      	b.n	800df5a <_scanf_float+0x82>
 800e2ee:	bf00      	nop
 800e2f0:	08013734 	.word	0x08013734
 800e2f4:	08013b50 	.word	0x08013b50

0800e2f8 <cleanup_glue>:
 800e2f8:	b538      	push	{r3, r4, r5, lr}
 800e2fa:	460c      	mov	r4, r1
 800e2fc:	6809      	ldr	r1, [r1, #0]
 800e2fe:	4605      	mov	r5, r0
 800e300:	b109      	cbz	r1, 800e306 <cleanup_glue+0xe>
 800e302:	f7ff fff9 	bl	800e2f8 <cleanup_glue>
 800e306:	4621      	mov	r1, r4
 800e308:	4628      	mov	r0, r5
 800e30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e30e:	f002 bf5b 	b.w	80111c8 <_free_r>
	...

0800e314 <_reclaim_reent>:
 800e314:	4b2c      	ldr	r3, [pc, #176]	; (800e3c8 <_reclaim_reent+0xb4>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4283      	cmp	r3, r0
 800e31a:	b570      	push	{r4, r5, r6, lr}
 800e31c:	4604      	mov	r4, r0
 800e31e:	d051      	beq.n	800e3c4 <_reclaim_reent+0xb0>
 800e320:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e322:	b143      	cbz	r3, 800e336 <_reclaim_reent+0x22>
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d14a      	bne.n	800e3c0 <_reclaim_reent+0xac>
 800e32a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e32c:	6819      	ldr	r1, [r3, #0]
 800e32e:	b111      	cbz	r1, 800e336 <_reclaim_reent+0x22>
 800e330:	4620      	mov	r0, r4
 800e332:	f002 ff49 	bl	80111c8 <_free_r>
 800e336:	6961      	ldr	r1, [r4, #20]
 800e338:	b111      	cbz	r1, 800e340 <_reclaim_reent+0x2c>
 800e33a:	4620      	mov	r0, r4
 800e33c:	f002 ff44 	bl	80111c8 <_free_r>
 800e340:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e342:	b111      	cbz	r1, 800e34a <_reclaim_reent+0x36>
 800e344:	4620      	mov	r0, r4
 800e346:	f002 ff3f 	bl	80111c8 <_free_r>
 800e34a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e34c:	b111      	cbz	r1, 800e354 <_reclaim_reent+0x40>
 800e34e:	4620      	mov	r0, r4
 800e350:	f002 ff3a 	bl	80111c8 <_free_r>
 800e354:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e356:	b111      	cbz	r1, 800e35e <_reclaim_reent+0x4a>
 800e358:	4620      	mov	r0, r4
 800e35a:	f002 ff35 	bl	80111c8 <_free_r>
 800e35e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e360:	b111      	cbz	r1, 800e368 <_reclaim_reent+0x54>
 800e362:	4620      	mov	r0, r4
 800e364:	f002 ff30 	bl	80111c8 <_free_r>
 800e368:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e36a:	b111      	cbz	r1, 800e372 <_reclaim_reent+0x5e>
 800e36c:	4620      	mov	r0, r4
 800e36e:	f002 ff2b 	bl	80111c8 <_free_r>
 800e372:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e374:	b111      	cbz	r1, 800e37c <_reclaim_reent+0x68>
 800e376:	4620      	mov	r0, r4
 800e378:	f002 ff26 	bl	80111c8 <_free_r>
 800e37c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e37e:	b111      	cbz	r1, 800e386 <_reclaim_reent+0x72>
 800e380:	4620      	mov	r0, r4
 800e382:	f002 ff21 	bl	80111c8 <_free_r>
 800e386:	69a3      	ldr	r3, [r4, #24]
 800e388:	b1e3      	cbz	r3, 800e3c4 <_reclaim_reent+0xb0>
 800e38a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e38c:	4620      	mov	r0, r4
 800e38e:	4798      	blx	r3
 800e390:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e392:	b1b9      	cbz	r1, 800e3c4 <_reclaim_reent+0xb0>
 800e394:	4620      	mov	r0, r4
 800e396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e39a:	f7ff bfad 	b.w	800e2f8 <cleanup_glue>
 800e39e:	5949      	ldr	r1, [r1, r5]
 800e3a0:	b941      	cbnz	r1, 800e3b4 <_reclaim_reent+0xa0>
 800e3a2:	3504      	adds	r5, #4
 800e3a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3a6:	2d80      	cmp	r5, #128	; 0x80
 800e3a8:	68d9      	ldr	r1, [r3, #12]
 800e3aa:	d1f8      	bne.n	800e39e <_reclaim_reent+0x8a>
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f002 ff0b 	bl	80111c8 <_free_r>
 800e3b2:	e7ba      	b.n	800e32a <_reclaim_reent+0x16>
 800e3b4:	680e      	ldr	r6, [r1, #0]
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f002 ff06 	bl	80111c8 <_free_r>
 800e3bc:	4631      	mov	r1, r6
 800e3be:	e7ef      	b.n	800e3a0 <_reclaim_reent+0x8c>
 800e3c0:	2500      	movs	r5, #0
 800e3c2:	e7ef      	b.n	800e3a4 <_reclaim_reent+0x90>
 800e3c4:	bd70      	pop	{r4, r5, r6, pc}
 800e3c6:	bf00      	nop
 800e3c8:	20000040 	.word	0x20000040

0800e3cc <_sbrk_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4d06      	ldr	r5, [pc, #24]	; (800e3e8 <_sbrk_r+0x1c>)
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	602b      	str	r3, [r5, #0]
 800e3d8:	f7f5 ff14 	bl	8004204 <_sbrk>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d102      	bne.n	800e3e6 <_sbrk_r+0x1a>
 800e3e0:	682b      	ldr	r3, [r5, #0]
 800e3e2:	b103      	cbz	r3, 800e3e6 <_sbrk_r+0x1a>
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	200063a4 	.word	0x200063a4

0800e3ec <nanf>:
 800e3ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e3f4 <nanf+0x8>
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	7fc00000 	.word	0x7fc00000

0800e3f8 <siprintf>:
 800e3f8:	b40e      	push	{r1, r2, r3}
 800e3fa:	b500      	push	{lr}
 800e3fc:	b09c      	sub	sp, #112	; 0x70
 800e3fe:	ab1d      	add	r3, sp, #116	; 0x74
 800e400:	9002      	str	r0, [sp, #8]
 800e402:	9006      	str	r0, [sp, #24]
 800e404:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e408:	4809      	ldr	r0, [pc, #36]	; (800e430 <siprintf+0x38>)
 800e40a:	9107      	str	r1, [sp, #28]
 800e40c:	9104      	str	r1, [sp, #16]
 800e40e:	4909      	ldr	r1, [pc, #36]	; (800e434 <siprintf+0x3c>)
 800e410:	f853 2b04 	ldr.w	r2, [r3], #4
 800e414:	9105      	str	r1, [sp, #20]
 800e416:	6800      	ldr	r0, [r0, #0]
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	a902      	add	r1, sp, #8
 800e41c:	f002 ff80 	bl	8011320 <_svfiprintf_r>
 800e420:	9b02      	ldr	r3, [sp, #8]
 800e422:	2200      	movs	r2, #0
 800e424:	701a      	strb	r2, [r3, #0]
 800e426:	b01c      	add	sp, #112	; 0x70
 800e428:	f85d eb04 	ldr.w	lr, [sp], #4
 800e42c:	b003      	add	sp, #12
 800e42e:	4770      	bx	lr
 800e430:	20000040 	.word	0x20000040
 800e434:	ffff0208 	.word	0xffff0208

0800e438 <__sread>:
 800e438:	b510      	push	{r4, lr}
 800e43a:	460c      	mov	r4, r1
 800e43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e440:	f003 f86e 	bl	8011520 <_read_r>
 800e444:	2800      	cmp	r0, #0
 800e446:	bfab      	itete	ge
 800e448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e44a:	89a3      	ldrhlt	r3, [r4, #12]
 800e44c:	181b      	addge	r3, r3, r0
 800e44e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e452:	bfac      	ite	ge
 800e454:	6563      	strge	r3, [r4, #84]	; 0x54
 800e456:	81a3      	strhlt	r3, [r4, #12]
 800e458:	bd10      	pop	{r4, pc}

0800e45a <__swrite>:
 800e45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e45e:	461f      	mov	r7, r3
 800e460:	898b      	ldrh	r3, [r1, #12]
 800e462:	05db      	lsls	r3, r3, #23
 800e464:	4605      	mov	r5, r0
 800e466:	460c      	mov	r4, r1
 800e468:	4616      	mov	r6, r2
 800e46a:	d505      	bpl.n	800e478 <__swrite+0x1e>
 800e46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e470:	2302      	movs	r3, #2
 800e472:	2200      	movs	r2, #0
 800e474:	f002 f9a6 	bl	80107c4 <_lseek_r>
 800e478:	89a3      	ldrh	r3, [r4, #12]
 800e47a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e47e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e482:	81a3      	strh	r3, [r4, #12]
 800e484:	4632      	mov	r2, r6
 800e486:	463b      	mov	r3, r7
 800e488:	4628      	mov	r0, r5
 800e48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e48e:	f000 bec9 	b.w	800f224 <_write_r>

0800e492 <__sseek>:
 800e492:	b510      	push	{r4, lr}
 800e494:	460c      	mov	r4, r1
 800e496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e49a:	f002 f993 	bl	80107c4 <_lseek_r>
 800e49e:	1c43      	adds	r3, r0, #1
 800e4a0:	89a3      	ldrh	r3, [r4, #12]
 800e4a2:	bf15      	itete	ne
 800e4a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4ae:	81a3      	strheq	r3, [r4, #12]
 800e4b0:	bf18      	it	ne
 800e4b2:	81a3      	strhne	r3, [r4, #12]
 800e4b4:	bd10      	pop	{r4, pc}

0800e4b6 <__sclose>:
 800e4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4ba:	f000 bec5 	b.w	800f248 <_close_r>

0800e4be <sulp>:
 800e4be:	b570      	push	{r4, r5, r6, lr}
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	460d      	mov	r5, r1
 800e4c4:	ec45 4b10 	vmov	d0, r4, r5
 800e4c8:	4616      	mov	r6, r2
 800e4ca:	f002 fd1f 	bl	8010f0c <__ulp>
 800e4ce:	ec51 0b10 	vmov	r0, r1, d0
 800e4d2:	b17e      	cbz	r6, 800e4f4 <sulp+0x36>
 800e4d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e4d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	dd09      	ble.n	800e4f4 <sulp+0x36>
 800e4e0:	051b      	lsls	r3, r3, #20
 800e4e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e4e6:	2400      	movs	r4, #0
 800e4e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e4ec:	4622      	mov	r2, r4
 800e4ee:	462b      	mov	r3, r5
 800e4f0:	f7f2 f882 	bl	80005f8 <__aeabi_dmul>
 800e4f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e4f8 <_strtod_l>:
 800e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fc:	b0a3      	sub	sp, #140	; 0x8c
 800e4fe:	461f      	mov	r7, r3
 800e500:	2300      	movs	r3, #0
 800e502:	931e      	str	r3, [sp, #120]	; 0x78
 800e504:	4ba4      	ldr	r3, [pc, #656]	; (800e798 <_strtod_l+0x2a0>)
 800e506:	9219      	str	r2, [sp, #100]	; 0x64
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	9307      	str	r3, [sp, #28]
 800e50c:	4604      	mov	r4, r0
 800e50e:	4618      	mov	r0, r3
 800e510:	4688      	mov	r8, r1
 800e512:	f7f1 fe5d 	bl	80001d0 <strlen>
 800e516:	f04f 0a00 	mov.w	sl, #0
 800e51a:	4605      	mov	r5, r0
 800e51c:	f04f 0b00 	mov.w	fp, #0
 800e520:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e524:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e526:	781a      	ldrb	r2, [r3, #0]
 800e528:	2a2b      	cmp	r2, #43	; 0x2b
 800e52a:	d04c      	beq.n	800e5c6 <_strtod_l+0xce>
 800e52c:	d839      	bhi.n	800e5a2 <_strtod_l+0xaa>
 800e52e:	2a0d      	cmp	r2, #13
 800e530:	d832      	bhi.n	800e598 <_strtod_l+0xa0>
 800e532:	2a08      	cmp	r2, #8
 800e534:	d832      	bhi.n	800e59c <_strtod_l+0xa4>
 800e536:	2a00      	cmp	r2, #0
 800e538:	d03c      	beq.n	800e5b4 <_strtod_l+0xbc>
 800e53a:	2300      	movs	r3, #0
 800e53c:	930e      	str	r3, [sp, #56]	; 0x38
 800e53e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e540:	7833      	ldrb	r3, [r6, #0]
 800e542:	2b30      	cmp	r3, #48	; 0x30
 800e544:	f040 80b4 	bne.w	800e6b0 <_strtod_l+0x1b8>
 800e548:	7873      	ldrb	r3, [r6, #1]
 800e54a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e54e:	2b58      	cmp	r3, #88	; 0x58
 800e550:	d16c      	bne.n	800e62c <_strtod_l+0x134>
 800e552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e554:	9301      	str	r3, [sp, #4]
 800e556:	ab1e      	add	r3, sp, #120	; 0x78
 800e558:	9702      	str	r7, [sp, #8]
 800e55a:	9300      	str	r3, [sp, #0]
 800e55c:	4a8f      	ldr	r2, [pc, #572]	; (800e79c <_strtod_l+0x2a4>)
 800e55e:	ab1f      	add	r3, sp, #124	; 0x7c
 800e560:	a91d      	add	r1, sp, #116	; 0x74
 800e562:	4620      	mov	r0, r4
 800e564:	f001 fe22 	bl	80101ac <__gethex>
 800e568:	f010 0707 	ands.w	r7, r0, #7
 800e56c:	4605      	mov	r5, r0
 800e56e:	d005      	beq.n	800e57c <_strtod_l+0x84>
 800e570:	2f06      	cmp	r7, #6
 800e572:	d12a      	bne.n	800e5ca <_strtod_l+0xd2>
 800e574:	3601      	adds	r6, #1
 800e576:	2300      	movs	r3, #0
 800e578:	961d      	str	r6, [sp, #116]	; 0x74
 800e57a:	930e      	str	r3, [sp, #56]	; 0x38
 800e57c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e57e:	2b00      	cmp	r3, #0
 800e580:	f040 8596 	bne.w	800f0b0 <_strtod_l+0xbb8>
 800e584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e586:	b1db      	cbz	r3, 800e5c0 <_strtod_l+0xc8>
 800e588:	4652      	mov	r2, sl
 800e58a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e58e:	ec43 2b10 	vmov	d0, r2, r3
 800e592:	b023      	add	sp, #140	; 0x8c
 800e594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e598:	2a20      	cmp	r2, #32
 800e59a:	d1ce      	bne.n	800e53a <_strtod_l+0x42>
 800e59c:	3301      	adds	r3, #1
 800e59e:	931d      	str	r3, [sp, #116]	; 0x74
 800e5a0:	e7c0      	b.n	800e524 <_strtod_l+0x2c>
 800e5a2:	2a2d      	cmp	r2, #45	; 0x2d
 800e5a4:	d1c9      	bne.n	800e53a <_strtod_l+0x42>
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	920e      	str	r2, [sp, #56]	; 0x38
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	921d      	str	r2, [sp, #116]	; 0x74
 800e5ae:	785b      	ldrb	r3, [r3, #1]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d1c4      	bne.n	800e53e <_strtod_l+0x46>
 800e5b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f040 8576 	bne.w	800f0ac <_strtod_l+0xbb4>
 800e5c0:	4652      	mov	r2, sl
 800e5c2:	465b      	mov	r3, fp
 800e5c4:	e7e3      	b.n	800e58e <_strtod_l+0x96>
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	e7ee      	b.n	800e5a8 <_strtod_l+0xb0>
 800e5ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e5cc:	b13a      	cbz	r2, 800e5de <_strtod_l+0xe6>
 800e5ce:	2135      	movs	r1, #53	; 0x35
 800e5d0:	a820      	add	r0, sp, #128	; 0x80
 800e5d2:	f002 fda6 	bl	8011122 <__copybits>
 800e5d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f002 f96b 	bl	80108b4 <_Bfree>
 800e5de:	3f01      	subs	r7, #1
 800e5e0:	2f05      	cmp	r7, #5
 800e5e2:	d807      	bhi.n	800e5f4 <_strtod_l+0xfc>
 800e5e4:	e8df f007 	tbb	[pc, r7]
 800e5e8:	1d180b0e 	.word	0x1d180b0e
 800e5ec:	030e      	.short	0x030e
 800e5ee:	f04f 0b00 	mov.w	fp, #0
 800e5f2:	46da      	mov	sl, fp
 800e5f4:	0728      	lsls	r0, r5, #28
 800e5f6:	d5c1      	bpl.n	800e57c <_strtod_l+0x84>
 800e5f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e5fc:	e7be      	b.n	800e57c <_strtod_l+0x84>
 800e5fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e602:	e7f7      	b.n	800e5f4 <_strtod_l+0xfc>
 800e604:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e608:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e60a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e60e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e612:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e616:	e7ed      	b.n	800e5f4 <_strtod_l+0xfc>
 800e618:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e7a0 <_strtod_l+0x2a8>
 800e61c:	f04f 0a00 	mov.w	sl, #0
 800e620:	e7e8      	b.n	800e5f4 <_strtod_l+0xfc>
 800e622:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e626:	f04f 3aff 	mov.w	sl, #4294967295
 800e62a:	e7e3      	b.n	800e5f4 <_strtod_l+0xfc>
 800e62c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e62e:	1c5a      	adds	r2, r3, #1
 800e630:	921d      	str	r2, [sp, #116]	; 0x74
 800e632:	785b      	ldrb	r3, [r3, #1]
 800e634:	2b30      	cmp	r3, #48	; 0x30
 800e636:	d0f9      	beq.n	800e62c <_strtod_l+0x134>
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d09f      	beq.n	800e57c <_strtod_l+0x84>
 800e63c:	2301      	movs	r3, #1
 800e63e:	f04f 0900 	mov.w	r9, #0
 800e642:	9304      	str	r3, [sp, #16]
 800e644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e646:	930a      	str	r3, [sp, #40]	; 0x28
 800e648:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e64c:	464f      	mov	r7, r9
 800e64e:	220a      	movs	r2, #10
 800e650:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e652:	7806      	ldrb	r6, [r0, #0]
 800e654:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e658:	b2d9      	uxtb	r1, r3
 800e65a:	2909      	cmp	r1, #9
 800e65c:	d92a      	bls.n	800e6b4 <_strtod_l+0x1bc>
 800e65e:	9907      	ldr	r1, [sp, #28]
 800e660:	462a      	mov	r2, r5
 800e662:	f002 ff79 	bl	8011558 <strncmp>
 800e666:	b398      	cbz	r0, 800e6d0 <_strtod_l+0x1d8>
 800e668:	2000      	movs	r0, #0
 800e66a:	4633      	mov	r3, r6
 800e66c:	463d      	mov	r5, r7
 800e66e:	9007      	str	r0, [sp, #28]
 800e670:	4602      	mov	r2, r0
 800e672:	2b65      	cmp	r3, #101	; 0x65
 800e674:	d001      	beq.n	800e67a <_strtod_l+0x182>
 800e676:	2b45      	cmp	r3, #69	; 0x45
 800e678:	d118      	bne.n	800e6ac <_strtod_l+0x1b4>
 800e67a:	b91d      	cbnz	r5, 800e684 <_strtod_l+0x18c>
 800e67c:	9b04      	ldr	r3, [sp, #16]
 800e67e:	4303      	orrs	r3, r0
 800e680:	d098      	beq.n	800e5b4 <_strtod_l+0xbc>
 800e682:	2500      	movs	r5, #0
 800e684:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e688:	f108 0301 	add.w	r3, r8, #1
 800e68c:	931d      	str	r3, [sp, #116]	; 0x74
 800e68e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e692:	2b2b      	cmp	r3, #43	; 0x2b
 800e694:	d075      	beq.n	800e782 <_strtod_l+0x28a>
 800e696:	2b2d      	cmp	r3, #45	; 0x2d
 800e698:	d07b      	beq.n	800e792 <_strtod_l+0x29a>
 800e69a:	f04f 0c00 	mov.w	ip, #0
 800e69e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e6a2:	2909      	cmp	r1, #9
 800e6a4:	f240 8082 	bls.w	800e7ac <_strtod_l+0x2b4>
 800e6a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e6ac:	2600      	movs	r6, #0
 800e6ae:	e09d      	b.n	800e7ec <_strtod_l+0x2f4>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	e7c4      	b.n	800e63e <_strtod_l+0x146>
 800e6b4:	2f08      	cmp	r7, #8
 800e6b6:	bfd8      	it	le
 800e6b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e6ba:	f100 0001 	add.w	r0, r0, #1
 800e6be:	bfda      	itte	le
 800e6c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e6c4:	9309      	strle	r3, [sp, #36]	; 0x24
 800e6c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e6ca:	3701      	adds	r7, #1
 800e6cc:	901d      	str	r0, [sp, #116]	; 0x74
 800e6ce:	e7bf      	b.n	800e650 <_strtod_l+0x158>
 800e6d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6d2:	195a      	adds	r2, r3, r5
 800e6d4:	921d      	str	r2, [sp, #116]	; 0x74
 800e6d6:	5d5b      	ldrb	r3, [r3, r5]
 800e6d8:	2f00      	cmp	r7, #0
 800e6da:	d037      	beq.n	800e74c <_strtod_l+0x254>
 800e6dc:	9007      	str	r0, [sp, #28]
 800e6de:	463d      	mov	r5, r7
 800e6e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e6e4:	2a09      	cmp	r2, #9
 800e6e6:	d912      	bls.n	800e70e <_strtod_l+0x216>
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	e7c2      	b.n	800e672 <_strtod_l+0x17a>
 800e6ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6ee:	1c5a      	adds	r2, r3, #1
 800e6f0:	921d      	str	r2, [sp, #116]	; 0x74
 800e6f2:	785b      	ldrb	r3, [r3, #1]
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	2b30      	cmp	r3, #48	; 0x30
 800e6f8:	d0f8      	beq.n	800e6ec <_strtod_l+0x1f4>
 800e6fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e6fe:	2a08      	cmp	r2, #8
 800e700:	f200 84db 	bhi.w	800f0ba <_strtod_l+0xbc2>
 800e704:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e706:	9007      	str	r0, [sp, #28]
 800e708:	2000      	movs	r0, #0
 800e70a:	920a      	str	r2, [sp, #40]	; 0x28
 800e70c:	4605      	mov	r5, r0
 800e70e:	3b30      	subs	r3, #48	; 0x30
 800e710:	f100 0201 	add.w	r2, r0, #1
 800e714:	d014      	beq.n	800e740 <_strtod_l+0x248>
 800e716:	9907      	ldr	r1, [sp, #28]
 800e718:	4411      	add	r1, r2
 800e71a:	9107      	str	r1, [sp, #28]
 800e71c:	462a      	mov	r2, r5
 800e71e:	eb00 0e05 	add.w	lr, r0, r5
 800e722:	210a      	movs	r1, #10
 800e724:	4572      	cmp	r2, lr
 800e726:	d113      	bne.n	800e750 <_strtod_l+0x258>
 800e728:	182a      	adds	r2, r5, r0
 800e72a:	2a08      	cmp	r2, #8
 800e72c:	f105 0501 	add.w	r5, r5, #1
 800e730:	4405      	add	r5, r0
 800e732:	dc1c      	bgt.n	800e76e <_strtod_l+0x276>
 800e734:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e736:	220a      	movs	r2, #10
 800e738:	fb02 3301 	mla	r3, r2, r1, r3
 800e73c:	9309      	str	r3, [sp, #36]	; 0x24
 800e73e:	2200      	movs	r2, #0
 800e740:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e742:	1c59      	adds	r1, r3, #1
 800e744:	911d      	str	r1, [sp, #116]	; 0x74
 800e746:	785b      	ldrb	r3, [r3, #1]
 800e748:	4610      	mov	r0, r2
 800e74a:	e7c9      	b.n	800e6e0 <_strtod_l+0x1e8>
 800e74c:	4638      	mov	r0, r7
 800e74e:	e7d2      	b.n	800e6f6 <_strtod_l+0x1fe>
 800e750:	2a08      	cmp	r2, #8
 800e752:	dc04      	bgt.n	800e75e <_strtod_l+0x266>
 800e754:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e756:	434e      	muls	r6, r1
 800e758:	9609      	str	r6, [sp, #36]	; 0x24
 800e75a:	3201      	adds	r2, #1
 800e75c:	e7e2      	b.n	800e724 <_strtod_l+0x22c>
 800e75e:	f102 0c01 	add.w	ip, r2, #1
 800e762:	f1bc 0f10 	cmp.w	ip, #16
 800e766:	bfd8      	it	le
 800e768:	fb01 f909 	mulle.w	r9, r1, r9
 800e76c:	e7f5      	b.n	800e75a <_strtod_l+0x262>
 800e76e:	2d10      	cmp	r5, #16
 800e770:	bfdc      	itt	le
 800e772:	220a      	movle	r2, #10
 800e774:	fb02 3909 	mlale	r9, r2, r9, r3
 800e778:	e7e1      	b.n	800e73e <_strtod_l+0x246>
 800e77a:	2300      	movs	r3, #0
 800e77c:	9307      	str	r3, [sp, #28]
 800e77e:	2201      	movs	r2, #1
 800e780:	e77c      	b.n	800e67c <_strtod_l+0x184>
 800e782:	f04f 0c00 	mov.w	ip, #0
 800e786:	f108 0302 	add.w	r3, r8, #2
 800e78a:	931d      	str	r3, [sp, #116]	; 0x74
 800e78c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e790:	e785      	b.n	800e69e <_strtod_l+0x1a6>
 800e792:	f04f 0c01 	mov.w	ip, #1
 800e796:	e7f6      	b.n	800e786 <_strtod_l+0x28e>
 800e798:	08013990 	.word	0x08013990
 800e79c:	0801373c 	.word	0x0801373c
 800e7a0:	7ff00000 	.word	0x7ff00000
 800e7a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7a6:	1c59      	adds	r1, r3, #1
 800e7a8:	911d      	str	r1, [sp, #116]	; 0x74
 800e7aa:	785b      	ldrb	r3, [r3, #1]
 800e7ac:	2b30      	cmp	r3, #48	; 0x30
 800e7ae:	d0f9      	beq.n	800e7a4 <_strtod_l+0x2ac>
 800e7b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e7b4:	2908      	cmp	r1, #8
 800e7b6:	f63f af79 	bhi.w	800e6ac <_strtod_l+0x1b4>
 800e7ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e7be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7c0:	9308      	str	r3, [sp, #32]
 800e7c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7c4:	1c59      	adds	r1, r3, #1
 800e7c6:	911d      	str	r1, [sp, #116]	; 0x74
 800e7c8:	785b      	ldrb	r3, [r3, #1]
 800e7ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e7ce:	2e09      	cmp	r6, #9
 800e7d0:	d937      	bls.n	800e842 <_strtod_l+0x34a>
 800e7d2:	9e08      	ldr	r6, [sp, #32]
 800e7d4:	1b89      	subs	r1, r1, r6
 800e7d6:	2908      	cmp	r1, #8
 800e7d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e7dc:	dc02      	bgt.n	800e7e4 <_strtod_l+0x2ec>
 800e7de:	4576      	cmp	r6, lr
 800e7e0:	bfa8      	it	ge
 800e7e2:	4676      	movge	r6, lr
 800e7e4:	f1bc 0f00 	cmp.w	ip, #0
 800e7e8:	d000      	beq.n	800e7ec <_strtod_l+0x2f4>
 800e7ea:	4276      	negs	r6, r6
 800e7ec:	2d00      	cmp	r5, #0
 800e7ee:	d14f      	bne.n	800e890 <_strtod_l+0x398>
 800e7f0:	9904      	ldr	r1, [sp, #16]
 800e7f2:	4301      	orrs	r1, r0
 800e7f4:	f47f aec2 	bne.w	800e57c <_strtod_l+0x84>
 800e7f8:	2a00      	cmp	r2, #0
 800e7fa:	f47f aedb 	bne.w	800e5b4 <_strtod_l+0xbc>
 800e7fe:	2b69      	cmp	r3, #105	; 0x69
 800e800:	d027      	beq.n	800e852 <_strtod_l+0x35a>
 800e802:	dc24      	bgt.n	800e84e <_strtod_l+0x356>
 800e804:	2b49      	cmp	r3, #73	; 0x49
 800e806:	d024      	beq.n	800e852 <_strtod_l+0x35a>
 800e808:	2b4e      	cmp	r3, #78	; 0x4e
 800e80a:	f47f aed3 	bne.w	800e5b4 <_strtod_l+0xbc>
 800e80e:	499e      	ldr	r1, [pc, #632]	; (800ea88 <_strtod_l+0x590>)
 800e810:	a81d      	add	r0, sp, #116	; 0x74
 800e812:	f001 ff23 	bl	801065c <__match>
 800e816:	2800      	cmp	r0, #0
 800e818:	f43f aecc 	beq.w	800e5b4 <_strtod_l+0xbc>
 800e81c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	2b28      	cmp	r3, #40	; 0x28
 800e822:	d12d      	bne.n	800e880 <_strtod_l+0x388>
 800e824:	4999      	ldr	r1, [pc, #612]	; (800ea8c <_strtod_l+0x594>)
 800e826:	aa20      	add	r2, sp, #128	; 0x80
 800e828:	a81d      	add	r0, sp, #116	; 0x74
 800e82a:	f001 ff2b 	bl	8010684 <__hexnan>
 800e82e:	2805      	cmp	r0, #5
 800e830:	d126      	bne.n	800e880 <_strtod_l+0x388>
 800e832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e834:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e838:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e83c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e840:	e69c      	b.n	800e57c <_strtod_l+0x84>
 800e842:	210a      	movs	r1, #10
 800e844:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e848:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e84c:	e7b9      	b.n	800e7c2 <_strtod_l+0x2ca>
 800e84e:	2b6e      	cmp	r3, #110	; 0x6e
 800e850:	e7db      	b.n	800e80a <_strtod_l+0x312>
 800e852:	498f      	ldr	r1, [pc, #572]	; (800ea90 <_strtod_l+0x598>)
 800e854:	a81d      	add	r0, sp, #116	; 0x74
 800e856:	f001 ff01 	bl	801065c <__match>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	f43f aeaa 	beq.w	800e5b4 <_strtod_l+0xbc>
 800e860:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e862:	498c      	ldr	r1, [pc, #560]	; (800ea94 <_strtod_l+0x59c>)
 800e864:	3b01      	subs	r3, #1
 800e866:	a81d      	add	r0, sp, #116	; 0x74
 800e868:	931d      	str	r3, [sp, #116]	; 0x74
 800e86a:	f001 fef7 	bl	801065c <__match>
 800e86e:	b910      	cbnz	r0, 800e876 <_strtod_l+0x37e>
 800e870:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e872:	3301      	adds	r3, #1
 800e874:	931d      	str	r3, [sp, #116]	; 0x74
 800e876:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800eaa4 <_strtod_l+0x5ac>
 800e87a:	f04f 0a00 	mov.w	sl, #0
 800e87e:	e67d      	b.n	800e57c <_strtod_l+0x84>
 800e880:	4885      	ldr	r0, [pc, #532]	; (800ea98 <_strtod_l+0x5a0>)
 800e882:	f002 fe61 	bl	8011548 <nan>
 800e886:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e88a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e88e:	e675      	b.n	800e57c <_strtod_l+0x84>
 800e890:	9b07      	ldr	r3, [sp, #28]
 800e892:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e894:	1af3      	subs	r3, r6, r3
 800e896:	2f00      	cmp	r7, #0
 800e898:	bf08      	it	eq
 800e89a:	462f      	moveq	r7, r5
 800e89c:	2d10      	cmp	r5, #16
 800e89e:	9308      	str	r3, [sp, #32]
 800e8a0:	46a8      	mov	r8, r5
 800e8a2:	bfa8      	it	ge
 800e8a4:	f04f 0810 	movge.w	r8, #16
 800e8a8:	f7f1 fe2c 	bl	8000504 <__aeabi_ui2d>
 800e8ac:	2d09      	cmp	r5, #9
 800e8ae:	4682      	mov	sl, r0
 800e8b0:	468b      	mov	fp, r1
 800e8b2:	dd13      	ble.n	800e8dc <_strtod_l+0x3e4>
 800e8b4:	4b79      	ldr	r3, [pc, #484]	; (800ea9c <_strtod_l+0x5a4>)
 800e8b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e8ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e8be:	f7f1 fe9b 	bl	80005f8 <__aeabi_dmul>
 800e8c2:	4682      	mov	sl, r0
 800e8c4:	4648      	mov	r0, r9
 800e8c6:	468b      	mov	fp, r1
 800e8c8:	f7f1 fe1c 	bl	8000504 <__aeabi_ui2d>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	4650      	mov	r0, sl
 800e8d2:	4659      	mov	r1, fp
 800e8d4:	f7f1 fcda 	bl	800028c <__adddf3>
 800e8d8:	4682      	mov	sl, r0
 800e8da:	468b      	mov	fp, r1
 800e8dc:	2d0f      	cmp	r5, #15
 800e8de:	dc38      	bgt.n	800e952 <_strtod_l+0x45a>
 800e8e0:	9b08      	ldr	r3, [sp, #32]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	f43f ae4a 	beq.w	800e57c <_strtod_l+0x84>
 800e8e8:	dd24      	ble.n	800e934 <_strtod_l+0x43c>
 800e8ea:	2b16      	cmp	r3, #22
 800e8ec:	dc0b      	bgt.n	800e906 <_strtod_l+0x40e>
 800e8ee:	4d6b      	ldr	r5, [pc, #428]	; (800ea9c <_strtod_l+0x5a4>)
 800e8f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e8f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e8f8:	4652      	mov	r2, sl
 800e8fa:	465b      	mov	r3, fp
 800e8fc:	f7f1 fe7c 	bl	80005f8 <__aeabi_dmul>
 800e900:	4682      	mov	sl, r0
 800e902:	468b      	mov	fp, r1
 800e904:	e63a      	b.n	800e57c <_strtod_l+0x84>
 800e906:	9a08      	ldr	r2, [sp, #32]
 800e908:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e90c:	4293      	cmp	r3, r2
 800e90e:	db20      	blt.n	800e952 <_strtod_l+0x45a>
 800e910:	4c62      	ldr	r4, [pc, #392]	; (800ea9c <_strtod_l+0x5a4>)
 800e912:	f1c5 050f 	rsb	r5, r5, #15
 800e916:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e91a:	4652      	mov	r2, sl
 800e91c:	465b      	mov	r3, fp
 800e91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e922:	f7f1 fe69 	bl	80005f8 <__aeabi_dmul>
 800e926:	9b08      	ldr	r3, [sp, #32]
 800e928:	1b5d      	subs	r5, r3, r5
 800e92a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e92e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e932:	e7e3      	b.n	800e8fc <_strtod_l+0x404>
 800e934:	9b08      	ldr	r3, [sp, #32]
 800e936:	3316      	adds	r3, #22
 800e938:	db0b      	blt.n	800e952 <_strtod_l+0x45a>
 800e93a:	9b07      	ldr	r3, [sp, #28]
 800e93c:	4a57      	ldr	r2, [pc, #348]	; (800ea9c <_strtod_l+0x5a4>)
 800e93e:	1b9e      	subs	r6, r3, r6
 800e940:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e944:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e948:	4650      	mov	r0, sl
 800e94a:	4659      	mov	r1, fp
 800e94c:	f7f1 ff7e 	bl	800084c <__aeabi_ddiv>
 800e950:	e7d6      	b.n	800e900 <_strtod_l+0x408>
 800e952:	9b08      	ldr	r3, [sp, #32]
 800e954:	eba5 0808 	sub.w	r8, r5, r8
 800e958:	4498      	add	r8, r3
 800e95a:	f1b8 0f00 	cmp.w	r8, #0
 800e95e:	dd71      	ble.n	800ea44 <_strtod_l+0x54c>
 800e960:	f018 030f 	ands.w	r3, r8, #15
 800e964:	d00a      	beq.n	800e97c <_strtod_l+0x484>
 800e966:	494d      	ldr	r1, [pc, #308]	; (800ea9c <_strtod_l+0x5a4>)
 800e968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e96c:	4652      	mov	r2, sl
 800e96e:	465b      	mov	r3, fp
 800e970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e974:	f7f1 fe40 	bl	80005f8 <__aeabi_dmul>
 800e978:	4682      	mov	sl, r0
 800e97a:	468b      	mov	fp, r1
 800e97c:	f038 080f 	bics.w	r8, r8, #15
 800e980:	d04d      	beq.n	800ea1e <_strtod_l+0x526>
 800e982:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e986:	dd22      	ble.n	800e9ce <_strtod_l+0x4d6>
 800e988:	2500      	movs	r5, #0
 800e98a:	462e      	mov	r6, r5
 800e98c:	9509      	str	r5, [sp, #36]	; 0x24
 800e98e:	9507      	str	r5, [sp, #28]
 800e990:	2322      	movs	r3, #34	; 0x22
 800e992:	f8df b110 	ldr.w	fp, [pc, #272]	; 800eaa4 <_strtod_l+0x5ac>
 800e996:	6023      	str	r3, [r4, #0]
 800e998:	f04f 0a00 	mov.w	sl, #0
 800e99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f43f adec 	beq.w	800e57c <_strtod_l+0x84>
 800e9a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f001 ff84 	bl	80108b4 <_Bfree>
 800e9ac:	9907      	ldr	r1, [sp, #28]
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f001 ff80 	bl	80108b4 <_Bfree>
 800e9b4:	4631      	mov	r1, r6
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f001 ff7c 	bl	80108b4 <_Bfree>
 800e9bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f001 ff78 	bl	80108b4 <_Bfree>
 800e9c4:	4629      	mov	r1, r5
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f001 ff74 	bl	80108b4 <_Bfree>
 800e9cc:	e5d6      	b.n	800e57c <_strtod_l+0x84>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e9d4:	4650      	mov	r0, sl
 800e9d6:	4659      	mov	r1, fp
 800e9d8:	4699      	mov	r9, r3
 800e9da:	f1b8 0f01 	cmp.w	r8, #1
 800e9de:	dc21      	bgt.n	800ea24 <_strtod_l+0x52c>
 800e9e0:	b10b      	cbz	r3, 800e9e6 <_strtod_l+0x4ee>
 800e9e2:	4682      	mov	sl, r0
 800e9e4:	468b      	mov	fp, r1
 800e9e6:	4b2e      	ldr	r3, [pc, #184]	; (800eaa0 <_strtod_l+0x5a8>)
 800e9e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e9ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e9f0:	4652      	mov	r2, sl
 800e9f2:	465b      	mov	r3, fp
 800e9f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e9f8:	f7f1 fdfe 	bl	80005f8 <__aeabi_dmul>
 800e9fc:	4b29      	ldr	r3, [pc, #164]	; (800eaa4 <_strtod_l+0x5ac>)
 800e9fe:	460a      	mov	r2, r1
 800ea00:	400b      	ands	r3, r1
 800ea02:	4929      	ldr	r1, [pc, #164]	; (800eaa8 <_strtod_l+0x5b0>)
 800ea04:	428b      	cmp	r3, r1
 800ea06:	4682      	mov	sl, r0
 800ea08:	d8be      	bhi.n	800e988 <_strtod_l+0x490>
 800ea0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ea0e:	428b      	cmp	r3, r1
 800ea10:	bf86      	itte	hi
 800ea12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800eaac <_strtod_l+0x5b4>
 800ea16:	f04f 3aff 	movhi.w	sl, #4294967295
 800ea1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ea1e:	2300      	movs	r3, #0
 800ea20:	9304      	str	r3, [sp, #16]
 800ea22:	e081      	b.n	800eb28 <_strtod_l+0x630>
 800ea24:	f018 0f01 	tst.w	r8, #1
 800ea28:	d007      	beq.n	800ea3a <_strtod_l+0x542>
 800ea2a:	4b1d      	ldr	r3, [pc, #116]	; (800eaa0 <_strtod_l+0x5a8>)
 800ea2c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	f7f1 fde0 	bl	80005f8 <__aeabi_dmul>
 800ea38:	2301      	movs	r3, #1
 800ea3a:	f109 0901 	add.w	r9, r9, #1
 800ea3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ea42:	e7ca      	b.n	800e9da <_strtod_l+0x4e2>
 800ea44:	d0eb      	beq.n	800ea1e <_strtod_l+0x526>
 800ea46:	f1c8 0800 	rsb	r8, r8, #0
 800ea4a:	f018 020f 	ands.w	r2, r8, #15
 800ea4e:	d00a      	beq.n	800ea66 <_strtod_l+0x56e>
 800ea50:	4b12      	ldr	r3, [pc, #72]	; (800ea9c <_strtod_l+0x5a4>)
 800ea52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea56:	4650      	mov	r0, sl
 800ea58:	4659      	mov	r1, fp
 800ea5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5e:	f7f1 fef5 	bl	800084c <__aeabi_ddiv>
 800ea62:	4682      	mov	sl, r0
 800ea64:	468b      	mov	fp, r1
 800ea66:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ea6a:	d0d8      	beq.n	800ea1e <_strtod_l+0x526>
 800ea6c:	f1b8 0f1f 	cmp.w	r8, #31
 800ea70:	dd1e      	ble.n	800eab0 <_strtod_l+0x5b8>
 800ea72:	2500      	movs	r5, #0
 800ea74:	462e      	mov	r6, r5
 800ea76:	9509      	str	r5, [sp, #36]	; 0x24
 800ea78:	9507      	str	r5, [sp, #28]
 800ea7a:	2322      	movs	r3, #34	; 0x22
 800ea7c:	f04f 0a00 	mov.w	sl, #0
 800ea80:	f04f 0b00 	mov.w	fp, #0
 800ea84:	6023      	str	r3, [r4, #0]
 800ea86:	e789      	b.n	800e99c <_strtod_l+0x4a4>
 800ea88:	0801370d 	.word	0x0801370d
 800ea8c:	08013750 	.word	0x08013750
 800ea90:	08013705 	.word	0x08013705
 800ea94:	08013894 	.word	0x08013894
 800ea98:	08013b50 	.word	0x08013b50
 800ea9c:	08013a30 	.word	0x08013a30
 800eaa0:	08013a08 	.word	0x08013a08
 800eaa4:	7ff00000 	.word	0x7ff00000
 800eaa8:	7ca00000 	.word	0x7ca00000
 800eaac:	7fefffff 	.word	0x7fefffff
 800eab0:	f018 0310 	ands.w	r3, r8, #16
 800eab4:	bf18      	it	ne
 800eab6:	236a      	movne	r3, #106	; 0x6a
 800eab8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ee70 <_strtod_l+0x978>
 800eabc:	9304      	str	r3, [sp, #16]
 800eabe:	4650      	mov	r0, sl
 800eac0:	4659      	mov	r1, fp
 800eac2:	2300      	movs	r3, #0
 800eac4:	f018 0f01 	tst.w	r8, #1
 800eac8:	d004      	beq.n	800ead4 <_strtod_l+0x5dc>
 800eaca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800eace:	f7f1 fd93 	bl	80005f8 <__aeabi_dmul>
 800ead2:	2301      	movs	r3, #1
 800ead4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ead8:	f109 0908 	add.w	r9, r9, #8
 800eadc:	d1f2      	bne.n	800eac4 <_strtod_l+0x5cc>
 800eade:	b10b      	cbz	r3, 800eae4 <_strtod_l+0x5ec>
 800eae0:	4682      	mov	sl, r0
 800eae2:	468b      	mov	fp, r1
 800eae4:	9b04      	ldr	r3, [sp, #16]
 800eae6:	b1bb      	cbz	r3, 800eb18 <_strtod_l+0x620>
 800eae8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800eaec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	4659      	mov	r1, fp
 800eaf4:	dd10      	ble.n	800eb18 <_strtod_l+0x620>
 800eaf6:	2b1f      	cmp	r3, #31
 800eaf8:	f340 8128 	ble.w	800ed4c <_strtod_l+0x854>
 800eafc:	2b34      	cmp	r3, #52	; 0x34
 800eafe:	bfde      	ittt	le
 800eb00:	3b20      	suble	r3, #32
 800eb02:	f04f 32ff 	movle.w	r2, #4294967295
 800eb06:	fa02 f303 	lslle.w	r3, r2, r3
 800eb0a:	f04f 0a00 	mov.w	sl, #0
 800eb0e:	bfcc      	ite	gt
 800eb10:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800eb14:	ea03 0b01 	andle.w	fp, r3, r1
 800eb18:	2200      	movs	r2, #0
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	4650      	mov	r0, sl
 800eb1e:	4659      	mov	r1, fp
 800eb20:	f7f1 ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d1a4      	bne.n	800ea72 <_strtod_l+0x57a>
 800eb28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eb2e:	462b      	mov	r3, r5
 800eb30:	463a      	mov	r2, r7
 800eb32:	4620      	mov	r0, r4
 800eb34:	f001 ff2a 	bl	801098c <__s2b>
 800eb38:	9009      	str	r0, [sp, #36]	; 0x24
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	f43f af24 	beq.w	800e988 <_strtod_l+0x490>
 800eb40:	9b07      	ldr	r3, [sp, #28]
 800eb42:	1b9e      	subs	r6, r3, r6
 800eb44:	9b08      	ldr	r3, [sp, #32]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	bfb4      	ite	lt
 800eb4a:	4633      	movlt	r3, r6
 800eb4c:	2300      	movge	r3, #0
 800eb4e:	9310      	str	r3, [sp, #64]	; 0x40
 800eb50:	9b08      	ldr	r3, [sp, #32]
 800eb52:	2500      	movs	r5, #0
 800eb54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eb58:	9318      	str	r3, [sp, #96]	; 0x60
 800eb5a:	462e      	mov	r6, r5
 800eb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb5e:	4620      	mov	r0, r4
 800eb60:	6859      	ldr	r1, [r3, #4]
 800eb62:	f001 fe67 	bl	8010834 <_Balloc>
 800eb66:	9007      	str	r0, [sp, #28]
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	f43f af11 	beq.w	800e990 <_strtod_l+0x498>
 800eb6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb70:	691a      	ldr	r2, [r3, #16]
 800eb72:	3202      	adds	r2, #2
 800eb74:	f103 010c 	add.w	r1, r3, #12
 800eb78:	0092      	lsls	r2, r2, #2
 800eb7a:	300c      	adds	r0, #12
 800eb7c:	f7fe fcd1 	bl	800d522 <memcpy>
 800eb80:	ec4b ab10 	vmov	d0, sl, fp
 800eb84:	aa20      	add	r2, sp, #128	; 0x80
 800eb86:	a91f      	add	r1, sp, #124	; 0x7c
 800eb88:	4620      	mov	r0, r4
 800eb8a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800eb8e:	f002 fa39 	bl	8011004 <__d2b>
 800eb92:	901e      	str	r0, [sp, #120]	; 0x78
 800eb94:	2800      	cmp	r0, #0
 800eb96:	f43f aefb 	beq.w	800e990 <_strtod_l+0x498>
 800eb9a:	2101      	movs	r1, #1
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	f001 ff8f 	bl	8010ac0 <__i2b>
 800eba2:	4606      	mov	r6, r0
 800eba4:	2800      	cmp	r0, #0
 800eba6:	f43f aef3 	beq.w	800e990 <_strtod_l+0x498>
 800ebaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ebac:	9904      	ldr	r1, [sp, #16]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	bfab      	itete	ge
 800ebb2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ebb4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ebb6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ebb8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ebbc:	bfac      	ite	ge
 800ebbe:	eb03 0902 	addge.w	r9, r3, r2
 800ebc2:	1ad7      	sublt	r7, r2, r3
 800ebc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ebc6:	eba3 0801 	sub.w	r8, r3, r1
 800ebca:	4490      	add	r8, r2
 800ebcc:	4ba3      	ldr	r3, [pc, #652]	; (800ee5c <_strtod_l+0x964>)
 800ebce:	f108 38ff 	add.w	r8, r8, #4294967295
 800ebd2:	4598      	cmp	r8, r3
 800ebd4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ebd8:	f280 80cc 	bge.w	800ed74 <_strtod_l+0x87c>
 800ebdc:	eba3 0308 	sub.w	r3, r3, r8
 800ebe0:	2b1f      	cmp	r3, #31
 800ebe2:	eba2 0203 	sub.w	r2, r2, r3
 800ebe6:	f04f 0101 	mov.w	r1, #1
 800ebea:	f300 80b6 	bgt.w	800ed5a <_strtod_l+0x862>
 800ebee:	fa01 f303 	lsl.w	r3, r1, r3
 800ebf2:	9311      	str	r3, [sp, #68]	; 0x44
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	930c      	str	r3, [sp, #48]	; 0x30
 800ebf8:	eb09 0802 	add.w	r8, r9, r2
 800ebfc:	9b04      	ldr	r3, [sp, #16]
 800ebfe:	45c1      	cmp	r9, r8
 800ec00:	4417      	add	r7, r2
 800ec02:	441f      	add	r7, r3
 800ec04:	464b      	mov	r3, r9
 800ec06:	bfa8      	it	ge
 800ec08:	4643      	movge	r3, r8
 800ec0a:	42bb      	cmp	r3, r7
 800ec0c:	bfa8      	it	ge
 800ec0e:	463b      	movge	r3, r7
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	bfc2      	ittt	gt
 800ec14:	eba8 0803 	subgt.w	r8, r8, r3
 800ec18:	1aff      	subgt	r7, r7, r3
 800ec1a:	eba9 0903 	subgt.w	r9, r9, r3
 800ec1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	dd17      	ble.n	800ec54 <_strtod_l+0x75c>
 800ec24:	4631      	mov	r1, r6
 800ec26:	461a      	mov	r2, r3
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f002 f805 	bl	8010c38 <__pow5mult>
 800ec2e:	4606      	mov	r6, r0
 800ec30:	2800      	cmp	r0, #0
 800ec32:	f43f aead 	beq.w	800e990 <_strtod_l+0x498>
 800ec36:	4601      	mov	r1, r0
 800ec38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f001 ff56 	bl	8010aec <__multiply>
 800ec40:	900f      	str	r0, [sp, #60]	; 0x3c
 800ec42:	2800      	cmp	r0, #0
 800ec44:	f43f aea4 	beq.w	800e990 <_strtod_l+0x498>
 800ec48:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f001 fe32 	bl	80108b4 <_Bfree>
 800ec50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec52:	931e      	str	r3, [sp, #120]	; 0x78
 800ec54:	f1b8 0f00 	cmp.w	r8, #0
 800ec58:	f300 8091 	bgt.w	800ed7e <_strtod_l+0x886>
 800ec5c:	9b08      	ldr	r3, [sp, #32]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	dd08      	ble.n	800ec74 <_strtod_l+0x77c>
 800ec62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ec64:	9907      	ldr	r1, [sp, #28]
 800ec66:	4620      	mov	r0, r4
 800ec68:	f001 ffe6 	bl	8010c38 <__pow5mult>
 800ec6c:	9007      	str	r0, [sp, #28]
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	f43f ae8e 	beq.w	800e990 <_strtod_l+0x498>
 800ec74:	2f00      	cmp	r7, #0
 800ec76:	dd08      	ble.n	800ec8a <_strtod_l+0x792>
 800ec78:	9907      	ldr	r1, [sp, #28]
 800ec7a:	463a      	mov	r2, r7
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	f002 f835 	bl	8010cec <__lshift>
 800ec82:	9007      	str	r0, [sp, #28]
 800ec84:	2800      	cmp	r0, #0
 800ec86:	f43f ae83 	beq.w	800e990 <_strtod_l+0x498>
 800ec8a:	f1b9 0f00 	cmp.w	r9, #0
 800ec8e:	dd08      	ble.n	800eca2 <_strtod_l+0x7aa>
 800ec90:	4631      	mov	r1, r6
 800ec92:	464a      	mov	r2, r9
 800ec94:	4620      	mov	r0, r4
 800ec96:	f002 f829 	bl	8010cec <__lshift>
 800ec9a:	4606      	mov	r6, r0
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	f43f ae77 	beq.w	800e990 <_strtod_l+0x498>
 800eca2:	9a07      	ldr	r2, [sp, #28]
 800eca4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800eca6:	4620      	mov	r0, r4
 800eca8:	f002 f8a8 	bl	8010dfc <__mdiff>
 800ecac:	4605      	mov	r5, r0
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	f43f ae6e 	beq.w	800e990 <_strtod_l+0x498>
 800ecb4:	68c3      	ldr	r3, [r0, #12]
 800ecb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecb8:	2300      	movs	r3, #0
 800ecba:	60c3      	str	r3, [r0, #12]
 800ecbc:	4631      	mov	r1, r6
 800ecbe:	f002 f881 	bl	8010dc4 <__mcmp>
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	da65      	bge.n	800ed92 <_strtod_l+0x89a>
 800ecc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecc8:	ea53 030a 	orrs.w	r3, r3, sl
 800eccc:	f040 8087 	bne.w	800edde <_strtod_l+0x8e6>
 800ecd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f040 8082 	bne.w	800edde <_strtod_l+0x8e6>
 800ecda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ecde:	0d1b      	lsrs	r3, r3, #20
 800ece0:	051b      	lsls	r3, r3, #20
 800ece2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ece6:	d97a      	bls.n	800edde <_strtod_l+0x8e6>
 800ece8:	696b      	ldr	r3, [r5, #20]
 800ecea:	b913      	cbnz	r3, 800ecf2 <_strtod_l+0x7fa>
 800ecec:	692b      	ldr	r3, [r5, #16]
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	dd75      	ble.n	800edde <_strtod_l+0x8e6>
 800ecf2:	4629      	mov	r1, r5
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f001 fff8 	bl	8010cec <__lshift>
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	4605      	mov	r5, r0
 800ed00:	f002 f860 	bl	8010dc4 <__mcmp>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	dd6a      	ble.n	800edde <_strtod_l+0x8e6>
 800ed08:	9904      	ldr	r1, [sp, #16]
 800ed0a:	4a55      	ldr	r2, [pc, #340]	; (800ee60 <_strtod_l+0x968>)
 800ed0c:	465b      	mov	r3, fp
 800ed0e:	2900      	cmp	r1, #0
 800ed10:	f000 8085 	beq.w	800ee1e <_strtod_l+0x926>
 800ed14:	ea02 010b 	and.w	r1, r2, fp
 800ed18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ed1c:	dc7f      	bgt.n	800ee1e <_strtod_l+0x926>
 800ed1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ed22:	f77f aeaa 	ble.w	800ea7a <_strtod_l+0x582>
 800ed26:	4a4f      	ldr	r2, [pc, #316]	; (800ee64 <_strtod_l+0x96c>)
 800ed28:	2300      	movs	r3, #0
 800ed2a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ed2e:	4650      	mov	r0, sl
 800ed30:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ed34:	4659      	mov	r1, fp
 800ed36:	f7f1 fc5f 	bl	80005f8 <__aeabi_dmul>
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4303      	orrs	r3, r0
 800ed3e:	bf08      	it	eq
 800ed40:	2322      	moveq	r3, #34	; 0x22
 800ed42:	4682      	mov	sl, r0
 800ed44:	468b      	mov	fp, r1
 800ed46:	bf08      	it	eq
 800ed48:	6023      	streq	r3, [r4, #0]
 800ed4a:	e62b      	b.n	800e9a4 <_strtod_l+0x4ac>
 800ed4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed50:	fa02 f303 	lsl.w	r3, r2, r3
 800ed54:	ea03 0a0a 	and.w	sl, r3, sl
 800ed58:	e6de      	b.n	800eb18 <_strtod_l+0x620>
 800ed5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ed5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ed62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ed66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ed6a:	fa01 f308 	lsl.w	r3, r1, r8
 800ed6e:	930c      	str	r3, [sp, #48]	; 0x30
 800ed70:	9111      	str	r1, [sp, #68]	; 0x44
 800ed72:	e741      	b.n	800ebf8 <_strtod_l+0x700>
 800ed74:	2300      	movs	r3, #0
 800ed76:	930c      	str	r3, [sp, #48]	; 0x30
 800ed78:	2301      	movs	r3, #1
 800ed7a:	9311      	str	r3, [sp, #68]	; 0x44
 800ed7c:	e73c      	b.n	800ebf8 <_strtod_l+0x700>
 800ed7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ed80:	4642      	mov	r2, r8
 800ed82:	4620      	mov	r0, r4
 800ed84:	f001 ffb2 	bl	8010cec <__lshift>
 800ed88:	901e      	str	r0, [sp, #120]	; 0x78
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	f47f af66 	bne.w	800ec5c <_strtod_l+0x764>
 800ed90:	e5fe      	b.n	800e990 <_strtod_l+0x498>
 800ed92:	465f      	mov	r7, fp
 800ed94:	d16e      	bne.n	800ee74 <_strtod_l+0x97c>
 800ed96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed9c:	b342      	cbz	r2, 800edf0 <_strtod_l+0x8f8>
 800ed9e:	4a32      	ldr	r2, [pc, #200]	; (800ee68 <_strtod_l+0x970>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d128      	bne.n	800edf6 <_strtod_l+0x8fe>
 800eda4:	9b04      	ldr	r3, [sp, #16]
 800eda6:	4650      	mov	r0, sl
 800eda8:	b1eb      	cbz	r3, 800ede6 <_strtod_l+0x8ee>
 800edaa:	4a2d      	ldr	r2, [pc, #180]	; (800ee60 <_strtod_l+0x968>)
 800edac:	403a      	ands	r2, r7
 800edae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800edb2:	f04f 31ff 	mov.w	r1, #4294967295
 800edb6:	d819      	bhi.n	800edec <_strtod_l+0x8f4>
 800edb8:	0d12      	lsrs	r2, r2, #20
 800edba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800edbe:	fa01 f303 	lsl.w	r3, r1, r3
 800edc2:	4298      	cmp	r0, r3
 800edc4:	d117      	bne.n	800edf6 <_strtod_l+0x8fe>
 800edc6:	4b29      	ldr	r3, [pc, #164]	; (800ee6c <_strtod_l+0x974>)
 800edc8:	429f      	cmp	r7, r3
 800edca:	d102      	bne.n	800edd2 <_strtod_l+0x8da>
 800edcc:	3001      	adds	r0, #1
 800edce:	f43f addf 	beq.w	800e990 <_strtod_l+0x498>
 800edd2:	4b23      	ldr	r3, [pc, #140]	; (800ee60 <_strtod_l+0x968>)
 800edd4:	403b      	ands	r3, r7
 800edd6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800edda:	f04f 0a00 	mov.w	sl, #0
 800edde:	9b04      	ldr	r3, [sp, #16]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1a0      	bne.n	800ed26 <_strtod_l+0x82e>
 800ede4:	e5de      	b.n	800e9a4 <_strtod_l+0x4ac>
 800ede6:	f04f 33ff 	mov.w	r3, #4294967295
 800edea:	e7ea      	b.n	800edc2 <_strtod_l+0x8ca>
 800edec:	460b      	mov	r3, r1
 800edee:	e7e8      	b.n	800edc2 <_strtod_l+0x8ca>
 800edf0:	ea53 030a 	orrs.w	r3, r3, sl
 800edf4:	d088      	beq.n	800ed08 <_strtod_l+0x810>
 800edf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edf8:	b1db      	cbz	r3, 800ee32 <_strtod_l+0x93a>
 800edfa:	423b      	tst	r3, r7
 800edfc:	d0ef      	beq.n	800edde <_strtod_l+0x8e6>
 800edfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee00:	9a04      	ldr	r2, [sp, #16]
 800ee02:	4650      	mov	r0, sl
 800ee04:	4659      	mov	r1, fp
 800ee06:	b1c3      	cbz	r3, 800ee3a <_strtod_l+0x942>
 800ee08:	f7ff fb59 	bl	800e4be <sulp>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	460b      	mov	r3, r1
 800ee10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee14:	f7f1 fa3a 	bl	800028c <__adddf3>
 800ee18:	4682      	mov	sl, r0
 800ee1a:	468b      	mov	fp, r1
 800ee1c:	e7df      	b.n	800edde <_strtod_l+0x8e6>
 800ee1e:	4013      	ands	r3, r2
 800ee20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ee24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ee28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ee2c:	f04f 3aff 	mov.w	sl, #4294967295
 800ee30:	e7d5      	b.n	800edde <_strtod_l+0x8e6>
 800ee32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee34:	ea13 0f0a 	tst.w	r3, sl
 800ee38:	e7e0      	b.n	800edfc <_strtod_l+0x904>
 800ee3a:	f7ff fb40 	bl	800e4be <sulp>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	460b      	mov	r3, r1
 800ee42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee46:	f7f1 fa1f 	bl	8000288 <__aeabi_dsub>
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	4682      	mov	sl, r0
 800ee50:	468b      	mov	fp, r1
 800ee52:	f7f1 fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d0c1      	beq.n	800edde <_strtod_l+0x8e6>
 800ee5a:	e60e      	b.n	800ea7a <_strtod_l+0x582>
 800ee5c:	fffffc02 	.word	0xfffffc02
 800ee60:	7ff00000 	.word	0x7ff00000
 800ee64:	39500000 	.word	0x39500000
 800ee68:	000fffff 	.word	0x000fffff
 800ee6c:	7fefffff 	.word	0x7fefffff
 800ee70:	08013768 	.word	0x08013768
 800ee74:	4631      	mov	r1, r6
 800ee76:	4628      	mov	r0, r5
 800ee78:	f002 f920 	bl	80110bc <__ratio>
 800ee7c:	ec59 8b10 	vmov	r8, r9, d0
 800ee80:	ee10 0a10 	vmov	r0, s0
 800ee84:	2200      	movs	r2, #0
 800ee86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee8a:	4649      	mov	r1, r9
 800ee8c:	f7f1 fe30 	bl	8000af0 <__aeabi_dcmple>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	d07c      	beq.n	800ef8e <_strtod_l+0xa96>
 800ee94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d04c      	beq.n	800ef34 <_strtod_l+0xa3c>
 800ee9a:	4b95      	ldr	r3, [pc, #596]	; (800f0f0 <_strtod_l+0xbf8>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eea2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f0f0 <_strtod_l+0xbf8>
 800eea6:	f04f 0800 	mov.w	r8, #0
 800eeaa:	4b92      	ldr	r3, [pc, #584]	; (800f0f4 <_strtod_l+0xbfc>)
 800eeac:	403b      	ands	r3, r7
 800eeae:	9311      	str	r3, [sp, #68]	; 0x44
 800eeb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eeb2:	4b91      	ldr	r3, [pc, #580]	; (800f0f8 <_strtod_l+0xc00>)
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	f040 80b2 	bne.w	800f01e <_strtod_l+0xb26>
 800eeba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eec2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800eec6:	ec4b ab10 	vmov	d0, sl, fp
 800eeca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800eece:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eed2:	f002 f81b 	bl	8010f0c <__ulp>
 800eed6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eeda:	ec53 2b10 	vmov	r2, r3, d0
 800eede:	f7f1 fb8b 	bl	80005f8 <__aeabi_dmul>
 800eee2:	4652      	mov	r2, sl
 800eee4:	465b      	mov	r3, fp
 800eee6:	f7f1 f9d1 	bl	800028c <__adddf3>
 800eeea:	460b      	mov	r3, r1
 800eeec:	4981      	ldr	r1, [pc, #516]	; (800f0f4 <_strtod_l+0xbfc>)
 800eeee:	4a83      	ldr	r2, [pc, #524]	; (800f0fc <_strtod_l+0xc04>)
 800eef0:	4019      	ands	r1, r3
 800eef2:	4291      	cmp	r1, r2
 800eef4:	4682      	mov	sl, r0
 800eef6:	d95e      	bls.n	800efb6 <_strtod_l+0xabe>
 800eef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eefa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d103      	bne.n	800ef0a <_strtod_l+0xa12>
 800ef02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef04:	3301      	adds	r3, #1
 800ef06:	f43f ad43 	beq.w	800e990 <_strtod_l+0x498>
 800ef0a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f108 <_strtod_l+0xc10>
 800ef0e:	f04f 3aff 	mov.w	sl, #4294967295
 800ef12:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ef14:	4620      	mov	r0, r4
 800ef16:	f001 fccd 	bl	80108b4 <_Bfree>
 800ef1a:	9907      	ldr	r1, [sp, #28]
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	f001 fcc9 	bl	80108b4 <_Bfree>
 800ef22:	4631      	mov	r1, r6
 800ef24:	4620      	mov	r0, r4
 800ef26:	f001 fcc5 	bl	80108b4 <_Bfree>
 800ef2a:	4629      	mov	r1, r5
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f001 fcc1 	bl	80108b4 <_Bfree>
 800ef32:	e613      	b.n	800eb5c <_strtod_l+0x664>
 800ef34:	f1ba 0f00 	cmp.w	sl, #0
 800ef38:	d11b      	bne.n	800ef72 <_strtod_l+0xa7a>
 800ef3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef3e:	b9f3      	cbnz	r3, 800ef7e <_strtod_l+0xa86>
 800ef40:	4b6b      	ldr	r3, [pc, #428]	; (800f0f0 <_strtod_l+0xbf8>)
 800ef42:	2200      	movs	r2, #0
 800ef44:	4640      	mov	r0, r8
 800ef46:	4649      	mov	r1, r9
 800ef48:	f7f1 fdc8 	bl	8000adc <__aeabi_dcmplt>
 800ef4c:	b9d0      	cbnz	r0, 800ef84 <_strtod_l+0xa8c>
 800ef4e:	4640      	mov	r0, r8
 800ef50:	4649      	mov	r1, r9
 800ef52:	4b6b      	ldr	r3, [pc, #428]	; (800f100 <_strtod_l+0xc08>)
 800ef54:	2200      	movs	r2, #0
 800ef56:	f7f1 fb4f 	bl	80005f8 <__aeabi_dmul>
 800ef5a:	4680      	mov	r8, r0
 800ef5c:	4689      	mov	r9, r1
 800ef5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ef62:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ef66:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef68:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ef6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ef70:	e79b      	b.n	800eeaa <_strtod_l+0x9b2>
 800ef72:	f1ba 0f01 	cmp.w	sl, #1
 800ef76:	d102      	bne.n	800ef7e <_strtod_l+0xa86>
 800ef78:	2f00      	cmp	r7, #0
 800ef7a:	f43f ad7e 	beq.w	800ea7a <_strtod_l+0x582>
 800ef7e:	4b61      	ldr	r3, [pc, #388]	; (800f104 <_strtod_l+0xc0c>)
 800ef80:	2200      	movs	r2, #0
 800ef82:	e78c      	b.n	800ee9e <_strtod_l+0x9a6>
 800ef84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f100 <_strtod_l+0xc08>
 800ef88:	f04f 0800 	mov.w	r8, #0
 800ef8c:	e7e7      	b.n	800ef5e <_strtod_l+0xa66>
 800ef8e:	4b5c      	ldr	r3, [pc, #368]	; (800f100 <_strtod_l+0xc08>)
 800ef90:	4640      	mov	r0, r8
 800ef92:	4649      	mov	r1, r9
 800ef94:	2200      	movs	r2, #0
 800ef96:	f7f1 fb2f 	bl	80005f8 <__aeabi_dmul>
 800ef9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef9c:	4680      	mov	r8, r0
 800ef9e:	4689      	mov	r9, r1
 800efa0:	b933      	cbnz	r3, 800efb0 <_strtod_l+0xab8>
 800efa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efa6:	9012      	str	r0, [sp, #72]	; 0x48
 800efa8:	9313      	str	r3, [sp, #76]	; 0x4c
 800efaa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800efae:	e7dd      	b.n	800ef6c <_strtod_l+0xa74>
 800efb0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800efb4:	e7f9      	b.n	800efaa <_strtod_l+0xab2>
 800efb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800efba:	9b04      	ldr	r3, [sp, #16]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1a8      	bne.n	800ef12 <_strtod_l+0xa1a>
 800efc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800efc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efc6:	0d1b      	lsrs	r3, r3, #20
 800efc8:	051b      	lsls	r3, r3, #20
 800efca:	429a      	cmp	r2, r3
 800efcc:	d1a1      	bne.n	800ef12 <_strtod_l+0xa1a>
 800efce:	4640      	mov	r0, r8
 800efd0:	4649      	mov	r1, r9
 800efd2:	f7f1 fe71 	bl	8000cb8 <__aeabi_d2lz>
 800efd6:	f7f1 fae1 	bl	800059c <__aeabi_l2d>
 800efda:	4602      	mov	r2, r0
 800efdc:	460b      	mov	r3, r1
 800efde:	4640      	mov	r0, r8
 800efe0:	4649      	mov	r1, r9
 800efe2:	f7f1 f951 	bl	8000288 <__aeabi_dsub>
 800efe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800efe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800efec:	ea43 030a 	orr.w	r3, r3, sl
 800eff0:	4313      	orrs	r3, r2
 800eff2:	4680      	mov	r8, r0
 800eff4:	4689      	mov	r9, r1
 800eff6:	d053      	beq.n	800f0a0 <_strtod_l+0xba8>
 800eff8:	a335      	add	r3, pc, #212	; (adr r3, 800f0d0 <_strtod_l+0xbd8>)
 800effa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effe:	f7f1 fd6d 	bl	8000adc <__aeabi_dcmplt>
 800f002:	2800      	cmp	r0, #0
 800f004:	f47f acce 	bne.w	800e9a4 <_strtod_l+0x4ac>
 800f008:	a333      	add	r3, pc, #204	; (adr r3, 800f0d8 <_strtod_l+0xbe0>)
 800f00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00e:	4640      	mov	r0, r8
 800f010:	4649      	mov	r1, r9
 800f012:	f7f1 fd81 	bl	8000b18 <__aeabi_dcmpgt>
 800f016:	2800      	cmp	r0, #0
 800f018:	f43f af7b 	beq.w	800ef12 <_strtod_l+0xa1a>
 800f01c:	e4c2      	b.n	800e9a4 <_strtod_l+0x4ac>
 800f01e:	9b04      	ldr	r3, [sp, #16]
 800f020:	b333      	cbz	r3, 800f070 <_strtod_l+0xb78>
 800f022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f024:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f028:	d822      	bhi.n	800f070 <_strtod_l+0xb78>
 800f02a:	a32d      	add	r3, pc, #180	; (adr r3, 800f0e0 <_strtod_l+0xbe8>)
 800f02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f030:	4640      	mov	r0, r8
 800f032:	4649      	mov	r1, r9
 800f034:	f7f1 fd5c 	bl	8000af0 <__aeabi_dcmple>
 800f038:	b1a0      	cbz	r0, 800f064 <_strtod_l+0xb6c>
 800f03a:	4649      	mov	r1, r9
 800f03c:	4640      	mov	r0, r8
 800f03e:	f7f1 fdb3 	bl	8000ba8 <__aeabi_d2uiz>
 800f042:	2801      	cmp	r0, #1
 800f044:	bf38      	it	cc
 800f046:	2001      	movcc	r0, #1
 800f048:	f7f1 fa5c 	bl	8000504 <__aeabi_ui2d>
 800f04c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f04e:	4680      	mov	r8, r0
 800f050:	4689      	mov	r9, r1
 800f052:	bb13      	cbnz	r3, 800f09a <_strtod_l+0xba2>
 800f054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f058:	9014      	str	r0, [sp, #80]	; 0x50
 800f05a:	9315      	str	r3, [sp, #84]	; 0x54
 800f05c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f060:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f066:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f068:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f06c:	1a9b      	subs	r3, r3, r2
 800f06e:	930d      	str	r3, [sp, #52]	; 0x34
 800f070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f074:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f078:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f07c:	f001 ff46 	bl	8010f0c <__ulp>
 800f080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f084:	ec53 2b10 	vmov	r2, r3, d0
 800f088:	f7f1 fab6 	bl	80005f8 <__aeabi_dmul>
 800f08c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f090:	f7f1 f8fc 	bl	800028c <__adddf3>
 800f094:	4682      	mov	sl, r0
 800f096:	468b      	mov	fp, r1
 800f098:	e78f      	b.n	800efba <_strtod_l+0xac2>
 800f09a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f09e:	e7dd      	b.n	800f05c <_strtod_l+0xb64>
 800f0a0:	a311      	add	r3, pc, #68	; (adr r3, 800f0e8 <_strtod_l+0xbf0>)
 800f0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a6:	f7f1 fd19 	bl	8000adc <__aeabi_dcmplt>
 800f0aa:	e7b4      	b.n	800f016 <_strtod_l+0xb1e>
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	930e      	str	r3, [sp, #56]	; 0x38
 800f0b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f0b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0b4:	6013      	str	r3, [r2, #0]
 800f0b6:	f7ff ba65 	b.w	800e584 <_strtod_l+0x8c>
 800f0ba:	2b65      	cmp	r3, #101	; 0x65
 800f0bc:	f43f ab5d 	beq.w	800e77a <_strtod_l+0x282>
 800f0c0:	2b45      	cmp	r3, #69	; 0x45
 800f0c2:	f43f ab5a 	beq.w	800e77a <_strtod_l+0x282>
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	f7ff bb92 	b.w	800e7f0 <_strtod_l+0x2f8>
 800f0cc:	f3af 8000 	nop.w
 800f0d0:	94a03595 	.word	0x94a03595
 800f0d4:	3fdfffff 	.word	0x3fdfffff
 800f0d8:	35afe535 	.word	0x35afe535
 800f0dc:	3fe00000 	.word	0x3fe00000
 800f0e0:	ffc00000 	.word	0xffc00000
 800f0e4:	41dfffff 	.word	0x41dfffff
 800f0e8:	94a03595 	.word	0x94a03595
 800f0ec:	3fcfffff 	.word	0x3fcfffff
 800f0f0:	3ff00000 	.word	0x3ff00000
 800f0f4:	7ff00000 	.word	0x7ff00000
 800f0f8:	7fe00000 	.word	0x7fe00000
 800f0fc:	7c9fffff 	.word	0x7c9fffff
 800f100:	3fe00000 	.word	0x3fe00000
 800f104:	bff00000 	.word	0xbff00000
 800f108:	7fefffff 	.word	0x7fefffff

0800f10c <_strtod_r>:
 800f10c:	4b01      	ldr	r3, [pc, #4]	; (800f114 <_strtod_r+0x8>)
 800f10e:	f7ff b9f3 	b.w	800e4f8 <_strtod_l>
 800f112:	bf00      	nop
 800f114:	200000a8 	.word	0x200000a8

0800f118 <_strtol_l.isra.0>:
 800f118:	2b01      	cmp	r3, #1
 800f11a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f11e:	d001      	beq.n	800f124 <_strtol_l.isra.0+0xc>
 800f120:	2b24      	cmp	r3, #36	; 0x24
 800f122:	d906      	bls.n	800f132 <_strtol_l.isra.0+0x1a>
 800f124:	f7fe f8da 	bl	800d2dc <__errno>
 800f128:	2316      	movs	r3, #22
 800f12a:	6003      	str	r3, [r0, #0]
 800f12c:	2000      	movs	r0, #0
 800f12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f132:	4f3a      	ldr	r7, [pc, #232]	; (800f21c <_strtol_l.isra.0+0x104>)
 800f134:	468e      	mov	lr, r1
 800f136:	4676      	mov	r6, lr
 800f138:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f13c:	5de5      	ldrb	r5, [r4, r7]
 800f13e:	f015 0508 	ands.w	r5, r5, #8
 800f142:	d1f8      	bne.n	800f136 <_strtol_l.isra.0+0x1e>
 800f144:	2c2d      	cmp	r4, #45	; 0x2d
 800f146:	d134      	bne.n	800f1b2 <_strtol_l.isra.0+0x9a>
 800f148:	f89e 4000 	ldrb.w	r4, [lr]
 800f14c:	f04f 0801 	mov.w	r8, #1
 800f150:	f106 0e02 	add.w	lr, r6, #2
 800f154:	2b00      	cmp	r3, #0
 800f156:	d05c      	beq.n	800f212 <_strtol_l.isra.0+0xfa>
 800f158:	2b10      	cmp	r3, #16
 800f15a:	d10c      	bne.n	800f176 <_strtol_l.isra.0+0x5e>
 800f15c:	2c30      	cmp	r4, #48	; 0x30
 800f15e:	d10a      	bne.n	800f176 <_strtol_l.isra.0+0x5e>
 800f160:	f89e 4000 	ldrb.w	r4, [lr]
 800f164:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f168:	2c58      	cmp	r4, #88	; 0x58
 800f16a:	d14d      	bne.n	800f208 <_strtol_l.isra.0+0xf0>
 800f16c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f170:	2310      	movs	r3, #16
 800f172:	f10e 0e02 	add.w	lr, lr, #2
 800f176:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f17a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f17e:	2600      	movs	r6, #0
 800f180:	fbbc f9f3 	udiv	r9, ip, r3
 800f184:	4635      	mov	r5, r6
 800f186:	fb03 ca19 	mls	sl, r3, r9, ip
 800f18a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f18e:	2f09      	cmp	r7, #9
 800f190:	d818      	bhi.n	800f1c4 <_strtol_l.isra.0+0xac>
 800f192:	463c      	mov	r4, r7
 800f194:	42a3      	cmp	r3, r4
 800f196:	dd24      	ble.n	800f1e2 <_strtol_l.isra.0+0xca>
 800f198:	2e00      	cmp	r6, #0
 800f19a:	db1f      	blt.n	800f1dc <_strtol_l.isra.0+0xc4>
 800f19c:	45a9      	cmp	r9, r5
 800f19e:	d31d      	bcc.n	800f1dc <_strtol_l.isra.0+0xc4>
 800f1a0:	d101      	bne.n	800f1a6 <_strtol_l.isra.0+0x8e>
 800f1a2:	45a2      	cmp	sl, r4
 800f1a4:	db1a      	blt.n	800f1dc <_strtol_l.isra.0+0xc4>
 800f1a6:	fb05 4503 	mla	r5, r5, r3, r4
 800f1aa:	2601      	movs	r6, #1
 800f1ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f1b0:	e7eb      	b.n	800f18a <_strtol_l.isra.0+0x72>
 800f1b2:	2c2b      	cmp	r4, #43	; 0x2b
 800f1b4:	bf08      	it	eq
 800f1b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f1ba:	46a8      	mov	r8, r5
 800f1bc:	bf08      	it	eq
 800f1be:	f106 0e02 	addeq.w	lr, r6, #2
 800f1c2:	e7c7      	b.n	800f154 <_strtol_l.isra.0+0x3c>
 800f1c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f1c8:	2f19      	cmp	r7, #25
 800f1ca:	d801      	bhi.n	800f1d0 <_strtol_l.isra.0+0xb8>
 800f1cc:	3c37      	subs	r4, #55	; 0x37
 800f1ce:	e7e1      	b.n	800f194 <_strtol_l.isra.0+0x7c>
 800f1d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f1d4:	2f19      	cmp	r7, #25
 800f1d6:	d804      	bhi.n	800f1e2 <_strtol_l.isra.0+0xca>
 800f1d8:	3c57      	subs	r4, #87	; 0x57
 800f1da:	e7db      	b.n	800f194 <_strtol_l.isra.0+0x7c>
 800f1dc:	f04f 36ff 	mov.w	r6, #4294967295
 800f1e0:	e7e4      	b.n	800f1ac <_strtol_l.isra.0+0x94>
 800f1e2:	2e00      	cmp	r6, #0
 800f1e4:	da05      	bge.n	800f1f2 <_strtol_l.isra.0+0xda>
 800f1e6:	2322      	movs	r3, #34	; 0x22
 800f1e8:	6003      	str	r3, [r0, #0]
 800f1ea:	4665      	mov	r5, ip
 800f1ec:	b942      	cbnz	r2, 800f200 <_strtol_l.isra.0+0xe8>
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	e79d      	b.n	800f12e <_strtol_l.isra.0+0x16>
 800f1f2:	f1b8 0f00 	cmp.w	r8, #0
 800f1f6:	d000      	beq.n	800f1fa <_strtol_l.isra.0+0xe2>
 800f1f8:	426d      	negs	r5, r5
 800f1fa:	2a00      	cmp	r2, #0
 800f1fc:	d0f7      	beq.n	800f1ee <_strtol_l.isra.0+0xd6>
 800f1fe:	b10e      	cbz	r6, 800f204 <_strtol_l.isra.0+0xec>
 800f200:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f204:	6011      	str	r1, [r2, #0]
 800f206:	e7f2      	b.n	800f1ee <_strtol_l.isra.0+0xd6>
 800f208:	2430      	movs	r4, #48	; 0x30
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d1b3      	bne.n	800f176 <_strtol_l.isra.0+0x5e>
 800f20e:	2308      	movs	r3, #8
 800f210:	e7b1      	b.n	800f176 <_strtol_l.isra.0+0x5e>
 800f212:	2c30      	cmp	r4, #48	; 0x30
 800f214:	d0a4      	beq.n	800f160 <_strtol_l.isra.0+0x48>
 800f216:	230a      	movs	r3, #10
 800f218:	e7ad      	b.n	800f176 <_strtol_l.isra.0+0x5e>
 800f21a:	bf00      	nop
 800f21c:	08013791 	.word	0x08013791

0800f220 <_strtol_r>:
 800f220:	f7ff bf7a 	b.w	800f118 <_strtol_l.isra.0>

0800f224 <_write_r>:
 800f224:	b538      	push	{r3, r4, r5, lr}
 800f226:	4d07      	ldr	r5, [pc, #28]	; (800f244 <_write_r+0x20>)
 800f228:	4604      	mov	r4, r0
 800f22a:	4608      	mov	r0, r1
 800f22c:	4611      	mov	r1, r2
 800f22e:	2200      	movs	r2, #0
 800f230:	602a      	str	r2, [r5, #0]
 800f232:	461a      	mov	r2, r3
 800f234:	f7f4 ff95 	bl	8004162 <_write>
 800f238:	1c43      	adds	r3, r0, #1
 800f23a:	d102      	bne.n	800f242 <_write_r+0x1e>
 800f23c:	682b      	ldr	r3, [r5, #0]
 800f23e:	b103      	cbz	r3, 800f242 <_write_r+0x1e>
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	bd38      	pop	{r3, r4, r5, pc}
 800f244:	200063a4 	.word	0x200063a4

0800f248 <_close_r>:
 800f248:	b538      	push	{r3, r4, r5, lr}
 800f24a:	4d06      	ldr	r5, [pc, #24]	; (800f264 <_close_r+0x1c>)
 800f24c:	2300      	movs	r3, #0
 800f24e:	4604      	mov	r4, r0
 800f250:	4608      	mov	r0, r1
 800f252:	602b      	str	r3, [r5, #0]
 800f254:	f7f4 ffa1 	bl	800419a <_close>
 800f258:	1c43      	adds	r3, r0, #1
 800f25a:	d102      	bne.n	800f262 <_close_r+0x1a>
 800f25c:	682b      	ldr	r3, [r5, #0]
 800f25e:	b103      	cbz	r3, 800f262 <_close_r+0x1a>
 800f260:	6023      	str	r3, [r4, #0]
 800f262:	bd38      	pop	{r3, r4, r5, pc}
 800f264:	200063a4 	.word	0x200063a4

0800f268 <quorem>:
 800f268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26c:	6903      	ldr	r3, [r0, #16]
 800f26e:	690c      	ldr	r4, [r1, #16]
 800f270:	42a3      	cmp	r3, r4
 800f272:	4607      	mov	r7, r0
 800f274:	f2c0 8081 	blt.w	800f37a <quorem+0x112>
 800f278:	3c01      	subs	r4, #1
 800f27a:	f101 0814 	add.w	r8, r1, #20
 800f27e:	f100 0514 	add.w	r5, r0, #20
 800f282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f286:	9301      	str	r3, [sp, #4]
 800f288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f28c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f290:	3301      	adds	r3, #1
 800f292:	429a      	cmp	r2, r3
 800f294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f29c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f2a0:	d331      	bcc.n	800f306 <quorem+0x9e>
 800f2a2:	f04f 0e00 	mov.w	lr, #0
 800f2a6:	4640      	mov	r0, r8
 800f2a8:	46ac      	mov	ip, r5
 800f2aa:	46f2      	mov	sl, lr
 800f2ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800f2b0:	b293      	uxth	r3, r2
 800f2b2:	fb06 e303 	mla	r3, r6, r3, lr
 800f2b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	ebaa 0303 	sub.w	r3, sl, r3
 800f2c0:	0c12      	lsrs	r2, r2, #16
 800f2c2:	f8dc a000 	ldr.w	sl, [ip]
 800f2c6:	fb06 e202 	mla	r2, r6, r2, lr
 800f2ca:	fa13 f38a 	uxtah	r3, r3, sl
 800f2ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f2d2:	fa1f fa82 	uxth.w	sl, r2
 800f2d6:	f8dc 2000 	ldr.w	r2, [ip]
 800f2da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f2de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2e8:	4581      	cmp	r9, r0
 800f2ea:	f84c 3b04 	str.w	r3, [ip], #4
 800f2ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f2f2:	d2db      	bcs.n	800f2ac <quorem+0x44>
 800f2f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800f2f8:	b92b      	cbnz	r3, 800f306 <quorem+0x9e>
 800f2fa:	9b01      	ldr	r3, [sp, #4]
 800f2fc:	3b04      	subs	r3, #4
 800f2fe:	429d      	cmp	r5, r3
 800f300:	461a      	mov	r2, r3
 800f302:	d32e      	bcc.n	800f362 <quorem+0xfa>
 800f304:	613c      	str	r4, [r7, #16]
 800f306:	4638      	mov	r0, r7
 800f308:	f001 fd5c 	bl	8010dc4 <__mcmp>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	db24      	blt.n	800f35a <quorem+0xf2>
 800f310:	3601      	adds	r6, #1
 800f312:	4628      	mov	r0, r5
 800f314:	f04f 0c00 	mov.w	ip, #0
 800f318:	f858 2b04 	ldr.w	r2, [r8], #4
 800f31c:	f8d0 e000 	ldr.w	lr, [r0]
 800f320:	b293      	uxth	r3, r2
 800f322:	ebac 0303 	sub.w	r3, ip, r3
 800f326:	0c12      	lsrs	r2, r2, #16
 800f328:	fa13 f38e 	uxtah	r3, r3, lr
 800f32c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f334:	b29b      	uxth	r3, r3
 800f336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f33a:	45c1      	cmp	r9, r8
 800f33c:	f840 3b04 	str.w	r3, [r0], #4
 800f340:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f344:	d2e8      	bcs.n	800f318 <quorem+0xb0>
 800f346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f34a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f34e:	b922      	cbnz	r2, 800f35a <quorem+0xf2>
 800f350:	3b04      	subs	r3, #4
 800f352:	429d      	cmp	r5, r3
 800f354:	461a      	mov	r2, r3
 800f356:	d30a      	bcc.n	800f36e <quorem+0x106>
 800f358:	613c      	str	r4, [r7, #16]
 800f35a:	4630      	mov	r0, r6
 800f35c:	b003      	add	sp, #12
 800f35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f362:	6812      	ldr	r2, [r2, #0]
 800f364:	3b04      	subs	r3, #4
 800f366:	2a00      	cmp	r2, #0
 800f368:	d1cc      	bne.n	800f304 <quorem+0x9c>
 800f36a:	3c01      	subs	r4, #1
 800f36c:	e7c7      	b.n	800f2fe <quorem+0x96>
 800f36e:	6812      	ldr	r2, [r2, #0]
 800f370:	3b04      	subs	r3, #4
 800f372:	2a00      	cmp	r2, #0
 800f374:	d1f0      	bne.n	800f358 <quorem+0xf0>
 800f376:	3c01      	subs	r4, #1
 800f378:	e7eb      	b.n	800f352 <quorem+0xea>
 800f37a:	2000      	movs	r0, #0
 800f37c:	e7ee      	b.n	800f35c <quorem+0xf4>
	...

0800f380 <_dtoa_r>:
 800f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f384:	ed2d 8b02 	vpush	{d8}
 800f388:	ec57 6b10 	vmov	r6, r7, d0
 800f38c:	b095      	sub	sp, #84	; 0x54
 800f38e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f390:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f394:	9105      	str	r1, [sp, #20]
 800f396:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f39a:	4604      	mov	r4, r0
 800f39c:	9209      	str	r2, [sp, #36]	; 0x24
 800f39e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3a0:	b975      	cbnz	r5, 800f3c0 <_dtoa_r+0x40>
 800f3a2:	2010      	movs	r0, #16
 800f3a4:	f001 fa20 	bl	80107e8 <malloc>
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	6260      	str	r0, [r4, #36]	; 0x24
 800f3ac:	b920      	cbnz	r0, 800f3b8 <_dtoa_r+0x38>
 800f3ae:	4bb2      	ldr	r3, [pc, #712]	; (800f678 <_dtoa_r+0x2f8>)
 800f3b0:	21ea      	movs	r1, #234	; 0xea
 800f3b2:	48b2      	ldr	r0, [pc, #712]	; (800f67c <_dtoa_r+0x2fc>)
 800f3b4:	f002 f8f0 	bl	8011598 <__assert_func>
 800f3b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f3bc:	6005      	str	r5, [r0, #0]
 800f3be:	60c5      	str	r5, [r0, #12]
 800f3c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3c2:	6819      	ldr	r1, [r3, #0]
 800f3c4:	b151      	cbz	r1, 800f3dc <_dtoa_r+0x5c>
 800f3c6:	685a      	ldr	r2, [r3, #4]
 800f3c8:	604a      	str	r2, [r1, #4]
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	4093      	lsls	r3, r2
 800f3ce:	608b      	str	r3, [r1, #8]
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f001 fa6f 	bl	80108b4 <_Bfree>
 800f3d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3d8:	2200      	movs	r2, #0
 800f3da:	601a      	str	r2, [r3, #0]
 800f3dc:	1e3b      	subs	r3, r7, #0
 800f3de:	bfb9      	ittee	lt
 800f3e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f3e4:	9303      	strlt	r3, [sp, #12]
 800f3e6:	2300      	movge	r3, #0
 800f3e8:	f8c8 3000 	strge.w	r3, [r8]
 800f3ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f3f0:	4ba3      	ldr	r3, [pc, #652]	; (800f680 <_dtoa_r+0x300>)
 800f3f2:	bfbc      	itt	lt
 800f3f4:	2201      	movlt	r2, #1
 800f3f6:	f8c8 2000 	strlt.w	r2, [r8]
 800f3fa:	ea33 0309 	bics.w	r3, r3, r9
 800f3fe:	d11b      	bne.n	800f438 <_dtoa_r+0xb8>
 800f400:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f402:	f242 730f 	movw	r3, #9999	; 0x270f
 800f406:	6013      	str	r3, [r2, #0]
 800f408:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f40c:	4333      	orrs	r3, r6
 800f40e:	f000 857a 	beq.w	800ff06 <_dtoa_r+0xb86>
 800f412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f414:	b963      	cbnz	r3, 800f430 <_dtoa_r+0xb0>
 800f416:	4b9b      	ldr	r3, [pc, #620]	; (800f684 <_dtoa_r+0x304>)
 800f418:	e024      	b.n	800f464 <_dtoa_r+0xe4>
 800f41a:	4b9b      	ldr	r3, [pc, #620]	; (800f688 <_dtoa_r+0x308>)
 800f41c:	9300      	str	r3, [sp, #0]
 800f41e:	3308      	adds	r3, #8
 800f420:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f422:	6013      	str	r3, [r2, #0]
 800f424:	9800      	ldr	r0, [sp, #0]
 800f426:	b015      	add	sp, #84	; 0x54
 800f428:	ecbd 8b02 	vpop	{d8}
 800f42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f430:	4b94      	ldr	r3, [pc, #592]	; (800f684 <_dtoa_r+0x304>)
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	3303      	adds	r3, #3
 800f436:	e7f3      	b.n	800f420 <_dtoa_r+0xa0>
 800f438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f43c:	2200      	movs	r2, #0
 800f43e:	ec51 0b17 	vmov	r0, r1, d7
 800f442:	2300      	movs	r3, #0
 800f444:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f448:	f7f1 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f44c:	4680      	mov	r8, r0
 800f44e:	b158      	cbz	r0, 800f468 <_dtoa_r+0xe8>
 800f450:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f452:	2301      	movs	r3, #1
 800f454:	6013      	str	r3, [r2, #0]
 800f456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f000 8551 	beq.w	800ff00 <_dtoa_r+0xb80>
 800f45e:	488b      	ldr	r0, [pc, #556]	; (800f68c <_dtoa_r+0x30c>)
 800f460:	6018      	str	r0, [r3, #0]
 800f462:	1e43      	subs	r3, r0, #1
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	e7dd      	b.n	800f424 <_dtoa_r+0xa4>
 800f468:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f46c:	aa12      	add	r2, sp, #72	; 0x48
 800f46e:	a913      	add	r1, sp, #76	; 0x4c
 800f470:	4620      	mov	r0, r4
 800f472:	f001 fdc7 	bl	8011004 <__d2b>
 800f476:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f47a:	4683      	mov	fp, r0
 800f47c:	2d00      	cmp	r5, #0
 800f47e:	d07c      	beq.n	800f57a <_dtoa_r+0x1fa>
 800f480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f482:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f48a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f48e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f492:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f49a:	4b7d      	ldr	r3, [pc, #500]	; (800f690 <_dtoa_r+0x310>)
 800f49c:	2200      	movs	r2, #0
 800f49e:	4630      	mov	r0, r6
 800f4a0:	4639      	mov	r1, r7
 800f4a2:	f7f0 fef1 	bl	8000288 <__aeabi_dsub>
 800f4a6:	a36e      	add	r3, pc, #440	; (adr r3, 800f660 <_dtoa_r+0x2e0>)
 800f4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ac:	f7f1 f8a4 	bl	80005f8 <__aeabi_dmul>
 800f4b0:	a36d      	add	r3, pc, #436	; (adr r3, 800f668 <_dtoa_r+0x2e8>)
 800f4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b6:	f7f0 fee9 	bl	800028c <__adddf3>
 800f4ba:	4606      	mov	r6, r0
 800f4bc:	4628      	mov	r0, r5
 800f4be:	460f      	mov	r7, r1
 800f4c0:	f7f1 f830 	bl	8000524 <__aeabi_i2d>
 800f4c4:	a36a      	add	r3, pc, #424	; (adr r3, 800f670 <_dtoa_r+0x2f0>)
 800f4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ca:	f7f1 f895 	bl	80005f8 <__aeabi_dmul>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	4639      	mov	r1, r7
 800f4d6:	f7f0 fed9 	bl	800028c <__adddf3>
 800f4da:	4606      	mov	r6, r0
 800f4dc:	460f      	mov	r7, r1
 800f4de:	f7f1 fb3b 	bl	8000b58 <__aeabi_d2iz>
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	4682      	mov	sl, r0
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	4639      	mov	r1, r7
 800f4ec:	f7f1 faf6 	bl	8000adc <__aeabi_dcmplt>
 800f4f0:	b148      	cbz	r0, 800f506 <_dtoa_r+0x186>
 800f4f2:	4650      	mov	r0, sl
 800f4f4:	f7f1 f816 	bl	8000524 <__aeabi_i2d>
 800f4f8:	4632      	mov	r2, r6
 800f4fa:	463b      	mov	r3, r7
 800f4fc:	f7f1 fae4 	bl	8000ac8 <__aeabi_dcmpeq>
 800f500:	b908      	cbnz	r0, 800f506 <_dtoa_r+0x186>
 800f502:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f506:	f1ba 0f16 	cmp.w	sl, #22
 800f50a:	d854      	bhi.n	800f5b6 <_dtoa_r+0x236>
 800f50c:	4b61      	ldr	r3, [pc, #388]	; (800f694 <_dtoa_r+0x314>)
 800f50e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f51a:	f7f1 fadf 	bl	8000adc <__aeabi_dcmplt>
 800f51e:	2800      	cmp	r0, #0
 800f520:	d04b      	beq.n	800f5ba <_dtoa_r+0x23a>
 800f522:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f526:	2300      	movs	r3, #0
 800f528:	930e      	str	r3, [sp, #56]	; 0x38
 800f52a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f52c:	1b5d      	subs	r5, r3, r5
 800f52e:	1e6b      	subs	r3, r5, #1
 800f530:	9304      	str	r3, [sp, #16]
 800f532:	bf43      	ittte	mi
 800f534:	2300      	movmi	r3, #0
 800f536:	f1c5 0801 	rsbmi	r8, r5, #1
 800f53a:	9304      	strmi	r3, [sp, #16]
 800f53c:	f04f 0800 	movpl.w	r8, #0
 800f540:	f1ba 0f00 	cmp.w	sl, #0
 800f544:	db3b      	blt.n	800f5be <_dtoa_r+0x23e>
 800f546:	9b04      	ldr	r3, [sp, #16]
 800f548:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f54c:	4453      	add	r3, sl
 800f54e:	9304      	str	r3, [sp, #16]
 800f550:	2300      	movs	r3, #0
 800f552:	9306      	str	r3, [sp, #24]
 800f554:	9b05      	ldr	r3, [sp, #20]
 800f556:	2b09      	cmp	r3, #9
 800f558:	d869      	bhi.n	800f62e <_dtoa_r+0x2ae>
 800f55a:	2b05      	cmp	r3, #5
 800f55c:	bfc4      	itt	gt
 800f55e:	3b04      	subgt	r3, #4
 800f560:	9305      	strgt	r3, [sp, #20]
 800f562:	9b05      	ldr	r3, [sp, #20]
 800f564:	f1a3 0302 	sub.w	r3, r3, #2
 800f568:	bfcc      	ite	gt
 800f56a:	2500      	movgt	r5, #0
 800f56c:	2501      	movle	r5, #1
 800f56e:	2b03      	cmp	r3, #3
 800f570:	d869      	bhi.n	800f646 <_dtoa_r+0x2c6>
 800f572:	e8df f003 	tbb	[pc, r3]
 800f576:	4e2c      	.short	0x4e2c
 800f578:	5a4c      	.short	0x5a4c
 800f57a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f57e:	441d      	add	r5, r3
 800f580:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f584:	2b20      	cmp	r3, #32
 800f586:	bfc1      	itttt	gt
 800f588:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f58c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f590:	fa09 f303 	lslgt.w	r3, r9, r3
 800f594:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f598:	bfda      	itte	le
 800f59a:	f1c3 0320 	rsble	r3, r3, #32
 800f59e:	fa06 f003 	lslle.w	r0, r6, r3
 800f5a2:	4318      	orrgt	r0, r3
 800f5a4:	f7f0 ffae 	bl	8000504 <__aeabi_ui2d>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f5b0:	3d01      	subs	r5, #1
 800f5b2:	9310      	str	r3, [sp, #64]	; 0x40
 800f5b4:	e771      	b.n	800f49a <_dtoa_r+0x11a>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	e7b6      	b.n	800f528 <_dtoa_r+0x1a8>
 800f5ba:	900e      	str	r0, [sp, #56]	; 0x38
 800f5bc:	e7b5      	b.n	800f52a <_dtoa_r+0x1aa>
 800f5be:	f1ca 0300 	rsb	r3, sl, #0
 800f5c2:	9306      	str	r3, [sp, #24]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	eba8 080a 	sub.w	r8, r8, sl
 800f5ca:	930d      	str	r3, [sp, #52]	; 0x34
 800f5cc:	e7c2      	b.n	800f554 <_dtoa_r+0x1d4>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	9308      	str	r3, [sp, #32]
 800f5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	dc39      	bgt.n	800f64c <_dtoa_r+0x2cc>
 800f5d8:	f04f 0901 	mov.w	r9, #1
 800f5dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f5e0:	464b      	mov	r3, r9
 800f5e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f5e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	6042      	str	r2, [r0, #4]
 800f5ec:	2204      	movs	r2, #4
 800f5ee:	f102 0614 	add.w	r6, r2, #20
 800f5f2:	429e      	cmp	r6, r3
 800f5f4:	6841      	ldr	r1, [r0, #4]
 800f5f6:	d92f      	bls.n	800f658 <_dtoa_r+0x2d8>
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f001 f91b 	bl	8010834 <_Balloc>
 800f5fe:	9000      	str	r0, [sp, #0]
 800f600:	2800      	cmp	r0, #0
 800f602:	d14b      	bne.n	800f69c <_dtoa_r+0x31c>
 800f604:	4b24      	ldr	r3, [pc, #144]	; (800f698 <_dtoa_r+0x318>)
 800f606:	4602      	mov	r2, r0
 800f608:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f60c:	e6d1      	b.n	800f3b2 <_dtoa_r+0x32>
 800f60e:	2301      	movs	r3, #1
 800f610:	e7de      	b.n	800f5d0 <_dtoa_r+0x250>
 800f612:	2300      	movs	r3, #0
 800f614:	9308      	str	r3, [sp, #32]
 800f616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f618:	eb0a 0903 	add.w	r9, sl, r3
 800f61c:	f109 0301 	add.w	r3, r9, #1
 800f620:	2b01      	cmp	r3, #1
 800f622:	9301      	str	r3, [sp, #4]
 800f624:	bfb8      	it	lt
 800f626:	2301      	movlt	r3, #1
 800f628:	e7dd      	b.n	800f5e6 <_dtoa_r+0x266>
 800f62a:	2301      	movs	r3, #1
 800f62c:	e7f2      	b.n	800f614 <_dtoa_r+0x294>
 800f62e:	2501      	movs	r5, #1
 800f630:	2300      	movs	r3, #0
 800f632:	9305      	str	r3, [sp, #20]
 800f634:	9508      	str	r5, [sp, #32]
 800f636:	f04f 39ff 	mov.w	r9, #4294967295
 800f63a:	2200      	movs	r2, #0
 800f63c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f640:	2312      	movs	r3, #18
 800f642:	9209      	str	r2, [sp, #36]	; 0x24
 800f644:	e7cf      	b.n	800f5e6 <_dtoa_r+0x266>
 800f646:	2301      	movs	r3, #1
 800f648:	9308      	str	r3, [sp, #32]
 800f64a:	e7f4      	b.n	800f636 <_dtoa_r+0x2b6>
 800f64c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f650:	f8cd 9004 	str.w	r9, [sp, #4]
 800f654:	464b      	mov	r3, r9
 800f656:	e7c6      	b.n	800f5e6 <_dtoa_r+0x266>
 800f658:	3101      	adds	r1, #1
 800f65a:	6041      	str	r1, [r0, #4]
 800f65c:	0052      	lsls	r2, r2, #1
 800f65e:	e7c6      	b.n	800f5ee <_dtoa_r+0x26e>
 800f660:	636f4361 	.word	0x636f4361
 800f664:	3fd287a7 	.word	0x3fd287a7
 800f668:	8b60c8b3 	.word	0x8b60c8b3
 800f66c:	3fc68a28 	.word	0x3fc68a28
 800f670:	509f79fb 	.word	0x509f79fb
 800f674:	3fd34413 	.word	0x3fd34413
 800f678:	0801389e 	.word	0x0801389e
 800f67c:	080138b5 	.word	0x080138b5
 800f680:	7ff00000 	.word	0x7ff00000
 800f684:	0801389a 	.word	0x0801389a
 800f688:	08013891 	.word	0x08013891
 800f68c:	08013711 	.word	0x08013711
 800f690:	3ff80000 	.word	0x3ff80000
 800f694:	08013a30 	.word	0x08013a30
 800f698:	08013914 	.word	0x08013914
 800f69c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f69e:	9a00      	ldr	r2, [sp, #0]
 800f6a0:	601a      	str	r2, [r3, #0]
 800f6a2:	9b01      	ldr	r3, [sp, #4]
 800f6a4:	2b0e      	cmp	r3, #14
 800f6a6:	f200 80ad 	bhi.w	800f804 <_dtoa_r+0x484>
 800f6aa:	2d00      	cmp	r5, #0
 800f6ac:	f000 80aa 	beq.w	800f804 <_dtoa_r+0x484>
 800f6b0:	f1ba 0f00 	cmp.w	sl, #0
 800f6b4:	dd36      	ble.n	800f724 <_dtoa_r+0x3a4>
 800f6b6:	4ac3      	ldr	r2, [pc, #780]	; (800f9c4 <_dtoa_r+0x644>)
 800f6b8:	f00a 030f 	and.w	r3, sl, #15
 800f6bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f6c0:	ed93 7b00 	vldr	d7, [r3]
 800f6c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f6c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f6cc:	eeb0 8a47 	vmov.f32	s16, s14
 800f6d0:	eef0 8a67 	vmov.f32	s17, s15
 800f6d4:	d016      	beq.n	800f704 <_dtoa_r+0x384>
 800f6d6:	4bbc      	ldr	r3, [pc, #752]	; (800f9c8 <_dtoa_r+0x648>)
 800f6d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f6dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f6e0:	f7f1 f8b4 	bl	800084c <__aeabi_ddiv>
 800f6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6e8:	f007 070f 	and.w	r7, r7, #15
 800f6ec:	2503      	movs	r5, #3
 800f6ee:	4eb6      	ldr	r6, [pc, #728]	; (800f9c8 <_dtoa_r+0x648>)
 800f6f0:	b957      	cbnz	r7, 800f708 <_dtoa_r+0x388>
 800f6f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6f6:	ec53 2b18 	vmov	r2, r3, d8
 800f6fa:	f7f1 f8a7 	bl	800084c <__aeabi_ddiv>
 800f6fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f702:	e029      	b.n	800f758 <_dtoa_r+0x3d8>
 800f704:	2502      	movs	r5, #2
 800f706:	e7f2      	b.n	800f6ee <_dtoa_r+0x36e>
 800f708:	07f9      	lsls	r1, r7, #31
 800f70a:	d508      	bpl.n	800f71e <_dtoa_r+0x39e>
 800f70c:	ec51 0b18 	vmov	r0, r1, d8
 800f710:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f714:	f7f0 ff70 	bl	80005f8 <__aeabi_dmul>
 800f718:	ec41 0b18 	vmov	d8, r0, r1
 800f71c:	3501      	adds	r5, #1
 800f71e:	107f      	asrs	r7, r7, #1
 800f720:	3608      	adds	r6, #8
 800f722:	e7e5      	b.n	800f6f0 <_dtoa_r+0x370>
 800f724:	f000 80a6 	beq.w	800f874 <_dtoa_r+0x4f4>
 800f728:	f1ca 0600 	rsb	r6, sl, #0
 800f72c:	4ba5      	ldr	r3, [pc, #660]	; (800f9c4 <_dtoa_r+0x644>)
 800f72e:	4fa6      	ldr	r7, [pc, #664]	; (800f9c8 <_dtoa_r+0x648>)
 800f730:	f006 020f 	and.w	r2, r6, #15
 800f734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f740:	f7f0 ff5a 	bl	80005f8 <__aeabi_dmul>
 800f744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f748:	1136      	asrs	r6, r6, #4
 800f74a:	2300      	movs	r3, #0
 800f74c:	2502      	movs	r5, #2
 800f74e:	2e00      	cmp	r6, #0
 800f750:	f040 8085 	bne.w	800f85e <_dtoa_r+0x4de>
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1d2      	bne.n	800f6fe <_dtoa_r+0x37e>
 800f758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f000 808c 	beq.w	800f878 <_dtoa_r+0x4f8>
 800f760:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f764:	4b99      	ldr	r3, [pc, #612]	; (800f9cc <_dtoa_r+0x64c>)
 800f766:	2200      	movs	r2, #0
 800f768:	4630      	mov	r0, r6
 800f76a:	4639      	mov	r1, r7
 800f76c:	f7f1 f9b6 	bl	8000adc <__aeabi_dcmplt>
 800f770:	2800      	cmp	r0, #0
 800f772:	f000 8081 	beq.w	800f878 <_dtoa_r+0x4f8>
 800f776:	9b01      	ldr	r3, [sp, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d07d      	beq.n	800f878 <_dtoa_r+0x4f8>
 800f77c:	f1b9 0f00 	cmp.w	r9, #0
 800f780:	dd3c      	ble.n	800f7fc <_dtoa_r+0x47c>
 800f782:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f786:	9307      	str	r3, [sp, #28]
 800f788:	2200      	movs	r2, #0
 800f78a:	4b91      	ldr	r3, [pc, #580]	; (800f9d0 <_dtoa_r+0x650>)
 800f78c:	4630      	mov	r0, r6
 800f78e:	4639      	mov	r1, r7
 800f790:	f7f0 ff32 	bl	80005f8 <__aeabi_dmul>
 800f794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f798:	3501      	adds	r5, #1
 800f79a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f79e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	f7f0 febe 	bl	8000524 <__aeabi_i2d>
 800f7a8:	4632      	mov	r2, r6
 800f7aa:	463b      	mov	r3, r7
 800f7ac:	f7f0 ff24 	bl	80005f8 <__aeabi_dmul>
 800f7b0:	4b88      	ldr	r3, [pc, #544]	; (800f9d4 <_dtoa_r+0x654>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f7f0 fd6a 	bl	800028c <__adddf3>
 800f7b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7c0:	9303      	str	r3, [sp, #12]
 800f7c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d15c      	bne.n	800f882 <_dtoa_r+0x502>
 800f7c8:	4b83      	ldr	r3, [pc, #524]	; (800f9d8 <_dtoa_r+0x658>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	4630      	mov	r0, r6
 800f7ce:	4639      	mov	r1, r7
 800f7d0:	f7f0 fd5a 	bl	8000288 <__aeabi_dsub>
 800f7d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7d8:	4606      	mov	r6, r0
 800f7da:	460f      	mov	r7, r1
 800f7dc:	f7f1 f99c 	bl	8000b18 <__aeabi_dcmpgt>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	f040 8296 	bne.w	800fd12 <_dtoa_r+0x992>
 800f7e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7f0:	4639      	mov	r1, r7
 800f7f2:	f7f1 f973 	bl	8000adc <__aeabi_dcmplt>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	f040 8288 	bne.w	800fd0c <_dtoa_r+0x98c>
 800f7fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f800:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f806:	2b00      	cmp	r3, #0
 800f808:	f2c0 8158 	blt.w	800fabc <_dtoa_r+0x73c>
 800f80c:	f1ba 0f0e 	cmp.w	sl, #14
 800f810:	f300 8154 	bgt.w	800fabc <_dtoa_r+0x73c>
 800f814:	4b6b      	ldr	r3, [pc, #428]	; (800f9c4 <_dtoa_r+0x644>)
 800f816:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f81a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f820:	2b00      	cmp	r3, #0
 800f822:	f280 80e3 	bge.w	800f9ec <_dtoa_r+0x66c>
 800f826:	9b01      	ldr	r3, [sp, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f300 80df 	bgt.w	800f9ec <_dtoa_r+0x66c>
 800f82e:	f040 826d 	bne.w	800fd0c <_dtoa_r+0x98c>
 800f832:	4b69      	ldr	r3, [pc, #420]	; (800f9d8 <_dtoa_r+0x658>)
 800f834:	2200      	movs	r2, #0
 800f836:	4640      	mov	r0, r8
 800f838:	4649      	mov	r1, r9
 800f83a:	f7f0 fedd 	bl	80005f8 <__aeabi_dmul>
 800f83e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f842:	f7f1 f95f 	bl	8000b04 <__aeabi_dcmpge>
 800f846:	9e01      	ldr	r6, [sp, #4]
 800f848:	4637      	mov	r7, r6
 800f84a:	2800      	cmp	r0, #0
 800f84c:	f040 8243 	bne.w	800fcd6 <_dtoa_r+0x956>
 800f850:	9d00      	ldr	r5, [sp, #0]
 800f852:	2331      	movs	r3, #49	; 0x31
 800f854:	f805 3b01 	strb.w	r3, [r5], #1
 800f858:	f10a 0a01 	add.w	sl, sl, #1
 800f85c:	e23f      	b.n	800fcde <_dtoa_r+0x95e>
 800f85e:	07f2      	lsls	r2, r6, #31
 800f860:	d505      	bpl.n	800f86e <_dtoa_r+0x4ee>
 800f862:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f866:	f7f0 fec7 	bl	80005f8 <__aeabi_dmul>
 800f86a:	3501      	adds	r5, #1
 800f86c:	2301      	movs	r3, #1
 800f86e:	1076      	asrs	r6, r6, #1
 800f870:	3708      	adds	r7, #8
 800f872:	e76c      	b.n	800f74e <_dtoa_r+0x3ce>
 800f874:	2502      	movs	r5, #2
 800f876:	e76f      	b.n	800f758 <_dtoa_r+0x3d8>
 800f878:	9b01      	ldr	r3, [sp, #4]
 800f87a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f87e:	930c      	str	r3, [sp, #48]	; 0x30
 800f880:	e78d      	b.n	800f79e <_dtoa_r+0x41e>
 800f882:	9900      	ldr	r1, [sp, #0]
 800f884:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f888:	4b4e      	ldr	r3, [pc, #312]	; (800f9c4 <_dtoa_r+0x644>)
 800f88a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f88e:	4401      	add	r1, r0
 800f890:	9102      	str	r1, [sp, #8]
 800f892:	9908      	ldr	r1, [sp, #32]
 800f894:	eeb0 8a47 	vmov.f32	s16, s14
 800f898:	eef0 8a67 	vmov.f32	s17, s15
 800f89c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f8a4:	2900      	cmp	r1, #0
 800f8a6:	d045      	beq.n	800f934 <_dtoa_r+0x5b4>
 800f8a8:	494c      	ldr	r1, [pc, #304]	; (800f9dc <_dtoa_r+0x65c>)
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	f7f0 ffce 	bl	800084c <__aeabi_ddiv>
 800f8b0:	ec53 2b18 	vmov	r2, r3, d8
 800f8b4:	f7f0 fce8 	bl	8000288 <__aeabi_dsub>
 800f8b8:	9d00      	ldr	r5, [sp, #0]
 800f8ba:	ec41 0b18 	vmov	d8, r0, r1
 800f8be:	4639      	mov	r1, r7
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f7f1 f949 	bl	8000b58 <__aeabi_d2iz>
 800f8c6:	900c      	str	r0, [sp, #48]	; 0x30
 800f8c8:	f7f0 fe2c 	bl	8000524 <__aeabi_i2d>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	f7f0 fcd8 	bl	8000288 <__aeabi_dsub>
 800f8d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8da:	3330      	adds	r3, #48	; 0x30
 800f8dc:	f805 3b01 	strb.w	r3, [r5], #1
 800f8e0:	ec53 2b18 	vmov	r2, r3, d8
 800f8e4:	4606      	mov	r6, r0
 800f8e6:	460f      	mov	r7, r1
 800f8e8:	f7f1 f8f8 	bl	8000adc <__aeabi_dcmplt>
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	d165      	bne.n	800f9bc <_dtoa_r+0x63c>
 800f8f0:	4632      	mov	r2, r6
 800f8f2:	463b      	mov	r3, r7
 800f8f4:	4935      	ldr	r1, [pc, #212]	; (800f9cc <_dtoa_r+0x64c>)
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	f7f0 fcc6 	bl	8000288 <__aeabi_dsub>
 800f8fc:	ec53 2b18 	vmov	r2, r3, d8
 800f900:	f7f1 f8ec 	bl	8000adc <__aeabi_dcmplt>
 800f904:	2800      	cmp	r0, #0
 800f906:	f040 80b9 	bne.w	800fa7c <_dtoa_r+0x6fc>
 800f90a:	9b02      	ldr	r3, [sp, #8]
 800f90c:	429d      	cmp	r5, r3
 800f90e:	f43f af75 	beq.w	800f7fc <_dtoa_r+0x47c>
 800f912:	4b2f      	ldr	r3, [pc, #188]	; (800f9d0 <_dtoa_r+0x650>)
 800f914:	ec51 0b18 	vmov	r0, r1, d8
 800f918:	2200      	movs	r2, #0
 800f91a:	f7f0 fe6d 	bl	80005f8 <__aeabi_dmul>
 800f91e:	4b2c      	ldr	r3, [pc, #176]	; (800f9d0 <_dtoa_r+0x650>)
 800f920:	ec41 0b18 	vmov	d8, r0, r1
 800f924:	2200      	movs	r2, #0
 800f926:	4630      	mov	r0, r6
 800f928:	4639      	mov	r1, r7
 800f92a:	f7f0 fe65 	bl	80005f8 <__aeabi_dmul>
 800f92e:	4606      	mov	r6, r0
 800f930:	460f      	mov	r7, r1
 800f932:	e7c4      	b.n	800f8be <_dtoa_r+0x53e>
 800f934:	ec51 0b17 	vmov	r0, r1, d7
 800f938:	f7f0 fe5e 	bl	80005f8 <__aeabi_dmul>
 800f93c:	9b02      	ldr	r3, [sp, #8]
 800f93e:	9d00      	ldr	r5, [sp, #0]
 800f940:	930c      	str	r3, [sp, #48]	; 0x30
 800f942:	ec41 0b18 	vmov	d8, r0, r1
 800f946:	4639      	mov	r1, r7
 800f948:	4630      	mov	r0, r6
 800f94a:	f7f1 f905 	bl	8000b58 <__aeabi_d2iz>
 800f94e:	9011      	str	r0, [sp, #68]	; 0x44
 800f950:	f7f0 fde8 	bl	8000524 <__aeabi_i2d>
 800f954:	4602      	mov	r2, r0
 800f956:	460b      	mov	r3, r1
 800f958:	4630      	mov	r0, r6
 800f95a:	4639      	mov	r1, r7
 800f95c:	f7f0 fc94 	bl	8000288 <__aeabi_dsub>
 800f960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f962:	3330      	adds	r3, #48	; 0x30
 800f964:	f805 3b01 	strb.w	r3, [r5], #1
 800f968:	9b02      	ldr	r3, [sp, #8]
 800f96a:	429d      	cmp	r5, r3
 800f96c:	4606      	mov	r6, r0
 800f96e:	460f      	mov	r7, r1
 800f970:	f04f 0200 	mov.w	r2, #0
 800f974:	d134      	bne.n	800f9e0 <_dtoa_r+0x660>
 800f976:	4b19      	ldr	r3, [pc, #100]	; (800f9dc <_dtoa_r+0x65c>)
 800f978:	ec51 0b18 	vmov	r0, r1, d8
 800f97c:	f7f0 fc86 	bl	800028c <__adddf3>
 800f980:	4602      	mov	r2, r0
 800f982:	460b      	mov	r3, r1
 800f984:	4630      	mov	r0, r6
 800f986:	4639      	mov	r1, r7
 800f988:	f7f1 f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d175      	bne.n	800fa7c <_dtoa_r+0x6fc>
 800f990:	ec53 2b18 	vmov	r2, r3, d8
 800f994:	4911      	ldr	r1, [pc, #68]	; (800f9dc <_dtoa_r+0x65c>)
 800f996:	2000      	movs	r0, #0
 800f998:	f7f0 fc76 	bl	8000288 <__aeabi_dsub>
 800f99c:	4602      	mov	r2, r0
 800f99e:	460b      	mov	r3, r1
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	f7f1 f89a 	bl	8000adc <__aeabi_dcmplt>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	f43f af27 	beq.w	800f7fc <_dtoa_r+0x47c>
 800f9ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f9b0:	1e6b      	subs	r3, r5, #1
 800f9b2:	930c      	str	r3, [sp, #48]	; 0x30
 800f9b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f9b8:	2b30      	cmp	r3, #48	; 0x30
 800f9ba:	d0f8      	beq.n	800f9ae <_dtoa_r+0x62e>
 800f9bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f9c0:	e04a      	b.n	800fa58 <_dtoa_r+0x6d8>
 800f9c2:	bf00      	nop
 800f9c4:	08013a30 	.word	0x08013a30
 800f9c8:	08013a08 	.word	0x08013a08
 800f9cc:	3ff00000 	.word	0x3ff00000
 800f9d0:	40240000 	.word	0x40240000
 800f9d4:	401c0000 	.word	0x401c0000
 800f9d8:	40140000 	.word	0x40140000
 800f9dc:	3fe00000 	.word	0x3fe00000
 800f9e0:	4baf      	ldr	r3, [pc, #700]	; (800fca0 <_dtoa_r+0x920>)
 800f9e2:	f7f0 fe09 	bl	80005f8 <__aeabi_dmul>
 800f9e6:	4606      	mov	r6, r0
 800f9e8:	460f      	mov	r7, r1
 800f9ea:	e7ac      	b.n	800f946 <_dtoa_r+0x5c6>
 800f9ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f9f0:	9d00      	ldr	r5, [sp, #0]
 800f9f2:	4642      	mov	r2, r8
 800f9f4:	464b      	mov	r3, r9
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	4639      	mov	r1, r7
 800f9fa:	f7f0 ff27 	bl	800084c <__aeabi_ddiv>
 800f9fe:	f7f1 f8ab 	bl	8000b58 <__aeabi_d2iz>
 800fa02:	9002      	str	r0, [sp, #8]
 800fa04:	f7f0 fd8e 	bl	8000524 <__aeabi_i2d>
 800fa08:	4642      	mov	r2, r8
 800fa0a:	464b      	mov	r3, r9
 800fa0c:	f7f0 fdf4 	bl	80005f8 <__aeabi_dmul>
 800fa10:	4602      	mov	r2, r0
 800fa12:	460b      	mov	r3, r1
 800fa14:	4630      	mov	r0, r6
 800fa16:	4639      	mov	r1, r7
 800fa18:	f7f0 fc36 	bl	8000288 <__aeabi_dsub>
 800fa1c:	9e02      	ldr	r6, [sp, #8]
 800fa1e:	9f01      	ldr	r7, [sp, #4]
 800fa20:	3630      	adds	r6, #48	; 0x30
 800fa22:	f805 6b01 	strb.w	r6, [r5], #1
 800fa26:	9e00      	ldr	r6, [sp, #0]
 800fa28:	1bae      	subs	r6, r5, r6
 800fa2a:	42b7      	cmp	r7, r6
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	d137      	bne.n	800faa2 <_dtoa_r+0x722>
 800fa32:	f7f0 fc2b 	bl	800028c <__adddf3>
 800fa36:	4642      	mov	r2, r8
 800fa38:	464b      	mov	r3, r9
 800fa3a:	4606      	mov	r6, r0
 800fa3c:	460f      	mov	r7, r1
 800fa3e:	f7f1 f86b 	bl	8000b18 <__aeabi_dcmpgt>
 800fa42:	b9c8      	cbnz	r0, 800fa78 <_dtoa_r+0x6f8>
 800fa44:	4642      	mov	r2, r8
 800fa46:	464b      	mov	r3, r9
 800fa48:	4630      	mov	r0, r6
 800fa4a:	4639      	mov	r1, r7
 800fa4c:	f7f1 f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa50:	b110      	cbz	r0, 800fa58 <_dtoa_r+0x6d8>
 800fa52:	9b02      	ldr	r3, [sp, #8]
 800fa54:	07d9      	lsls	r1, r3, #31
 800fa56:	d40f      	bmi.n	800fa78 <_dtoa_r+0x6f8>
 800fa58:	4620      	mov	r0, r4
 800fa5a:	4659      	mov	r1, fp
 800fa5c:	f000 ff2a 	bl	80108b4 <_Bfree>
 800fa60:	2300      	movs	r3, #0
 800fa62:	702b      	strb	r3, [r5, #0]
 800fa64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa66:	f10a 0001 	add.w	r0, sl, #1
 800fa6a:	6018      	str	r0, [r3, #0]
 800fa6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f43f acd8 	beq.w	800f424 <_dtoa_r+0xa4>
 800fa74:	601d      	str	r5, [r3, #0]
 800fa76:	e4d5      	b.n	800f424 <_dtoa_r+0xa4>
 800fa78:	f8cd a01c 	str.w	sl, [sp, #28]
 800fa7c:	462b      	mov	r3, r5
 800fa7e:	461d      	mov	r5, r3
 800fa80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa84:	2a39      	cmp	r2, #57	; 0x39
 800fa86:	d108      	bne.n	800fa9a <_dtoa_r+0x71a>
 800fa88:	9a00      	ldr	r2, [sp, #0]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d1f7      	bne.n	800fa7e <_dtoa_r+0x6fe>
 800fa8e:	9a07      	ldr	r2, [sp, #28]
 800fa90:	9900      	ldr	r1, [sp, #0]
 800fa92:	3201      	adds	r2, #1
 800fa94:	9207      	str	r2, [sp, #28]
 800fa96:	2230      	movs	r2, #48	; 0x30
 800fa98:	700a      	strb	r2, [r1, #0]
 800fa9a:	781a      	ldrb	r2, [r3, #0]
 800fa9c:	3201      	adds	r2, #1
 800fa9e:	701a      	strb	r2, [r3, #0]
 800faa0:	e78c      	b.n	800f9bc <_dtoa_r+0x63c>
 800faa2:	4b7f      	ldr	r3, [pc, #508]	; (800fca0 <_dtoa_r+0x920>)
 800faa4:	2200      	movs	r2, #0
 800faa6:	f7f0 fda7 	bl	80005f8 <__aeabi_dmul>
 800faaa:	2200      	movs	r2, #0
 800faac:	2300      	movs	r3, #0
 800faae:	4606      	mov	r6, r0
 800fab0:	460f      	mov	r7, r1
 800fab2:	f7f1 f809 	bl	8000ac8 <__aeabi_dcmpeq>
 800fab6:	2800      	cmp	r0, #0
 800fab8:	d09b      	beq.n	800f9f2 <_dtoa_r+0x672>
 800faba:	e7cd      	b.n	800fa58 <_dtoa_r+0x6d8>
 800fabc:	9a08      	ldr	r2, [sp, #32]
 800fabe:	2a00      	cmp	r2, #0
 800fac0:	f000 80c4 	beq.w	800fc4c <_dtoa_r+0x8cc>
 800fac4:	9a05      	ldr	r2, [sp, #20]
 800fac6:	2a01      	cmp	r2, #1
 800fac8:	f300 80a8 	bgt.w	800fc1c <_dtoa_r+0x89c>
 800facc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800face:	2a00      	cmp	r2, #0
 800fad0:	f000 80a0 	beq.w	800fc14 <_dtoa_r+0x894>
 800fad4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fad8:	9e06      	ldr	r6, [sp, #24]
 800fada:	4645      	mov	r5, r8
 800fadc:	9a04      	ldr	r2, [sp, #16]
 800fade:	2101      	movs	r1, #1
 800fae0:	441a      	add	r2, r3
 800fae2:	4620      	mov	r0, r4
 800fae4:	4498      	add	r8, r3
 800fae6:	9204      	str	r2, [sp, #16]
 800fae8:	f000 ffea 	bl	8010ac0 <__i2b>
 800faec:	4607      	mov	r7, r0
 800faee:	2d00      	cmp	r5, #0
 800faf0:	dd0b      	ble.n	800fb0a <_dtoa_r+0x78a>
 800faf2:	9b04      	ldr	r3, [sp, #16]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	dd08      	ble.n	800fb0a <_dtoa_r+0x78a>
 800faf8:	42ab      	cmp	r3, r5
 800fafa:	9a04      	ldr	r2, [sp, #16]
 800fafc:	bfa8      	it	ge
 800fafe:	462b      	movge	r3, r5
 800fb00:	eba8 0803 	sub.w	r8, r8, r3
 800fb04:	1aed      	subs	r5, r5, r3
 800fb06:	1ad3      	subs	r3, r2, r3
 800fb08:	9304      	str	r3, [sp, #16]
 800fb0a:	9b06      	ldr	r3, [sp, #24]
 800fb0c:	b1fb      	cbz	r3, 800fb4e <_dtoa_r+0x7ce>
 800fb0e:	9b08      	ldr	r3, [sp, #32]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 809f 	beq.w	800fc54 <_dtoa_r+0x8d4>
 800fb16:	2e00      	cmp	r6, #0
 800fb18:	dd11      	ble.n	800fb3e <_dtoa_r+0x7be>
 800fb1a:	4639      	mov	r1, r7
 800fb1c:	4632      	mov	r2, r6
 800fb1e:	4620      	mov	r0, r4
 800fb20:	f001 f88a 	bl	8010c38 <__pow5mult>
 800fb24:	465a      	mov	r2, fp
 800fb26:	4601      	mov	r1, r0
 800fb28:	4607      	mov	r7, r0
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f000 ffde 	bl	8010aec <__multiply>
 800fb30:	4659      	mov	r1, fp
 800fb32:	9007      	str	r0, [sp, #28]
 800fb34:	4620      	mov	r0, r4
 800fb36:	f000 febd 	bl	80108b4 <_Bfree>
 800fb3a:	9b07      	ldr	r3, [sp, #28]
 800fb3c:	469b      	mov	fp, r3
 800fb3e:	9b06      	ldr	r3, [sp, #24]
 800fb40:	1b9a      	subs	r2, r3, r6
 800fb42:	d004      	beq.n	800fb4e <_dtoa_r+0x7ce>
 800fb44:	4659      	mov	r1, fp
 800fb46:	4620      	mov	r0, r4
 800fb48:	f001 f876 	bl	8010c38 <__pow5mult>
 800fb4c:	4683      	mov	fp, r0
 800fb4e:	2101      	movs	r1, #1
 800fb50:	4620      	mov	r0, r4
 800fb52:	f000 ffb5 	bl	8010ac0 <__i2b>
 800fb56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	dd7c      	ble.n	800fc58 <_dtoa_r+0x8d8>
 800fb5e:	461a      	mov	r2, r3
 800fb60:	4601      	mov	r1, r0
 800fb62:	4620      	mov	r0, r4
 800fb64:	f001 f868 	bl	8010c38 <__pow5mult>
 800fb68:	9b05      	ldr	r3, [sp, #20]
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	4606      	mov	r6, r0
 800fb6e:	dd76      	ble.n	800fc5e <_dtoa_r+0x8de>
 800fb70:	2300      	movs	r3, #0
 800fb72:	9306      	str	r3, [sp, #24]
 800fb74:	6933      	ldr	r3, [r6, #16]
 800fb76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fb7a:	6918      	ldr	r0, [r3, #16]
 800fb7c:	f000 ff50 	bl	8010a20 <__hi0bits>
 800fb80:	f1c0 0020 	rsb	r0, r0, #32
 800fb84:	9b04      	ldr	r3, [sp, #16]
 800fb86:	4418      	add	r0, r3
 800fb88:	f010 001f 	ands.w	r0, r0, #31
 800fb8c:	f000 8086 	beq.w	800fc9c <_dtoa_r+0x91c>
 800fb90:	f1c0 0320 	rsb	r3, r0, #32
 800fb94:	2b04      	cmp	r3, #4
 800fb96:	dd7f      	ble.n	800fc98 <_dtoa_r+0x918>
 800fb98:	f1c0 001c 	rsb	r0, r0, #28
 800fb9c:	9b04      	ldr	r3, [sp, #16]
 800fb9e:	4403      	add	r3, r0
 800fba0:	4480      	add	r8, r0
 800fba2:	4405      	add	r5, r0
 800fba4:	9304      	str	r3, [sp, #16]
 800fba6:	f1b8 0f00 	cmp.w	r8, #0
 800fbaa:	dd05      	ble.n	800fbb8 <_dtoa_r+0x838>
 800fbac:	4659      	mov	r1, fp
 800fbae:	4642      	mov	r2, r8
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	f001 f89b 	bl	8010cec <__lshift>
 800fbb6:	4683      	mov	fp, r0
 800fbb8:	9b04      	ldr	r3, [sp, #16]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	dd05      	ble.n	800fbca <_dtoa_r+0x84a>
 800fbbe:	4631      	mov	r1, r6
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f001 f892 	bl	8010cec <__lshift>
 800fbc8:	4606      	mov	r6, r0
 800fbca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d069      	beq.n	800fca4 <_dtoa_r+0x924>
 800fbd0:	4631      	mov	r1, r6
 800fbd2:	4658      	mov	r0, fp
 800fbd4:	f001 f8f6 	bl	8010dc4 <__mcmp>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	da63      	bge.n	800fca4 <_dtoa_r+0x924>
 800fbdc:	2300      	movs	r3, #0
 800fbde:	4659      	mov	r1, fp
 800fbe0:	220a      	movs	r2, #10
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	f000 fe88 	bl	80108f8 <__multadd>
 800fbe8:	9b08      	ldr	r3, [sp, #32]
 800fbea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbee:	4683      	mov	fp, r0
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f000 818f 	beq.w	800ff14 <_dtoa_r+0xb94>
 800fbf6:	4639      	mov	r1, r7
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	220a      	movs	r2, #10
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f000 fe7b 	bl	80108f8 <__multadd>
 800fc02:	f1b9 0f00 	cmp.w	r9, #0
 800fc06:	4607      	mov	r7, r0
 800fc08:	f300 808e 	bgt.w	800fd28 <_dtoa_r+0x9a8>
 800fc0c:	9b05      	ldr	r3, [sp, #20]
 800fc0e:	2b02      	cmp	r3, #2
 800fc10:	dc50      	bgt.n	800fcb4 <_dtoa_r+0x934>
 800fc12:	e089      	b.n	800fd28 <_dtoa_r+0x9a8>
 800fc14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fc1a:	e75d      	b.n	800fad8 <_dtoa_r+0x758>
 800fc1c:	9b01      	ldr	r3, [sp, #4]
 800fc1e:	1e5e      	subs	r6, r3, #1
 800fc20:	9b06      	ldr	r3, [sp, #24]
 800fc22:	42b3      	cmp	r3, r6
 800fc24:	bfbf      	itttt	lt
 800fc26:	9b06      	ldrlt	r3, [sp, #24]
 800fc28:	9606      	strlt	r6, [sp, #24]
 800fc2a:	1af2      	sublt	r2, r6, r3
 800fc2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fc2e:	bfb6      	itet	lt
 800fc30:	189b      	addlt	r3, r3, r2
 800fc32:	1b9e      	subge	r6, r3, r6
 800fc34:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fc36:	9b01      	ldr	r3, [sp, #4]
 800fc38:	bfb8      	it	lt
 800fc3a:	2600      	movlt	r6, #0
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	bfb5      	itete	lt
 800fc40:	eba8 0503 	sublt.w	r5, r8, r3
 800fc44:	9b01      	ldrge	r3, [sp, #4]
 800fc46:	2300      	movlt	r3, #0
 800fc48:	4645      	movge	r5, r8
 800fc4a:	e747      	b.n	800fadc <_dtoa_r+0x75c>
 800fc4c:	9e06      	ldr	r6, [sp, #24]
 800fc4e:	9f08      	ldr	r7, [sp, #32]
 800fc50:	4645      	mov	r5, r8
 800fc52:	e74c      	b.n	800faee <_dtoa_r+0x76e>
 800fc54:	9a06      	ldr	r2, [sp, #24]
 800fc56:	e775      	b.n	800fb44 <_dtoa_r+0x7c4>
 800fc58:	9b05      	ldr	r3, [sp, #20]
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	dc18      	bgt.n	800fc90 <_dtoa_r+0x910>
 800fc5e:	9b02      	ldr	r3, [sp, #8]
 800fc60:	b9b3      	cbnz	r3, 800fc90 <_dtoa_r+0x910>
 800fc62:	9b03      	ldr	r3, [sp, #12]
 800fc64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc68:	b9a3      	cbnz	r3, 800fc94 <_dtoa_r+0x914>
 800fc6a:	9b03      	ldr	r3, [sp, #12]
 800fc6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc70:	0d1b      	lsrs	r3, r3, #20
 800fc72:	051b      	lsls	r3, r3, #20
 800fc74:	b12b      	cbz	r3, 800fc82 <_dtoa_r+0x902>
 800fc76:	9b04      	ldr	r3, [sp, #16]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	9304      	str	r3, [sp, #16]
 800fc7c:	f108 0801 	add.w	r8, r8, #1
 800fc80:	2301      	movs	r3, #1
 800fc82:	9306      	str	r3, [sp, #24]
 800fc84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	f47f af74 	bne.w	800fb74 <_dtoa_r+0x7f4>
 800fc8c:	2001      	movs	r0, #1
 800fc8e:	e779      	b.n	800fb84 <_dtoa_r+0x804>
 800fc90:	2300      	movs	r3, #0
 800fc92:	e7f6      	b.n	800fc82 <_dtoa_r+0x902>
 800fc94:	9b02      	ldr	r3, [sp, #8]
 800fc96:	e7f4      	b.n	800fc82 <_dtoa_r+0x902>
 800fc98:	d085      	beq.n	800fba6 <_dtoa_r+0x826>
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	301c      	adds	r0, #28
 800fc9e:	e77d      	b.n	800fb9c <_dtoa_r+0x81c>
 800fca0:	40240000 	.word	0x40240000
 800fca4:	9b01      	ldr	r3, [sp, #4]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	dc38      	bgt.n	800fd1c <_dtoa_r+0x99c>
 800fcaa:	9b05      	ldr	r3, [sp, #20]
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	dd35      	ble.n	800fd1c <_dtoa_r+0x99c>
 800fcb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fcb4:	f1b9 0f00 	cmp.w	r9, #0
 800fcb8:	d10d      	bne.n	800fcd6 <_dtoa_r+0x956>
 800fcba:	4631      	mov	r1, r6
 800fcbc:	464b      	mov	r3, r9
 800fcbe:	2205      	movs	r2, #5
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f000 fe19 	bl	80108f8 <__multadd>
 800fcc6:	4601      	mov	r1, r0
 800fcc8:	4606      	mov	r6, r0
 800fcca:	4658      	mov	r0, fp
 800fccc:	f001 f87a 	bl	8010dc4 <__mcmp>
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	f73f adbd 	bgt.w	800f850 <_dtoa_r+0x4d0>
 800fcd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcd8:	9d00      	ldr	r5, [sp, #0]
 800fcda:	ea6f 0a03 	mvn.w	sl, r3
 800fcde:	f04f 0800 	mov.w	r8, #0
 800fce2:	4631      	mov	r1, r6
 800fce4:	4620      	mov	r0, r4
 800fce6:	f000 fde5 	bl	80108b4 <_Bfree>
 800fcea:	2f00      	cmp	r7, #0
 800fcec:	f43f aeb4 	beq.w	800fa58 <_dtoa_r+0x6d8>
 800fcf0:	f1b8 0f00 	cmp.w	r8, #0
 800fcf4:	d005      	beq.n	800fd02 <_dtoa_r+0x982>
 800fcf6:	45b8      	cmp	r8, r7
 800fcf8:	d003      	beq.n	800fd02 <_dtoa_r+0x982>
 800fcfa:	4641      	mov	r1, r8
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	f000 fdd9 	bl	80108b4 <_Bfree>
 800fd02:	4639      	mov	r1, r7
 800fd04:	4620      	mov	r0, r4
 800fd06:	f000 fdd5 	bl	80108b4 <_Bfree>
 800fd0a:	e6a5      	b.n	800fa58 <_dtoa_r+0x6d8>
 800fd0c:	2600      	movs	r6, #0
 800fd0e:	4637      	mov	r7, r6
 800fd10:	e7e1      	b.n	800fcd6 <_dtoa_r+0x956>
 800fd12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fd14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fd18:	4637      	mov	r7, r6
 800fd1a:	e599      	b.n	800f850 <_dtoa_r+0x4d0>
 800fd1c:	9b08      	ldr	r3, [sp, #32]
 800fd1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	f000 80fd 	beq.w	800ff22 <_dtoa_r+0xba2>
 800fd28:	2d00      	cmp	r5, #0
 800fd2a:	dd05      	ble.n	800fd38 <_dtoa_r+0x9b8>
 800fd2c:	4639      	mov	r1, r7
 800fd2e:	462a      	mov	r2, r5
 800fd30:	4620      	mov	r0, r4
 800fd32:	f000 ffdb 	bl	8010cec <__lshift>
 800fd36:	4607      	mov	r7, r0
 800fd38:	9b06      	ldr	r3, [sp, #24]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d05c      	beq.n	800fdf8 <_dtoa_r+0xa78>
 800fd3e:	6879      	ldr	r1, [r7, #4]
 800fd40:	4620      	mov	r0, r4
 800fd42:	f000 fd77 	bl	8010834 <_Balloc>
 800fd46:	4605      	mov	r5, r0
 800fd48:	b928      	cbnz	r0, 800fd56 <_dtoa_r+0x9d6>
 800fd4a:	4b80      	ldr	r3, [pc, #512]	; (800ff4c <_dtoa_r+0xbcc>)
 800fd4c:	4602      	mov	r2, r0
 800fd4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fd52:	f7ff bb2e 	b.w	800f3b2 <_dtoa_r+0x32>
 800fd56:	693a      	ldr	r2, [r7, #16]
 800fd58:	3202      	adds	r2, #2
 800fd5a:	0092      	lsls	r2, r2, #2
 800fd5c:	f107 010c 	add.w	r1, r7, #12
 800fd60:	300c      	adds	r0, #12
 800fd62:	f7fd fbde 	bl	800d522 <memcpy>
 800fd66:	2201      	movs	r2, #1
 800fd68:	4629      	mov	r1, r5
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	f000 ffbe 	bl	8010cec <__lshift>
 800fd70:	9b00      	ldr	r3, [sp, #0]
 800fd72:	3301      	adds	r3, #1
 800fd74:	9301      	str	r3, [sp, #4]
 800fd76:	9b00      	ldr	r3, [sp, #0]
 800fd78:	444b      	add	r3, r9
 800fd7a:	9307      	str	r3, [sp, #28]
 800fd7c:	9b02      	ldr	r3, [sp, #8]
 800fd7e:	f003 0301 	and.w	r3, r3, #1
 800fd82:	46b8      	mov	r8, r7
 800fd84:	9306      	str	r3, [sp, #24]
 800fd86:	4607      	mov	r7, r0
 800fd88:	9b01      	ldr	r3, [sp, #4]
 800fd8a:	4631      	mov	r1, r6
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	4658      	mov	r0, fp
 800fd90:	9302      	str	r3, [sp, #8]
 800fd92:	f7ff fa69 	bl	800f268 <quorem>
 800fd96:	4603      	mov	r3, r0
 800fd98:	3330      	adds	r3, #48	; 0x30
 800fd9a:	9004      	str	r0, [sp, #16]
 800fd9c:	4641      	mov	r1, r8
 800fd9e:	4658      	mov	r0, fp
 800fda0:	9308      	str	r3, [sp, #32]
 800fda2:	f001 f80f 	bl	8010dc4 <__mcmp>
 800fda6:	463a      	mov	r2, r7
 800fda8:	4681      	mov	r9, r0
 800fdaa:	4631      	mov	r1, r6
 800fdac:	4620      	mov	r0, r4
 800fdae:	f001 f825 	bl	8010dfc <__mdiff>
 800fdb2:	68c2      	ldr	r2, [r0, #12]
 800fdb4:	9b08      	ldr	r3, [sp, #32]
 800fdb6:	4605      	mov	r5, r0
 800fdb8:	bb02      	cbnz	r2, 800fdfc <_dtoa_r+0xa7c>
 800fdba:	4601      	mov	r1, r0
 800fdbc:	4658      	mov	r0, fp
 800fdbe:	f001 f801 	bl	8010dc4 <__mcmp>
 800fdc2:	9b08      	ldr	r3, [sp, #32]
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	4629      	mov	r1, r5
 800fdc8:	4620      	mov	r0, r4
 800fdca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fdce:	f000 fd71 	bl	80108b4 <_Bfree>
 800fdd2:	9b05      	ldr	r3, [sp, #20]
 800fdd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdd6:	9d01      	ldr	r5, [sp, #4]
 800fdd8:	ea43 0102 	orr.w	r1, r3, r2
 800fddc:	9b06      	ldr	r3, [sp, #24]
 800fdde:	430b      	orrs	r3, r1
 800fde0:	9b08      	ldr	r3, [sp, #32]
 800fde2:	d10d      	bne.n	800fe00 <_dtoa_r+0xa80>
 800fde4:	2b39      	cmp	r3, #57	; 0x39
 800fde6:	d029      	beq.n	800fe3c <_dtoa_r+0xabc>
 800fde8:	f1b9 0f00 	cmp.w	r9, #0
 800fdec:	dd01      	ble.n	800fdf2 <_dtoa_r+0xa72>
 800fdee:	9b04      	ldr	r3, [sp, #16]
 800fdf0:	3331      	adds	r3, #49	; 0x31
 800fdf2:	9a02      	ldr	r2, [sp, #8]
 800fdf4:	7013      	strb	r3, [r2, #0]
 800fdf6:	e774      	b.n	800fce2 <_dtoa_r+0x962>
 800fdf8:	4638      	mov	r0, r7
 800fdfa:	e7b9      	b.n	800fd70 <_dtoa_r+0x9f0>
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	e7e2      	b.n	800fdc6 <_dtoa_r+0xa46>
 800fe00:	f1b9 0f00 	cmp.w	r9, #0
 800fe04:	db06      	blt.n	800fe14 <_dtoa_r+0xa94>
 800fe06:	9905      	ldr	r1, [sp, #20]
 800fe08:	ea41 0909 	orr.w	r9, r1, r9
 800fe0c:	9906      	ldr	r1, [sp, #24]
 800fe0e:	ea59 0101 	orrs.w	r1, r9, r1
 800fe12:	d120      	bne.n	800fe56 <_dtoa_r+0xad6>
 800fe14:	2a00      	cmp	r2, #0
 800fe16:	ddec      	ble.n	800fdf2 <_dtoa_r+0xa72>
 800fe18:	4659      	mov	r1, fp
 800fe1a:	2201      	movs	r2, #1
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	9301      	str	r3, [sp, #4]
 800fe20:	f000 ff64 	bl	8010cec <__lshift>
 800fe24:	4631      	mov	r1, r6
 800fe26:	4683      	mov	fp, r0
 800fe28:	f000 ffcc 	bl	8010dc4 <__mcmp>
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	9b01      	ldr	r3, [sp, #4]
 800fe30:	dc02      	bgt.n	800fe38 <_dtoa_r+0xab8>
 800fe32:	d1de      	bne.n	800fdf2 <_dtoa_r+0xa72>
 800fe34:	07da      	lsls	r2, r3, #31
 800fe36:	d5dc      	bpl.n	800fdf2 <_dtoa_r+0xa72>
 800fe38:	2b39      	cmp	r3, #57	; 0x39
 800fe3a:	d1d8      	bne.n	800fdee <_dtoa_r+0xa6e>
 800fe3c:	9a02      	ldr	r2, [sp, #8]
 800fe3e:	2339      	movs	r3, #57	; 0x39
 800fe40:	7013      	strb	r3, [r2, #0]
 800fe42:	462b      	mov	r3, r5
 800fe44:	461d      	mov	r5, r3
 800fe46:	3b01      	subs	r3, #1
 800fe48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fe4c:	2a39      	cmp	r2, #57	; 0x39
 800fe4e:	d050      	beq.n	800fef2 <_dtoa_r+0xb72>
 800fe50:	3201      	adds	r2, #1
 800fe52:	701a      	strb	r2, [r3, #0]
 800fe54:	e745      	b.n	800fce2 <_dtoa_r+0x962>
 800fe56:	2a00      	cmp	r2, #0
 800fe58:	dd03      	ble.n	800fe62 <_dtoa_r+0xae2>
 800fe5a:	2b39      	cmp	r3, #57	; 0x39
 800fe5c:	d0ee      	beq.n	800fe3c <_dtoa_r+0xabc>
 800fe5e:	3301      	adds	r3, #1
 800fe60:	e7c7      	b.n	800fdf2 <_dtoa_r+0xa72>
 800fe62:	9a01      	ldr	r2, [sp, #4]
 800fe64:	9907      	ldr	r1, [sp, #28]
 800fe66:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fe6a:	428a      	cmp	r2, r1
 800fe6c:	d02a      	beq.n	800fec4 <_dtoa_r+0xb44>
 800fe6e:	4659      	mov	r1, fp
 800fe70:	2300      	movs	r3, #0
 800fe72:	220a      	movs	r2, #10
 800fe74:	4620      	mov	r0, r4
 800fe76:	f000 fd3f 	bl	80108f8 <__multadd>
 800fe7a:	45b8      	cmp	r8, r7
 800fe7c:	4683      	mov	fp, r0
 800fe7e:	f04f 0300 	mov.w	r3, #0
 800fe82:	f04f 020a 	mov.w	r2, #10
 800fe86:	4641      	mov	r1, r8
 800fe88:	4620      	mov	r0, r4
 800fe8a:	d107      	bne.n	800fe9c <_dtoa_r+0xb1c>
 800fe8c:	f000 fd34 	bl	80108f8 <__multadd>
 800fe90:	4680      	mov	r8, r0
 800fe92:	4607      	mov	r7, r0
 800fe94:	9b01      	ldr	r3, [sp, #4]
 800fe96:	3301      	adds	r3, #1
 800fe98:	9301      	str	r3, [sp, #4]
 800fe9a:	e775      	b.n	800fd88 <_dtoa_r+0xa08>
 800fe9c:	f000 fd2c 	bl	80108f8 <__multadd>
 800fea0:	4639      	mov	r1, r7
 800fea2:	4680      	mov	r8, r0
 800fea4:	2300      	movs	r3, #0
 800fea6:	220a      	movs	r2, #10
 800fea8:	4620      	mov	r0, r4
 800feaa:	f000 fd25 	bl	80108f8 <__multadd>
 800feae:	4607      	mov	r7, r0
 800feb0:	e7f0      	b.n	800fe94 <_dtoa_r+0xb14>
 800feb2:	f1b9 0f00 	cmp.w	r9, #0
 800feb6:	9a00      	ldr	r2, [sp, #0]
 800feb8:	bfcc      	ite	gt
 800feba:	464d      	movgt	r5, r9
 800febc:	2501      	movle	r5, #1
 800febe:	4415      	add	r5, r2
 800fec0:	f04f 0800 	mov.w	r8, #0
 800fec4:	4659      	mov	r1, fp
 800fec6:	2201      	movs	r2, #1
 800fec8:	4620      	mov	r0, r4
 800feca:	9301      	str	r3, [sp, #4]
 800fecc:	f000 ff0e 	bl	8010cec <__lshift>
 800fed0:	4631      	mov	r1, r6
 800fed2:	4683      	mov	fp, r0
 800fed4:	f000 ff76 	bl	8010dc4 <__mcmp>
 800fed8:	2800      	cmp	r0, #0
 800feda:	dcb2      	bgt.n	800fe42 <_dtoa_r+0xac2>
 800fedc:	d102      	bne.n	800fee4 <_dtoa_r+0xb64>
 800fede:	9b01      	ldr	r3, [sp, #4]
 800fee0:	07db      	lsls	r3, r3, #31
 800fee2:	d4ae      	bmi.n	800fe42 <_dtoa_r+0xac2>
 800fee4:	462b      	mov	r3, r5
 800fee6:	461d      	mov	r5, r3
 800fee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800feec:	2a30      	cmp	r2, #48	; 0x30
 800feee:	d0fa      	beq.n	800fee6 <_dtoa_r+0xb66>
 800fef0:	e6f7      	b.n	800fce2 <_dtoa_r+0x962>
 800fef2:	9a00      	ldr	r2, [sp, #0]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d1a5      	bne.n	800fe44 <_dtoa_r+0xac4>
 800fef8:	f10a 0a01 	add.w	sl, sl, #1
 800fefc:	2331      	movs	r3, #49	; 0x31
 800fefe:	e779      	b.n	800fdf4 <_dtoa_r+0xa74>
 800ff00:	4b13      	ldr	r3, [pc, #76]	; (800ff50 <_dtoa_r+0xbd0>)
 800ff02:	f7ff baaf 	b.w	800f464 <_dtoa_r+0xe4>
 800ff06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	f47f aa86 	bne.w	800f41a <_dtoa_r+0x9a>
 800ff0e:	4b11      	ldr	r3, [pc, #68]	; (800ff54 <_dtoa_r+0xbd4>)
 800ff10:	f7ff baa8 	b.w	800f464 <_dtoa_r+0xe4>
 800ff14:	f1b9 0f00 	cmp.w	r9, #0
 800ff18:	dc03      	bgt.n	800ff22 <_dtoa_r+0xba2>
 800ff1a:	9b05      	ldr	r3, [sp, #20]
 800ff1c:	2b02      	cmp	r3, #2
 800ff1e:	f73f aec9 	bgt.w	800fcb4 <_dtoa_r+0x934>
 800ff22:	9d00      	ldr	r5, [sp, #0]
 800ff24:	4631      	mov	r1, r6
 800ff26:	4658      	mov	r0, fp
 800ff28:	f7ff f99e 	bl	800f268 <quorem>
 800ff2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ff30:	f805 3b01 	strb.w	r3, [r5], #1
 800ff34:	9a00      	ldr	r2, [sp, #0]
 800ff36:	1aaa      	subs	r2, r5, r2
 800ff38:	4591      	cmp	r9, r2
 800ff3a:	ddba      	ble.n	800feb2 <_dtoa_r+0xb32>
 800ff3c:	4659      	mov	r1, fp
 800ff3e:	2300      	movs	r3, #0
 800ff40:	220a      	movs	r2, #10
 800ff42:	4620      	mov	r0, r4
 800ff44:	f000 fcd8 	bl	80108f8 <__multadd>
 800ff48:	4683      	mov	fp, r0
 800ff4a:	e7eb      	b.n	800ff24 <_dtoa_r+0xba4>
 800ff4c:	08013914 	.word	0x08013914
 800ff50:	08013710 	.word	0x08013710
 800ff54:	08013891 	.word	0x08013891

0800ff58 <__sflush_r>:
 800ff58:	898a      	ldrh	r2, [r1, #12]
 800ff5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff5e:	4605      	mov	r5, r0
 800ff60:	0710      	lsls	r0, r2, #28
 800ff62:	460c      	mov	r4, r1
 800ff64:	d458      	bmi.n	8010018 <__sflush_r+0xc0>
 800ff66:	684b      	ldr	r3, [r1, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	dc05      	bgt.n	800ff78 <__sflush_r+0x20>
 800ff6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	dc02      	bgt.n	800ff78 <__sflush_r+0x20>
 800ff72:	2000      	movs	r0, #0
 800ff74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff7a:	2e00      	cmp	r6, #0
 800ff7c:	d0f9      	beq.n	800ff72 <__sflush_r+0x1a>
 800ff7e:	2300      	movs	r3, #0
 800ff80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff84:	682f      	ldr	r7, [r5, #0]
 800ff86:	602b      	str	r3, [r5, #0]
 800ff88:	d032      	beq.n	800fff0 <__sflush_r+0x98>
 800ff8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff8c:	89a3      	ldrh	r3, [r4, #12]
 800ff8e:	075a      	lsls	r2, r3, #29
 800ff90:	d505      	bpl.n	800ff9e <__sflush_r+0x46>
 800ff92:	6863      	ldr	r3, [r4, #4]
 800ff94:	1ac0      	subs	r0, r0, r3
 800ff96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff98:	b10b      	cbz	r3, 800ff9e <__sflush_r+0x46>
 800ff9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff9c:	1ac0      	subs	r0, r0, r3
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	4602      	mov	r2, r0
 800ffa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffa4:	6a21      	ldr	r1, [r4, #32]
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	47b0      	blx	r6
 800ffaa:	1c43      	adds	r3, r0, #1
 800ffac:	89a3      	ldrh	r3, [r4, #12]
 800ffae:	d106      	bne.n	800ffbe <__sflush_r+0x66>
 800ffb0:	6829      	ldr	r1, [r5, #0]
 800ffb2:	291d      	cmp	r1, #29
 800ffb4:	d82c      	bhi.n	8010010 <__sflush_r+0xb8>
 800ffb6:	4a2a      	ldr	r2, [pc, #168]	; (8010060 <__sflush_r+0x108>)
 800ffb8:	40ca      	lsrs	r2, r1
 800ffba:	07d6      	lsls	r6, r2, #31
 800ffbc:	d528      	bpl.n	8010010 <__sflush_r+0xb8>
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	6062      	str	r2, [r4, #4]
 800ffc2:	04d9      	lsls	r1, r3, #19
 800ffc4:	6922      	ldr	r2, [r4, #16]
 800ffc6:	6022      	str	r2, [r4, #0]
 800ffc8:	d504      	bpl.n	800ffd4 <__sflush_r+0x7c>
 800ffca:	1c42      	adds	r2, r0, #1
 800ffcc:	d101      	bne.n	800ffd2 <__sflush_r+0x7a>
 800ffce:	682b      	ldr	r3, [r5, #0]
 800ffd0:	b903      	cbnz	r3, 800ffd4 <__sflush_r+0x7c>
 800ffd2:	6560      	str	r0, [r4, #84]	; 0x54
 800ffd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffd6:	602f      	str	r7, [r5, #0]
 800ffd8:	2900      	cmp	r1, #0
 800ffda:	d0ca      	beq.n	800ff72 <__sflush_r+0x1a>
 800ffdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffe0:	4299      	cmp	r1, r3
 800ffe2:	d002      	beq.n	800ffea <__sflush_r+0x92>
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	f001 f8ef 	bl	80111c8 <_free_r>
 800ffea:	2000      	movs	r0, #0
 800ffec:	6360      	str	r0, [r4, #52]	; 0x34
 800ffee:	e7c1      	b.n	800ff74 <__sflush_r+0x1c>
 800fff0:	6a21      	ldr	r1, [r4, #32]
 800fff2:	2301      	movs	r3, #1
 800fff4:	4628      	mov	r0, r5
 800fff6:	47b0      	blx	r6
 800fff8:	1c41      	adds	r1, r0, #1
 800fffa:	d1c7      	bne.n	800ff8c <__sflush_r+0x34>
 800fffc:	682b      	ldr	r3, [r5, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d0c4      	beq.n	800ff8c <__sflush_r+0x34>
 8010002:	2b1d      	cmp	r3, #29
 8010004:	d001      	beq.n	801000a <__sflush_r+0xb2>
 8010006:	2b16      	cmp	r3, #22
 8010008:	d101      	bne.n	801000e <__sflush_r+0xb6>
 801000a:	602f      	str	r7, [r5, #0]
 801000c:	e7b1      	b.n	800ff72 <__sflush_r+0x1a>
 801000e:	89a3      	ldrh	r3, [r4, #12]
 8010010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010014:	81a3      	strh	r3, [r4, #12]
 8010016:	e7ad      	b.n	800ff74 <__sflush_r+0x1c>
 8010018:	690f      	ldr	r7, [r1, #16]
 801001a:	2f00      	cmp	r7, #0
 801001c:	d0a9      	beq.n	800ff72 <__sflush_r+0x1a>
 801001e:	0793      	lsls	r3, r2, #30
 8010020:	680e      	ldr	r6, [r1, #0]
 8010022:	bf08      	it	eq
 8010024:	694b      	ldreq	r3, [r1, #20]
 8010026:	600f      	str	r7, [r1, #0]
 8010028:	bf18      	it	ne
 801002a:	2300      	movne	r3, #0
 801002c:	eba6 0807 	sub.w	r8, r6, r7
 8010030:	608b      	str	r3, [r1, #8]
 8010032:	f1b8 0f00 	cmp.w	r8, #0
 8010036:	dd9c      	ble.n	800ff72 <__sflush_r+0x1a>
 8010038:	6a21      	ldr	r1, [r4, #32]
 801003a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801003c:	4643      	mov	r3, r8
 801003e:	463a      	mov	r2, r7
 8010040:	4628      	mov	r0, r5
 8010042:	47b0      	blx	r6
 8010044:	2800      	cmp	r0, #0
 8010046:	dc06      	bgt.n	8010056 <__sflush_r+0xfe>
 8010048:	89a3      	ldrh	r3, [r4, #12]
 801004a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801004e:	81a3      	strh	r3, [r4, #12]
 8010050:	f04f 30ff 	mov.w	r0, #4294967295
 8010054:	e78e      	b.n	800ff74 <__sflush_r+0x1c>
 8010056:	4407      	add	r7, r0
 8010058:	eba8 0800 	sub.w	r8, r8, r0
 801005c:	e7e9      	b.n	8010032 <__sflush_r+0xda>
 801005e:	bf00      	nop
 8010060:	20400001 	.word	0x20400001

08010064 <_fflush_r>:
 8010064:	b538      	push	{r3, r4, r5, lr}
 8010066:	690b      	ldr	r3, [r1, #16]
 8010068:	4605      	mov	r5, r0
 801006a:	460c      	mov	r4, r1
 801006c:	b913      	cbnz	r3, 8010074 <_fflush_r+0x10>
 801006e:	2500      	movs	r5, #0
 8010070:	4628      	mov	r0, r5
 8010072:	bd38      	pop	{r3, r4, r5, pc}
 8010074:	b118      	cbz	r0, 801007e <_fflush_r+0x1a>
 8010076:	6983      	ldr	r3, [r0, #24]
 8010078:	b90b      	cbnz	r3, 801007e <_fflush_r+0x1a>
 801007a:	f7fd f98d 	bl	800d398 <__sinit>
 801007e:	4b14      	ldr	r3, [pc, #80]	; (80100d0 <_fflush_r+0x6c>)
 8010080:	429c      	cmp	r4, r3
 8010082:	d11b      	bne.n	80100bc <_fflush_r+0x58>
 8010084:	686c      	ldr	r4, [r5, #4]
 8010086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d0ef      	beq.n	801006e <_fflush_r+0xa>
 801008e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010090:	07d0      	lsls	r0, r2, #31
 8010092:	d404      	bmi.n	801009e <_fflush_r+0x3a>
 8010094:	0599      	lsls	r1, r3, #22
 8010096:	d402      	bmi.n	801009e <_fflush_r+0x3a>
 8010098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801009a:	f7fd fa40 	bl	800d51e <__retarget_lock_acquire_recursive>
 801009e:	4628      	mov	r0, r5
 80100a0:	4621      	mov	r1, r4
 80100a2:	f7ff ff59 	bl	800ff58 <__sflush_r>
 80100a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100a8:	07da      	lsls	r2, r3, #31
 80100aa:	4605      	mov	r5, r0
 80100ac:	d4e0      	bmi.n	8010070 <_fflush_r+0xc>
 80100ae:	89a3      	ldrh	r3, [r4, #12]
 80100b0:	059b      	lsls	r3, r3, #22
 80100b2:	d4dd      	bmi.n	8010070 <_fflush_r+0xc>
 80100b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100b6:	f7fd fa33 	bl	800d520 <__retarget_lock_release_recursive>
 80100ba:	e7d9      	b.n	8010070 <_fflush_r+0xc>
 80100bc:	4b05      	ldr	r3, [pc, #20]	; (80100d4 <_fflush_r+0x70>)
 80100be:	429c      	cmp	r4, r3
 80100c0:	d101      	bne.n	80100c6 <_fflush_r+0x62>
 80100c2:	68ac      	ldr	r4, [r5, #8]
 80100c4:	e7df      	b.n	8010086 <_fflush_r+0x22>
 80100c6:	4b04      	ldr	r3, [pc, #16]	; (80100d8 <_fflush_r+0x74>)
 80100c8:	429c      	cmp	r4, r3
 80100ca:	bf08      	it	eq
 80100cc:	68ec      	ldreq	r4, [r5, #12]
 80100ce:	e7da      	b.n	8010086 <_fflush_r+0x22>
 80100d0:	080136bc 	.word	0x080136bc
 80100d4:	080136dc 	.word	0x080136dc
 80100d8:	0801369c 	.word	0x0801369c

080100dc <rshift>:
 80100dc:	6903      	ldr	r3, [r0, #16]
 80100de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80100e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80100ea:	f100 0414 	add.w	r4, r0, #20
 80100ee:	dd45      	ble.n	801017c <rshift+0xa0>
 80100f0:	f011 011f 	ands.w	r1, r1, #31
 80100f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80100f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80100fc:	d10c      	bne.n	8010118 <rshift+0x3c>
 80100fe:	f100 0710 	add.w	r7, r0, #16
 8010102:	4629      	mov	r1, r5
 8010104:	42b1      	cmp	r1, r6
 8010106:	d334      	bcc.n	8010172 <rshift+0x96>
 8010108:	1a9b      	subs	r3, r3, r2
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	1eea      	subs	r2, r5, #3
 801010e:	4296      	cmp	r6, r2
 8010110:	bf38      	it	cc
 8010112:	2300      	movcc	r3, #0
 8010114:	4423      	add	r3, r4
 8010116:	e015      	b.n	8010144 <rshift+0x68>
 8010118:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801011c:	f1c1 0820 	rsb	r8, r1, #32
 8010120:	40cf      	lsrs	r7, r1
 8010122:	f105 0e04 	add.w	lr, r5, #4
 8010126:	46a1      	mov	r9, r4
 8010128:	4576      	cmp	r6, lr
 801012a:	46f4      	mov	ip, lr
 801012c:	d815      	bhi.n	801015a <rshift+0x7e>
 801012e:	1a9b      	subs	r3, r3, r2
 8010130:	009a      	lsls	r2, r3, #2
 8010132:	3a04      	subs	r2, #4
 8010134:	3501      	adds	r5, #1
 8010136:	42ae      	cmp	r6, r5
 8010138:	bf38      	it	cc
 801013a:	2200      	movcc	r2, #0
 801013c:	18a3      	adds	r3, r4, r2
 801013e:	50a7      	str	r7, [r4, r2]
 8010140:	b107      	cbz	r7, 8010144 <rshift+0x68>
 8010142:	3304      	adds	r3, #4
 8010144:	1b1a      	subs	r2, r3, r4
 8010146:	42a3      	cmp	r3, r4
 8010148:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801014c:	bf08      	it	eq
 801014e:	2300      	moveq	r3, #0
 8010150:	6102      	str	r2, [r0, #16]
 8010152:	bf08      	it	eq
 8010154:	6143      	streq	r3, [r0, #20]
 8010156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801015a:	f8dc c000 	ldr.w	ip, [ip]
 801015e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010162:	ea4c 0707 	orr.w	r7, ip, r7
 8010166:	f849 7b04 	str.w	r7, [r9], #4
 801016a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801016e:	40cf      	lsrs	r7, r1
 8010170:	e7da      	b.n	8010128 <rshift+0x4c>
 8010172:	f851 cb04 	ldr.w	ip, [r1], #4
 8010176:	f847 cf04 	str.w	ip, [r7, #4]!
 801017a:	e7c3      	b.n	8010104 <rshift+0x28>
 801017c:	4623      	mov	r3, r4
 801017e:	e7e1      	b.n	8010144 <rshift+0x68>

08010180 <__hexdig_fun>:
 8010180:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010184:	2b09      	cmp	r3, #9
 8010186:	d802      	bhi.n	801018e <__hexdig_fun+0xe>
 8010188:	3820      	subs	r0, #32
 801018a:	b2c0      	uxtb	r0, r0
 801018c:	4770      	bx	lr
 801018e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010192:	2b05      	cmp	r3, #5
 8010194:	d801      	bhi.n	801019a <__hexdig_fun+0x1a>
 8010196:	3847      	subs	r0, #71	; 0x47
 8010198:	e7f7      	b.n	801018a <__hexdig_fun+0xa>
 801019a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801019e:	2b05      	cmp	r3, #5
 80101a0:	d801      	bhi.n	80101a6 <__hexdig_fun+0x26>
 80101a2:	3827      	subs	r0, #39	; 0x27
 80101a4:	e7f1      	b.n	801018a <__hexdig_fun+0xa>
 80101a6:	2000      	movs	r0, #0
 80101a8:	4770      	bx	lr
	...

080101ac <__gethex>:
 80101ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b0:	ed2d 8b02 	vpush	{d8}
 80101b4:	b089      	sub	sp, #36	; 0x24
 80101b6:	ee08 0a10 	vmov	s16, r0
 80101ba:	9304      	str	r3, [sp, #16]
 80101bc:	4bbc      	ldr	r3, [pc, #752]	; (80104b0 <__gethex+0x304>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	9301      	str	r3, [sp, #4]
 80101c2:	4618      	mov	r0, r3
 80101c4:	468b      	mov	fp, r1
 80101c6:	4690      	mov	r8, r2
 80101c8:	f7f0 f802 	bl	80001d0 <strlen>
 80101cc:	9b01      	ldr	r3, [sp, #4]
 80101ce:	f8db 2000 	ldr.w	r2, [fp]
 80101d2:	4403      	add	r3, r0
 80101d4:	4682      	mov	sl, r0
 80101d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80101da:	9305      	str	r3, [sp, #20]
 80101dc:	1c93      	adds	r3, r2, #2
 80101de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80101e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80101e6:	32fe      	adds	r2, #254	; 0xfe
 80101e8:	18d1      	adds	r1, r2, r3
 80101ea:	461f      	mov	r7, r3
 80101ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80101f0:	9100      	str	r1, [sp, #0]
 80101f2:	2830      	cmp	r0, #48	; 0x30
 80101f4:	d0f8      	beq.n	80101e8 <__gethex+0x3c>
 80101f6:	f7ff ffc3 	bl	8010180 <__hexdig_fun>
 80101fa:	4604      	mov	r4, r0
 80101fc:	2800      	cmp	r0, #0
 80101fe:	d13a      	bne.n	8010276 <__gethex+0xca>
 8010200:	9901      	ldr	r1, [sp, #4]
 8010202:	4652      	mov	r2, sl
 8010204:	4638      	mov	r0, r7
 8010206:	f001 f9a7 	bl	8011558 <strncmp>
 801020a:	4605      	mov	r5, r0
 801020c:	2800      	cmp	r0, #0
 801020e:	d168      	bne.n	80102e2 <__gethex+0x136>
 8010210:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010214:	eb07 060a 	add.w	r6, r7, sl
 8010218:	f7ff ffb2 	bl	8010180 <__hexdig_fun>
 801021c:	2800      	cmp	r0, #0
 801021e:	d062      	beq.n	80102e6 <__gethex+0x13a>
 8010220:	4633      	mov	r3, r6
 8010222:	7818      	ldrb	r0, [r3, #0]
 8010224:	2830      	cmp	r0, #48	; 0x30
 8010226:	461f      	mov	r7, r3
 8010228:	f103 0301 	add.w	r3, r3, #1
 801022c:	d0f9      	beq.n	8010222 <__gethex+0x76>
 801022e:	f7ff ffa7 	bl	8010180 <__hexdig_fun>
 8010232:	2301      	movs	r3, #1
 8010234:	fab0 f480 	clz	r4, r0
 8010238:	0964      	lsrs	r4, r4, #5
 801023a:	4635      	mov	r5, r6
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	463a      	mov	r2, r7
 8010240:	4616      	mov	r6, r2
 8010242:	3201      	adds	r2, #1
 8010244:	7830      	ldrb	r0, [r6, #0]
 8010246:	f7ff ff9b 	bl	8010180 <__hexdig_fun>
 801024a:	2800      	cmp	r0, #0
 801024c:	d1f8      	bne.n	8010240 <__gethex+0x94>
 801024e:	9901      	ldr	r1, [sp, #4]
 8010250:	4652      	mov	r2, sl
 8010252:	4630      	mov	r0, r6
 8010254:	f001 f980 	bl	8011558 <strncmp>
 8010258:	b980      	cbnz	r0, 801027c <__gethex+0xd0>
 801025a:	b94d      	cbnz	r5, 8010270 <__gethex+0xc4>
 801025c:	eb06 050a 	add.w	r5, r6, sl
 8010260:	462a      	mov	r2, r5
 8010262:	4616      	mov	r6, r2
 8010264:	3201      	adds	r2, #1
 8010266:	7830      	ldrb	r0, [r6, #0]
 8010268:	f7ff ff8a 	bl	8010180 <__hexdig_fun>
 801026c:	2800      	cmp	r0, #0
 801026e:	d1f8      	bne.n	8010262 <__gethex+0xb6>
 8010270:	1bad      	subs	r5, r5, r6
 8010272:	00ad      	lsls	r5, r5, #2
 8010274:	e004      	b.n	8010280 <__gethex+0xd4>
 8010276:	2400      	movs	r4, #0
 8010278:	4625      	mov	r5, r4
 801027a:	e7e0      	b.n	801023e <__gethex+0x92>
 801027c:	2d00      	cmp	r5, #0
 801027e:	d1f7      	bne.n	8010270 <__gethex+0xc4>
 8010280:	7833      	ldrb	r3, [r6, #0]
 8010282:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010286:	2b50      	cmp	r3, #80	; 0x50
 8010288:	d13b      	bne.n	8010302 <__gethex+0x156>
 801028a:	7873      	ldrb	r3, [r6, #1]
 801028c:	2b2b      	cmp	r3, #43	; 0x2b
 801028e:	d02c      	beq.n	80102ea <__gethex+0x13e>
 8010290:	2b2d      	cmp	r3, #45	; 0x2d
 8010292:	d02e      	beq.n	80102f2 <__gethex+0x146>
 8010294:	1c71      	adds	r1, r6, #1
 8010296:	f04f 0900 	mov.w	r9, #0
 801029a:	7808      	ldrb	r0, [r1, #0]
 801029c:	f7ff ff70 	bl	8010180 <__hexdig_fun>
 80102a0:	1e43      	subs	r3, r0, #1
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	2b18      	cmp	r3, #24
 80102a6:	d82c      	bhi.n	8010302 <__gethex+0x156>
 80102a8:	f1a0 0210 	sub.w	r2, r0, #16
 80102ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80102b0:	f7ff ff66 	bl	8010180 <__hexdig_fun>
 80102b4:	1e43      	subs	r3, r0, #1
 80102b6:	b2db      	uxtb	r3, r3
 80102b8:	2b18      	cmp	r3, #24
 80102ba:	d91d      	bls.n	80102f8 <__gethex+0x14c>
 80102bc:	f1b9 0f00 	cmp.w	r9, #0
 80102c0:	d000      	beq.n	80102c4 <__gethex+0x118>
 80102c2:	4252      	negs	r2, r2
 80102c4:	4415      	add	r5, r2
 80102c6:	f8cb 1000 	str.w	r1, [fp]
 80102ca:	b1e4      	cbz	r4, 8010306 <__gethex+0x15a>
 80102cc:	9b00      	ldr	r3, [sp, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	bf14      	ite	ne
 80102d2:	2700      	movne	r7, #0
 80102d4:	2706      	moveq	r7, #6
 80102d6:	4638      	mov	r0, r7
 80102d8:	b009      	add	sp, #36	; 0x24
 80102da:	ecbd 8b02 	vpop	{d8}
 80102de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e2:	463e      	mov	r6, r7
 80102e4:	4625      	mov	r5, r4
 80102e6:	2401      	movs	r4, #1
 80102e8:	e7ca      	b.n	8010280 <__gethex+0xd4>
 80102ea:	f04f 0900 	mov.w	r9, #0
 80102ee:	1cb1      	adds	r1, r6, #2
 80102f0:	e7d3      	b.n	801029a <__gethex+0xee>
 80102f2:	f04f 0901 	mov.w	r9, #1
 80102f6:	e7fa      	b.n	80102ee <__gethex+0x142>
 80102f8:	230a      	movs	r3, #10
 80102fa:	fb03 0202 	mla	r2, r3, r2, r0
 80102fe:	3a10      	subs	r2, #16
 8010300:	e7d4      	b.n	80102ac <__gethex+0x100>
 8010302:	4631      	mov	r1, r6
 8010304:	e7df      	b.n	80102c6 <__gethex+0x11a>
 8010306:	1bf3      	subs	r3, r6, r7
 8010308:	3b01      	subs	r3, #1
 801030a:	4621      	mov	r1, r4
 801030c:	2b07      	cmp	r3, #7
 801030e:	dc0b      	bgt.n	8010328 <__gethex+0x17c>
 8010310:	ee18 0a10 	vmov	r0, s16
 8010314:	f000 fa8e 	bl	8010834 <_Balloc>
 8010318:	4604      	mov	r4, r0
 801031a:	b940      	cbnz	r0, 801032e <__gethex+0x182>
 801031c:	4b65      	ldr	r3, [pc, #404]	; (80104b4 <__gethex+0x308>)
 801031e:	4602      	mov	r2, r0
 8010320:	21de      	movs	r1, #222	; 0xde
 8010322:	4865      	ldr	r0, [pc, #404]	; (80104b8 <__gethex+0x30c>)
 8010324:	f001 f938 	bl	8011598 <__assert_func>
 8010328:	3101      	adds	r1, #1
 801032a:	105b      	asrs	r3, r3, #1
 801032c:	e7ee      	b.n	801030c <__gethex+0x160>
 801032e:	f100 0914 	add.w	r9, r0, #20
 8010332:	f04f 0b00 	mov.w	fp, #0
 8010336:	f1ca 0301 	rsb	r3, sl, #1
 801033a:	f8cd 9008 	str.w	r9, [sp, #8]
 801033e:	f8cd b000 	str.w	fp, [sp]
 8010342:	9306      	str	r3, [sp, #24]
 8010344:	42b7      	cmp	r7, r6
 8010346:	d340      	bcc.n	80103ca <__gethex+0x21e>
 8010348:	9802      	ldr	r0, [sp, #8]
 801034a:	9b00      	ldr	r3, [sp, #0]
 801034c:	f840 3b04 	str.w	r3, [r0], #4
 8010350:	eba0 0009 	sub.w	r0, r0, r9
 8010354:	1080      	asrs	r0, r0, #2
 8010356:	0146      	lsls	r6, r0, #5
 8010358:	6120      	str	r0, [r4, #16]
 801035a:	4618      	mov	r0, r3
 801035c:	f000 fb60 	bl	8010a20 <__hi0bits>
 8010360:	1a30      	subs	r0, r6, r0
 8010362:	f8d8 6000 	ldr.w	r6, [r8]
 8010366:	42b0      	cmp	r0, r6
 8010368:	dd63      	ble.n	8010432 <__gethex+0x286>
 801036a:	1b87      	subs	r7, r0, r6
 801036c:	4639      	mov	r1, r7
 801036e:	4620      	mov	r0, r4
 8010370:	f000 fefa 	bl	8011168 <__any_on>
 8010374:	4682      	mov	sl, r0
 8010376:	b1a8      	cbz	r0, 80103a4 <__gethex+0x1f8>
 8010378:	1e7b      	subs	r3, r7, #1
 801037a:	1159      	asrs	r1, r3, #5
 801037c:	f003 021f 	and.w	r2, r3, #31
 8010380:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010384:	f04f 0a01 	mov.w	sl, #1
 8010388:	fa0a f202 	lsl.w	r2, sl, r2
 801038c:	420a      	tst	r2, r1
 801038e:	d009      	beq.n	80103a4 <__gethex+0x1f8>
 8010390:	4553      	cmp	r3, sl
 8010392:	dd05      	ble.n	80103a0 <__gethex+0x1f4>
 8010394:	1eb9      	subs	r1, r7, #2
 8010396:	4620      	mov	r0, r4
 8010398:	f000 fee6 	bl	8011168 <__any_on>
 801039c:	2800      	cmp	r0, #0
 801039e:	d145      	bne.n	801042c <__gethex+0x280>
 80103a0:	f04f 0a02 	mov.w	sl, #2
 80103a4:	4639      	mov	r1, r7
 80103a6:	4620      	mov	r0, r4
 80103a8:	f7ff fe98 	bl	80100dc <rshift>
 80103ac:	443d      	add	r5, r7
 80103ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103b2:	42ab      	cmp	r3, r5
 80103b4:	da4c      	bge.n	8010450 <__gethex+0x2a4>
 80103b6:	ee18 0a10 	vmov	r0, s16
 80103ba:	4621      	mov	r1, r4
 80103bc:	f000 fa7a 	bl	80108b4 <_Bfree>
 80103c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80103c2:	2300      	movs	r3, #0
 80103c4:	6013      	str	r3, [r2, #0]
 80103c6:	27a3      	movs	r7, #163	; 0xa3
 80103c8:	e785      	b.n	80102d6 <__gethex+0x12a>
 80103ca:	1e73      	subs	r3, r6, #1
 80103cc:	9a05      	ldr	r2, [sp, #20]
 80103ce:	9303      	str	r3, [sp, #12]
 80103d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d019      	beq.n	801040c <__gethex+0x260>
 80103d8:	f1bb 0f20 	cmp.w	fp, #32
 80103dc:	d107      	bne.n	80103ee <__gethex+0x242>
 80103de:	9b02      	ldr	r3, [sp, #8]
 80103e0:	9a00      	ldr	r2, [sp, #0]
 80103e2:	f843 2b04 	str.w	r2, [r3], #4
 80103e6:	9302      	str	r3, [sp, #8]
 80103e8:	2300      	movs	r3, #0
 80103ea:	9300      	str	r3, [sp, #0]
 80103ec:	469b      	mov	fp, r3
 80103ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80103f2:	f7ff fec5 	bl	8010180 <__hexdig_fun>
 80103f6:	9b00      	ldr	r3, [sp, #0]
 80103f8:	f000 000f 	and.w	r0, r0, #15
 80103fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8010400:	4303      	orrs	r3, r0
 8010402:	9300      	str	r3, [sp, #0]
 8010404:	f10b 0b04 	add.w	fp, fp, #4
 8010408:	9b03      	ldr	r3, [sp, #12]
 801040a:	e00d      	b.n	8010428 <__gethex+0x27c>
 801040c:	9b03      	ldr	r3, [sp, #12]
 801040e:	9a06      	ldr	r2, [sp, #24]
 8010410:	4413      	add	r3, r2
 8010412:	42bb      	cmp	r3, r7
 8010414:	d3e0      	bcc.n	80103d8 <__gethex+0x22c>
 8010416:	4618      	mov	r0, r3
 8010418:	9901      	ldr	r1, [sp, #4]
 801041a:	9307      	str	r3, [sp, #28]
 801041c:	4652      	mov	r2, sl
 801041e:	f001 f89b 	bl	8011558 <strncmp>
 8010422:	9b07      	ldr	r3, [sp, #28]
 8010424:	2800      	cmp	r0, #0
 8010426:	d1d7      	bne.n	80103d8 <__gethex+0x22c>
 8010428:	461e      	mov	r6, r3
 801042a:	e78b      	b.n	8010344 <__gethex+0x198>
 801042c:	f04f 0a03 	mov.w	sl, #3
 8010430:	e7b8      	b.n	80103a4 <__gethex+0x1f8>
 8010432:	da0a      	bge.n	801044a <__gethex+0x29e>
 8010434:	1a37      	subs	r7, r6, r0
 8010436:	4621      	mov	r1, r4
 8010438:	ee18 0a10 	vmov	r0, s16
 801043c:	463a      	mov	r2, r7
 801043e:	f000 fc55 	bl	8010cec <__lshift>
 8010442:	1bed      	subs	r5, r5, r7
 8010444:	4604      	mov	r4, r0
 8010446:	f100 0914 	add.w	r9, r0, #20
 801044a:	f04f 0a00 	mov.w	sl, #0
 801044e:	e7ae      	b.n	80103ae <__gethex+0x202>
 8010450:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010454:	42a8      	cmp	r0, r5
 8010456:	dd72      	ble.n	801053e <__gethex+0x392>
 8010458:	1b45      	subs	r5, r0, r5
 801045a:	42ae      	cmp	r6, r5
 801045c:	dc36      	bgt.n	80104cc <__gethex+0x320>
 801045e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010462:	2b02      	cmp	r3, #2
 8010464:	d02a      	beq.n	80104bc <__gethex+0x310>
 8010466:	2b03      	cmp	r3, #3
 8010468:	d02c      	beq.n	80104c4 <__gethex+0x318>
 801046a:	2b01      	cmp	r3, #1
 801046c:	d115      	bne.n	801049a <__gethex+0x2ee>
 801046e:	42ae      	cmp	r6, r5
 8010470:	d113      	bne.n	801049a <__gethex+0x2ee>
 8010472:	2e01      	cmp	r6, #1
 8010474:	d10b      	bne.n	801048e <__gethex+0x2e2>
 8010476:	9a04      	ldr	r2, [sp, #16]
 8010478:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801047c:	6013      	str	r3, [r2, #0]
 801047e:	2301      	movs	r3, #1
 8010480:	6123      	str	r3, [r4, #16]
 8010482:	f8c9 3000 	str.w	r3, [r9]
 8010486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010488:	2762      	movs	r7, #98	; 0x62
 801048a:	601c      	str	r4, [r3, #0]
 801048c:	e723      	b.n	80102d6 <__gethex+0x12a>
 801048e:	1e71      	subs	r1, r6, #1
 8010490:	4620      	mov	r0, r4
 8010492:	f000 fe69 	bl	8011168 <__any_on>
 8010496:	2800      	cmp	r0, #0
 8010498:	d1ed      	bne.n	8010476 <__gethex+0x2ca>
 801049a:	ee18 0a10 	vmov	r0, s16
 801049e:	4621      	mov	r1, r4
 80104a0:	f000 fa08 	bl	80108b4 <_Bfree>
 80104a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80104a6:	2300      	movs	r3, #0
 80104a8:	6013      	str	r3, [r2, #0]
 80104aa:	2750      	movs	r7, #80	; 0x50
 80104ac:	e713      	b.n	80102d6 <__gethex+0x12a>
 80104ae:	bf00      	nop
 80104b0:	08013990 	.word	0x08013990
 80104b4:	08013914 	.word	0x08013914
 80104b8:	08013925 	.word	0x08013925
 80104bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d1eb      	bne.n	801049a <__gethex+0x2ee>
 80104c2:	e7d8      	b.n	8010476 <__gethex+0x2ca>
 80104c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1d5      	bne.n	8010476 <__gethex+0x2ca>
 80104ca:	e7e6      	b.n	801049a <__gethex+0x2ee>
 80104cc:	1e6f      	subs	r7, r5, #1
 80104ce:	f1ba 0f00 	cmp.w	sl, #0
 80104d2:	d131      	bne.n	8010538 <__gethex+0x38c>
 80104d4:	b127      	cbz	r7, 80104e0 <__gethex+0x334>
 80104d6:	4639      	mov	r1, r7
 80104d8:	4620      	mov	r0, r4
 80104da:	f000 fe45 	bl	8011168 <__any_on>
 80104de:	4682      	mov	sl, r0
 80104e0:	117b      	asrs	r3, r7, #5
 80104e2:	2101      	movs	r1, #1
 80104e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80104e8:	f007 071f 	and.w	r7, r7, #31
 80104ec:	fa01 f707 	lsl.w	r7, r1, r7
 80104f0:	421f      	tst	r7, r3
 80104f2:	4629      	mov	r1, r5
 80104f4:	4620      	mov	r0, r4
 80104f6:	bf18      	it	ne
 80104f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80104fc:	1b76      	subs	r6, r6, r5
 80104fe:	f7ff fded 	bl	80100dc <rshift>
 8010502:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010506:	2702      	movs	r7, #2
 8010508:	f1ba 0f00 	cmp.w	sl, #0
 801050c:	d048      	beq.n	80105a0 <__gethex+0x3f4>
 801050e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010512:	2b02      	cmp	r3, #2
 8010514:	d015      	beq.n	8010542 <__gethex+0x396>
 8010516:	2b03      	cmp	r3, #3
 8010518:	d017      	beq.n	801054a <__gethex+0x39e>
 801051a:	2b01      	cmp	r3, #1
 801051c:	d109      	bne.n	8010532 <__gethex+0x386>
 801051e:	f01a 0f02 	tst.w	sl, #2
 8010522:	d006      	beq.n	8010532 <__gethex+0x386>
 8010524:	f8d9 0000 	ldr.w	r0, [r9]
 8010528:	ea4a 0a00 	orr.w	sl, sl, r0
 801052c:	f01a 0f01 	tst.w	sl, #1
 8010530:	d10e      	bne.n	8010550 <__gethex+0x3a4>
 8010532:	f047 0710 	orr.w	r7, r7, #16
 8010536:	e033      	b.n	80105a0 <__gethex+0x3f4>
 8010538:	f04f 0a01 	mov.w	sl, #1
 801053c:	e7d0      	b.n	80104e0 <__gethex+0x334>
 801053e:	2701      	movs	r7, #1
 8010540:	e7e2      	b.n	8010508 <__gethex+0x35c>
 8010542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010544:	f1c3 0301 	rsb	r3, r3, #1
 8010548:	9315      	str	r3, [sp, #84]	; 0x54
 801054a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801054c:	2b00      	cmp	r3, #0
 801054e:	d0f0      	beq.n	8010532 <__gethex+0x386>
 8010550:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010554:	f104 0314 	add.w	r3, r4, #20
 8010558:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801055c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010560:	f04f 0c00 	mov.w	ip, #0
 8010564:	4618      	mov	r0, r3
 8010566:	f853 2b04 	ldr.w	r2, [r3], #4
 801056a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801056e:	d01c      	beq.n	80105aa <__gethex+0x3fe>
 8010570:	3201      	adds	r2, #1
 8010572:	6002      	str	r2, [r0, #0]
 8010574:	2f02      	cmp	r7, #2
 8010576:	f104 0314 	add.w	r3, r4, #20
 801057a:	d13f      	bne.n	80105fc <__gethex+0x450>
 801057c:	f8d8 2000 	ldr.w	r2, [r8]
 8010580:	3a01      	subs	r2, #1
 8010582:	42b2      	cmp	r2, r6
 8010584:	d10a      	bne.n	801059c <__gethex+0x3f0>
 8010586:	1171      	asrs	r1, r6, #5
 8010588:	2201      	movs	r2, #1
 801058a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801058e:	f006 061f 	and.w	r6, r6, #31
 8010592:	fa02 f606 	lsl.w	r6, r2, r6
 8010596:	421e      	tst	r6, r3
 8010598:	bf18      	it	ne
 801059a:	4617      	movne	r7, r2
 801059c:	f047 0720 	orr.w	r7, r7, #32
 80105a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80105a2:	601c      	str	r4, [r3, #0]
 80105a4:	9b04      	ldr	r3, [sp, #16]
 80105a6:	601d      	str	r5, [r3, #0]
 80105a8:	e695      	b.n	80102d6 <__gethex+0x12a>
 80105aa:	4299      	cmp	r1, r3
 80105ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80105b0:	d8d8      	bhi.n	8010564 <__gethex+0x3b8>
 80105b2:	68a3      	ldr	r3, [r4, #8]
 80105b4:	459b      	cmp	fp, r3
 80105b6:	db19      	blt.n	80105ec <__gethex+0x440>
 80105b8:	6861      	ldr	r1, [r4, #4]
 80105ba:	ee18 0a10 	vmov	r0, s16
 80105be:	3101      	adds	r1, #1
 80105c0:	f000 f938 	bl	8010834 <_Balloc>
 80105c4:	4681      	mov	r9, r0
 80105c6:	b918      	cbnz	r0, 80105d0 <__gethex+0x424>
 80105c8:	4b1a      	ldr	r3, [pc, #104]	; (8010634 <__gethex+0x488>)
 80105ca:	4602      	mov	r2, r0
 80105cc:	2184      	movs	r1, #132	; 0x84
 80105ce:	e6a8      	b.n	8010322 <__gethex+0x176>
 80105d0:	6922      	ldr	r2, [r4, #16]
 80105d2:	3202      	adds	r2, #2
 80105d4:	f104 010c 	add.w	r1, r4, #12
 80105d8:	0092      	lsls	r2, r2, #2
 80105da:	300c      	adds	r0, #12
 80105dc:	f7fc ffa1 	bl	800d522 <memcpy>
 80105e0:	4621      	mov	r1, r4
 80105e2:	ee18 0a10 	vmov	r0, s16
 80105e6:	f000 f965 	bl	80108b4 <_Bfree>
 80105ea:	464c      	mov	r4, r9
 80105ec:	6923      	ldr	r3, [r4, #16]
 80105ee:	1c5a      	adds	r2, r3, #1
 80105f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80105f4:	6122      	str	r2, [r4, #16]
 80105f6:	2201      	movs	r2, #1
 80105f8:	615a      	str	r2, [r3, #20]
 80105fa:	e7bb      	b.n	8010574 <__gethex+0x3c8>
 80105fc:	6922      	ldr	r2, [r4, #16]
 80105fe:	455a      	cmp	r2, fp
 8010600:	dd0b      	ble.n	801061a <__gethex+0x46e>
 8010602:	2101      	movs	r1, #1
 8010604:	4620      	mov	r0, r4
 8010606:	f7ff fd69 	bl	80100dc <rshift>
 801060a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801060e:	3501      	adds	r5, #1
 8010610:	42ab      	cmp	r3, r5
 8010612:	f6ff aed0 	blt.w	80103b6 <__gethex+0x20a>
 8010616:	2701      	movs	r7, #1
 8010618:	e7c0      	b.n	801059c <__gethex+0x3f0>
 801061a:	f016 061f 	ands.w	r6, r6, #31
 801061e:	d0fa      	beq.n	8010616 <__gethex+0x46a>
 8010620:	449a      	add	sl, r3
 8010622:	f1c6 0620 	rsb	r6, r6, #32
 8010626:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801062a:	f000 f9f9 	bl	8010a20 <__hi0bits>
 801062e:	42b0      	cmp	r0, r6
 8010630:	dbe7      	blt.n	8010602 <__gethex+0x456>
 8010632:	e7f0      	b.n	8010616 <__gethex+0x46a>
 8010634:	08013914 	.word	0x08013914

08010638 <L_shift>:
 8010638:	f1c2 0208 	rsb	r2, r2, #8
 801063c:	0092      	lsls	r2, r2, #2
 801063e:	b570      	push	{r4, r5, r6, lr}
 8010640:	f1c2 0620 	rsb	r6, r2, #32
 8010644:	6843      	ldr	r3, [r0, #4]
 8010646:	6804      	ldr	r4, [r0, #0]
 8010648:	fa03 f506 	lsl.w	r5, r3, r6
 801064c:	432c      	orrs	r4, r5
 801064e:	40d3      	lsrs	r3, r2
 8010650:	6004      	str	r4, [r0, #0]
 8010652:	f840 3f04 	str.w	r3, [r0, #4]!
 8010656:	4288      	cmp	r0, r1
 8010658:	d3f4      	bcc.n	8010644 <L_shift+0xc>
 801065a:	bd70      	pop	{r4, r5, r6, pc}

0801065c <__match>:
 801065c:	b530      	push	{r4, r5, lr}
 801065e:	6803      	ldr	r3, [r0, #0]
 8010660:	3301      	adds	r3, #1
 8010662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010666:	b914      	cbnz	r4, 801066e <__match+0x12>
 8010668:	6003      	str	r3, [r0, #0]
 801066a:	2001      	movs	r0, #1
 801066c:	bd30      	pop	{r4, r5, pc}
 801066e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010672:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010676:	2d19      	cmp	r5, #25
 8010678:	bf98      	it	ls
 801067a:	3220      	addls	r2, #32
 801067c:	42a2      	cmp	r2, r4
 801067e:	d0f0      	beq.n	8010662 <__match+0x6>
 8010680:	2000      	movs	r0, #0
 8010682:	e7f3      	b.n	801066c <__match+0x10>

08010684 <__hexnan>:
 8010684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010688:	680b      	ldr	r3, [r1, #0]
 801068a:	6801      	ldr	r1, [r0, #0]
 801068c:	115e      	asrs	r6, r3, #5
 801068e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010692:	f013 031f 	ands.w	r3, r3, #31
 8010696:	b087      	sub	sp, #28
 8010698:	bf18      	it	ne
 801069a:	3604      	addne	r6, #4
 801069c:	2500      	movs	r5, #0
 801069e:	1f37      	subs	r7, r6, #4
 80106a0:	4682      	mov	sl, r0
 80106a2:	4690      	mov	r8, r2
 80106a4:	9301      	str	r3, [sp, #4]
 80106a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80106aa:	46b9      	mov	r9, r7
 80106ac:	463c      	mov	r4, r7
 80106ae:	9502      	str	r5, [sp, #8]
 80106b0:	46ab      	mov	fp, r5
 80106b2:	784a      	ldrb	r2, [r1, #1]
 80106b4:	1c4b      	adds	r3, r1, #1
 80106b6:	9303      	str	r3, [sp, #12]
 80106b8:	b342      	cbz	r2, 801070c <__hexnan+0x88>
 80106ba:	4610      	mov	r0, r2
 80106bc:	9105      	str	r1, [sp, #20]
 80106be:	9204      	str	r2, [sp, #16]
 80106c0:	f7ff fd5e 	bl	8010180 <__hexdig_fun>
 80106c4:	2800      	cmp	r0, #0
 80106c6:	d14f      	bne.n	8010768 <__hexnan+0xe4>
 80106c8:	9a04      	ldr	r2, [sp, #16]
 80106ca:	9905      	ldr	r1, [sp, #20]
 80106cc:	2a20      	cmp	r2, #32
 80106ce:	d818      	bhi.n	8010702 <__hexnan+0x7e>
 80106d0:	9b02      	ldr	r3, [sp, #8]
 80106d2:	459b      	cmp	fp, r3
 80106d4:	dd13      	ble.n	80106fe <__hexnan+0x7a>
 80106d6:	454c      	cmp	r4, r9
 80106d8:	d206      	bcs.n	80106e8 <__hexnan+0x64>
 80106da:	2d07      	cmp	r5, #7
 80106dc:	dc04      	bgt.n	80106e8 <__hexnan+0x64>
 80106de:	462a      	mov	r2, r5
 80106e0:	4649      	mov	r1, r9
 80106e2:	4620      	mov	r0, r4
 80106e4:	f7ff ffa8 	bl	8010638 <L_shift>
 80106e8:	4544      	cmp	r4, r8
 80106ea:	d950      	bls.n	801078e <__hexnan+0x10a>
 80106ec:	2300      	movs	r3, #0
 80106ee:	f1a4 0904 	sub.w	r9, r4, #4
 80106f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80106f6:	f8cd b008 	str.w	fp, [sp, #8]
 80106fa:	464c      	mov	r4, r9
 80106fc:	461d      	mov	r5, r3
 80106fe:	9903      	ldr	r1, [sp, #12]
 8010700:	e7d7      	b.n	80106b2 <__hexnan+0x2e>
 8010702:	2a29      	cmp	r2, #41	; 0x29
 8010704:	d156      	bne.n	80107b4 <__hexnan+0x130>
 8010706:	3102      	adds	r1, #2
 8010708:	f8ca 1000 	str.w	r1, [sl]
 801070c:	f1bb 0f00 	cmp.w	fp, #0
 8010710:	d050      	beq.n	80107b4 <__hexnan+0x130>
 8010712:	454c      	cmp	r4, r9
 8010714:	d206      	bcs.n	8010724 <__hexnan+0xa0>
 8010716:	2d07      	cmp	r5, #7
 8010718:	dc04      	bgt.n	8010724 <__hexnan+0xa0>
 801071a:	462a      	mov	r2, r5
 801071c:	4649      	mov	r1, r9
 801071e:	4620      	mov	r0, r4
 8010720:	f7ff ff8a 	bl	8010638 <L_shift>
 8010724:	4544      	cmp	r4, r8
 8010726:	d934      	bls.n	8010792 <__hexnan+0x10e>
 8010728:	f1a8 0204 	sub.w	r2, r8, #4
 801072c:	4623      	mov	r3, r4
 801072e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010732:	f842 1f04 	str.w	r1, [r2, #4]!
 8010736:	429f      	cmp	r7, r3
 8010738:	d2f9      	bcs.n	801072e <__hexnan+0xaa>
 801073a:	1b3b      	subs	r3, r7, r4
 801073c:	f023 0303 	bic.w	r3, r3, #3
 8010740:	3304      	adds	r3, #4
 8010742:	3401      	adds	r4, #1
 8010744:	3e03      	subs	r6, #3
 8010746:	42b4      	cmp	r4, r6
 8010748:	bf88      	it	hi
 801074a:	2304      	movhi	r3, #4
 801074c:	4443      	add	r3, r8
 801074e:	2200      	movs	r2, #0
 8010750:	f843 2b04 	str.w	r2, [r3], #4
 8010754:	429f      	cmp	r7, r3
 8010756:	d2fb      	bcs.n	8010750 <__hexnan+0xcc>
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	b91b      	cbnz	r3, 8010764 <__hexnan+0xe0>
 801075c:	4547      	cmp	r7, r8
 801075e:	d127      	bne.n	80107b0 <__hexnan+0x12c>
 8010760:	2301      	movs	r3, #1
 8010762:	603b      	str	r3, [r7, #0]
 8010764:	2005      	movs	r0, #5
 8010766:	e026      	b.n	80107b6 <__hexnan+0x132>
 8010768:	3501      	adds	r5, #1
 801076a:	2d08      	cmp	r5, #8
 801076c:	f10b 0b01 	add.w	fp, fp, #1
 8010770:	dd06      	ble.n	8010780 <__hexnan+0xfc>
 8010772:	4544      	cmp	r4, r8
 8010774:	d9c3      	bls.n	80106fe <__hexnan+0x7a>
 8010776:	2300      	movs	r3, #0
 8010778:	f844 3c04 	str.w	r3, [r4, #-4]
 801077c:	2501      	movs	r5, #1
 801077e:	3c04      	subs	r4, #4
 8010780:	6822      	ldr	r2, [r4, #0]
 8010782:	f000 000f 	and.w	r0, r0, #15
 8010786:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801078a:	6022      	str	r2, [r4, #0]
 801078c:	e7b7      	b.n	80106fe <__hexnan+0x7a>
 801078e:	2508      	movs	r5, #8
 8010790:	e7b5      	b.n	80106fe <__hexnan+0x7a>
 8010792:	9b01      	ldr	r3, [sp, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d0df      	beq.n	8010758 <__hexnan+0xd4>
 8010798:	f04f 32ff 	mov.w	r2, #4294967295
 801079c:	f1c3 0320 	rsb	r3, r3, #32
 80107a0:	fa22 f303 	lsr.w	r3, r2, r3
 80107a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80107a8:	401a      	ands	r2, r3
 80107aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80107ae:	e7d3      	b.n	8010758 <__hexnan+0xd4>
 80107b0:	3f04      	subs	r7, #4
 80107b2:	e7d1      	b.n	8010758 <__hexnan+0xd4>
 80107b4:	2004      	movs	r0, #4
 80107b6:	b007      	add	sp, #28
 80107b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080107bc <_localeconv_r>:
 80107bc:	4800      	ldr	r0, [pc, #0]	; (80107c0 <_localeconv_r+0x4>)
 80107be:	4770      	bx	lr
 80107c0:	20000198 	.word	0x20000198

080107c4 <_lseek_r>:
 80107c4:	b538      	push	{r3, r4, r5, lr}
 80107c6:	4d07      	ldr	r5, [pc, #28]	; (80107e4 <_lseek_r+0x20>)
 80107c8:	4604      	mov	r4, r0
 80107ca:	4608      	mov	r0, r1
 80107cc:	4611      	mov	r1, r2
 80107ce:	2200      	movs	r2, #0
 80107d0:	602a      	str	r2, [r5, #0]
 80107d2:	461a      	mov	r2, r3
 80107d4:	f7f3 fd08 	bl	80041e8 <_lseek>
 80107d8:	1c43      	adds	r3, r0, #1
 80107da:	d102      	bne.n	80107e2 <_lseek_r+0x1e>
 80107dc:	682b      	ldr	r3, [r5, #0]
 80107de:	b103      	cbz	r3, 80107e2 <_lseek_r+0x1e>
 80107e0:	6023      	str	r3, [r4, #0]
 80107e2:	bd38      	pop	{r3, r4, r5, pc}
 80107e4:	200063a4 	.word	0x200063a4

080107e8 <malloc>:
 80107e8:	4b02      	ldr	r3, [pc, #8]	; (80107f4 <malloc+0xc>)
 80107ea:	4601      	mov	r1, r0
 80107ec:	6818      	ldr	r0, [r3, #0]
 80107ee:	f7fc beaf 	b.w	800d550 <_malloc_r>
 80107f2:	bf00      	nop
 80107f4:	20000040 	.word	0x20000040

080107f8 <__ascii_mbtowc>:
 80107f8:	b082      	sub	sp, #8
 80107fa:	b901      	cbnz	r1, 80107fe <__ascii_mbtowc+0x6>
 80107fc:	a901      	add	r1, sp, #4
 80107fe:	b142      	cbz	r2, 8010812 <__ascii_mbtowc+0x1a>
 8010800:	b14b      	cbz	r3, 8010816 <__ascii_mbtowc+0x1e>
 8010802:	7813      	ldrb	r3, [r2, #0]
 8010804:	600b      	str	r3, [r1, #0]
 8010806:	7812      	ldrb	r2, [r2, #0]
 8010808:	1e10      	subs	r0, r2, #0
 801080a:	bf18      	it	ne
 801080c:	2001      	movne	r0, #1
 801080e:	b002      	add	sp, #8
 8010810:	4770      	bx	lr
 8010812:	4610      	mov	r0, r2
 8010814:	e7fb      	b.n	801080e <__ascii_mbtowc+0x16>
 8010816:	f06f 0001 	mvn.w	r0, #1
 801081a:	e7f8      	b.n	801080e <__ascii_mbtowc+0x16>

0801081c <__malloc_lock>:
 801081c:	4801      	ldr	r0, [pc, #4]	; (8010824 <__malloc_lock+0x8>)
 801081e:	f7fc be7e 	b.w	800d51e <__retarget_lock_acquire_recursive>
 8010822:	bf00      	nop
 8010824:	2000639c 	.word	0x2000639c

08010828 <__malloc_unlock>:
 8010828:	4801      	ldr	r0, [pc, #4]	; (8010830 <__malloc_unlock+0x8>)
 801082a:	f7fc be79 	b.w	800d520 <__retarget_lock_release_recursive>
 801082e:	bf00      	nop
 8010830:	2000639c 	.word	0x2000639c

08010834 <_Balloc>:
 8010834:	b570      	push	{r4, r5, r6, lr}
 8010836:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010838:	4604      	mov	r4, r0
 801083a:	460d      	mov	r5, r1
 801083c:	b976      	cbnz	r6, 801085c <_Balloc+0x28>
 801083e:	2010      	movs	r0, #16
 8010840:	f7ff ffd2 	bl	80107e8 <malloc>
 8010844:	4602      	mov	r2, r0
 8010846:	6260      	str	r0, [r4, #36]	; 0x24
 8010848:	b920      	cbnz	r0, 8010854 <_Balloc+0x20>
 801084a:	4b18      	ldr	r3, [pc, #96]	; (80108ac <_Balloc+0x78>)
 801084c:	4818      	ldr	r0, [pc, #96]	; (80108b0 <_Balloc+0x7c>)
 801084e:	2166      	movs	r1, #102	; 0x66
 8010850:	f000 fea2 	bl	8011598 <__assert_func>
 8010854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010858:	6006      	str	r6, [r0, #0]
 801085a:	60c6      	str	r6, [r0, #12]
 801085c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801085e:	68f3      	ldr	r3, [r6, #12]
 8010860:	b183      	cbz	r3, 8010884 <_Balloc+0x50>
 8010862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801086a:	b9b8      	cbnz	r0, 801089c <_Balloc+0x68>
 801086c:	2101      	movs	r1, #1
 801086e:	fa01 f605 	lsl.w	r6, r1, r5
 8010872:	1d72      	adds	r2, r6, #5
 8010874:	0092      	lsls	r2, r2, #2
 8010876:	4620      	mov	r0, r4
 8010878:	f000 fc97 	bl	80111aa <_calloc_r>
 801087c:	b160      	cbz	r0, 8010898 <_Balloc+0x64>
 801087e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010882:	e00e      	b.n	80108a2 <_Balloc+0x6e>
 8010884:	2221      	movs	r2, #33	; 0x21
 8010886:	2104      	movs	r1, #4
 8010888:	4620      	mov	r0, r4
 801088a:	f000 fc8e 	bl	80111aa <_calloc_r>
 801088e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010890:	60f0      	str	r0, [r6, #12]
 8010892:	68db      	ldr	r3, [r3, #12]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d1e4      	bne.n	8010862 <_Balloc+0x2e>
 8010898:	2000      	movs	r0, #0
 801089a:	bd70      	pop	{r4, r5, r6, pc}
 801089c:	6802      	ldr	r2, [r0, #0]
 801089e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80108a2:	2300      	movs	r3, #0
 80108a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80108a8:	e7f7      	b.n	801089a <_Balloc+0x66>
 80108aa:	bf00      	nop
 80108ac:	0801389e 	.word	0x0801389e
 80108b0:	080139a4 	.word	0x080139a4

080108b4 <_Bfree>:
 80108b4:	b570      	push	{r4, r5, r6, lr}
 80108b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80108b8:	4605      	mov	r5, r0
 80108ba:	460c      	mov	r4, r1
 80108bc:	b976      	cbnz	r6, 80108dc <_Bfree+0x28>
 80108be:	2010      	movs	r0, #16
 80108c0:	f7ff ff92 	bl	80107e8 <malloc>
 80108c4:	4602      	mov	r2, r0
 80108c6:	6268      	str	r0, [r5, #36]	; 0x24
 80108c8:	b920      	cbnz	r0, 80108d4 <_Bfree+0x20>
 80108ca:	4b09      	ldr	r3, [pc, #36]	; (80108f0 <_Bfree+0x3c>)
 80108cc:	4809      	ldr	r0, [pc, #36]	; (80108f4 <_Bfree+0x40>)
 80108ce:	218a      	movs	r1, #138	; 0x8a
 80108d0:	f000 fe62 	bl	8011598 <__assert_func>
 80108d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108d8:	6006      	str	r6, [r0, #0]
 80108da:	60c6      	str	r6, [r0, #12]
 80108dc:	b13c      	cbz	r4, 80108ee <_Bfree+0x3a>
 80108de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80108e0:	6862      	ldr	r2, [r4, #4]
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108e8:	6021      	str	r1, [r4, #0]
 80108ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108ee:	bd70      	pop	{r4, r5, r6, pc}
 80108f0:	0801389e 	.word	0x0801389e
 80108f4:	080139a4 	.word	0x080139a4

080108f8 <__multadd>:
 80108f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108fc:	690e      	ldr	r6, [r1, #16]
 80108fe:	4607      	mov	r7, r0
 8010900:	4698      	mov	r8, r3
 8010902:	460c      	mov	r4, r1
 8010904:	f101 0014 	add.w	r0, r1, #20
 8010908:	2300      	movs	r3, #0
 801090a:	6805      	ldr	r5, [r0, #0]
 801090c:	b2a9      	uxth	r1, r5
 801090e:	fb02 8101 	mla	r1, r2, r1, r8
 8010912:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010916:	0c2d      	lsrs	r5, r5, #16
 8010918:	fb02 c505 	mla	r5, r2, r5, ip
 801091c:	b289      	uxth	r1, r1
 801091e:	3301      	adds	r3, #1
 8010920:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010924:	429e      	cmp	r6, r3
 8010926:	f840 1b04 	str.w	r1, [r0], #4
 801092a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801092e:	dcec      	bgt.n	801090a <__multadd+0x12>
 8010930:	f1b8 0f00 	cmp.w	r8, #0
 8010934:	d022      	beq.n	801097c <__multadd+0x84>
 8010936:	68a3      	ldr	r3, [r4, #8]
 8010938:	42b3      	cmp	r3, r6
 801093a:	dc19      	bgt.n	8010970 <__multadd+0x78>
 801093c:	6861      	ldr	r1, [r4, #4]
 801093e:	4638      	mov	r0, r7
 8010940:	3101      	adds	r1, #1
 8010942:	f7ff ff77 	bl	8010834 <_Balloc>
 8010946:	4605      	mov	r5, r0
 8010948:	b928      	cbnz	r0, 8010956 <__multadd+0x5e>
 801094a:	4602      	mov	r2, r0
 801094c:	4b0d      	ldr	r3, [pc, #52]	; (8010984 <__multadd+0x8c>)
 801094e:	480e      	ldr	r0, [pc, #56]	; (8010988 <__multadd+0x90>)
 8010950:	21b5      	movs	r1, #181	; 0xb5
 8010952:	f000 fe21 	bl	8011598 <__assert_func>
 8010956:	6922      	ldr	r2, [r4, #16]
 8010958:	3202      	adds	r2, #2
 801095a:	f104 010c 	add.w	r1, r4, #12
 801095e:	0092      	lsls	r2, r2, #2
 8010960:	300c      	adds	r0, #12
 8010962:	f7fc fdde 	bl	800d522 <memcpy>
 8010966:	4621      	mov	r1, r4
 8010968:	4638      	mov	r0, r7
 801096a:	f7ff ffa3 	bl	80108b4 <_Bfree>
 801096e:	462c      	mov	r4, r5
 8010970:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010974:	3601      	adds	r6, #1
 8010976:	f8c3 8014 	str.w	r8, [r3, #20]
 801097a:	6126      	str	r6, [r4, #16]
 801097c:	4620      	mov	r0, r4
 801097e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010982:	bf00      	nop
 8010984:	08013914 	.word	0x08013914
 8010988:	080139a4 	.word	0x080139a4

0801098c <__s2b>:
 801098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010990:	460c      	mov	r4, r1
 8010992:	4615      	mov	r5, r2
 8010994:	461f      	mov	r7, r3
 8010996:	2209      	movs	r2, #9
 8010998:	3308      	adds	r3, #8
 801099a:	4606      	mov	r6, r0
 801099c:	fb93 f3f2 	sdiv	r3, r3, r2
 80109a0:	2100      	movs	r1, #0
 80109a2:	2201      	movs	r2, #1
 80109a4:	429a      	cmp	r2, r3
 80109a6:	db09      	blt.n	80109bc <__s2b+0x30>
 80109a8:	4630      	mov	r0, r6
 80109aa:	f7ff ff43 	bl	8010834 <_Balloc>
 80109ae:	b940      	cbnz	r0, 80109c2 <__s2b+0x36>
 80109b0:	4602      	mov	r2, r0
 80109b2:	4b19      	ldr	r3, [pc, #100]	; (8010a18 <__s2b+0x8c>)
 80109b4:	4819      	ldr	r0, [pc, #100]	; (8010a1c <__s2b+0x90>)
 80109b6:	21ce      	movs	r1, #206	; 0xce
 80109b8:	f000 fdee 	bl	8011598 <__assert_func>
 80109bc:	0052      	lsls	r2, r2, #1
 80109be:	3101      	adds	r1, #1
 80109c0:	e7f0      	b.n	80109a4 <__s2b+0x18>
 80109c2:	9b08      	ldr	r3, [sp, #32]
 80109c4:	6143      	str	r3, [r0, #20]
 80109c6:	2d09      	cmp	r5, #9
 80109c8:	f04f 0301 	mov.w	r3, #1
 80109cc:	6103      	str	r3, [r0, #16]
 80109ce:	dd16      	ble.n	80109fe <__s2b+0x72>
 80109d0:	f104 0909 	add.w	r9, r4, #9
 80109d4:	46c8      	mov	r8, r9
 80109d6:	442c      	add	r4, r5
 80109d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80109dc:	4601      	mov	r1, r0
 80109de:	3b30      	subs	r3, #48	; 0x30
 80109e0:	220a      	movs	r2, #10
 80109e2:	4630      	mov	r0, r6
 80109e4:	f7ff ff88 	bl	80108f8 <__multadd>
 80109e8:	45a0      	cmp	r8, r4
 80109ea:	d1f5      	bne.n	80109d8 <__s2b+0x4c>
 80109ec:	f1a5 0408 	sub.w	r4, r5, #8
 80109f0:	444c      	add	r4, r9
 80109f2:	1b2d      	subs	r5, r5, r4
 80109f4:	1963      	adds	r3, r4, r5
 80109f6:	42bb      	cmp	r3, r7
 80109f8:	db04      	blt.n	8010a04 <__s2b+0x78>
 80109fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109fe:	340a      	adds	r4, #10
 8010a00:	2509      	movs	r5, #9
 8010a02:	e7f6      	b.n	80109f2 <__s2b+0x66>
 8010a04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010a08:	4601      	mov	r1, r0
 8010a0a:	3b30      	subs	r3, #48	; 0x30
 8010a0c:	220a      	movs	r2, #10
 8010a0e:	4630      	mov	r0, r6
 8010a10:	f7ff ff72 	bl	80108f8 <__multadd>
 8010a14:	e7ee      	b.n	80109f4 <__s2b+0x68>
 8010a16:	bf00      	nop
 8010a18:	08013914 	.word	0x08013914
 8010a1c:	080139a4 	.word	0x080139a4

08010a20 <__hi0bits>:
 8010a20:	0c03      	lsrs	r3, r0, #16
 8010a22:	041b      	lsls	r3, r3, #16
 8010a24:	b9d3      	cbnz	r3, 8010a5c <__hi0bits+0x3c>
 8010a26:	0400      	lsls	r0, r0, #16
 8010a28:	2310      	movs	r3, #16
 8010a2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010a2e:	bf04      	itt	eq
 8010a30:	0200      	lsleq	r0, r0, #8
 8010a32:	3308      	addeq	r3, #8
 8010a34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010a38:	bf04      	itt	eq
 8010a3a:	0100      	lsleq	r0, r0, #4
 8010a3c:	3304      	addeq	r3, #4
 8010a3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010a42:	bf04      	itt	eq
 8010a44:	0080      	lsleq	r0, r0, #2
 8010a46:	3302      	addeq	r3, #2
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	db05      	blt.n	8010a58 <__hi0bits+0x38>
 8010a4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010a50:	f103 0301 	add.w	r3, r3, #1
 8010a54:	bf08      	it	eq
 8010a56:	2320      	moveq	r3, #32
 8010a58:	4618      	mov	r0, r3
 8010a5a:	4770      	bx	lr
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	e7e4      	b.n	8010a2a <__hi0bits+0xa>

08010a60 <__lo0bits>:
 8010a60:	6803      	ldr	r3, [r0, #0]
 8010a62:	f013 0207 	ands.w	r2, r3, #7
 8010a66:	4601      	mov	r1, r0
 8010a68:	d00b      	beq.n	8010a82 <__lo0bits+0x22>
 8010a6a:	07da      	lsls	r2, r3, #31
 8010a6c:	d424      	bmi.n	8010ab8 <__lo0bits+0x58>
 8010a6e:	0798      	lsls	r0, r3, #30
 8010a70:	bf49      	itett	mi
 8010a72:	085b      	lsrmi	r3, r3, #1
 8010a74:	089b      	lsrpl	r3, r3, #2
 8010a76:	2001      	movmi	r0, #1
 8010a78:	600b      	strmi	r3, [r1, #0]
 8010a7a:	bf5c      	itt	pl
 8010a7c:	600b      	strpl	r3, [r1, #0]
 8010a7e:	2002      	movpl	r0, #2
 8010a80:	4770      	bx	lr
 8010a82:	b298      	uxth	r0, r3
 8010a84:	b9b0      	cbnz	r0, 8010ab4 <__lo0bits+0x54>
 8010a86:	0c1b      	lsrs	r3, r3, #16
 8010a88:	2010      	movs	r0, #16
 8010a8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010a8e:	bf04      	itt	eq
 8010a90:	0a1b      	lsreq	r3, r3, #8
 8010a92:	3008      	addeq	r0, #8
 8010a94:	071a      	lsls	r2, r3, #28
 8010a96:	bf04      	itt	eq
 8010a98:	091b      	lsreq	r3, r3, #4
 8010a9a:	3004      	addeq	r0, #4
 8010a9c:	079a      	lsls	r2, r3, #30
 8010a9e:	bf04      	itt	eq
 8010aa0:	089b      	lsreq	r3, r3, #2
 8010aa2:	3002      	addeq	r0, #2
 8010aa4:	07da      	lsls	r2, r3, #31
 8010aa6:	d403      	bmi.n	8010ab0 <__lo0bits+0x50>
 8010aa8:	085b      	lsrs	r3, r3, #1
 8010aaa:	f100 0001 	add.w	r0, r0, #1
 8010aae:	d005      	beq.n	8010abc <__lo0bits+0x5c>
 8010ab0:	600b      	str	r3, [r1, #0]
 8010ab2:	4770      	bx	lr
 8010ab4:	4610      	mov	r0, r2
 8010ab6:	e7e8      	b.n	8010a8a <__lo0bits+0x2a>
 8010ab8:	2000      	movs	r0, #0
 8010aba:	4770      	bx	lr
 8010abc:	2020      	movs	r0, #32
 8010abe:	4770      	bx	lr

08010ac0 <__i2b>:
 8010ac0:	b510      	push	{r4, lr}
 8010ac2:	460c      	mov	r4, r1
 8010ac4:	2101      	movs	r1, #1
 8010ac6:	f7ff feb5 	bl	8010834 <_Balloc>
 8010aca:	4602      	mov	r2, r0
 8010acc:	b928      	cbnz	r0, 8010ada <__i2b+0x1a>
 8010ace:	4b05      	ldr	r3, [pc, #20]	; (8010ae4 <__i2b+0x24>)
 8010ad0:	4805      	ldr	r0, [pc, #20]	; (8010ae8 <__i2b+0x28>)
 8010ad2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010ad6:	f000 fd5f 	bl	8011598 <__assert_func>
 8010ada:	2301      	movs	r3, #1
 8010adc:	6144      	str	r4, [r0, #20]
 8010ade:	6103      	str	r3, [r0, #16]
 8010ae0:	bd10      	pop	{r4, pc}
 8010ae2:	bf00      	nop
 8010ae4:	08013914 	.word	0x08013914
 8010ae8:	080139a4 	.word	0x080139a4

08010aec <__multiply>:
 8010aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af0:	4614      	mov	r4, r2
 8010af2:	690a      	ldr	r2, [r1, #16]
 8010af4:	6923      	ldr	r3, [r4, #16]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	bfb8      	it	lt
 8010afa:	460b      	movlt	r3, r1
 8010afc:	460d      	mov	r5, r1
 8010afe:	bfbc      	itt	lt
 8010b00:	4625      	movlt	r5, r4
 8010b02:	461c      	movlt	r4, r3
 8010b04:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010b08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010b0c:	68ab      	ldr	r3, [r5, #8]
 8010b0e:	6869      	ldr	r1, [r5, #4]
 8010b10:	eb0a 0709 	add.w	r7, sl, r9
 8010b14:	42bb      	cmp	r3, r7
 8010b16:	b085      	sub	sp, #20
 8010b18:	bfb8      	it	lt
 8010b1a:	3101      	addlt	r1, #1
 8010b1c:	f7ff fe8a 	bl	8010834 <_Balloc>
 8010b20:	b930      	cbnz	r0, 8010b30 <__multiply+0x44>
 8010b22:	4602      	mov	r2, r0
 8010b24:	4b42      	ldr	r3, [pc, #264]	; (8010c30 <__multiply+0x144>)
 8010b26:	4843      	ldr	r0, [pc, #268]	; (8010c34 <__multiply+0x148>)
 8010b28:	f240 115d 	movw	r1, #349	; 0x15d
 8010b2c:	f000 fd34 	bl	8011598 <__assert_func>
 8010b30:	f100 0614 	add.w	r6, r0, #20
 8010b34:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010b38:	4633      	mov	r3, r6
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	4543      	cmp	r3, r8
 8010b3e:	d31e      	bcc.n	8010b7e <__multiply+0x92>
 8010b40:	f105 0c14 	add.w	ip, r5, #20
 8010b44:	f104 0314 	add.w	r3, r4, #20
 8010b48:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010b4c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010b50:	9202      	str	r2, [sp, #8]
 8010b52:	ebac 0205 	sub.w	r2, ip, r5
 8010b56:	3a15      	subs	r2, #21
 8010b58:	f022 0203 	bic.w	r2, r2, #3
 8010b5c:	3204      	adds	r2, #4
 8010b5e:	f105 0115 	add.w	r1, r5, #21
 8010b62:	458c      	cmp	ip, r1
 8010b64:	bf38      	it	cc
 8010b66:	2204      	movcc	r2, #4
 8010b68:	9201      	str	r2, [sp, #4]
 8010b6a:	9a02      	ldr	r2, [sp, #8]
 8010b6c:	9303      	str	r3, [sp, #12]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d808      	bhi.n	8010b84 <__multiply+0x98>
 8010b72:	2f00      	cmp	r7, #0
 8010b74:	dc55      	bgt.n	8010c22 <__multiply+0x136>
 8010b76:	6107      	str	r7, [r0, #16]
 8010b78:	b005      	add	sp, #20
 8010b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b7e:	f843 2b04 	str.w	r2, [r3], #4
 8010b82:	e7db      	b.n	8010b3c <__multiply+0x50>
 8010b84:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b88:	f1ba 0f00 	cmp.w	sl, #0
 8010b8c:	d020      	beq.n	8010bd0 <__multiply+0xe4>
 8010b8e:	f105 0e14 	add.w	lr, r5, #20
 8010b92:	46b1      	mov	r9, r6
 8010b94:	2200      	movs	r2, #0
 8010b96:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010b9a:	f8d9 b000 	ldr.w	fp, [r9]
 8010b9e:	b2a1      	uxth	r1, r4
 8010ba0:	fa1f fb8b 	uxth.w	fp, fp
 8010ba4:	fb0a b101 	mla	r1, sl, r1, fp
 8010ba8:	4411      	add	r1, r2
 8010baa:	f8d9 2000 	ldr.w	r2, [r9]
 8010bae:	0c24      	lsrs	r4, r4, #16
 8010bb0:	0c12      	lsrs	r2, r2, #16
 8010bb2:	fb0a 2404 	mla	r4, sl, r4, r2
 8010bb6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010bba:	b289      	uxth	r1, r1
 8010bbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010bc0:	45f4      	cmp	ip, lr
 8010bc2:	f849 1b04 	str.w	r1, [r9], #4
 8010bc6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010bca:	d8e4      	bhi.n	8010b96 <__multiply+0xaa>
 8010bcc:	9901      	ldr	r1, [sp, #4]
 8010bce:	5072      	str	r2, [r6, r1]
 8010bd0:	9a03      	ldr	r2, [sp, #12]
 8010bd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010bd6:	3304      	adds	r3, #4
 8010bd8:	f1b9 0f00 	cmp.w	r9, #0
 8010bdc:	d01f      	beq.n	8010c1e <__multiply+0x132>
 8010bde:	6834      	ldr	r4, [r6, #0]
 8010be0:	f105 0114 	add.w	r1, r5, #20
 8010be4:	46b6      	mov	lr, r6
 8010be6:	f04f 0a00 	mov.w	sl, #0
 8010bea:	880a      	ldrh	r2, [r1, #0]
 8010bec:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010bf0:	fb09 b202 	mla	r2, r9, r2, fp
 8010bf4:	4492      	add	sl, r2
 8010bf6:	b2a4      	uxth	r4, r4
 8010bf8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010bfc:	f84e 4b04 	str.w	r4, [lr], #4
 8010c00:	f851 4b04 	ldr.w	r4, [r1], #4
 8010c04:	f8be 2000 	ldrh.w	r2, [lr]
 8010c08:	0c24      	lsrs	r4, r4, #16
 8010c0a:	fb09 2404 	mla	r4, r9, r4, r2
 8010c0e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010c12:	458c      	cmp	ip, r1
 8010c14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010c18:	d8e7      	bhi.n	8010bea <__multiply+0xfe>
 8010c1a:	9a01      	ldr	r2, [sp, #4]
 8010c1c:	50b4      	str	r4, [r6, r2]
 8010c1e:	3604      	adds	r6, #4
 8010c20:	e7a3      	b.n	8010b6a <__multiply+0x7e>
 8010c22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d1a5      	bne.n	8010b76 <__multiply+0x8a>
 8010c2a:	3f01      	subs	r7, #1
 8010c2c:	e7a1      	b.n	8010b72 <__multiply+0x86>
 8010c2e:	bf00      	nop
 8010c30:	08013914 	.word	0x08013914
 8010c34:	080139a4 	.word	0x080139a4

08010c38 <__pow5mult>:
 8010c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c3c:	4615      	mov	r5, r2
 8010c3e:	f012 0203 	ands.w	r2, r2, #3
 8010c42:	4606      	mov	r6, r0
 8010c44:	460f      	mov	r7, r1
 8010c46:	d007      	beq.n	8010c58 <__pow5mult+0x20>
 8010c48:	4c25      	ldr	r4, [pc, #148]	; (8010ce0 <__pow5mult+0xa8>)
 8010c4a:	3a01      	subs	r2, #1
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c52:	f7ff fe51 	bl	80108f8 <__multadd>
 8010c56:	4607      	mov	r7, r0
 8010c58:	10ad      	asrs	r5, r5, #2
 8010c5a:	d03d      	beq.n	8010cd8 <__pow5mult+0xa0>
 8010c5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010c5e:	b97c      	cbnz	r4, 8010c80 <__pow5mult+0x48>
 8010c60:	2010      	movs	r0, #16
 8010c62:	f7ff fdc1 	bl	80107e8 <malloc>
 8010c66:	4602      	mov	r2, r0
 8010c68:	6270      	str	r0, [r6, #36]	; 0x24
 8010c6a:	b928      	cbnz	r0, 8010c78 <__pow5mult+0x40>
 8010c6c:	4b1d      	ldr	r3, [pc, #116]	; (8010ce4 <__pow5mult+0xac>)
 8010c6e:	481e      	ldr	r0, [pc, #120]	; (8010ce8 <__pow5mult+0xb0>)
 8010c70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010c74:	f000 fc90 	bl	8011598 <__assert_func>
 8010c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c7c:	6004      	str	r4, [r0, #0]
 8010c7e:	60c4      	str	r4, [r0, #12]
 8010c80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c88:	b94c      	cbnz	r4, 8010c9e <__pow5mult+0x66>
 8010c8a:	f240 2171 	movw	r1, #625	; 0x271
 8010c8e:	4630      	mov	r0, r6
 8010c90:	f7ff ff16 	bl	8010ac0 <__i2b>
 8010c94:	2300      	movs	r3, #0
 8010c96:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	6003      	str	r3, [r0, #0]
 8010c9e:	f04f 0900 	mov.w	r9, #0
 8010ca2:	07eb      	lsls	r3, r5, #31
 8010ca4:	d50a      	bpl.n	8010cbc <__pow5mult+0x84>
 8010ca6:	4639      	mov	r1, r7
 8010ca8:	4622      	mov	r2, r4
 8010caa:	4630      	mov	r0, r6
 8010cac:	f7ff ff1e 	bl	8010aec <__multiply>
 8010cb0:	4639      	mov	r1, r7
 8010cb2:	4680      	mov	r8, r0
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	f7ff fdfd 	bl	80108b4 <_Bfree>
 8010cba:	4647      	mov	r7, r8
 8010cbc:	106d      	asrs	r5, r5, #1
 8010cbe:	d00b      	beq.n	8010cd8 <__pow5mult+0xa0>
 8010cc0:	6820      	ldr	r0, [r4, #0]
 8010cc2:	b938      	cbnz	r0, 8010cd4 <__pow5mult+0x9c>
 8010cc4:	4622      	mov	r2, r4
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	4630      	mov	r0, r6
 8010cca:	f7ff ff0f 	bl	8010aec <__multiply>
 8010cce:	6020      	str	r0, [r4, #0]
 8010cd0:	f8c0 9000 	str.w	r9, [r0]
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	e7e4      	b.n	8010ca2 <__pow5mult+0x6a>
 8010cd8:	4638      	mov	r0, r7
 8010cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cde:	bf00      	nop
 8010ce0:	08013af8 	.word	0x08013af8
 8010ce4:	0801389e 	.word	0x0801389e
 8010ce8:	080139a4 	.word	0x080139a4

08010cec <__lshift>:
 8010cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cf0:	460c      	mov	r4, r1
 8010cf2:	6849      	ldr	r1, [r1, #4]
 8010cf4:	6923      	ldr	r3, [r4, #16]
 8010cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010cfa:	68a3      	ldr	r3, [r4, #8]
 8010cfc:	4607      	mov	r7, r0
 8010cfe:	4691      	mov	r9, r2
 8010d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d04:	f108 0601 	add.w	r6, r8, #1
 8010d08:	42b3      	cmp	r3, r6
 8010d0a:	db0b      	blt.n	8010d24 <__lshift+0x38>
 8010d0c:	4638      	mov	r0, r7
 8010d0e:	f7ff fd91 	bl	8010834 <_Balloc>
 8010d12:	4605      	mov	r5, r0
 8010d14:	b948      	cbnz	r0, 8010d2a <__lshift+0x3e>
 8010d16:	4602      	mov	r2, r0
 8010d18:	4b28      	ldr	r3, [pc, #160]	; (8010dbc <__lshift+0xd0>)
 8010d1a:	4829      	ldr	r0, [pc, #164]	; (8010dc0 <__lshift+0xd4>)
 8010d1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010d20:	f000 fc3a 	bl	8011598 <__assert_func>
 8010d24:	3101      	adds	r1, #1
 8010d26:	005b      	lsls	r3, r3, #1
 8010d28:	e7ee      	b.n	8010d08 <__lshift+0x1c>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	f100 0114 	add.w	r1, r0, #20
 8010d30:	f100 0210 	add.w	r2, r0, #16
 8010d34:	4618      	mov	r0, r3
 8010d36:	4553      	cmp	r3, sl
 8010d38:	db33      	blt.n	8010da2 <__lshift+0xb6>
 8010d3a:	6920      	ldr	r0, [r4, #16]
 8010d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d40:	f104 0314 	add.w	r3, r4, #20
 8010d44:	f019 091f 	ands.w	r9, r9, #31
 8010d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d50:	d02b      	beq.n	8010daa <__lshift+0xbe>
 8010d52:	f1c9 0e20 	rsb	lr, r9, #32
 8010d56:	468a      	mov	sl, r1
 8010d58:	2200      	movs	r2, #0
 8010d5a:	6818      	ldr	r0, [r3, #0]
 8010d5c:	fa00 f009 	lsl.w	r0, r0, r9
 8010d60:	4302      	orrs	r2, r0
 8010d62:	f84a 2b04 	str.w	r2, [sl], #4
 8010d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d6a:	459c      	cmp	ip, r3
 8010d6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d70:	d8f3      	bhi.n	8010d5a <__lshift+0x6e>
 8010d72:	ebac 0304 	sub.w	r3, ip, r4
 8010d76:	3b15      	subs	r3, #21
 8010d78:	f023 0303 	bic.w	r3, r3, #3
 8010d7c:	3304      	adds	r3, #4
 8010d7e:	f104 0015 	add.w	r0, r4, #21
 8010d82:	4584      	cmp	ip, r0
 8010d84:	bf38      	it	cc
 8010d86:	2304      	movcc	r3, #4
 8010d88:	50ca      	str	r2, [r1, r3]
 8010d8a:	b10a      	cbz	r2, 8010d90 <__lshift+0xa4>
 8010d8c:	f108 0602 	add.w	r6, r8, #2
 8010d90:	3e01      	subs	r6, #1
 8010d92:	4638      	mov	r0, r7
 8010d94:	612e      	str	r6, [r5, #16]
 8010d96:	4621      	mov	r1, r4
 8010d98:	f7ff fd8c 	bl	80108b4 <_Bfree>
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010da2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010da6:	3301      	adds	r3, #1
 8010da8:	e7c5      	b.n	8010d36 <__lshift+0x4a>
 8010daa:	3904      	subs	r1, #4
 8010dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8010db0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010db4:	459c      	cmp	ip, r3
 8010db6:	d8f9      	bhi.n	8010dac <__lshift+0xc0>
 8010db8:	e7ea      	b.n	8010d90 <__lshift+0xa4>
 8010dba:	bf00      	nop
 8010dbc:	08013914 	.word	0x08013914
 8010dc0:	080139a4 	.word	0x080139a4

08010dc4 <__mcmp>:
 8010dc4:	b530      	push	{r4, r5, lr}
 8010dc6:	6902      	ldr	r2, [r0, #16]
 8010dc8:	690c      	ldr	r4, [r1, #16]
 8010dca:	1b12      	subs	r2, r2, r4
 8010dcc:	d10e      	bne.n	8010dec <__mcmp+0x28>
 8010dce:	f100 0314 	add.w	r3, r0, #20
 8010dd2:	3114      	adds	r1, #20
 8010dd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010dd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010ddc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010de0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010de4:	42a5      	cmp	r5, r4
 8010de6:	d003      	beq.n	8010df0 <__mcmp+0x2c>
 8010de8:	d305      	bcc.n	8010df6 <__mcmp+0x32>
 8010dea:	2201      	movs	r2, #1
 8010dec:	4610      	mov	r0, r2
 8010dee:	bd30      	pop	{r4, r5, pc}
 8010df0:	4283      	cmp	r3, r0
 8010df2:	d3f3      	bcc.n	8010ddc <__mcmp+0x18>
 8010df4:	e7fa      	b.n	8010dec <__mcmp+0x28>
 8010df6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dfa:	e7f7      	b.n	8010dec <__mcmp+0x28>

08010dfc <__mdiff>:
 8010dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e00:	460c      	mov	r4, r1
 8010e02:	4606      	mov	r6, r0
 8010e04:	4611      	mov	r1, r2
 8010e06:	4620      	mov	r0, r4
 8010e08:	4617      	mov	r7, r2
 8010e0a:	f7ff ffdb 	bl	8010dc4 <__mcmp>
 8010e0e:	1e05      	subs	r5, r0, #0
 8010e10:	d110      	bne.n	8010e34 <__mdiff+0x38>
 8010e12:	4629      	mov	r1, r5
 8010e14:	4630      	mov	r0, r6
 8010e16:	f7ff fd0d 	bl	8010834 <_Balloc>
 8010e1a:	b930      	cbnz	r0, 8010e2a <__mdiff+0x2e>
 8010e1c:	4b39      	ldr	r3, [pc, #228]	; (8010f04 <__mdiff+0x108>)
 8010e1e:	4602      	mov	r2, r0
 8010e20:	f240 2132 	movw	r1, #562	; 0x232
 8010e24:	4838      	ldr	r0, [pc, #224]	; (8010f08 <__mdiff+0x10c>)
 8010e26:	f000 fbb7 	bl	8011598 <__assert_func>
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e34:	bfa4      	itt	ge
 8010e36:	463b      	movge	r3, r7
 8010e38:	4627      	movge	r7, r4
 8010e3a:	4630      	mov	r0, r6
 8010e3c:	6879      	ldr	r1, [r7, #4]
 8010e3e:	bfa6      	itte	ge
 8010e40:	461c      	movge	r4, r3
 8010e42:	2500      	movge	r5, #0
 8010e44:	2501      	movlt	r5, #1
 8010e46:	f7ff fcf5 	bl	8010834 <_Balloc>
 8010e4a:	b920      	cbnz	r0, 8010e56 <__mdiff+0x5a>
 8010e4c:	4b2d      	ldr	r3, [pc, #180]	; (8010f04 <__mdiff+0x108>)
 8010e4e:	4602      	mov	r2, r0
 8010e50:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010e54:	e7e6      	b.n	8010e24 <__mdiff+0x28>
 8010e56:	693e      	ldr	r6, [r7, #16]
 8010e58:	60c5      	str	r5, [r0, #12]
 8010e5a:	6925      	ldr	r5, [r4, #16]
 8010e5c:	f107 0114 	add.w	r1, r7, #20
 8010e60:	f104 0914 	add.w	r9, r4, #20
 8010e64:	f100 0e14 	add.w	lr, r0, #20
 8010e68:	f107 0210 	add.w	r2, r7, #16
 8010e6c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010e70:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010e74:	46f2      	mov	sl, lr
 8010e76:	2700      	movs	r7, #0
 8010e78:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e80:	fa1f f883 	uxth.w	r8, r3
 8010e84:	fa17 f78b 	uxtah	r7, r7, fp
 8010e88:	0c1b      	lsrs	r3, r3, #16
 8010e8a:	eba7 0808 	sub.w	r8, r7, r8
 8010e8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e96:	fa1f f888 	uxth.w	r8, r8
 8010e9a:	141f      	asrs	r7, r3, #16
 8010e9c:	454d      	cmp	r5, r9
 8010e9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010ea2:	f84a 3b04 	str.w	r3, [sl], #4
 8010ea6:	d8e7      	bhi.n	8010e78 <__mdiff+0x7c>
 8010ea8:	1b2b      	subs	r3, r5, r4
 8010eaa:	3b15      	subs	r3, #21
 8010eac:	f023 0303 	bic.w	r3, r3, #3
 8010eb0:	3304      	adds	r3, #4
 8010eb2:	3415      	adds	r4, #21
 8010eb4:	42a5      	cmp	r5, r4
 8010eb6:	bf38      	it	cc
 8010eb8:	2304      	movcc	r3, #4
 8010eba:	4419      	add	r1, r3
 8010ebc:	4473      	add	r3, lr
 8010ebe:	469e      	mov	lr, r3
 8010ec0:	460d      	mov	r5, r1
 8010ec2:	4565      	cmp	r5, ip
 8010ec4:	d30e      	bcc.n	8010ee4 <__mdiff+0xe8>
 8010ec6:	f10c 0203 	add.w	r2, ip, #3
 8010eca:	1a52      	subs	r2, r2, r1
 8010ecc:	f022 0203 	bic.w	r2, r2, #3
 8010ed0:	3903      	subs	r1, #3
 8010ed2:	458c      	cmp	ip, r1
 8010ed4:	bf38      	it	cc
 8010ed6:	2200      	movcc	r2, #0
 8010ed8:	441a      	add	r2, r3
 8010eda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ede:	b17b      	cbz	r3, 8010f00 <__mdiff+0x104>
 8010ee0:	6106      	str	r6, [r0, #16]
 8010ee2:	e7a5      	b.n	8010e30 <__mdiff+0x34>
 8010ee4:	f855 8b04 	ldr.w	r8, [r5], #4
 8010ee8:	fa17 f488 	uxtah	r4, r7, r8
 8010eec:	1422      	asrs	r2, r4, #16
 8010eee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010ef2:	b2a4      	uxth	r4, r4
 8010ef4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010ef8:	f84e 4b04 	str.w	r4, [lr], #4
 8010efc:	1417      	asrs	r7, r2, #16
 8010efe:	e7e0      	b.n	8010ec2 <__mdiff+0xc6>
 8010f00:	3e01      	subs	r6, #1
 8010f02:	e7ea      	b.n	8010eda <__mdiff+0xde>
 8010f04:	08013914 	.word	0x08013914
 8010f08:	080139a4 	.word	0x080139a4

08010f0c <__ulp>:
 8010f0c:	b082      	sub	sp, #8
 8010f0e:	ed8d 0b00 	vstr	d0, [sp]
 8010f12:	9b01      	ldr	r3, [sp, #4]
 8010f14:	4912      	ldr	r1, [pc, #72]	; (8010f60 <__ulp+0x54>)
 8010f16:	4019      	ands	r1, r3
 8010f18:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010f1c:	2900      	cmp	r1, #0
 8010f1e:	dd05      	ble.n	8010f2c <__ulp+0x20>
 8010f20:	2200      	movs	r2, #0
 8010f22:	460b      	mov	r3, r1
 8010f24:	ec43 2b10 	vmov	d0, r2, r3
 8010f28:	b002      	add	sp, #8
 8010f2a:	4770      	bx	lr
 8010f2c:	4249      	negs	r1, r1
 8010f2e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010f32:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010f36:	f04f 0200 	mov.w	r2, #0
 8010f3a:	f04f 0300 	mov.w	r3, #0
 8010f3e:	da04      	bge.n	8010f4a <__ulp+0x3e>
 8010f40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010f44:	fa41 f300 	asr.w	r3, r1, r0
 8010f48:	e7ec      	b.n	8010f24 <__ulp+0x18>
 8010f4a:	f1a0 0114 	sub.w	r1, r0, #20
 8010f4e:	291e      	cmp	r1, #30
 8010f50:	bfda      	itte	le
 8010f52:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010f56:	fa20 f101 	lsrle.w	r1, r0, r1
 8010f5a:	2101      	movgt	r1, #1
 8010f5c:	460a      	mov	r2, r1
 8010f5e:	e7e1      	b.n	8010f24 <__ulp+0x18>
 8010f60:	7ff00000 	.word	0x7ff00000

08010f64 <__b2d>:
 8010f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f66:	6905      	ldr	r5, [r0, #16]
 8010f68:	f100 0714 	add.w	r7, r0, #20
 8010f6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010f70:	1f2e      	subs	r6, r5, #4
 8010f72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010f76:	4620      	mov	r0, r4
 8010f78:	f7ff fd52 	bl	8010a20 <__hi0bits>
 8010f7c:	f1c0 0320 	rsb	r3, r0, #32
 8010f80:	280a      	cmp	r0, #10
 8010f82:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011000 <__b2d+0x9c>
 8010f86:	600b      	str	r3, [r1, #0]
 8010f88:	dc14      	bgt.n	8010fb4 <__b2d+0x50>
 8010f8a:	f1c0 0e0b 	rsb	lr, r0, #11
 8010f8e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010f92:	42b7      	cmp	r7, r6
 8010f94:	ea41 030c 	orr.w	r3, r1, ip
 8010f98:	bf34      	ite	cc
 8010f9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010f9e:	2100      	movcs	r1, #0
 8010fa0:	3015      	adds	r0, #21
 8010fa2:	fa04 f000 	lsl.w	r0, r4, r0
 8010fa6:	fa21 f10e 	lsr.w	r1, r1, lr
 8010faa:	ea40 0201 	orr.w	r2, r0, r1
 8010fae:	ec43 2b10 	vmov	d0, r2, r3
 8010fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fb4:	42b7      	cmp	r7, r6
 8010fb6:	bf3a      	itte	cc
 8010fb8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010fbc:	f1a5 0608 	subcc.w	r6, r5, #8
 8010fc0:	2100      	movcs	r1, #0
 8010fc2:	380b      	subs	r0, #11
 8010fc4:	d017      	beq.n	8010ff6 <__b2d+0x92>
 8010fc6:	f1c0 0c20 	rsb	ip, r0, #32
 8010fca:	fa04 f500 	lsl.w	r5, r4, r0
 8010fce:	42be      	cmp	r6, r7
 8010fd0:	fa21 f40c 	lsr.w	r4, r1, ip
 8010fd4:	ea45 0504 	orr.w	r5, r5, r4
 8010fd8:	bf8c      	ite	hi
 8010fda:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010fde:	2400      	movls	r4, #0
 8010fe0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010fe4:	fa01 f000 	lsl.w	r0, r1, r0
 8010fe8:	fa24 f40c 	lsr.w	r4, r4, ip
 8010fec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010ff0:	ea40 0204 	orr.w	r2, r0, r4
 8010ff4:	e7db      	b.n	8010fae <__b2d+0x4a>
 8010ff6:	ea44 030c 	orr.w	r3, r4, ip
 8010ffa:	460a      	mov	r2, r1
 8010ffc:	e7d7      	b.n	8010fae <__b2d+0x4a>
 8010ffe:	bf00      	nop
 8011000:	3ff00000 	.word	0x3ff00000

08011004 <__d2b>:
 8011004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011008:	4689      	mov	r9, r1
 801100a:	2101      	movs	r1, #1
 801100c:	ec57 6b10 	vmov	r6, r7, d0
 8011010:	4690      	mov	r8, r2
 8011012:	f7ff fc0f 	bl	8010834 <_Balloc>
 8011016:	4604      	mov	r4, r0
 8011018:	b930      	cbnz	r0, 8011028 <__d2b+0x24>
 801101a:	4602      	mov	r2, r0
 801101c:	4b25      	ldr	r3, [pc, #148]	; (80110b4 <__d2b+0xb0>)
 801101e:	4826      	ldr	r0, [pc, #152]	; (80110b8 <__d2b+0xb4>)
 8011020:	f240 310a 	movw	r1, #778	; 0x30a
 8011024:	f000 fab8 	bl	8011598 <__assert_func>
 8011028:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801102c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011030:	bb35      	cbnz	r5, 8011080 <__d2b+0x7c>
 8011032:	2e00      	cmp	r6, #0
 8011034:	9301      	str	r3, [sp, #4]
 8011036:	d028      	beq.n	801108a <__d2b+0x86>
 8011038:	4668      	mov	r0, sp
 801103a:	9600      	str	r6, [sp, #0]
 801103c:	f7ff fd10 	bl	8010a60 <__lo0bits>
 8011040:	9900      	ldr	r1, [sp, #0]
 8011042:	b300      	cbz	r0, 8011086 <__d2b+0x82>
 8011044:	9a01      	ldr	r2, [sp, #4]
 8011046:	f1c0 0320 	rsb	r3, r0, #32
 801104a:	fa02 f303 	lsl.w	r3, r2, r3
 801104e:	430b      	orrs	r3, r1
 8011050:	40c2      	lsrs	r2, r0
 8011052:	6163      	str	r3, [r4, #20]
 8011054:	9201      	str	r2, [sp, #4]
 8011056:	9b01      	ldr	r3, [sp, #4]
 8011058:	61a3      	str	r3, [r4, #24]
 801105a:	2b00      	cmp	r3, #0
 801105c:	bf14      	ite	ne
 801105e:	2202      	movne	r2, #2
 8011060:	2201      	moveq	r2, #1
 8011062:	6122      	str	r2, [r4, #16]
 8011064:	b1d5      	cbz	r5, 801109c <__d2b+0x98>
 8011066:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801106a:	4405      	add	r5, r0
 801106c:	f8c9 5000 	str.w	r5, [r9]
 8011070:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011074:	f8c8 0000 	str.w	r0, [r8]
 8011078:	4620      	mov	r0, r4
 801107a:	b003      	add	sp, #12
 801107c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011084:	e7d5      	b.n	8011032 <__d2b+0x2e>
 8011086:	6161      	str	r1, [r4, #20]
 8011088:	e7e5      	b.n	8011056 <__d2b+0x52>
 801108a:	a801      	add	r0, sp, #4
 801108c:	f7ff fce8 	bl	8010a60 <__lo0bits>
 8011090:	9b01      	ldr	r3, [sp, #4]
 8011092:	6163      	str	r3, [r4, #20]
 8011094:	2201      	movs	r2, #1
 8011096:	6122      	str	r2, [r4, #16]
 8011098:	3020      	adds	r0, #32
 801109a:	e7e3      	b.n	8011064 <__d2b+0x60>
 801109c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80110a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80110a4:	f8c9 0000 	str.w	r0, [r9]
 80110a8:	6918      	ldr	r0, [r3, #16]
 80110aa:	f7ff fcb9 	bl	8010a20 <__hi0bits>
 80110ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80110b2:	e7df      	b.n	8011074 <__d2b+0x70>
 80110b4:	08013914 	.word	0x08013914
 80110b8:	080139a4 	.word	0x080139a4

080110bc <__ratio>:
 80110bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c0:	4688      	mov	r8, r1
 80110c2:	4669      	mov	r1, sp
 80110c4:	4681      	mov	r9, r0
 80110c6:	f7ff ff4d 	bl	8010f64 <__b2d>
 80110ca:	a901      	add	r1, sp, #4
 80110cc:	4640      	mov	r0, r8
 80110ce:	ec55 4b10 	vmov	r4, r5, d0
 80110d2:	f7ff ff47 	bl	8010f64 <__b2d>
 80110d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80110da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80110de:	eba3 0c02 	sub.w	ip, r3, r2
 80110e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80110e6:	1a9b      	subs	r3, r3, r2
 80110e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80110ec:	ec51 0b10 	vmov	r0, r1, d0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	bfd6      	itet	le
 80110f4:	460a      	movle	r2, r1
 80110f6:	462a      	movgt	r2, r5
 80110f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80110fc:	468b      	mov	fp, r1
 80110fe:	462f      	mov	r7, r5
 8011100:	bfd4      	ite	le
 8011102:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011106:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801110a:	4620      	mov	r0, r4
 801110c:	ee10 2a10 	vmov	r2, s0
 8011110:	465b      	mov	r3, fp
 8011112:	4639      	mov	r1, r7
 8011114:	f7ef fb9a 	bl	800084c <__aeabi_ddiv>
 8011118:	ec41 0b10 	vmov	d0, r0, r1
 801111c:	b003      	add	sp, #12
 801111e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011122 <__copybits>:
 8011122:	3901      	subs	r1, #1
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	1149      	asrs	r1, r1, #5
 8011128:	6914      	ldr	r4, [r2, #16]
 801112a:	3101      	adds	r1, #1
 801112c:	f102 0314 	add.w	r3, r2, #20
 8011130:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011134:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011138:	1f05      	subs	r5, r0, #4
 801113a:	42a3      	cmp	r3, r4
 801113c:	d30c      	bcc.n	8011158 <__copybits+0x36>
 801113e:	1aa3      	subs	r3, r4, r2
 8011140:	3b11      	subs	r3, #17
 8011142:	f023 0303 	bic.w	r3, r3, #3
 8011146:	3211      	adds	r2, #17
 8011148:	42a2      	cmp	r2, r4
 801114a:	bf88      	it	hi
 801114c:	2300      	movhi	r3, #0
 801114e:	4418      	add	r0, r3
 8011150:	2300      	movs	r3, #0
 8011152:	4288      	cmp	r0, r1
 8011154:	d305      	bcc.n	8011162 <__copybits+0x40>
 8011156:	bd70      	pop	{r4, r5, r6, pc}
 8011158:	f853 6b04 	ldr.w	r6, [r3], #4
 801115c:	f845 6f04 	str.w	r6, [r5, #4]!
 8011160:	e7eb      	b.n	801113a <__copybits+0x18>
 8011162:	f840 3b04 	str.w	r3, [r0], #4
 8011166:	e7f4      	b.n	8011152 <__copybits+0x30>

08011168 <__any_on>:
 8011168:	f100 0214 	add.w	r2, r0, #20
 801116c:	6900      	ldr	r0, [r0, #16]
 801116e:	114b      	asrs	r3, r1, #5
 8011170:	4298      	cmp	r0, r3
 8011172:	b510      	push	{r4, lr}
 8011174:	db11      	blt.n	801119a <__any_on+0x32>
 8011176:	dd0a      	ble.n	801118e <__any_on+0x26>
 8011178:	f011 011f 	ands.w	r1, r1, #31
 801117c:	d007      	beq.n	801118e <__any_on+0x26>
 801117e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011182:	fa24 f001 	lsr.w	r0, r4, r1
 8011186:	fa00 f101 	lsl.w	r1, r0, r1
 801118a:	428c      	cmp	r4, r1
 801118c:	d10b      	bne.n	80111a6 <__any_on+0x3e>
 801118e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011192:	4293      	cmp	r3, r2
 8011194:	d803      	bhi.n	801119e <__any_on+0x36>
 8011196:	2000      	movs	r0, #0
 8011198:	bd10      	pop	{r4, pc}
 801119a:	4603      	mov	r3, r0
 801119c:	e7f7      	b.n	801118e <__any_on+0x26>
 801119e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80111a2:	2900      	cmp	r1, #0
 80111a4:	d0f5      	beq.n	8011192 <__any_on+0x2a>
 80111a6:	2001      	movs	r0, #1
 80111a8:	e7f6      	b.n	8011198 <__any_on+0x30>

080111aa <_calloc_r>:
 80111aa:	b513      	push	{r0, r1, r4, lr}
 80111ac:	434a      	muls	r2, r1
 80111ae:	4611      	mov	r1, r2
 80111b0:	9201      	str	r2, [sp, #4]
 80111b2:	f7fc f9cd 	bl	800d550 <_malloc_r>
 80111b6:	4604      	mov	r4, r0
 80111b8:	b118      	cbz	r0, 80111c2 <_calloc_r+0x18>
 80111ba:	9a01      	ldr	r2, [sp, #4]
 80111bc:	2100      	movs	r1, #0
 80111be:	f7fc f9be 	bl	800d53e <memset>
 80111c2:	4620      	mov	r0, r4
 80111c4:	b002      	add	sp, #8
 80111c6:	bd10      	pop	{r4, pc}

080111c8 <_free_r>:
 80111c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111ca:	2900      	cmp	r1, #0
 80111cc:	d048      	beq.n	8011260 <_free_r+0x98>
 80111ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111d2:	9001      	str	r0, [sp, #4]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	f1a1 0404 	sub.w	r4, r1, #4
 80111da:	bfb8      	it	lt
 80111dc:	18e4      	addlt	r4, r4, r3
 80111de:	f7ff fb1d 	bl	801081c <__malloc_lock>
 80111e2:	4a20      	ldr	r2, [pc, #128]	; (8011264 <_free_r+0x9c>)
 80111e4:	9801      	ldr	r0, [sp, #4]
 80111e6:	6813      	ldr	r3, [r2, #0]
 80111e8:	4615      	mov	r5, r2
 80111ea:	b933      	cbnz	r3, 80111fa <_free_r+0x32>
 80111ec:	6063      	str	r3, [r4, #4]
 80111ee:	6014      	str	r4, [r2, #0]
 80111f0:	b003      	add	sp, #12
 80111f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111f6:	f7ff bb17 	b.w	8010828 <__malloc_unlock>
 80111fa:	42a3      	cmp	r3, r4
 80111fc:	d90b      	bls.n	8011216 <_free_r+0x4e>
 80111fe:	6821      	ldr	r1, [r4, #0]
 8011200:	1862      	adds	r2, r4, r1
 8011202:	4293      	cmp	r3, r2
 8011204:	bf04      	itt	eq
 8011206:	681a      	ldreq	r2, [r3, #0]
 8011208:	685b      	ldreq	r3, [r3, #4]
 801120a:	6063      	str	r3, [r4, #4]
 801120c:	bf04      	itt	eq
 801120e:	1852      	addeq	r2, r2, r1
 8011210:	6022      	streq	r2, [r4, #0]
 8011212:	602c      	str	r4, [r5, #0]
 8011214:	e7ec      	b.n	80111f0 <_free_r+0x28>
 8011216:	461a      	mov	r2, r3
 8011218:	685b      	ldr	r3, [r3, #4]
 801121a:	b10b      	cbz	r3, 8011220 <_free_r+0x58>
 801121c:	42a3      	cmp	r3, r4
 801121e:	d9fa      	bls.n	8011216 <_free_r+0x4e>
 8011220:	6811      	ldr	r1, [r2, #0]
 8011222:	1855      	adds	r5, r2, r1
 8011224:	42a5      	cmp	r5, r4
 8011226:	d10b      	bne.n	8011240 <_free_r+0x78>
 8011228:	6824      	ldr	r4, [r4, #0]
 801122a:	4421      	add	r1, r4
 801122c:	1854      	adds	r4, r2, r1
 801122e:	42a3      	cmp	r3, r4
 8011230:	6011      	str	r1, [r2, #0]
 8011232:	d1dd      	bne.n	80111f0 <_free_r+0x28>
 8011234:	681c      	ldr	r4, [r3, #0]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	6053      	str	r3, [r2, #4]
 801123a:	4421      	add	r1, r4
 801123c:	6011      	str	r1, [r2, #0]
 801123e:	e7d7      	b.n	80111f0 <_free_r+0x28>
 8011240:	d902      	bls.n	8011248 <_free_r+0x80>
 8011242:	230c      	movs	r3, #12
 8011244:	6003      	str	r3, [r0, #0]
 8011246:	e7d3      	b.n	80111f0 <_free_r+0x28>
 8011248:	6825      	ldr	r5, [r4, #0]
 801124a:	1961      	adds	r1, r4, r5
 801124c:	428b      	cmp	r3, r1
 801124e:	bf04      	itt	eq
 8011250:	6819      	ldreq	r1, [r3, #0]
 8011252:	685b      	ldreq	r3, [r3, #4]
 8011254:	6063      	str	r3, [r4, #4]
 8011256:	bf04      	itt	eq
 8011258:	1949      	addeq	r1, r1, r5
 801125a:	6021      	streq	r1, [r4, #0]
 801125c:	6054      	str	r4, [r2, #4]
 801125e:	e7c7      	b.n	80111f0 <_free_r+0x28>
 8011260:	b003      	add	sp, #12
 8011262:	bd30      	pop	{r4, r5, pc}
 8011264:	20005988 	.word	0x20005988

08011268 <__ssputs_r>:
 8011268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801126c:	688e      	ldr	r6, [r1, #8]
 801126e:	429e      	cmp	r6, r3
 8011270:	4682      	mov	sl, r0
 8011272:	460c      	mov	r4, r1
 8011274:	4690      	mov	r8, r2
 8011276:	461f      	mov	r7, r3
 8011278:	d838      	bhi.n	80112ec <__ssputs_r+0x84>
 801127a:	898a      	ldrh	r2, [r1, #12]
 801127c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011280:	d032      	beq.n	80112e8 <__ssputs_r+0x80>
 8011282:	6825      	ldr	r5, [r4, #0]
 8011284:	6909      	ldr	r1, [r1, #16]
 8011286:	eba5 0901 	sub.w	r9, r5, r1
 801128a:	6965      	ldr	r5, [r4, #20]
 801128c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011294:	3301      	adds	r3, #1
 8011296:	444b      	add	r3, r9
 8011298:	106d      	asrs	r5, r5, #1
 801129a:	429d      	cmp	r5, r3
 801129c:	bf38      	it	cc
 801129e:	461d      	movcc	r5, r3
 80112a0:	0553      	lsls	r3, r2, #21
 80112a2:	d531      	bpl.n	8011308 <__ssputs_r+0xa0>
 80112a4:	4629      	mov	r1, r5
 80112a6:	f7fc f953 	bl	800d550 <_malloc_r>
 80112aa:	4606      	mov	r6, r0
 80112ac:	b950      	cbnz	r0, 80112c4 <__ssputs_r+0x5c>
 80112ae:	230c      	movs	r3, #12
 80112b0:	f8ca 3000 	str.w	r3, [sl]
 80112b4:	89a3      	ldrh	r3, [r4, #12]
 80112b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112ba:	81a3      	strh	r3, [r4, #12]
 80112bc:	f04f 30ff 	mov.w	r0, #4294967295
 80112c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112c4:	6921      	ldr	r1, [r4, #16]
 80112c6:	464a      	mov	r2, r9
 80112c8:	f7fc f92b 	bl	800d522 <memcpy>
 80112cc:	89a3      	ldrh	r3, [r4, #12]
 80112ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80112d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112d6:	81a3      	strh	r3, [r4, #12]
 80112d8:	6126      	str	r6, [r4, #16]
 80112da:	6165      	str	r5, [r4, #20]
 80112dc:	444e      	add	r6, r9
 80112de:	eba5 0509 	sub.w	r5, r5, r9
 80112e2:	6026      	str	r6, [r4, #0]
 80112e4:	60a5      	str	r5, [r4, #8]
 80112e6:	463e      	mov	r6, r7
 80112e8:	42be      	cmp	r6, r7
 80112ea:	d900      	bls.n	80112ee <__ssputs_r+0x86>
 80112ec:	463e      	mov	r6, r7
 80112ee:	4632      	mov	r2, r6
 80112f0:	6820      	ldr	r0, [r4, #0]
 80112f2:	4641      	mov	r1, r8
 80112f4:	f000 f980 	bl	80115f8 <memmove>
 80112f8:	68a3      	ldr	r3, [r4, #8]
 80112fa:	6822      	ldr	r2, [r4, #0]
 80112fc:	1b9b      	subs	r3, r3, r6
 80112fe:	4432      	add	r2, r6
 8011300:	60a3      	str	r3, [r4, #8]
 8011302:	6022      	str	r2, [r4, #0]
 8011304:	2000      	movs	r0, #0
 8011306:	e7db      	b.n	80112c0 <__ssputs_r+0x58>
 8011308:	462a      	mov	r2, r5
 801130a:	f000 f98f 	bl	801162c <_realloc_r>
 801130e:	4606      	mov	r6, r0
 8011310:	2800      	cmp	r0, #0
 8011312:	d1e1      	bne.n	80112d8 <__ssputs_r+0x70>
 8011314:	6921      	ldr	r1, [r4, #16]
 8011316:	4650      	mov	r0, sl
 8011318:	f7ff ff56 	bl	80111c8 <_free_r>
 801131c:	e7c7      	b.n	80112ae <__ssputs_r+0x46>
	...

08011320 <_svfiprintf_r>:
 8011320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011324:	4698      	mov	r8, r3
 8011326:	898b      	ldrh	r3, [r1, #12]
 8011328:	061b      	lsls	r3, r3, #24
 801132a:	b09d      	sub	sp, #116	; 0x74
 801132c:	4607      	mov	r7, r0
 801132e:	460d      	mov	r5, r1
 8011330:	4614      	mov	r4, r2
 8011332:	d50e      	bpl.n	8011352 <_svfiprintf_r+0x32>
 8011334:	690b      	ldr	r3, [r1, #16]
 8011336:	b963      	cbnz	r3, 8011352 <_svfiprintf_r+0x32>
 8011338:	2140      	movs	r1, #64	; 0x40
 801133a:	f7fc f909 	bl	800d550 <_malloc_r>
 801133e:	6028      	str	r0, [r5, #0]
 8011340:	6128      	str	r0, [r5, #16]
 8011342:	b920      	cbnz	r0, 801134e <_svfiprintf_r+0x2e>
 8011344:	230c      	movs	r3, #12
 8011346:	603b      	str	r3, [r7, #0]
 8011348:	f04f 30ff 	mov.w	r0, #4294967295
 801134c:	e0d1      	b.n	80114f2 <_svfiprintf_r+0x1d2>
 801134e:	2340      	movs	r3, #64	; 0x40
 8011350:	616b      	str	r3, [r5, #20]
 8011352:	2300      	movs	r3, #0
 8011354:	9309      	str	r3, [sp, #36]	; 0x24
 8011356:	2320      	movs	r3, #32
 8011358:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801135c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011360:	2330      	movs	r3, #48	; 0x30
 8011362:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801150c <_svfiprintf_r+0x1ec>
 8011366:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801136a:	f04f 0901 	mov.w	r9, #1
 801136e:	4623      	mov	r3, r4
 8011370:	469a      	mov	sl, r3
 8011372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011376:	b10a      	cbz	r2, 801137c <_svfiprintf_r+0x5c>
 8011378:	2a25      	cmp	r2, #37	; 0x25
 801137a:	d1f9      	bne.n	8011370 <_svfiprintf_r+0x50>
 801137c:	ebba 0b04 	subs.w	fp, sl, r4
 8011380:	d00b      	beq.n	801139a <_svfiprintf_r+0x7a>
 8011382:	465b      	mov	r3, fp
 8011384:	4622      	mov	r2, r4
 8011386:	4629      	mov	r1, r5
 8011388:	4638      	mov	r0, r7
 801138a:	f7ff ff6d 	bl	8011268 <__ssputs_r>
 801138e:	3001      	adds	r0, #1
 8011390:	f000 80aa 	beq.w	80114e8 <_svfiprintf_r+0x1c8>
 8011394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011396:	445a      	add	r2, fp
 8011398:	9209      	str	r2, [sp, #36]	; 0x24
 801139a:	f89a 3000 	ldrb.w	r3, [sl]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f000 80a2 	beq.w	80114e8 <_svfiprintf_r+0x1c8>
 80113a4:	2300      	movs	r3, #0
 80113a6:	f04f 32ff 	mov.w	r2, #4294967295
 80113aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113ae:	f10a 0a01 	add.w	sl, sl, #1
 80113b2:	9304      	str	r3, [sp, #16]
 80113b4:	9307      	str	r3, [sp, #28]
 80113b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113ba:	931a      	str	r3, [sp, #104]	; 0x68
 80113bc:	4654      	mov	r4, sl
 80113be:	2205      	movs	r2, #5
 80113c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113c4:	4851      	ldr	r0, [pc, #324]	; (801150c <_svfiprintf_r+0x1ec>)
 80113c6:	f7ee ff0b 	bl	80001e0 <memchr>
 80113ca:	9a04      	ldr	r2, [sp, #16]
 80113cc:	b9d8      	cbnz	r0, 8011406 <_svfiprintf_r+0xe6>
 80113ce:	06d0      	lsls	r0, r2, #27
 80113d0:	bf44      	itt	mi
 80113d2:	2320      	movmi	r3, #32
 80113d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113d8:	0711      	lsls	r1, r2, #28
 80113da:	bf44      	itt	mi
 80113dc:	232b      	movmi	r3, #43	; 0x2b
 80113de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113e2:	f89a 3000 	ldrb.w	r3, [sl]
 80113e6:	2b2a      	cmp	r3, #42	; 0x2a
 80113e8:	d015      	beq.n	8011416 <_svfiprintf_r+0xf6>
 80113ea:	9a07      	ldr	r2, [sp, #28]
 80113ec:	4654      	mov	r4, sl
 80113ee:	2000      	movs	r0, #0
 80113f0:	f04f 0c0a 	mov.w	ip, #10
 80113f4:	4621      	mov	r1, r4
 80113f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113fa:	3b30      	subs	r3, #48	; 0x30
 80113fc:	2b09      	cmp	r3, #9
 80113fe:	d94e      	bls.n	801149e <_svfiprintf_r+0x17e>
 8011400:	b1b0      	cbz	r0, 8011430 <_svfiprintf_r+0x110>
 8011402:	9207      	str	r2, [sp, #28]
 8011404:	e014      	b.n	8011430 <_svfiprintf_r+0x110>
 8011406:	eba0 0308 	sub.w	r3, r0, r8
 801140a:	fa09 f303 	lsl.w	r3, r9, r3
 801140e:	4313      	orrs	r3, r2
 8011410:	9304      	str	r3, [sp, #16]
 8011412:	46a2      	mov	sl, r4
 8011414:	e7d2      	b.n	80113bc <_svfiprintf_r+0x9c>
 8011416:	9b03      	ldr	r3, [sp, #12]
 8011418:	1d19      	adds	r1, r3, #4
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	9103      	str	r1, [sp, #12]
 801141e:	2b00      	cmp	r3, #0
 8011420:	bfbb      	ittet	lt
 8011422:	425b      	neglt	r3, r3
 8011424:	f042 0202 	orrlt.w	r2, r2, #2
 8011428:	9307      	strge	r3, [sp, #28]
 801142a:	9307      	strlt	r3, [sp, #28]
 801142c:	bfb8      	it	lt
 801142e:	9204      	strlt	r2, [sp, #16]
 8011430:	7823      	ldrb	r3, [r4, #0]
 8011432:	2b2e      	cmp	r3, #46	; 0x2e
 8011434:	d10c      	bne.n	8011450 <_svfiprintf_r+0x130>
 8011436:	7863      	ldrb	r3, [r4, #1]
 8011438:	2b2a      	cmp	r3, #42	; 0x2a
 801143a:	d135      	bne.n	80114a8 <_svfiprintf_r+0x188>
 801143c:	9b03      	ldr	r3, [sp, #12]
 801143e:	1d1a      	adds	r2, r3, #4
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	9203      	str	r2, [sp, #12]
 8011444:	2b00      	cmp	r3, #0
 8011446:	bfb8      	it	lt
 8011448:	f04f 33ff 	movlt.w	r3, #4294967295
 801144c:	3402      	adds	r4, #2
 801144e:	9305      	str	r3, [sp, #20]
 8011450:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801151c <_svfiprintf_r+0x1fc>
 8011454:	7821      	ldrb	r1, [r4, #0]
 8011456:	2203      	movs	r2, #3
 8011458:	4650      	mov	r0, sl
 801145a:	f7ee fec1 	bl	80001e0 <memchr>
 801145e:	b140      	cbz	r0, 8011472 <_svfiprintf_r+0x152>
 8011460:	2340      	movs	r3, #64	; 0x40
 8011462:	eba0 000a 	sub.w	r0, r0, sl
 8011466:	fa03 f000 	lsl.w	r0, r3, r0
 801146a:	9b04      	ldr	r3, [sp, #16]
 801146c:	4303      	orrs	r3, r0
 801146e:	3401      	adds	r4, #1
 8011470:	9304      	str	r3, [sp, #16]
 8011472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011476:	4826      	ldr	r0, [pc, #152]	; (8011510 <_svfiprintf_r+0x1f0>)
 8011478:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801147c:	2206      	movs	r2, #6
 801147e:	f7ee feaf 	bl	80001e0 <memchr>
 8011482:	2800      	cmp	r0, #0
 8011484:	d038      	beq.n	80114f8 <_svfiprintf_r+0x1d8>
 8011486:	4b23      	ldr	r3, [pc, #140]	; (8011514 <_svfiprintf_r+0x1f4>)
 8011488:	bb1b      	cbnz	r3, 80114d2 <_svfiprintf_r+0x1b2>
 801148a:	9b03      	ldr	r3, [sp, #12]
 801148c:	3307      	adds	r3, #7
 801148e:	f023 0307 	bic.w	r3, r3, #7
 8011492:	3308      	adds	r3, #8
 8011494:	9303      	str	r3, [sp, #12]
 8011496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011498:	4433      	add	r3, r6
 801149a:	9309      	str	r3, [sp, #36]	; 0x24
 801149c:	e767      	b.n	801136e <_svfiprintf_r+0x4e>
 801149e:	fb0c 3202 	mla	r2, ip, r2, r3
 80114a2:	460c      	mov	r4, r1
 80114a4:	2001      	movs	r0, #1
 80114a6:	e7a5      	b.n	80113f4 <_svfiprintf_r+0xd4>
 80114a8:	2300      	movs	r3, #0
 80114aa:	3401      	adds	r4, #1
 80114ac:	9305      	str	r3, [sp, #20]
 80114ae:	4619      	mov	r1, r3
 80114b0:	f04f 0c0a 	mov.w	ip, #10
 80114b4:	4620      	mov	r0, r4
 80114b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114ba:	3a30      	subs	r2, #48	; 0x30
 80114bc:	2a09      	cmp	r2, #9
 80114be:	d903      	bls.n	80114c8 <_svfiprintf_r+0x1a8>
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d0c5      	beq.n	8011450 <_svfiprintf_r+0x130>
 80114c4:	9105      	str	r1, [sp, #20]
 80114c6:	e7c3      	b.n	8011450 <_svfiprintf_r+0x130>
 80114c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80114cc:	4604      	mov	r4, r0
 80114ce:	2301      	movs	r3, #1
 80114d0:	e7f0      	b.n	80114b4 <_svfiprintf_r+0x194>
 80114d2:	ab03      	add	r3, sp, #12
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	462a      	mov	r2, r5
 80114d8:	4b0f      	ldr	r3, [pc, #60]	; (8011518 <_svfiprintf_r+0x1f8>)
 80114da:	a904      	add	r1, sp, #16
 80114dc:	4638      	mov	r0, r7
 80114de:	f7fc f931 	bl	800d744 <_printf_float>
 80114e2:	1c42      	adds	r2, r0, #1
 80114e4:	4606      	mov	r6, r0
 80114e6:	d1d6      	bne.n	8011496 <_svfiprintf_r+0x176>
 80114e8:	89ab      	ldrh	r3, [r5, #12]
 80114ea:	065b      	lsls	r3, r3, #25
 80114ec:	f53f af2c 	bmi.w	8011348 <_svfiprintf_r+0x28>
 80114f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114f2:	b01d      	add	sp, #116	; 0x74
 80114f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f8:	ab03      	add	r3, sp, #12
 80114fa:	9300      	str	r3, [sp, #0]
 80114fc:	462a      	mov	r2, r5
 80114fe:	4b06      	ldr	r3, [pc, #24]	; (8011518 <_svfiprintf_r+0x1f8>)
 8011500:	a904      	add	r1, sp, #16
 8011502:	4638      	mov	r0, r7
 8011504:	f7fc fbc2 	bl	800dc8c <_printf_i>
 8011508:	e7eb      	b.n	80114e2 <_svfiprintf_r+0x1c2>
 801150a:	bf00      	nop
 801150c:	08013b04 	.word	0x08013b04
 8011510:	08013b0e 	.word	0x08013b0e
 8011514:	0800d745 	.word	0x0800d745
 8011518:	08011269 	.word	0x08011269
 801151c:	08013b0a 	.word	0x08013b0a

08011520 <_read_r>:
 8011520:	b538      	push	{r3, r4, r5, lr}
 8011522:	4d07      	ldr	r5, [pc, #28]	; (8011540 <_read_r+0x20>)
 8011524:	4604      	mov	r4, r0
 8011526:	4608      	mov	r0, r1
 8011528:	4611      	mov	r1, r2
 801152a:	2200      	movs	r2, #0
 801152c:	602a      	str	r2, [r5, #0]
 801152e:	461a      	mov	r2, r3
 8011530:	f7f2 fdfa 	bl	8004128 <_read>
 8011534:	1c43      	adds	r3, r0, #1
 8011536:	d102      	bne.n	801153e <_read_r+0x1e>
 8011538:	682b      	ldr	r3, [r5, #0]
 801153a:	b103      	cbz	r3, 801153e <_read_r+0x1e>
 801153c:	6023      	str	r3, [r4, #0]
 801153e:	bd38      	pop	{r3, r4, r5, pc}
 8011540:	200063a4 	.word	0x200063a4
 8011544:	00000000 	.word	0x00000000

08011548 <nan>:
 8011548:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011550 <nan+0x8>
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop
 8011550:	00000000 	.word	0x00000000
 8011554:	7ff80000 	.word	0x7ff80000

08011558 <strncmp>:
 8011558:	b510      	push	{r4, lr}
 801155a:	b16a      	cbz	r2, 8011578 <strncmp+0x20>
 801155c:	3901      	subs	r1, #1
 801155e:	1884      	adds	r4, r0, r2
 8011560:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011564:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011568:	4293      	cmp	r3, r2
 801156a:	d103      	bne.n	8011574 <strncmp+0x1c>
 801156c:	42a0      	cmp	r0, r4
 801156e:	d001      	beq.n	8011574 <strncmp+0x1c>
 8011570:	2b00      	cmp	r3, #0
 8011572:	d1f5      	bne.n	8011560 <strncmp+0x8>
 8011574:	1a98      	subs	r0, r3, r2
 8011576:	bd10      	pop	{r4, pc}
 8011578:	4610      	mov	r0, r2
 801157a:	e7fc      	b.n	8011576 <strncmp+0x1e>

0801157c <__ascii_wctomb>:
 801157c:	b149      	cbz	r1, 8011592 <__ascii_wctomb+0x16>
 801157e:	2aff      	cmp	r2, #255	; 0xff
 8011580:	bf85      	ittet	hi
 8011582:	238a      	movhi	r3, #138	; 0x8a
 8011584:	6003      	strhi	r3, [r0, #0]
 8011586:	700a      	strbls	r2, [r1, #0]
 8011588:	f04f 30ff 	movhi.w	r0, #4294967295
 801158c:	bf98      	it	ls
 801158e:	2001      	movls	r0, #1
 8011590:	4770      	bx	lr
 8011592:	4608      	mov	r0, r1
 8011594:	4770      	bx	lr
	...

08011598 <__assert_func>:
 8011598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801159a:	4614      	mov	r4, r2
 801159c:	461a      	mov	r2, r3
 801159e:	4b09      	ldr	r3, [pc, #36]	; (80115c4 <__assert_func+0x2c>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	4605      	mov	r5, r0
 80115a4:	68d8      	ldr	r0, [r3, #12]
 80115a6:	b14c      	cbz	r4, 80115bc <__assert_func+0x24>
 80115a8:	4b07      	ldr	r3, [pc, #28]	; (80115c8 <__assert_func+0x30>)
 80115aa:	9100      	str	r1, [sp, #0]
 80115ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80115b0:	4906      	ldr	r1, [pc, #24]	; (80115cc <__assert_func+0x34>)
 80115b2:	462b      	mov	r3, r5
 80115b4:	f000 f80e 	bl	80115d4 <fiprintf>
 80115b8:	f000 fa78 	bl	8011aac <abort>
 80115bc:	4b04      	ldr	r3, [pc, #16]	; (80115d0 <__assert_func+0x38>)
 80115be:	461c      	mov	r4, r3
 80115c0:	e7f3      	b.n	80115aa <__assert_func+0x12>
 80115c2:	bf00      	nop
 80115c4:	20000040 	.word	0x20000040
 80115c8:	08013b15 	.word	0x08013b15
 80115cc:	08013b22 	.word	0x08013b22
 80115d0:	08013b50 	.word	0x08013b50

080115d4 <fiprintf>:
 80115d4:	b40e      	push	{r1, r2, r3}
 80115d6:	b503      	push	{r0, r1, lr}
 80115d8:	4601      	mov	r1, r0
 80115da:	ab03      	add	r3, sp, #12
 80115dc:	4805      	ldr	r0, [pc, #20]	; (80115f4 <fiprintf+0x20>)
 80115de:	f853 2b04 	ldr.w	r2, [r3], #4
 80115e2:	6800      	ldr	r0, [r0, #0]
 80115e4:	9301      	str	r3, [sp, #4]
 80115e6:	f000 f871 	bl	80116cc <_vfiprintf_r>
 80115ea:	b002      	add	sp, #8
 80115ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80115f0:	b003      	add	sp, #12
 80115f2:	4770      	bx	lr
 80115f4:	20000040 	.word	0x20000040

080115f8 <memmove>:
 80115f8:	4288      	cmp	r0, r1
 80115fa:	b510      	push	{r4, lr}
 80115fc:	eb01 0402 	add.w	r4, r1, r2
 8011600:	d902      	bls.n	8011608 <memmove+0x10>
 8011602:	4284      	cmp	r4, r0
 8011604:	4623      	mov	r3, r4
 8011606:	d807      	bhi.n	8011618 <memmove+0x20>
 8011608:	1e43      	subs	r3, r0, #1
 801160a:	42a1      	cmp	r1, r4
 801160c:	d008      	beq.n	8011620 <memmove+0x28>
 801160e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011612:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011616:	e7f8      	b.n	801160a <memmove+0x12>
 8011618:	4402      	add	r2, r0
 801161a:	4601      	mov	r1, r0
 801161c:	428a      	cmp	r2, r1
 801161e:	d100      	bne.n	8011622 <memmove+0x2a>
 8011620:	bd10      	pop	{r4, pc}
 8011622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801162a:	e7f7      	b.n	801161c <memmove+0x24>

0801162c <_realloc_r>:
 801162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801162e:	4607      	mov	r7, r0
 8011630:	4614      	mov	r4, r2
 8011632:	460e      	mov	r6, r1
 8011634:	b921      	cbnz	r1, 8011640 <_realloc_r+0x14>
 8011636:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801163a:	4611      	mov	r1, r2
 801163c:	f7fb bf88 	b.w	800d550 <_malloc_r>
 8011640:	b922      	cbnz	r2, 801164c <_realloc_r+0x20>
 8011642:	f7ff fdc1 	bl	80111c8 <_free_r>
 8011646:	4625      	mov	r5, r4
 8011648:	4628      	mov	r0, r5
 801164a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801164c:	f000 fa9a 	bl	8011b84 <_malloc_usable_size_r>
 8011650:	42a0      	cmp	r0, r4
 8011652:	d20f      	bcs.n	8011674 <_realloc_r+0x48>
 8011654:	4621      	mov	r1, r4
 8011656:	4638      	mov	r0, r7
 8011658:	f7fb ff7a 	bl	800d550 <_malloc_r>
 801165c:	4605      	mov	r5, r0
 801165e:	2800      	cmp	r0, #0
 8011660:	d0f2      	beq.n	8011648 <_realloc_r+0x1c>
 8011662:	4631      	mov	r1, r6
 8011664:	4622      	mov	r2, r4
 8011666:	f7fb ff5c 	bl	800d522 <memcpy>
 801166a:	4631      	mov	r1, r6
 801166c:	4638      	mov	r0, r7
 801166e:	f7ff fdab 	bl	80111c8 <_free_r>
 8011672:	e7e9      	b.n	8011648 <_realloc_r+0x1c>
 8011674:	4635      	mov	r5, r6
 8011676:	e7e7      	b.n	8011648 <_realloc_r+0x1c>

08011678 <__sfputc_r>:
 8011678:	6893      	ldr	r3, [r2, #8]
 801167a:	3b01      	subs	r3, #1
 801167c:	2b00      	cmp	r3, #0
 801167e:	b410      	push	{r4}
 8011680:	6093      	str	r3, [r2, #8]
 8011682:	da08      	bge.n	8011696 <__sfputc_r+0x1e>
 8011684:	6994      	ldr	r4, [r2, #24]
 8011686:	42a3      	cmp	r3, r4
 8011688:	db01      	blt.n	801168e <__sfputc_r+0x16>
 801168a:	290a      	cmp	r1, #10
 801168c:	d103      	bne.n	8011696 <__sfputc_r+0x1e>
 801168e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011692:	f000 b94b 	b.w	801192c <__swbuf_r>
 8011696:	6813      	ldr	r3, [r2, #0]
 8011698:	1c58      	adds	r0, r3, #1
 801169a:	6010      	str	r0, [r2, #0]
 801169c:	7019      	strb	r1, [r3, #0]
 801169e:	4608      	mov	r0, r1
 80116a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116a4:	4770      	bx	lr

080116a6 <__sfputs_r>:
 80116a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116a8:	4606      	mov	r6, r0
 80116aa:	460f      	mov	r7, r1
 80116ac:	4614      	mov	r4, r2
 80116ae:	18d5      	adds	r5, r2, r3
 80116b0:	42ac      	cmp	r4, r5
 80116b2:	d101      	bne.n	80116b8 <__sfputs_r+0x12>
 80116b4:	2000      	movs	r0, #0
 80116b6:	e007      	b.n	80116c8 <__sfputs_r+0x22>
 80116b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116bc:	463a      	mov	r2, r7
 80116be:	4630      	mov	r0, r6
 80116c0:	f7ff ffda 	bl	8011678 <__sfputc_r>
 80116c4:	1c43      	adds	r3, r0, #1
 80116c6:	d1f3      	bne.n	80116b0 <__sfputs_r+0xa>
 80116c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080116cc <_vfiprintf_r>:
 80116cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d0:	460d      	mov	r5, r1
 80116d2:	b09d      	sub	sp, #116	; 0x74
 80116d4:	4614      	mov	r4, r2
 80116d6:	4698      	mov	r8, r3
 80116d8:	4606      	mov	r6, r0
 80116da:	b118      	cbz	r0, 80116e4 <_vfiprintf_r+0x18>
 80116dc:	6983      	ldr	r3, [r0, #24]
 80116de:	b90b      	cbnz	r3, 80116e4 <_vfiprintf_r+0x18>
 80116e0:	f7fb fe5a 	bl	800d398 <__sinit>
 80116e4:	4b89      	ldr	r3, [pc, #548]	; (801190c <_vfiprintf_r+0x240>)
 80116e6:	429d      	cmp	r5, r3
 80116e8:	d11b      	bne.n	8011722 <_vfiprintf_r+0x56>
 80116ea:	6875      	ldr	r5, [r6, #4]
 80116ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116ee:	07d9      	lsls	r1, r3, #31
 80116f0:	d405      	bmi.n	80116fe <_vfiprintf_r+0x32>
 80116f2:	89ab      	ldrh	r3, [r5, #12]
 80116f4:	059a      	lsls	r2, r3, #22
 80116f6:	d402      	bmi.n	80116fe <_vfiprintf_r+0x32>
 80116f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116fa:	f7fb ff10 	bl	800d51e <__retarget_lock_acquire_recursive>
 80116fe:	89ab      	ldrh	r3, [r5, #12]
 8011700:	071b      	lsls	r3, r3, #28
 8011702:	d501      	bpl.n	8011708 <_vfiprintf_r+0x3c>
 8011704:	692b      	ldr	r3, [r5, #16]
 8011706:	b9eb      	cbnz	r3, 8011744 <_vfiprintf_r+0x78>
 8011708:	4629      	mov	r1, r5
 801170a:	4630      	mov	r0, r6
 801170c:	f000 f960 	bl	80119d0 <__swsetup_r>
 8011710:	b1c0      	cbz	r0, 8011744 <_vfiprintf_r+0x78>
 8011712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011714:	07dc      	lsls	r4, r3, #31
 8011716:	d50e      	bpl.n	8011736 <_vfiprintf_r+0x6a>
 8011718:	f04f 30ff 	mov.w	r0, #4294967295
 801171c:	b01d      	add	sp, #116	; 0x74
 801171e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011722:	4b7b      	ldr	r3, [pc, #492]	; (8011910 <_vfiprintf_r+0x244>)
 8011724:	429d      	cmp	r5, r3
 8011726:	d101      	bne.n	801172c <_vfiprintf_r+0x60>
 8011728:	68b5      	ldr	r5, [r6, #8]
 801172a:	e7df      	b.n	80116ec <_vfiprintf_r+0x20>
 801172c:	4b79      	ldr	r3, [pc, #484]	; (8011914 <_vfiprintf_r+0x248>)
 801172e:	429d      	cmp	r5, r3
 8011730:	bf08      	it	eq
 8011732:	68f5      	ldreq	r5, [r6, #12]
 8011734:	e7da      	b.n	80116ec <_vfiprintf_r+0x20>
 8011736:	89ab      	ldrh	r3, [r5, #12]
 8011738:	0598      	lsls	r0, r3, #22
 801173a:	d4ed      	bmi.n	8011718 <_vfiprintf_r+0x4c>
 801173c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801173e:	f7fb feef 	bl	800d520 <__retarget_lock_release_recursive>
 8011742:	e7e9      	b.n	8011718 <_vfiprintf_r+0x4c>
 8011744:	2300      	movs	r3, #0
 8011746:	9309      	str	r3, [sp, #36]	; 0x24
 8011748:	2320      	movs	r3, #32
 801174a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801174e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011752:	2330      	movs	r3, #48	; 0x30
 8011754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011918 <_vfiprintf_r+0x24c>
 8011758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801175c:	f04f 0901 	mov.w	r9, #1
 8011760:	4623      	mov	r3, r4
 8011762:	469a      	mov	sl, r3
 8011764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011768:	b10a      	cbz	r2, 801176e <_vfiprintf_r+0xa2>
 801176a:	2a25      	cmp	r2, #37	; 0x25
 801176c:	d1f9      	bne.n	8011762 <_vfiprintf_r+0x96>
 801176e:	ebba 0b04 	subs.w	fp, sl, r4
 8011772:	d00b      	beq.n	801178c <_vfiprintf_r+0xc0>
 8011774:	465b      	mov	r3, fp
 8011776:	4622      	mov	r2, r4
 8011778:	4629      	mov	r1, r5
 801177a:	4630      	mov	r0, r6
 801177c:	f7ff ff93 	bl	80116a6 <__sfputs_r>
 8011780:	3001      	adds	r0, #1
 8011782:	f000 80aa 	beq.w	80118da <_vfiprintf_r+0x20e>
 8011786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011788:	445a      	add	r2, fp
 801178a:	9209      	str	r2, [sp, #36]	; 0x24
 801178c:	f89a 3000 	ldrb.w	r3, [sl]
 8011790:	2b00      	cmp	r3, #0
 8011792:	f000 80a2 	beq.w	80118da <_vfiprintf_r+0x20e>
 8011796:	2300      	movs	r3, #0
 8011798:	f04f 32ff 	mov.w	r2, #4294967295
 801179c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117a0:	f10a 0a01 	add.w	sl, sl, #1
 80117a4:	9304      	str	r3, [sp, #16]
 80117a6:	9307      	str	r3, [sp, #28]
 80117a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117ac:	931a      	str	r3, [sp, #104]	; 0x68
 80117ae:	4654      	mov	r4, sl
 80117b0:	2205      	movs	r2, #5
 80117b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117b6:	4858      	ldr	r0, [pc, #352]	; (8011918 <_vfiprintf_r+0x24c>)
 80117b8:	f7ee fd12 	bl	80001e0 <memchr>
 80117bc:	9a04      	ldr	r2, [sp, #16]
 80117be:	b9d8      	cbnz	r0, 80117f8 <_vfiprintf_r+0x12c>
 80117c0:	06d1      	lsls	r1, r2, #27
 80117c2:	bf44      	itt	mi
 80117c4:	2320      	movmi	r3, #32
 80117c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117ca:	0713      	lsls	r3, r2, #28
 80117cc:	bf44      	itt	mi
 80117ce:	232b      	movmi	r3, #43	; 0x2b
 80117d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117d4:	f89a 3000 	ldrb.w	r3, [sl]
 80117d8:	2b2a      	cmp	r3, #42	; 0x2a
 80117da:	d015      	beq.n	8011808 <_vfiprintf_r+0x13c>
 80117dc:	9a07      	ldr	r2, [sp, #28]
 80117de:	4654      	mov	r4, sl
 80117e0:	2000      	movs	r0, #0
 80117e2:	f04f 0c0a 	mov.w	ip, #10
 80117e6:	4621      	mov	r1, r4
 80117e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117ec:	3b30      	subs	r3, #48	; 0x30
 80117ee:	2b09      	cmp	r3, #9
 80117f0:	d94e      	bls.n	8011890 <_vfiprintf_r+0x1c4>
 80117f2:	b1b0      	cbz	r0, 8011822 <_vfiprintf_r+0x156>
 80117f4:	9207      	str	r2, [sp, #28]
 80117f6:	e014      	b.n	8011822 <_vfiprintf_r+0x156>
 80117f8:	eba0 0308 	sub.w	r3, r0, r8
 80117fc:	fa09 f303 	lsl.w	r3, r9, r3
 8011800:	4313      	orrs	r3, r2
 8011802:	9304      	str	r3, [sp, #16]
 8011804:	46a2      	mov	sl, r4
 8011806:	e7d2      	b.n	80117ae <_vfiprintf_r+0xe2>
 8011808:	9b03      	ldr	r3, [sp, #12]
 801180a:	1d19      	adds	r1, r3, #4
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	9103      	str	r1, [sp, #12]
 8011810:	2b00      	cmp	r3, #0
 8011812:	bfbb      	ittet	lt
 8011814:	425b      	neglt	r3, r3
 8011816:	f042 0202 	orrlt.w	r2, r2, #2
 801181a:	9307      	strge	r3, [sp, #28]
 801181c:	9307      	strlt	r3, [sp, #28]
 801181e:	bfb8      	it	lt
 8011820:	9204      	strlt	r2, [sp, #16]
 8011822:	7823      	ldrb	r3, [r4, #0]
 8011824:	2b2e      	cmp	r3, #46	; 0x2e
 8011826:	d10c      	bne.n	8011842 <_vfiprintf_r+0x176>
 8011828:	7863      	ldrb	r3, [r4, #1]
 801182a:	2b2a      	cmp	r3, #42	; 0x2a
 801182c:	d135      	bne.n	801189a <_vfiprintf_r+0x1ce>
 801182e:	9b03      	ldr	r3, [sp, #12]
 8011830:	1d1a      	adds	r2, r3, #4
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	9203      	str	r2, [sp, #12]
 8011836:	2b00      	cmp	r3, #0
 8011838:	bfb8      	it	lt
 801183a:	f04f 33ff 	movlt.w	r3, #4294967295
 801183e:	3402      	adds	r4, #2
 8011840:	9305      	str	r3, [sp, #20]
 8011842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011928 <_vfiprintf_r+0x25c>
 8011846:	7821      	ldrb	r1, [r4, #0]
 8011848:	2203      	movs	r2, #3
 801184a:	4650      	mov	r0, sl
 801184c:	f7ee fcc8 	bl	80001e0 <memchr>
 8011850:	b140      	cbz	r0, 8011864 <_vfiprintf_r+0x198>
 8011852:	2340      	movs	r3, #64	; 0x40
 8011854:	eba0 000a 	sub.w	r0, r0, sl
 8011858:	fa03 f000 	lsl.w	r0, r3, r0
 801185c:	9b04      	ldr	r3, [sp, #16]
 801185e:	4303      	orrs	r3, r0
 8011860:	3401      	adds	r4, #1
 8011862:	9304      	str	r3, [sp, #16]
 8011864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011868:	482c      	ldr	r0, [pc, #176]	; (801191c <_vfiprintf_r+0x250>)
 801186a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801186e:	2206      	movs	r2, #6
 8011870:	f7ee fcb6 	bl	80001e0 <memchr>
 8011874:	2800      	cmp	r0, #0
 8011876:	d03f      	beq.n	80118f8 <_vfiprintf_r+0x22c>
 8011878:	4b29      	ldr	r3, [pc, #164]	; (8011920 <_vfiprintf_r+0x254>)
 801187a:	bb1b      	cbnz	r3, 80118c4 <_vfiprintf_r+0x1f8>
 801187c:	9b03      	ldr	r3, [sp, #12]
 801187e:	3307      	adds	r3, #7
 8011880:	f023 0307 	bic.w	r3, r3, #7
 8011884:	3308      	adds	r3, #8
 8011886:	9303      	str	r3, [sp, #12]
 8011888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801188a:	443b      	add	r3, r7
 801188c:	9309      	str	r3, [sp, #36]	; 0x24
 801188e:	e767      	b.n	8011760 <_vfiprintf_r+0x94>
 8011890:	fb0c 3202 	mla	r2, ip, r2, r3
 8011894:	460c      	mov	r4, r1
 8011896:	2001      	movs	r0, #1
 8011898:	e7a5      	b.n	80117e6 <_vfiprintf_r+0x11a>
 801189a:	2300      	movs	r3, #0
 801189c:	3401      	adds	r4, #1
 801189e:	9305      	str	r3, [sp, #20]
 80118a0:	4619      	mov	r1, r3
 80118a2:	f04f 0c0a 	mov.w	ip, #10
 80118a6:	4620      	mov	r0, r4
 80118a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118ac:	3a30      	subs	r2, #48	; 0x30
 80118ae:	2a09      	cmp	r2, #9
 80118b0:	d903      	bls.n	80118ba <_vfiprintf_r+0x1ee>
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d0c5      	beq.n	8011842 <_vfiprintf_r+0x176>
 80118b6:	9105      	str	r1, [sp, #20]
 80118b8:	e7c3      	b.n	8011842 <_vfiprintf_r+0x176>
 80118ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80118be:	4604      	mov	r4, r0
 80118c0:	2301      	movs	r3, #1
 80118c2:	e7f0      	b.n	80118a6 <_vfiprintf_r+0x1da>
 80118c4:	ab03      	add	r3, sp, #12
 80118c6:	9300      	str	r3, [sp, #0]
 80118c8:	462a      	mov	r2, r5
 80118ca:	4b16      	ldr	r3, [pc, #88]	; (8011924 <_vfiprintf_r+0x258>)
 80118cc:	a904      	add	r1, sp, #16
 80118ce:	4630      	mov	r0, r6
 80118d0:	f7fb ff38 	bl	800d744 <_printf_float>
 80118d4:	4607      	mov	r7, r0
 80118d6:	1c78      	adds	r0, r7, #1
 80118d8:	d1d6      	bne.n	8011888 <_vfiprintf_r+0x1bc>
 80118da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118dc:	07d9      	lsls	r1, r3, #31
 80118de:	d405      	bmi.n	80118ec <_vfiprintf_r+0x220>
 80118e0:	89ab      	ldrh	r3, [r5, #12]
 80118e2:	059a      	lsls	r2, r3, #22
 80118e4:	d402      	bmi.n	80118ec <_vfiprintf_r+0x220>
 80118e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118e8:	f7fb fe1a 	bl	800d520 <__retarget_lock_release_recursive>
 80118ec:	89ab      	ldrh	r3, [r5, #12]
 80118ee:	065b      	lsls	r3, r3, #25
 80118f0:	f53f af12 	bmi.w	8011718 <_vfiprintf_r+0x4c>
 80118f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118f6:	e711      	b.n	801171c <_vfiprintf_r+0x50>
 80118f8:	ab03      	add	r3, sp, #12
 80118fa:	9300      	str	r3, [sp, #0]
 80118fc:	462a      	mov	r2, r5
 80118fe:	4b09      	ldr	r3, [pc, #36]	; (8011924 <_vfiprintf_r+0x258>)
 8011900:	a904      	add	r1, sp, #16
 8011902:	4630      	mov	r0, r6
 8011904:	f7fc f9c2 	bl	800dc8c <_printf_i>
 8011908:	e7e4      	b.n	80118d4 <_vfiprintf_r+0x208>
 801190a:	bf00      	nop
 801190c:	080136bc 	.word	0x080136bc
 8011910:	080136dc 	.word	0x080136dc
 8011914:	0801369c 	.word	0x0801369c
 8011918:	08013b04 	.word	0x08013b04
 801191c:	08013b0e 	.word	0x08013b0e
 8011920:	0800d745 	.word	0x0800d745
 8011924:	080116a7 	.word	0x080116a7
 8011928:	08013b0a 	.word	0x08013b0a

0801192c <__swbuf_r>:
 801192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801192e:	460e      	mov	r6, r1
 8011930:	4614      	mov	r4, r2
 8011932:	4605      	mov	r5, r0
 8011934:	b118      	cbz	r0, 801193e <__swbuf_r+0x12>
 8011936:	6983      	ldr	r3, [r0, #24]
 8011938:	b90b      	cbnz	r3, 801193e <__swbuf_r+0x12>
 801193a:	f7fb fd2d 	bl	800d398 <__sinit>
 801193e:	4b21      	ldr	r3, [pc, #132]	; (80119c4 <__swbuf_r+0x98>)
 8011940:	429c      	cmp	r4, r3
 8011942:	d12b      	bne.n	801199c <__swbuf_r+0x70>
 8011944:	686c      	ldr	r4, [r5, #4]
 8011946:	69a3      	ldr	r3, [r4, #24]
 8011948:	60a3      	str	r3, [r4, #8]
 801194a:	89a3      	ldrh	r3, [r4, #12]
 801194c:	071a      	lsls	r2, r3, #28
 801194e:	d52f      	bpl.n	80119b0 <__swbuf_r+0x84>
 8011950:	6923      	ldr	r3, [r4, #16]
 8011952:	b36b      	cbz	r3, 80119b0 <__swbuf_r+0x84>
 8011954:	6923      	ldr	r3, [r4, #16]
 8011956:	6820      	ldr	r0, [r4, #0]
 8011958:	1ac0      	subs	r0, r0, r3
 801195a:	6963      	ldr	r3, [r4, #20]
 801195c:	b2f6      	uxtb	r6, r6
 801195e:	4283      	cmp	r3, r0
 8011960:	4637      	mov	r7, r6
 8011962:	dc04      	bgt.n	801196e <__swbuf_r+0x42>
 8011964:	4621      	mov	r1, r4
 8011966:	4628      	mov	r0, r5
 8011968:	f7fe fb7c 	bl	8010064 <_fflush_r>
 801196c:	bb30      	cbnz	r0, 80119bc <__swbuf_r+0x90>
 801196e:	68a3      	ldr	r3, [r4, #8]
 8011970:	3b01      	subs	r3, #1
 8011972:	60a3      	str	r3, [r4, #8]
 8011974:	6823      	ldr	r3, [r4, #0]
 8011976:	1c5a      	adds	r2, r3, #1
 8011978:	6022      	str	r2, [r4, #0]
 801197a:	701e      	strb	r6, [r3, #0]
 801197c:	6963      	ldr	r3, [r4, #20]
 801197e:	3001      	adds	r0, #1
 8011980:	4283      	cmp	r3, r0
 8011982:	d004      	beq.n	801198e <__swbuf_r+0x62>
 8011984:	89a3      	ldrh	r3, [r4, #12]
 8011986:	07db      	lsls	r3, r3, #31
 8011988:	d506      	bpl.n	8011998 <__swbuf_r+0x6c>
 801198a:	2e0a      	cmp	r6, #10
 801198c:	d104      	bne.n	8011998 <__swbuf_r+0x6c>
 801198e:	4621      	mov	r1, r4
 8011990:	4628      	mov	r0, r5
 8011992:	f7fe fb67 	bl	8010064 <_fflush_r>
 8011996:	b988      	cbnz	r0, 80119bc <__swbuf_r+0x90>
 8011998:	4638      	mov	r0, r7
 801199a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801199c:	4b0a      	ldr	r3, [pc, #40]	; (80119c8 <__swbuf_r+0x9c>)
 801199e:	429c      	cmp	r4, r3
 80119a0:	d101      	bne.n	80119a6 <__swbuf_r+0x7a>
 80119a2:	68ac      	ldr	r4, [r5, #8]
 80119a4:	e7cf      	b.n	8011946 <__swbuf_r+0x1a>
 80119a6:	4b09      	ldr	r3, [pc, #36]	; (80119cc <__swbuf_r+0xa0>)
 80119a8:	429c      	cmp	r4, r3
 80119aa:	bf08      	it	eq
 80119ac:	68ec      	ldreq	r4, [r5, #12]
 80119ae:	e7ca      	b.n	8011946 <__swbuf_r+0x1a>
 80119b0:	4621      	mov	r1, r4
 80119b2:	4628      	mov	r0, r5
 80119b4:	f000 f80c 	bl	80119d0 <__swsetup_r>
 80119b8:	2800      	cmp	r0, #0
 80119ba:	d0cb      	beq.n	8011954 <__swbuf_r+0x28>
 80119bc:	f04f 37ff 	mov.w	r7, #4294967295
 80119c0:	e7ea      	b.n	8011998 <__swbuf_r+0x6c>
 80119c2:	bf00      	nop
 80119c4:	080136bc 	.word	0x080136bc
 80119c8:	080136dc 	.word	0x080136dc
 80119cc:	0801369c 	.word	0x0801369c

080119d0 <__swsetup_r>:
 80119d0:	4b32      	ldr	r3, [pc, #200]	; (8011a9c <__swsetup_r+0xcc>)
 80119d2:	b570      	push	{r4, r5, r6, lr}
 80119d4:	681d      	ldr	r5, [r3, #0]
 80119d6:	4606      	mov	r6, r0
 80119d8:	460c      	mov	r4, r1
 80119da:	b125      	cbz	r5, 80119e6 <__swsetup_r+0x16>
 80119dc:	69ab      	ldr	r3, [r5, #24]
 80119de:	b913      	cbnz	r3, 80119e6 <__swsetup_r+0x16>
 80119e0:	4628      	mov	r0, r5
 80119e2:	f7fb fcd9 	bl	800d398 <__sinit>
 80119e6:	4b2e      	ldr	r3, [pc, #184]	; (8011aa0 <__swsetup_r+0xd0>)
 80119e8:	429c      	cmp	r4, r3
 80119ea:	d10f      	bne.n	8011a0c <__swsetup_r+0x3c>
 80119ec:	686c      	ldr	r4, [r5, #4]
 80119ee:	89a3      	ldrh	r3, [r4, #12]
 80119f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119f4:	0719      	lsls	r1, r3, #28
 80119f6:	d42c      	bmi.n	8011a52 <__swsetup_r+0x82>
 80119f8:	06dd      	lsls	r5, r3, #27
 80119fa:	d411      	bmi.n	8011a20 <__swsetup_r+0x50>
 80119fc:	2309      	movs	r3, #9
 80119fe:	6033      	str	r3, [r6, #0]
 8011a00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011a04:	81a3      	strh	r3, [r4, #12]
 8011a06:	f04f 30ff 	mov.w	r0, #4294967295
 8011a0a:	e03e      	b.n	8011a8a <__swsetup_r+0xba>
 8011a0c:	4b25      	ldr	r3, [pc, #148]	; (8011aa4 <__swsetup_r+0xd4>)
 8011a0e:	429c      	cmp	r4, r3
 8011a10:	d101      	bne.n	8011a16 <__swsetup_r+0x46>
 8011a12:	68ac      	ldr	r4, [r5, #8]
 8011a14:	e7eb      	b.n	80119ee <__swsetup_r+0x1e>
 8011a16:	4b24      	ldr	r3, [pc, #144]	; (8011aa8 <__swsetup_r+0xd8>)
 8011a18:	429c      	cmp	r4, r3
 8011a1a:	bf08      	it	eq
 8011a1c:	68ec      	ldreq	r4, [r5, #12]
 8011a1e:	e7e6      	b.n	80119ee <__swsetup_r+0x1e>
 8011a20:	0758      	lsls	r0, r3, #29
 8011a22:	d512      	bpl.n	8011a4a <__swsetup_r+0x7a>
 8011a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a26:	b141      	cbz	r1, 8011a3a <__swsetup_r+0x6a>
 8011a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a2c:	4299      	cmp	r1, r3
 8011a2e:	d002      	beq.n	8011a36 <__swsetup_r+0x66>
 8011a30:	4630      	mov	r0, r6
 8011a32:	f7ff fbc9 	bl	80111c8 <_free_r>
 8011a36:	2300      	movs	r3, #0
 8011a38:	6363      	str	r3, [r4, #52]	; 0x34
 8011a3a:	89a3      	ldrh	r3, [r4, #12]
 8011a3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011a40:	81a3      	strh	r3, [r4, #12]
 8011a42:	2300      	movs	r3, #0
 8011a44:	6063      	str	r3, [r4, #4]
 8011a46:	6923      	ldr	r3, [r4, #16]
 8011a48:	6023      	str	r3, [r4, #0]
 8011a4a:	89a3      	ldrh	r3, [r4, #12]
 8011a4c:	f043 0308 	orr.w	r3, r3, #8
 8011a50:	81a3      	strh	r3, [r4, #12]
 8011a52:	6923      	ldr	r3, [r4, #16]
 8011a54:	b94b      	cbnz	r3, 8011a6a <__swsetup_r+0x9a>
 8011a56:	89a3      	ldrh	r3, [r4, #12]
 8011a58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a60:	d003      	beq.n	8011a6a <__swsetup_r+0x9a>
 8011a62:	4621      	mov	r1, r4
 8011a64:	4630      	mov	r0, r6
 8011a66:	f000 f84d 	bl	8011b04 <__smakebuf_r>
 8011a6a:	89a0      	ldrh	r0, [r4, #12]
 8011a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a70:	f010 0301 	ands.w	r3, r0, #1
 8011a74:	d00a      	beq.n	8011a8c <__swsetup_r+0xbc>
 8011a76:	2300      	movs	r3, #0
 8011a78:	60a3      	str	r3, [r4, #8]
 8011a7a:	6963      	ldr	r3, [r4, #20]
 8011a7c:	425b      	negs	r3, r3
 8011a7e:	61a3      	str	r3, [r4, #24]
 8011a80:	6923      	ldr	r3, [r4, #16]
 8011a82:	b943      	cbnz	r3, 8011a96 <__swsetup_r+0xc6>
 8011a84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a88:	d1ba      	bne.n	8011a00 <__swsetup_r+0x30>
 8011a8a:	bd70      	pop	{r4, r5, r6, pc}
 8011a8c:	0781      	lsls	r1, r0, #30
 8011a8e:	bf58      	it	pl
 8011a90:	6963      	ldrpl	r3, [r4, #20]
 8011a92:	60a3      	str	r3, [r4, #8]
 8011a94:	e7f4      	b.n	8011a80 <__swsetup_r+0xb0>
 8011a96:	2000      	movs	r0, #0
 8011a98:	e7f7      	b.n	8011a8a <__swsetup_r+0xba>
 8011a9a:	bf00      	nop
 8011a9c:	20000040 	.word	0x20000040
 8011aa0:	080136bc 	.word	0x080136bc
 8011aa4:	080136dc 	.word	0x080136dc
 8011aa8:	0801369c 	.word	0x0801369c

08011aac <abort>:
 8011aac:	b508      	push	{r3, lr}
 8011aae:	2006      	movs	r0, #6
 8011ab0:	f000 f898 	bl	8011be4 <raise>
 8011ab4:	2001      	movs	r0, #1
 8011ab6:	f7f2 fb2d 	bl	8004114 <_exit>

08011aba <__swhatbuf_r>:
 8011aba:	b570      	push	{r4, r5, r6, lr}
 8011abc:	460e      	mov	r6, r1
 8011abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ac2:	2900      	cmp	r1, #0
 8011ac4:	b096      	sub	sp, #88	; 0x58
 8011ac6:	4614      	mov	r4, r2
 8011ac8:	461d      	mov	r5, r3
 8011aca:	da07      	bge.n	8011adc <__swhatbuf_r+0x22>
 8011acc:	2300      	movs	r3, #0
 8011ace:	602b      	str	r3, [r5, #0]
 8011ad0:	89b3      	ldrh	r3, [r6, #12]
 8011ad2:	061a      	lsls	r2, r3, #24
 8011ad4:	d410      	bmi.n	8011af8 <__swhatbuf_r+0x3e>
 8011ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ada:	e00e      	b.n	8011afa <__swhatbuf_r+0x40>
 8011adc:	466a      	mov	r2, sp
 8011ade:	f000 f89d 	bl	8011c1c <_fstat_r>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	dbf2      	blt.n	8011acc <__swhatbuf_r+0x12>
 8011ae6:	9a01      	ldr	r2, [sp, #4]
 8011ae8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011aec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011af0:	425a      	negs	r2, r3
 8011af2:	415a      	adcs	r2, r3
 8011af4:	602a      	str	r2, [r5, #0]
 8011af6:	e7ee      	b.n	8011ad6 <__swhatbuf_r+0x1c>
 8011af8:	2340      	movs	r3, #64	; 0x40
 8011afa:	2000      	movs	r0, #0
 8011afc:	6023      	str	r3, [r4, #0]
 8011afe:	b016      	add	sp, #88	; 0x58
 8011b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08011b04 <__smakebuf_r>:
 8011b04:	898b      	ldrh	r3, [r1, #12]
 8011b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b08:	079d      	lsls	r5, r3, #30
 8011b0a:	4606      	mov	r6, r0
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	d507      	bpl.n	8011b20 <__smakebuf_r+0x1c>
 8011b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b14:	6023      	str	r3, [r4, #0]
 8011b16:	6123      	str	r3, [r4, #16]
 8011b18:	2301      	movs	r3, #1
 8011b1a:	6163      	str	r3, [r4, #20]
 8011b1c:	b002      	add	sp, #8
 8011b1e:	bd70      	pop	{r4, r5, r6, pc}
 8011b20:	ab01      	add	r3, sp, #4
 8011b22:	466a      	mov	r2, sp
 8011b24:	f7ff ffc9 	bl	8011aba <__swhatbuf_r>
 8011b28:	9900      	ldr	r1, [sp, #0]
 8011b2a:	4605      	mov	r5, r0
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	f7fb fd0f 	bl	800d550 <_malloc_r>
 8011b32:	b948      	cbnz	r0, 8011b48 <__smakebuf_r+0x44>
 8011b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b38:	059a      	lsls	r2, r3, #22
 8011b3a:	d4ef      	bmi.n	8011b1c <__smakebuf_r+0x18>
 8011b3c:	f023 0303 	bic.w	r3, r3, #3
 8011b40:	f043 0302 	orr.w	r3, r3, #2
 8011b44:	81a3      	strh	r3, [r4, #12]
 8011b46:	e7e3      	b.n	8011b10 <__smakebuf_r+0xc>
 8011b48:	4b0d      	ldr	r3, [pc, #52]	; (8011b80 <__smakebuf_r+0x7c>)
 8011b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b4c:	89a3      	ldrh	r3, [r4, #12]
 8011b4e:	6020      	str	r0, [r4, #0]
 8011b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b54:	81a3      	strh	r3, [r4, #12]
 8011b56:	9b00      	ldr	r3, [sp, #0]
 8011b58:	6163      	str	r3, [r4, #20]
 8011b5a:	9b01      	ldr	r3, [sp, #4]
 8011b5c:	6120      	str	r0, [r4, #16]
 8011b5e:	b15b      	cbz	r3, 8011b78 <__smakebuf_r+0x74>
 8011b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b64:	4630      	mov	r0, r6
 8011b66:	f000 f86b 	bl	8011c40 <_isatty_r>
 8011b6a:	b128      	cbz	r0, 8011b78 <__smakebuf_r+0x74>
 8011b6c:	89a3      	ldrh	r3, [r4, #12]
 8011b6e:	f023 0303 	bic.w	r3, r3, #3
 8011b72:	f043 0301 	orr.w	r3, r3, #1
 8011b76:	81a3      	strh	r3, [r4, #12]
 8011b78:	89a0      	ldrh	r0, [r4, #12]
 8011b7a:	4305      	orrs	r5, r0
 8011b7c:	81a5      	strh	r5, [r4, #12]
 8011b7e:	e7cd      	b.n	8011b1c <__smakebuf_r+0x18>
 8011b80:	0800d331 	.word	0x0800d331

08011b84 <_malloc_usable_size_r>:
 8011b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b88:	1f18      	subs	r0, r3, #4
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	bfbc      	itt	lt
 8011b8e:	580b      	ldrlt	r3, [r1, r0]
 8011b90:	18c0      	addlt	r0, r0, r3
 8011b92:	4770      	bx	lr

08011b94 <_raise_r>:
 8011b94:	291f      	cmp	r1, #31
 8011b96:	b538      	push	{r3, r4, r5, lr}
 8011b98:	4604      	mov	r4, r0
 8011b9a:	460d      	mov	r5, r1
 8011b9c:	d904      	bls.n	8011ba8 <_raise_r+0x14>
 8011b9e:	2316      	movs	r3, #22
 8011ba0:	6003      	str	r3, [r0, #0]
 8011ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba6:	bd38      	pop	{r3, r4, r5, pc}
 8011ba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011baa:	b112      	cbz	r2, 8011bb2 <_raise_r+0x1e>
 8011bac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bb0:	b94b      	cbnz	r3, 8011bc6 <_raise_r+0x32>
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f000 f830 	bl	8011c18 <_getpid_r>
 8011bb8:	462a      	mov	r2, r5
 8011bba:	4601      	mov	r1, r0
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bc2:	f000 b817 	b.w	8011bf4 <_kill_r>
 8011bc6:	2b01      	cmp	r3, #1
 8011bc8:	d00a      	beq.n	8011be0 <_raise_r+0x4c>
 8011bca:	1c59      	adds	r1, r3, #1
 8011bcc:	d103      	bne.n	8011bd6 <_raise_r+0x42>
 8011bce:	2316      	movs	r3, #22
 8011bd0:	6003      	str	r3, [r0, #0]
 8011bd2:	2001      	movs	r0, #1
 8011bd4:	e7e7      	b.n	8011ba6 <_raise_r+0x12>
 8011bd6:	2400      	movs	r4, #0
 8011bd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011bdc:	4628      	mov	r0, r5
 8011bde:	4798      	blx	r3
 8011be0:	2000      	movs	r0, #0
 8011be2:	e7e0      	b.n	8011ba6 <_raise_r+0x12>

08011be4 <raise>:
 8011be4:	4b02      	ldr	r3, [pc, #8]	; (8011bf0 <raise+0xc>)
 8011be6:	4601      	mov	r1, r0
 8011be8:	6818      	ldr	r0, [r3, #0]
 8011bea:	f7ff bfd3 	b.w	8011b94 <_raise_r>
 8011bee:	bf00      	nop
 8011bf0:	20000040 	.word	0x20000040

08011bf4 <_kill_r>:
 8011bf4:	b538      	push	{r3, r4, r5, lr}
 8011bf6:	4d07      	ldr	r5, [pc, #28]	; (8011c14 <_kill_r+0x20>)
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	4608      	mov	r0, r1
 8011bfe:	4611      	mov	r1, r2
 8011c00:	602b      	str	r3, [r5, #0]
 8011c02:	f7f2 fa77 	bl	80040f4 <_kill>
 8011c06:	1c43      	adds	r3, r0, #1
 8011c08:	d102      	bne.n	8011c10 <_kill_r+0x1c>
 8011c0a:	682b      	ldr	r3, [r5, #0]
 8011c0c:	b103      	cbz	r3, 8011c10 <_kill_r+0x1c>
 8011c0e:	6023      	str	r3, [r4, #0]
 8011c10:	bd38      	pop	{r3, r4, r5, pc}
 8011c12:	bf00      	nop
 8011c14:	200063a4 	.word	0x200063a4

08011c18 <_getpid_r>:
 8011c18:	f7f2 ba64 	b.w	80040e4 <_getpid>

08011c1c <_fstat_r>:
 8011c1c:	b538      	push	{r3, r4, r5, lr}
 8011c1e:	4d07      	ldr	r5, [pc, #28]	; (8011c3c <_fstat_r+0x20>)
 8011c20:	2300      	movs	r3, #0
 8011c22:	4604      	mov	r4, r0
 8011c24:	4608      	mov	r0, r1
 8011c26:	4611      	mov	r1, r2
 8011c28:	602b      	str	r3, [r5, #0]
 8011c2a:	f7f2 fac2 	bl	80041b2 <_fstat>
 8011c2e:	1c43      	adds	r3, r0, #1
 8011c30:	d102      	bne.n	8011c38 <_fstat_r+0x1c>
 8011c32:	682b      	ldr	r3, [r5, #0]
 8011c34:	b103      	cbz	r3, 8011c38 <_fstat_r+0x1c>
 8011c36:	6023      	str	r3, [r4, #0]
 8011c38:	bd38      	pop	{r3, r4, r5, pc}
 8011c3a:	bf00      	nop
 8011c3c:	200063a4 	.word	0x200063a4

08011c40 <_isatty_r>:
 8011c40:	b538      	push	{r3, r4, r5, lr}
 8011c42:	4d06      	ldr	r5, [pc, #24]	; (8011c5c <_isatty_r+0x1c>)
 8011c44:	2300      	movs	r3, #0
 8011c46:	4604      	mov	r4, r0
 8011c48:	4608      	mov	r0, r1
 8011c4a:	602b      	str	r3, [r5, #0]
 8011c4c:	f7f2 fac1 	bl	80041d2 <_isatty>
 8011c50:	1c43      	adds	r3, r0, #1
 8011c52:	d102      	bne.n	8011c5a <_isatty_r+0x1a>
 8011c54:	682b      	ldr	r3, [r5, #0]
 8011c56:	b103      	cbz	r3, 8011c5a <_isatty_r+0x1a>
 8011c58:	6023      	str	r3, [r4, #0]
 8011c5a:	bd38      	pop	{r3, r4, r5, pc}
 8011c5c:	200063a4 	.word	0x200063a4

08011c60 <pow>:
 8011c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c64:	ec59 8b10 	vmov	r8, r9, d0
 8011c68:	ec57 6b11 	vmov	r6, r7, d1
 8011c6c:	f000 f8a8 	bl	8011dc0 <__ieee754_pow>
 8011c70:	4b4e      	ldr	r3, [pc, #312]	; (8011dac <pow+0x14c>)
 8011c72:	f993 3000 	ldrsb.w	r3, [r3]
 8011c76:	3301      	adds	r3, #1
 8011c78:	ec55 4b10 	vmov	r4, r5, d0
 8011c7c:	d015      	beq.n	8011caa <pow+0x4a>
 8011c7e:	4632      	mov	r2, r6
 8011c80:	463b      	mov	r3, r7
 8011c82:	4630      	mov	r0, r6
 8011c84:	4639      	mov	r1, r7
 8011c86:	f7ee ff51 	bl	8000b2c <__aeabi_dcmpun>
 8011c8a:	b970      	cbnz	r0, 8011caa <pow+0x4a>
 8011c8c:	4642      	mov	r2, r8
 8011c8e:	464b      	mov	r3, r9
 8011c90:	4640      	mov	r0, r8
 8011c92:	4649      	mov	r1, r9
 8011c94:	f7ee ff4a 	bl	8000b2c <__aeabi_dcmpun>
 8011c98:	2200      	movs	r2, #0
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	b148      	cbz	r0, 8011cb2 <pow+0x52>
 8011c9e:	4630      	mov	r0, r6
 8011ca0:	4639      	mov	r1, r7
 8011ca2:	f7ee ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ca6:	2800      	cmp	r0, #0
 8011ca8:	d17d      	bne.n	8011da6 <pow+0x146>
 8011caa:	ec45 4b10 	vmov	d0, r4, r5
 8011cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cb2:	4640      	mov	r0, r8
 8011cb4:	4649      	mov	r1, r9
 8011cb6:	f7ee ff07 	bl	8000ac8 <__aeabi_dcmpeq>
 8011cba:	b1e0      	cbz	r0, 8011cf6 <pow+0x96>
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	4639      	mov	r1, r7
 8011cc4:	f7ee ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 8011cc8:	2800      	cmp	r0, #0
 8011cca:	d16c      	bne.n	8011da6 <pow+0x146>
 8011ccc:	ec47 6b10 	vmov	d0, r6, r7
 8011cd0:	f000 fe55 	bl	801297e <finite>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d0e8      	beq.n	8011caa <pow+0x4a>
 8011cd8:	2200      	movs	r2, #0
 8011cda:	2300      	movs	r3, #0
 8011cdc:	4630      	mov	r0, r6
 8011cde:	4639      	mov	r1, r7
 8011ce0:	f7ee fefc 	bl	8000adc <__aeabi_dcmplt>
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	d0e0      	beq.n	8011caa <pow+0x4a>
 8011ce8:	f7fb faf8 	bl	800d2dc <__errno>
 8011cec:	2321      	movs	r3, #33	; 0x21
 8011cee:	6003      	str	r3, [r0, #0]
 8011cf0:	2400      	movs	r4, #0
 8011cf2:	4d2f      	ldr	r5, [pc, #188]	; (8011db0 <pow+0x150>)
 8011cf4:	e7d9      	b.n	8011caa <pow+0x4a>
 8011cf6:	ec45 4b10 	vmov	d0, r4, r5
 8011cfa:	f000 fe40 	bl	801297e <finite>
 8011cfe:	bbb8      	cbnz	r0, 8011d70 <pow+0x110>
 8011d00:	ec49 8b10 	vmov	d0, r8, r9
 8011d04:	f000 fe3b 	bl	801297e <finite>
 8011d08:	b390      	cbz	r0, 8011d70 <pow+0x110>
 8011d0a:	ec47 6b10 	vmov	d0, r6, r7
 8011d0e:	f000 fe36 	bl	801297e <finite>
 8011d12:	b368      	cbz	r0, 8011d70 <pow+0x110>
 8011d14:	4622      	mov	r2, r4
 8011d16:	462b      	mov	r3, r5
 8011d18:	4620      	mov	r0, r4
 8011d1a:	4629      	mov	r1, r5
 8011d1c:	f7ee ff06 	bl	8000b2c <__aeabi_dcmpun>
 8011d20:	b160      	cbz	r0, 8011d3c <pow+0xdc>
 8011d22:	f7fb fadb 	bl	800d2dc <__errno>
 8011d26:	2321      	movs	r3, #33	; 0x21
 8011d28:	6003      	str	r3, [r0, #0]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	4610      	mov	r0, r2
 8011d30:	4619      	mov	r1, r3
 8011d32:	f7ee fd8b 	bl	800084c <__aeabi_ddiv>
 8011d36:	4604      	mov	r4, r0
 8011d38:	460d      	mov	r5, r1
 8011d3a:	e7b6      	b.n	8011caa <pow+0x4a>
 8011d3c:	f7fb face 	bl	800d2dc <__errno>
 8011d40:	2322      	movs	r3, #34	; 0x22
 8011d42:	6003      	str	r3, [r0, #0]
 8011d44:	2200      	movs	r2, #0
 8011d46:	2300      	movs	r3, #0
 8011d48:	4640      	mov	r0, r8
 8011d4a:	4649      	mov	r1, r9
 8011d4c:	f7ee fec6 	bl	8000adc <__aeabi_dcmplt>
 8011d50:	2400      	movs	r4, #0
 8011d52:	b158      	cbz	r0, 8011d6c <pow+0x10c>
 8011d54:	ec47 6b10 	vmov	d0, r6, r7
 8011d58:	f000 fe1c 	bl	8012994 <rint>
 8011d5c:	4632      	mov	r2, r6
 8011d5e:	ec51 0b10 	vmov	r0, r1, d0
 8011d62:	463b      	mov	r3, r7
 8011d64:	f7ee feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	d0c2      	beq.n	8011cf2 <pow+0x92>
 8011d6c:	4d11      	ldr	r5, [pc, #68]	; (8011db4 <pow+0x154>)
 8011d6e:	e79c      	b.n	8011caa <pow+0x4a>
 8011d70:	2200      	movs	r2, #0
 8011d72:	2300      	movs	r3, #0
 8011d74:	4620      	mov	r0, r4
 8011d76:	4629      	mov	r1, r5
 8011d78:	f7ee fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d7c:	2800      	cmp	r0, #0
 8011d7e:	d094      	beq.n	8011caa <pow+0x4a>
 8011d80:	ec49 8b10 	vmov	d0, r8, r9
 8011d84:	f000 fdfb 	bl	801297e <finite>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	d08e      	beq.n	8011caa <pow+0x4a>
 8011d8c:	ec47 6b10 	vmov	d0, r6, r7
 8011d90:	f000 fdf5 	bl	801297e <finite>
 8011d94:	2800      	cmp	r0, #0
 8011d96:	d088      	beq.n	8011caa <pow+0x4a>
 8011d98:	f7fb faa0 	bl	800d2dc <__errno>
 8011d9c:	2322      	movs	r3, #34	; 0x22
 8011d9e:	6003      	str	r3, [r0, #0]
 8011da0:	2400      	movs	r4, #0
 8011da2:	2500      	movs	r5, #0
 8011da4:	e781      	b.n	8011caa <pow+0x4a>
 8011da6:	4d04      	ldr	r5, [pc, #16]	; (8011db8 <pow+0x158>)
 8011da8:	2400      	movs	r4, #0
 8011daa:	e77e      	b.n	8011caa <pow+0x4a>
 8011dac:	20000214 	.word	0x20000214
 8011db0:	fff00000 	.word	0xfff00000
 8011db4:	7ff00000 	.word	0x7ff00000
 8011db8:	3ff00000 	.word	0x3ff00000
 8011dbc:	00000000 	.word	0x00000000

08011dc0 <__ieee754_pow>:
 8011dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc4:	ed2d 8b06 	vpush	{d8-d10}
 8011dc8:	b08d      	sub	sp, #52	; 0x34
 8011dca:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011dce:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8011dd2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8011dd6:	ea56 0100 	orrs.w	r1, r6, r0
 8011dda:	ec53 2b10 	vmov	r2, r3, d0
 8011dde:	f000 84d1 	beq.w	8012784 <__ieee754_pow+0x9c4>
 8011de2:	497f      	ldr	r1, [pc, #508]	; (8011fe0 <__ieee754_pow+0x220>)
 8011de4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011de8:	428c      	cmp	r4, r1
 8011dea:	ee10 8a10 	vmov	r8, s0
 8011dee:	4699      	mov	r9, r3
 8011df0:	dc09      	bgt.n	8011e06 <__ieee754_pow+0x46>
 8011df2:	d103      	bne.n	8011dfc <__ieee754_pow+0x3c>
 8011df4:	b97a      	cbnz	r2, 8011e16 <__ieee754_pow+0x56>
 8011df6:	42a6      	cmp	r6, r4
 8011df8:	dd02      	ble.n	8011e00 <__ieee754_pow+0x40>
 8011dfa:	e00c      	b.n	8011e16 <__ieee754_pow+0x56>
 8011dfc:	428e      	cmp	r6, r1
 8011dfe:	dc02      	bgt.n	8011e06 <__ieee754_pow+0x46>
 8011e00:	428e      	cmp	r6, r1
 8011e02:	d110      	bne.n	8011e26 <__ieee754_pow+0x66>
 8011e04:	b178      	cbz	r0, 8011e26 <__ieee754_pow+0x66>
 8011e06:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011e0a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011e0e:	ea54 0308 	orrs.w	r3, r4, r8
 8011e12:	f000 84b7 	beq.w	8012784 <__ieee754_pow+0x9c4>
 8011e16:	4873      	ldr	r0, [pc, #460]	; (8011fe4 <__ieee754_pow+0x224>)
 8011e18:	b00d      	add	sp, #52	; 0x34
 8011e1a:	ecbd 8b06 	vpop	{d8-d10}
 8011e1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e22:	f7ff bb91 	b.w	8011548 <nan>
 8011e26:	f1b9 0f00 	cmp.w	r9, #0
 8011e2a:	da36      	bge.n	8011e9a <__ieee754_pow+0xda>
 8011e2c:	496e      	ldr	r1, [pc, #440]	; (8011fe8 <__ieee754_pow+0x228>)
 8011e2e:	428e      	cmp	r6, r1
 8011e30:	dc51      	bgt.n	8011ed6 <__ieee754_pow+0x116>
 8011e32:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8011e36:	428e      	cmp	r6, r1
 8011e38:	f340 84af 	ble.w	801279a <__ieee754_pow+0x9da>
 8011e3c:	1531      	asrs	r1, r6, #20
 8011e3e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011e42:	2914      	cmp	r1, #20
 8011e44:	dd0f      	ble.n	8011e66 <__ieee754_pow+0xa6>
 8011e46:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8011e4a:	fa20 fc01 	lsr.w	ip, r0, r1
 8011e4e:	fa0c f101 	lsl.w	r1, ip, r1
 8011e52:	4281      	cmp	r1, r0
 8011e54:	f040 84a1 	bne.w	801279a <__ieee754_pow+0x9da>
 8011e58:	f00c 0c01 	and.w	ip, ip, #1
 8011e5c:	f1cc 0102 	rsb	r1, ip, #2
 8011e60:	9100      	str	r1, [sp, #0]
 8011e62:	b180      	cbz	r0, 8011e86 <__ieee754_pow+0xc6>
 8011e64:	e059      	b.n	8011f1a <__ieee754_pow+0x15a>
 8011e66:	2800      	cmp	r0, #0
 8011e68:	d155      	bne.n	8011f16 <__ieee754_pow+0x156>
 8011e6a:	f1c1 0114 	rsb	r1, r1, #20
 8011e6e:	fa46 fc01 	asr.w	ip, r6, r1
 8011e72:	fa0c f101 	lsl.w	r1, ip, r1
 8011e76:	42b1      	cmp	r1, r6
 8011e78:	f040 848c 	bne.w	8012794 <__ieee754_pow+0x9d4>
 8011e7c:	f00c 0c01 	and.w	ip, ip, #1
 8011e80:	f1cc 0102 	rsb	r1, ip, #2
 8011e84:	9100      	str	r1, [sp, #0]
 8011e86:	4959      	ldr	r1, [pc, #356]	; (8011fec <__ieee754_pow+0x22c>)
 8011e88:	428e      	cmp	r6, r1
 8011e8a:	d12d      	bne.n	8011ee8 <__ieee754_pow+0x128>
 8011e8c:	2f00      	cmp	r7, #0
 8011e8e:	da79      	bge.n	8011f84 <__ieee754_pow+0x1c4>
 8011e90:	4956      	ldr	r1, [pc, #344]	; (8011fec <__ieee754_pow+0x22c>)
 8011e92:	2000      	movs	r0, #0
 8011e94:	f7ee fcda 	bl	800084c <__aeabi_ddiv>
 8011e98:	e016      	b.n	8011ec8 <__ieee754_pow+0x108>
 8011e9a:	2100      	movs	r1, #0
 8011e9c:	9100      	str	r1, [sp, #0]
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	d13b      	bne.n	8011f1a <__ieee754_pow+0x15a>
 8011ea2:	494f      	ldr	r1, [pc, #316]	; (8011fe0 <__ieee754_pow+0x220>)
 8011ea4:	428e      	cmp	r6, r1
 8011ea6:	d1ee      	bne.n	8011e86 <__ieee754_pow+0xc6>
 8011ea8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011eac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011eb0:	ea53 0308 	orrs.w	r3, r3, r8
 8011eb4:	f000 8466 	beq.w	8012784 <__ieee754_pow+0x9c4>
 8011eb8:	4b4d      	ldr	r3, [pc, #308]	; (8011ff0 <__ieee754_pow+0x230>)
 8011eba:	429c      	cmp	r4, r3
 8011ebc:	dd0d      	ble.n	8011eda <__ieee754_pow+0x11a>
 8011ebe:	2f00      	cmp	r7, #0
 8011ec0:	f280 8464 	bge.w	801278c <__ieee754_pow+0x9cc>
 8011ec4:	2000      	movs	r0, #0
 8011ec6:	2100      	movs	r1, #0
 8011ec8:	ec41 0b10 	vmov	d0, r0, r1
 8011ecc:	b00d      	add	sp, #52	; 0x34
 8011ece:	ecbd 8b06 	vpop	{d8-d10}
 8011ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed6:	2102      	movs	r1, #2
 8011ed8:	e7e0      	b.n	8011e9c <__ieee754_pow+0xdc>
 8011eda:	2f00      	cmp	r7, #0
 8011edc:	daf2      	bge.n	8011ec4 <__ieee754_pow+0x104>
 8011ede:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8011ee2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011ee6:	e7ef      	b.n	8011ec8 <__ieee754_pow+0x108>
 8011ee8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8011eec:	d104      	bne.n	8011ef8 <__ieee754_pow+0x138>
 8011eee:	4610      	mov	r0, r2
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	f7ee fb81 	bl	80005f8 <__aeabi_dmul>
 8011ef6:	e7e7      	b.n	8011ec8 <__ieee754_pow+0x108>
 8011ef8:	493e      	ldr	r1, [pc, #248]	; (8011ff4 <__ieee754_pow+0x234>)
 8011efa:	428f      	cmp	r7, r1
 8011efc:	d10d      	bne.n	8011f1a <__ieee754_pow+0x15a>
 8011efe:	f1b9 0f00 	cmp.w	r9, #0
 8011f02:	db0a      	blt.n	8011f1a <__ieee754_pow+0x15a>
 8011f04:	ec43 2b10 	vmov	d0, r2, r3
 8011f08:	b00d      	add	sp, #52	; 0x34
 8011f0a:	ecbd 8b06 	vpop	{d8-d10}
 8011f0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f12:	f000 bc77 	b.w	8012804 <__ieee754_sqrt>
 8011f16:	2100      	movs	r1, #0
 8011f18:	9100      	str	r1, [sp, #0]
 8011f1a:	ec43 2b10 	vmov	d0, r2, r3
 8011f1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f22:	f000 fd23 	bl	801296c <fabs>
 8011f26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f2a:	ec51 0b10 	vmov	r0, r1, d0
 8011f2e:	f1b8 0f00 	cmp.w	r8, #0
 8011f32:	d12a      	bne.n	8011f8a <__ieee754_pow+0x1ca>
 8011f34:	b12c      	cbz	r4, 8011f42 <__ieee754_pow+0x182>
 8011f36:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8011fec <__ieee754_pow+0x22c>
 8011f3a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8011f3e:	45e6      	cmp	lr, ip
 8011f40:	d123      	bne.n	8011f8a <__ieee754_pow+0x1ca>
 8011f42:	2f00      	cmp	r7, #0
 8011f44:	da05      	bge.n	8011f52 <__ieee754_pow+0x192>
 8011f46:	4602      	mov	r2, r0
 8011f48:	460b      	mov	r3, r1
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	4927      	ldr	r1, [pc, #156]	; (8011fec <__ieee754_pow+0x22c>)
 8011f4e:	f7ee fc7d 	bl	800084c <__aeabi_ddiv>
 8011f52:	f1b9 0f00 	cmp.w	r9, #0
 8011f56:	dab7      	bge.n	8011ec8 <__ieee754_pow+0x108>
 8011f58:	9b00      	ldr	r3, [sp, #0]
 8011f5a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011f5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011f62:	4323      	orrs	r3, r4
 8011f64:	d108      	bne.n	8011f78 <__ieee754_pow+0x1b8>
 8011f66:	4602      	mov	r2, r0
 8011f68:	460b      	mov	r3, r1
 8011f6a:	4610      	mov	r0, r2
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	f7ee f98b 	bl	8000288 <__aeabi_dsub>
 8011f72:	4602      	mov	r2, r0
 8011f74:	460b      	mov	r3, r1
 8011f76:	e78d      	b.n	8011e94 <__ieee754_pow+0xd4>
 8011f78:	9b00      	ldr	r3, [sp, #0]
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d1a4      	bne.n	8011ec8 <__ieee754_pow+0x108>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f84:	4610      	mov	r0, r2
 8011f86:	4619      	mov	r1, r3
 8011f88:	e79e      	b.n	8011ec8 <__ieee754_pow+0x108>
 8011f8a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8011f8e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8011f92:	950a      	str	r5, [sp, #40]	; 0x28
 8011f94:	9d00      	ldr	r5, [sp, #0]
 8011f96:	46ac      	mov	ip, r5
 8011f98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011f9a:	ea5c 0505 	orrs.w	r5, ip, r5
 8011f9e:	d0e4      	beq.n	8011f6a <__ieee754_pow+0x1aa>
 8011fa0:	4b15      	ldr	r3, [pc, #84]	; (8011ff8 <__ieee754_pow+0x238>)
 8011fa2:	429e      	cmp	r6, r3
 8011fa4:	f340 80fc 	ble.w	80121a0 <__ieee754_pow+0x3e0>
 8011fa8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011fac:	429e      	cmp	r6, r3
 8011fae:	4b10      	ldr	r3, [pc, #64]	; (8011ff0 <__ieee754_pow+0x230>)
 8011fb0:	dd07      	ble.n	8011fc2 <__ieee754_pow+0x202>
 8011fb2:	429c      	cmp	r4, r3
 8011fb4:	dc0a      	bgt.n	8011fcc <__ieee754_pow+0x20c>
 8011fb6:	2f00      	cmp	r7, #0
 8011fb8:	da84      	bge.n	8011ec4 <__ieee754_pow+0x104>
 8011fba:	a307      	add	r3, pc, #28	; (adr r3, 8011fd8 <__ieee754_pow+0x218>)
 8011fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc0:	e795      	b.n	8011eee <__ieee754_pow+0x12e>
 8011fc2:	429c      	cmp	r4, r3
 8011fc4:	dbf7      	blt.n	8011fb6 <__ieee754_pow+0x1f6>
 8011fc6:	4b09      	ldr	r3, [pc, #36]	; (8011fec <__ieee754_pow+0x22c>)
 8011fc8:	429c      	cmp	r4, r3
 8011fca:	dd17      	ble.n	8011ffc <__ieee754_pow+0x23c>
 8011fcc:	2f00      	cmp	r7, #0
 8011fce:	dcf4      	bgt.n	8011fba <__ieee754_pow+0x1fa>
 8011fd0:	e778      	b.n	8011ec4 <__ieee754_pow+0x104>
 8011fd2:	bf00      	nop
 8011fd4:	f3af 8000 	nop.w
 8011fd8:	8800759c 	.word	0x8800759c
 8011fdc:	7e37e43c 	.word	0x7e37e43c
 8011fe0:	7ff00000 	.word	0x7ff00000
 8011fe4:	08013b50 	.word	0x08013b50
 8011fe8:	433fffff 	.word	0x433fffff
 8011fec:	3ff00000 	.word	0x3ff00000
 8011ff0:	3fefffff 	.word	0x3fefffff
 8011ff4:	3fe00000 	.word	0x3fe00000
 8011ff8:	41e00000 	.word	0x41e00000
 8011ffc:	4b64      	ldr	r3, [pc, #400]	; (8012190 <__ieee754_pow+0x3d0>)
 8011ffe:	2200      	movs	r2, #0
 8012000:	f7ee f942 	bl	8000288 <__aeabi_dsub>
 8012004:	a356      	add	r3, pc, #344	; (adr r3, 8012160 <__ieee754_pow+0x3a0>)
 8012006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200a:	4604      	mov	r4, r0
 801200c:	460d      	mov	r5, r1
 801200e:	f7ee faf3 	bl	80005f8 <__aeabi_dmul>
 8012012:	a355      	add	r3, pc, #340	; (adr r3, 8012168 <__ieee754_pow+0x3a8>)
 8012014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012018:	4606      	mov	r6, r0
 801201a:	460f      	mov	r7, r1
 801201c:	4620      	mov	r0, r4
 801201e:	4629      	mov	r1, r5
 8012020:	f7ee faea 	bl	80005f8 <__aeabi_dmul>
 8012024:	4b5b      	ldr	r3, [pc, #364]	; (8012194 <__ieee754_pow+0x3d4>)
 8012026:	4682      	mov	sl, r0
 8012028:	468b      	mov	fp, r1
 801202a:	2200      	movs	r2, #0
 801202c:	4620      	mov	r0, r4
 801202e:	4629      	mov	r1, r5
 8012030:	f7ee fae2 	bl	80005f8 <__aeabi_dmul>
 8012034:	4602      	mov	r2, r0
 8012036:	460b      	mov	r3, r1
 8012038:	a14d      	add	r1, pc, #308	; (adr r1, 8012170 <__ieee754_pow+0x3b0>)
 801203a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801203e:	f7ee f923 	bl	8000288 <__aeabi_dsub>
 8012042:	4622      	mov	r2, r4
 8012044:	462b      	mov	r3, r5
 8012046:	f7ee fad7 	bl	80005f8 <__aeabi_dmul>
 801204a:	4602      	mov	r2, r0
 801204c:	460b      	mov	r3, r1
 801204e:	2000      	movs	r0, #0
 8012050:	4951      	ldr	r1, [pc, #324]	; (8012198 <__ieee754_pow+0x3d8>)
 8012052:	f7ee f919 	bl	8000288 <__aeabi_dsub>
 8012056:	4622      	mov	r2, r4
 8012058:	4680      	mov	r8, r0
 801205a:	4689      	mov	r9, r1
 801205c:	462b      	mov	r3, r5
 801205e:	4620      	mov	r0, r4
 8012060:	4629      	mov	r1, r5
 8012062:	f7ee fac9 	bl	80005f8 <__aeabi_dmul>
 8012066:	4602      	mov	r2, r0
 8012068:	460b      	mov	r3, r1
 801206a:	4640      	mov	r0, r8
 801206c:	4649      	mov	r1, r9
 801206e:	f7ee fac3 	bl	80005f8 <__aeabi_dmul>
 8012072:	a341      	add	r3, pc, #260	; (adr r3, 8012178 <__ieee754_pow+0x3b8>)
 8012074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012078:	f7ee fabe 	bl	80005f8 <__aeabi_dmul>
 801207c:	4602      	mov	r2, r0
 801207e:	460b      	mov	r3, r1
 8012080:	4650      	mov	r0, sl
 8012082:	4659      	mov	r1, fp
 8012084:	f7ee f900 	bl	8000288 <__aeabi_dsub>
 8012088:	4602      	mov	r2, r0
 801208a:	460b      	mov	r3, r1
 801208c:	4680      	mov	r8, r0
 801208e:	4689      	mov	r9, r1
 8012090:	4630      	mov	r0, r6
 8012092:	4639      	mov	r1, r7
 8012094:	f7ee f8fa 	bl	800028c <__adddf3>
 8012098:	2400      	movs	r4, #0
 801209a:	4632      	mov	r2, r6
 801209c:	463b      	mov	r3, r7
 801209e:	4620      	mov	r0, r4
 80120a0:	460d      	mov	r5, r1
 80120a2:	f7ee f8f1 	bl	8000288 <__aeabi_dsub>
 80120a6:	4602      	mov	r2, r0
 80120a8:	460b      	mov	r3, r1
 80120aa:	4640      	mov	r0, r8
 80120ac:	4649      	mov	r1, r9
 80120ae:	f7ee f8eb 	bl	8000288 <__aeabi_dsub>
 80120b2:	9b00      	ldr	r3, [sp, #0]
 80120b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120b6:	3b01      	subs	r3, #1
 80120b8:	4313      	orrs	r3, r2
 80120ba:	4682      	mov	sl, r0
 80120bc:	468b      	mov	fp, r1
 80120be:	f040 81f1 	bne.w	80124a4 <__ieee754_pow+0x6e4>
 80120c2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012180 <__ieee754_pow+0x3c0>
 80120c6:	eeb0 8a47 	vmov.f32	s16, s14
 80120ca:	eef0 8a67 	vmov.f32	s17, s15
 80120ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80120d2:	2600      	movs	r6, #0
 80120d4:	4632      	mov	r2, r6
 80120d6:	463b      	mov	r3, r7
 80120d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120dc:	f7ee f8d4 	bl	8000288 <__aeabi_dsub>
 80120e0:	4622      	mov	r2, r4
 80120e2:	462b      	mov	r3, r5
 80120e4:	f7ee fa88 	bl	80005f8 <__aeabi_dmul>
 80120e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80120ec:	4680      	mov	r8, r0
 80120ee:	4689      	mov	r9, r1
 80120f0:	4650      	mov	r0, sl
 80120f2:	4659      	mov	r1, fp
 80120f4:	f7ee fa80 	bl	80005f8 <__aeabi_dmul>
 80120f8:	4602      	mov	r2, r0
 80120fa:	460b      	mov	r3, r1
 80120fc:	4640      	mov	r0, r8
 80120fe:	4649      	mov	r1, r9
 8012100:	f7ee f8c4 	bl	800028c <__adddf3>
 8012104:	4632      	mov	r2, r6
 8012106:	463b      	mov	r3, r7
 8012108:	4680      	mov	r8, r0
 801210a:	4689      	mov	r9, r1
 801210c:	4620      	mov	r0, r4
 801210e:	4629      	mov	r1, r5
 8012110:	f7ee fa72 	bl	80005f8 <__aeabi_dmul>
 8012114:	460b      	mov	r3, r1
 8012116:	4604      	mov	r4, r0
 8012118:	460d      	mov	r5, r1
 801211a:	4602      	mov	r2, r0
 801211c:	4649      	mov	r1, r9
 801211e:	4640      	mov	r0, r8
 8012120:	f7ee f8b4 	bl	800028c <__adddf3>
 8012124:	4b1d      	ldr	r3, [pc, #116]	; (801219c <__ieee754_pow+0x3dc>)
 8012126:	4299      	cmp	r1, r3
 8012128:	ec45 4b19 	vmov	d9, r4, r5
 801212c:	4606      	mov	r6, r0
 801212e:	460f      	mov	r7, r1
 8012130:	468b      	mov	fp, r1
 8012132:	f340 82fe 	ble.w	8012732 <__ieee754_pow+0x972>
 8012136:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801213a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801213e:	4303      	orrs	r3, r0
 8012140:	f000 81f0 	beq.w	8012524 <__ieee754_pow+0x764>
 8012144:	a310      	add	r3, pc, #64	; (adr r3, 8012188 <__ieee754_pow+0x3c8>)
 8012146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214a:	ec51 0b18 	vmov	r0, r1, d8
 801214e:	f7ee fa53 	bl	80005f8 <__aeabi_dmul>
 8012152:	a30d      	add	r3, pc, #52	; (adr r3, 8012188 <__ieee754_pow+0x3c8>)
 8012154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012158:	e6cb      	b.n	8011ef2 <__ieee754_pow+0x132>
 801215a:	bf00      	nop
 801215c:	f3af 8000 	nop.w
 8012160:	60000000 	.word	0x60000000
 8012164:	3ff71547 	.word	0x3ff71547
 8012168:	f85ddf44 	.word	0xf85ddf44
 801216c:	3e54ae0b 	.word	0x3e54ae0b
 8012170:	55555555 	.word	0x55555555
 8012174:	3fd55555 	.word	0x3fd55555
 8012178:	652b82fe 	.word	0x652b82fe
 801217c:	3ff71547 	.word	0x3ff71547
 8012180:	00000000 	.word	0x00000000
 8012184:	bff00000 	.word	0xbff00000
 8012188:	8800759c 	.word	0x8800759c
 801218c:	7e37e43c 	.word	0x7e37e43c
 8012190:	3ff00000 	.word	0x3ff00000
 8012194:	3fd00000 	.word	0x3fd00000
 8012198:	3fe00000 	.word	0x3fe00000
 801219c:	408fffff 	.word	0x408fffff
 80121a0:	4bd7      	ldr	r3, [pc, #860]	; (8012500 <__ieee754_pow+0x740>)
 80121a2:	ea03 0309 	and.w	r3, r3, r9
 80121a6:	2200      	movs	r2, #0
 80121a8:	b92b      	cbnz	r3, 80121b6 <__ieee754_pow+0x3f6>
 80121aa:	4bd6      	ldr	r3, [pc, #856]	; (8012504 <__ieee754_pow+0x744>)
 80121ac:	f7ee fa24 	bl	80005f8 <__aeabi_dmul>
 80121b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80121b4:	460c      	mov	r4, r1
 80121b6:	1523      	asrs	r3, r4, #20
 80121b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80121bc:	4413      	add	r3, r2
 80121be:	9309      	str	r3, [sp, #36]	; 0x24
 80121c0:	4bd1      	ldr	r3, [pc, #836]	; (8012508 <__ieee754_pow+0x748>)
 80121c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80121c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80121ca:	429c      	cmp	r4, r3
 80121cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80121d0:	dd08      	ble.n	80121e4 <__ieee754_pow+0x424>
 80121d2:	4bce      	ldr	r3, [pc, #824]	; (801250c <__ieee754_pow+0x74c>)
 80121d4:	429c      	cmp	r4, r3
 80121d6:	f340 8163 	ble.w	80124a0 <__ieee754_pow+0x6e0>
 80121da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121dc:	3301      	adds	r3, #1
 80121de:	9309      	str	r3, [sp, #36]	; 0x24
 80121e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80121e4:	2400      	movs	r4, #0
 80121e6:	00e3      	lsls	r3, r4, #3
 80121e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80121ea:	4bc9      	ldr	r3, [pc, #804]	; (8012510 <__ieee754_pow+0x750>)
 80121ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80121f0:	ed93 7b00 	vldr	d7, [r3]
 80121f4:	4629      	mov	r1, r5
 80121f6:	ec53 2b17 	vmov	r2, r3, d7
 80121fa:	eeb0 8a47 	vmov.f32	s16, s14
 80121fe:	eef0 8a67 	vmov.f32	s17, s15
 8012202:	4682      	mov	sl, r0
 8012204:	f7ee f840 	bl	8000288 <__aeabi_dsub>
 8012208:	4652      	mov	r2, sl
 801220a:	4606      	mov	r6, r0
 801220c:	460f      	mov	r7, r1
 801220e:	462b      	mov	r3, r5
 8012210:	ec51 0b18 	vmov	r0, r1, d8
 8012214:	f7ee f83a 	bl	800028c <__adddf3>
 8012218:	4602      	mov	r2, r0
 801221a:	460b      	mov	r3, r1
 801221c:	2000      	movs	r0, #0
 801221e:	49bd      	ldr	r1, [pc, #756]	; (8012514 <__ieee754_pow+0x754>)
 8012220:	f7ee fb14 	bl	800084c <__aeabi_ddiv>
 8012224:	ec41 0b19 	vmov	d9, r0, r1
 8012228:	4602      	mov	r2, r0
 801222a:	460b      	mov	r3, r1
 801222c:	4630      	mov	r0, r6
 801222e:	4639      	mov	r1, r7
 8012230:	f7ee f9e2 	bl	80005f8 <__aeabi_dmul>
 8012234:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012238:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801223c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012240:	2300      	movs	r3, #0
 8012242:	9304      	str	r3, [sp, #16]
 8012244:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012248:	46ab      	mov	fp, r5
 801224a:	106d      	asrs	r5, r5, #1
 801224c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012250:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012254:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012258:	2200      	movs	r2, #0
 801225a:	4640      	mov	r0, r8
 801225c:	4649      	mov	r1, r9
 801225e:	4614      	mov	r4, r2
 8012260:	461d      	mov	r5, r3
 8012262:	f7ee f9c9 	bl	80005f8 <__aeabi_dmul>
 8012266:	4602      	mov	r2, r0
 8012268:	460b      	mov	r3, r1
 801226a:	4630      	mov	r0, r6
 801226c:	4639      	mov	r1, r7
 801226e:	f7ee f80b 	bl	8000288 <__aeabi_dsub>
 8012272:	ec53 2b18 	vmov	r2, r3, d8
 8012276:	4606      	mov	r6, r0
 8012278:	460f      	mov	r7, r1
 801227a:	4620      	mov	r0, r4
 801227c:	4629      	mov	r1, r5
 801227e:	f7ee f803 	bl	8000288 <__aeabi_dsub>
 8012282:	4602      	mov	r2, r0
 8012284:	460b      	mov	r3, r1
 8012286:	4650      	mov	r0, sl
 8012288:	4659      	mov	r1, fp
 801228a:	f7ed fffd 	bl	8000288 <__aeabi_dsub>
 801228e:	4642      	mov	r2, r8
 8012290:	464b      	mov	r3, r9
 8012292:	f7ee f9b1 	bl	80005f8 <__aeabi_dmul>
 8012296:	4602      	mov	r2, r0
 8012298:	460b      	mov	r3, r1
 801229a:	4630      	mov	r0, r6
 801229c:	4639      	mov	r1, r7
 801229e:	f7ed fff3 	bl	8000288 <__aeabi_dsub>
 80122a2:	ec53 2b19 	vmov	r2, r3, d9
 80122a6:	f7ee f9a7 	bl	80005f8 <__aeabi_dmul>
 80122aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80122ae:	ec41 0b18 	vmov	d8, r0, r1
 80122b2:	4610      	mov	r0, r2
 80122b4:	4619      	mov	r1, r3
 80122b6:	f7ee f99f 	bl	80005f8 <__aeabi_dmul>
 80122ba:	a37d      	add	r3, pc, #500	; (adr r3, 80124b0 <__ieee754_pow+0x6f0>)
 80122bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c0:	4604      	mov	r4, r0
 80122c2:	460d      	mov	r5, r1
 80122c4:	f7ee f998 	bl	80005f8 <__aeabi_dmul>
 80122c8:	a37b      	add	r3, pc, #492	; (adr r3, 80124b8 <__ieee754_pow+0x6f8>)
 80122ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ce:	f7ed ffdd 	bl	800028c <__adddf3>
 80122d2:	4622      	mov	r2, r4
 80122d4:	462b      	mov	r3, r5
 80122d6:	f7ee f98f 	bl	80005f8 <__aeabi_dmul>
 80122da:	a379      	add	r3, pc, #484	; (adr r3, 80124c0 <__ieee754_pow+0x700>)
 80122dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e0:	f7ed ffd4 	bl	800028c <__adddf3>
 80122e4:	4622      	mov	r2, r4
 80122e6:	462b      	mov	r3, r5
 80122e8:	f7ee f986 	bl	80005f8 <__aeabi_dmul>
 80122ec:	a376      	add	r3, pc, #472	; (adr r3, 80124c8 <__ieee754_pow+0x708>)
 80122ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f2:	f7ed ffcb 	bl	800028c <__adddf3>
 80122f6:	4622      	mov	r2, r4
 80122f8:	462b      	mov	r3, r5
 80122fa:	f7ee f97d 	bl	80005f8 <__aeabi_dmul>
 80122fe:	a374      	add	r3, pc, #464	; (adr r3, 80124d0 <__ieee754_pow+0x710>)
 8012300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012304:	f7ed ffc2 	bl	800028c <__adddf3>
 8012308:	4622      	mov	r2, r4
 801230a:	462b      	mov	r3, r5
 801230c:	f7ee f974 	bl	80005f8 <__aeabi_dmul>
 8012310:	a371      	add	r3, pc, #452	; (adr r3, 80124d8 <__ieee754_pow+0x718>)
 8012312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012316:	f7ed ffb9 	bl	800028c <__adddf3>
 801231a:	4622      	mov	r2, r4
 801231c:	4606      	mov	r6, r0
 801231e:	460f      	mov	r7, r1
 8012320:	462b      	mov	r3, r5
 8012322:	4620      	mov	r0, r4
 8012324:	4629      	mov	r1, r5
 8012326:	f7ee f967 	bl	80005f8 <__aeabi_dmul>
 801232a:	4602      	mov	r2, r0
 801232c:	460b      	mov	r3, r1
 801232e:	4630      	mov	r0, r6
 8012330:	4639      	mov	r1, r7
 8012332:	f7ee f961 	bl	80005f8 <__aeabi_dmul>
 8012336:	4642      	mov	r2, r8
 8012338:	4604      	mov	r4, r0
 801233a:	460d      	mov	r5, r1
 801233c:	464b      	mov	r3, r9
 801233e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012342:	f7ed ffa3 	bl	800028c <__adddf3>
 8012346:	ec53 2b18 	vmov	r2, r3, d8
 801234a:	f7ee f955 	bl	80005f8 <__aeabi_dmul>
 801234e:	4622      	mov	r2, r4
 8012350:	462b      	mov	r3, r5
 8012352:	f7ed ff9b 	bl	800028c <__adddf3>
 8012356:	4642      	mov	r2, r8
 8012358:	4682      	mov	sl, r0
 801235a:	468b      	mov	fp, r1
 801235c:	464b      	mov	r3, r9
 801235e:	4640      	mov	r0, r8
 8012360:	4649      	mov	r1, r9
 8012362:	f7ee f949 	bl	80005f8 <__aeabi_dmul>
 8012366:	4b6c      	ldr	r3, [pc, #432]	; (8012518 <__ieee754_pow+0x758>)
 8012368:	2200      	movs	r2, #0
 801236a:	4606      	mov	r6, r0
 801236c:	460f      	mov	r7, r1
 801236e:	f7ed ff8d 	bl	800028c <__adddf3>
 8012372:	4652      	mov	r2, sl
 8012374:	465b      	mov	r3, fp
 8012376:	f7ed ff89 	bl	800028c <__adddf3>
 801237a:	9c04      	ldr	r4, [sp, #16]
 801237c:	460d      	mov	r5, r1
 801237e:	4622      	mov	r2, r4
 8012380:	460b      	mov	r3, r1
 8012382:	4640      	mov	r0, r8
 8012384:	4649      	mov	r1, r9
 8012386:	f7ee f937 	bl	80005f8 <__aeabi_dmul>
 801238a:	4b63      	ldr	r3, [pc, #396]	; (8012518 <__ieee754_pow+0x758>)
 801238c:	4680      	mov	r8, r0
 801238e:	4689      	mov	r9, r1
 8012390:	2200      	movs	r2, #0
 8012392:	4620      	mov	r0, r4
 8012394:	4629      	mov	r1, r5
 8012396:	f7ed ff77 	bl	8000288 <__aeabi_dsub>
 801239a:	4632      	mov	r2, r6
 801239c:	463b      	mov	r3, r7
 801239e:	f7ed ff73 	bl	8000288 <__aeabi_dsub>
 80123a2:	4602      	mov	r2, r0
 80123a4:	460b      	mov	r3, r1
 80123a6:	4650      	mov	r0, sl
 80123a8:	4659      	mov	r1, fp
 80123aa:	f7ed ff6d 	bl	8000288 <__aeabi_dsub>
 80123ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80123b2:	f7ee f921 	bl	80005f8 <__aeabi_dmul>
 80123b6:	4622      	mov	r2, r4
 80123b8:	4606      	mov	r6, r0
 80123ba:	460f      	mov	r7, r1
 80123bc:	462b      	mov	r3, r5
 80123be:	ec51 0b18 	vmov	r0, r1, d8
 80123c2:	f7ee f919 	bl	80005f8 <__aeabi_dmul>
 80123c6:	4602      	mov	r2, r0
 80123c8:	460b      	mov	r3, r1
 80123ca:	4630      	mov	r0, r6
 80123cc:	4639      	mov	r1, r7
 80123ce:	f7ed ff5d 	bl	800028c <__adddf3>
 80123d2:	4606      	mov	r6, r0
 80123d4:	460f      	mov	r7, r1
 80123d6:	4602      	mov	r2, r0
 80123d8:	460b      	mov	r3, r1
 80123da:	4640      	mov	r0, r8
 80123dc:	4649      	mov	r1, r9
 80123de:	f7ed ff55 	bl	800028c <__adddf3>
 80123e2:	9c04      	ldr	r4, [sp, #16]
 80123e4:	a33e      	add	r3, pc, #248	; (adr r3, 80124e0 <__ieee754_pow+0x720>)
 80123e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ea:	4620      	mov	r0, r4
 80123ec:	460d      	mov	r5, r1
 80123ee:	f7ee f903 	bl	80005f8 <__aeabi_dmul>
 80123f2:	4642      	mov	r2, r8
 80123f4:	ec41 0b18 	vmov	d8, r0, r1
 80123f8:	464b      	mov	r3, r9
 80123fa:	4620      	mov	r0, r4
 80123fc:	4629      	mov	r1, r5
 80123fe:	f7ed ff43 	bl	8000288 <__aeabi_dsub>
 8012402:	4602      	mov	r2, r0
 8012404:	460b      	mov	r3, r1
 8012406:	4630      	mov	r0, r6
 8012408:	4639      	mov	r1, r7
 801240a:	f7ed ff3d 	bl	8000288 <__aeabi_dsub>
 801240e:	a336      	add	r3, pc, #216	; (adr r3, 80124e8 <__ieee754_pow+0x728>)
 8012410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012414:	f7ee f8f0 	bl	80005f8 <__aeabi_dmul>
 8012418:	a335      	add	r3, pc, #212	; (adr r3, 80124f0 <__ieee754_pow+0x730>)
 801241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241e:	4606      	mov	r6, r0
 8012420:	460f      	mov	r7, r1
 8012422:	4620      	mov	r0, r4
 8012424:	4629      	mov	r1, r5
 8012426:	f7ee f8e7 	bl	80005f8 <__aeabi_dmul>
 801242a:	4602      	mov	r2, r0
 801242c:	460b      	mov	r3, r1
 801242e:	4630      	mov	r0, r6
 8012430:	4639      	mov	r1, r7
 8012432:	f7ed ff2b 	bl	800028c <__adddf3>
 8012436:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012438:	4b38      	ldr	r3, [pc, #224]	; (801251c <__ieee754_pow+0x75c>)
 801243a:	4413      	add	r3, r2
 801243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012440:	f7ed ff24 	bl	800028c <__adddf3>
 8012444:	4682      	mov	sl, r0
 8012446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012448:	468b      	mov	fp, r1
 801244a:	f7ee f86b 	bl	8000524 <__aeabi_i2d>
 801244e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012450:	4b33      	ldr	r3, [pc, #204]	; (8012520 <__ieee754_pow+0x760>)
 8012452:	4413      	add	r3, r2
 8012454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012458:	4606      	mov	r6, r0
 801245a:	460f      	mov	r7, r1
 801245c:	4652      	mov	r2, sl
 801245e:	465b      	mov	r3, fp
 8012460:	ec51 0b18 	vmov	r0, r1, d8
 8012464:	f7ed ff12 	bl	800028c <__adddf3>
 8012468:	4642      	mov	r2, r8
 801246a:	464b      	mov	r3, r9
 801246c:	f7ed ff0e 	bl	800028c <__adddf3>
 8012470:	4632      	mov	r2, r6
 8012472:	463b      	mov	r3, r7
 8012474:	f7ed ff0a 	bl	800028c <__adddf3>
 8012478:	9c04      	ldr	r4, [sp, #16]
 801247a:	4632      	mov	r2, r6
 801247c:	463b      	mov	r3, r7
 801247e:	4620      	mov	r0, r4
 8012480:	460d      	mov	r5, r1
 8012482:	f7ed ff01 	bl	8000288 <__aeabi_dsub>
 8012486:	4642      	mov	r2, r8
 8012488:	464b      	mov	r3, r9
 801248a:	f7ed fefd 	bl	8000288 <__aeabi_dsub>
 801248e:	ec53 2b18 	vmov	r2, r3, d8
 8012492:	f7ed fef9 	bl	8000288 <__aeabi_dsub>
 8012496:	4602      	mov	r2, r0
 8012498:	460b      	mov	r3, r1
 801249a:	4650      	mov	r0, sl
 801249c:	4659      	mov	r1, fp
 801249e:	e606      	b.n	80120ae <__ieee754_pow+0x2ee>
 80124a0:	2401      	movs	r4, #1
 80124a2:	e6a0      	b.n	80121e6 <__ieee754_pow+0x426>
 80124a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80124f8 <__ieee754_pow+0x738>
 80124a8:	e60d      	b.n	80120c6 <__ieee754_pow+0x306>
 80124aa:	bf00      	nop
 80124ac:	f3af 8000 	nop.w
 80124b0:	4a454eef 	.word	0x4a454eef
 80124b4:	3fca7e28 	.word	0x3fca7e28
 80124b8:	93c9db65 	.word	0x93c9db65
 80124bc:	3fcd864a 	.word	0x3fcd864a
 80124c0:	a91d4101 	.word	0xa91d4101
 80124c4:	3fd17460 	.word	0x3fd17460
 80124c8:	518f264d 	.word	0x518f264d
 80124cc:	3fd55555 	.word	0x3fd55555
 80124d0:	db6fabff 	.word	0xdb6fabff
 80124d4:	3fdb6db6 	.word	0x3fdb6db6
 80124d8:	33333303 	.word	0x33333303
 80124dc:	3fe33333 	.word	0x3fe33333
 80124e0:	e0000000 	.word	0xe0000000
 80124e4:	3feec709 	.word	0x3feec709
 80124e8:	dc3a03fd 	.word	0xdc3a03fd
 80124ec:	3feec709 	.word	0x3feec709
 80124f0:	145b01f5 	.word	0x145b01f5
 80124f4:	be3e2fe0 	.word	0xbe3e2fe0
 80124f8:	00000000 	.word	0x00000000
 80124fc:	3ff00000 	.word	0x3ff00000
 8012500:	7ff00000 	.word	0x7ff00000
 8012504:	43400000 	.word	0x43400000
 8012508:	0003988e 	.word	0x0003988e
 801250c:	000bb679 	.word	0x000bb679
 8012510:	08013b58 	.word	0x08013b58
 8012514:	3ff00000 	.word	0x3ff00000
 8012518:	40080000 	.word	0x40080000
 801251c:	08013b78 	.word	0x08013b78
 8012520:	08013b68 	.word	0x08013b68
 8012524:	a3b5      	add	r3, pc, #724	; (adr r3, 80127fc <__ieee754_pow+0xa3c>)
 8012526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252a:	4640      	mov	r0, r8
 801252c:	4649      	mov	r1, r9
 801252e:	f7ed fead 	bl	800028c <__adddf3>
 8012532:	4622      	mov	r2, r4
 8012534:	ec41 0b1a 	vmov	d10, r0, r1
 8012538:	462b      	mov	r3, r5
 801253a:	4630      	mov	r0, r6
 801253c:	4639      	mov	r1, r7
 801253e:	f7ed fea3 	bl	8000288 <__aeabi_dsub>
 8012542:	4602      	mov	r2, r0
 8012544:	460b      	mov	r3, r1
 8012546:	ec51 0b1a 	vmov	r0, r1, d10
 801254a:	f7ee fae5 	bl	8000b18 <__aeabi_dcmpgt>
 801254e:	2800      	cmp	r0, #0
 8012550:	f47f adf8 	bne.w	8012144 <__ieee754_pow+0x384>
 8012554:	4aa4      	ldr	r2, [pc, #656]	; (80127e8 <__ieee754_pow+0xa28>)
 8012556:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801255a:	4293      	cmp	r3, r2
 801255c:	f340 810b 	ble.w	8012776 <__ieee754_pow+0x9b6>
 8012560:	151b      	asrs	r3, r3, #20
 8012562:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012566:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801256a:	fa4a f303 	asr.w	r3, sl, r3
 801256e:	445b      	add	r3, fp
 8012570:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012574:	4e9d      	ldr	r6, [pc, #628]	; (80127ec <__ieee754_pow+0xa2c>)
 8012576:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801257a:	4116      	asrs	r6, r2
 801257c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012580:	2000      	movs	r0, #0
 8012582:	ea23 0106 	bic.w	r1, r3, r6
 8012586:	f1c2 0214 	rsb	r2, r2, #20
 801258a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801258e:	fa4a fa02 	asr.w	sl, sl, r2
 8012592:	f1bb 0f00 	cmp.w	fp, #0
 8012596:	4602      	mov	r2, r0
 8012598:	460b      	mov	r3, r1
 801259a:	4620      	mov	r0, r4
 801259c:	4629      	mov	r1, r5
 801259e:	bfb8      	it	lt
 80125a0:	f1ca 0a00 	rsblt	sl, sl, #0
 80125a4:	f7ed fe70 	bl	8000288 <__aeabi_dsub>
 80125a8:	ec41 0b19 	vmov	d9, r0, r1
 80125ac:	4642      	mov	r2, r8
 80125ae:	464b      	mov	r3, r9
 80125b0:	ec51 0b19 	vmov	r0, r1, d9
 80125b4:	f7ed fe6a 	bl	800028c <__adddf3>
 80125b8:	2400      	movs	r4, #0
 80125ba:	a379      	add	r3, pc, #484	; (adr r3, 80127a0 <__ieee754_pow+0x9e0>)
 80125bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c0:	4620      	mov	r0, r4
 80125c2:	460d      	mov	r5, r1
 80125c4:	f7ee f818 	bl	80005f8 <__aeabi_dmul>
 80125c8:	ec53 2b19 	vmov	r2, r3, d9
 80125cc:	4606      	mov	r6, r0
 80125ce:	460f      	mov	r7, r1
 80125d0:	4620      	mov	r0, r4
 80125d2:	4629      	mov	r1, r5
 80125d4:	f7ed fe58 	bl	8000288 <__aeabi_dsub>
 80125d8:	4602      	mov	r2, r0
 80125da:	460b      	mov	r3, r1
 80125dc:	4640      	mov	r0, r8
 80125de:	4649      	mov	r1, r9
 80125e0:	f7ed fe52 	bl	8000288 <__aeabi_dsub>
 80125e4:	a370      	add	r3, pc, #448	; (adr r3, 80127a8 <__ieee754_pow+0x9e8>)
 80125e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ea:	f7ee f805 	bl	80005f8 <__aeabi_dmul>
 80125ee:	a370      	add	r3, pc, #448	; (adr r3, 80127b0 <__ieee754_pow+0x9f0>)
 80125f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f4:	4680      	mov	r8, r0
 80125f6:	4689      	mov	r9, r1
 80125f8:	4620      	mov	r0, r4
 80125fa:	4629      	mov	r1, r5
 80125fc:	f7ed fffc 	bl	80005f8 <__aeabi_dmul>
 8012600:	4602      	mov	r2, r0
 8012602:	460b      	mov	r3, r1
 8012604:	4640      	mov	r0, r8
 8012606:	4649      	mov	r1, r9
 8012608:	f7ed fe40 	bl	800028c <__adddf3>
 801260c:	4604      	mov	r4, r0
 801260e:	460d      	mov	r5, r1
 8012610:	4602      	mov	r2, r0
 8012612:	460b      	mov	r3, r1
 8012614:	4630      	mov	r0, r6
 8012616:	4639      	mov	r1, r7
 8012618:	f7ed fe38 	bl	800028c <__adddf3>
 801261c:	4632      	mov	r2, r6
 801261e:	463b      	mov	r3, r7
 8012620:	4680      	mov	r8, r0
 8012622:	4689      	mov	r9, r1
 8012624:	f7ed fe30 	bl	8000288 <__aeabi_dsub>
 8012628:	4602      	mov	r2, r0
 801262a:	460b      	mov	r3, r1
 801262c:	4620      	mov	r0, r4
 801262e:	4629      	mov	r1, r5
 8012630:	f7ed fe2a 	bl	8000288 <__aeabi_dsub>
 8012634:	4642      	mov	r2, r8
 8012636:	4606      	mov	r6, r0
 8012638:	460f      	mov	r7, r1
 801263a:	464b      	mov	r3, r9
 801263c:	4640      	mov	r0, r8
 801263e:	4649      	mov	r1, r9
 8012640:	f7ed ffda 	bl	80005f8 <__aeabi_dmul>
 8012644:	a35c      	add	r3, pc, #368	; (adr r3, 80127b8 <__ieee754_pow+0x9f8>)
 8012646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264a:	4604      	mov	r4, r0
 801264c:	460d      	mov	r5, r1
 801264e:	f7ed ffd3 	bl	80005f8 <__aeabi_dmul>
 8012652:	a35b      	add	r3, pc, #364	; (adr r3, 80127c0 <__ieee754_pow+0xa00>)
 8012654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012658:	f7ed fe16 	bl	8000288 <__aeabi_dsub>
 801265c:	4622      	mov	r2, r4
 801265e:	462b      	mov	r3, r5
 8012660:	f7ed ffca 	bl	80005f8 <__aeabi_dmul>
 8012664:	a358      	add	r3, pc, #352	; (adr r3, 80127c8 <__ieee754_pow+0xa08>)
 8012666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266a:	f7ed fe0f 	bl	800028c <__adddf3>
 801266e:	4622      	mov	r2, r4
 8012670:	462b      	mov	r3, r5
 8012672:	f7ed ffc1 	bl	80005f8 <__aeabi_dmul>
 8012676:	a356      	add	r3, pc, #344	; (adr r3, 80127d0 <__ieee754_pow+0xa10>)
 8012678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267c:	f7ed fe04 	bl	8000288 <__aeabi_dsub>
 8012680:	4622      	mov	r2, r4
 8012682:	462b      	mov	r3, r5
 8012684:	f7ed ffb8 	bl	80005f8 <__aeabi_dmul>
 8012688:	a353      	add	r3, pc, #332	; (adr r3, 80127d8 <__ieee754_pow+0xa18>)
 801268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268e:	f7ed fdfd 	bl	800028c <__adddf3>
 8012692:	4622      	mov	r2, r4
 8012694:	462b      	mov	r3, r5
 8012696:	f7ed ffaf 	bl	80005f8 <__aeabi_dmul>
 801269a:	4602      	mov	r2, r0
 801269c:	460b      	mov	r3, r1
 801269e:	4640      	mov	r0, r8
 80126a0:	4649      	mov	r1, r9
 80126a2:	f7ed fdf1 	bl	8000288 <__aeabi_dsub>
 80126a6:	4604      	mov	r4, r0
 80126a8:	460d      	mov	r5, r1
 80126aa:	4602      	mov	r2, r0
 80126ac:	460b      	mov	r3, r1
 80126ae:	4640      	mov	r0, r8
 80126b0:	4649      	mov	r1, r9
 80126b2:	f7ed ffa1 	bl	80005f8 <__aeabi_dmul>
 80126b6:	2200      	movs	r2, #0
 80126b8:	ec41 0b19 	vmov	d9, r0, r1
 80126bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80126c0:	4620      	mov	r0, r4
 80126c2:	4629      	mov	r1, r5
 80126c4:	f7ed fde0 	bl	8000288 <__aeabi_dsub>
 80126c8:	4602      	mov	r2, r0
 80126ca:	460b      	mov	r3, r1
 80126cc:	ec51 0b19 	vmov	r0, r1, d9
 80126d0:	f7ee f8bc 	bl	800084c <__aeabi_ddiv>
 80126d4:	4632      	mov	r2, r6
 80126d6:	4604      	mov	r4, r0
 80126d8:	460d      	mov	r5, r1
 80126da:	463b      	mov	r3, r7
 80126dc:	4640      	mov	r0, r8
 80126de:	4649      	mov	r1, r9
 80126e0:	f7ed ff8a 	bl	80005f8 <__aeabi_dmul>
 80126e4:	4632      	mov	r2, r6
 80126e6:	463b      	mov	r3, r7
 80126e8:	f7ed fdd0 	bl	800028c <__adddf3>
 80126ec:	4602      	mov	r2, r0
 80126ee:	460b      	mov	r3, r1
 80126f0:	4620      	mov	r0, r4
 80126f2:	4629      	mov	r1, r5
 80126f4:	f7ed fdc8 	bl	8000288 <__aeabi_dsub>
 80126f8:	4642      	mov	r2, r8
 80126fa:	464b      	mov	r3, r9
 80126fc:	f7ed fdc4 	bl	8000288 <__aeabi_dsub>
 8012700:	460b      	mov	r3, r1
 8012702:	4602      	mov	r2, r0
 8012704:	493a      	ldr	r1, [pc, #232]	; (80127f0 <__ieee754_pow+0xa30>)
 8012706:	2000      	movs	r0, #0
 8012708:	f7ed fdbe 	bl	8000288 <__aeabi_dsub>
 801270c:	e9cd 0100 	strd	r0, r1, [sp]
 8012710:	9b01      	ldr	r3, [sp, #4]
 8012712:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801271a:	da2f      	bge.n	801277c <__ieee754_pow+0x9bc>
 801271c:	4650      	mov	r0, sl
 801271e:	ed9d 0b00 	vldr	d0, [sp]
 8012722:	f000 f9c1 	bl	8012aa8 <scalbn>
 8012726:	ec51 0b10 	vmov	r0, r1, d0
 801272a:	ec53 2b18 	vmov	r2, r3, d8
 801272e:	f7ff bbe0 	b.w	8011ef2 <__ieee754_pow+0x132>
 8012732:	4b30      	ldr	r3, [pc, #192]	; (80127f4 <__ieee754_pow+0xa34>)
 8012734:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012738:	429e      	cmp	r6, r3
 801273a:	f77f af0b 	ble.w	8012554 <__ieee754_pow+0x794>
 801273e:	4b2e      	ldr	r3, [pc, #184]	; (80127f8 <__ieee754_pow+0xa38>)
 8012740:	440b      	add	r3, r1
 8012742:	4303      	orrs	r3, r0
 8012744:	d00b      	beq.n	801275e <__ieee754_pow+0x99e>
 8012746:	a326      	add	r3, pc, #152	; (adr r3, 80127e0 <__ieee754_pow+0xa20>)
 8012748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274c:	ec51 0b18 	vmov	r0, r1, d8
 8012750:	f7ed ff52 	bl	80005f8 <__aeabi_dmul>
 8012754:	a322      	add	r3, pc, #136	; (adr r3, 80127e0 <__ieee754_pow+0xa20>)
 8012756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275a:	f7ff bbca 	b.w	8011ef2 <__ieee754_pow+0x132>
 801275e:	4622      	mov	r2, r4
 8012760:	462b      	mov	r3, r5
 8012762:	f7ed fd91 	bl	8000288 <__aeabi_dsub>
 8012766:	4642      	mov	r2, r8
 8012768:	464b      	mov	r3, r9
 801276a:	f7ee f9cb 	bl	8000b04 <__aeabi_dcmpge>
 801276e:	2800      	cmp	r0, #0
 8012770:	f43f aef0 	beq.w	8012554 <__ieee754_pow+0x794>
 8012774:	e7e7      	b.n	8012746 <__ieee754_pow+0x986>
 8012776:	f04f 0a00 	mov.w	sl, #0
 801277a:	e717      	b.n	80125ac <__ieee754_pow+0x7ec>
 801277c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012780:	4619      	mov	r1, r3
 8012782:	e7d2      	b.n	801272a <__ieee754_pow+0x96a>
 8012784:	491a      	ldr	r1, [pc, #104]	; (80127f0 <__ieee754_pow+0xa30>)
 8012786:	2000      	movs	r0, #0
 8012788:	f7ff bb9e 	b.w	8011ec8 <__ieee754_pow+0x108>
 801278c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012790:	f7ff bb9a 	b.w	8011ec8 <__ieee754_pow+0x108>
 8012794:	9000      	str	r0, [sp, #0]
 8012796:	f7ff bb76 	b.w	8011e86 <__ieee754_pow+0xc6>
 801279a:	2100      	movs	r1, #0
 801279c:	f7ff bb60 	b.w	8011e60 <__ieee754_pow+0xa0>
 80127a0:	00000000 	.word	0x00000000
 80127a4:	3fe62e43 	.word	0x3fe62e43
 80127a8:	fefa39ef 	.word	0xfefa39ef
 80127ac:	3fe62e42 	.word	0x3fe62e42
 80127b0:	0ca86c39 	.word	0x0ca86c39
 80127b4:	be205c61 	.word	0xbe205c61
 80127b8:	72bea4d0 	.word	0x72bea4d0
 80127bc:	3e663769 	.word	0x3e663769
 80127c0:	c5d26bf1 	.word	0xc5d26bf1
 80127c4:	3ebbbd41 	.word	0x3ebbbd41
 80127c8:	af25de2c 	.word	0xaf25de2c
 80127cc:	3f11566a 	.word	0x3f11566a
 80127d0:	16bebd93 	.word	0x16bebd93
 80127d4:	3f66c16c 	.word	0x3f66c16c
 80127d8:	5555553e 	.word	0x5555553e
 80127dc:	3fc55555 	.word	0x3fc55555
 80127e0:	c2f8f359 	.word	0xc2f8f359
 80127e4:	01a56e1f 	.word	0x01a56e1f
 80127e8:	3fe00000 	.word	0x3fe00000
 80127ec:	000fffff 	.word	0x000fffff
 80127f0:	3ff00000 	.word	0x3ff00000
 80127f4:	4090cbff 	.word	0x4090cbff
 80127f8:	3f6f3400 	.word	0x3f6f3400
 80127fc:	652b82fe 	.word	0x652b82fe
 8012800:	3c971547 	.word	0x3c971547

08012804 <__ieee754_sqrt>:
 8012804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012808:	ec55 4b10 	vmov	r4, r5, d0
 801280c:	4e56      	ldr	r6, [pc, #344]	; (8012968 <__ieee754_sqrt+0x164>)
 801280e:	43ae      	bics	r6, r5
 8012810:	ee10 0a10 	vmov	r0, s0
 8012814:	ee10 3a10 	vmov	r3, s0
 8012818:	4629      	mov	r1, r5
 801281a:	462a      	mov	r2, r5
 801281c:	d110      	bne.n	8012840 <__ieee754_sqrt+0x3c>
 801281e:	ee10 2a10 	vmov	r2, s0
 8012822:	462b      	mov	r3, r5
 8012824:	f7ed fee8 	bl	80005f8 <__aeabi_dmul>
 8012828:	4602      	mov	r2, r0
 801282a:	460b      	mov	r3, r1
 801282c:	4620      	mov	r0, r4
 801282e:	4629      	mov	r1, r5
 8012830:	f7ed fd2c 	bl	800028c <__adddf3>
 8012834:	4604      	mov	r4, r0
 8012836:	460d      	mov	r5, r1
 8012838:	ec45 4b10 	vmov	d0, r4, r5
 801283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012840:	2d00      	cmp	r5, #0
 8012842:	dc10      	bgt.n	8012866 <__ieee754_sqrt+0x62>
 8012844:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012848:	4330      	orrs	r0, r6
 801284a:	d0f5      	beq.n	8012838 <__ieee754_sqrt+0x34>
 801284c:	b15d      	cbz	r5, 8012866 <__ieee754_sqrt+0x62>
 801284e:	ee10 2a10 	vmov	r2, s0
 8012852:	462b      	mov	r3, r5
 8012854:	ee10 0a10 	vmov	r0, s0
 8012858:	f7ed fd16 	bl	8000288 <__aeabi_dsub>
 801285c:	4602      	mov	r2, r0
 801285e:	460b      	mov	r3, r1
 8012860:	f7ed fff4 	bl	800084c <__aeabi_ddiv>
 8012864:	e7e6      	b.n	8012834 <__ieee754_sqrt+0x30>
 8012866:	1509      	asrs	r1, r1, #20
 8012868:	d076      	beq.n	8012958 <__ieee754_sqrt+0x154>
 801286a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801286e:	07ce      	lsls	r6, r1, #31
 8012870:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8012874:	bf5e      	ittt	pl
 8012876:	0fda      	lsrpl	r2, r3, #31
 8012878:	005b      	lslpl	r3, r3, #1
 801287a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801287e:	0fda      	lsrs	r2, r3, #31
 8012880:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8012884:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8012888:	2000      	movs	r0, #0
 801288a:	106d      	asrs	r5, r5, #1
 801288c:	005b      	lsls	r3, r3, #1
 801288e:	f04f 0e16 	mov.w	lr, #22
 8012892:	4684      	mov	ip, r0
 8012894:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012898:	eb0c 0401 	add.w	r4, ip, r1
 801289c:	4294      	cmp	r4, r2
 801289e:	bfde      	ittt	le
 80128a0:	1b12      	suble	r2, r2, r4
 80128a2:	eb04 0c01 	addle.w	ip, r4, r1
 80128a6:	1840      	addle	r0, r0, r1
 80128a8:	0052      	lsls	r2, r2, #1
 80128aa:	f1be 0e01 	subs.w	lr, lr, #1
 80128ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80128b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80128b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80128ba:	d1ed      	bne.n	8012898 <__ieee754_sqrt+0x94>
 80128bc:	4671      	mov	r1, lr
 80128be:	2720      	movs	r7, #32
 80128c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80128c4:	4562      	cmp	r2, ip
 80128c6:	eb04 060e 	add.w	r6, r4, lr
 80128ca:	dc02      	bgt.n	80128d2 <__ieee754_sqrt+0xce>
 80128cc:	d113      	bne.n	80128f6 <__ieee754_sqrt+0xf2>
 80128ce:	429e      	cmp	r6, r3
 80128d0:	d811      	bhi.n	80128f6 <__ieee754_sqrt+0xf2>
 80128d2:	2e00      	cmp	r6, #0
 80128d4:	eb06 0e04 	add.w	lr, r6, r4
 80128d8:	da43      	bge.n	8012962 <__ieee754_sqrt+0x15e>
 80128da:	f1be 0f00 	cmp.w	lr, #0
 80128de:	db40      	blt.n	8012962 <__ieee754_sqrt+0x15e>
 80128e0:	f10c 0801 	add.w	r8, ip, #1
 80128e4:	eba2 020c 	sub.w	r2, r2, ip
 80128e8:	429e      	cmp	r6, r3
 80128ea:	bf88      	it	hi
 80128ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80128f0:	1b9b      	subs	r3, r3, r6
 80128f2:	4421      	add	r1, r4
 80128f4:	46c4      	mov	ip, r8
 80128f6:	0052      	lsls	r2, r2, #1
 80128f8:	3f01      	subs	r7, #1
 80128fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80128fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012902:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012906:	d1dd      	bne.n	80128c4 <__ieee754_sqrt+0xc0>
 8012908:	4313      	orrs	r3, r2
 801290a:	d006      	beq.n	801291a <__ieee754_sqrt+0x116>
 801290c:	1c4c      	adds	r4, r1, #1
 801290e:	bf13      	iteet	ne
 8012910:	3101      	addne	r1, #1
 8012912:	3001      	addeq	r0, #1
 8012914:	4639      	moveq	r1, r7
 8012916:	f021 0101 	bicne.w	r1, r1, #1
 801291a:	1043      	asrs	r3, r0, #1
 801291c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012920:	0849      	lsrs	r1, r1, #1
 8012922:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012926:	07c2      	lsls	r2, r0, #31
 8012928:	bf48      	it	mi
 801292a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801292e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8012932:	460c      	mov	r4, r1
 8012934:	463d      	mov	r5, r7
 8012936:	e77f      	b.n	8012838 <__ieee754_sqrt+0x34>
 8012938:	0ada      	lsrs	r2, r3, #11
 801293a:	3815      	subs	r0, #21
 801293c:	055b      	lsls	r3, r3, #21
 801293e:	2a00      	cmp	r2, #0
 8012940:	d0fa      	beq.n	8012938 <__ieee754_sqrt+0x134>
 8012942:	02d7      	lsls	r7, r2, #11
 8012944:	d50a      	bpl.n	801295c <__ieee754_sqrt+0x158>
 8012946:	f1c1 0420 	rsb	r4, r1, #32
 801294a:	fa23 f404 	lsr.w	r4, r3, r4
 801294e:	1e4d      	subs	r5, r1, #1
 8012950:	408b      	lsls	r3, r1
 8012952:	4322      	orrs	r2, r4
 8012954:	1b41      	subs	r1, r0, r5
 8012956:	e788      	b.n	801286a <__ieee754_sqrt+0x66>
 8012958:	4608      	mov	r0, r1
 801295a:	e7f0      	b.n	801293e <__ieee754_sqrt+0x13a>
 801295c:	0052      	lsls	r2, r2, #1
 801295e:	3101      	adds	r1, #1
 8012960:	e7ef      	b.n	8012942 <__ieee754_sqrt+0x13e>
 8012962:	46e0      	mov	r8, ip
 8012964:	e7be      	b.n	80128e4 <__ieee754_sqrt+0xe0>
 8012966:	bf00      	nop
 8012968:	7ff00000 	.word	0x7ff00000

0801296c <fabs>:
 801296c:	ec51 0b10 	vmov	r0, r1, d0
 8012970:	ee10 2a10 	vmov	r2, s0
 8012974:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012978:	ec43 2b10 	vmov	d0, r2, r3
 801297c:	4770      	bx	lr

0801297e <finite>:
 801297e:	b082      	sub	sp, #8
 8012980:	ed8d 0b00 	vstr	d0, [sp]
 8012984:	9801      	ldr	r0, [sp, #4]
 8012986:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801298a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801298e:	0fc0      	lsrs	r0, r0, #31
 8012990:	b002      	add	sp, #8
 8012992:	4770      	bx	lr

08012994 <rint>:
 8012994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012996:	ec51 0b10 	vmov	r0, r1, d0
 801299a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801299e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80129a2:	2e13      	cmp	r6, #19
 80129a4:	ee10 4a10 	vmov	r4, s0
 80129a8:	460b      	mov	r3, r1
 80129aa:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80129ae:	dc58      	bgt.n	8012a62 <rint+0xce>
 80129b0:	2e00      	cmp	r6, #0
 80129b2:	da2b      	bge.n	8012a0c <rint+0x78>
 80129b4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80129b8:	4302      	orrs	r2, r0
 80129ba:	d023      	beq.n	8012a04 <rint+0x70>
 80129bc:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80129c0:	4302      	orrs	r2, r0
 80129c2:	4254      	negs	r4, r2
 80129c4:	4314      	orrs	r4, r2
 80129c6:	0c4b      	lsrs	r3, r1, #17
 80129c8:	0b24      	lsrs	r4, r4, #12
 80129ca:	045b      	lsls	r3, r3, #17
 80129cc:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80129d0:	ea44 0103 	orr.w	r1, r4, r3
 80129d4:	4b32      	ldr	r3, [pc, #200]	; (8012aa0 <rint+0x10c>)
 80129d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80129da:	e9d3 6700 	ldrd	r6, r7, [r3]
 80129de:	4602      	mov	r2, r0
 80129e0:	460b      	mov	r3, r1
 80129e2:	4630      	mov	r0, r6
 80129e4:	4639      	mov	r1, r7
 80129e6:	f7ed fc51 	bl	800028c <__adddf3>
 80129ea:	e9cd 0100 	strd	r0, r1, [sp]
 80129ee:	463b      	mov	r3, r7
 80129f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129f4:	4632      	mov	r2, r6
 80129f6:	f7ed fc47 	bl	8000288 <__aeabi_dsub>
 80129fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80129fe:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012a02:	4639      	mov	r1, r7
 8012a04:	ec41 0b10 	vmov	d0, r0, r1
 8012a08:	b003      	add	sp, #12
 8012a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a0c:	4a25      	ldr	r2, [pc, #148]	; (8012aa4 <rint+0x110>)
 8012a0e:	4132      	asrs	r2, r6
 8012a10:	ea01 0702 	and.w	r7, r1, r2
 8012a14:	4307      	orrs	r7, r0
 8012a16:	d0f5      	beq.n	8012a04 <rint+0x70>
 8012a18:	0851      	lsrs	r1, r2, #1
 8012a1a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8012a1e:	4314      	orrs	r4, r2
 8012a20:	d00c      	beq.n	8012a3c <rint+0xa8>
 8012a22:	ea23 0201 	bic.w	r2, r3, r1
 8012a26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012a2a:	2e13      	cmp	r6, #19
 8012a2c:	fa43 f606 	asr.w	r6, r3, r6
 8012a30:	bf0c      	ite	eq
 8012a32:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012a36:	2400      	movne	r4, #0
 8012a38:	ea42 0306 	orr.w	r3, r2, r6
 8012a3c:	4918      	ldr	r1, [pc, #96]	; (8012aa0 <rint+0x10c>)
 8012a3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012a42:	4622      	mov	r2, r4
 8012a44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012a48:	4620      	mov	r0, r4
 8012a4a:	4629      	mov	r1, r5
 8012a4c:	f7ed fc1e 	bl	800028c <__adddf3>
 8012a50:	e9cd 0100 	strd	r0, r1, [sp]
 8012a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a58:	4622      	mov	r2, r4
 8012a5a:	462b      	mov	r3, r5
 8012a5c:	f7ed fc14 	bl	8000288 <__aeabi_dsub>
 8012a60:	e7d0      	b.n	8012a04 <rint+0x70>
 8012a62:	2e33      	cmp	r6, #51	; 0x33
 8012a64:	dd07      	ble.n	8012a76 <rint+0xe2>
 8012a66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012a6a:	d1cb      	bne.n	8012a04 <rint+0x70>
 8012a6c:	ee10 2a10 	vmov	r2, s0
 8012a70:	f7ed fc0c 	bl	800028c <__adddf3>
 8012a74:	e7c6      	b.n	8012a04 <rint+0x70>
 8012a76:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012a7a:	f04f 36ff 	mov.w	r6, #4294967295
 8012a7e:	40d6      	lsrs	r6, r2
 8012a80:	4230      	tst	r0, r6
 8012a82:	d0bf      	beq.n	8012a04 <rint+0x70>
 8012a84:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8012a88:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8012a8c:	bf1f      	itttt	ne
 8012a8e:	ea24 0101 	bicne.w	r1, r4, r1
 8012a92:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012a96:	fa44 f202 	asrne.w	r2, r4, r2
 8012a9a:	ea41 0402 	orrne.w	r4, r1, r2
 8012a9e:	e7cd      	b.n	8012a3c <rint+0xa8>
 8012aa0:	08013b88 	.word	0x08013b88
 8012aa4:	000fffff 	.word	0x000fffff

08012aa8 <scalbn>:
 8012aa8:	b570      	push	{r4, r5, r6, lr}
 8012aaa:	ec55 4b10 	vmov	r4, r5, d0
 8012aae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012ab2:	4606      	mov	r6, r0
 8012ab4:	462b      	mov	r3, r5
 8012ab6:	b99a      	cbnz	r2, 8012ae0 <scalbn+0x38>
 8012ab8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012abc:	4323      	orrs	r3, r4
 8012abe:	d036      	beq.n	8012b2e <scalbn+0x86>
 8012ac0:	4b39      	ldr	r3, [pc, #228]	; (8012ba8 <scalbn+0x100>)
 8012ac2:	4629      	mov	r1, r5
 8012ac4:	ee10 0a10 	vmov	r0, s0
 8012ac8:	2200      	movs	r2, #0
 8012aca:	f7ed fd95 	bl	80005f8 <__aeabi_dmul>
 8012ace:	4b37      	ldr	r3, [pc, #220]	; (8012bac <scalbn+0x104>)
 8012ad0:	429e      	cmp	r6, r3
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	460d      	mov	r5, r1
 8012ad6:	da10      	bge.n	8012afa <scalbn+0x52>
 8012ad8:	a32b      	add	r3, pc, #172	; (adr r3, 8012b88 <scalbn+0xe0>)
 8012ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ade:	e03a      	b.n	8012b56 <scalbn+0xae>
 8012ae0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012ae4:	428a      	cmp	r2, r1
 8012ae6:	d10c      	bne.n	8012b02 <scalbn+0x5a>
 8012ae8:	ee10 2a10 	vmov	r2, s0
 8012aec:	4620      	mov	r0, r4
 8012aee:	4629      	mov	r1, r5
 8012af0:	f7ed fbcc 	bl	800028c <__adddf3>
 8012af4:	4604      	mov	r4, r0
 8012af6:	460d      	mov	r5, r1
 8012af8:	e019      	b.n	8012b2e <scalbn+0x86>
 8012afa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012afe:	460b      	mov	r3, r1
 8012b00:	3a36      	subs	r2, #54	; 0x36
 8012b02:	4432      	add	r2, r6
 8012b04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012b08:	428a      	cmp	r2, r1
 8012b0a:	dd08      	ble.n	8012b1e <scalbn+0x76>
 8012b0c:	2d00      	cmp	r5, #0
 8012b0e:	a120      	add	r1, pc, #128	; (adr r1, 8012b90 <scalbn+0xe8>)
 8012b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b14:	da1c      	bge.n	8012b50 <scalbn+0xa8>
 8012b16:	a120      	add	r1, pc, #128	; (adr r1, 8012b98 <scalbn+0xf0>)
 8012b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b1c:	e018      	b.n	8012b50 <scalbn+0xa8>
 8012b1e:	2a00      	cmp	r2, #0
 8012b20:	dd08      	ble.n	8012b34 <scalbn+0x8c>
 8012b22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b2e:	ec45 4b10 	vmov	d0, r4, r5
 8012b32:	bd70      	pop	{r4, r5, r6, pc}
 8012b34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012b38:	da19      	bge.n	8012b6e <scalbn+0xc6>
 8012b3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012b3e:	429e      	cmp	r6, r3
 8012b40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012b44:	dd0a      	ble.n	8012b5c <scalbn+0xb4>
 8012b46:	a112      	add	r1, pc, #72	; (adr r1, 8012b90 <scalbn+0xe8>)
 8012b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d1e2      	bne.n	8012b16 <scalbn+0x6e>
 8012b50:	a30f      	add	r3, pc, #60	; (adr r3, 8012b90 <scalbn+0xe8>)
 8012b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b56:	f7ed fd4f 	bl	80005f8 <__aeabi_dmul>
 8012b5a:	e7cb      	b.n	8012af4 <scalbn+0x4c>
 8012b5c:	a10a      	add	r1, pc, #40	; (adr r1, 8012b88 <scalbn+0xe0>)
 8012b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d0b8      	beq.n	8012ad8 <scalbn+0x30>
 8012b66:	a10e      	add	r1, pc, #56	; (adr r1, 8012ba0 <scalbn+0xf8>)
 8012b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b6c:	e7b4      	b.n	8012ad8 <scalbn+0x30>
 8012b6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b72:	3236      	adds	r2, #54	; 0x36
 8012b74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	4b0c      	ldr	r3, [pc, #48]	; (8012bb0 <scalbn+0x108>)
 8012b80:	2200      	movs	r2, #0
 8012b82:	e7e8      	b.n	8012b56 <scalbn+0xae>
 8012b84:	f3af 8000 	nop.w
 8012b88:	c2f8f359 	.word	0xc2f8f359
 8012b8c:	01a56e1f 	.word	0x01a56e1f
 8012b90:	8800759c 	.word	0x8800759c
 8012b94:	7e37e43c 	.word	0x7e37e43c
 8012b98:	8800759c 	.word	0x8800759c
 8012b9c:	fe37e43c 	.word	0xfe37e43c
 8012ba0:	c2f8f359 	.word	0xc2f8f359
 8012ba4:	81a56e1f 	.word	0x81a56e1f
 8012ba8:	43500000 	.word	0x43500000
 8012bac:	ffff3cb0 	.word	0xffff3cb0
 8012bb0:	3c900000 	.word	0x3c900000

08012bb4 <_init>:
 8012bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bb6:	bf00      	nop
 8012bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bba:	bc08      	pop	{r3}
 8012bbc:	469e      	mov	lr, r3
 8012bbe:	4770      	bx	lr

08012bc0 <_fini>:
 8012bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bc2:	bf00      	nop
 8012bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bc6:	bc08      	pop	{r3}
 8012bc8:	469e      	mov	lr, r3
 8012bca:	4770      	bx	lr
