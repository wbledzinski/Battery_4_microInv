
MIBattController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    0001a800  08020000  08020000  00040000  2**2
                  ALLOC, READONLY
  1 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0001344c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000011c0  080135e0  080135e0  000235e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080147a0  080147a0  00030220  2**0
                  CONTENTS
  5 .ARM          00000008  080147a0  080147a0  000247a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080147a8  080147a8  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080147a8  080147a8  000247a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080147ac  080147ac  000247ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000220  20000000  080147b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000061c8  20000220  080149d0  00030220  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200063e8  080149d0  000363e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a24b  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bd9  00000000  00000000  0005a49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e40  00000000  00000000  0005f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c88  00000000  00000000  00060eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277ed  00000000  00000000  00062b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021a45  00000000  00000000  0008a32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeb55  00000000  00000000  000abd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019a8c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097c0  00000000  00000000  0019a91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080135c4 	.word	0x080135c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	080135c4 	.word	0x080135c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DelayedOn_Wait>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DelayedOn_Wait(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	//is batt OK to charge? (and discharge as well)
	if ((Adc1Measurements.Batt_voltage) < (BATT_MAX_VOLTAGE+VoltHysteresisChg)
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <DelayedOn_Wait+0x34>)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <DelayedOn_Wait+0x38>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f203 1393 	addw	r3, r3, #403	; 0x193
 8001030:	429a      	cmp	r2, r3
 8001032:	d208      	bcs.n	8001046 <DelayedOn_Wait+0x26>
			&& Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <DelayedOn_Wait+0x34>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2bf0      	cmp	r3, #240	; 0xf0
 800103a:	d904      	bls.n	8001046 <DelayedOn_Wait+0x26>
	{//yes, ok to charge
		InverterMOS_OFF();	//INV blocked,
 800103c:	f001 fa92 	bl	8002564 <InverterMOS_OFF>
		BatteryMOS_ON();	//battery to power controller, if some PV still is available (at dusk), it will charge BATT (currents below ~200mA)
 8001040:	f001 fa08 	bl	8002454 <BatteryMOS_ON>
 8001044:	e004      	b.n	8001050 <DelayedOn_Wait+0x30>
	}
	else
	{//not ok to charge battery
#if HW_VER > 01		//charging/discharging blocked, PV might go only to INV
		BatteryMOS_OFF();
 8001046:	f001 fa45 	bl	80024d4 <BatteryMOS_OFF>
		InverterMOS_ON();
 800104a:	f001 fa73 	bl	8002534 <InverterMOS_ON>
#else
		InverterMOS_OFF();	//INV blocked, battery to power controller, if some PV still is it will charge BATT (no other choice in HW01), needed to power controller
		BatteryMOS_ON();
#endif
	}
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200059a0 	.word	0x200059a0
 8001058:	20000258 	.word	0x20000258

0800105c <DelayedOn_On>:

void DelayedOn_On(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	InverterMOS_ON();
 8001060:	f001 fa68 	bl	8002534 <InverterMOS_ON>
	BatteryMOS_ON();
 8001064:	f001 f9f6 	bl	8002454 <BatteryMOS_ON>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <DelayedInvMosOn>:
/*function switches on inverter mosfet, according to actual config in an instant or with delay*/
void DelayedInvMosOn(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	switch (ConfigReg)
 8001070:	4b5b      	ldr	r3, [pc, #364]	; (80011e0 <DelayedInvMosOn+0x174>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b0d      	cmp	r3, #13
 8001076:	f200 80ae 	bhi.w	80011d6 <DelayedInvMosOn+0x16a>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <DelayedInvMosOn+0x14>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	080010b9 	.word	0x080010b9
 8001084:	080010bf 	.word	0x080010bf
 8001088:	080010d5 	.word	0x080010d5
 800108c:	080010eb 	.word	0x080010eb
 8001090:	08001103 	.word	0x08001103
 8001094:	08001119 	.word	0x08001119
 8001098:	08001131 	.word	0x08001131
 800109c:	08001147 	.word	0x08001147
 80010a0:	0800114d 	.word	0x0800114d
 80010a4:	08001163 	.word	0x08001163
 80010a8:	08001179 	.word	0x08001179
 80010ac:	08001191 	.word	0x08001191
 80010b0:	080011a7 	.word	0x080011a7
 80010b4:	080011bf 	.word	0x080011bf
	{
	case CONFIG_MAINS_0DELAY:
		DelayedOn_On();
 80010b8:	f7ff ffd0 	bl	800105c <DelayedOn_On>
		break;
 80010bc:	e08e      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_1DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME1)
 80010be:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <DelayedInvMosOn+0x178>)
 80010c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80010c6:	d902      	bls.n	80010ce <DelayedInvMosOn+0x62>
		{
			DelayedOn_On();
 80010c8:	f7ff ffc8 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80010cc:	e086      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80010ce:	f7ff ffa7 	bl	8001020 <DelayedOn_Wait>
		break;
 80010d2:	e083      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_2DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME2)
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <DelayedInvMosOn+0x178>)
 80010d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80010dc:	d902      	bls.n	80010e4 <DelayedInvMosOn+0x78>
		{
			DelayedOn_On();
 80010de:	f7ff ffbd 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80010e2:	e07b      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80010e4:	f7ff ff9c 	bl	8001020 <DelayedOn_Wait>
		break;
 80010e8:	e078      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_3DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME3)
 80010ea:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <DelayedInvMosOn+0x178>)
 80010ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ee:	f642 2230 	movw	r2, #10800	; 0x2a30
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d902      	bls.n	80010fc <DelayedInvMosOn+0x90>
		{
			DelayedOn_On();
 80010f6:	f7ff ffb1 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80010fa:	e06f      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80010fc:	f7ff ff90 	bl	8001020 <DelayedOn_Wait>
		break;
 8001100:	e06c      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_4DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME4)
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001106:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 800110a:	d902      	bls.n	8001112 <DelayedInvMosOn+0xa6>
		{
			DelayedOn_On();
 800110c:	f7ff ffa6 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001110:	e064      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 8001112:	f7ff ff85 	bl	8001020 <DelayedOn_Wait>
		break;
 8001116:	e061      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_5DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME5)
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <DelayedInvMosOn+0x178>)
 800111a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111c:	f244 6250 	movw	r2, #18000	; 0x4650
 8001120:	4293      	cmp	r3, r2
 8001122:	d902      	bls.n	800112a <DelayedInvMosOn+0xbe>
		{
			DelayedOn_On();
 8001124:	f7ff ff9a 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001128:	e058      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 800112a:	f7ff ff79 	bl	8001020 <DelayedOn_Wait>
		break;
 800112e:	e055      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_6DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME6)
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001134:	f245 4260 	movw	r2, #21600	; 0x5460
 8001138:	4293      	cmp	r3, r2
 800113a:	d902      	bls.n	8001142 <DelayedInvMosOn+0xd6>
		{
			DelayedOn_On();
 800113c:	f7ff ff8e 	bl	800105c <DelayedOn_On>
 8001140:	e001      	b.n	8001146 <DelayedInvMosOn+0xda>
		}
		else
		{
			DelayedOn_Wait();
 8001142:	f7ff ff6d 	bl	8001020 <DelayedOn_Wait>
		}
	case CONFIG_BATT_0DELAY:
		DelayedOn_On();
 8001146:	f7ff ff89 	bl	800105c <DelayedOn_On>
		break;
 800114a:	e047      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_1DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME1)
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <DelayedInvMosOn+0x178>)
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001154:	d902      	bls.n	800115c <DelayedInvMosOn+0xf0>
		{
			DelayedOn_On();
 8001156:	f7ff ff81 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 800115a:	e03f      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 800115c:	f7ff ff60 	bl	8001020 <DelayedOn_Wait>
		break;
 8001160:	e03c      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_2DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME2)
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001166:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800116a:	d902      	bls.n	8001172 <DelayedInvMosOn+0x106>
		{
			DelayedOn_On();
 800116c:	f7ff ff76 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001170:	e034      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 8001172:	f7ff ff55 	bl	8001020 <DelayedOn_Wait>
		break;
 8001176:	e031      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_3DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME3)
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <DelayedInvMosOn+0x178>)
 800117a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117c:	f642 2230 	movw	r2, #10800	; 0x2a30
 8001180:	4293      	cmp	r3, r2
 8001182:	d902      	bls.n	800118a <DelayedInvMosOn+0x11e>
		{
			DelayedOn_On();
 8001184:	f7ff ff6a 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001188:	e028      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 800118a:	f7ff ff49 	bl	8001020 <DelayedOn_Wait>
		break;
 800118e:	e025      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_4DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME4)
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001194:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 8001198:	d902      	bls.n	80011a0 <DelayedInvMosOn+0x134>
		{
			DelayedOn_On();
 800119a:	f7ff ff5f 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 800119e:	e01d      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80011a0:	f7ff ff3e 	bl	8001020 <DelayedOn_Wait>
		break;
 80011a4:	e01a      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_5DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME5)
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <DelayedInvMosOn+0x178>)
 80011a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011aa:	f244 6250 	movw	r2, #18000	; 0x4650
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d902      	bls.n	80011b8 <DelayedInvMosOn+0x14c>
		{
			DelayedOn_On();
 80011b2:	f7ff ff53 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80011b6:	e011      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80011b8:	f7ff ff32 	bl	8001020 <DelayedOn_Wait>
		break;
 80011bc:	e00e      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_6DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME6)
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <DelayedInvMosOn+0x178>)
 80011c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c2:	f245 4260 	movw	r2, #21600	; 0x5460
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d902      	bls.n	80011d0 <DelayedInvMosOn+0x164>
		{
			DelayedOn_On();
 80011ca:	f7ff ff47 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80011ce:	e005      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80011d0:	f7ff ff26 	bl	8001020 <DelayedOn_Wait>
		break;
 80011d4:	e002      	b.n	80011dc <DelayedInvMosOn+0x170>
	default:
		InverterMOS_ON();
 80011d6:	f001 f9ad 	bl	8002534 <InverterMOS_ON>
		break;
 80011da:	bf00      	nop
	}
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000599c 	.word	0x2000599c
 80011e4:	20005c98 	.word	0x20005c98

080011e8 <ResetInverterDay>:
 * reset is needed due to issue with starting Inverter from low voltage at dawn (e.g. when battery is charging)
 * to reset MPPT algorithm at least few second long voltage spike (OCV) is needed
 * to do that procedure will disconnect INV, Battery, wait few seconds and start Inverter again
 */
void ResetInverterDay(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	switch (StateResetInv)
 80011ec:	4b77      	ldr	r3, [pc, #476]	; (80013cc <ResetInverterDay+0x1e4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b1b      	cmp	r3, #27
 80011f2:	f200 80d8 	bhi.w	80013a6 <ResetInverterDay+0x1be>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <ResetInverterDay+0x14>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800126d 	.word	0x0800126d
 8001200:	080012f7 	.word	0x080012f7
 8001204:	0800132f 	.word	0x0800132f
 8001208:	0800132f 	.word	0x0800132f
 800120c:	0800132f 	.word	0x0800132f
 8001210:	0800132f 	.word	0x0800132f
 8001214:	0800132f 	.word	0x0800132f
 8001218:	0800132f 	.word	0x0800132f
 800121c:	0800132f 	.word	0x0800132f
 8001220:	0800132f 	.word	0x0800132f
 8001224:	0800132f 	.word	0x0800132f
 8001228:	0800132f 	.word	0x0800132f
 800122c:	0800132f 	.word	0x0800132f
 8001230:	0800132f 	.word	0x0800132f
 8001234:	0800132f 	.word	0x0800132f
 8001238:	0800132f 	.word	0x0800132f
 800123c:	0800132f 	.word	0x0800132f
 8001240:	0800134f 	.word	0x0800134f
 8001244:	0800134f 	.word	0x0800134f
 8001248:	0800134f 	.word	0x0800134f
 800124c:	0800134f 	.word	0x0800134f
 8001250:	0800134f 	.word	0x0800134f
 8001254:	0800134f 	.word	0x0800134f
 8001258:	0800134f 	.word	0x0800134f
 800125c:	0800134f 	.word	0x0800134f
 8001260:	0800134f 	.word	0x0800134f
 8001264:	0800134f 	.word	0x0800134f
 8001268:	08001377 	.word	0x08001377
	{
	case 0:
#if HW_VER > 01
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN_DAY && FlagExt_I == 0)
 800126c:	4b58      	ldr	r3, [pc, #352]	; (80013d0 <ResetInverterDay+0x1e8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2bc8      	cmp	r3, #200	; 0xc8
 8001272:	d908      	bls.n	8001286 <ResetInverterDay+0x9e>
 8001274:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <ResetInverterDay+0x1ec>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d104      	bne.n	8001286 <ResetInverterDay+0x9e>
#else
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN_DAY )
#endif
		{
			TimeToResetInv = TIME2RESET_INV;	//reset time to 30 minutes if inv is working
 800127c:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <ResetInverterDay+0x1f0>)
 800127e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	e013      	b.n	80012ae <ResetInverterDay+0xc6>
		}
#if HW_VER > 01
		else if (FlagExt_I == 1 && !BlankingTimeToResetInv)		//blanking time to prevent to frequent resets from EXTI
 8001286:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <ResetInverterDay+0x1ec>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d10f      	bne.n	80012ae <ResetInverterDay+0xc6>
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <ResetInverterDay+0x1f4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10b      	bne.n	80012ae <ResetInverterDay+0xc6>
		{
			TimeToResetInv = 1;
 8001296:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <ResetInverterDay+0x1f0>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
			StatCurrentWh.InvExtResetCnt++;
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <ResetInverterDay+0x1f8>)
 800129e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a4f      	ldr	r2, [pc, #316]	; (80013e0 <ResetInverterDay+0x1f8>)
 80012a4:	6693      	str	r3, [r2, #104]	; 0x68
			BlankingTimeToResetInv = TIME2RESET_INV/3;		//blanking time to prevent to frequent resets from EXTI
 80012a6:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <ResetInverterDay+0x1f4>)
 80012a8:	f240 3241 	movw	r2, #833	; 0x341
 80012ac:	601a      	str	r2, [r3, #0]
		}
#endif
		if (TimeToResetInv)	TimeToResetInv--;
 80012ae:	4b4a      	ldr	r3, [pc, #296]	; (80013d8 <ResetInverterDay+0x1f0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <ResetInverterDay+0xd8>
 80012b6:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <ResetInverterDay+0x1f0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <ResetInverterDay+0x1f0>)
 80012be:	6013      	str	r3, [r2, #0]
		if (BlankingTimeToResetInv) BlankingTimeToResetInv--;
 80012c0:	4b46      	ldr	r3, [pc, #280]	; (80013dc <ResetInverterDay+0x1f4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d004      	beq.n	80012d2 <ResetInverterDay+0xea>
 80012c8:	4b44      	ldr	r3, [pc, #272]	; (80013dc <ResetInverterDay+0x1f4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4a43      	ldr	r2, [pc, #268]	; (80013dc <ResetInverterDay+0x1f4>)
 80012d0:	6013      	str	r3, [r2, #0]
		if (!TimeToResetInv) StateResetInv=1;	//start Inv Reset procedure
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <ResetInverterDay+0x1f0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <ResetInverterDay+0xf8>
 80012da:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <ResetInverterDay+0x1e4>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]
		sprintf(TxBuffer+strlen(TxBuffer), "RID0,");
 80012e0:	4840      	ldr	r0, [pc, #256]	; (80013e4 <ResetInverterDay+0x1fc>)
 80012e2:	f7fe ff75 	bl	80001d0 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a3e      	ldr	r2, [pc, #248]	; (80013e4 <ResetInverterDay+0x1fc>)
 80012ea:	4413      	add	r3, r2
 80012ec:	493e      	ldr	r1, [pc, #248]	; (80013e8 <ResetInverterDay+0x200>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00d fd8a 	bl	800ee08 <siprintf>
		break;
 80012f4:	e068      	b.n	80013c8 <ResetInverterDay+0x1e0>
	case 1:	//30 minutes without inv currrent. set flag that procedure is ON,
		FlagResetInverter = 1;	//procedure is on
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <ResetInverterDay+0x204>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
		BatteryMOS_OFF();		//switch off all loads causing OCV; INV OFF + BAT OFF -> causing OCV/increasing INV input voltage
 80012fc:	f001 f8ea 	bl	80024d4 <BatteryMOS_OFF>
		InverterMOS_OFF();
 8001300:	f001 f930 	bl	8002564 <InverterMOS_OFF>
		StateResetInv = 2;
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <ResetInverterDay+0x1e4>)
 8001306:	2202      	movs	r2, #2
 8001308:	601a      	str	r2, [r3, #0]
		StatCurrentWh.InvResetCntr++;
 800130a:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <ResetInverterDay+0x1f8>)
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	3301      	adds	r3, #1
 8001310:	4a33      	ldr	r2, [pc, #204]	; (80013e0 <ResetInverterDay+0x1f8>)
 8001312:	62d3      	str	r3, [r2, #44]	; 0x2c
		ExtOut_InvResetStart();
 8001314:	f001 f82e 	bl	8002374 <ExtOut_InvResetStart>
		sprintf(TxBuffer+strlen(TxBuffer), "RID1,");
 8001318:	4832      	ldr	r0, [pc, #200]	; (80013e4 <ResetInverterDay+0x1fc>)
 800131a:	f7fe ff59 	bl	80001d0 <strlen>
 800131e:	4603      	mov	r3, r0
 8001320:	4a30      	ldr	r2, [pc, #192]	; (80013e4 <ResetInverterDay+0x1fc>)
 8001322:	4413      	add	r3, r2
 8001324:	4932      	ldr	r1, [pc, #200]	; (80013f0 <ResetInverterDay+0x208>)
 8001326:	4618      	mov	r0, r3
 8001328:	f00d fd6e 	bl	800ee08 <siprintf>
		break;
 800132c:	e04c      	b.n	80013c8 <ResetInverterDay+0x1e0>
	case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10:
	case 11: case 12: case 13: case 14: case 15: case 16:
		//wait 15 seconds
		StateResetInv++;
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <ResetInverterDay+0x1e4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	4a25      	ldr	r2, [pc, #148]	; (80013cc <ResetInverterDay+0x1e4>)
 8001336:	6013      	str	r3, [r2, #0]
		sprintf(TxBuffer+strlen(TxBuffer), "RID2,");
 8001338:	482a      	ldr	r0, [pc, #168]	; (80013e4 <ResetInverterDay+0x1fc>)
 800133a:	f7fe ff49 	bl	80001d0 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	4a28      	ldr	r2, [pc, #160]	; (80013e4 <ResetInverterDay+0x1fc>)
 8001342:	4413      	add	r3, r2
 8001344:	492b      	ldr	r1, [pc, #172]	; (80013f4 <ResetInverterDay+0x20c>)
 8001346:	4618      	mov	r0, r3
 8001348:	f00d fd5e 	bl	800ee08 <siprintf>
		break;
 800134c:	e03c      	b.n	80013c8 <ResetInverterDay+0x1e0>
	case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26:
		//ON inverter MOS and wait 10 seconds
		InverterMOS_ON();
 800134e:	f001 f8f1 	bl	8002534 <InverterMOS_ON>
		StateResetInv++;
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <ResetInverterDay+0x1e4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <ResetInverterDay+0x1e4>)
 800135a:	6013      	str	r3, [r2, #0]
		ExtOut_InvResetStop();
 800135c:	f001 f842 	bl	80023e4 <ExtOut_InvResetStop>
		sprintf(TxBuffer+strlen(TxBuffer), "RID3,");
 8001360:	4820      	ldr	r0, [pc, #128]	; (80013e4 <ResetInverterDay+0x1fc>)
 8001362:	f7fe ff35 	bl	80001d0 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <ResetInverterDay+0x1fc>)
 800136a:	4413      	add	r3, r2
 800136c:	4922      	ldr	r1, [pc, #136]	; (80013f8 <ResetInverterDay+0x210>)
 800136e:	4618      	mov	r0, r3
 8001370:	f00d fd4a 	bl	800ee08 <siprintf>
		break;
 8001374:	e028      	b.n	80013c8 <ResetInverterDay+0x1e0>
	case 27:	//now return to regular operation of controller
		StateResetInv=0;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <ResetInverterDay+0x1e4>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <ResetInverterDay+0x204>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
		TimeToResetInv = TIME2RESET_INV;	//reset timer for 30 minutes
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <ResetInverterDay+0x1f0>)
 8001384:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001388:	601a      	str	r2, [r3, #0]
		StatCountFlagsWs.LowInvCurrent = 0;	//reset "no current' flag
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <ResetInverterDay+0x214>)
 800138c:	2200      	movs	r2, #0
 800138e:	649a      	str	r2, [r3, #72]	; 0x48
		sprintf(TxBuffer+strlen(TxBuffer), "RID4,");
 8001390:	4814      	ldr	r0, [pc, #80]	; (80013e4 <ResetInverterDay+0x1fc>)
 8001392:	f7fe ff1d 	bl	80001d0 <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <ResetInverterDay+0x1fc>)
 800139a:	4413      	add	r3, r2
 800139c:	4918      	ldr	r1, [pc, #96]	; (8001400 <ResetInverterDay+0x218>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f00d fd32 	bl	800ee08 <siprintf>
		break;
 80013a4:	e010      	b.n	80013c8 <ResetInverterDay+0x1e0>
	default:
		StateResetInv=0;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <ResetInverterDay+0x1e4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <ResetInverterDay+0x204>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
		sprintf(TxBuffer+strlen(TxBuffer), "RID5,");
 80013b2:	480c      	ldr	r0, [pc, #48]	; (80013e4 <ResetInverterDay+0x1fc>)
 80013b4:	f7fe ff0c 	bl	80001d0 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <ResetInverterDay+0x1fc>)
 80013bc:	4413      	add	r3, r2
 80013be:	4911      	ldr	r1, [pc, #68]	; (8001404 <ResetInverterDay+0x21c>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f00d fd21 	bl	800ee08 <siprintf>
		break;
 80013c6:	bf00      	nop
	}
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20006344 	.word	0x20006344
 80013d0:	200059a0 	.word	0x200059a0
 80013d4:	20000254 	.word	0x20000254
 80013d8:	20000010 	.word	0x20000010
 80013dc:	20000014 	.word	0x20000014
 80013e0:	20005a34 	.word	0x20005a34
 80013e4:	20005dc4 	.word	0x20005dc4
 80013e8:	080135f8 	.word	0x080135f8
 80013ec:	200061c8 	.word	0x200061c8
 80013f0:	08013600 	.word	0x08013600
 80013f4:	08013608 	.word	0x08013608
 80013f8:	08013610 	.word	0x08013610
 80013fc:	200059c4 	.word	0x200059c4
 8001400:	08013618 	.word	0x08013618
 8001404:	08013620 	.word	0x08013620

08001408 <ResetInverterNight>:
 * reset is needed due to excessive current consumption (when batt voltage < MPP but battery can supply higher current than PV)
 * its due to mppt alg in inverter. Not needed when battery has operating voltage higher than MPP of inverter or PV panel
 * procedure will disconnect INV, wait few seconds and start Inverter again
 */
void ResetInverterNight(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	switch (StateResetInv)
 800140c:	4ba0      	ldr	r3, [pc, #640]	; (8001690 <ResetInverterNight+0x288>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b25      	cmp	r3, #37	; 0x25
 8001412:	f200 812a 	bhi.w	800166a <ResetInverterNight+0x262>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <ResetInverterNight+0x14>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	080014b5 	.word	0x080014b5
 8001420:	08001595 	.word	0x08001595
 8001424:	080015d7 	.word	0x080015d7
 8001428:	080015d7 	.word	0x080015d7
 800142c:	080015d7 	.word	0x080015d7
 8001430:	080015d7 	.word	0x080015d7
 8001434:	080015d7 	.word	0x080015d7
 8001438:	080015d7 	.word	0x080015d7
 800143c:	080015d7 	.word	0x080015d7
 8001440:	080015d7 	.word	0x080015d7
 8001444:	080015d7 	.word	0x080015d7
 8001448:	080015d7 	.word	0x080015d7
 800144c:	080015d7 	.word	0x080015d7
 8001450:	080015d7 	.word	0x080015d7
 8001454:	080015d7 	.word	0x080015d7
 8001458:	080015d7 	.word	0x080015d7
 800145c:	080015d7 	.word	0x080015d7
 8001460:	080015d7 	.word	0x080015d7
 8001464:	080015d7 	.word	0x080015d7
 8001468:	080015d7 	.word	0x080015d7
 800146c:	080015d7 	.word	0x080015d7
 8001470:	080015d7 	.word	0x080015d7
 8001474:	080015d7 	.word	0x080015d7
 8001478:	080015d7 	.word	0x080015d7
 800147c:	080015d7 	.word	0x080015d7
 8001480:	080015d7 	.word	0x080015d7
 8001484:	080015d7 	.word	0x080015d7
 8001488:	080015f7 	.word	0x080015f7
 800148c:	080015f7 	.word	0x080015f7
 8001490:	080015f7 	.word	0x080015f7
 8001494:	080015f7 	.word	0x080015f7
 8001498:	080015f7 	.word	0x080015f7
 800149c:	080015f7 	.word	0x080015f7
 80014a0:	080015f7 	.word	0x080015f7
 80014a4:	080015f7 	.word	0x080015f7
 80014a8:	080015f7 	.word	0x080015f7
 80014ac:	080015f7 	.word	0x080015f7
 80014b0:	08001635 	.word	0x08001635
	{
	case 0:
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN_NIGHT &&
 80014b4:	4b77      	ldr	r3, [pc, #476]	; (8001694 <ResetInverterNight+0x28c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2bfa      	cmp	r3, #250	; 0xfa
 80014ba:	d90c      	bls.n	80014d6 <ResetInverterNight+0xce>
		Adc1Measurements.Inv_current < INV_CURRENT_MAX)
 80014bc:	4b75      	ldr	r3, [pc, #468]	; (8001694 <ResetInverterNight+0x28c>)
 80014be:	681b      	ldr	r3, [r3, #0]
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN_NIGHT &&
 80014c0:	f243 42bb 	movw	r2, #13499	; 0x34bb
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d806      	bhi.n	80014d6 <ResetInverterNight+0xce>
		{
			TimeToResetInv = TIME2OVLD_INV;	//set overload timer for x seconds
 80014c8:	4b73      	ldr	r3, [pc, #460]	; (8001698 <ResetInverterNight+0x290>)
 80014ca:	2223      	movs	r2, #35	; 0x23
 80014cc:	601a      	str	r2, [r3, #0]
			StatCountFlagsWs.LowInvCurrent = 0;	//clear flag
 80014ce:	4b73      	ldr	r3, [pc, #460]	; (800169c <ResetInverterNight+0x294>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	649a      	str	r2, [r3, #72]	; 0x48
 80014d4:	e01e      	b.n	8001514 <ResetInverterNight+0x10c>
		}
		else if (Adc1Measurements.Inv_current > INV_CURR_SC)	//considered as short-circuit
 80014d6:	4b6f      	ldr	r3, [pc, #444]	; (8001694 <ResetInverterNight+0x28c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f244 0274 	movw	r2, #16500	; 0x4074
 80014de:	4293      	cmp	r3, r2
 80014e0:	d909      	bls.n	80014f6 <ResetInverterNight+0xee>
		{
			TimeToResetInv = 0;
 80014e2:	4b6d      	ldr	r3, [pc, #436]	; (8001698 <ResetInverterNight+0x290>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
			StatCountFlagsWs.InvOutShorted = 1;
 80014e8:	4b6c      	ldr	r3, [pc, #432]	; (800169c <ResetInverterNight+0x294>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
			StatCountFlagsWs.LowInvCurrent = 0;	//clear flag
 80014ee:	4b6b      	ldr	r3, [pc, #428]	; (800169c <ResetInverterNight+0x294>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	649a      	str	r2, [r3, #72]	; 0x48
 80014f4:	e00e      	b.n	8001514 <ResetInverterNight+0x10c>
		}
		else if (Adc1Measurements.Inv_current <= INV_CURRENT_MIN_NIGHT)
 80014f6:	4b67      	ldr	r3, [pc, #412]	; (8001694 <ResetInverterNight+0x28c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2bfa      	cmp	r3, #250	; 0xfa
 80014fc:	d80a      	bhi.n	8001514 <ResetInverterNight+0x10c>
		{
			if (!StatCountFlagsWs.LowInvCurrent)		//set timeout and flag only once
 80014fe:	4b67      	ldr	r3, [pc, #412]	; (800169c <ResetInverterNight+0x294>)
 8001500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001502:	2b00      	cmp	r3, #0
 8001504:	d106      	bne.n	8001514 <ResetInverterNight+0x10c>
			{
				StatCountFlagsWs.LowInvCurrent = 1;		//set flag to prevent 'TimeToResetInv' write too early
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <ResetInverterNight+0x294>)
 8001508:	2201      	movs	r2, #1
 800150a:	649a      	str	r2, [r3, #72]	; 0x48
				TimeToResetInv = TIME2RESET_INV/2;
 800150c:	4b62      	ldr	r3, [pc, #392]	; (8001698 <ResetInverterNight+0x290>)
 800150e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001512:	601a      	str	r2, [r3, #0]
			}
		}
#if HW_VER > 01
		if (FlagExt_I == 1 && FlagInverterMOS && !BlankingTimeToResetInv)	//switch cycle power to inverter only if it should be working and EXTI present. Do not cycle power during delayed ON
 8001514:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <ResetInverterNight+0x298>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d113      	bne.n	8001544 <ResetInverterNight+0x13c>
 800151c:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <ResetInverterNight+0x29c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00f      	beq.n	8001544 <ResetInverterNight+0x13c>
 8001524:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <ResetInverterNight+0x2a0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10b      	bne.n	8001544 <ResetInverterNight+0x13c>
		{
			TimeToResetInv = 1;
 800152c:	4b5a      	ldr	r3, [pc, #360]	; (8001698 <ResetInverterNight+0x290>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
			StatCurrentWh.InvExtResetCnt++;
 8001532:	4b5e      	ldr	r3, [pc, #376]	; (80016ac <ResetInverterNight+0x2a4>)
 8001534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001536:	3301      	adds	r3, #1
 8001538:	4a5c      	ldr	r2, [pc, #368]	; (80016ac <ResetInverterNight+0x2a4>)
 800153a:	6693      	str	r3, [r2, #104]	; 0x68
			BlankingTimeToResetInv = TIME2RESET_INV/3;		//blanking time to prevent to frequent resets from EXTI
 800153c:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <ResetInverterNight+0x2a0>)
 800153e:	f240 3241 	movw	r2, #833	; 0x341
 8001542:	601a      	str	r2, [r3, #0]
		}
#endif
		if (TimeToResetInv && FlagInverterMOS)	TimeToResetInv--;	//Do not cycle power during delayed ON
 8001544:	4b54      	ldr	r3, [pc, #336]	; (8001698 <ResetInverterNight+0x290>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <ResetInverterNight+0x156>
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <ResetInverterNight+0x29c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <ResetInverterNight+0x156>
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <ResetInverterNight+0x290>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a4f      	ldr	r2, [pc, #316]	; (8001698 <ResetInverterNight+0x290>)
 800155c:	6013      	str	r3, [r2, #0]
		if (BlankingTimeToResetInv) BlankingTimeToResetInv--;
 800155e:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <ResetInverterNight+0x2a0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <ResetInverterNight+0x168>
 8001566:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <ResetInverterNight+0x2a0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	3b01      	subs	r3, #1
 800156c:	4a4e      	ldr	r2, [pc, #312]	; (80016a8 <ResetInverterNight+0x2a0>)
 800156e:	6013      	str	r3, [r2, #0]
		if (!TimeToResetInv) StateResetInv=1;	//start Inv Reset procedure
 8001570:	4b49      	ldr	r3, [pc, #292]	; (8001698 <ResetInverterNight+0x290>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <ResetInverterNight+0x176>
 8001578:	4b45      	ldr	r3, [pc, #276]	; (8001690 <ResetInverterNight+0x288>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]
		sprintf(TxBuffer+strlen(TxBuffer), "RIN0,");
 800157e:	484c      	ldr	r0, [pc, #304]	; (80016b0 <ResetInverterNight+0x2a8>)
 8001580:	f7fe fe26 	bl	80001d0 <strlen>
 8001584:	4603      	mov	r3, r0
 8001586:	4a4a      	ldr	r2, [pc, #296]	; (80016b0 <ResetInverterNight+0x2a8>)
 8001588:	4413      	add	r3, r2
 800158a:	494a      	ldr	r1, [pc, #296]	; (80016b4 <ResetInverterNight+0x2ac>)
 800158c:	4618      	mov	r0, r3
 800158e:	f00d fc3b 	bl	800ee08 <siprintf>
		break;
 8001592:	e07b      	b.n	800168c <ResetInverterNight+0x284>
	case 1:	//10 sec ovld (or no current) inv currrent. set flag that procedure is ON,
		FlagResetInverter = 1;	//procedure is on
 8001594:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <ResetInverterNight+0x2b0>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

#if HW_VER > 01
//		BatteryMOS_OFF();			//disconnect load (HW02>)and..; actually should I disconnect BAT MOS? it prevents SC on PV input only... and reduces some PV energy gain during normal operation.
#endif
		InverterMOS_OFF();			//disconnect load
 800159a:	f000 ffe3 	bl	8002564 <InverterMOS_OFF>
		StateResetInv = 17;			//for regular overload wait 10 seconds
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <ResetInverterNight+0x288>)
 80015a0:	2211      	movs	r2, #17
 80015a2:	601a      	str	r2, [r3, #0]
		if (StatCountFlagsWs.InvOutShorted) StateResetInv = 2;	//for short circuit wait 25 seconds
 80015a4:	4b3d      	ldr	r3, [pc, #244]	; (800169c <ResetInverterNight+0x294>)
 80015a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <ResetInverterNight+0x1aa>
 80015ac:	4b38      	ldr	r3, [pc, #224]	; (8001690 <ResetInverterNight+0x288>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
		//StatCurrentWh.InvResetCntr++;
		StatCurrentWh.InvOvcCounter++;
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <ResetInverterNight+0x2a4>)
 80015b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a3c      	ldr	r2, [pc, #240]	; (80016ac <ResetInverterNight+0x2a4>)
 80015ba:	6653      	str	r3, [r2, #100]	; 0x64
		ExtOut_InvResetStart();
 80015bc:	f000 feda 	bl	8002374 <ExtOut_InvResetStart>
		sprintf(TxBuffer+strlen(TxBuffer), "RIN1,");
 80015c0:	483b      	ldr	r0, [pc, #236]	; (80016b0 <ResetInverterNight+0x2a8>)
 80015c2:	f7fe fe05 	bl	80001d0 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a39      	ldr	r2, [pc, #228]	; (80016b0 <ResetInverterNight+0x2a8>)
 80015ca:	4413      	add	r3, r2
 80015cc:	493b      	ldr	r1, [pc, #236]	; (80016bc <ResetInverterNight+0x2b4>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00d fc1a 	bl	800ee08 <siprintf>
		break;
 80015d4:	e05a      	b.n	800168c <ResetInverterNight+0x284>
	case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10:
	case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18:
	case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26:
		//wait 25 seconds
		StateResetInv++;
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <ResetInverterNight+0x288>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <ResetInverterNight+0x288>)
 80015de:	6013      	str	r3, [r2, #0]
		sprintf(TxBuffer+strlen(TxBuffer), "RIN2,");
 80015e0:	4833      	ldr	r0, [pc, #204]	; (80016b0 <ResetInverterNight+0x2a8>)
 80015e2:	f7fe fdf5 	bl	80001d0 <strlen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a31      	ldr	r2, [pc, #196]	; (80016b0 <ResetInverterNight+0x2a8>)
 80015ea:	4413      	add	r3, r2
 80015ec:	4934      	ldr	r1, [pc, #208]	; (80016c0 <ResetInverterNight+0x2b8>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00d fc0a 	bl	800ee08 <siprintf>
		break;
 80015f4:	e04a      	b.n	800168c <ResetInverterNight+0x284>
	case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36:
		//ON inverter MOS and wait 10 seconds
		InverterMOS_ON();
 80015f6:	f000 ff9d 	bl	8002534 <InverterMOS_ON>
		BatteryMOS_ON();
 80015fa:	f000 ff2b 	bl	8002454 <BatteryMOS_ON>
		StateResetInv++;
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <ResetInverterNight+0x288>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <ResetInverterNight+0x288>)
 8001606:	6013      	str	r3, [r2, #0]
		ExtOut_InvResetStop();
 8001608:	f000 feec 	bl	80023e4 <ExtOut_InvResetStop>
		if (Adc1Measurements.Inv_current > INV_CURR_SC) StateResetInv = 1;	//if SC occurs launch again reset procedure, instantly
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <ResetInverterNight+0x28c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f244 0274 	movw	r2, #16500	; 0x4074
 8001614:	4293      	cmp	r3, r2
 8001616:	d902      	bls.n	800161e <ResetInverterNight+0x216>
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <ResetInverterNight+0x288>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
		sprintf(TxBuffer+strlen(TxBuffer), "RIN3,");
 800161e:	4824      	ldr	r0, [pc, #144]	; (80016b0 <ResetInverterNight+0x2a8>)
 8001620:	f7fe fdd6 	bl	80001d0 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <ResetInverterNight+0x2a8>)
 8001628:	4413      	add	r3, r2
 800162a:	4926      	ldr	r1, [pc, #152]	; (80016c4 <ResetInverterNight+0x2bc>)
 800162c:	4618      	mov	r0, r3
 800162e:	f00d fbeb 	bl	800ee08 <siprintf>
		break;
 8001632:	e02b      	b.n	800168c <ResetInverterNight+0x284>
	case 37:	//now return to regular operation of controller
		StatCountFlagsWs.InvOutShorted = 0;	//reset flag 'shorted output'
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <ResetInverterNight+0x294>)
 8001636:	2200      	movs	r2, #0
 8001638:	639a      	str	r2, [r3, #56]	; 0x38
		StateResetInv=0;					//reset procedure is inactive
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <ResetInverterNight+0x288>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;				//procedure is off
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <ResetInverterNight+0x2b0>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
		TimeToResetInv = TIME2RESET_INV;	//reset timer for 30 minutes
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <ResetInverterNight+0x290>)
 8001648:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800164c:	601a      	str	r2, [r3, #0]
		StatCountFlagsWs.LowInvCurrent = 0;	//reset "no current' flag
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <ResetInverterNight+0x294>)
 8001650:	2200      	movs	r2, #0
 8001652:	649a      	str	r2, [r3, #72]	; 0x48
		sprintf(TxBuffer+strlen(TxBuffer), "RIN4,");
 8001654:	4816      	ldr	r0, [pc, #88]	; (80016b0 <ResetInverterNight+0x2a8>)
 8001656:	f7fe fdbb 	bl	80001d0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <ResetInverterNight+0x2a8>)
 800165e:	4413      	add	r3, r2
 8001660:	4919      	ldr	r1, [pc, #100]	; (80016c8 <ResetInverterNight+0x2c0>)
 8001662:	4618      	mov	r0, r3
 8001664:	f00d fbd0 	bl	800ee08 <siprintf>
		break;
 8001668:	e010      	b.n	800168c <ResetInverterNight+0x284>
	default:
		StateResetInv=0;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <ResetInverterNight+0x288>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <ResetInverterNight+0x2b0>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
		sprintf(TxBuffer+strlen(TxBuffer), "RIN5,");
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <ResetInverterNight+0x2a8>)
 8001678:	f7fe fdaa 	bl	80001d0 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <ResetInverterNight+0x2a8>)
 8001680:	4413      	add	r3, r2
 8001682:	4912      	ldr	r1, [pc, #72]	; (80016cc <ResetInverterNight+0x2c4>)
 8001684:	4618      	mov	r0, r3
 8001686:	f00d fbbf 	bl	800ee08 <siprintf>
		break;
 800168a:	bf00      	nop
	}
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20006344 	.word	0x20006344
 8001694:	200059a0 	.word	0x200059a0
 8001698:	20000010 	.word	0x20000010
 800169c:	200059c4 	.word	0x200059c4
 80016a0:	20000254 	.word	0x20000254
 80016a4:	2000024c 	.word	0x2000024c
 80016a8:	20000014 	.word	0x20000014
 80016ac:	20005a34 	.word	0x20005a34
 80016b0:	20005dc4 	.word	0x20005dc4
 80016b4:	08013628 	.word	0x08013628
 80016b8:	200061c8 	.word	0x200061c8
 80016bc:	08013630 	.word	0x08013630
 80016c0:	08013638 	.word	0x08013638
 80016c4:	08013640 	.word	0x08013640
 80016c8:	08013648 	.word	0x08013648
 80016cc:	08013650 	.word	0x08013650

080016d0 <setPWM_TIM2>:

void setPWM_TIM2(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 80016d0:	b084      	sub	sp, #16
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b088      	sub	sp, #32
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80016dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 //HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 TIM_OC_InitTypeDef sConfigOC;
 //timer.Init.Period = period; // set the period duration
 //HAL_TIM_PWM_Init(&timer); // re-inititialise with new period value
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e0:	2360      	movs	r3, #96	; 0x60
 80016e2:	607b      	str	r3, [r7, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 80016e4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80016e8:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80016ee:	2308      	movs	r3, #8
 80016f0:	613b      	str	r3, [r7, #16]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80016fa:	4619      	mov	r1, r3
 80016fc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001700:	f007 fa60 	bl	8008bc4 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001704:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001706:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800170a:	f006 ffd5 	bl	80086b8 <HAL_TIM_PWM_Start>
}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001718:	b004      	add	sp, #16
 800171a:	4770      	bx	lr

0800171c <setPWM_TIM16>:

void setPWM_TIM16(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse)
{
 800171c:	b084      	sub	sp, #16
 800171e:	b580      	push	{r7, lr}
 8001720:	b088      	sub	sp, #32
 8001722:	af00      	add	r7, sp, #0
 8001724:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001728:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 TIM_OC_InitTypeDef sConfigOC;
 sConfigOC.Pulse = pulse; // set the pulse duration
 800172c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001730:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001732:	2360      	movs	r3, #96	; 0x60
 8001734:	607b      	str	r3, [r7, #4]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
 sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800174e:	4619      	mov	r1, r3
 8001750:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001754:	f007 fa36 	bl	8008bc4 <HAL_TIM_PWM_ConfigChannel>
 /* Set the Capture Compare Register value */
 //*timer->CCR1 = pulse;
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001758:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800175a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800175e:	f006 ffab 	bl	80086b8 <HAL_TIM_PWM_Start>
}
 8001762:	bf00      	nop
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800176c:	b004      	add	sp, #16
 800176e:	4770      	bx	lr

08001770 <LedStatusShow>:

/*function called once a 1 second to show mashine-state status thru LEDs*/
void LedStatusShow(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	if (LedStatusTimer)
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <LedStatusShow+0x18c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01d      	beq.n	80017b8 <LedStatusShow+0x48>
	{
		LedStatusTimer--;
 800177c:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <LedStatusShow+0x18c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3b01      	subs	r3, #1
 8001782:	4a5e      	ldr	r2, [pc, #376]	; (80018fc <LedStatusShow+0x18c>)
 8001784:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178c:	485c      	ldr	r0, [pc, #368]	; (8001900 <LedStatusShow+0x190>)
 800178e:	f005 fc87 	bl	80070a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001798:	4859      	ldr	r0, [pc, #356]	; (8001900 <LedStatusShow+0x190>)
 800179a:	f005 fc81 	bl	80070a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a4:	4856      	ldr	r0, [pc, #344]	; (8001900 <LedStatusShow+0x190>)
 80017a6:	f005 fc7b 	bl	80070a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b0:	4853      	ldr	r0, [pc, #332]	; (8001900 <LedStatusShow+0x190>)
 80017b2:	f005 fc75 	bl	80070a0 <HAL_GPIO_WritePin>
		{//lowest priority to show
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
		}
	}
}
 80017b6:	e09f      	b.n	80018f8 <LedStatusShow+0x188>
		if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP || Adc1Measurements.NTC2_Inverter_mos>MOSFET_MAX_TEMP)	//powerMOSFET OVT 0
 80017b8:	4b52      	ldr	r3, [pc, #328]	; (8001904 <LedStatusShow+0x194>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b46      	cmp	r3, #70	; 0x46
 80017be:	d803      	bhi.n	80017c8 <LedStatusShow+0x58>
 80017c0:	4b50      	ldr	r3, [pc, #320]	; (8001904 <LedStatusShow+0x194>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	2b46      	cmp	r3, #70	; 0x46
 80017c6:	d91d      	bls.n	8001804 <LedStatusShow+0x94>
			if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80017c8:	4b4e      	ldr	r3, [pc, #312]	; (8001904 <LedStatusShow+0x194>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b46      	cmp	r3, #70	; 0x46
 80017ce:	d905      	bls.n	80017dc <LedStatusShow+0x6c>
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d6:	484a      	ldr	r0, [pc, #296]	; (8001900 <LedStatusShow+0x190>)
 80017d8:	f005 fc62 	bl	80070a0 <HAL_GPIO_WritePin>
			if (Adc1Measurements.NTC2_Inverter_mos>MOSFET_MAX_TEMP) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80017dc:	4b49      	ldr	r3, [pc, #292]	; (8001904 <LedStatusShow+0x194>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	2b46      	cmp	r3, #70	; 0x46
 80017e2:	d905      	bls.n	80017f0 <LedStatusShow+0x80>
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ea:	4845      	ldr	r0, [pc, #276]	; (8001900 <LedStatusShow+0x190>)
 80017ec:	f005 fc58 	bl	80070a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f6:	4842      	ldr	r0, [pc, #264]	; (8001900 <LedStatusShow+0x190>)
 80017f8:	f005 fc52 	bl	80070a0 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 80017fc:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <LedStatusShow+0x18c>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e079      	b.n	80018f8 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Time_NoBattery2Chg)	//cant charge battery (its full) 1 high priority
 8001804:	4b40      	ldr	r3, [pc, #256]	; (8001908 <LedStatusShow+0x198>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00f      	beq.n	800182c <LedStatusShow+0xbc>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001812:	483b      	ldr	r0, [pc, #236]	; (8001900 <LedStatusShow+0x190>)
 8001814:	f005 fc44 	bl	80070a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800181e:	4838      	ldr	r0, [pc, #224]	; (8001900 <LedStatusShow+0x190>)
 8001820:	f005 fc3e 	bl	80070a0 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <LedStatusShow+0x18c>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
}
 800182a:	e065      	b.n	80018f8 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattRecharge)	//battery charging (mains mode) 2
 800182c:	4b36      	ldr	r3, [pc, #216]	; (8001908 <LedStatusShow+0x198>)
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <LedStatusShow+0xd8>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800183a:	4831      	ldr	r0, [pc, #196]	; (8001900 <LedStatusShow+0x190>)
 800183c:	f005 fc30 	bl	80070a0 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <LedStatusShow+0x18c>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]
}
 8001846:	e057      	b.n	80018f8 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattOut)	//battery discharging 3
 8001848:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <LedStatusShow+0x198>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <LedStatusShow+0x118>
			if (FlagInverterMOS && FlagBatteryMOS)
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <LedStatusShow+0x19c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00d      	beq.n	8001874 <LedStatusShow+0x104>
 8001858:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <LedStatusShow+0x1a0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d009      	beq.n	8001874 <LedStatusShow+0x104>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001866:	4826      	ldr	r0, [pc, #152]	; (8001900 <LedStatusShow+0x190>)
 8001868:	f005 fc1a 	bl	80070a0 <HAL_GPIO_WritePin>
				LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <LedStatusShow+0x18c>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e041      	b.n	80018f8 <LedStatusShow+0x188>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800187a:	4821      	ldr	r0, [pc, #132]	; (8001900 <LedStatusShow+0x190>)
 800187c:	f005 fc10 	bl	80070a0 <HAL_GPIO_WritePin>
				LedStatusTimer = LEDSTATUS_TIMER_MED;
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <LedStatusShow+0x18c>)
 8001882:	2203      	movs	r2, #3
 8001884:	601a      	str	r2, [r3, #0]
}
 8001886:	e037      	b.n	80018f8 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_Inverter)	//inverter operational (mains mode) 3
 8001888:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <LedStatusShow+0x198>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d009      	beq.n	80018a4 <LedStatusShow+0x134>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001896:	481a      	ldr	r0, [pc, #104]	; (8001900 <LedStatusShow+0x190>)
 8001898:	f005 fc02 	bl	80070a0 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <LedStatusShow+0x18c>)
 800189e:	2209      	movs	r2, #9
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	e029      	b.n	80018f8 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattNoInv)	//battery charging, no inverter (mains mode) 4
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <LedStatusShow+0x198>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <LedStatusShow+0x150>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b2:	4813      	ldr	r0, [pc, #76]	; (8001900 <LedStatusShow+0x190>)
 80018b4:	f005 fbf4 	bl	80070a0 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <LedStatusShow+0x18c>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	e01b      	b.n	80018f8 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattIn)	//battery charging (battery mode) 5
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <LedStatusShow+0x198>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <LedStatusShow+0x16c>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <LedStatusShow+0x190>)
 80018d0:	f005 fbe6 	bl	80070a0 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <LedStatusShow+0x18c>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
}
 80018da:	e00d      	b.n	80018f8 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Time_NightTime)	//night time, lowest priority to show 6
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <LedStatusShow+0x198>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <LedStatusShow+0x188>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <LedStatusShow+0x190>)
 80018ec:	f005 fbd8 	bl	80070a0 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <LedStatusShow+0x18c>)
 80018f2:	2209      	movs	r2, #9
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	e7ff      	b.n	80018f8 <LedStatusShow+0x188>
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200059c0 	.word	0x200059c0
 8001900:	48000400 	.word	0x48000400
 8001904:	200059a0 	.word	0x200059a0
 8001908:	200059c4 	.word	0x200059c4
 800190c:	2000024c 	.word	0x2000024c
 8001910:	20000248 	.word	0x20000248

08001914 <RestoreCalValuesFromFLASH>:

/*Function restoring  saved cal data from FLASH memory */
void RestoreCalValuesFromFLASH(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
int i;

	for(i = 0; i < sizeof(CalibrationValues); i++)
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	e00a      	b.n	8001936 <RestoreCalValuesFromFLASH+0x22>
	{
		((uint8_t *) &CalibrationValues)[i] = Cal_savedInFLASH[i];
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <RestoreCalValuesFromFLASH+0x5c>)
 8001924:	4413      	add	r3, r2
 8001926:	4913      	ldr	r1, [pc, #76]	; (8001974 <RestoreCalValuesFromFLASH+0x60>)
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	440a      	add	r2, r1
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(CalibrationValues); i++)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3301      	adds	r3, #1
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b27      	cmp	r3, #39	; 0x27
 800193a:	d9f1      	bls.n	8001920 <RestoreCalValuesFromFLASH+0xc>
	}
	if (CalibrationValues.Indicator == 0xffffffff)
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <RestoreCalValuesFromFLASH+0x5c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d10d      	bne.n	8001962 <RestoreCalValuesFromFLASH+0x4e>
	{
		for(i = 0; i < sizeof(CalibrationValues); i++)
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	e007      	b.n	800195c <RestoreCalValuesFromFLASH+0x48>
		{
			((uint8_t *) &CalibrationValues)[i] = 0;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <RestoreCalValuesFromFLASH+0x5c>)
 8001950:	4413      	add	r3, r2
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < sizeof(CalibrationValues); i++)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3301      	adds	r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b27      	cmp	r3, #39	; 0x27
 8001960:	d9f4      	bls.n	800194c <RestoreCalValuesFromFLASH+0x38>
		}
	}

}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20005c70 	.word	0x20005c70
 8001974:	0803a000 	.word	0x0803a000

08001978 <StoreCalData2FLASH>:

int StoreCalData2FLASH(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
	uint32_t temp, sofar=0, PageAddress=0;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef flash_conf;

	//osTimerStop(myTimer01Handle);
	StatCurrentWh.FlashPageCounter++;
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <StoreCalData2FLASH+0x8c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <StoreCalData2FLASH+0x8c>)
 800198e:	6013      	str	r3, [r2, #0]
	flash_conf.TypeErase = FLASH_TYPEERASE_PAGES;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
	flash_conf.NbPages = 1;
 8001994:	2301      	movs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
	flash_conf.Page = NO_FLASH_PAGES+64;
 8001998:	2374      	movs	r3, #116	; 0x74
 800199a:	60fb      	str	r3, [r7, #12]
	//flash_conf.Page = (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0];
	flash_conf.Banks = FLASH_BANK_1;
 800199c:	2301      	movs	r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
#ifndef DEBUG_EN
	HAL_FLASH_Unlock();
 80019a0:	f004 ffd4 	bl	800694c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <StoreCalData2FLASH+0x90>)
 80019a6:	22b3      	movs	r2, #179	; 0xb3
 80019a8:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&flash_conf, &temp);// FLASH_Erase_Sector(&Stats_savedInFLASH+RecentPage_pointer, VOLTAGE_RANGE_3);
 80019aa:	f107 0214 	add.w	r2, r7, #20
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 f8bc 	bl	8006b30 <HAL_FLASHEx_Erase>
	//HAL_FLASH_Lock();
	//HAL_FLASH_Unlock();
	//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );

	 while (sofar<((sizeof(CalibrationValues)/(4*2))))	//should divided by number of bytes@word wrote at once
 80019b8:	e01a      	b.n	80019f0 <StoreCalData2FLASH+0x78>
	 {
		 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&Cal_savedInFLASH[PageAddress], ((uint64_t *) &CalibrationValues)[sofar]) == HAL_OK)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <StoreCalData2FLASH+0x94>)
 80019be:	4413      	add	r3, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <StoreCalData2FLASH+0x98>)
 80019c8:	4413      	add	r3, r2
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	2000      	movs	r0, #0
 80019d0:	f004 ff50 	bl	8006874 <HAL_FLASH_Program>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <StoreCalData2FLASH+0x70>
		 {
			 PageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	3308      	adds	r3, #8
 80019de:	61bb      	str	r3, [r7, #24]
			 sofar++;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	3301      	adds	r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e003      	b.n	80019f0 <StoreCalData2FLASH+0x78>
		 }
		 else
		 {
		   /* Error occurred while writing data in Flash memory*/
			 //osTimerStart(myTimer01Handle, 100);
			 return HAL_FLASH_GetError();
 80019e8:	f004 ffe2 	bl	80069b0 <HAL_FLASH_GetError>
 80019ec:	4603      	mov	r3, r0
 80019ee:	e005      	b.n	80019fc <StoreCalData2FLASH+0x84>
	 while (sofar<((sizeof(CalibrationValues)/(4*2))))	//should divided by number of bytes@word wrote at once
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d9e1      	bls.n	80019ba <StoreCalData2FLASH+0x42>
		 }
	}
#endif
	HAL_FLASH_Lock();
 80019f6:	f004 ffcb 	bl	8006990 <HAL_FLASH_Lock>
	//osTimerStart(myTimer01Handle, 100);
	return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20005a34 	.word	0x20005a34
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	0803a000 	.word	0x0803a000
 8001a10:	20005c70 	.word	0x20005c70

08001a14 <RestoreStatisticsFromFLASH>:

/*Function restoring last saved statistics from FLASH memory */
void RestoreStatisticsFromFLASH(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
	uint32_t i, curr_val=0, Highest_val=0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
	//Stats_savedInFLASH[NO_FLASH_PAGES][FLASH_PAGE_SIZE]
	RecentPage_pointer = 0;
 8001a22:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <RestoreStatisticsFromFLASH+0x10c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (NO_FLASH_PAGES); i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e02f      	b.n	8001a8e <RestoreStatisticsFromFLASH+0x7a>
		{
			for(uint32_t j=4;j>0;)
 8001a2e:	2304      	movs	r3, #4
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	e00d      	b.n	8001a50 <RestoreStatisticsFromFLASH+0x3c>
			{
				j--;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	603b      	str	r3, [r7, #0]
				curr_val = (curr_val<<8) | Stats_savedInFLASH[i][j];
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	4939      	ldr	r1, [pc, #228]	; (8001b24 <RestoreStatisticsFromFLASH+0x110>)
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	02d2      	lsls	r2, r2, #11
 8001a44:	4411      	add	r1, r2
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	440a      	add	r2, r1
 8001a4a:	7812      	ldrb	r2, [r2, #0]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
			for(uint32_t j=4;j>0;)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1ee      	bne.n	8001a34 <RestoreStatisticsFromFLASH+0x20>
			}
			if (curr_val == 0xffffffff)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d101      	bne.n	8001a62 <RestoreStatisticsFromFLASH+0x4e>
			{
				curr_val = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
			}
			if (curr_val > Highest_val)
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d909      	bls.n	8001a7e <RestoreStatisticsFromFLASH+0x6a>
			{
				RecentPage_pointer = i;
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	; (8001b20 <RestoreStatisticsFromFLASH+0x10c>)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6013      	str	r3, [r2, #0]
				Highest_val = curr_val;
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	607b      	str	r3, [r7, #4]
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a78:	482b      	ldr	r0, [pc, #172]	; (8001b28 <RestoreStatisticsFromFLASH+0x114>)
 8001a7a:	f005 fb29 	bl	80070d0 <HAL_GPIO_TogglePin>
			}
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a82:	4829      	ldr	r0, [pc, #164]	; (8001b28 <RestoreStatisticsFromFLASH+0x114>)
 8001a84:	f005 fb24 	bl	80070d0 <HAL_GPIO_TogglePin>
	for (i = 0; i < (NO_FLASH_PAGES); i++)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b33      	cmp	r3, #51	; 0x33
 8001a92:	d9cc      	bls.n	8001a2e <RestoreStatisticsFromFLASH+0x1a>
		}

	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9a:	4823      	ldr	r0, [pc, #140]	; (8001b28 <RestoreStatisticsFromFLASH+0x114>)
 8001a9c:	f005 fb00 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa6:	4820      	ldr	r0, [pc, #128]	; (8001b28 <RestoreStatisticsFromFLASH+0x114>)
 8001aa8:	f005 fafa 	bl	80070a0 <HAL_GPIO_WritePin>

	for(i = 0; i < sizeof(Stat_Flash); i++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e00e      	b.n	8001ad0 <RestoreStatisticsFromFLASH+0xbc>
	{
		((uint8_t *) &Stat_Flash)[i] = Stats_savedInFLASH[RecentPage_pointer][i];
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <RestoreStatisticsFromFLASH+0x10c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	491c      	ldr	r1, [pc, #112]	; (8001b2c <RestoreStatisticsFromFLASH+0x118>)
 8001aba:	440b      	add	r3, r1
 8001abc:	4919      	ldr	r1, [pc, #100]	; (8001b24 <RestoreStatisticsFromFLASH+0x110>)
 8001abe:	02d2      	lsls	r2, r2, #11
 8001ac0:	4411      	add	r1, r2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	440a      	add	r2, r1
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(Stat_Flash); i++)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3301      	adds	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2bbf      	cmp	r3, #191	; 0xbf
 8001ad4:	d9ed      	bls.n	8001ab2 <RestoreStatisticsFromFLASH+0x9e>
	}
	if (Stat_Flash.Time_NightTime == 0xffffffff)
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <RestoreStatisticsFromFLASH+0x118>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ade:	d113      	bne.n	8001b08 <RestoreStatisticsFromFLASH+0xf4>
	{
		for(i = 0; i < sizeof(Stat_Flash); i++) {
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e00c      	b.n	8001b00 <RestoreStatisticsFromFLASH+0xec>
			    ((uint8_t *) &StatCurrentWh)[i] = 0;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <RestoreStatisticsFromFLASH+0x11c>)
 8001aea:	4413      	add	r3, r2
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
			    ((uint8_t *) &Stat_Flash)[i] = 0;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <RestoreStatisticsFromFLASH+0x118>)
 8001af4:	4413      	add	r3, r2
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < sizeof(Stat_Flash); i++) {
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2bbf      	cmp	r3, #191	; 0xbf
 8001b04:	d9ef      	bls.n	8001ae6 <RestoreStatisticsFromFLASH+0xd2>
			}
	}
	else StatCurrentWh = Stat_Flash;
}
 8001b06:	e007      	b.n	8001b18 <RestoreStatisticsFromFLASH+0x104>
	else StatCurrentWh = Stat_Flash;
 8001b08:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <RestoreStatisticsFromFLASH+0x11c>)
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <RestoreStatisticsFromFLASH+0x118>)
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	23c0      	movs	r3, #192	; 0xc0
 8001b12:	461a      	mov	r2, r3
 8001b14:	f00c fa0d 	bl	800df32 <memcpy>
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200061c4 	.word	0x200061c4
 8001b24:	08020000 	.word	0x08020000
 8001b28:	48000400 	.word	0x48000400
 8001b2c:	20006238 	.word	0x20006238
 8001b30:	20005a34 	.word	0x20005a34

08001b34 <StoreStatistics2FLASH>:

/*Function storing last  statistics to FLASH memory */
int StoreStatistics2FLASH(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
	uint32_t temp, sofar=0, StartPageAddress=0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef flash_conf;

#ifndef TESTING_VALUES
	//osTimerStop(myTimer01Handle);
#endif
	Stat_Flash = StatCurrentWh;
 8001b42:	4a30      	ldr	r2, [pc, #192]	; (8001c04 <StoreStatistics2FLASH+0xd0>)
 8001b44:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <StoreStatistics2FLASH+0xd4>)
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	23c0      	movs	r3, #192	; 0xc0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f00c f9f0 	bl	800df32 <memcpy>
	if (RecentPage_pointer < NO_FLASH_PAGES-1) RecentPage_pointer++;
 8001b52:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <StoreStatistics2FLASH+0xd8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b32      	cmp	r3, #50	; 0x32
 8001b58:	d805      	bhi.n	8001b66 <StoreStatistics2FLASH+0x32>
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <StoreStatistics2FLASH+0xd8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	4a2a      	ldr	r2, [pc, #168]	; (8001c0c <StoreStatistics2FLASH+0xd8>)
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e002      	b.n	8001b6c <StoreStatistics2FLASH+0x38>
	else RecentPage_pointer = 0;
 8001b66:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <StoreStatistics2FLASH+0xd8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
	StatCurrentWh.FlashPageCounter++;
 8001b6c:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <StoreStatistics2FLASH+0xd4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <StoreStatistics2FLASH+0xd4>)
 8001b74:	6013      	str	r3, [r2, #0]
//	return;
	flash_conf.TypeErase = FLASH_TYPEERASE_PAGES;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
	flash_conf.NbPages = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	613b      	str	r3, [r7, #16]
	flash_conf.Page = RecentPage_pointer + 64;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <StoreStatistics2FLASH+0xd8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3340      	adds	r3, #64	; 0x40
 8001b84:	60fb      	str	r3, [r7, #12]
	//flash_conf.Page = (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0];
	flash_conf.Banks = FLASH_BANK_1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
#ifndef DEBUG_EN
	HAL_FLASH_Unlock();
 8001b8a:	f004 fedf 	bl	800694c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <StoreStatistics2FLASH+0xdc>)
 8001b90:	22b3      	movs	r2, #179	; 0xb3
 8001b92:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&flash_conf, &temp);// FLASH_Erase_Sector(&Stats_savedInFLASH+RecentPage_pointer, VOLTAGE_RANGE_3);
 8001b94:	f107 0214 	add.w	r2, r7, #20
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f004 ffc7 	bl	8006b30 <HAL_FLASHEx_Erase>
	//HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0], ((uint8_t *) &Stat_Flash)[i]);
	HAL_FLASH_Lock();
 8001ba2:	f004 fef5 	bl	8006990 <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 8001ba6:	f004 fed1 	bl	800694c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <StoreStatistics2FLASH+0xdc>)
 8001bac:	22b3      	movs	r2, #179	; 0xb3
 8001bae:	611a      	str	r2, [r3, #16]

	 while (sofar<((sizeof(Stat_Flash)/(4*2))))	//should divided by number of bytes@word wrote at once
 8001bb0:	e01e      	b.n	8001bf0 <StoreStatistics2FLASH+0xbc>
		   {
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][StartPageAddress], ((uint64_t *) &Stat_Flash)[sofar]) == HAL_OK)
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <StoreStatistics2FLASH+0xd8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	02da      	lsls	r2, r3, #11
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <StoreStatistics2FLASH+0xe0>)
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <StoreStatistics2FLASH+0xd0>)
 8001bc8:	4413      	add	r3, r2
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f004 fe50 	bl	8006874 <HAL_FLASH_Program>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <StoreStatistics2FLASH+0xb4>
		     {
		    	 StartPageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	3308      	adds	r3, #8
 8001bde:	61bb      	str	r3, [r7, #24]
		    	 sofar++;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	3301      	adds	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e003      	b.n	8001bf0 <StoreStatistics2FLASH+0xbc>
		     {
		       /* Error occurred while writing data in Flash memory*/
#ifndef TESTING_VALUES
		    	 //osTimerStart(myTimer01Handle, 100);
#endif
		    	 return HAL_FLASH_GetError();
 8001be8:	f004 fee2 	bl	80069b0 <HAL_FLASH_GetError>
 8001bec:	4603      	mov	r3, r0
 8001bee:	e005      	b.n	8001bfc <StoreStatistics2FLASH+0xc8>
	 while (sofar<((sizeof(Stat_Flash)/(4*2))))	//should divided by number of bytes@word wrote at once
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	2b17      	cmp	r3, #23
 8001bf4:	d9dd      	bls.n	8001bb2 <StoreStatistics2FLASH+0x7e>
		     }
		   }
#endif
	HAL_FLASH_Lock();
 8001bf6:	f004 fecb 	bl	8006990 <HAL_FLASH_Lock>
#ifndef TESTING_VALUES
	//osTimerStart(myTimer01Handle, 100);
#endif
	return 0;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20006238 	.word	0x20006238
 8001c08:	20005a34 	.word	0x20005a34
 8001c0c:	200061c4 	.word	0x200061c4
 8001c10:	40022000 	.word	0x40022000
 8001c14:	08020000 	.word	0x08020000

08001c18 <DeleteStatistics2FLASH>:
/*Function storing last  statistics to FLASH memory */
void DeleteStatistics2FLASH(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
	uint32_t temp, i;
	FLASH_EraseInitTypeDef flash_conf;

	osTimerStop(myTimer01Handle);
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <DeleteStatistics2FLASH+0xa4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f009 fa8e 	bl	800b144 <osTimerStop>
	for(i = 0; i < sizeof(Stat_Flash); i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e00c      	b.n	8001c48 <DeleteStatistics2FLASH+0x30>
	{
		((uint8_t *) &StatCurrentWh)[i] = 0;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <DeleteStatistics2FLASH+0xa8>)
 8001c32:	4413      	add	r3, r2
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
		((uint8_t *) &Stat_Flash)[i] = 0;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <DeleteStatistics2FLASH+0xac>)
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(Stat_Flash); i++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2bbf      	cmp	r3, #191	; 0xbf
 8001c4c:	d9ef      	bls.n	8001c2e <DeleteStatistics2FLASH+0x16>
	}
	RecentPage_pointer = 0;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <DeleteStatistics2FLASH+0xb0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
	flash_conf.TypeErase = FLASH_TYPEERASE_PAGES;
 8001c54:	2300      	movs	r3, #0
 8001c56:	603b      	str	r3, [r7, #0]
	flash_conf.NbPages = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
	flash_conf.Page = RecentPage_pointer + 64;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <DeleteStatistics2FLASH+0xb0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3340      	adds	r3, #64	; 0x40
 8001c62:	60bb      	str	r3, [r7, #8]
	flash_conf.Banks = FLASH_BANK_1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
#ifndef DEBUG_EN
	HAL_FLASH_Unlock();
 8001c68:	f004 fe70 	bl	800694c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <DeleteStatistics2FLASH+0xb4>)
 8001c6e:	22b3      	movs	r2, #179	; 0xb3
 8001c70:	611a      	str	r2, [r3, #16]
	while (RecentPage_pointer < NO_FLASH_PAGES-1)
 8001c72:	e00f      	b.n	8001c94 <DeleteStatistics2FLASH+0x7c>
	{
		HAL_FLASHEx_Erase(&flash_conf, &temp);
 8001c74:	f107 0210 	add.w	r2, r7, #16
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f004 ff57 	bl	8006b30 <HAL_FLASHEx_Erase>
		RecentPage_pointer++;
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <DeleteStatistics2FLASH+0xb0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <DeleteStatistics2FLASH+0xb0>)
 8001c8a:	6013      	str	r3, [r2, #0]
		flash_conf.Page = RecentPage_pointer + 64;
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <DeleteStatistics2FLASH+0xb0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3340      	adds	r3, #64	; 0x40
 8001c92:	60bb      	str	r3, [r7, #8]
	while (RecentPage_pointer < NO_FLASH_PAGES-1)
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <DeleteStatistics2FLASH+0xb0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b32      	cmp	r3, #50	; 0x32
 8001c9a:	d9eb      	bls.n	8001c74 <DeleteStatistics2FLASH+0x5c>
	}

#endif
	HAL_FLASH_Lock();
 8001c9c:	f004 fe78 	bl	8006990 <HAL_FLASH_Lock>
	RecentPage_pointer = 0;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <DeleteStatistics2FLASH+0xb0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
	osTimerStart(myTimer01Handle, 100);
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <DeleteStatistics2FLASH+0xa4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2164      	movs	r1, #100	; 0x64
 8001cac:	4618      	mov	r0, r3
 8001cae:	f009 fa1b 	bl	800b0e8 <osTimerStart>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20005dc0 	.word	0x20005dc0
 8001cc0:	20005a34 	.word	0x20005a34
 8001cc4:	20006238 	.word	0x20006238
 8001cc8:	200061c4 	.word	0x200061c4
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <Calculate_WattSeconds>:
/*function launched every second to calculate Watt-seconds for given machine state on basis of flags */
void Calculate_WattSeconds(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	if (StatCountFlagsWs.Ws_BattIn)		//Watt-seconds when battery is charging
 8001cd4:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d011      	beq.n	8001d00 <Calculate_WattSeconds+0x30>
	{
		StatCountFlagsWs.Ws_BattIn = 0;
 8001cdc:	4b90      	ldr	r3, [pc, #576]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
		StatCurrentWs.Ws_BattIn += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 8001ce2:	4b90      	ldr	r3, [pc, #576]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b90      	ldr	r3, [pc, #576]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	498f      	ldr	r1, [pc, #572]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001cec:	6849      	ldr	r1, [r1, #4]
 8001cee:	fb01 f303 	mul.w	r3, r1, r3
 8001cf2:	498e      	ldr	r1, [pc, #568]	; (8001f2c <Calculate_WattSeconds+0x25c>)
 8001cf4:	fba1 1303 	umull	r1, r3, r1, r3
 8001cf8:	0b5b      	lsrs	r3, r3, #13
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a89      	ldr	r2, [pc, #548]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001cfe:	6013      	str	r3, [r2, #0]
	}
	if (StatCountFlagsWs.Ws_BattNoInv)		//Watt-seconds when battery is charging but energy should go into mains (but cant)
 8001d00:	4b87      	ldr	r3, [pc, #540]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d011      	beq.n	8001d2c <Calculate_WattSeconds+0x5c>
	{
		StatCountFlagsWs.Ws_BattNoInv = 0;
 8001d08:	4b85      	ldr	r3, [pc, #532]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	605a      	str	r2, [r3, #4]
		StatCurrentWs.Ws_BattNoInv += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 8001d0e:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4b85      	ldr	r3, [pc, #532]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	4984      	ldr	r1, [pc, #528]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001d18:	6849      	ldr	r1, [r1, #4]
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	4983      	ldr	r1, [pc, #524]	; (8001f2c <Calculate_WattSeconds+0x25c>)
 8001d20:	fba1 1303 	umull	r1, r3, r1, r3
 8001d24:	0b5b      	lsrs	r3, r3, #13
 8001d26:	4413      	add	r3, r2
 8001d28:	4a7e      	ldr	r2, [pc, #504]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001d2a:	6053      	str	r3, [r2, #4]
		//StatCurrentWs.Time_NoInv++;	//double count
	}
	if (StatCountFlagsWs.Ws_Inverter)		//Watt-seconds for inverter
 8001d2c:	4b7c      	ldr	r3, [pc, #496]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d011      	beq.n	8001d58 <Calculate_WattSeconds+0x88>
	{
		StatCountFlagsWs.Ws_Inverter = 0;
 8001d34:	4b7a      	ldr	r3, [pc, #488]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
		StatCurrentWs.Ws_Inverter += (Adc1Measurements.PV_voltage*Adc1Measurements.Inv_current)/10000;
 8001d3a:	4b7a      	ldr	r3, [pc, #488]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	4b7a      	ldr	r3, [pc, #488]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4979      	ldr	r1, [pc, #484]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001d44:	6809      	ldr	r1, [r1, #0]
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4978      	ldr	r1, [pc, #480]	; (8001f2c <Calculate_WattSeconds+0x25c>)
 8001d4c:	fba1 1303 	umull	r1, r3, r1, r3
 8001d50:	0b5b      	lsrs	r3, r3, #13
 8001d52:	4413      	add	r3, r2
 8001d54:	4a73      	ldr	r2, [pc, #460]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001d56:	6093      	str	r3, [r2, #8]
	}
	if (StatCountFlagsWs.Ws_BattOut)		//Watt-seconds when battery is discharging
 8001d58:	4b71      	ldr	r3, [pc, #452]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d011      	beq.n	8001d84 <Calculate_WattSeconds+0xb4>
	{
		StatCountFlagsWs.Ws_BattOut = 0;
 8001d60:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
		StatCurrentWs.Ws_BattOut += (Adc1Measurements.Batt_voltage*Adc1Measurements.Inv_current)/10000;
 8001d66:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	496e      	ldr	r1, [pc, #440]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001d70:	6809      	ldr	r1, [r1, #0]
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	496d      	ldr	r1, [pc, #436]	; (8001f2c <Calculate_WattSeconds+0x25c>)
 8001d78:	fba1 1303 	umull	r1, r3, r1, r3
 8001d7c:	0b5b      	lsrs	r3, r3, #13
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a68      	ldr	r2, [pc, #416]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001d82:	60d3      	str	r3, [r2, #12]
	}
	if (StatCountFlagsWs.Ws_BattRecharge)		//Watt-seconds when battery is recharging
 8001d84:	4b66      	ldr	r3, [pc, #408]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d011      	beq.n	8001db0 <Calculate_WattSeconds+0xe0>
	{
		StatCountFlagsWs.Ws_BattRecharge = 0;
 8001d8c:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
		StatCurrentWs.Ws_BattRecharge += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 8001d92:	4b64      	ldr	r3, [pc, #400]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	4b64      	ldr	r3, [pc, #400]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	4963      	ldr	r1, [pc, #396]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001d9c:	6849      	ldr	r1, [r1, #4]
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4962      	ldr	r1, [pc, #392]	; (8001f2c <Calculate_WattSeconds+0x25c>)
 8001da4:	fba1 1303 	umull	r1, r3, r1, r3
 8001da8:	0b5b      	lsrs	r3, r3, #13
 8001daa:	4413      	add	r3, r2
 8001dac:	4a5d      	ldr	r2, [pc, #372]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001dae:	6113      	str	r3, [r2, #16]
	}
	if (StatCountFlagsWs.Time_NightTime)		//darkness time
 8001db0:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <Calculate_WattSeconds+0xf8>
	{
		StatCountFlagsWs.Time_NightTime = 0;
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
		StatCurrentWs.Time_NightTime++;
 8001dbe:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4a57      	ldr	r2, [pc, #348]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001dc6:	61d3      	str	r3, [r2, #28]
	}
	if (StatCountFlagsWs.Time_NoBattery2Chg)		//time when battery is not ready to be charged
 8001dc8:	4b55      	ldr	r3, [pc, #340]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <Calculate_WattSeconds+0x110>
	{
		StatCountFlagsWs.Time_NoBattery2Chg = 0;
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	621a      	str	r2, [r3, #32]
		StatCurrentWs.Time_NoBattery2Chg++;
 8001dd6:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001dde:	6213      	str	r3, [r2, #32]
	}
	if (StatCountFlagsWs.Time_NoInv)		//time when INV is not working
 8001de0:	4b4f      	ldr	r3, [pc, #316]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <Calculate_WattSeconds+0x128>
	{
		StatCountFlagsWs.Time_NoInv = 0;
 8001de8:	4b4d      	ldr	r3, [pc, #308]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
		StatCurrentWs.Time_NoInv++;
 8001dee:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	3301      	adds	r3, #1
 8001df4:	4a4b      	ldr	r2, [pc, #300]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001df6:	6193      	str	r3, [r2, #24]
	}
	if (StatCountFlagsWs.Time_DuskTime)		//time after dusk
 8001df8:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <Calculate_WattSeconds+0x140>
	{
		StatCountFlagsWs.Time_DuskTime = 0;
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
		StatCurrentWs.Time_DuskTime++;
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4a45      	ldr	r2, [pc, #276]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001e0e:	6553      	str	r3, [r2, #84]	; 0x54
	}
	if (StatCountFlagsWs.Time_Daytime)		//daytime
 8001e10:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <Calculate_WattSeconds+0x15c>
	{
		StatCountFlagsWs.Time_Daytime=0;
 8001e18:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	63da      	str	r2, [r3, #60]	; 0x3c
		StatCurrentWh.DayDuration_current++;
 8001e1e:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001e20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001e24:	3301      	adds	r3, #1
 8001e26:	4a42      	ldr	r2, [pc, #264]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001e28:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	}
	if (StatCountFlagsWs.ChgAs)		//count mAs
 8001e2c:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d009      	beq.n	8001e48 <Calculate_WattSeconds+0x178>
	{
		StatCountFlagsWs.ChgAs = 0;
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	659a      	str	r2, [r3, #88]	; 0x58
		StatCurrentWs.ChgAs += (Adc1Measurements.PV_current);
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001e3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a37      	ldr	r2, [pc, #220]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001e46:	6593      	str	r3, [r2, #88]	; 0x58
	}
	if (StatCountFlagsWs.DschgAs)		//count mAs
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d009      	beq.n	8001e64 <Calculate_WattSeconds+0x194>
	{
		StatCountFlagsWs.DschgAs = 0;
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <Calculate_WattSeconds+0x250>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	65da      	str	r2, [r3, #92]	; 0x5c
		StatCurrentWs.DschgAs += (Adc1Measurements.Inv_current);
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001e58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e5a:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a30      	ldr	r2, [pc, #192]	; (8001f24 <Calculate_WattSeconds+0x254>)
 8001e62:	65d3      	str	r3, [r2, #92]	; 0x5c
	}

	if (Adc1Measurements.NTC2_Inverter_mos >= StatCurrentWh.MaxTempInvMos)
 8001e64:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d308      	bcc.n	8001e82 <Calculate_WattSeconds+0x1b2>
	{
		StatCurrentWh.MaxTempInvMos = Adc1Measurements.NTC2_Inverter_mos;
 8001e70:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	4a2e      	ldr	r2, [pc, #184]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001e76:	6353      	str	r3, [r2, #52]	; 0x34
		StatCurrentWh.MaxTempInvMosCntr++;
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4a2c      	ldr	r2, [pc, #176]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001e80:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (Adc1Measurements.NTC3_Battery_mos >= StatCurrentWh.MaxTempBatMos)
 8001e82:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d308      	bcc.n	8001ea0 <Calculate_WattSeconds+0x1d0>
	{
		StatCurrentWh.MaxTempBatMos = Adc1Measurements.NTC3_Battery_mos;
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001e94:	63d3      	str	r3, [r2, #60]	; 0x3c
		StatCurrentWh.MaxTempBatMosCntr++;
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	4a24      	ldr	r2, [pc, #144]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
	}
	if (Adc1Measurements.Inv_current >= StatCurrentWh.MaxInvCurrent)
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d308      	bcc.n	8001ebe <Calculate_WattSeconds+0x1ee>
	{
		StatCurrentWh.MaxInvCurrent = Adc1Measurements.Inv_current;
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001eb2:	6453      	str	r3, [r2, #68]	; 0x44
		StatCurrentWh.MaxInvCurrentCntr++;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	3301      	adds	r3, #1
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001ebc:	6493      	str	r3, [r2, #72]	; 0x48
	}
	if (Adc1Measurements.PV_current >= StatCurrentWh.MaxPVCurrent)
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d308      	bcc.n	8001edc <Calculate_WattSeconds+0x20c>
	{
		StatCurrentWh.MaxPVCurrent = Adc1Measurements.PV_current;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
		StatCurrentWh.MaxPVCurrentCntr++;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001eda:	6513      	str	r3, [r2, #80]	; 0x50
	}
	if (Adc1Measurements.Batt_voltage >= StatCurrentWh.MaxBatVoltage)
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d308      	bcc.n	8001efa <Calculate_WattSeconds+0x22a>
	{
		StatCurrentWh.MaxBatVoltage = Adc1Measurements.Batt_voltage;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001eee:	6553      	str	r3, [r2, #84]	; 0x54
		StatCurrentWh.MaxBatVoltageCntr++;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
	}
	if (Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2bf0      	cmp	r3, #240	; 0xf0
 8001f00:	d927      	bls.n	8001f52 <Calculate_WattSeconds+0x282>
	{
		if (StatCurrentWh.MinBatVoltage <= BATT_CRITICAL_MIN_VOLTAGE)	//first launch value is "0", this 'if' is to cover that option
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	2bf0      	cmp	r3, #240	; 0xf0
 8001f08:	d814      	bhi.n	8001f34 <Calculate_WattSeconds+0x264>
		{
			StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <Calculate_WattSeconds+0x258>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001f10:	65d3      	str	r3, [r2, #92]	; 0x5c
			StatCurrentWh.MinBatVoltageCntr++;
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <Calculate_WattSeconds+0x260>)
 8001f1a:	6613      	str	r3, [r2, #96]	; 0x60
		{
			StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
			StatCurrentWh.MinBatVoltageCntr++;
		}
	}
}
 8001f1c:	e019      	b.n	8001f52 <Calculate_WattSeconds+0x282>
 8001f1e:	bf00      	nop
 8001f20:	200059c4 	.word	0x200059c4
 8001f24:	20005c98 	.word	0x20005c98
 8001f28:	200059a0 	.word	0x200059a0
 8001f2c:	d1b71759 	.word	0xd1b71759
 8001f30:	20005a34 	.word	0x20005a34
		else if (Adc1Measurements.Batt_voltage <= StatCurrentWh.MinBatVoltage)
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <Calculate_WattSeconds+0x28c>)
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <Calculate_WattSeconds+0x290>)
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d808      	bhi.n	8001f52 <Calculate_WattSeconds+0x282>
			StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <Calculate_WattSeconds+0x28c>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <Calculate_WattSeconds+0x290>)
 8001f46:	65d3      	str	r3, [r2, #92]	; 0x5c
			StatCurrentWh.MinBatVoltageCntr++;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <Calculate_WattSeconds+0x290>)
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <Calculate_WattSeconds+0x290>)
 8001f50:	6613      	str	r3, [r2, #96]	; 0x60
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	200059a0 	.word	0x200059a0
 8001f60:	20005a34 	.word	0x20005a34

08001f64 <Calculate_WattHours>:

/*function launched every hour to calculate Watt-hours watt-seconds hourly statistics */
void Calculate_WattHours(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	StatCurrentWh.Wh_BattIn=+StatCurrentWs.Ws_BattIn/SECONDS_HOUR;
 8001f68:	4bab      	ldr	r3, [pc, #684]	; (8002218 <Calculate_WattHours+0x2b4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4aab      	ldr	r2, [pc, #684]	; (800221c <Calculate_WattHours+0x2b8>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	095a      	lsrs	r2, r3, #5
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4ba8      	ldr	r3, [pc, #672]	; (8002220 <Calculate_WattHours+0x2bc>)
 8001f80:	605a      	str	r2, [r3, #4]
	StatCurrentWh.Wh_BattNoInv+=StatCurrentWs.Ws_BattNoInv/SECONDS_HOUR;
 8001f82:	4ba7      	ldr	r3, [pc, #668]	; (8002220 <Calculate_WattHours+0x2bc>)
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	4ba4      	ldr	r3, [pc, #656]	; (8002218 <Calculate_WattHours+0x2b4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4aa4      	ldr	r2, [pc, #656]	; (800221c <Calculate_WattHours+0x2b8>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	095a      	lsrs	r2, r3, #5
 8001f92:	4613      	mov	r3, r2
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	4aa0      	ldr	r2, [pc, #640]	; (8002220 <Calculate_WattHours+0x2bc>)
 8001f9e:	6093      	str	r3, [r2, #8]
	StatCurrentWh.Time_NoInv+=StatCurrentWs.Time_NoInv;
 8001fa0:	4b9f      	ldr	r3, [pc, #636]	; (8002220 <Calculate_WattHours+0x2bc>)
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	4b9c      	ldr	r3, [pc, #624]	; (8002218 <Calculate_WattHours+0x2b4>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a9d      	ldr	r2, [pc, #628]	; (8002220 <Calculate_WattHours+0x2bc>)
 8001fac:	6193      	str	r3, [r2, #24]
	StatCurrentWh.Wh_Inverter+=StatCurrentWs.Ws_Inverter/SECONDS_HOUR;
 8001fae:	4b9c      	ldr	r3, [pc, #624]	; (8002220 <Calculate_WattHours+0x2bc>)
 8001fb0:	68d9      	ldr	r1, [r3, #12]
 8001fb2:	4b99      	ldr	r3, [pc, #612]	; (8002218 <Calculate_WattHours+0x2b4>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	4a99      	ldr	r2, [pc, #612]	; (800221c <Calculate_WattHours+0x2b8>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	095a      	lsrs	r2, r3, #5
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	4a95      	ldr	r2, [pc, #596]	; (8002220 <Calculate_WattHours+0x2bc>)
 8001fca:	60d3      	str	r3, [r2, #12]
	StatCurrentWh.Wh_BattOut+=StatCurrentWs.Ws_BattOut/SECONDS_HOUR;
 8001fcc:	4b94      	ldr	r3, [pc, #592]	; (8002220 <Calculate_WattHours+0x2bc>)
 8001fce:	6919      	ldr	r1, [r3, #16]
 8001fd0:	4b91      	ldr	r3, [pc, #580]	; (8002218 <Calculate_WattHours+0x2b4>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a91      	ldr	r2, [pc, #580]	; (800221c <Calculate_WattHours+0x2b8>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	095a      	lsrs	r2, r3, #5
 8001fdc:	4613      	mov	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	4a8e      	ldr	r2, [pc, #568]	; (8002220 <Calculate_WattHours+0x2bc>)
 8001fe8:	6113      	str	r3, [r2, #16]
	StatCurrentWh.Wh_BattRecharge+=StatCurrentWs.Ws_BattRecharge/SECONDS_HOUR;
 8001fea:	4b8d      	ldr	r3, [pc, #564]	; (8002220 <Calculate_WattHours+0x2bc>)
 8001fec:	6959      	ldr	r1, [r3, #20]
 8001fee:	4b8a      	ldr	r3, [pc, #552]	; (8002218 <Calculate_WattHours+0x2b4>)
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	4a8a      	ldr	r2, [pc, #552]	; (800221c <Calculate_WattHours+0x2b8>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	095a      	lsrs	r2, r3, #5
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	4a86      	ldr	r2, [pc, #536]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002006:	6153      	str	r3, [r2, #20]
	StatCurrentWh.Chg_Ah_current+=StatCurrentWs.ChgAs/SECONDS_HOUR;
 8002008:	4b85      	ldr	r3, [pc, #532]	; (8002220 <Calculate_WattHours+0x2bc>)
 800200a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800200e:	4b82      	ldr	r3, [pc, #520]	; (8002218 <Calculate_WattHours+0x2b4>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	4a82      	ldr	r2, [pc, #520]	; (800221c <Calculate_WattHours+0x2b8>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	095a      	lsrs	r2, r3, #5
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	4a7e      	ldr	r2, [pc, #504]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (ConfigReg < CONFIG_BATT_0DELAY)	StatCurrentWh.Chg_Ah_tot_Mains+=StatCurrentWs.ChgAs/SECONDS_HOUR;
 800202a:	4b7e      	ldr	r3, [pc, #504]	; (8002224 <Calculate_WattHours+0x2c0>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b06      	cmp	r3, #6
 8002030:	d811      	bhi.n	8002056 <Calculate_WattHours+0xf2>
 8002032:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002034:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002038:	4b77      	ldr	r3, [pc, #476]	; (8002218 <Calculate_WattHours+0x2b4>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	4a77      	ldr	r2, [pc, #476]	; (800221c <Calculate_WattHours+0x2b8>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	095a      	lsrs	r2, r3, #5
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	4a74      	ldr	r2, [pc, #464]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002050:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8002054:	e044      	b.n	80020e0 <Calculate_WattHours+0x17c>
	else if (ConfigReg > CONFIG_MAINS_6DELAY && ConfigReg < CONFIG_MAINS_NOBATTDSCHG) StatCurrentWh.Chg_Ah_tot_Batt+=StatCurrentWs.ChgAs/SECONDS_HOUR;
 8002056:	4b73      	ldr	r3, [pc, #460]	; (8002224 <Calculate_WattHours+0x2c0>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b06      	cmp	r3, #6
 800205c:	d915      	bls.n	800208a <Calculate_WattHours+0x126>
 800205e:	4b71      	ldr	r3, [pc, #452]	; (8002224 <Calculate_WattHours+0x2c0>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b0d      	cmp	r3, #13
 8002064:	d811      	bhi.n	800208a <Calculate_WattHours+0x126>
 8002066:	4b6e      	ldr	r3, [pc, #440]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002068:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800206c:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <Calculate_WattHours+0x2b4>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	4a6a      	ldr	r2, [pc, #424]	; (800221c <Calculate_WattHours+0x2b8>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	095a      	lsrs	r2, r3, #5
 8002078:	4613      	mov	r3, r2
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	4a67      	ldr	r2, [pc, #412]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002084:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8002088:	e02a      	b.n	80020e0 <Calculate_WattHours+0x17c>
	else if (ConfigReg == CONFIG_MAINS_NOBATTDSCHG) StatCurrentWh.Chg_Ah_tot_Batt+=StatCurrentWs.ChgAs/SECONDS_HOUR;
 800208a:	4b66      	ldr	r3, [pc, #408]	; (8002224 <Calculate_WattHours+0x2c0>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b0e      	cmp	r3, #14
 8002090:	d111      	bne.n	80020b6 <Calculate_WattHours+0x152>
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002094:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8002098:	4b5f      	ldr	r3, [pc, #380]	; (8002218 <Calculate_WattHours+0x2b4>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a5f      	ldr	r2, [pc, #380]	; (800221c <Calculate_WattHours+0x2b8>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	095a      	lsrs	r2, r3, #5
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	4a5c      	ldr	r2, [pc, #368]	; (8002220 <Calculate_WattHours+0x2bc>)
 80020b0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 80020b4:	e014      	b.n	80020e0 <Calculate_WattHours+0x17c>
	else if (ConfigReg == 0x0f) StatCurrentWh.Chg_Ah_tot_Batt+=StatCurrentWs.ChgAs/SECONDS_HOUR;
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <Calculate_WattHours+0x2c0>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b0f      	cmp	r3, #15
 80020bc:	d110      	bne.n	80020e0 <Calculate_WattHours+0x17c>
 80020be:	4b58      	ldr	r3, [pc, #352]	; (8002220 <Calculate_WattHours+0x2bc>)
 80020c0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80020c4:	4b54      	ldr	r3, [pc, #336]	; (8002218 <Calculate_WattHours+0x2b4>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a54      	ldr	r2, [pc, #336]	; (800221c <Calculate_WattHours+0x2b8>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	095a      	lsrs	r2, r3, #5
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	4a51      	ldr	r2, [pc, #324]	; (8002220 <Calculate_WattHours+0x2bc>)
 80020dc:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	//StatCurrentWh.Chg_Ah_current=StatCurrentWh.Chg_Ah_current/1000;	//because current is stored in 0,001A
	StatCurrentWh.Dschg_Ah_current+=StatCurrentWs.DschgAs/SECONDS_HOUR;
 80020e0:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <Calculate_WattHours+0x2bc>)
 80020e2:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80020e4:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <Calculate_WattHours+0x2b4>)
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	4a4c      	ldr	r2, [pc, #304]	; (800221c <Calculate_WattHours+0x2b8>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	095a      	lsrs	r2, r3, #5
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	4a49      	ldr	r2, [pc, #292]	; (8002220 <Calculate_WattHours+0x2bc>)
 80020fc:	67d3      	str	r3, [r2, #124]	; 0x7c
	if (ConfigReg < CONFIG_BATT_0DELAY) StatCurrentWh.Dschg_Ah_tot_Mains+=StatCurrentWs.DschgAs/SECONDS_HOUR;
 80020fe:	4b49      	ldr	r3, [pc, #292]	; (8002224 <Calculate_WattHours+0x2c0>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b06      	cmp	r3, #6
 8002104:	d811      	bhi.n	800212a <Calculate_WattHours+0x1c6>
 8002106:	4b46      	ldr	r3, [pc, #280]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002108:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800210c:	4b42      	ldr	r3, [pc, #264]	; (8002218 <Calculate_WattHours+0x2b4>)
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	4a42      	ldr	r2, [pc, #264]	; (800221c <Calculate_WattHours+0x2b8>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	095a      	lsrs	r2, r3, #5
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	4a3f      	ldr	r2, [pc, #252]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002124:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
 8002128:	e044      	b.n	80021b4 <Calculate_WattHours+0x250>
	else if (ConfigReg > CONFIG_MAINS_6DELAY && ConfigReg < CONFIG_MAINS_NOBATTDSCHG)  StatCurrentWh.Dschg_Ah_tot_Batt+=StatCurrentWs.DschgAs/SECONDS_HOUR;
 800212a:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <Calculate_WattHours+0x2c0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d915      	bls.n	800215e <Calculate_WattHours+0x1fa>
 8002132:	4b3c      	ldr	r3, [pc, #240]	; (8002224 <Calculate_WattHours+0x2c0>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b0d      	cmp	r3, #13
 8002138:	d811      	bhi.n	800215e <Calculate_WattHours+0x1fa>
 800213a:	4b39      	ldr	r3, [pc, #228]	; (8002220 <Calculate_WattHours+0x2bc>)
 800213c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <Calculate_WattHours+0x2b4>)
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	4a35      	ldr	r2, [pc, #212]	; (800221c <Calculate_WattHours+0x2b8>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	095a      	lsrs	r2, r3, #5
 800214c:	4613      	mov	r3, r2
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	4a32      	ldr	r2, [pc, #200]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002158:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 800215c:	e02a      	b.n	80021b4 <Calculate_WattHours+0x250>
	else if (ConfigReg == CONFIG_MAINS_NOBATTDSCHG) StatCurrentWh.Dschg_Ah_tot_Batt+=StatCurrentWs.DschgAs/SECONDS_HOUR;
 800215e:	4b31      	ldr	r3, [pc, #196]	; (8002224 <Calculate_WattHours+0x2c0>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b0e      	cmp	r3, #14
 8002164:	d111      	bne.n	800218a <Calculate_WattHours+0x226>
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002168:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <Calculate_WattHours+0x2b4>)
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	4a2a      	ldr	r2, [pc, #168]	; (800221c <Calculate_WattHours+0x2b8>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	095a      	lsrs	r2, r3, #5
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	4a27      	ldr	r2, [pc, #156]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002184:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 8002188:	e014      	b.n	80021b4 <Calculate_WattHours+0x250>
	else if (ConfigReg == 0x0f) StatCurrentWh.Dschg_Ah_tot_Batt+=StatCurrentWs.DschgAs/SECONDS_HOUR;
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <Calculate_WattHours+0x2c0>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	d110      	bne.n	80021b4 <Calculate_WattHours+0x250>
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <Calculate_WattHours+0x2bc>)
 8002194:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8002198:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <Calculate_WattHours+0x2b4>)
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	4a1f      	ldr	r2, [pc, #124]	; (800221c <Calculate_WattHours+0x2b8>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	095a      	lsrs	r2, r3, #5
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <Calculate_WattHours+0x2bc>)
 80021b0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	//StatCurrentWh.Dschg_Ah_current=StatCurrentWh.Dschg_Ah_current/1000;	//because current is stored in 0,001A
	StatCurrentWh.Time_NightTime+=StatCurrentWs.Time_NightTime;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <Calculate_WattHours+0x2bc>)
 80021b6:	69da      	ldr	r2, [r3, #28]
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <Calculate_WattHours+0x2b4>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	4413      	add	r3, r2
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <Calculate_WattHours+0x2bc>)
 80021c0:	61d3      	str	r3, [r2, #28]
	StatCurrentWh.Time_NoBattery2Chg+=StatCurrentWs.Time_NoBattery2Chg;
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <Calculate_WattHours+0x2bc>)
 80021c4:	6a1a      	ldr	r2, [r3, #32]
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <Calculate_WattHours+0x2b4>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <Calculate_WattHours+0x2bc>)
 80021ce:	6213      	str	r3, [r2, #32]
	StatCurrentWs.ChgAs=0;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <Calculate_WattHours+0x2b4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58
	StatCurrentWs.DschgAs=0;
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <Calculate_WattHours+0x2b4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	65da      	str	r2, [r3, #92]	; 0x5c
	StatCurrentWs.Ws_BattIn=0;
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <Calculate_WattHours+0x2b4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
	StatCurrentWs.Ws_BattNoInv=0;
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <Calculate_WattHours+0x2b4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
	StatCurrentWs.Time_NoInv=0;
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <Calculate_WattHours+0x2b4>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
	StatCurrentWs.Ws_Inverter=0;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <Calculate_WattHours+0x2b4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
	StatCurrentWs.Ws_BattOut=0;
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <Calculate_WattHours+0x2b4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
	StatCurrentWs.Ws_BattRecharge=0;
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <Calculate_WattHours+0x2b4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
	StatCurrentWs.Time_NightTime=0;
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <Calculate_WattHours+0x2b4>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
	StatCurrentWs.Time_NoBattery2Chg=0;
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <Calculate_WattHours+0x2b4>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20005c98 	.word	0x20005c98
 800221c:	88888889 	.word	0x88888889
 8002220:	20005a34 	.word	0x20005a34
 8002224:	2000599c 	.word	0x2000599c

08002228 <ReadConfig>:
void ReadConfig(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
#if HW_VER > 01
	ConfigReg = HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)<<0;	//LSB, config for EECO TDR-16
 800222c:	2101      	movs	r1, #1
 800222e:	481e      	ldr	r0, [pc, #120]	; (80022a8 <ReadConfig+0x80>)
 8002230:	f004 ff1e 	bl	8007070 <HAL_GPIO_ReadPin>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <ReadConfig+0x84>)
 800223a:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)<<1;
 800223c:	2110      	movs	r1, #16
 800223e:	481c      	ldr	r0, [pc, #112]	; (80022b0 <ReadConfig+0x88>)
 8002240:	f004 ff16 	bl	8007070 <HAL_GPIO_ReadPin>
 8002244:	4603      	mov	r3, r0
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <ReadConfig+0x84>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <ReadConfig+0x84>)
 8002254:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)<<2;
 8002256:	2102      	movs	r1, #2
 8002258:	4813      	ldr	r0, [pc, #76]	; (80022a8 <ReadConfig+0x80>)
 800225a:	f004 ff09 	bl	8007070 <HAL_GPIO_ReadPin>
 800225e:	4603      	mov	r3, r0
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <ReadConfig+0x84>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4413      	add	r3, r2
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <ReadConfig+0x84>)
 800226e:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)<<3;	//MSB
 8002270:	2120      	movs	r1, #32
 8002272:	480f      	ldr	r0, [pc, #60]	; (80022b0 <ReadConfig+0x88>)
 8002274:	f004 fefc 	bl	8007070 <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <ReadConfig+0x84>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <ReadConfig+0x84>)
 8002288:	701a      	strb	r2, [r3, #0]
	ConfigReg = ~ConfigReg;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <ReadConfig+0x84>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	43db      	mvns	r3, r3
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <ReadConfig+0x84>)
 8002294:	701a      	strb	r2, [r3, #0]
	ConfigReg = ConfigReg &0x0f;
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <ReadConfig+0x84>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <ReadConfig+0x84>)
 80022a2:	701a      	strb	r2, [r3, #0]
	ConfigReg = HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)<<0;	//LSB, config for EECO 330041GS
	ConfigReg += HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)<<1;
	ConfigReg += HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)<<2;
	ConfigReg += HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)<<3;	//MSB
#endif
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	48000400 	.word	0x48000400
 80022ac:	2000599c 	.word	0x2000599c
 80022b0:	48000800 	.word	0x48000800

080022b4 <BackupPowerON>:
#if HW_VER > 01
void BackupPowerON(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
uint32_t TxSize;
	if (FlagBackupMOS) return;
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <BackupPowerON+0x50>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11b      	bne.n	80022fa <BackupPowerON+0x46>
	FlagBackupMOS = 1;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <BackupPowerON+0x50>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(BATT_BCKP_DRV_GPIO_Port, BATT_BCKP_DRV_Pin, 1);	//turn on battery backup power: mosfet ON
 80022c8:	2201      	movs	r2, #1
 80022ca:	2110      	movs	r1, #16
 80022cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d0:	f004 fee6 	bl	80070a0 <HAL_GPIO_WritePin>
    sprintf(TxBuffer, "BackupPwrON\r\n");
 80022d4:	490c      	ldr	r1, [pc, #48]	; (8002308 <BackupPowerON+0x54>)
 80022d6:	480d      	ldr	r0, [pc, #52]	; (800230c <BackupPowerON+0x58>)
 80022d8:	f00c fd96 	bl	800ee08 <siprintf>
    TxSize = strlen(TxBuffer);
 80022dc:	480b      	ldr	r0, [pc, #44]	; (800230c <BackupPowerON+0x58>)
 80022de:	f7fd ff77 	bl	80001d0 <strlen>
 80022e2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <BackupPowerON+0x58>)
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <BackupPowerON+0x5c>)
 80022ee:	f007 f9f7 	bl	80096e0 <HAL_UART_Transmit_DMA>
    osDelay(10);	//just to empty usart buffer
 80022f2:	200a      	movs	r0, #10
 80022f4:	f008 fe4b 	bl	800af8e <osDelay>
 80022f8:	e000      	b.n	80022fc <BackupPowerON+0x48>
	if (FlagBackupMOS) return;
 80022fa:	bf00      	nop
}
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000250 	.word	0x20000250
 8002308:	08013658 	.word	0x08013658
 800230c:	20005dc4 	.word	0x20005dc4
 8002310:	20005bec 	.word	0x20005bec

08002314 <BackupPowerOFF>:
void BackupPowerOFF(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
uint32_t TxSize;
	if (!FlagBackupMOS) return;
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <BackupPowerOFF+0x50>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01b      	beq.n	800235a <BackupPowerOFF+0x46>
    FlagBackupMOS = 0;
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <BackupPowerOFF+0x50>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(BATT_BCKP_DRV_GPIO_Port, BATT_BCKP_DRV_Pin, 0);	//turn off battery backup power: mosfet ON
 8002328:	2200      	movs	r2, #0
 800232a:	2110      	movs	r1, #16
 800232c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002330:	f004 feb6 	bl	80070a0 <HAL_GPIO_WritePin>
    sprintf(TxBuffer, "*** BackupPwrOFF ***\r\n");
 8002334:	490c      	ldr	r1, [pc, #48]	; (8002368 <BackupPowerOFF+0x54>)
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <BackupPowerOFF+0x58>)
 8002338:	f00c fd66 	bl	800ee08 <siprintf>
	TxSize = strlen(TxBuffer);
 800233c:	480b      	ldr	r0, [pc, #44]	; (800236c <BackupPowerOFF+0x58>)
 800233e:	f7fd ff47 	bl	80001d0 <strlen>
 8002342:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <BackupPowerOFF+0x58>)
 800234c:	4808      	ldr	r0, [pc, #32]	; (8002370 <BackupPowerOFF+0x5c>)
 800234e:	f007 f9c7 	bl	80096e0 <HAL_UART_Transmit_DMA>
	osDelay(100);
 8002352:	2064      	movs	r0, #100	; 0x64
 8002354:	f008 fe1b 	bl	800af8e <osDelay>
 8002358:	e000      	b.n	800235c <BackupPowerOFF+0x48>
	if (!FlagBackupMOS) return;
 800235a:	bf00      	nop
}
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000250 	.word	0x20000250
 8002368:	08013668 	.word	0x08013668
 800236c:	20005dc4 	.word	0x20005dc4
 8002370:	20005bec 	.word	0x20005bec

08002374 <ExtOut_InvResetStart>:
#endif
//generate signal to inform other controllers: "INV reset procedure is in progress"
void ExtOut_InvResetStart(void)
{
 8002374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002376:	b099      	sub	sp, #100	; 0x64
 8002378:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM16(htim16, TIM_CHANNEL_1, 200);		//500 ->50% @ 4kHz, 50 @ 33khz, 100 @ 16khz, 200 @ 8khz
 800237a:	4e18      	ldr	r6, [pc, #96]	; (80023dc <ExtOut_InvResetStart+0x68>)
 800237c:	23c8      	movs	r3, #200	; 0xc8
 800237e:	9310      	str	r3, [sp, #64]	; 0x40
 8002380:	2300      	movs	r3, #0
 8002382:	930f      	str	r3, [sp, #60]	; 0x3c
 8002384:	466d      	mov	r5, sp
 8002386:	f106 0410 	add.w	r4, r6, #16
 800238a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800238c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800238e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002396:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800239a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800239e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80023a2:	f7ff f9bb 	bl	800171c <setPWM_TIM16>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80023a6:	2100      	movs	r1, #0
 80023a8:	480c      	ldr	r0, [pc, #48]	; (80023dc <ExtOut_InvResetStart+0x68>)
 80023aa:	f006 f985 	bl	80086b8 <HAL_TIM_PWM_Start>
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = EXT_I_Pin;
 80023bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//prevent excessive voltage on EXT_I by pulldown
 80023c6:	2302      	movs	r3, #2
 80023c8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <ExtOut_InvResetStart+0x6c>)
 80023d0:	f004 fcd4 	bl	8006d7c <HAL_GPIO_Init>
}
 80023d4:	bf00      	nop
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023dc:	200062f8 	.word	0x200062f8
 80023e0:	48000400 	.word	0x48000400

080023e4 <ExtOut_InvResetStop>:

void ExtOut_InvResetStop(void)
{
 80023e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e6:	b099      	sub	sp, #100	; 0x64
 80023e8:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM16(htim16, TIM_CHANNEL_1, 0);		//0% @ 4kHz
 80023ea:	4e18      	ldr	r6, [pc, #96]	; (800244c <ExtOut_InvResetStop+0x68>)
 80023ec:	2300      	movs	r3, #0
 80023ee:	9310      	str	r3, [sp, #64]	; 0x40
 80023f0:	2300      	movs	r3, #0
 80023f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80023f4:	466d      	mov	r5, sp
 80023f6:	f106 0410 	add.w	r4, r6, #16
 80023fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002406:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800240a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800240e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002412:	f7ff f983 	bl	800171c <setPWM_TIM16>
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8002416:	2100      	movs	r1, #0
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <ExtOut_InvResetStop+0x68>)
 800241a:	f006 fa2b 	bl	8008874 <HAL_TIM_PWM_Stop>
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = EXT_I_Pin;
 800242c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002430:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
#if HW_VER > 01
	  GPIO_InitStruct.Pull = GPIO_NOPULL;			//disable pulldown
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
	  //GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//apply pulldown - in humid environment it oftyen it sets this input without real signal coming in. for testing purposes
#else
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//prevent excessive voltage on EXT_I by pulldown
#endif
	  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4804      	ldr	r0, [pc, #16]	; (8002450 <ExtOut_InvResetStop+0x6c>)
 8002440:	f004 fc9c 	bl	8006d7c <HAL_GPIO_Init>
}
 8002444:	bf00      	nop
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244c:	200062f8 	.word	0x200062f8
 8002450:	48000400 	.word	0x48000400

08002454 <BatteryMOS_ON>:

void BatteryMOS_ON(void)
{
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	b093      	sub	sp, #76	; 0x4c
 8002458:	af12      	add	r7, sp, #72	; 0x48

	if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP)
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <BatteryMOS_ON+0x74>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b46      	cmp	r3, #70	; 0x46
 8002460:	d902      	bls.n	8002468 <BatteryMOS_ON+0x14>
	{
		BatteryMOS_OFF();
 8002462:	f000 f837 	bl	80024d4 <BatteryMOS_OFF>
 8002466:	e02b      	b.n	80024c0 <BatteryMOS_ON+0x6c>
	}
	else
	{
		if (FlagBatteryMOS) return;
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <BatteryMOS_ON+0x78>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d126      	bne.n	80024be <BatteryMOS_ON+0x6a>
		HAL_GPIO_WritePin(BAT_SWITCH_OFF_GPIO_Port, BAT_SWITCH_OFF_Pin, 0);	//disable powerMosfet pulldown
 8002470:	2200      	movs	r2, #0
 8002472:	2140      	movs	r1, #64	; 0x40
 8002474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002478:	f004 fe12 	bl	80070a0 <HAL_GPIO_WritePin>
		setPWM_TIM2(htim2, TIM_CHANNEL_1, 254, 500);		//500->50% @ 4kHz
 800247c:	4e14      	ldr	r6, [pc, #80]	; (80024d0 <BatteryMOS_ON+0x7c>)
 800247e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002482:	9311      	str	r3, [sp, #68]	; 0x44
 8002484:	23fe      	movs	r3, #254	; 0xfe
 8002486:	9310      	str	r3, [sp, #64]	; 0x40
 8002488:	2300      	movs	r3, #0
 800248a:	930f      	str	r3, [sp, #60]	; 0x3c
 800248c:	466d      	mov	r5, sp
 800248e:	f106 0410 	add.w	r4, r6, #16
 8002492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80024a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80024a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80024aa:	f7ff f911 	bl	80016d0 <setPWM_TIM2>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80024ae:	2100      	movs	r1, #0
 80024b0:	4807      	ldr	r0, [pc, #28]	; (80024d0 <BatteryMOS_ON+0x7c>)
 80024b2:	f006 f901 	bl	80086b8 <HAL_TIM_PWM_Start>
		FlagBatteryMOS = 1;
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <BatteryMOS_ON+0x78>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e000      	b.n	80024c0 <BatteryMOS_ON+0x6c>
		if (FlagBatteryMOS) return;
 80024be:	bf00      	nop
	}
}
 80024c0:	3704      	adds	r7, #4
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200059a0 	.word	0x200059a0
 80024cc:	20000248 	.word	0x20000248
 80024d0:	200061ec 	.word	0x200061ec

080024d4 <BatteryMOS_OFF>:

void BatteryMOS_OFF(void)
{
 80024d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d6:	b093      	sub	sp, #76	; 0x4c
 80024d8:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM2(htim2, TIM_CHANNEL_1, 254, 0);
 80024da:	4e14      	ldr	r6, [pc, #80]	; (800252c <BatteryMOS_OFF+0x58>)
 80024dc:	2300      	movs	r3, #0
 80024de:	9311      	str	r3, [sp, #68]	; 0x44
 80024e0:	23fe      	movs	r3, #254	; 0xfe
 80024e2:	9310      	str	r3, [sp, #64]	; 0x40
 80024e4:	2300      	movs	r3, #0
 80024e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80024e8:	466d      	mov	r5, sp
 80024ea:	f106 0410 	add.w	r4, r6, #16
 80024ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80024fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002502:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002506:	f7ff f8e3 	bl	80016d0 <setPWM_TIM2>
	HAL_GPIO_WritePin(BAT_SWITCH_OFF_GPIO_Port, BAT_SWITCH_OFF_Pin, 1);	//enable powerMosfet pulldown
 800250a:	2201      	movs	r2, #1
 800250c:	2140      	movs	r1, #64	; 0x40
 800250e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002512:	f004 fdc5 	bl	80070a0 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002516:	2100      	movs	r1, #0
 8002518:	4804      	ldr	r0, [pc, #16]	; (800252c <BatteryMOS_OFF+0x58>)
 800251a:	f006 f9ab 	bl	8008874 <HAL_TIM_PWM_Stop>
	FlagBatteryMOS = 0;
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <BatteryMOS_OFF+0x5c>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	3704      	adds	r7, #4
 8002528:	46bd      	mov	sp, r7
 800252a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252c:	200061ec 	.word	0x200061ec
 8002530:	20000248 	.word	0x20000248

08002534 <InverterMOS_ON>:

void InverterMOS_ON(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <InverterMOS_ON+0x28>)
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	2b46      	cmp	r3, #70	; 0x46
 800253e:	d902      	bls.n	8002546 <InverterMOS_ON+0x12>
	{
		InverterMOS_OFF();
 8002540:	f000 f810 	bl	8002564 <InverterMOS_OFF>
	else
	{
		HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 0);	//disable powerMosfet pulldown
		FlagInverterMOS = 1;
	}
}
 8002544:	e008      	b.n	8002558 <InverterMOS_ON+0x24>
		HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 0);	//disable powerMosfet pulldown
 8002546:	2200      	movs	r2, #0
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254e:	f004 fda7 	bl	80070a0 <HAL_GPIO_WritePin>
		FlagInverterMOS = 1;
 8002552:	4b03      	ldr	r3, [pc, #12]	; (8002560 <InverterMOS_ON+0x2c>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200059a0 	.word	0x200059a0
 8002560:	2000024c 	.word	0x2000024c

08002564 <InverterMOS_OFF>:

void InverterMOS_OFF(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 1);	//enable powerMosfet pulldown
 8002568:	2201      	movs	r2, #1
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002570:	f004 fd96 	bl	80070a0 <HAL_GPIO_WritePin>
	FlagInverterMOS = 0;
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <InverterMOS_OFF+0x1c>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	2000024c 	.word	0x2000024c
 8002584:	00000000 	.word	0x00000000

08002588 <ConvertNTCvalue>:

uint32_t ConvertNTCvalue(uint32_t RawReading)
{
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
double i, y;
uint32_t t;
	      i = (double) RawReading;	//
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7fd ffb7 	bl	8000504 <__aeabi_ui2d>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	      //y = -3*pow(10,-15)*pow(i,5) + 3*pow(10,-11)*pow(i,4)-pow(10,-7)*pow(i,3)+0.0002*pow(i,2)-0.2204*i+138.71;
	      y = -7*pow(10,-9)*pow(i,3) + 5*pow(10,-5)*pow(i,2)-0.1154*i+123.68;
 800259e:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8002640 <ConvertNTCvalue+0xb8>
 80025a2:	ed97 0b06 	vldr	d0, [r7, #24]
 80025a6:	f010 f863 	bl	8012670 <pow>
 80025aa:	ec51 0b10 	vmov	r0, r1, d0
 80025ae:	a328      	add	r3, pc, #160	; (adr r3, 8002650 <ConvertNTCvalue+0xc8>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	f7fe f820 	bl	80005f8 <__aeabi_dmul>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4614      	mov	r4, r2
 80025be:	461d      	mov	r5, r3
 80025c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002648 <ConvertNTCvalue+0xc0>
 80025c4:	ed97 0b06 	vldr	d0, [r7, #24]
 80025c8:	f010 f852 	bl	8012670 <pow>
 80025cc:	ec51 0b10 	vmov	r0, r1, d0
 80025d0:	a321      	add	r3, pc, #132	; (adr r3, 8002658 <ConvertNTCvalue+0xd0>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fe f80f 	bl	80005f8 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fd fe53 	bl	800028c <__adddf3>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4614      	mov	r4, r2
 80025ec:	461d      	mov	r5, r3
 80025ee:	a31c      	add	r3, pc, #112	; (adr r3, 8002660 <ConvertNTCvalue+0xd8>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025f8:	f7fd fffe 	bl	80005f8 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4620      	mov	r0, r4
 8002602:	4629      	mov	r1, r5
 8002604:	f7fd fe40 	bl	8000288 <__aeabi_dsub>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	a315      	add	r3, pc, #84	; (adr r3, 8002668 <ConvertNTCvalue+0xe0>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd fe39 	bl	800028c <__adddf3>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	      t = (uint32_t) y;
 8002622:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002626:	f7fe fabf 	bl	8000ba8 <__aeabi_d2uiz>
 800262a:	4603      	mov	r3, r0
 800262c:	60fb      	str	r3, [r7, #12]
	      t = (t - 13);				// some offset removal
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3b0d      	subs	r3, #13
 8002632:	60fb      	str	r3, [r7, #12]
	      return t;	//result in *C
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bdb0      	pop	{r4, r5, r7, pc}
 800263e:	bf00      	nop
 8002640:	00000000 	.word	0x00000000
 8002644:	40080000 	.word	0x40080000
 8002648:	00000000 	.word	0x00000000
 800264c:	40000000 	.word	0x40000000
 8002650:	d643f785 	.word	0xd643f785
 8002654:	be3e1094 	.word	0xbe3e1094
 8002658:	eb1c432d 	.word	0xeb1c432d
 800265c:	3f0a36e2 	.word	0x3f0a36e2
 8002660:	b9f559b4 	.word	0xb9f559b4
 8002664:	3fbd8ada 	.word	0x3fbd8ada
 8002668:	1eb851ec 	.word	0x1eb851ec
 800266c:	405eeb85 	.word	0x405eeb85

08002670 <ConvertVValue>:

uint32_t ConvertVValue(uint32_t RawReading)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    double i;
    i = (((float)RawReading))*100/4095;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002682:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002720 <ConvertVValue+0xb0>
 8002686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800268a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002724 <ConvertVValue+0xb4>
 800268e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002692:	ee16 0a90 	vmov	r0, s13
 8002696:	f7fd ff57 	bl	8000548 <__aeabi_f2d>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i*(float)3.29;					//ref voltage value
 80026a2:	a319      	add	r3, pc, #100	; (adr r3, 8002708 <ConvertVValue+0x98>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026ac:	f7fd ffa4 	bl	80005f8 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i*(float)(470+16)/(float)16; //resistor divider R1+R2/R1
 80026b8:	a315      	add	r3, pc, #84	; (adr r3, 8002710 <ConvertVValue+0xa0>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026c2:	f7fd ff99 	bl	80005f8 <__aeabi_dmul>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <ConvertVValue+0xb8>)
 80026d4:	f7fe f8ba 	bl	800084c <__aeabi_ddiv>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    //i *= (10.5/10.0)/10;					//coefficient due to tolerances, //without adc internal calibration
    i *= (10.0/10.0)/10;					//coefficient due to tolerances, //witht adc internal calibration
 80026e0:	a30d      	add	r3, pc, #52	; (adr r3, 8002718 <ConvertVValue+0xa8>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026ea:	f7fd ff85 	bl	80005f8 <__aeabi_dmul>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (uint32_t) i;			//result in 100mV
 80026f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026fa:	f7fe fa55 	bl	8000ba8 <__aeabi_d2uiz>
 80026fe:	4603      	mov	r3, r0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	80000000 	.word	0x80000000
 800270c:	400a51eb 	.word	0x400a51eb
 8002710:	00000000 	.word	0x00000000
 8002714:	407e6000 	.word	0x407e6000
 8002718:	9999999a 	.word	0x9999999a
 800271c:	3fb99999 	.word	0x3fb99999
 8002720:	42c80000 	.word	0x42c80000
 8002724:	457ff000 	.word	0x457ff000
 8002728:	40300000 	.word	0x40300000
 800272c:	00000000 	.word	0x00000000

08002730 <ConvertIValue>:

uint32_t ConvertIValue(uint32_t RawReading)
{	//xls equation from 120 gain and 2mR shunt: y = 0,2954x - 36,931 -> x=10000/2954*y + 36.931
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
//without adc internal calibration
    //from test, 2,6A over ADC reading
//    i = ((2650/654)*(float)RawReading);
//    i = i + 50.1;
//with ADC internal calibration
    i = (double)(3824)*(double)RawReading;
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7fd fee3 	bl	8000504 <__aeabi_ui2d>
 800273e:	a31e      	add	r3, pc, #120	; (adr r3, 80027b8 <ConvertIValue+0x88>)
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	f7fd ff58 	bl	80005f8 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i/1000;
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <ConvertIValue+0x80>)
 8002756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800275a:	f7fe f877 	bl	800084c <__aeabi_ddiv>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i + 25;
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <ConvertIValue+0x84>)
 800276c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002770:	f7fd fd8c 	bl	800028c <__adddf3>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	e9c7 2302 	strd	r2, r3, [r7, #8]
#else
    //from XLS trendline
    i = ((10000/2510)*(float)RawReading);
    i = i + 38.1;
#endif
    if (i<0) i=0;
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002788:	f7fe f9a8 	bl	8000adc <__aeabi_dcmplt>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <ConvertIValue+0x6e>
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (uint32_t) i;	//result in 100mA
 800279e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027a2:	f7fe fa01 	bl	8000ba8 <__aeabi_d2uiz>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	408f4000 	.word	0x408f4000
 80027b4:	40390000 	.word	0x40390000
 80027b8:	00000000 	.word	0x00000000
 80027bc:	40ade000 	.word	0x40ade000

080027c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027c6:	f002 fa96 	bl	8004cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ca:	f000 f843 	bl	8002854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027ce:	f000 fa9b 	bl	8002d08 <MX_GPIO_Init>
  MX_DMA_Init();
 80027d2:	f000 fa5f 	bl	8002c94 <MX_DMA_Init>
  MX_ADC1_Init();
 80027d6:	f000 f881 	bl	80028dc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80027da:	f000 fa2b 	bl	8002c34 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80027de:	f000 f957 	bl	8002a90 <MX_TIM2_Init>
  MX_TIM16_Init();
 80027e2:	f000 f9af 	bl	8002b44 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
#if HW_VER > 01
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = EXT_I_Pin;
 80027f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	4619      	mov	r1, r3
 8002806:	480c      	ldr	r0, [pc, #48]	; (8002838 <main+0x78>)
 8002808:	f004 fab8 	bl	8006d7c <HAL_GPIO_Init>
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800280c:	f008 fae2 	bl	800add4 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <main+0x7c>)
 8002812:	2200      	movs	r2, #0
 8002814:	2101      	movs	r1, #1
 8002816:	480a      	ldr	r0, [pc, #40]	; (8002840 <main+0x80>)
 8002818:	f008 fbea 	bl	800aff0 <osTimerNew>
 800281c:	4603      	mov	r3, r0
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <main+0x84>)
 8002820:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <main+0x88>)
 8002824:	2100      	movs	r1, #0
 8002826:	4809      	ldr	r0, [pc, #36]	; (800284c <main+0x8c>)
 8002828:	f008 fb1e 	bl	800ae68 <osThreadNew>
 800282c:	4603      	mov	r3, r0
 800282e:	4a08      	ldr	r2, [pc, #32]	; (8002850 <main+0x90>)
 8002830:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002832:	f008 faf3 	bl	800ae1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002836:	e7fe      	b.n	8002836 <main+0x76>
 8002838:	48000400 	.word	0x48000400
 800283c:	08014250 	.word	0x08014250
 8002840:	08004335 	.word	0x08004335
 8002844:	20005dc0 	.word	0x20005dc0
 8002848:	0801422c 	.word	0x0801422c
 800284c:	08003bc9 	.word	0x08003bc9
 8002850:	20005998 	.word	0x20005998

08002854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b096      	sub	sp, #88	; 0x58
 8002858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	2244      	movs	r2, #68	; 0x44
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f00b fb73 	bl	800df4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002868:	463b      	mov	r3, r7
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002876:	f44f 7000 	mov.w	r0, #512	; 0x200
 800287a:	f004 fc51 	bl	8007120 <HAL_PWREx_ControlVoltageScaling>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002884:	f001 fe5a 	bl	800453c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002888:	2301      	movs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800288c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002890:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002892:	2300      	movs	r3, #0
 8002894:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fc96 	bl	80071cc <HAL_RCC_OscConfig>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <SystemClock_Config+0x56>
  {
    Error_Handler();
 80028a6:	f001 fe49 	bl	800453c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028aa:	230f      	movs	r3, #15
 80028ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80028ae:	2302      	movs	r3, #2
 80028b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028be:	463b      	mov	r3, r7
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f005 f894 	bl	80079f0 <HAL_RCC_ClockConfig>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80028ce:	f001 fe35 	bl	800453c <Error_Handler>
  }
}
 80028d2:	bf00      	nop
 80028d4:	3758      	adds	r7, #88	; 0x58
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028e2:	463b      	mov	r3, r7
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
 80028f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80028f2:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <MX_ADC1_Init+0x18c>)
 80028f4:	4a5d      	ldr	r2, [pc, #372]	; (8002a6c <MX_ADC1_Init+0x190>)
 80028f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80028f8:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <MX_ADC1_Init+0x18c>)
 80028fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80028fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002906:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800290c:	4b56      	ldr	r3, [pc, #344]	; (8002a68 <MX_ADC1_Init+0x18c>)
 800290e:	2201      	movs	r2, #1
 8002910:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002912:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002914:	2204      	movs	r2, #4
 8002916:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002918:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <MX_ADC1_Init+0x18c>)
 800291a:	2200      	movs	r2, #0
 800291c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800291e:	4b52      	ldr	r3, [pc, #328]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002920:	2200      	movs	r2, #0
 8002922:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8002924:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002926:	2208      	movs	r2, #8
 8002928:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800292a:	4b4f      	ldr	r3, [pc, #316]	; (8002a68 <MX_ADC1_Init+0x18c>)
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002932:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002934:	2200      	movs	r2, #0
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <MX_ADC1_Init+0x18c>)
 800293a:	2200      	movs	r2, #0
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002946:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002948:	2200      	movs	r2, #0
 800294a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800294c:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <MX_ADC1_Init+0x18c>)
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002954:	4844      	ldr	r0, [pc, #272]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002956:	f002 fbf5 	bl	8005144 <HAL_ADC_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002960:	f001 fdec 	bl	800453c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002964:	4b42      	ldr	r3, [pc, #264]	; (8002a70 <MX_ADC1_Init+0x194>)
 8002966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002968:	2306      	movs	r3, #6
 800296a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800296c:	2301      	movs	r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002970:	237f      	movs	r3, #127	; 0x7f
 8002972:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002974:	2304      	movs	r3, #4
 8002976:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800297c:	463b      	mov	r3, r7
 800297e:	4619      	mov	r1, r3
 8002980:	4839      	ldr	r0, [pc, #228]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002982:	f002 fe2d 	bl	80055e0 <HAL_ADC_ConfigChannel>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800298c:	f001 fdd6 	bl	800453c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002990:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <MX_ADC1_Init+0x198>)
 8002992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002994:	230c      	movs	r3, #12
 8002996:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002998:	463b      	mov	r3, r7
 800299a:	4619      	mov	r1, r3
 800299c:	4832      	ldr	r0, [pc, #200]	; (8002a68 <MX_ADC1_Init+0x18c>)
 800299e:	f002 fe1f 	bl	80055e0 <HAL_ADC_ConfigChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80029a8:	f001 fdc8 	bl	800453c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80029ac:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <MX_ADC1_Init+0x19c>)
 80029ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80029b0:	2312      	movs	r3, #18
 80029b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029b8:	463b      	mov	r3, r7
 80029ba:	4619      	mov	r1, r3
 80029bc:	482a      	ldr	r0, [pc, #168]	; (8002a68 <MX_ADC1_Init+0x18c>)
 80029be:	f002 fe0f 	bl	80055e0 <HAL_ADC_ConfigChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80029c8:	f001 fdb8 	bl	800453c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <MX_ADC1_Init+0x1a0>)
 80029ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80029d0:	2318      	movs	r3, #24
 80029d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029d4:	463b      	mov	r3, r7
 80029d6:	4619      	mov	r1, r3
 80029d8:	4823      	ldr	r0, [pc, #140]	; (8002a68 <MX_ADC1_Init+0x18c>)
 80029da:	f002 fe01 	bl	80055e0 <HAL_ADC_ConfigChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80029e4:	f001 fdaa 	bl	800453c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <MX_ADC1_Init+0x1a4>)
 80029ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80029ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f2:	463b      	mov	r3, r7
 80029f4:	4619      	mov	r1, r3
 80029f6:	481c      	ldr	r0, [pc, #112]	; (8002a68 <MX_ADC1_Init+0x18c>)
 80029f8:	f002 fdf2 	bl	80055e0 <HAL_ADC_ConfigChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8002a02:	f001 fd9b 	bl	800453c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002a06:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <MX_ADC1_Init+0x1a8>)
 8002a08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002a0a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002a0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a10:	463b      	mov	r3, r7
 8002a12:	4619      	mov	r1, r3
 8002a14:	4814      	ldr	r0, [pc, #80]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002a16:	f002 fde3 	bl	80055e0 <HAL_ADC_ConfigChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8002a20:	f001 fd8c 	bl	800453c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <MX_ADC1_Init+0x1ac>)
 8002a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002a28:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8002a2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a2e:	463b      	mov	r3, r7
 8002a30:	4619      	mov	r1, r3
 8002a32:	480d      	ldr	r0, [pc, #52]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002a34:	f002 fdd4 	bl	80055e0 <HAL_ADC_ConfigChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8002a3e:	f001 fd7d 	bl	800453c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <MX_ADC1_Init+0x1b0>)
 8002a44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002a46:	f44f 7389 	mov.w	r3, #274	; 0x112
 8002a4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a4c:	463b      	mov	r3, r7
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_ADC1_Init+0x18c>)
 8002a52:	f002 fdc5 	bl	80055e0 <HAL_ADC_ConfigChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_ADC1_Init+0x184>
  {
    Error_Handler();
 8002a5c:	f001 fd6e 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a60:	bf00      	nop
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20005b40 	.word	0x20005b40
 8002a6c:	50040000 	.word	0x50040000
 8002a70:	04300002 	.word	0x04300002
 8002a74:	08600004 	.word	0x08600004
 8002a78:	0c900008 	.word	0x0c900008
 8002a7c:	10c00010 	.word	0x10c00010
 8002a80:	14f00020 	.word	0x14f00020
 8002a84:	19200040 	.word	0x19200040
 8002a88:	1d500080 	.word	0x1d500080
 8002a8c:	80000001 	.word	0x80000001

08002a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa2:	463b      	mov	r3, r7
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
 8002ab0:	615a      	str	r2, [r3, #20]
 8002ab2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ab4:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <MX_TIM2_Init+0xb0>)
 8002ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <MX_TIM2_Init+0xb0>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <MX_TIM2_Init+0xb0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <MX_TIM2_Init+0xb0>)
 8002aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ace:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <MX_TIM2_Init+0xb0>)
 8002ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <MX_TIM2_Init+0xb0>)
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ade:	4818      	ldr	r0, [pc, #96]	; (8002b40 <MX_TIM2_Init+0xb0>)
 8002ae0:	f005 fd92 	bl	8008608 <HAL_TIM_PWM_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002aea:	f001 fd27 	bl	800453c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	4619      	mov	r1, r3
 8002afc:	4810      	ldr	r0, [pc, #64]	; (8002b40 <MX_TIM2_Init+0xb0>)
 8002afe:	f006 fca5 	bl	800944c <HAL_TIMEx_MasterConfigSynchronization>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002b08:	f001 fd18 	bl	800453c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b0c:	2360      	movs	r3, #96	; 0x60
 8002b0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b1c:	463b      	mov	r3, r7
 8002b1e:	2200      	movs	r2, #0
 8002b20:	4619      	mov	r1, r3
 8002b22:	4807      	ldr	r0, [pc, #28]	; (8002b40 <MX_TIM2_Init+0xb0>)
 8002b24:	f006 f84e 	bl	8008bc4 <HAL_TIM_PWM_ConfigChannel>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002b2e:	f001 fd05 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b32:	4803      	ldr	r0, [pc, #12]	; (8002b40 <MX_TIM2_Init+0xb0>)
 8002b34:	f001 fe0c 	bl	8004750 <HAL_TIM_MspPostInit>

}
 8002b38:	bf00      	nop
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200061ec 	.word	0x200061ec

08002b44 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b092      	sub	sp, #72	; 0x48
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	615a      	str	r2, [r3, #20]
 8002b5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b5e:	463b      	mov	r3, r7
 8002b60:	222c      	movs	r2, #44	; 0x2c
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f00b f9f2 	bl	800df4e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002b6a:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002b6c:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <MX_TIM16_Init+0xec>)
 8002b6e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 8002b70:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 500;
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002b7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b82:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b96:	4825      	ldr	r0, [pc, #148]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002b98:	f005 fc8a 	bl	80084b0 <HAL_TIM_Base_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002ba2:	f001 fccb 	bl	800453c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002ba6:	4821      	ldr	r0, [pc, #132]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002ba8:	f005 fd2e 	bl	8008608 <HAL_TIM_PWM_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002bb2:	f001 fcc3 	bl	800453c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb6:	2360      	movs	r3, #96	; 0x60
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 254;
 8002bba:	23fe      	movs	r3, #254	; 0xfe
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4814      	ldr	r0, [pc, #80]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002bdc:	f005 fff2 	bl	8008bc4 <HAL_TIM_PWM_ConfigChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002be6:	f001 fca9 	bl	800453c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002c08:	463b      	mov	r3, r7
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4807      	ldr	r0, [pc, #28]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002c0e:	f006 fc83 	bl	8009518 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8002c18:	f001 fc90 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002c1c:	4803      	ldr	r0, [pc, #12]	; (8002c2c <MX_TIM16_Init+0xe8>)
 8002c1e:	f001 fd97 	bl	8004750 <HAL_TIM_MspPostInit>

}
 8002c22:	bf00      	nop
 8002c24:	3748      	adds	r7, #72	; 0x48
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200062f8 	.word	0x200062f8
 8002c30:	40014400 	.word	0x40014400

08002c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c38:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c3a:	4a15      	ldr	r2, [pc, #84]	; (8002c90 <MX_USART1_UART_Init+0x5c>)
 8002c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c6a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c6c:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c78:	4804      	ldr	r0, [pc, #16]	; (8002c8c <MX_USART1_UART_Init+0x58>)
 8002c7a:	f006 fce3 	bl	8009644 <HAL_UART_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8002c84:	f001 fc5a 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20005bec 	.word	0x20005bec
 8002c90:	40013800 	.word	0x40013800

08002c94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <MX_DMA_Init+0x70>)
 8002c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9e:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <MX_DMA_Init+0x70>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6493      	str	r3, [r2, #72]	; 0x48
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <MX_DMA_Init+0x70>)
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <MX_DMA_Init+0x70>)
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb6:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <MX_DMA_Init+0x70>)
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	6493      	str	r3, [r2, #72]	; 0x48
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <MX_DMA_Init+0x70>)
 8002cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2105      	movs	r1, #5
 8002cce:	200b      	movs	r0, #11
 8002cd0:	f003 fb24 	bl	800631c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002cd4:	200b      	movs	r0, #11
 8002cd6:	f003 fb3d 	bl	8006354 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2105      	movs	r1, #5
 8002cde:	2044      	movs	r0, #68	; 0x44
 8002ce0:	f003 fb1c 	bl	800631c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8002ce4:	2044      	movs	r0, #68	; 0x44
 8002ce6:	f003 fb35 	bl	8006354 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2105      	movs	r1, #5
 8002cee:	2045      	movs	r0, #69	; 0x45
 8002cf0:	f003 fb14 	bl	800631c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8002cf4:	2045      	movs	r0, #69	; 0x45
 8002cf6:	f003 fb2d 	bl	8006354 <HAL_NVIC_EnableIRQ>

}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000

08002d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	60da      	str	r2, [r3, #12]
 8002d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d1e:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d22:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d36:	4b3c      	ldr	r3, [pc, #240]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	4a3b      	ldr	r2, [pc, #236]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d52:	4a35      	ldr	r2, [pc, #212]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d5a:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <MX_GPIO_Init+0x120>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BATT_BCKP_DRV_Pin|BAT_SWITCH_OFF_Pin|INV_SWITCH_DRV_Pin|MEAS_PWR_Pin, GPIO_PIN_RESET);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d88:	f004 f98a 	bl	80070a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002d92:	4826      	ldr	r0, [pc, #152]	; (8002e2c <MX_GPIO_Init+0x124>)
 8002d94:	f004 f984 	bl	80070a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BATT_BCKP_DRV_Pin BAT_SWITCH_OFF_Pin INV_SWITCH_DRV_Pin MEAS_PWR_Pin */
  GPIO_InitStruct.Pin = BATT_BCKP_DRV_Pin|BAT_SWITCH_OFF_Pin|INV_SWITCH_DRV_Pin|MEAS_PWR_Pin;
 8002d98:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8002d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	4619      	mov	r1, r3
 8002db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db4:	f003 ffe2 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C1_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C1_Pin;
 8002db8:	2330      	movs	r3, #48	; 0x30
 8002dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4819      	ldr	r0, [pc, #100]	; (8002e30 <MX_GPIO_Init+0x128>)
 8002dcc:	f003 ffd6 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C2_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C2_Pin;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4619      	mov	r1, r3
 8002de2:	4812      	ldr	r0, [pc, #72]	; (8002e2c <MX_GPIO_Init+0x124>)
 8002de4:	f003 ffca 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_Pin EXT_I_Pin */
  GPIO_InitStruct.Pin = CD_Pin|EXT_I_Pin;
 8002de8:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002df2:	2302      	movs	r3, #2
 8002df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	f107 0314 	add.w	r3, r7, #20
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	480b      	ldr	r0, [pc, #44]	; (8002e2c <MX_GPIO_Init+0x124>)
 8002dfe:	f003 ffbd 	bl	8006d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8002e02:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4804      	ldr	r0, [pc, #16]	; (8002e2c <MX_GPIO_Init+0x124>)
 8002e1c:	f003 ffae 	bl	8006d7c <HAL_GPIO_Init>

}
 8002e20:	bf00      	nop
 8002e22:	3728      	adds	r7, #40	; 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	48000400 	.word	0x48000400
 8002e30:	48000800 	.word	0x48000800

08002e34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	// idle detection needs at least one UART clock to detect the bus is idle. So
	// in the case, that the transmission length is one full buffer length
	// and the start buffer pointer is at 0, it will be also 0 at the end of the
	// transmission. In this case the DMA rollover will increment the RxRollover
	// variable first and len will not be zero.
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {									// Check if it is an "Idle Interrupt"
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	f040 819b 	bne.w	8003182 <HAL_UART_RxCpltCallback+0x34e>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);												// clear the interrupt
 8002e4c:	4b8d      	ldr	r3, [pc, #564]	; (8003084 <HAL_UART_RxCpltCallback+0x250>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2210      	movs	r2, #16
 8002e52:	621a      	str	r2, [r3, #32]
		RxCounter++;																	// increment the Rx Counter
 8002e54:	4b8c      	ldr	r3, [pc, #560]	; (8003088 <HAL_UART_RxCpltCallback+0x254>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	4b8a      	ldr	r3, [pc, #552]	; (8003088 <HAL_UART_RxCpltCallback+0x254>)
 8002e5e:	701a      	strb	r2, [r3, #0]
//		uint8_t TxSize = 0;
		uint16_t start = RxBfrPos;														// Rx bytes start position (=last buffer position)
 8002e60:	4b8a      	ldr	r3, [pc, #552]	; (800308c <HAL_UART_RxCpltCallback+0x258>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	837b      	strh	r3, [r7, #26]
		RxBfrPos = RX_BFR_SIZE - (uint16_t)huart->hdmarx->Instance->CNDTR;				// determine actual buffer position
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	4b85      	ldr	r3, [pc, #532]	; (800308c <HAL_UART_RxCpltCallback+0x258>)
 8002e78:	801a      	strh	r2, [r3, #0]
		uint16_t len = RX_BFR_SIZE;														// init len with max. size
 8002e7a:	237f      	movs	r3, #127	; 0x7f
 8002e7c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if(RxRollover < 2)  {
 8002e7e:	4b84      	ldr	r3, [pc, #528]	; (8003090 <HAL_UART_RxCpltCallback+0x25c>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d819      	bhi.n	8002eba <HAL_UART_RxCpltCallback+0x86>
			if(RxRollover) {															// rolled over once
 8002e86:	4b82      	ldr	r3, [pc, #520]	; (8003090 <HAL_UART_RxCpltCallback+0x25c>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00f      	beq.n	8002eae <HAL_UART_RxCpltCallback+0x7a>
				if(RxBfrPos <= start) len = RxBfrPos + RX_BFR_SIZE - start;				// no bytes overwritten
 8002e8e:	4b7f      	ldr	r3, [pc, #508]	; (800308c <HAL_UART_RxCpltCallback+0x258>)
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	8b7a      	ldrh	r2, [r7, #26]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d307      	bcc.n	8002ea8 <HAL_UART_RxCpltCallback+0x74>
 8002e98:	4b7c      	ldr	r3, [pc, #496]	; (800308c <HAL_UART_RxCpltCallback+0x258>)
 8002e9a:	881a      	ldrh	r2, [r3, #0]
 8002e9c:	8b7b      	ldrh	r3, [r7, #26]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	337f      	adds	r3, #127	; 0x7f
 8002ea4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002ea6:	e00a      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x8a>
				else len = RX_BFR_SIZE + 1;												// bytes overwritten error
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002eac:	e007      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x8a>
			} else {
				len = RxBfrPos - start;													// no bytes overwritten
 8002eae:	4b77      	ldr	r3, [pc, #476]	; (800308c <HAL_UART_RxCpltCallback+0x258>)
 8002eb0:	881a      	ldrh	r2, [r3, #0]
 8002eb2:	8b7b      	ldrh	r3, [r7, #26]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002eb8:	e001      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x8a>
			}
		} else {
			len = RX_BFR_SIZE + 2;														// dual rollover error
 8002eba:	2381      	movs	r3, #129	; 0x81
 8002ebc:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if(len && (len <= RX_BFR_SIZE)) {
 8002ebe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 813c 	beq.w	800313e <HAL_UART_RxCpltCallback+0x30a>
 8002ec6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8002eca:	f200 8138 	bhi.w	800313e <HAL_UART_RxCpltCallback+0x30a>
//			TxSize = strlen(TxBuffer);
			// add received bytes to TxBuffer
//			uint8_t i;
//			for(i = 0; i < len; i++) *(TxBuffer + TxSize + i) = *(RxBuffer + ((start + i) % RX_BFR_SIZE));
//			TxSize += i;
			if (RxBuffer[start] == 'f' || RxBuffer[start] == 'F') Flag_ShowStats = 4;	//show statistics from Flash
 8002ece:	8b7b      	ldrh	r3, [r7, #26]
 8002ed0:	4a70      	ldr	r2, [pc, #448]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	2b66      	cmp	r3, #102	; 0x66
 8002ed6:	d004      	beq.n	8002ee2 <HAL_UART_RxCpltCallback+0xae>
 8002ed8:	8b7b      	ldrh	r3, [r7, #26]
 8002eda:	4a6e      	ldr	r2, [pc, #440]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002edc:	5cd3      	ldrb	r3, [r2, r3]
 8002ede:	2b46      	cmp	r3, #70	; 0x46
 8002ee0:	d102      	bne.n	8002ee8 <HAL_UART_RxCpltCallback+0xb4>
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_UART_RxCpltCallback+0x264>)
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'c' || RxBuffer[start] == 'C') Flag_ShowStats = 5;	//show current statistics
 8002ee8:	8b7b      	ldrh	r3, [r7, #26]
 8002eea:	4a6a      	ldr	r2, [pc, #424]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	2b63      	cmp	r3, #99	; 0x63
 8002ef0:	d004      	beq.n	8002efc <HAL_UART_RxCpltCallback+0xc8>
 8002ef2:	8b7b      	ldrh	r3, [r7, #26]
 8002ef4:	4a67      	ldr	r2, [pc, #412]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002ef6:	5cd3      	ldrb	r3, [r2, r3]
 8002ef8:	2b43      	cmp	r3, #67	; 0x43
 8002efa:	d102      	bne.n	8002f02 <HAL_UART_RxCpltCallback+0xce>
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_UART_RxCpltCallback+0x264>)
 8002efe:	2205      	movs	r2, #5
 8002f00:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'w' || RxBuffer[start] == 'W') Flag_ShowStats = 3;	//show WattHours statistics
 8002f02:	8b7b      	ldrh	r3, [r7, #26]
 8002f04:	4a63      	ldr	r2, [pc, #396]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	2b77      	cmp	r3, #119	; 0x77
 8002f0a:	d004      	beq.n	8002f16 <HAL_UART_RxCpltCallback+0xe2>
 8002f0c:	8b7b      	ldrh	r3, [r7, #26]
 8002f0e:	4a61      	ldr	r2, [pc, #388]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	2b57      	cmp	r3, #87	; 0x57
 8002f14:	d102      	bne.n	8002f1c <HAL_UART_RxCpltCallback+0xe8>
 8002f16:	4b60      	ldr	r3, [pc, #384]	; (8003098 <HAL_UART_RxCpltCallback+0x264>)
 8002f18:	2203      	movs	r2, #3
 8002f1a:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'e' || RxBuffer[start] == 'E')						//erase statistics in flash - only newest
 8002f1c:	8b7b      	ldrh	r3, [r7, #26]
 8002f1e:	4a5d      	ldr	r2, [pc, #372]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002f20:	5cd3      	ldrb	r3, [r2, r3]
 8002f22:	2b65      	cmp	r3, #101	; 0x65
 8002f24:	d004      	beq.n	8002f30 <HAL_UART_RxCpltCallback+0xfc>
 8002f26:	8b7b      	ldrh	r3, [r7, #26]
 8002f28:	4a5a      	ldr	r2, [pc, #360]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002f2a:	5cd3      	ldrb	r3, [r2, r3]
 8002f2c:	2b45      	cmp	r3, #69	; 0x45
 8002f2e:	d11e      	bne.n	8002f6e <HAL_UART_RxCpltCallback+0x13a>
			{
				uint32_t i, temp;
				temp = StatCurrentWh.FlashPageCounter;
 8002f30:	4b5a      	ldr	r3, [pc, #360]	; (800309c <HAL_UART_RxCpltCallback+0x268>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	617b      	str	r3, [r7, #20]
				for(i = 0; i < sizeof(Stat_Flash); i++)		//clear statistics that will be stored in flash at top of the hour
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	e00c      	b.n	8002f56 <HAL_UART_RxCpltCallback+0x122>
				{
					((uint8_t *) &StatCurrentWh)[i] = 0;
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	4a57      	ldr	r2, [pc, #348]	; (800309c <HAL_UART_RxCpltCallback+0x268>)
 8002f40:	4413      	add	r3, r2
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
					((uint8_t *) &Stat_Flash)[i] = 0;
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	4a55      	ldr	r2, [pc, #340]	; (80030a0 <HAL_UART_RxCpltCallback+0x26c>)
 8002f4a:	4413      	add	r3, r2
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
				for(i = 0; i < sizeof(Stat_Flash); i++)		//clear statistics that will be stored in flash at top of the hour
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	3301      	adds	r3, #1
 8002f54:	623b      	str	r3, [r7, #32]
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	2bbf      	cmp	r3, #191	; 0xbf
 8002f5a:	d9ef      	bls.n	8002f3c <HAL_UART_RxCpltCallback+0x108>
				}
				StatCurrentWh.FlashPageCounter = temp;
 8002f5c:	4a4f      	ldr	r2, [pc, #316]	; (800309c <HAL_UART_RxCpltCallback+0x268>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	6013      	str	r3, [r2, #0]
				Stat_Flash.FlashPageCounter = temp;
 8002f62:	4a4f      	ldr	r2, [pc, #316]	; (80030a0 <HAL_UART_RxCpltCallback+0x26c>)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	6013      	str	r3, [r2, #0]
				Flag_ShowStats = 4;
 8002f68:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <HAL_UART_RxCpltCallback+0x264>)
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'd' || RxBuffer[start] == 'D')						//delete current and historical statistics stored in flash
 8002f6e:	8b7b      	ldrh	r3, [r7, #26]
 8002f70:	4a48      	ldr	r2, [pc, #288]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002f72:	5cd3      	ldrb	r3, [r2, r3]
 8002f74:	2b64      	cmp	r3, #100	; 0x64
 8002f76:	d004      	beq.n	8002f82 <HAL_UART_RxCpltCallback+0x14e>
 8002f78:	8b7b      	ldrh	r3, [r7, #26]
 8002f7a:	4a46      	ldr	r2, [pc, #280]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	2b44      	cmp	r3, #68	; 0x44
 8002f80:	d104      	bne.n	8002f8c <HAL_UART_RxCpltCallback+0x158>
			{
				DeleteStatistics2FLASH();
 8002f82:	f7fe fe49 	bl	8001c18 <DeleteStatistics2FLASH>
				Flag_ShowStats = 4;
 8002f86:	4b44      	ldr	r3, [pc, #272]	; (8003098 <HAL_UART_RxCpltCallback+0x264>)
 8002f88:	2204      	movs	r2, #4
 8002f8a:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'p' || RxBuffer[start] == 'P')						//show calibration data
 8002f8c:	8b7b      	ldrh	r3, [r7, #26]
 8002f8e:	4a41      	ldr	r2, [pc, #260]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002f90:	5cd3      	ldrb	r3, [r2, r3]
 8002f92:	2b70      	cmp	r3, #112	; 0x70
 8002f94:	d004      	beq.n	8002fa0 <HAL_UART_RxCpltCallback+0x16c>
 8002f96:	8b7b      	ldrh	r3, [r7, #26]
 8002f98:	4a3e      	ldr	r2, [pc, #248]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	2b50      	cmp	r3, #80	; 0x50
 8002f9e:	d102      	bne.n	8002fa6 <HAL_UART_RxCpltCallback+0x172>
			{
				Flag_ShowStats = 62;
 8002fa0:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_UART_RxCpltCallback+0x264>)
 8002fa2:	223e      	movs	r2, #62	; 0x3e
 8002fa4:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'o' || RxBuffer[start] == 'O')						//read calibration data from flash
 8002fa6:	8b7b      	ldrh	r3, [r7, #26]
 8002fa8:	4a3a      	ldr	r2, [pc, #232]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	2b6f      	cmp	r3, #111	; 0x6f
 8002fae:	d004      	beq.n	8002fba <HAL_UART_RxCpltCallback+0x186>
 8002fb0:	8b7b      	ldrh	r3, [r7, #26]
 8002fb2:	4a38      	ldr	r2, [pc, #224]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002fb4:	5cd3      	ldrb	r3, [r2, r3]
 8002fb6:	2b4f      	cmp	r3, #79	; 0x4f
 8002fb8:	d104      	bne.n	8002fc4 <HAL_UART_RxCpltCallback+0x190>
			{
				Flag_ShowStats = 62;
 8002fba:	4b37      	ldr	r3, [pc, #220]	; (8003098 <HAL_UART_RxCpltCallback+0x264>)
 8002fbc:	223e      	movs	r2, #62	; 0x3e
 8002fbe:	601a      	str	r2, [r3, #0]
				RestoreCalValuesFromFLASH();
 8002fc0:	f7fe fca8 	bl	8001914 <RestoreCalValuesFromFLASH>
			}
			if (RxBuffer[start] == 'l' || RxBuffer[start] == 'L')						//save calibration data
 8002fc4:	8b7b      	ldrh	r3, [r7, #26]
 8002fc6:	4a33      	ldr	r2, [pc, #204]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002fc8:	5cd3      	ldrb	r3, [r2, r3]
 8002fca:	2b6c      	cmp	r3, #108	; 0x6c
 8002fcc:	d004      	beq.n	8002fd8 <HAL_UART_RxCpltCallback+0x1a4>
 8002fce:	8b7b      	ldrh	r3, [r7, #26]
 8002fd0:	4a30      	ldr	r2, [pc, #192]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	2b4c      	cmp	r3, #76	; 0x4c
 8002fd6:	d104      	bne.n	8002fe2 <HAL_UART_RxCpltCallback+0x1ae>
			{
				StoreCalData2FLASH();
 8002fd8:	f7fe fcce 	bl	8001978 <StoreCalData2FLASH>
				Flag_ShowStats = 62;
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_UART_RxCpltCallback+0x264>)
 8002fde:	223e      	movs	r2, #62	; 0x3e
 8002fe0:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'k' || RxBuffer[start] == 'K')						//save calibration data
 8002fe2:	8b7b      	ldrh	r3, [r7, #26]
 8002fe4:	4a2b      	ldr	r2, [pc, #172]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002fe6:	5cd3      	ldrb	r3, [r2, r3]
 8002fe8:	2b6b      	cmp	r3, #107	; 0x6b
 8002fea:	d004      	beq.n	8002ff6 <HAL_UART_RxCpltCallback+0x1c2>
 8002fec:	8b7b      	ldrh	r3, [r7, #26]
 8002fee:	4a29      	ldr	r2, [pc, #164]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8002ff0:	5cd3      	ldrb	r3, [r2, r3]
 8002ff2:	2b4b      	cmp	r3, #75	; 0x4b
 8002ff4:	d110      	bne.n	8003018 <HAL_UART_RxCpltCallback+0x1e4>
			{
				Flag_ShowStats = 62;
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_UART_RxCpltCallback+0x264>)
 8002ff8:	223e      	movs	r2, #62	; 0x3e
 8002ffa:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < sizeof(CalibrationValues); i++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	e007      	b.n	8003012 <HAL_UART_RxCpltCallback+0x1de>
				{
					((uint8_t *) &CalibrationValues)[i] = 0;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4a27      	ldr	r2, [pc, #156]	; (80030a4 <HAL_UART_RxCpltCallback+0x270>)
 8003006:	4413      	add	r3, r2
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < sizeof(CalibrationValues); i++)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3301      	adds	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2b27      	cmp	r3, #39	; 0x27
 8003016:	d9f4      	bls.n	8003002 <HAL_UART_RxCpltCallback+0x1ce>
				}
			}
			if (RxBuffer[start] == 'B' || RxBuffer[start] == 'b')						//clear BlankTime
 8003018:	8b7b      	ldrh	r3, [r7, #26]
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 800301c:	5cd3      	ldrb	r3, [r2, r3]
 800301e:	2b42      	cmp	r3, #66	; 0x42
 8003020:	d004      	beq.n	800302c <HAL_UART_RxCpltCallback+0x1f8>
 8003022:	8b7b      	ldrh	r3, [r7, #26]
 8003024:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8003026:	5cd3      	ldrb	r3, [r2, r3]
 8003028:	2b62      	cmp	r3, #98	; 0x62
 800302a:	d102      	bne.n	8003032 <HAL_UART_RxCpltCallback+0x1fe>
			{
				BlankingTimeToResetInv = 0;
 800302c:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <HAL_UART_RxCpltCallback+0x274>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 't' || RxBuffer[start] == 'T')						//clear time2resetInv
 8003032:	8b7b      	ldrh	r3, [r7, #26]
 8003034:	4a17      	ldr	r2, [pc, #92]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8003036:	5cd3      	ldrb	r3, [r2, r3]
 8003038:	2b74      	cmp	r3, #116	; 0x74
 800303a:	d004      	beq.n	8003046 <HAL_UART_RxCpltCallback+0x212>
 800303c:	8b7b      	ldrh	r3, [r7, #26]
 800303e:	4a15      	ldr	r2, [pc, #84]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	2b54      	cmp	r3, #84	; 0x54
 8003044:	d102      	bne.n	800304c <HAL_UART_RxCpltCallback+0x218>
			{
				TimeToResetInv = 0;
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_UART_RxCpltCallback+0x278>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == '0')													//calibrate inverter "0" current
 800304c:	8b7b      	ldrh	r3, [r7, #26]
 800304e:	4a11      	ldr	r2, [pc, #68]	; (8003094 <HAL_UART_RxCpltCallback+0x260>)
 8003050:	5cd3      	ldrb	r3, [r2, r3]
 8003052:	2b30      	cmp	r3, #48	; 0x30
 8003054:	d139      	bne.n	80030ca <HAL_UART_RxCpltCallback+0x296>
			{
				Flag_ShowStats = 62;
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_UART_RxCpltCallback+0x264>)
 8003058:	223e      	movs	r2, #62	; 0x3e
 800305a:	601a      	str	r2, [r3, #0]
				uint32_t temp;
				temp = 	ConvertIValue(Adc1RawReadings.Inv_current);
 800305c:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_UART_RxCpltCallback+0x27c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fb65 	bl	8002730 <ConvertIValue>
 8003066:	6138      	str	r0, [r7, #16]
				if (temp < 500)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800306e:	d225      	bcs.n	80030bc <HAL_UART_RxCpltCallback+0x288>
				{
					CalibrationValues.Inv_current_off = (int)temp;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <HAL_UART_RxCpltCallback+0x270>)
 8003074:	6053      	str	r3, [r2, #4]
					sprintf(TxBuffer, "\r\nInverter current offset: %i\r\n",( int)temp);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	461a      	mov	r2, r3
 800307a:	490e      	ldr	r1, [pc, #56]	; (80030b4 <HAL_UART_RxCpltCallback+0x280>)
 800307c:	480e      	ldr	r0, [pc, #56]	; (80030b8 <HAL_UART_RxCpltCallback+0x284>)
 800307e:	f00b fec3 	bl	800ee08 <siprintf>
 8003082:	e022      	b.n	80030ca <HAL_UART_RxCpltCallback+0x296>
 8003084:	20005bec 	.word	0x20005bec
 8003088:	2000023d 	.word	0x2000023d
 800308c:	2000023e 	.word	0x2000023e
 8003090:	2000023c 	.word	0x2000023c
 8003094:	20005d40 	.word	0x20005d40
 8003098:	20000264 	.word	0x20000264
 800309c:	20005a34 	.word	0x20005a34
 80030a0:	20006238 	.word	0x20006238
 80030a4:	20005c70 	.word	0x20005c70
 80030a8:	20000014 	.word	0x20000014
 80030ac:	20000010 	.word	0x20000010
 80030b0:	200061cc 	.word	0x200061cc
 80030b4:	08013680 	.word	0x08013680
 80030b8:	20005dc4 	.word	0x20005dc4
				}
				else
				{
					sprintf(TxBuffer, "\r\nInverter Zero current too high: %i\r\n",( int)Adc1Measurements.Inv_current);
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_UART_RxCpltCallback+0x364>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4936      	ldr	r1, [pc, #216]	; (800319c <HAL_UART_RxCpltCallback+0x368>)
 80030c4:	4836      	ldr	r0, [pc, #216]	; (80031a0 <HAL_UART_RxCpltCallback+0x36c>)
 80030c6:	f00b fe9f 	bl	800ee08 <siprintf>
				}
			}
			if (RxBuffer[start] == '1')													//calibrate PV "0" current
 80030ca:	8b7b      	ldrh	r3, [r7, #26]
 80030cc:	4a35      	ldr	r2, [pc, #212]	; (80031a4 <HAL_UART_RxCpltCallback+0x370>)
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	2b31      	cmp	r3, #49	; 0x31
 80030d2:	d11d      	bne.n	8003110 <HAL_UART_RxCpltCallback+0x2dc>
			{
				Flag_ShowStats = 62;
 80030d4:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_UART_RxCpltCallback+0x374>)
 80030d6:	223e      	movs	r2, #62	; 0x3e
 80030d8:	601a      	str	r2, [r3, #0]
				uint32_t temp;
				temp = 	ConvertIValue(Adc1RawReadings.PV_current);
 80030da:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_UART_RxCpltCallback+0x378>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fb26 	bl	8002730 <ConvertIValue>
 80030e4:	60f8      	str	r0, [r7, #12]
				if (temp < 500)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030ec:	d209      	bcs.n	8003102 <HAL_UART_RxCpltCallback+0x2ce>
				{
					CalibrationValues.PV_current_off = (int)temp;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a2f      	ldr	r2, [pc, #188]	; (80031b0 <HAL_UART_RxCpltCallback+0x37c>)
 80030f2:	6093      	str	r3, [r2, #8]
					sprintf(TxBuffer, "\r\nPV current offset: %i\r\n",( int)temp);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	492e      	ldr	r1, [pc, #184]	; (80031b4 <HAL_UART_RxCpltCallback+0x380>)
 80030fa:	4829      	ldr	r0, [pc, #164]	; (80031a0 <HAL_UART_RxCpltCallback+0x36c>)
 80030fc:	f00b fe84 	bl	800ee08 <siprintf>
 8003100:	e006      	b.n	8003110 <HAL_UART_RxCpltCallback+0x2dc>
				}
				else
				{
					sprintf(TxBuffer, "\r\nPV Zero current too high: %i\r\n",( int)Adc1Measurements.PV_current);
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <HAL_UART_RxCpltCallback+0x364>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	461a      	mov	r2, r3
 8003108:	492b      	ldr	r1, [pc, #172]	; (80031b8 <HAL_UART_RxCpltCallback+0x384>)
 800310a:	4825      	ldr	r0, [pc, #148]	; (80031a0 <HAL_UART_RxCpltCallback+0x36c>)
 800310c:	f00b fe7c 	bl	800ee08 <siprintf>
				}
			}
			if (RxBuffer[start] == 'h' || RxBuffer[start] == 'H' || RxBuffer[start] == '?')
 8003110:	8b7b      	ldrh	r3, [r7, #26]
 8003112:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <HAL_UART_RxCpltCallback+0x370>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	2b68      	cmp	r3, #104	; 0x68
 8003118:	d009      	beq.n	800312e <HAL_UART_RxCpltCallback+0x2fa>
 800311a:	8b7b      	ldrh	r3, [r7, #26]
 800311c:	4a21      	ldr	r2, [pc, #132]	; (80031a4 <HAL_UART_RxCpltCallback+0x370>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	2b48      	cmp	r3, #72	; 0x48
 8003122:	d004      	beq.n	800312e <HAL_UART_RxCpltCallback+0x2fa>
 8003124:	8b7b      	ldrh	r3, [r7, #26]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <HAL_UART_RxCpltCallback+0x370>)
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	2b3f      	cmp	r3, #63	; 0x3f
 800312c:	d124      	bne.n	8003178 <HAL_UART_RxCpltCallback+0x344>
			{
				Flag_ShowStats = 60;
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_UART_RxCpltCallback+0x374>)
 8003130:	223c      	movs	r2, #60	; 0x3c
 8003132:	601a      	str	r2, [r3, #0]
				sprintf(TxBuffer, "\r\nhelp: \r\n"
 8003134:	4921      	ldr	r1, [pc, #132]	; (80031bc <HAL_UART_RxCpltCallback+0x388>)
 8003136:	481a      	ldr	r0, [pc, #104]	; (80031a0 <HAL_UART_RxCpltCallback+0x36c>)
 8003138:	f00b fe66 	bl	800ee08 <siprintf>
			if (RxBuffer[start] == 'h' || RxBuffer[start] == 'H' || RxBuffer[start] == '?')
 800313c:	e01c      	b.n	8003178 <HAL_UART_RxCpltCallback+0x344>

		} else {
			// buffer overflow error:
//			sprintf(TxBuffer, "NAK RX BUFFER OVERFLOW ERROR %d\r\n", (len - RX_BFR_SIZE));
//			TxSize = strlen(TxBuffer);
			if(HAL_UART_GetError(&huart1)) {	//clear RX errors if occured
 800313e:	4820      	ldr	r0, [pc, #128]	; (80031c0 <HAL_UART_RxCpltCallback+0x38c>)
 8003140:	f006 ff52 	bl	8009fe8 <HAL_UART_GetError>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d017      	beq.n	800317a <HAL_UART_RxCpltCallback+0x346>
			        HAL_UART_DMAStop(&huart1);                          // STOP Uart
 800314a:	481d      	ldr	r0, [pc, #116]	; (80031c0 <HAL_UART_RxCpltCallback+0x38c>)
 800314c:	f006 fbae 	bl	80098ac <HAL_UART_DMAStop>
			        MX_USART1_UART_Init();                              // INIT Uart
 8003150:	f7ff fd70 	bl	8002c34 <MX_USART1_UART_Init>
			        HAL_UART_Receive_DMA(&huart1, RxBuffer, RX_BFR_SIZE);  // START Uart DMA
 8003154:	227f      	movs	r2, #127	; 0x7f
 8003156:	4913      	ldr	r1, [pc, #76]	; (80031a4 <HAL_UART_RxCpltCallback+0x370>)
 8003158:	4819      	ldr	r0, [pc, #100]	; (80031c0 <HAL_UART_RxCpltCallback+0x38c>)
 800315a:	f006 fb51 	bl	8009800 <HAL_UART_Receive_DMA>
			        __HAL_UART_CLEAR_IDLEFLAG(&huart1);                 // Clear Idle IT-Flag
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <HAL_UART_RxCpltCallback+0x38c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2210      	movs	r2, #16
 8003164:	621a      	str	r2, [r3, #32]
			        __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);        // Enable Idle Interrupt
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <HAL_UART_RxCpltCallback+0x38c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <HAL_UART_RxCpltCallback+0x38c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0210 	orr.w	r2, r2, #16
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e000      	b.n	800317a <HAL_UART_RxCpltCallback+0x346>
			if (RxBuffer[start] == 'h' || RxBuffer[start] == 'H' || RxBuffer[start] == '?')
 8003178:	bf00      	nop
			   }
		}

//		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);						// send a response

		RxRollover = 0;																	// reset the Rollover variable
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_UART_RxCpltCallback+0x390>)
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
	} else {
		// no idle flag? --> DMA rollover occurred
		RxRollover++;		// increment Rollover Counter
	}
}
 8003180:	e005      	b.n	800318e <HAL_UART_RxCpltCallback+0x35a>
		RxRollover++;		// increment Rollover Counter
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <HAL_UART_RxCpltCallback+0x390>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_UART_RxCpltCallback+0x390>)
 800318c:	701a      	strb	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	3728      	adds	r7, #40	; 0x28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200059a0 	.word	0x200059a0
 800319c:	080136a0 	.word	0x080136a0
 80031a0:	20005dc4 	.word	0x20005dc4
 80031a4:	20005d40 	.word	0x20005d40
 80031a8:	20000264 	.word	0x20000264
 80031ac:	200061cc 	.word	0x200061cc
 80031b0:	20005c70 	.word	0x20005c70
 80031b4:	080136c8 	.word	0x080136c8
 80031b8:	080136e4 	.word	0x080136e4
 80031bc:	08013708 	.word	0x08013708
 80031c0:	20005bec 	.word	0x20005bec
 80031c4:	2000023c 	.word	0x2000023c

080031c8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	// UART Tx Complete Callback;
	TxCounter++;
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_UART_TxCpltCallback+0x20>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <HAL_UART_TxCpltCallback+0x20>)
 80031da:	701a      	strb	r2, [r3, #0]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	20000240 	.word	0x20000240

080031ec <InverterOn_batteryAsBackup>:

void InverterOn_batteryAsBackup(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
	if (StatCurrentWh.DayDuration_current > 900)	//15 minutes in the day/after dawn
 80031f0:	4b98      	ldr	r3, [pc, #608]	; (8003454 <InverterOn_batteryAsBackup+0x268>)
 80031f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031f6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80031fa:	d911      	bls.n	8003220 <InverterOn_batteryAsBackup+0x34>
	{
		DEBUG_PRINT ("I1,");
 80031fc:	4896      	ldr	r0, [pc, #600]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 80031fe:	f7fc ffe7 	bl	80001d0 <strlen>
 8003202:	4603      	mov	r3, r0
 8003204:	4a94      	ldr	r2, [pc, #592]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003206:	4413      	add	r3, r2
 8003208:	4994      	ldr	r1, [pc, #592]	; (800345c <InverterOn_batteryAsBackup+0x270>)
 800320a:	4618      	mov	r0, r3
 800320c:	f00b fdfc 	bl	800ee08 <siprintf>
		StatCurrentWs.Time_DuskTime = 0;		//clear "after dusk timer" - it's day
 8003210:	4b93      	ldr	r3, [pc, #588]	; (8003460 <InverterOn_batteryAsBackup+0x274>)
 8003212:	2200      	movs	r2, #0
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
		StatCountFlagsWs.ChgStatSaved = 0;		//enable saving daytime stats at dusk
 8003216:	4b93      	ldr	r3, [pc, #588]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003218:	2200      	movs	r2, #0
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
#if HW_VER > 01
		BackupPowerON();						//now it's day for sure, enable backup battery for evening/dusk
 800321c:	f7ff f84a 	bl	80022b4 <BackupPowerON>
#endif
	}
	StatCountFlagsWs.EmptyBattStatsSaved = 0;	//clear flag to enable saving stats at the end of discharge at night
 8003220:	4b90      	ldr	r3, [pc, #576]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003222:	2200      	movs	r2, #0
 8003224:	64da      	str	r2, [r3, #76]	; 0x4c
	StatCountFlagsWs.StatsUpdated_pwrOff = 0;
 8003226:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003228:	2200      	movs	r2, #0
 800322a:	651a      	str	r2, [r3, #80]	; 0x50
					//charge battery slightly?
					if (((Adc1Measurements.Batt_voltage) < (BATT_MIN_VOLTAGE-BATT_VOLTAGE_MINHYSTERESIS+VoltHysteresisDsChg))  &&
 800322c:	4b8e      	ldr	r3, [pc, #568]	; (8003468 <InverterOn_batteryAsBackup+0x27c>)
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	4b8e      	ldr	r3, [pc, #568]	; (800346c <InverterOn_batteryAsBackup+0x280>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f203 134b 	addw	r3, r3, #331	; 0x14b
 8003238:	429a      	cmp	r2, r3
 800323a:	d223      	bcs.n	8003284 <InverterOn_batteryAsBackup+0x98>
							((Adc1Measurements.Batt_voltage) > BATT_CRITICAL_MIN_VOLTAGE) &&
 800323c:	4b8a      	ldr	r3, [pc, #552]	; (8003468 <InverterOn_batteryAsBackup+0x27c>)
 800323e:	68db      	ldr	r3, [r3, #12]
					if (((Adc1Measurements.Batt_voltage) < (BATT_MIN_VOLTAGE-BATT_VOLTAGE_MINHYSTERESIS+VoltHysteresisDsChg))  &&
 8003240:	2bf0      	cmp	r3, #240	; 0xf0
 8003242:	d91f      	bls.n	8003284 <InverterOn_batteryAsBackup+0x98>
							StatCurrentWs.Ws_BattRecharge < TOUT_BATTRECHARGE)	//prevent too long recharging (be carefoul, cleared every hour)
 8003244:	4b86      	ldr	r3, [pc, #536]	; (8003460 <InverterOn_batteryAsBackup+0x274>)
 8003246:	691b      	ldr	r3, [r3, #16]
							((Adc1Measurements.Batt_voltage) > BATT_CRITICAL_MIN_VOLTAGE) &&
 8003248:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800324c:	d21a      	bcs.n	8003284 <InverterOn_batteryAsBackup+0x98>
					{//yes, re-charge battery
						DEBUG_PRINT ("I2,");
 800324e:	4882      	ldr	r0, [pc, #520]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003250:	f7fc ffbe 	bl	80001d0 <strlen>
 8003254:	4603      	mov	r3, r0
 8003256:	4a80      	ldr	r2, [pc, #512]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003258:	4413      	add	r3, r2
 800325a:	4985      	ldr	r1, [pc, #532]	; (8003470 <InverterOn_batteryAsBackup+0x284>)
 800325c:	4618      	mov	r0, r3
 800325e:	f00b fdd3 	bl	800ee08 <siprintf>
						BatteryMOS_ON();
 8003262:	f7ff f8f7 	bl	8002454 <BatteryMOS_ON>
						VoltHysteresisDsChg = BATT_VOLTAGE_MINHYSTERESIS;	//hysteresis for min operation batery voltage
 8003266:	4b81      	ldr	r3, [pc, #516]	; (800346c <InverterOn_batteryAsBackup+0x280>)
 8003268:	2211      	movs	r2, #17
 800326a:	601a      	str	r2, [r3, #0]
						InverterMOS_OFF();	//tbd
 800326c:	f7ff f97a 	bl	8002564 <InverterMOS_OFF>
						StatCountFlagsWs.Ws_BattRecharge=1;	//enable to count energy supplied for recharging, in 1Sectimer; will be cleared automatically
 8003270:	4b7c      	ldr	r3, [pc, #496]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003272:	2201      	movs	r2, #1
 8003274:	611a      	str	r2, [r3, #16]
						StatCountFlagsWs.Time_BattRecharge=1;	//set flag to prevent INV mos ON
 8003276:	4b7b      	ldr	r3, [pc, #492]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003278:	2201      	movs	r2, #1
 800327a:	615a      	str	r2, [r3, #20]
						StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 800327c:	4b79      	ldr	r3, [pc, #484]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 800327e:	2201      	movs	r2, #1
 8003280:	659a      	str	r2, [r3, #88]	; 0x58
 8003282:	e0e4      	b.n	800344e <InverterOn_batteryAsBackup+0x262>
					}
					else
					{//no need to recharge battery, check what else you can do
						DEBUG_PRINT ("I3,");
 8003284:	4874      	ldr	r0, [pc, #464]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003286:	f7fc ffa3 	bl	80001d0 <strlen>
 800328a:	4603      	mov	r3, r0
 800328c:	4a72      	ldr	r2, [pc, #456]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 800328e:	4413      	add	r3, r2
 8003290:	4978      	ldr	r1, [pc, #480]	; (8003474 <InverterOn_batteryAsBackup+0x288>)
 8003292:	4618      	mov	r0, r3
 8003294:	f00b fdb8 	bl	800ee08 <siprintf>
						//prevent BatMosOff when no inv operation; MosOff only once when exiting from batt recharge
						if (StatCountFlagsWs.Time_BattRecharge) BatteryMOS_OFF();
 8003298:	4b72      	ldr	r3, [pc, #456]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <InverterOn_batteryAsBackup+0xb8>
 80032a0:	f7ff f918 	bl	80024d4 <BatteryMOS_OFF>
						VoltHysteresisDsChg = 0;
 80032a4:	4b71      	ldr	r3, [pc, #452]	; (800346c <InverterOn_batteryAsBackup+0x280>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
						StatCountFlagsWs.Time_BattRecharge=0;	//reset flag to enable INV mos ON and disable counting time recharge
 80032aa:	4b6e      	ldr	r3, [pc, #440]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	615a      	str	r2, [r3, #20]

						//switch INV ON only if not battery recharge AND Inverter reset procedure isnt in progress
						if (!FlagResetInverter) InverterMOS_ON();
 80032b0:	4b71      	ldr	r3, [pc, #452]	; (8003478 <InverterOn_batteryAsBackup+0x28c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <InverterOn_batteryAsBackup+0xd0>
 80032b8:	f7ff f93c 	bl	8002534 <InverterMOS_ON>
						//is inverter working?
						if (Adc1Measurements.Inv_current > INV_CURRENT_MIN_DAY)
 80032bc:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <InverterOn_batteryAsBackup+0x27c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2bc8      	cmp	r3, #200	; 0xc8
 80032c2:	d912      	bls.n	80032ea <InverterOn_batteryAsBackup+0xfe>
						{//yes, inverter working
							DEBUG_PRINT ("I4,");
 80032c4:	4864      	ldr	r0, [pc, #400]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 80032c6:	f7fc ff83 	bl	80001d0 <strlen>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4a62      	ldr	r2, [pc, #392]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 80032ce:	4413      	add	r3, r2
 80032d0:	496a      	ldr	r1, [pc, #424]	; (800347c <InverterOn_batteryAsBackup+0x290>)
 80032d2:	4618      	mov	r0, r3
 80032d4:	f00b fd98 	bl	800ee08 <siprintf>
							StatCountFlagsWs.Ws_Inverter=1;	//inverter working, enable to count energy, in 1Sectimer
 80032d8:	4b62      	ldr	r3, [pc, #392]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 80032da:	2201      	movs	r2, #1
 80032dc:	609a      	str	r2, [r3, #8]
							BatteryMOS_OFF();		//it's day, inv working-> switch off battery mos
 80032de:	f7ff f8f9 	bl	80024d4 <BatteryMOS_OFF>
							StatCountFlagsWs.InvFault = 0;	//flag to clear invfault occurence
 80032e2:	4b60      	ldr	r3, [pc, #384]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	635a      	str	r2, [r3, #52]	; 0x34
									}//end of battery fully charged
								}//end of batt not OK to charge
							}//end of inv reset  procedure not launched
						}//end of its day, inv not working
					}//end of no need to recharge battery
}
 80032e8:	e0b1      	b.n	800344e <InverterOn_batteryAsBackup+0x262>
							DEBUG_PRINT ("I5,");
 80032ea:	485b      	ldr	r0, [pc, #364]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 80032ec:	f7fc ff70 	bl	80001d0 <strlen>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4a59      	ldr	r2, [pc, #356]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 80032f4:	4413      	add	r3, r2
 80032f6:	4962      	ldr	r1, [pc, #392]	; (8003480 <InverterOn_batteryAsBackup+0x294>)
 80032f8:	4618      	mov	r0, r3
 80032fa:	f00b fd85 	bl	800ee08 <siprintf>
							if (!StatCountFlagsWs.InvFault)
 80032fe:	4b59      	ldr	r3, [pc, #356]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	2b00      	cmp	r3, #0
 8003304:	d111      	bne.n	800332a <InverterOn_batteryAsBackup+0x13e>
								DEBUG_PRINT ("I6,");
 8003306:	4854      	ldr	r0, [pc, #336]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003308:	f7fc ff62 	bl	80001d0 <strlen>
 800330c:	4603      	mov	r3, r0
 800330e:	4a52      	ldr	r2, [pc, #328]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003310:	4413      	add	r3, r2
 8003312:	495c      	ldr	r1, [pc, #368]	; (8003484 <InverterOn_batteryAsBackup+0x298>)
 8003314:	4618      	mov	r0, r3
 8003316:	f00b fd77 	bl	800ee08 <siprintf>
									StatCurrentWh.InvFaultCntr++;
 800331a:	4b4e      	ldr	r3, [pc, #312]	; (8003454 <InverterOn_batteryAsBackup+0x268>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	3301      	adds	r3, #1
 8003320:	4a4c      	ldr	r2, [pc, #304]	; (8003454 <InverterOn_batteryAsBackup+0x268>)
 8003322:	6313      	str	r3, [r2, #48]	; 0x30
									StatCountFlagsWs.InvFault = 1;
 8003324:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003326:	2201      	movs	r2, #1
 8003328:	635a      	str	r2, [r3, #52]	; 0x34
							StatCountFlagsWs.Time_NoInv=1;	//enable to count time when inv is not working, in 1Sectimer
 800332a:	4b4e      	ldr	r3, [pc, #312]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 800332c:	2201      	movs	r2, #1
 800332e:	619a      	str	r2, [r3, #24]
							ResetInverterDay();	//try reset inv
 8003330:	f7fd ff5a 	bl	80011e8 <ResetInverterDay>
							if (!FlagResetInverter ) 			//if INV Reset procedure is not launched
 8003334:	4b50      	ldr	r3, [pc, #320]	; (8003478 <InverterOn_batteryAsBackup+0x28c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f040 8088 	bne.w	800344e <InverterOn_batteryAsBackup+0x262>
								DEBUG_PRINT ("I7,");
 800333e:	4846      	ldr	r0, [pc, #280]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003340:	f7fc ff46 	bl	80001d0 <strlen>
 8003344:	4603      	mov	r3, r0
 8003346:	4a44      	ldr	r2, [pc, #272]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003348:	4413      	add	r3, r2
 800334a:	494f      	ldr	r1, [pc, #316]	; (8003488 <InverterOn_batteryAsBackup+0x29c>)
 800334c:	4618      	mov	r0, r3
 800334e:	f00b fd5b 	bl	800ee08 <siprintf>
								if ((Adc1Measurements.Batt_voltage) < (BATT_MAX_VOLTAGE+VoltHysteresisChg)
 8003352:	4b45      	ldr	r3, [pc, #276]	; (8003468 <InverterOn_batteryAsBackup+0x27c>)
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	4b4d      	ldr	r3, [pc, #308]	; (800348c <InverterOn_batteryAsBackup+0x2a0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f203 1393 	addw	r3, r3, #403	; 0x193
 800335e:	429a      	cmp	r2, r3
 8003360:	d21c      	bcs.n	800339c <InverterOn_batteryAsBackup+0x1b0>
										&& Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <InverterOn_batteryAsBackup+0x27c>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2bf0      	cmp	r3, #240	; 0xf0
 8003368:	d918      	bls.n	800339c <InverterOn_batteryAsBackup+0x1b0>
									DEBUG_PRINT ("I8,");
 800336a:	483b      	ldr	r0, [pc, #236]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 800336c:	f7fc ff30 	bl	80001d0 <strlen>
 8003370:	4603      	mov	r3, r0
 8003372:	4a39      	ldr	r2, [pc, #228]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003374:	4413      	add	r3, r2
 8003376:	4946      	ldr	r1, [pc, #280]	; (8003490 <InverterOn_batteryAsBackup+0x2a4>)
 8003378:	4618      	mov	r0, r3
 800337a:	f00b fd45 	bl	800ee08 <siprintf>
									BatteryMOS_ON();
 800337e:	f7ff f869 	bl	8002454 <BatteryMOS_ON>
									StatCountFlagsWs.Ws_BattNoInv=1;	//enable to count energy to battery when INV isnt working, in 1Sectimer
 8003382:	4b38      	ldr	r3, [pc, #224]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003384:	2201      	movs	r2, #1
 8003386:	605a      	str	r2, [r3, #4]
									StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 800338a:	2201      	movs	r2, #1
 800338c:	659a      	str	r2, [r3, #88]	; 0x58
									VoltHysteresisChg = BATT_VOLTAGE_MAXHYSTERESIS;
 800338e:	4b3f      	ldr	r3, [pc, #252]	; (800348c <InverterOn_batteryAsBackup+0x2a0>)
 8003390:	2212      	movs	r2, #18
 8003392:	601a      	str	r2, [r3, #0]
									StatCountFlagsWs.Chg_cycle_count = 0;	//when battery charging unlock flag enabling counting dschg cycles
 8003394:	4b33      	ldr	r3, [pc, #204]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003396:	2200      	movs	r2, #0
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
 800339a:	e058      	b.n	800344e <InverterOn_batteryAsBackup+0x262>
									DEBUG_PRINT ("I9,");
 800339c:	482e      	ldr	r0, [pc, #184]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 800339e:	f7fc ff17 	bl	80001d0 <strlen>
 80033a2:	4603      	mov	r3, r0
 80033a4:	4a2c      	ldr	r2, [pc, #176]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 80033a6:	4413      	add	r3, r2
 80033a8:	493a      	ldr	r1, [pc, #232]	; (8003494 <InverterOn_batteryAsBackup+0x2a8>)
 80033aa:	4618      	mov	r0, r3
 80033ac:	f00b fd2c 	bl	800ee08 <siprintf>
									BatteryMOS_OFF();
 80033b0:	f7ff f890 	bl	80024d4 <BatteryMOS_OFF>
									StatCountFlagsWs.Time_NoBattery2Chg=1;	//enable to count time without possibility to charge battery, in 1Sectimer
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	621a      	str	r2, [r3, #32]
									VoltHysteresisChg = 0;
 80033ba:	4b34      	ldr	r3, [pc, #208]	; (800348c <InverterOn_batteryAsBackup+0x2a0>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
									if ((Adc1Measurements.Batt_voltage) > (BATT_MAX_VOLTAGE+VoltHysteresisChg))
 80033c0:	4b29      	ldr	r3, [pc, #164]	; (8003468 <InverterOn_batteryAsBackup+0x27c>)
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	4b31      	ldr	r3, [pc, #196]	; (800348c <InverterOn_batteryAsBackup+0x2a0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f203 1393 	addw	r3, r3, #403	; 0x193
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d93e      	bls.n	800344e <InverterOn_batteryAsBackup+0x262>
										DEBUG_PRINT ("I10,");
 80033d0:	4821      	ldr	r0, [pc, #132]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 80033d2:	f7fc fefd 	bl	80001d0 <strlen>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 80033da:	4413      	add	r3, r2
 80033dc:	492e      	ldr	r1, [pc, #184]	; (8003498 <InverterOn_batteryAsBackup+0x2ac>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f00b fd12 	bl	800ee08 <siprintf>
										StatCurrentWh.Chg_Ah_lastFull=StatCurrentWh.Chg_Ah_current;	//store fully chg Ah
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <InverterOn_batteryAsBackup+0x268>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ea:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <InverterOn_batteryAsBackup+0x268>)
 80033ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
										if (!StatCountFlagsWs.Chg_cycle_c2 && StatCountFlagsWs.Chg_cycle_count)
 80033f0:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d115      	bne.n	8003424 <InverterOn_batteryAsBackup+0x238>
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d011      	beq.n	8003424 <InverterOn_batteryAsBackup+0x238>
											DEBUG_PRINT ("I11,");
 8003400:	4815      	ldr	r0, [pc, #84]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003402:	f7fc fee5 	bl	80001d0 <strlen>
 8003406:	4603      	mov	r3, r0
 8003408:	4a13      	ldr	r2, [pc, #76]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 800340a:	4413      	add	r3, r2
 800340c:	4923      	ldr	r1, [pc, #140]	; (800349c <InverterOn_batteryAsBackup+0x2b0>)
 800340e:	4618      	mov	r0, r3
 8003410:	f00b fcfa 	bl	800ee08 <siprintf>
											StatCurrentWh.Chg_Volt_lastFull = Adc1Measurements.Batt_voltage;	//store lastvoltage
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <InverterOn_batteryAsBackup+0x27c>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <InverterOn_batteryAsBackup+0x268>)
 800341a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
											StatCountFlagsWs.Chg_cycle_c2 = 1;
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003420:	2201      	movs	r2, #1
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
										if (!StatCountFlagsWs.Chg_cycle_count)
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d110      	bne.n	800344e <InverterOn_batteryAsBackup+0x262>
											DEBUG_PRINT ("I12,");
 800342c:	480a      	ldr	r0, [pc, #40]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 800342e:	f7fc fecf 	bl	80001d0 <strlen>
 8003432:	4603      	mov	r3, r0
 8003434:	4a08      	ldr	r2, [pc, #32]	; (8003458 <InverterOn_batteryAsBackup+0x26c>)
 8003436:	4413      	add	r3, r2
 8003438:	4919      	ldr	r1, [pc, #100]	; (80034a0 <InverterOn_batteryAsBackup+0x2b4>)
 800343a:	4618      	mov	r0, r3
 800343c:	f00b fce4 	bl	800ee08 <siprintf>
											StatCountFlagsWs.Chg_cycle_count = 1; //if not, set flag 'fully charged' to count/set only once
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <InverterOn_batteryAsBackup+0x278>)
 8003442:	2201      	movs	r2, #1
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
											StatCurrentWh.Dschg_Ah_current=0;	//clear discharge Ah
 8003446:	4b03      	ldr	r3, [pc, #12]	; (8003454 <InverterOn_batteryAsBackup+0x268>)
 8003448:	2200      	movs	r2, #0
 800344a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800344c:	e7ff      	b.n	800344e <InverterOn_batteryAsBackup+0x262>
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20005a34 	.word	0x20005a34
 8003458:	20005dc4 	.word	0x20005dc4
 800345c:	080139b0 	.word	0x080139b0
 8003460:	20005c98 	.word	0x20005c98
 8003464:	200059c4 	.word	0x200059c4
 8003468:	200059a0 	.word	0x200059a0
 800346c:	2000025c 	.word	0x2000025c
 8003470:	080139b4 	.word	0x080139b4
 8003474:	080139b8 	.word	0x080139b8
 8003478:	200061c8 	.word	0x200061c8
 800347c:	080139bc 	.word	0x080139bc
 8003480:	080139c0 	.word	0x080139c0
 8003484:	080139c4 	.word	0x080139c4
 8003488:	080139c8 	.word	0x080139c8
 800348c:	20000258 	.word	0x20000258
 8003490:	080139cc 	.word	0x080139cc
 8003494:	080139d0 	.word	0x080139d0
 8003498:	080139d4 	.word	0x080139d4
 800349c:	080139dc 	.word	0x080139dc
 80034a0:	080139e4 	.word	0x080139e4

080034a4 <InvOn_DischBattAtDay>:

void InvOn_DischBattAtDay(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
	//switch INV ON only if  Inverter reset procedure isnt in progress
	if (!FlagResetInverter) InverterMOS_ON();
 80034a8:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <InvOn_DischBattAtDay+0x100>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <InvOn_DischBattAtDay+0x10>
 80034b0:	f7ff f840 	bl	8002534 <InverterMOS_ON>
	//is inverter working?
	if (Adc1Measurements.Inv_current > INV_CURRENT_MIN_DAY)
 80034b4:	4b3c      	ldr	r3, [pc, #240]	; (80035a8 <InvOn_DischBattAtDay+0x104>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2bc8      	cmp	r3, #200	; 0xc8
 80034ba:	d911      	bls.n	80034e0 <InvOn_DischBattAtDay+0x3c>
	{//yes, inverter working
		StatCountFlagsWs.Ws_Inverter=1;	//inverter working, enable to count energy, in 1Sectimer
 80034bc:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 80034be:	2201      	movs	r2, #1
 80034c0:	609a      	str	r2, [r3, #8]
		if (Adc1Measurements.PV_current < (INV_CURRENT_MAX/2)) BatteryMOS_ON();		//it's day, inv working, but not full sun-> connect battery as well
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <InvOn_DischBattAtDay+0x104>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f641 225d 	movw	r2, #6749	; 0x1a5d
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d802      	bhi.n	80034d4 <InvOn_DischBattAtDay+0x30>
 80034ce:	f7fe ffc1 	bl	8002454 <BatteryMOS_ON>
 80034d2:	e001      	b.n	80034d8 <InvOn_DischBattAtDay+0x34>
		else BatteryMOS_OFF();											//it's full sun, leave Inverter without battery
 80034d4:	f7fe fffe 	bl	80024d4 <BatteryMOS_OFF>
		StatCountFlagsWs.InvFault = 0;	//flag to clear inv fault occurence
 80034d8:	4b34      	ldr	r3, [pc, #208]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 80034da:	2200      	movs	r2, #0
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34
					}
				}//end of battery fully charged
			}//end of batt not OK to charge
		}//end of inv reset  procedure not launched
	}//end of its day, inv not working
}
 80034de:	e05f      	b.n	80035a0 <InvOn_DischBattAtDay+0xfc>
		if (!StatCountFlagsWs.InvFault)
 80034e0:	4b32      	ldr	r3, [pc, #200]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 80034e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d107      	bne.n	80034f8 <InvOn_DischBattAtDay+0x54>
				StatCurrentWh.InvFaultCntr++;
 80034e8:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <InvOn_DischBattAtDay+0x10c>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	3301      	adds	r3, #1
 80034ee:	4a30      	ldr	r2, [pc, #192]	; (80035b0 <InvOn_DischBattAtDay+0x10c>)
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
				StatCountFlagsWs.InvFault = 1;
 80034f2:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	635a      	str	r2, [r3, #52]	; 0x34
		StatCountFlagsWs.Time_NoInv=1;	//enable to count time when inv is not working, in 1Sectimer
 80034f8:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	619a      	str	r2, [r3, #24]
		ResetInverterDay();	//try reset inv
 80034fe:	f7fd fe73 	bl	80011e8 <ResetInverterDay>
		if (!FlagResetInverter ) 			//if INV Reset procedure is not launched
 8003502:	4b28      	ldr	r3, [pc, #160]	; (80035a4 <InvOn_DischBattAtDay+0x100>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d14a      	bne.n	80035a0 <InvOn_DischBattAtDay+0xfc>
			if ((Adc1Measurements.Batt_voltage) < (BATT_MAX_VOLTAGE+VoltHysteresisChg)
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <InvOn_DischBattAtDay+0x104>)
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <InvOn_DischBattAtDay+0x110>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f203 1393 	addw	r3, r3, #403	; 0x193
 8003516:	429a      	cmp	r2, r3
 8003518:	d212      	bcs.n	8003540 <InvOn_DischBattAtDay+0x9c>
					&& Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 800351a:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <InvOn_DischBattAtDay+0x104>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2bf0      	cmp	r3, #240	; 0xf0
 8003520:	d90e      	bls.n	8003540 <InvOn_DischBattAtDay+0x9c>
				BatteryMOS_ON();
 8003522:	f7fe ff97 	bl	8002454 <BatteryMOS_ON>
				StatCountFlagsWs.Ws_BattNoInv=1;	//enable to count energy to battery when INV isnt working, in 1Sectimer
 8003526:	4b21      	ldr	r3, [pc, #132]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 8003528:	2201      	movs	r2, #1
 800352a:	605a      	str	r2, [r3, #4]
				StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 800352c:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 800352e:	2201      	movs	r2, #1
 8003530:	659a      	str	r2, [r3, #88]	; 0x58
				VoltHysteresisChg = BATT_VOLTAGE_MAXHYSTERESIS;
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <InvOn_DischBattAtDay+0x110>)
 8003534:	2212      	movs	r2, #18
 8003536:	601a      	str	r2, [r3, #0]
				StatCountFlagsWs.Chg_cycle_count = 0;	//when battery charging unlock flag enabling counting dschg cycles
 8003538:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 800353a:	2200      	movs	r2, #0
 800353c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800353e:	e02f      	b.n	80035a0 <InvOn_DischBattAtDay+0xfc>
				BatteryMOS_OFF();
 8003540:	f7fe ffc8 	bl	80024d4 <BatteryMOS_OFF>
				StatCountFlagsWs.Time_NoBattery2Chg=1;	//enable to count time without possibility to charge battery, in 1Sectimer
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 8003546:	2201      	movs	r2, #1
 8003548:	621a      	str	r2, [r3, #32]
				VoltHysteresisChg = 0;
 800354a:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <InvOn_DischBattAtDay+0x110>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
				if ((Adc1Measurements.Batt_voltage) > (BATT_MAX_VOLTAGE+VoltHysteresisChg))
 8003550:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <InvOn_DischBattAtDay+0x104>)
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <InvOn_DischBattAtDay+0x110>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f203 1393 	addw	r3, r3, #403	; 0x193
 800355c:	429a      	cmp	r2, r3
 800355e:	d91f      	bls.n	80035a0 <InvOn_DischBattAtDay+0xfc>
					StatCurrentWh.Chg_Ah_lastFull=StatCurrentWh.Chg_Ah_current;	//store fully chg Ah
 8003560:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <InvOn_DischBattAtDay+0x10c>)
 8003562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003566:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <InvOn_DischBattAtDay+0x10c>)
 8003568:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
					if (!StatCountFlagsWs.Chg_cycle_c2 && StatCountFlagsWs.Chg_cycle_count)
 800356c:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <InvOn_DischBattAtDay+0xe8>
 8003574:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <InvOn_DischBattAtDay+0xe8>
						StatCurrentWh.Chg_Volt_lastFull = Adc1Measurements.Batt_voltage;	//store lastvoltage
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <InvOn_DischBattAtDay+0x104>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <InvOn_DischBattAtDay+0x10c>)
 8003582:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
						StatCountFlagsWs.Chg_cycle_c2 = 1;
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 8003588:	2201      	movs	r2, #1
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
					if (!StatCountFlagsWs.Chg_cycle_count)
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <InvOn_DischBattAtDay+0xfc>
						StatCountFlagsWs.Chg_cycle_count = 1; //if not, set flag 'fully charged' to count/set only once
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <InvOn_DischBattAtDay+0x108>)
 8003596:	2201      	movs	r2, #1
 8003598:	629a      	str	r2, [r3, #40]	; 0x28
						StatCurrentWh.Dschg_Ah_current=0;	//clear discharge Ah
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <InvOn_DischBattAtDay+0x10c>)
 800359c:	2200      	movs	r2, #0
 800359e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80035a0:	bf00      	nop
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	200061c8 	.word	0x200061c8
 80035a8:	200059a0 	.word	0x200059a0
 80035ac:	200059c4 	.word	0x200059c4
 80035b0:	20005a34 	.word	0x20005a34
 80035b4:	20000258 	.word	0x20000258

080035b8 <DischargeProcedure>:

void DischargeProcedure(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	//VoltHysteresisChg = 0;		//leave Chg hysteresis elevated for transition period during dusk
	StatCountFlagsWs.Time_BattRecharge=0;	//you cant recharge during night, resetting the procedure state
 80035bc:	4b92      	ldr	r3, [pc, #584]	; (8003808 <DischargeProcedure+0x250>)
 80035be:	2200      	movs	r2, #0
 80035c0:	615a      	str	r2, [r3, #20]
	StatCountFlagsWs.Time_NightTime=1;	//its nighttime, enable to count nightime in 1Sectimer
 80035c2:	4b91      	ldr	r3, [pc, #580]	; (8003808 <DischargeProcedure+0x250>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	61da      	str	r2, [r3, #28]
	StatCountFlagsWs.Time_DuskTime=1;	//its nightitme, enable flag to count time passed from recent dusk;
 80035c8:	4b8f      	ldr	r3, [pc, #572]	; (8003808 <DischargeProcedure+0x250>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
	if (StatCurrentWs.Time_DuskTime > TIME_LOW_I_4NIGHT && !StatCountFlagsWs.StatsUpdated_pwrOff)	//45 minutes in the night/after dusk store Chg_Ah_last
 80035ce:	4b8f      	ldr	r3, [pc, #572]	; (800380c <DischargeProcedure+0x254>)
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80035d6:	d910      	bls.n	80035fa <DischargeProcedure+0x42>
 80035d8:	4b8b      	ldr	r3, [pc, #556]	; (8003808 <DischargeProcedure+0x250>)
 80035da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10c      	bne.n	80035fa <DischargeProcedure+0x42>
	{
		DEBUG_PRINT ("D1,");
 80035e0:	488b      	ldr	r0, [pc, #556]	; (8003810 <DischargeProcedure+0x258>)
 80035e2:	f7fc fdf5 	bl	80001d0 <strlen>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4a89      	ldr	r2, [pc, #548]	; (8003810 <DischargeProcedure+0x258>)
 80035ea:	4413      	add	r3, r2
 80035ec:	4989      	ldr	r1, [pc, #548]	; (8003814 <DischargeProcedure+0x25c>)
 80035ee:	4618      	mov	r0, r3
 80035f0:	f00b fc0a 	bl	800ee08 <siprintf>
		//StatCurrentWh.DayDuration_current = 0;
		StatCountFlagsWs.Dschg_cycle_count = 0;		//clr flag to enable dschg counter when batt empty
 80035f4:	4b84      	ldr	r3, [pc, #528]	; (8003808 <DischargeProcedure+0x250>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
		//StatCountFlagsWs.ChgStatSaved = 0; 		//clr flag to enable dschg counter when batt empty

	}
	//batt OK to discharge?
	if (Adc1Measurements.Batt_voltage > (BATT_MIN_VOLTAGE-VoltHysteresisDsChg))
 80035fa:	4b87      	ldr	r3, [pc, #540]	; (8003818 <DischargeProcedure+0x260>)
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	4b87      	ldr	r3, [pc, #540]	; (800381c <DischargeProcedure+0x264>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f5c3 73ae 	rsb	r3, r3, #348	; 0x15c
 8003606:	429a      	cmp	r2, r3
 8003608:	d955      	bls.n	80036b6 <DischargeProcedure+0xfe>
	{//yes, OK to discharge
		DEBUG_PRINT ("D2,");
 800360a:	4881      	ldr	r0, [pc, #516]	; (8003810 <DischargeProcedure+0x258>)
 800360c:	f7fc fde0 	bl	80001d0 <strlen>
 8003610:	4603      	mov	r3, r0
 8003612:	4a7f      	ldr	r2, [pc, #508]	; (8003810 <DischargeProcedure+0x258>)
 8003614:	4413      	add	r3, r2
 8003616:	4982      	ldr	r1, [pc, #520]	; (8003820 <DischargeProcedure+0x268>)
 8003618:	4618      	mov	r0, r3
 800361a:	f00b fbf5 	bl	800ee08 <siprintf>
		StatCountFlagsWs.Dschg_cycle_count = 0;		//clear flag to enable dschg counter when batt empty
 800361e:	4b7a      	ldr	r3, [pc, #488]	; (8003808 <DischargeProcedure+0x250>)
 8003620:	2200      	movs	r2, #0
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
		if (!FlagResetInverter)
 8003624:	4b7f      	ldr	r3, [pc, #508]	; (8003824 <DischargeProcedure+0x26c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <DischargeProcedure+0x8c>
		{//if inverter reset procedure isn't in progress, turn on batt mos and inv mos
			DEBUG_PRINT ("D3,");
 800362c:	4878      	ldr	r0, [pc, #480]	; (8003810 <DischargeProcedure+0x258>)
 800362e:	f7fc fdcf 	bl	80001d0 <strlen>
 8003632:	4603      	mov	r3, r0
 8003634:	4a76      	ldr	r2, [pc, #472]	; (8003810 <DischargeProcedure+0x258>)
 8003636:	4413      	add	r3, r2
 8003638:	497b      	ldr	r1, [pc, #492]	; (8003828 <DischargeProcedure+0x270>)
 800363a:	4618      	mov	r0, r3
 800363c:	f00b fbe4 	bl	800ee08 <siprintf>
			//BatteryMOS_ON();
			DelayedInvMosOn();
 8003640:	f7fd fd14 	bl	800106c <DelayedInvMosOn>
		}
		ResetInverterNight();
 8003644:	f7fd fee0 	bl	8001408 <ResetInverterNight>
		VoltHysteresisDsChg = BATT_VOLTAGE_MINHYSTERESIS;	//hysteresis for discharge
 8003648:	4b74      	ldr	r3, [pc, #464]	; (800381c <DischargeProcedure+0x264>)
 800364a:	2211      	movs	r2, #17
 800364c:	601a      	str	r2, [r3, #0]
		if (FlagInverterMOS)
 800364e:	4b77      	ldr	r3, [pc, #476]	; (800382c <DischargeProcedure+0x274>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00f      	beq.n	8003676 <DischargeProcedure+0xbe>
		{
			DEBUG_PRINT ("D4,");
 8003656:	486e      	ldr	r0, [pc, #440]	; (8003810 <DischargeProcedure+0x258>)
 8003658:	f7fc fdba 	bl	80001d0 <strlen>
 800365c:	4603      	mov	r3, r0
 800365e:	4a6c      	ldr	r2, [pc, #432]	; (8003810 <DischargeProcedure+0x258>)
 8003660:	4413      	add	r3, r2
 8003662:	4973      	ldr	r1, [pc, #460]	; (8003830 <DischargeProcedure+0x278>)
 8003664:	4618      	mov	r0, r3
 8003666:	f00b fbcf 	bl	800ee08 <siprintf>
			StatCountFlagsWs.Ws_BattOut=1;	//enable to count energy taken from battery in 1Sectimer
 800366a:	4b67      	ldr	r3, [pc, #412]	; (8003808 <DischargeProcedure+0x250>)
 800366c:	2201      	movs	r2, #1
 800366e:	60da      	str	r2, [r3, #12]
			StatCountFlagsWs.DschgAs=1;		//enable counting ampere-seconds
 8003670:	4b65      	ldr	r3, [pc, #404]	; (8003808 <DischargeProcedure+0x250>)
 8003672:	2201      	movs	r2, #1
 8003674:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN_NIGHT)
 8003676:	4b68      	ldr	r3, [pc, #416]	; (8003818 <DischargeProcedure+0x260>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2bfa      	cmp	r3, #250	; 0xfa
 800367c:	f240 80c1 	bls.w	8003802 <DischargeProcedure+0x24a>
			if (StatCountFlagsWs.Chg_cycle_count)
 8003680:	4b61      	ldr	r3, [pc, #388]	; (8003808 <DischargeProcedure+0x250>)
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80bc 	beq.w	8003802 <DischargeProcedure+0x24a>
			{	//if battery was fully charged before night, increment counter of charge cycles as night starts
				DEBUG_PRINT ("D5,");
 800368a:	4861      	ldr	r0, [pc, #388]	; (8003810 <DischargeProcedure+0x258>)
 800368c:	f7fc fda0 	bl	80001d0 <strlen>
 8003690:	4603      	mov	r3, r0
 8003692:	4a5f      	ldr	r2, [pc, #380]	; (8003810 <DischargeProcedure+0x258>)
 8003694:	4413      	add	r3, r2
 8003696:	4967      	ldr	r1, [pc, #412]	; (8003834 <DischargeProcedure+0x27c>)
 8003698:	4618      	mov	r0, r3
 800369a:	f00b fbb5 	bl	800ee08 <siprintf>
				StatCountFlagsWs.Chg_cycle_count=0;
 800369e:	4b5a      	ldr	r3, [pc, #360]	; (8003808 <DischargeProcedure+0x250>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
				StatCountFlagsWs.Chg_cycle_c2=0;
 80036a4:	4b58      	ldr	r3, [pc, #352]	; (8003808 <DischargeProcedure+0x250>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
				StatCurrentWh.Chg_cycle_count++;
 80036aa:	4b63      	ldr	r3, [pc, #396]	; (8003838 <DischargeProcedure+0x280>)
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	3301      	adds	r3, #1
 80036b0:	4a61      	ldr	r2, [pc, #388]	; (8003838 <DischargeProcedure+0x280>)
 80036b2:	6293      	str	r3, [r2, #40]	; 0x28
			BatteryMOS_OFF();		//shut off controller completely
			//StatCountFlagsWs.StatsUpdated_pwrOff = 0;				//likely it will be cleared by reset
			}
		}
	}
}
 80036b4:	e0a5      	b.n	8003802 <DischargeProcedure+0x24a>
		DEBUG_PRINT ("D6,");
 80036b6:	4856      	ldr	r0, [pc, #344]	; (8003810 <DischargeProcedure+0x258>)
 80036b8:	f7fc fd8a 	bl	80001d0 <strlen>
 80036bc:	4603      	mov	r3, r0
 80036be:	4a54      	ldr	r2, [pc, #336]	; (8003810 <DischargeProcedure+0x258>)
 80036c0:	4413      	add	r3, r2
 80036c2:	495e      	ldr	r1, [pc, #376]	; (800383c <DischargeProcedure+0x284>)
 80036c4:	4618      	mov	r0, r3
 80036c6:	f00b fb9f 	bl	800ee08 <siprintf>
		VoltHysteresisDsChg = 0;
 80036ca:	4b54      	ldr	r3, [pc, #336]	; (800381c <DischargeProcedure+0x264>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
		VoltHysteresisChg = 0;		//most likely will be cleared by uP reset anyway
 80036d0:	4b5b      	ldr	r3, [pc, #364]	; (8003840 <DischargeProcedure+0x288>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
			InverterMOS_OFF();		//disconnect load (HW 01)
 80036d6:	f7fe ff45 	bl	8002564 <InverterMOS_OFF>
			BatteryMOS_ON();		//battery can be left ON - sometimes on cloudy evenings when battery depleted there is small current left in PV. below 100mA it can,t be consumed by inverter anyway.
 80036da:	f7fe febb 	bl	8002454 <BatteryMOS_ON>
		if (Uptime.hours && (Uptime.minutes == TICKS_ONEHOUR)	//shut off/disconnect backup and batt pwr only if its dusk (not dawn) and update stats on last minute of the hour hour
 80036de:	4b59      	ldr	r3, [pc, #356]	; (8003844 <DischargeProcedure+0x28c>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d06d      	beq.n	80037c2 <DischargeProcedure+0x20a>
 80036e6:	4b57      	ldr	r3, [pc, #348]	; (8003844 <DischargeProcedure+0x28c>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b3b      	cmp	r3, #59	; 0x3b
 80036ec:	d169      	bne.n	80037c2 <DischargeProcedure+0x20a>
				&& !StatCountFlagsWs.Dschg_cycle_count
 80036ee:	4b46      	ldr	r3, [pc, #280]	; (8003808 <DischargeProcedure+0x250>)
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d165      	bne.n	80037c2 <DischargeProcedure+0x20a>
				&& (StatCurrentWs.Time_DuskTime > TIME_LOW_I_4NIGHT))
 80036f6:	4b45      	ldr	r3, [pc, #276]	; (800380c <DischargeProcedure+0x254>)
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80036fe:	d960      	bls.n	80037c2 <DischargeProcedure+0x20a>
			DEBUG_PRINT ("D7,");
 8003700:	4843      	ldr	r0, [pc, #268]	; (8003810 <DischargeProcedure+0x258>)
 8003702:	f7fc fd65 	bl	80001d0 <strlen>
 8003706:	4603      	mov	r3, r0
 8003708:	4a41      	ldr	r2, [pc, #260]	; (8003810 <DischargeProcedure+0x258>)
 800370a:	4413      	add	r3, r2
 800370c:	494e      	ldr	r1, [pc, #312]	; (8003848 <DischargeProcedure+0x290>)
 800370e:	4618      	mov	r0, r3
 8003710:	f00b fb7a 	bl	800ee08 <siprintf>
			StatCurrentWh.Chg_Ah_3 = StatCurrentWh.Chg_Ah_2;		//chg stats
 8003714:	4b48      	ldr	r3, [pc, #288]	; (8003838 <DischargeProcedure+0x280>)
 8003716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800371a:	4a47      	ldr	r2, [pc, #284]	; (8003838 <DischargeProcedure+0x280>)
 800371c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			StatCurrentWh.Chg_Ah_2 = StatCurrentWh.Chg_Ah_1;
 8003720:	4b45      	ldr	r3, [pc, #276]	; (8003838 <DischargeProcedure+0x280>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	4a44      	ldr	r2, [pc, #272]	; (8003838 <DischargeProcedure+0x280>)
 8003728:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
			StatCurrentWh.Chg_Ah_1 = StatCurrentWh.Chg_Ah_last;
 800372c:	4b42      	ldr	r3, [pc, #264]	; (8003838 <DischargeProcedure+0x280>)
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003732:	4a41      	ldr	r2, [pc, #260]	; (8003838 <DischargeProcedure+0x280>)
 8003734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
			StatCurrentWh.Chg_Ah_last = StatCurrentWh.Chg_Ah_current;
 8003738:	4b3f      	ldr	r3, [pc, #252]	; (8003838 <DischargeProcedure+0x280>)
 800373a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373e:	4a3e      	ldr	r2, [pc, #248]	; (8003838 <DischargeProcedure+0x280>)
 8003740:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
			StatCurrentWh.DayDuration_3 = StatCurrentWh.DayDuration_2;
 8003744:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <DischargeProcedure+0x280>)
 8003746:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800374a:	4a3b      	ldr	r2, [pc, #236]	; (8003838 <DischargeProcedure+0x280>)
 800374c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
			StatCurrentWh.DayDuration_2 = StatCurrentWh.DayDuration_1;
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <DischargeProcedure+0x280>)
 8003752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003756:	4a38      	ldr	r2, [pc, #224]	; (8003838 <DischargeProcedure+0x280>)
 8003758:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
			StatCurrentWh.DayDuration_1 = StatCurrentWh.DayDuration_current;
 800375c:	4b36      	ldr	r3, [pc, #216]	; (8003838 <DischargeProcedure+0x280>)
 800375e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003762:	4a35      	ldr	r2, [pc, #212]	; (8003838 <DischargeProcedure+0x280>)
 8003764:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
			StatCurrentWh.Dschg_Ah_lastFull_3 = StatCurrentWh.Dschg_Ah_lastFull_2;		//dchg stats
 8003768:	4b33      	ldr	r3, [pc, #204]	; (8003838 <DischargeProcedure+0x280>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	4a32      	ldr	r2, [pc, #200]	; (8003838 <DischargeProcedure+0x280>)
 800376e:	6793      	str	r3, [r2, #120]	; 0x78
			StatCurrentWh.Dschg_Ah_lastFull_2 = StatCurrentWh.Dschg_Ah_lastFull_1;
 8003770:	4b31      	ldr	r3, [pc, #196]	; (8003838 <DischargeProcedure+0x280>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a30      	ldr	r2, [pc, #192]	; (8003838 <DischargeProcedure+0x280>)
 8003776:	6753      	str	r3, [r2, #116]	; 0x74
			StatCurrentWh.Dschg_Ah_lastFull_1 = StatCurrentWh.Dschg_Ah_lastFull;
 8003778:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <DischargeProcedure+0x280>)
 800377a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377c:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <DischargeProcedure+0x280>)
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
			StatCurrentWh.Dschg_Ah_lastFull = StatCurrentWh.Dschg_Ah_current;	//store fully dschg Ah
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <DischargeProcedure+0x280>)
 8003782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003784:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <DischargeProcedure+0x280>)
 8003786:	66d3      	str	r3, [r2, #108]	; 0x6c
			StatCurrentWh.Dschg_Volt_lastFull = Adc1Measurements.Batt_voltage;
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <DischargeProcedure+0x260>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4a2a      	ldr	r2, [pc, #168]	; (8003838 <DischargeProcedure+0x280>)
 800378e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			StatCountFlagsWs.Chg_cycle_c2 = 0;
 8003792:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <DischargeProcedure+0x250>)
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
			StatCurrentWh.Dschg_cycle_count++;	//count only once
 8003798:	4b27      	ldr	r3, [pc, #156]	; (8003838 <DischargeProcedure+0x280>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	3301      	adds	r3, #1
 800379e:	4a26      	ldr	r2, [pc, #152]	; (8003838 <DischargeProcedure+0x280>)
 80037a0:	6253      	str	r3, [r2, #36]	; 0x24
			StatCountFlagsWs.Chg_cycle_count = 0;	//most likely will be cleared by system reset
 80037a2:	4b19      	ldr	r3, [pc, #100]	; (8003808 <DischargeProcedure+0x250>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
			StatCurrentWh.Chg_Ah_current=0;	//clear charge Ah, likely ill be cleared by reset
 80037a8:	4b23      	ldr	r3, [pc, #140]	; (8003838 <DischargeProcedure+0x280>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			StatCountFlagsWs.ChgStatSaved = 1;
 80037b0:	4b15      	ldr	r3, [pc, #84]	; (8003808 <DischargeProcedure+0x250>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
			StatCountFlagsWs.Dschg_cycle_count = 1;
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <DischargeProcedure+0x250>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
			StatCountFlagsWs.StatsUpdated_pwrOff = 1;				//stats updated, enable sw off function
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <DischargeProcedure+0x250>)
 80037be:	2201      	movs	r2, #1
 80037c0:	651a      	str	r2, [r3, #80]	; 0x50
		if (StatCountFlagsWs.StatsUpdated_pwrOff)
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <DischargeProcedure+0x250>)
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01b      	beq.n	8003802 <DischargeProcedure+0x24a>
			if (Uptime.hours && (Uptime.minutes == 0)	//shut off/disconnect backup and batt pwr only if its dusk (not dawn)
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <DischargeProcedure+0x28c>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d017      	beq.n	8003802 <DischargeProcedure+0x24a>
 80037d2:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <DischargeProcedure+0x28c>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d113      	bne.n	8003802 <DischargeProcedure+0x24a>
					&& (Uptime.seconds == 10))
 80037da:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <DischargeProcedure+0x28c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b0a      	cmp	r3, #10
 80037e0:	d10f      	bne.n	8003802 <DischargeProcedure+0x24a>
				DEBUG_PRINT ("D8,");
 80037e2:	480b      	ldr	r0, [pc, #44]	; (8003810 <DischargeProcedure+0x258>)
 80037e4:	f7fc fcf4 	bl	80001d0 <strlen>
 80037e8:	4603      	mov	r3, r0
 80037ea:	4a09      	ldr	r2, [pc, #36]	; (8003810 <DischargeProcedure+0x258>)
 80037ec:	4413      	add	r3, r2
 80037ee:	4917      	ldr	r1, [pc, #92]	; (800384c <DischargeProcedure+0x294>)
 80037f0:	4618      	mov	r0, r3
 80037f2:	f00b fb09 	bl	800ee08 <siprintf>
			BackupPowerOFF();		//shut off controller completely
 80037f6:	f7fe fd8d 	bl	8002314 <BackupPowerOFF>
			InverterMOS_ON();		//can be left on, just in any case
 80037fa:	f7fe fe9b 	bl	8002534 <InverterMOS_ON>
			BatteryMOS_OFF();		//shut off controller completely
 80037fe:	f7fe fe69 	bl	80024d4 <BatteryMOS_OFF>
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200059c4 	.word	0x200059c4
 800380c:	20005c98 	.word	0x20005c98
 8003810:	20005dc4 	.word	0x20005dc4
 8003814:	080139ec 	.word	0x080139ec
 8003818:	200059a0 	.word	0x200059a0
 800381c:	2000025c 	.word	0x2000025c
 8003820:	080139f0 	.word	0x080139f0
 8003824:	200061c8 	.word	0x200061c8
 8003828:	080139f4 	.word	0x080139f4
 800382c:	2000024c 	.word	0x2000024c
 8003830:	080139f8 	.word	0x080139f8
 8003834:	080139fc 	.word	0x080139fc
 8003838:	20005a34 	.word	0x20005a34
 800383c:	08013a00 	.word	0x08013a00
 8003840:	20000258 	.word	0x20000258
 8003844:	20005a24 	.word	0x20005a24
 8003848:	08013a04 	.word	0x08013a04
 800384c:	08013a08 	.word	0x08013a08

08003850 <PrintConfig2TxBuffer>:

void PrintConfig2TxBuffer(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b090      	sub	sp, #64	; 0x40
 8003854:	af10      	add	r7, sp, #64	; 0x40
	sprintf(TxBuffer,  "\r\nBattery controller for On-Grid PV microinverter\r\n"
 8003856:	f244 0374 	movw	r3, #16500	; 0x4074
 800385a:	930f      	str	r3, [sp, #60]	; 0x3c
 800385c:	f243 43bc 	movw	r3, #13500	; 0x34bc
 8003860:	930e      	str	r3, [sp, #56]	; 0x38
 8003862:	2323      	movs	r3, #35	; 0x23
 8003864:	930d      	str	r3, [sp, #52]	; 0x34
 8003866:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800386a:	930c      	str	r3, [sp, #48]	; 0x30
 800386c:	2311      	movs	r3, #17
 800386e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003870:	2312      	movs	r3, #18
 8003872:	930a      	str	r3, [sp, #40]	; 0x28
 8003874:	f240 1393 	movw	r3, #403	; 0x193
 8003878:	9309      	str	r3, [sp, #36]	; 0x24
 800387a:	23f0      	movs	r3, #240	; 0xf0
 800387c:	9308      	str	r3, [sp, #32]
 800387e:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8003882:	9307      	str	r3, [sp, #28]
 8003884:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8003888:	9306      	str	r3, [sp, #24]
 800388a:	f240 13b3 	movw	r3, #435	; 0x1b3
 800388e:	9305      	str	r3, [sp, #20]
 8003890:	2346      	movs	r3, #70	; 0x46
 8003892:	9304      	str	r3, [sp, #16]
 8003894:	23c8      	movs	r3, #200	; 0xc8
 8003896:	9303      	str	r3, [sp, #12]
 8003898:	23fa      	movs	r3, #250	; 0xfa
 800389a:	9302      	str	r3, [sp, #8]
 800389c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2346      	movs	r3, #70	; 0x46
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2334      	movs	r3, #52	; 0x34
 80038a8:	2202      	movs	r2, #2
 80038aa:	4903      	ldr	r1, [pc, #12]	; (80038b8 <PrintConfig2TxBuffer+0x68>)
 80038ac:	4803      	ldr	r0, [pc, #12]	; (80038bc <PrintConfig2TxBuffer+0x6c>)
 80038ae:	f00b faab 	bl	800ee08 <siprintf>
				"\r\nStart\n\n\r"
				,HW_VER,NO_FLASH_PAGES,MOSFET_MAX_TEMP,PV_CURRENT_MIN,INV_CURRENT_MIN_NIGHT,INV_CURRENT_MIN_DAY,PV_CURRENT_HYST,PV_OCV_VOLGATE, PV_MIN_OP_VOLTAGE
				,BATT_MIN_VOLTAGE,BATT_CRITICAL_MIN_VOLTAGE,BATT_MAX_VOLTAGE,BATT_VOLTAGE_MAXHYSTERESIS
				,BATT_VOLTAGE_MINHYSTERESIS,TIME2RESET_INV, TIME2OVLD_INV, INV_CURRENT_MAX, INV_CURR_SC
				);
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	08013a0c 	.word	0x08013a0c
 80038bc:	20005dc4 	.word	0x20005dc4

080038c0 <PrintFlashStats2TxBuffer>:
void PrintFlashStats2TxBuffer(void)
{
 80038c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c2:	b0b9      	sub	sp, #228	; 0xe4
 80038c4:	af1e      	add	r7, sp, #120	; 0x78
	    	    		"InvOvcCntr %u, InvExtRstCnt %u, "
	    	    		"ChmAhLastF %u, DchmAhLastF %u, "
	    	    		"DschVlastF %u, ChVlastF %u, "
	    	    		"ChgAhlast %u"
	    	    		"\r\n\n"
	    	    ,(unsigned int)StatCurrentWh.FlashPageCounter, (unsigned int )StatCurrentWh.Time_NightTime, (unsigned int )StatCurrentWh.Time_NoBattery2Chg, (unsigned int )StatCurrentWh.Time_NoInv
 80038c6:	4b4e      	ldr	r3, [pc, #312]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	667b      	str	r3, [r7, #100]	; 0x64
 80038cc:	4b4c      	ldr	r3, [pc, #304]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	6639      	str	r1, [r7, #96]	; 0x60
 80038d2:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 80038d4:	6a18      	ldr	r0, [r3, #32]
 80038d6:	65f8      	str	r0, [r7, #92]	; 0x5c
 80038d8:	4b49      	ldr	r3, [pc, #292]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 80038da:	699c      	ldr	r4, [r3, #24]
 80038dc:	65bc      	str	r4, [r7, #88]	; 0x58
	    		,(unsigned int)StatCurrentWh.Wh_BattIn
 80038de:	4b48      	ldr	r3, [pc, #288]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 80038e0:	685d      	ldr	r5, [r3, #4]
 80038e2:	657d      	str	r5, [r7, #84]	; 0x54
	    	    ,(unsigned int)StatCurrentWh.Wh_BattNoInv, (unsigned int )StatCurrentWh.Wh_BattOut
 80038e4:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 80038e6:	689e      	ldr	r6, [r3, #8]
 80038e8:	653e      	str	r6, [r7, #80]	; 0x50
 80038ea:	4b45      	ldr	r3, [pc, #276]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	64fa      	str	r2, [r7, #76]	; 0x4c
	    		,(unsigned int)StatCurrentWh.Wh_BattRecharge, (unsigned int )StatCurrentWh.Wh_Inverter
 80038f0:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 80038f2:	6959      	ldr	r1, [r3, #20]
 80038f4:	64b9      	str	r1, [r7, #72]	; 0x48
 80038f6:	4b42      	ldr	r3, [pc, #264]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	647b      	str	r3, [r7, #68]	; 0x44
	    		,(unsigned int)StatCurrentWh.Dschg_cycle_count, (unsigned int )StatCurrentWh.Chg_cycle_count
 80038fc:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 80038fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003900:	6438      	str	r0, [r7, #64]	; 0x40
 8003902:	4b3f      	ldr	r3, [pc, #252]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003904:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003906:	63fc      	str	r4, [r7, #60]	; 0x3c
	    		,(unsigned int)StatCurrentWh.InvFaultCntr, (unsigned int)StatCurrentWh.InvResetCntr
 8003908:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 800390a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800390c:	63bd      	str	r5, [r7, #56]	; 0x38
 800390e:	4b3c      	ldr	r3, [pc, #240]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003910:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8003912:	637e      	str	r6, [r7, #52]	; 0x34
	    		,(unsigned int)StatCurrentWh.MaxTempBatMos, (unsigned int)StatCurrentWh.MaxTempInvMos
 8003914:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003918:	633a      	str	r2, [r7, #48]	; 0x30
 800391a:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 800391c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800391e:	62f9      	str	r1, [r7, #44]	; 0x2c
				,(unsigned int)StatCurrentWh.MaxTempInvMosCntr, (unsigned int)StatCurrentWh.MaxTempBatMosCntr
 8003920:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
 8003926:	4b36      	ldr	r3, [pc, #216]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003928:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800392a:	6278      	str	r0, [r7, #36]	; 0x24
	    		,(unsigned int)StatCurrentWh.MaxInvCurrent, (unsigned int)StatCurrentWh.MaxPVCurrent
 800392c:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 800392e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003930:	623c      	str	r4, [r7, #32]
 8003932:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003934:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8003936:	61fd      	str	r5, [r7, #28]
				,(unsigned int)StatCurrentWh.MaxInvCurrentCntr, (unsigned int)StatCurrentWh.MaxPVCurrentCntr
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 800393a:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 800393c:	61be      	str	r6, [r7, #24]
 800393e:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003942:	617a      	str	r2, [r7, #20]
	    		,(unsigned int)StatCurrentWh.MaxBatVoltage, (unsigned int)StatCurrentWh.MinBatVoltage
 8003944:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003946:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003948:	6139      	str	r1, [r7, #16]
 800394a:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	60fb      	str	r3, [r7, #12]
				,(unsigned int)StatCurrentWh.MaxBatVoltageCntr, (unsigned int)StatCurrentWh.MinBatVoltageCntr
 8003950:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003952:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003954:	60b8      	str	r0, [r7, #8]
 8003956:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003958:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800395a:	607c      	str	r4, [r7, #4]
	    		,(unsigned int)StatCurrentWh.InvOvcCounter, (unsigned int)StatCurrentWh.InvExtResetCnt
 800395c:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 800395e:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8003960:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003962:	6e9d      	ldr	r5, [r3, #104]	; 0x68
	    		,(unsigned int)StatCurrentWh.Chg_Ah_lastFull, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull
 8003964:	4b26      	ldr	r3, [pc, #152]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003966:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800396a:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 800396c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
	    		,(unsigned int)StatCurrentWh.Dschg_Volt_lastFull, (unsigned int)StatCurrentWh.Chg_Volt_lastFull
 800396e:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003970:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003974:	4b22      	ldr	r3, [pc, #136]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 8003976:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	    		,(unsigned int)StatCurrentWh.Chg_Ah_last
 800397a:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <PrintFlashStats2TxBuffer+0x140>)
 800397c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	sprintf(TxBuffer, "Stat_Flash:FlashPCount %u, TNightTime %u,TNoBat2Chg %u,TNoInv %u, "
 8003980:	931d      	str	r3, [sp, #116]	; 0x74
 8003982:	921c      	str	r2, [sp, #112]	; 0x70
 8003984:	911b      	str	r1, [sp, #108]	; 0x6c
 8003986:	901a      	str	r0, [sp, #104]	; 0x68
 8003988:	9419      	str	r4, [sp, #100]	; 0x64
 800398a:	9518      	str	r5, [sp, #96]	; 0x60
 800398c:	9617      	str	r6, [sp, #92]	; 0x5c
 800398e:	687c      	ldr	r4, [r7, #4]
 8003990:	9416      	str	r4, [sp, #88]	; 0x58
 8003992:	68b8      	ldr	r0, [r7, #8]
 8003994:	9015      	str	r0, [sp, #84]	; 0x54
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	9314      	str	r3, [sp, #80]	; 0x50
 800399a:	6939      	ldr	r1, [r7, #16]
 800399c:	9113      	str	r1, [sp, #76]	; 0x4c
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	9212      	str	r2, [sp, #72]	; 0x48
 80039a2:	69be      	ldr	r6, [r7, #24]
 80039a4:	9611      	str	r6, [sp, #68]	; 0x44
 80039a6:	69fd      	ldr	r5, [r7, #28]
 80039a8:	9510      	str	r5, [sp, #64]	; 0x40
 80039aa:	6a3c      	ldr	r4, [r7, #32]
 80039ac:	940f      	str	r4, [sp, #60]	; 0x3c
 80039ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039b0:	900e      	str	r0, [sp, #56]	; 0x38
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	930d      	str	r3, [sp, #52]	; 0x34
 80039b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039b8:	910c      	str	r1, [sp, #48]	; 0x30
 80039ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80039be:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80039c0:	960a      	str	r6, [sp, #40]	; 0x28
 80039c2:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 80039c4:	9509      	str	r5, [sp, #36]	; 0x24
 80039c6:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80039c8:	9408      	str	r4, [sp, #32]
 80039ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80039cc:	9007      	str	r0, [sp, #28]
 80039ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d0:	9306      	str	r3, [sp, #24]
 80039d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80039d4:	9105      	str	r1, [sp, #20]
 80039d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039d8:	9204      	str	r2, [sp, #16]
 80039da:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80039dc:	9603      	str	r6, [sp, #12]
 80039de:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80039e0:	9502      	str	r5, [sp, #8]
 80039e2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80039e4:	9401      	str	r4, [sp, #4]
 80039e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80039e8:	9000      	str	r0, [sp, #0]
 80039ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039ee:	4905      	ldr	r1, [pc, #20]	; (8003a04 <PrintFlashStats2TxBuffer+0x144>)
 80039f0:	4805      	ldr	r0, [pc, #20]	; (8003a08 <PrintFlashStats2TxBuffer+0x148>)
 80039f2:	f00b fa09 	bl	800ee08 <siprintf>
	    	    );
}
 80039f6:	bf00      	nop
 80039f8:	376c      	adds	r7, #108	; 0x6c
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20005a34 	.word	0x20005a34
 8003a04:	08013c24 	.word	0x08013c24
 8003a08:	20005dc4 	.word	0x20005dc4

08003a0c <ShowWhStats>:

void ShowWhStats(void)
{
 8003a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a0e:	b0b9      	sub	sp, #228	; 0xe4
 8003a10:	af1e      	add	r7, sp, #120	; 0x78
			"ChgmAhtM %u, DschgmAhtM %u, "
			"ChgmAhtB %u, DschgmAhtB %u, "
			"DayCurr %u, Day-1 %u, "
			"Day-2 %u, Day-3 %u, "
    		"\r\n\n"
    ,(unsigned int )StatCurrentWh.FlashPageCounter, (unsigned int )StatCurrentWh.Time_NightTime, (unsigned int )StatCurrentWh.Time_NoBattery2Chg, (unsigned int )StatCurrentWh.Time_NoInv
 8003a12:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <ShowWhStats+0x154>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	667b      	str	r3, [r7, #100]	; 0x64
 8003a18:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <ShowWhStats+0x154>)
 8003a1a:	69d9      	ldr	r1, [r3, #28]
 8003a1c:	6639      	str	r1, [r7, #96]	; 0x60
 8003a1e:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <ShowWhStats+0x154>)
 8003a20:	6a18      	ldr	r0, [r3, #32]
 8003a22:	65f8      	str	r0, [r7, #92]	; 0x5c
 8003a24:	4b4e      	ldr	r3, [pc, #312]	; (8003b60 <ShowWhStats+0x154>)
 8003a26:	699c      	ldr	r4, [r3, #24]
 8003a28:	65bc      	str	r4, [r7, #88]	; 0x58
	,(unsigned int )StatCurrentWh.Wh_BattIn
 8003a2a:	4b4d      	ldr	r3, [pc, #308]	; (8003b60 <ShowWhStats+0x154>)
 8003a2c:	685d      	ldr	r5, [r3, #4]
 8003a2e:	657d      	str	r5, [r7, #84]	; 0x54
    ,(unsigned int )StatCurrentWh.Wh_BattNoInv, (unsigned int )StatCurrentWh.Wh_BattOut
 8003a30:	4b4b      	ldr	r3, [pc, #300]	; (8003b60 <ShowWhStats+0x154>)
 8003a32:	689e      	ldr	r6, [r3, #8]
 8003a34:	653e      	str	r6, [r7, #80]	; 0x50
 8003a36:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <ShowWhStats+0x154>)
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	64fa      	str	r2, [r7, #76]	; 0x4c
	,(unsigned int )StatCurrentWh.Wh_BattRecharge, (unsigned int )StatCurrentWh.Wh_Inverter
 8003a3c:	4b48      	ldr	r3, [pc, #288]	; (8003b60 <ShowWhStats+0x154>)
 8003a3e:	6959      	ldr	r1, [r3, #20]
 8003a40:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a42:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <ShowWhStats+0x154>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	647b      	str	r3, [r7, #68]	; 0x44
	,(unsigned int )StatCurrentWh.Dschg_cycle_count, (unsigned int )StatCurrentWh.Chg_cycle_count
 8003a48:	4b45      	ldr	r3, [pc, #276]	; (8003b60 <ShowWhStats+0x154>)
 8003a4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003a4c:	6438      	str	r0, [r7, #64]	; 0x40
 8003a4e:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <ShowWhStats+0x154>)
 8003a50:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003a52:	63fc      	str	r4, [r7, #60]	; 0x3c
	,(unsigned int)StatCurrentWh.InvFaultCntr, (unsigned int)StatCurrentWh.InvResetCntr
 8003a54:	4b42      	ldr	r3, [pc, #264]	; (8003b60 <ShowWhStats+0x154>)
 8003a56:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8003a58:	63bd      	str	r5, [r7, #56]	; 0x38
 8003a5a:	4b41      	ldr	r3, [pc, #260]	; (8003b60 <ShowWhStats+0x154>)
 8003a5c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8003a5e:	637e      	str	r6, [r7, #52]	; 0x34
	,(unsigned int)StatCurrentWh.Chg_Ah_current, (unsigned int)StatCurrentWh.Dschg_Ah_current
 8003a60:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <ShowWhStats+0x154>)
 8003a62:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003a66:	633a      	str	r2, [r7, #48]	; 0x30
 8003a68:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <ShowWhStats+0x154>)
 8003a6a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003a6c:	62f9      	str	r1, [r7, #44]	; 0x2c
	,(unsigned int)StatCurrentWh.Chg_Ah_lastFull, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull
 8003a6e:	4b3c      	ldr	r3, [pc, #240]	; (8003b60 <ShowWhStats+0x154>)
 8003a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a76:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <ShowWhStats+0x154>)
 8003a78:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003a7a:	6278      	str	r0, [r7, #36]	; 0x24
	,(unsigned int)StatCurrentWh.Dschg_Ah_lastFull_1, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull_2, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull_3
 8003a7c:	4b38      	ldr	r3, [pc, #224]	; (8003b60 <ShowWhStats+0x154>)
 8003a7e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8003a80:	623c      	str	r4, [r7, #32]
 8003a82:	4b37      	ldr	r3, [pc, #220]	; (8003b60 <ShowWhStats+0x154>)
 8003a84:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 8003a86:	61fd      	str	r5, [r7, #28]
 8003a88:	4b35      	ldr	r3, [pc, #212]	; (8003b60 <ShowWhStats+0x154>)
 8003a8a:	6f9e      	ldr	r6, [r3, #120]	; 0x78
 8003a8c:	61be      	str	r6, [r7, #24]
	,(unsigned int)StatCurrentWh.Chg_Ah_last, (unsigned int)StatCurrentWh.Chg_Ah_1, (unsigned int)StatCurrentWh.Chg_Ah_2, (unsigned int)StatCurrentWh.Chg_Ah_3
 8003a8e:	4b34      	ldr	r3, [pc, #208]	; (8003b60 <ShowWhStats+0x154>)
 8003a90:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003a94:	617a      	str	r2, [r7, #20]
 8003a96:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <ShowWhStats+0x154>)
 8003a98:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003a9c:	6139      	str	r1, [r7, #16]
 8003a9e:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <ShowWhStats+0x154>)
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <ShowWhStats+0x154>)
 8003aa8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8003aac:	60b8      	str	r0, [r7, #8]
	,(unsigned int)StatCurrentWh.Chg_Ah_tot_Mains, (unsigned int)StatCurrentWh.Dschg_Ah_tot_Mains
 8003aae:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <ShowWhStats+0x154>)
 8003ab0:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8003ab4:	607c      	str	r4, [r7, #4]
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <ShowWhStats+0x154>)
 8003ab8:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
	,(unsigned int)StatCurrentWh.Chg_Ah_tot_Batt, (unsigned int)StatCurrentWh.Dschg_Ah_tot_Batt
 8003abc:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <ShowWhStats+0x154>)
 8003abe:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8003ac2:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <ShowWhStats+0x154>)
 8003ac4:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
	,(unsigned int)StatCurrentWh.DayDuration_current, (unsigned int)StatCurrentWh.DayDuration_1
 8003ac8:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <ShowWhStats+0x154>)
 8003aca:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <ShowWhStats+0x154>)
 8003ad0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
	,(unsigned int)StatCurrentWh.DayDuration_2, (unsigned int)StatCurrentWh.DayDuration_3
 8003ad4:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <ShowWhStats+0x154>)
 8003ad6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003ada:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <ShowWhStats+0x154>)
 8003adc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
	sprintf(TxBuffer, "Wh.FlashPage: %u, TNightTime %u,TNoBatt2Chg %u,TNoInv %u, "
 8003ae0:	931d      	str	r3, [sp, #116]	; 0x74
 8003ae2:	921c      	str	r2, [sp, #112]	; 0x70
 8003ae4:	911b      	str	r1, [sp, #108]	; 0x6c
 8003ae6:	901a      	str	r0, [sp, #104]	; 0x68
 8003ae8:	9419      	str	r4, [sp, #100]	; 0x64
 8003aea:	9518      	str	r5, [sp, #96]	; 0x60
 8003aec:	9617      	str	r6, [sp, #92]	; 0x5c
 8003aee:	687c      	ldr	r4, [r7, #4]
 8003af0:	9416      	str	r4, [sp, #88]	; 0x58
 8003af2:	68b8      	ldr	r0, [r7, #8]
 8003af4:	9015      	str	r0, [sp, #84]	; 0x54
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	9314      	str	r3, [sp, #80]	; 0x50
 8003afa:	6939      	ldr	r1, [r7, #16]
 8003afc:	9113      	str	r1, [sp, #76]	; 0x4c
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	9212      	str	r2, [sp, #72]	; 0x48
 8003b02:	69be      	ldr	r6, [r7, #24]
 8003b04:	9611      	str	r6, [sp, #68]	; 0x44
 8003b06:	69fd      	ldr	r5, [r7, #28]
 8003b08:	9510      	str	r5, [sp, #64]	; 0x40
 8003b0a:	6a3c      	ldr	r4, [r7, #32]
 8003b0c:	940f      	str	r4, [sp, #60]	; 0x3c
 8003b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b10:	900e      	str	r0, [sp, #56]	; 0x38
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	930d      	str	r3, [sp, #52]	; 0x34
 8003b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b18:	910c      	str	r1, [sp, #48]	; 0x30
 8003b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1c:	920b      	str	r2, [sp, #44]	; 0x2c
 8003b1e:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8003b20:	960a      	str	r6, [sp, #40]	; 0x28
 8003b22:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8003b24:	9509      	str	r5, [sp, #36]	; 0x24
 8003b26:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8003b28:	9408      	str	r4, [sp, #32]
 8003b2a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b2c:	9007      	str	r0, [sp, #28]
 8003b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b30:	9306      	str	r3, [sp, #24]
 8003b32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003b34:	9105      	str	r1, [sp, #20]
 8003b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b38:	9204      	str	r2, [sp, #16]
 8003b3a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8003b3c:	9603      	str	r6, [sp, #12]
 8003b3e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8003b40:	9502      	str	r5, [sp, #8]
 8003b42:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003b44:	9401      	str	r4, [sp, #4]
 8003b46:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003b48:	9000      	str	r0, [sp, #0]
 8003b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b4e:	4905      	ldr	r1, [pc, #20]	; (8003b64 <ShowWhStats+0x158>)
 8003b50:	4805      	ldr	r0, [pc, #20]	; (8003b68 <ShowWhStats+0x15c>)
 8003b52:	f00b f959 	bl	800ee08 <siprintf>
    );
}
 8003b56:	bf00      	nop
 8003b58:	376c      	adds	r7, #108	; 0x6c
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20005a34 	.word	0x20005a34
 8003b64:	08013e38 	.word	0x08013e38
 8003b68:	20005dc4 	.word	0x20005dc4

08003b6c <PrintfCalData>:

void PrintfCalData(void)
{
 8003b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6e:	b08b      	sub	sp, #44	; 0x2c
 8003b70:	af08      	add	r7, sp, #32
	sprintf(TxBuffer, "Cal Data: Indicator %u:   "
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <PrintfCalData+0x50>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <PrintfCalData+0x50>)
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <PrintfCalData+0x50>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4a0e      	ldr	r2, [pc, #56]	; (8003bbc <PrintfCalData+0x50>)
 8003b84:	68d2      	ldr	r2, [r2, #12]
 8003b86:	490d      	ldr	r1, [pc, #52]	; (8003bbc <PrintfCalData+0x50>)
 8003b88:	6909      	ldr	r1, [r1, #16]
 8003b8a:	480c      	ldr	r0, [pc, #48]	; (8003bbc <PrintfCalData+0x50>)
 8003b8c:	6940      	ldr	r0, [r0, #20]
 8003b8e:	4c0b      	ldr	r4, [pc, #44]	; (8003bbc <PrintfCalData+0x50>)
 8003b90:	69a4      	ldr	r4, [r4, #24]
 8003b92:	4d0a      	ldr	r5, [pc, #40]	; (8003bbc <PrintfCalData+0x50>)
 8003b94:	69ed      	ldr	r5, [r5, #28]
 8003b96:	4e09      	ldr	r6, [pc, #36]	; (8003bbc <PrintfCalData+0x50>)
 8003b98:	6a36      	ldr	r6, [r6, #32]
 8003b9a:	9606      	str	r6, [sp, #24]
 8003b9c:	9505      	str	r5, [sp, #20]
 8003b9e:	9404      	str	r4, [sp, #16]
 8003ba0:	9003      	str	r0, [sp, #12]
 8003ba2:	9102      	str	r1, [sp, #8]
 8003ba4:	9201      	str	r2, [sp, #4]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4904      	ldr	r1, [pc, #16]	; (8003bc0 <PrintfCalData+0x54>)
 8003bae:	4805      	ldr	r0, [pc, #20]	; (8003bc4 <PrintfCalData+0x58>)
 8003bb0:	f00b f92a 	bl	800ee08 <siprintf>
	    	,(int )CalibrationValues.Inv_current_off, (int )CalibrationValues.PV_current_off
	    	,(int )CalibrationValues.PV_voltage, (int )CalibrationValues.Batt_voltage
	    	,(int )CalibrationValues.NTC1_PCB, (int )CalibrationValues.NTC2_Inverter_mos
	    	,(int )CalibrationValues.NTC3_Battery_mos, (int )CalibrationValues.VrefInt
	        );
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bbc:	20005c70 	.word	0x20005c70
 8003bc0:	08013fe0 	.word	0x08013fe0
 8003bc4:	20005dc4 	.word	0x20005dc4

08003bc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bca:	b09f      	sub	sp, #124	; 0x7c
 8003bcc:	af10      	add	r7, sp, #64	; 0x40
 8003bce:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* USER CODE BEGIN 5 */
	uint16_t TxSize = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	86fb      	strh	r3, [r7, #54]	; 0x36

	InverterMOS_ON();
 8003bd4:	f7fe fcae 	bl	8002534 <InverterMOS_ON>
	HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 0);		//turn ON power for op amp and other stuff
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be2:	f003 fa5d 	bl	80070a0 <HAL_GPIO_WritePin>
	RestoreStatisticsFromFLASH();
 8003be6:	f7fd ff15 	bl	8001a14 <RestoreStatisticsFromFLASH>
	RestoreCalValuesFromFLASH();
 8003bea:	f7fd fe93 	bl	8001914 <RestoreCalValuesFromFLASH>
	HAL_UART_MspInit(&huart1);
 8003bee:	48a5      	ldr	r0, [pc, #660]	; (8003e84 <StartDefaultTask+0x2bc>)
 8003bf0:	f000 fe0a 	bl	8004808 <HAL_UART_MspInit>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8003bf4:	4ba3      	ldr	r3, [pc, #652]	; (8003e84 <StartDefaultTask+0x2bc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4ba2      	ldr	r3, [pc, #648]	; (8003e84 <StartDefaultTask+0x2bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0210 	orr.w	r2, r2, #16
 8003c02:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, RxBuffer, RX_BFR_SIZE);
 8003c04:	227f      	movs	r2, #127	; 0x7f
 8003c06:	49a0      	ldr	r1, [pc, #640]	; (8003e88 <StartDefaultTask+0x2c0>)
 8003c08:	489e      	ldr	r0, [pc, #632]	; (8003e84 <StartDefaultTask+0x2bc>)
 8003c0a:	f005 fdf9 	bl	8009800 <HAL_UART_Receive_DMA>
	  //HAL_UART_MspDeInit();
#if HW_VER > 01
	BackupPowerON();
 8003c0e:	f7fe fb51 	bl	80022b4 <BackupPowerON>
#endif
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003c12:	217f      	movs	r1, #127	; 0x7f
 8003c14:	489d      	ldr	r0, [pc, #628]	; (8003e8c <StartDefaultTask+0x2c4>)
 8003c16:	f002 fa69 	bl	80060ec <HAL_ADCEx_Calibration_Start>
	osDelay(50);
 8003c1a:	2032      	movs	r0, #50	; 0x32
 8003c1c:	f007 f9b7 	bl	800af8e <osDelay>
	if (HAL_ADC_Start_DMA(&hadc1, &Adc1RawReadings.Inv_current , sizeof(Adc1RawReadings)/sizeof(uint32_t)) != HAL_OK) return ;
 8003c20:	2208      	movs	r2, #8
 8003c22:	499b      	ldr	r1, [pc, #620]	; (8003e90 <StartDefaultTask+0x2c8>)
 8003c24:	4899      	ldr	r0, [pc, #612]	; (8003e8c <StartDefaultTask+0x2c4>)
 8003c26:	f001 fc39 	bl	800549c <HAL_ADC_Start_DMA>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f040 835d 	bne.w	80042ec <StartDefaultTask+0x724>

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8003c32:	2201      	movs	r2, #1
 8003c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c38:	4896      	ldr	r0, [pc, #600]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003c3a:	f003 fa31 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c44:	4893      	ldr	r0, [pc, #588]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003c46:	f003 fa2b 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c50:	4890      	ldr	r0, [pc, #576]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003c52:	f003 fa25 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8003c56:	2201      	movs	r2, #1
 8003c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c5c:	488d      	ldr	r0, [pc, #564]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003c5e:	f003 fa1f 	bl	80070a0 <HAL_GPIO_WritePin>
	PrintConfig2TxBuffer();
 8003c62:	f7ff fdf5 	bl	8003850 <PrintConfig2TxBuffer>
	TxSize = strlen(TxBuffer);
 8003c66:	488c      	ldr	r0, [pc, #560]	; (8003e98 <StartDefaultTask+0x2d0>)
 8003c68:	f7fc fab2 	bl	80001d0 <strlen>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	86fb      	strh	r3, [r7, #54]	; 0x36
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8003c70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c72:	461a      	mov	r2, r3
 8003c74:	4988      	ldr	r1, [pc, #544]	; (8003e98 <StartDefaultTask+0x2d0>)
 8003c76:	4883      	ldr	r0, [pc, #524]	; (8003e84 <StartDefaultTask+0x2bc>)
 8003c78:	f005 fd32 	bl	80096e0 <HAL_UART_Transmit_DMA>
	//BatteryMOS_ON();
	//BatteryMOS_OFF();
	//InverterMOS_OFF();
    //InverterMOS_ON();
	osDelay(5);
 8003c7c:	2005      	movs	r0, #5
 8003c7e:	f007 f986 	bl	800af8e <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8003c82:	2200      	movs	r2, #0
 8003c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c88:	4882      	ldr	r0, [pc, #520]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003c8a:	f003 fa09 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c94:	487f      	ldr	r0, [pc, #508]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003c96:	f003 fa03 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ca0:	487c      	ldr	r0, [pc, #496]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003ca2:	f003 f9fd 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cac:	4879      	ldr	r0, [pc, #484]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003cae:	f003 f9f7 	bl	80070a0 <HAL_GPIO_WritePin>
	ReadConfig();
 8003cb2:	f7fe fab9 	bl	8002228 <ReadConfig>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ConfigReg & 0b00000001);
 8003cb6:	4b79      	ldr	r3, [pc, #484]	; (8003e9c <StartDefaultTask+0x2d4>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cc6:	4873      	ldr	r0, [pc, #460]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003cc8:	f003 f9ea 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ConfigReg & 0b00000010);
 8003ccc:	4b73      	ldr	r3, [pc, #460]	; (8003e9c <StartDefaultTask+0x2d4>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cdc:	486d      	ldr	r0, [pc, #436]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003cde:	f003 f9df 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ConfigReg & 0b00000100);
 8003ce2:	4b6e      	ldr	r3, [pc, #440]	; (8003e9c <StartDefaultTask+0x2d4>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cf2:	4868      	ldr	r0, [pc, #416]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003cf4:	f003 f9d4 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ConfigReg & 0b00001000);
 8003cf8:	4b68      	ldr	r3, [pc, #416]	; (8003e9c <StartDefaultTask+0x2d4>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d08:	4862      	ldr	r0, [pc, #392]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003d0a:	f003 f9c9 	bl	80070a0 <HAL_GPIO_WritePin>
	osDelay(50);
 8003d0e:	2032      	movs	r0, #50	; 0x32
 8003d10:	f007 f93d 	bl	800af8e <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8003d14:	2200      	movs	r2, #0
 8003d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d1a:	485e      	ldr	r0, [pc, #376]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003d1c:	f003 f9c0 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8003d20:	2200      	movs	r2, #0
 8003d22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d26:	485b      	ldr	r0, [pc, #364]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003d28:	f003 f9ba 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d32:	4858      	ldr	r0, [pc, #352]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003d34:	f003 f9b4 	bl	80070a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d3e:	4855      	ldr	r0, [pc, #340]	; (8003e94 <StartDefaultTask+0x2cc>)
 8003d40:	f003 f9ae 	bl	80070a0 <HAL_GPIO_WritePin>
    PrintFlashStats2TxBuffer();
 8003d44:	f7ff fdbc 	bl	80038c0 <PrintFlashStats2TxBuffer>
    TxSize = strlen(TxBuffer);
 8003d48:	4853      	ldr	r0, [pc, #332]	; (8003e98 <StartDefaultTask+0x2d0>)
 8003d4a:	f7fc fa41 	bl	80001d0 <strlen>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	86fb      	strh	r3, [r7, #54]	; 0x36
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8003d52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d54:	461a      	mov	r2, r3
 8003d56:	4950      	ldr	r1, [pc, #320]	; (8003e98 <StartDefaultTask+0x2d0>)
 8003d58:	484a      	ldr	r0, [pc, #296]	; (8003e84 <StartDefaultTask+0x2bc>)
 8003d5a:	f005 fcc1 	bl	80096e0 <HAL_UART_Transmit_DMA>
	osDelay(20);
 8003d5e:	2014      	movs	r0, #20
 8003d60:	f007 f915 	bl	800af8e <osDelay>
    PrintfCalData();
 8003d64:	f7ff ff02 	bl	8003b6c <PrintfCalData>
    TxSize = strlen(TxBuffer);
 8003d68:	484b      	ldr	r0, [pc, #300]	; (8003e98 <StartDefaultTask+0x2d0>)
 8003d6a:	f7fc fa31 	bl	80001d0 <strlen>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	86fb      	strh	r3, [r7, #54]	; 0x36
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8003d72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d74:	461a      	mov	r2, r3
 8003d76:	4948      	ldr	r1, [pc, #288]	; (8003e98 <StartDefaultTask+0x2d0>)
 8003d78:	4842      	ldr	r0, [pc, #264]	; (8003e84 <StartDefaultTask+0x2bc>)
 8003d7a:	f005 fcb1 	bl	80096e0 <HAL_UART_Transmit_DMA>
    osTimerStart(myTimer01Handle, 100);		//start timer
 8003d7e:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <StartDefaultTask+0x2d8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2164      	movs	r1, #100	; 0x64
 8003d84:	4618      	mov	r0, r3
 8003d86:	f007 f9af 	bl	800b0e8 <osTimerStart>
    StatCurrentWh.Chg_Ah_current=0;
 8003d8a:	4b46      	ldr	r3, [pc, #280]	; (8003ea4 <StartDefaultTask+0x2dc>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    StatCurrentWh.Dschg_Ah_current=0;
 8003d92:	4b44      	ldr	r3, [pc, #272]	; (8003ea4 <StartDefaultTask+0x2dc>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	67da      	str	r2, [r3, #124]	; 0x7c
    StatCountFlagsWs.Dschg_cycle_c2 = 1; 	//block saving dsch data before charging battery (in case of discharged battery during cloudy evenings with multiple possible controller restarts)
 8003d98:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <StartDefaultTask+0x2e0>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    StatCountFlagsWs.Dschg_cycle_count = 1;	//block saving dsch stats before even starting battery charge
 8003d9e:	4b42      	ldr	r3, [pc, #264]	; (8003ea8 <StartDefaultTask+0x2e0>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24
    StatCountFlagsWs.ChgStatSaved = 1; 		//chg stats update only after actual charge; prevents any stats update during evening restarts
 8003da4:	4b40      	ldr	r3, [pc, #256]	; (8003ea8 <StartDefaultTask+0x2e0>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
    Adc1Measurements.Batt_voltage = 350;	//strange behavior when restarting at dusk with alkl measurements cleared
 8003daa:	4b40      	ldr	r3, [pc, #256]	; (8003eac <StartDefaultTask+0x2e4>)
 8003dac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003db0:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {

	osDelay(90);		//one second delay
 8003db2:	205a      	movs	r0, #90	; 0x5a
 8003db4:	f007 f8eb 	bl	800af8e <osDelay>
    HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 0);		//turn ON power for op amp and other stuff; just before soft timer starts
 8003db8:	2200      	movs	r2, #0
 8003dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc2:	f003 f96d 	bl	80070a0 <HAL_GPIO_WritePin>
    while (!FlagRunMainLoop) {osDelay(2);};		//synchronizing timer with main loop
 8003dc6:	e002      	b.n	8003dce <StartDefaultTask+0x206>
 8003dc8:	2002      	movs	r0, #2
 8003dca:	f007 f8e0 	bl	800af8e <osDelay>
 8003dce:	4b38      	ldr	r3, [pc, #224]	; (8003eb0 <StartDefaultTask+0x2e8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f8      	beq.n	8003dc8 <StartDefaultTask+0x200>
    //diabling pwr for op amp must be synchronized with ADC. for now permanently ON.
    //HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 1);		//turn OFF power for op amp and other stuff; when procedure is complete
    if (Flag_ShowStats == 3)
 8003dd6:	4b37      	ldr	r3, [pc, #220]	; (8003eb4 <StartDefaultTask+0x2ec>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d105      	bne.n	8003dea <StartDefaultTask+0x222>
    {
        Flag_ShowStats = 2;
 8003dde:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <StartDefaultTask+0x2ec>)
 8003de0:	2202      	movs	r2, #2
 8003de2:	601a      	str	r2, [r3, #0]
        ShowWhStats();
 8003de4:	f7ff fe12 	bl	8003a0c <ShowWhStats>
 8003de8:	e0ea      	b.n	8003fc0 <StartDefaultTask+0x3f8>
    }
    else if (Flag_ShowStats == 2)
 8003dea:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <StartDefaultTask+0x2ec>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d134      	bne.n	8003e5c <StartDefaultTask+0x294>
    {
    	Flag_ShowStats = 1;
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <StartDefaultTask+0x2ec>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
        		"WsBattNoInv %u; Ws_BattOut %u, "
        		"WsBattRech %u; Ws_Inv %u, "
    			"DuskTime %u, DayDuration_cur %u, "
    			"ChgmAs %u, DchgmAs %u"
        		"\r\n"
        ,(unsigned int )StatCurrentWs.Time_NightTime, (unsigned int )StatCurrentWs.Time_NoBattery2Chg, (unsigned int )StatCurrentWs.Time_NoInv
 8003df8:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003e00:	6a19      	ldr	r1, [r3, #32]
 8003e02:	6279      	str	r1, [r7, #36]	; 0x24
 8003e04:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003e06:	699b      	ldr	r3, [r3, #24]
    	,(unsigned int )StatCurrentWs.Ws_BattIn
 8003e08:	4a2b      	ldr	r2, [pc, #172]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003e0a:	6812      	ldr	r2, [r2, #0]
        ,(unsigned int )StatCurrentWs.Ws_BattNoInv, (unsigned int )StatCurrentWs.Ws_BattOut
 8003e0c:	492a      	ldr	r1, [pc, #168]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003e0e:	6849      	ldr	r1, [r1, #4]
 8003e10:	4829      	ldr	r0, [pc, #164]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003e12:	68c0      	ldr	r0, [r0, #12]
 8003e14:	6238      	str	r0, [r7, #32]
    	,(unsigned int )StatCurrentWs.Ws_BattRecharge, (unsigned int )StatCurrentWs.Ws_Inverter
 8003e16:	4c28      	ldr	r4, [pc, #160]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003e18:	6924      	ldr	r4, [r4, #16]
 8003e1a:	4d27      	ldr	r5, [pc, #156]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003e1c:	68ad      	ldr	r5, [r5, #8]
		,(unsigned int)StatCurrentWs.Time_DuskTime, (unsigned int)StatCurrentWh.DayDuration_current
 8003e1e:	4e26      	ldr	r6, [pc, #152]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003e20:	6d76      	ldr	r6, [r6, #84]	; 0x54
 8003e22:	4820      	ldr	r0, [pc, #128]	; (8003ea4 <StartDefaultTask+0x2dc>)
 8003e24:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 8003e28:	61f8      	str	r0, [r7, #28]
		,(unsigned int)StatCurrentWs.ChgAs, (unsigned int)StatCurrentWs.DschgAs
 8003e2a:	4823      	ldr	r0, [pc, #140]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003e2c:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003e2e:	61b8      	str	r0, [r7, #24]
 8003e30:	4821      	ldr	r0, [pc, #132]	; (8003eb8 <StartDefaultTask+0x2f0>)
 8003e32:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    	sprintf(TxBuffer, "Ws.TNightTime %u,TNoBat2Chg %u,TNoInv %u, "
 8003e34:	9009      	str	r0, [sp, #36]	; 0x24
 8003e36:	69b8      	ldr	r0, [r7, #24]
 8003e38:	9008      	str	r0, [sp, #32]
 8003e3a:	69f8      	ldr	r0, [r7, #28]
 8003e3c:	9007      	str	r0, [sp, #28]
 8003e3e:	9606      	str	r6, [sp, #24]
 8003e40:	9505      	str	r5, [sp, #20]
 8003e42:	9404      	str	r4, [sp, #16]
 8003e44:	6a38      	ldr	r0, [r7, #32]
 8003e46:	9003      	str	r0, [sp, #12]
 8003e48:	9102      	str	r1, [sp, #8]
 8003e4a:	9201      	str	r2, [sp, #4]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e52:	491a      	ldr	r1, [pc, #104]	; (8003ebc <StartDefaultTask+0x2f4>)
 8003e54:	4810      	ldr	r0, [pc, #64]	; (8003e98 <StartDefaultTask+0x2d0>)
 8003e56:	f00a ffd7 	bl	800ee08 <siprintf>
 8003e5a:	e0b1      	b.n	8003fc0 <StartDefaultTask+0x3f8>
        );
    }
    else if (Flag_ShowStats == 4)	//show flash stats
 8003e5c:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <StartDefaultTask+0x2ec>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d105      	bne.n	8003e70 <StartDefaultTask+0x2a8>
    {
    	PrintFlashStats2TxBuffer();
 8003e64:	f7ff fd2c 	bl	80038c0 <PrintFlashStats2TxBuffer>
    	Flag_ShowStats = 0;
 8003e68:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <StartDefaultTask+0x2ec>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e0a7      	b.n	8003fc0 <StartDefaultTask+0x3f8>
    }
    else if (Flag_ShowStats == 5)		//show config
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <StartDefaultTask+0x2ec>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b05      	cmp	r3, #5
 8003e76:	d123      	bne.n	8003ec0 <StartDefaultTask+0x2f8>
    {
    	PrintConfig2TxBuffer();
 8003e78:	f7ff fcea 	bl	8003850 <PrintConfig2TxBuffer>
    	Flag_ShowStats = 0;
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <StartDefaultTask+0x2ec>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e09d      	b.n	8003fc0 <StartDefaultTask+0x3f8>
 8003e84:	20005bec 	.word	0x20005bec
 8003e88:	20005d40 	.word	0x20005d40
 8003e8c:	20005b40 	.word	0x20005b40
 8003e90:	200061cc 	.word	0x200061cc
 8003e94:	48000400 	.word	0x48000400
 8003e98:	20005dc4 	.word	0x20005dc4
 8003e9c:	2000599c 	.word	0x2000599c
 8003ea0:	20005dc0 	.word	0x20005dc0
 8003ea4:	20005a34 	.word	0x20005a34
 8003ea8:	200059c4 	.word	0x200059c4
 8003eac:	200059a0 	.word	0x200059a0
 8003eb0:	20000268 	.word	0x20000268
 8003eb4:	20000264 	.word	0x20000264
 8003eb8:	20005c98 	.word	0x20005c98
 8003ebc:	0801407c 	.word	0x0801407c
    }
    else if (Flag_ShowStats == 1)		//show current Values
 8003ec0:	4b79      	ldr	r3, [pc, #484]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d151      	bne.n	8003f6c <StartDefaultTask+0x3a4>
	{
    	Flag_ShowStats = 0;
 8003ec8:	4b77      	ldr	r3, [pc, #476]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
				"temp PCB %u; invMOS %u; batMOS %u, "
				" mAInv %u; mAPV %u; "
				"VPV %u; VBat %u; "
				"Ext_I %u, Time2RInv %u, BlankT2RI %u"
				"\r\n"
		,(unsigned int )Uptime.days, (unsigned int )Uptime.hours, (unsigned int )Uptime.minutes, (unsigned int )Uptime.seconds
 8003ece:	4b77      	ldr	r3, [pc, #476]	; (80040ac <StartDefaultTask+0x4e4>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed4:	4b75      	ldr	r3, [pc, #468]	; (80040ac <StartDefaultTask+0x4e4>)
 8003ed6:	6899      	ldr	r1, [r3, #8]
 8003ed8:	6279      	str	r1, [r7, #36]	; 0x24
 8003eda:	4b74      	ldr	r3, [pc, #464]	; (80040ac <StartDefaultTask+0x4e4>)
 8003edc:	685d      	ldr	r5, [r3, #4]
 8003ede:	4b73      	ldr	r3, [pc, #460]	; (80040ac <StartDefaultTask+0x4e4>)
 8003ee0:	681e      	ldr	r6, [r3, #0]
		sprintf(TxBuffer, "%u d %u h %u m %u s "
 8003ee2:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <StartDefaultTask+0x4e8>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	623b      	str	r3, [r7, #32]
 8003ee8:	4b72      	ldr	r3, [pc, #456]	; (80040b4 <StartDefaultTask+0x4ec>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	61f8      	str	r0, [r7, #28]
 8003eee:	4b72      	ldr	r3, [pc, #456]	; (80040b8 <StartDefaultTask+0x4f0>)
 8003ef0:	681c      	ldr	r4, [r3, #0]
 8003ef2:	61bc      	str	r4, [r7, #24]
 8003ef4:	4b71      	ldr	r3, [pc, #452]	; (80040bc <StartDefaultTask+0x4f4>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	617a      	str	r2, [r7, #20]
		,(unsigned int )ConfigReg
		,(unsigned int )FlagInverterMOS, (unsigned int )FlagBatteryMOS, (unsigned int)FlagBackupMOS
		,(unsigned int )Adc1Measurements.NTC1_PCB, (unsigned int )Adc1Measurements.NTC2_Inverter_mos, (unsigned int )Adc1Measurements.NTC3_Battery_mos
 8003efa:	4b71      	ldr	r3, [pc, #452]	; (80040c0 <StartDefaultTask+0x4f8>)
 8003efc:	6919      	ldr	r1, [r3, #16]
 8003efe:	6139      	str	r1, [r7, #16]
 8003f00:	4b6f      	ldr	r3, [pc, #444]	; (80040c0 <StartDefaultTask+0x4f8>)
 8003f02:	6958      	ldr	r0, [r3, #20]
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	4b6e      	ldr	r3, [pc, #440]	; (80040c0 <StartDefaultTask+0x4f8>)
 8003f08:	699c      	ldr	r4, [r3, #24]
 8003f0a:	60bc      	str	r4, [r7, #8]
		,(unsigned int)Adc1Measurements.Inv_current
 8003f0c:	4b6c      	ldr	r3, [pc, #432]	; (80040c0 <StartDefaultTask+0x4f8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	607b      	str	r3, [r7, #4]
		,(unsigned int)Adc1Measurements.PV_current
 8003f12:	4b6b      	ldr	r3, [pc, #428]	; (80040c0 <StartDefaultTask+0x4f8>)
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	603a      	str	r2, [r7, #0]
		,(unsigned int)Adc1Measurements.PV_voltage
 8003f18:	4b69      	ldr	r3, [pc, #420]	; (80040c0 <StartDefaultTask+0x4f8>)
 8003f1a:	689c      	ldr	r4, [r3, #8]
		,(unsigned int)Adc1Measurements.Batt_voltage	// (unsigned int)Adc1Measurements.Batt_voltage%100
 8003f1c:	4b68      	ldr	r3, [pc, #416]	; (80040c0 <StartDefaultTask+0x4f8>)
 8003f1e:	68d8      	ldr	r0, [r3, #12]
		sprintf(TxBuffer, "%u d %u h %u m %u s "
 8003f20:	4b68      	ldr	r3, [pc, #416]	; (80040c4 <StartDefaultTask+0x4fc>)
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	4b68      	ldr	r3, [pc, #416]	; (80040c8 <StartDefaultTask+0x500>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b68      	ldr	r3, [pc, #416]	; (80040cc <StartDefaultTask+0x504>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f2e:	920e      	str	r2, [sp, #56]	; 0x38
 8003f30:	910d      	str	r1, [sp, #52]	; 0x34
 8003f32:	900c      	str	r0, [sp, #48]	; 0x30
 8003f34:	940b      	str	r4, [sp, #44]	; 0x2c
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	920a      	str	r2, [sp, #40]	; 0x28
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f3e:	68bc      	ldr	r4, [r7, #8]
 8003f40:	9408      	str	r4, [sp, #32]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	9007      	str	r0, [sp, #28]
 8003f46:	6939      	ldr	r1, [r7, #16]
 8003f48:	9106      	str	r1, [sp, #24]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	9205      	str	r2, [sp, #20]
 8003f4e:	69bc      	ldr	r4, [r7, #24]
 8003f50:	9404      	str	r4, [sp, #16]
 8003f52:	69f8      	ldr	r0, [r7, #28]
 8003f54:	9003      	str	r0, [sp, #12]
 8003f56:	6a38      	ldr	r0, [r7, #32]
 8003f58:	9002      	str	r0, [sp, #8]
 8003f5a:	9601      	str	r6, [sp, #4]
 8003f5c:	9500      	str	r5, [sp, #0]
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f62:	495b      	ldr	r1, [pc, #364]	; (80040d0 <StartDefaultTask+0x508>)
 8003f64:	485b      	ldr	r0, [pc, #364]	; (80040d4 <StartDefaultTask+0x50c>)
 8003f66:	f00a ff4f 	bl	800ee08 <siprintf>
 8003f6a:	e029      	b.n	8003fc0 <StartDefaultTask+0x3f8>
		,(unsigned int)FlagExt_I, (unsigned int)TimeToResetInv, (unsigned int)BlankingTimeToResetInv
		);
	}
    else if (Flag_ShowStats == 62)	//show calibration data
 8003f6c:	4b4e      	ldr	r3, [pc, #312]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b3e      	cmp	r3, #62	; 0x3e
 8003f72:	d10b      	bne.n	8003f8c <StartDefaultTask+0x3c4>
    {
    	PrintfCalData();
 8003f74:	f7ff fdfa 	bl	8003b6c <PrintfCalData>
    	if (Flag_ShowStats) Flag_ShowStats--;
 8003f78:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01f      	beq.n	8003fc0 <StartDefaultTask+0x3f8>
 8003f80:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	4a48      	ldr	r2, [pc, #288]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e019      	b.n	8003fc0 <StartDefaultTask+0x3f8>
    }
    else if (Flag_ShowStats == 60)		//show help
 8003f8c:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b3c      	cmp	r3, #60	; 0x3c
 8003f92:	d109      	bne.n	8003fa8 <StartDefaultTask+0x3e0>
    {
    	if (Flag_ShowStats) Flag_ShowStats--;
 8003f94:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d011      	beq.n	8003fc0 <StartDefaultTask+0x3f8>
 8003f9c:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	4a41      	ldr	r2, [pc, #260]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e00b      	b.n	8003fc0 <StartDefaultTask+0x3f8>
    }
    else
    {
    	if (Flag_ShowStats) Flag_ShowStats--;
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <StartDefaultTask+0x3f2>
 8003fb0:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	4a3c      	ldr	r2, [pc, #240]	; (80040a8 <StartDefaultTask+0x4e0>)
 8003fb8:	6013      	str	r3, [r2, #0]
    	TxBuffer[0]=0;
 8003fba:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <StartDefaultTask+0x50c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
    }
//    TxSize = strlen(TxBuffer);
//    if (TxSize>TX_BFR_SIZE) TxSize=TX_BFR_SIZE;
//    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
    sprintf(TxBuffer+strlen(TxBuffer)-2, "; _d_");
 8003fc0:	4844      	ldr	r0, [pc, #272]	; (80040d4 <StartDefaultTask+0x50c>)
 8003fc2:	f7fc f905 	bl	80001d0 <strlen>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	3b02      	subs	r3, #2
 8003fca:	4a42      	ldr	r2, [pc, #264]	; (80040d4 <StartDefaultTask+0x50c>)
 8003fcc:	4413      	add	r3, r2
 8003fce:	4942      	ldr	r1, [pc, #264]	; (80040d8 <StartDefaultTask+0x510>)
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f00a ff19 	bl	800ee08 <siprintf>
    if (Flag_StoreStatistics)
 8003fd6:	4b41      	ldr	r3, [pc, #260]	; (80040dc <StartDefaultTask+0x514>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00e      	beq.n	8003ffc <StartDefaultTask+0x434>
    	{
    	DEBUG_PRINT ("M1,");
 8003fde:	483d      	ldr	r0, [pc, #244]	; (80040d4 <StartDefaultTask+0x50c>)
 8003fe0:	f7fc f8f6 	bl	80001d0 <strlen>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <StartDefaultTask+0x50c>)
 8003fe8:	4413      	add	r3, r2
 8003fea:	493d      	ldr	r1, [pc, #244]	; (80040e0 <StartDefaultTask+0x518>)
 8003fec:	4618      	mov	r0, r3
 8003fee:	f00a ff0b 	bl	800ee08 <siprintf>
    	StoreStatistics2FLASH();
 8003ff2:	f7fd fd9f 	bl	8001b34 <StoreStatistics2FLASH>
    		Flag_StoreStatistics=0;
 8003ff6:	4b39      	ldr	r3, [pc, #228]	; (80040dc <StartDefaultTask+0x514>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
    	}

    /*main algorithm*/
    //**************************************CONFIG ENERGY TO MAINS************************************
    if (ConfigReg < CONFIG_BATT_0DELAY)
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <StartDefaultTask+0x4e8>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b06      	cmp	r3, #6
 8004002:	d83e      	bhi.n	8004082 <StartDefaultTask+0x4ba>
    {
    	//is OK to switch on INV mosfet?
    	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 8004004:	4b2e      	ldr	r3, [pc, #184]	; (80040c0 <StartDefaultTask+0x4f8>)
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	2b46      	cmp	r3, #70	; 0x46
 800400a:	d905      	bls.n	8004018 <StartDefaultTask+0x450>
    	{//no, its too hot
    		ConfigReg = CONFIG_BATT_0DELAY;	//config changed 'energy to battery'
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <StartDefaultTask+0x4e8>)
 800400e:	2207      	movs	r2, #7
 8004010:	701a      	strb	r2, [r3, #0]
			InverterMOS_OFF();		//OVT for InvMosfet usually happens during battery discharge
 8004012:	f7fe faa7 	bl	8002564 <InverterMOS_OFF>
 8004016:	e14c      	b.n	80042b2 <StartDefaultTask+0x6ea>
    	else
    	{//yes, you can switch on INV mosfet
    		//is it day?
    		//caution: too high PV_CURRENT_MIN causes troublesome starting at dawn, controllers disables BATMOSON (batt discharged) but PV current is too weak to keep INVerter operational
    		//too low PV_CURRENT_MIN causes troublesome change operation mode at dusk - inverter causes restarts of controller overloading weak PV current source
			if ((Adc1Measurements.PV_current > (PV_CURRENT_MIN + PVCurrentHysteresis) ||
 8004018:	4b29      	ldr	r3, [pc, #164]	; (80040c0 <StartDefaultTask+0x4f8>)
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <StartDefaultTask+0x51c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004024:	429a      	cmp	r2, r3
 8004026:	d804      	bhi.n	8004032 <StartDefaultTask+0x46a>
					Adc1Measurements.PV_voltage > PV_OCV_VOLGATE) && Adc1Measurements.PV_voltage > PV_MIN_OP_VOLTAGE)
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <StartDefaultTask+0x4f8>)
 800402a:	689b      	ldr	r3, [r3, #8]
			if ((Adc1Measurements.PV_current > (PV_CURRENT_MIN + PVCurrentHysteresis) ||
 800402c:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 8004030:	d317      	bcc.n	8004062 <StartDefaultTask+0x49a>
					Adc1Measurements.PV_voltage > PV_OCV_VOLGATE) && Adc1Measurements.PV_voltage > PV_MIN_OP_VOLTAGE)
 8004032:	4b23      	ldr	r3, [pc, #140]	; (80040c0 <StartDefaultTask+0x4f8>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800403a:	d912      	bls.n	8004062 <StartDefaultTask+0x49a>
			{//yes, its day
				DEBUG_PRINT ("M2,");
 800403c:	4825      	ldr	r0, [pc, #148]	; (80040d4 <StartDefaultTask+0x50c>)
 800403e:	f7fc f8c7 	bl	80001d0 <strlen>
 8004042:	4603      	mov	r3, r0
 8004044:	4a23      	ldr	r2, [pc, #140]	; (80040d4 <StartDefaultTask+0x50c>)
 8004046:	4413      	add	r3, r2
 8004048:	4927      	ldr	r1, [pc, #156]	; (80040e8 <StartDefaultTask+0x520>)
 800404a:	4618      	mov	r0, r3
 800404c:	f00a fedc 	bl	800ee08 <siprintf>
				PVCurrentHysteresis = 0;	//to prevent multiple switching day/night at dawn and dusk
 8004050:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <StartDefaultTask+0x51c>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
				InverterOn_batteryAsBackup();
 8004056:	f7ff f8c9 	bl	80031ec <InverterOn_batteryAsBackup>
				StatCountFlagsWs.Time_Daytime=1;		//enable to count daytime
 800405a:	4b24      	ldr	r3, [pc, #144]	; (80040ec <StartDefaultTask+0x524>)
 800405c:	2201      	movs	r2, #1
 800405e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004060:	e127      	b.n	80042b2 <StartDefaultTask+0x6ea>
			}//end of its day
    		else
    		{//no, its night
    			DEBUG_PRINT ("M3,");
 8004062:	481c      	ldr	r0, [pc, #112]	; (80040d4 <StartDefaultTask+0x50c>)
 8004064:	f7fc f8b4 	bl	80001d0 <strlen>
 8004068:	4603      	mov	r3, r0
 800406a:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <StartDefaultTask+0x50c>)
 800406c:	4413      	add	r3, r2
 800406e:	4920      	ldr	r1, [pc, #128]	; (80040f0 <StartDefaultTask+0x528>)
 8004070:	4618      	mov	r0, r3
 8004072:	f00a fec9 	bl	800ee08 <siprintf>
    			PVCurrentHysteresis = PV_CURRENT_HYST;	//to prevent multiple switching day/night at dawn and dusk
 8004076:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <StartDefaultTask+0x51c>)
 8004078:	2246      	movs	r2, #70	; 0x46
 800407a:	601a      	str	r2, [r3, #0]
    			DischargeProcedure();
 800407c:	f7ff fa9c 	bl	80035b8 <DischargeProcedure>
 8004080:	e117      	b.n	80042b2 <StartDefaultTask+0x6ea>
    		}//closing "its night"
    	}//closing "can switch INV ON"
    }//closing MAINS config
    //************************************CONFIG ENERGY TO BATTERY*********************************
    else if (ConfigReg > CONFIG_MAINS_6DELAY &&
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <StartDefaultTask+0x4e8>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b06      	cmp	r3, #6
 8004088:	f240 80f2 	bls.w	8004270 <StartDefaultTask+0x6a8>
    		ConfigReg < CONFIG_MAINS_NOBATTDSCHG)
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <StartDefaultTask+0x4e8>)
 800408e:	781b      	ldrb	r3, [r3, #0]
    else if (ConfigReg > CONFIG_MAINS_6DELAY &&
 8004090:	2b0d      	cmp	r3, #13
 8004092:	f200 80ed 	bhi.w	8004270 <StartDefaultTask+0x6a8>
    {
		//is OK to switch on battery mosfet?
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <StartDefaultTask+0x4f8>)
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b46      	cmp	r3, #70	; 0x46
 800409c:	d92a      	bls.n	80040f4 <StartDefaultTask+0x52c>
		{//no, mosfet's too hot
			ConfigReg = CONFIG_MAINS_0DELAY;	//change config energy to mains
 800409e:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <StartDefaultTask+0x4e8>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 80040a4:	e105      	b.n	80042b2 <StartDefaultTask+0x6ea>
 80040a6:	bf00      	nop
 80040a8:	20000264 	.word	0x20000264
 80040ac:	20005a24 	.word	0x20005a24
 80040b0:	2000599c 	.word	0x2000599c
 80040b4:	2000024c 	.word	0x2000024c
 80040b8:	20000248 	.word	0x20000248
 80040bc:	20000250 	.word	0x20000250
 80040c0:	200059a0 	.word	0x200059a0
 80040c4:	20000254 	.word	0x20000254
 80040c8:	20000010 	.word	0x20000010
 80040cc:	20000014 	.word	0x20000014
 80040d0:	08014128 	.word	0x08014128
 80040d4:	20005dc4 	.word	0x20005dc4
 80040d8:	080141dc 	.word	0x080141dc
 80040dc:	20000260 	.word	0x20000260
 80040e0:	080141e4 	.word	0x080141e4
 80040e4:	2000000c 	.word	0x2000000c
 80040e8:	080141e8 	.word	0x080141e8
 80040ec:	200059c4 	.word	0x200059c4
 80040f0:	080141ec 	.word	0x080141ec
		}
		else
		{//yes, you can switch on battery mosfet
			//is it a day?
			if ((Adc1Measurements.PV_current > (PV_CURRENT_MIN + PVCurrentHysteresis) ||
 80040f4:	4b7f      	ldr	r3, [pc, #508]	; (80042f4 <StartDefaultTask+0x72c>)
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	4b7f      	ldr	r3, [pc, #508]	; (80042f8 <StartDefaultTask+0x730>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004100:	429a      	cmp	r2, r3
 8004102:	d805      	bhi.n	8004110 <StartDefaultTask+0x548>
					Adc1Measurements.PV_voltage > PV_OCV_VOLGATE) && Adc1Measurements.PV_voltage > PV_MIN_OP_VOLTAGE)
 8004104:	4b7b      	ldr	r3, [pc, #492]	; (80042f4 <StartDefaultTask+0x72c>)
 8004106:	689b      	ldr	r3, [r3, #8]
			if ((Adc1Measurements.PV_current > (PV_CURRENT_MIN + PVCurrentHysteresis) ||
 8004108:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 800410c:	f0c0 809e 	bcc.w	800424c <StartDefaultTask+0x684>
					Adc1Measurements.PV_voltage > PV_OCV_VOLGATE) && Adc1Measurements.PV_voltage > PV_MIN_OP_VOLTAGE)
 8004110:	4b78      	ldr	r3, [pc, #480]	; (80042f4 <StartDefaultTask+0x72c>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8004118:	f240 8098 	bls.w	800424c <StartDefaultTask+0x684>
			{//yes, its day
				DEBUG_PRINT ("M4,");
 800411c:	4877      	ldr	r0, [pc, #476]	; (80042fc <StartDefaultTask+0x734>)
 800411e:	f7fc f857 	bl	80001d0 <strlen>
 8004122:	4603      	mov	r3, r0
 8004124:	4a75      	ldr	r2, [pc, #468]	; (80042fc <StartDefaultTask+0x734>)
 8004126:	4413      	add	r3, r2
 8004128:	4975      	ldr	r1, [pc, #468]	; (8004300 <StartDefaultTask+0x738>)
 800412a:	4618      	mov	r0, r3
 800412c:	f00a fe6c 	bl	800ee08 <siprintf>
				PVCurrentHysteresis = 0;	//to prevent multiple switching day/night at dawn and dusk
 8004130:	4b71      	ldr	r3, [pc, #452]	; (80042f8 <StartDefaultTask+0x730>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
				StatCountFlagsWs.Time_Daytime=1;		//enable to count daytime
 8004136:	4b73      	ldr	r3, [pc, #460]	; (8004304 <StartDefaultTask+0x73c>)
 8004138:	2201      	movs	r2, #1
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c
				//is batt OK to charge
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 800413c:	4b6d      	ldr	r3, [pc, #436]	; (80042f4 <StartDefaultTask+0x72c>)
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	4b71      	ldr	r3, [pc, #452]	; (8004308 <StartDefaultTask+0x740>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f203 1393 	addw	r3, r3, #403	; 0x193
 8004148:	429a      	cmp	r2, r3
 800414a:	d21e      	bcs.n	800418a <StartDefaultTask+0x5c2>
						Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 800414c:	4b69      	ldr	r3, [pc, #420]	; (80042f4 <StartDefaultTask+0x72c>)
 800414e:	68db      	ldr	r3, [r3, #12]
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 8004150:	2bf0      	cmp	r3, #240	; 0xf0
 8004152:	d91a      	bls.n	800418a <StartDefaultTask+0x5c2>
				{//yes, ok to charge
					DEBUG_PRINT ("M5,");
 8004154:	4869      	ldr	r0, [pc, #420]	; (80042fc <StartDefaultTask+0x734>)
 8004156:	f7fc f83b 	bl	80001d0 <strlen>
 800415a:	4603      	mov	r3, r0
 800415c:	4a67      	ldr	r2, [pc, #412]	; (80042fc <StartDefaultTask+0x734>)
 800415e:	4413      	add	r3, r2
 8004160:	496a      	ldr	r1, [pc, #424]	; (800430c <StartDefaultTask+0x744>)
 8004162:	4618      	mov	r0, r3
 8004164:	f00a fe50 	bl	800ee08 <siprintf>
					BatteryMOS_ON();
 8004168:	f7fe f974 	bl	8002454 <BatteryMOS_ON>
					InverterMOS_OFF();
 800416c:	f7fe f9fa 	bl	8002564 <InverterMOS_OFF>
					VoltHysteresisChg = BATT_VOLTAGE_MAXHYSTERESIS;
 8004170:	4b65      	ldr	r3, [pc, #404]	; (8004308 <StartDefaultTask+0x740>)
 8004172:	2212      	movs	r2, #18
 8004174:	601a      	str	r2, [r3, #0]
					StatCountFlagsWs.Ws_BattIn=1;	//enable to count energy stored in battery, in 1Sectimer
 8004176:	4b63      	ldr	r3, [pc, #396]	; (8004304 <StartDefaultTask+0x73c>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]
					StatCountFlagsWs.Chg_cycle_count = 0;	//when battery charging unlock flag enabling counting dschg cycles
 800417c:	4b61      	ldr	r3, [pc, #388]	; (8004304 <StartDefaultTask+0x73c>)
 800417e:	2200      	movs	r2, #0
 8004180:	629a      	str	r2, [r3, #40]	; 0x28
					StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 8004182:	4b60      	ldr	r3, [pc, #384]	; (8004304 <StartDefaultTask+0x73c>)
 8004184:	2201      	movs	r2, #1
 8004186:	659a      	str	r2, [r3, #88]	; 0x58
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 8004188:	e070      	b.n	800426c <StartDefaultTask+0x6a4>
				}
				else
				{//no, batt not OK to charge
					DEBUG_PRINT ("M6,");
 800418a:	485c      	ldr	r0, [pc, #368]	; (80042fc <StartDefaultTask+0x734>)
 800418c:	f7fc f820 	bl	80001d0 <strlen>
 8004190:	4603      	mov	r3, r0
 8004192:	4a5a      	ldr	r2, [pc, #360]	; (80042fc <StartDefaultTask+0x734>)
 8004194:	4413      	add	r3, r2
 8004196:	495e      	ldr	r1, [pc, #376]	; (8004310 <StartDefaultTask+0x748>)
 8004198:	4618      	mov	r0, r3
 800419a:	f00a fe35 	bl	800ee08 <siprintf>
					InverterMOS_ON();
 800419e:	f7fe f9c9 	bl	8002534 <InverterMOS_ON>
					BatteryMOS_OFF();
 80041a2:	f7fe f997 	bl	80024d4 <BatteryMOS_OFF>
					StatCountFlagsWs.Time_NoBattery2Chg=1;	//enable to count time without possibility to charge battery, in 1Sectimer
 80041a6:	4b57      	ldr	r3, [pc, #348]	; (8004304 <StartDefaultTask+0x73c>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	621a      	str	r2, [r3, #32]
					VoltHysteresisChg = 0;
 80041ac:	4b56      	ldr	r3, [pc, #344]	; (8004308 <StartDefaultTask+0x740>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
					if ((Adc1Measurements.Batt_voltage) > (BATT_MAX_VOLTAGE+VoltHysteresisChg))
 80041b2:	4b50      	ldr	r3, [pc, #320]	; (80042f4 <StartDefaultTask+0x72c>)
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	4b54      	ldr	r3, [pc, #336]	; (8004308 <StartDefaultTask+0x740>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f203 1393 	addw	r3, r3, #403	; 0x193
 80041be:	429a      	cmp	r2, r3
 80041c0:	d954      	bls.n	800426c <StartDefaultTask+0x6a4>
					{//if battery fully charged, check if it was moment ago.
						DEBUG_PRINT ("M7,");
 80041c2:	484e      	ldr	r0, [pc, #312]	; (80042fc <StartDefaultTask+0x734>)
 80041c4:	f7fc f804 	bl	80001d0 <strlen>
 80041c8:	4603      	mov	r3, r0
 80041ca:	4a4c      	ldr	r2, [pc, #304]	; (80042fc <StartDefaultTask+0x734>)
 80041cc:	4413      	add	r3, r2
 80041ce:	4951      	ldr	r1, [pc, #324]	; (8004314 <StartDefaultTask+0x74c>)
 80041d0:	4618      	mov	r0, r3
 80041d2:	f00a fe19 	bl	800ee08 <siprintf>
						StatCurrentWh.Chg_Ah_lastFull=StatCurrentWh.Chg_Ah_current;	//store fully chg Ah
 80041d6:	4b50      	ldr	r3, [pc, #320]	; (8004318 <StartDefaultTask+0x750>)
 80041d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041dc:	4a4e      	ldr	r2, [pc, #312]	; (8004318 <StartDefaultTask+0x750>)
 80041de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
						if (!StatCountFlagsWs.Chg_cycle_c2 && StatCountFlagsWs.Chg_cycle_count)
 80041e2:	4b48      	ldr	r3, [pc, #288]	; (8004304 <StartDefaultTask+0x73c>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d118      	bne.n	800421c <StartDefaultTask+0x654>
 80041ea:	4b46      	ldr	r3, [pc, #280]	; (8004304 <StartDefaultTask+0x73c>)
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d014      	beq.n	800421c <StartDefaultTask+0x654>
						{
							DEBUG_PRINT ("M8,");
 80041f2:	4842      	ldr	r0, [pc, #264]	; (80042fc <StartDefaultTask+0x734>)
 80041f4:	f7fb ffec 	bl	80001d0 <strlen>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4a40      	ldr	r2, [pc, #256]	; (80042fc <StartDefaultTask+0x734>)
 80041fc:	4413      	add	r3, r2
 80041fe:	4947      	ldr	r1, [pc, #284]	; (800431c <StartDefaultTask+0x754>)
 8004200:	4618      	mov	r0, r3
 8004202:	f00a fe01 	bl	800ee08 <siprintf>
							StatCurrentWh.Chg_Volt_lastFull = Adc1Measurements.Batt_voltage;	//store lastvoltage
 8004206:	4b3b      	ldr	r3, [pc, #236]	; (80042f4 <StartDefaultTask+0x72c>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	4a43      	ldr	r2, [pc, #268]	; (8004318 <StartDefaultTask+0x750>)
 800420c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
							StatCountFlagsWs.Chg_cycle_c2 = 1;
 8004210:	4b3c      	ldr	r3, [pc, #240]	; (8004304 <StartDefaultTask+0x73c>)
 8004212:	2201      	movs	r2, #1
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
							StatCountFlagsWs.Dschg_cycle_c2 = 0;
 8004216:	4b3b      	ldr	r3, [pc, #236]	; (8004304 <StartDefaultTask+0x73c>)
 8004218:	2200      	movs	r2, #0
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
						}
						if (!StatCountFlagsWs.Chg_cycle_count)
 800421c:	4b39      	ldr	r3, [pc, #228]	; (8004304 <StartDefaultTask+0x73c>)
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d123      	bne.n	800426c <StartDefaultTask+0x6a4>
						{
							DEBUG_PRINT ("M9,");
 8004224:	4835      	ldr	r0, [pc, #212]	; (80042fc <StartDefaultTask+0x734>)
 8004226:	f7fb ffd3 	bl	80001d0 <strlen>
 800422a:	4603      	mov	r3, r0
 800422c:	4a33      	ldr	r2, [pc, #204]	; (80042fc <StartDefaultTask+0x734>)
 800422e:	4413      	add	r3, r2
 8004230:	493b      	ldr	r1, [pc, #236]	; (8004320 <StartDefaultTask+0x758>)
 8004232:	4618      	mov	r0, r3
 8004234:	f00a fde8 	bl	800ee08 <siprintf>
							StatCountFlagsWs.Chg_cycle_count = 1; //if not, set flag 'fully charged' to count/set only once
 8004238:	4b32      	ldr	r3, [pc, #200]	; (8004304 <StartDefaultTask+0x73c>)
 800423a:	2201      	movs	r2, #1
 800423c:	629a      	str	r2, [r3, #40]	; 0x28
							StatCountFlagsWs.Dschg_cycle_count = 0;	//clear flag to enable dschg counter when batt empty
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <StartDefaultTask+0x73c>)
 8004240:	2200      	movs	r2, #0
 8004242:	625a      	str	r2, [r3, #36]	; 0x24
							StatCurrentWh.Dschg_Ah_current=0;	//clear discharge Ah
 8004244:	4b34      	ldr	r3, [pc, #208]	; (8004318 <StartDefaultTask+0x750>)
 8004246:	2200      	movs	r2, #0
 8004248:	67da      	str	r2, [r3, #124]	; 0x7c
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 800424a:	e00f      	b.n	800426c <StartDefaultTask+0x6a4>
					}
				}
			}
			else
			{//no, its night
				DEBUG_PRINT ("M10,");
 800424c:	482b      	ldr	r0, [pc, #172]	; (80042fc <StartDefaultTask+0x734>)
 800424e:	f7fb ffbf 	bl	80001d0 <strlen>
 8004252:	4603      	mov	r3, r0
 8004254:	4a29      	ldr	r2, [pc, #164]	; (80042fc <StartDefaultTask+0x734>)
 8004256:	4413      	add	r3, r2
 8004258:	4932      	ldr	r1, [pc, #200]	; (8004324 <StartDefaultTask+0x75c>)
 800425a:	4618      	mov	r0, r3
 800425c:	f00a fdd4 	bl	800ee08 <siprintf>
				PVCurrentHysteresis = PV_CURRENT_HYST;	//to prevent multiple switching day/night at dawn and dusk
 8004260:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <StartDefaultTask+0x730>)
 8004262:	2246      	movs	r2, #70	; 0x46
 8004264:	601a      	str	r2, [r3, #0]
				DischargeProcedure();
 8004266:	f7ff f9a7 	bl	80035b8 <DischargeProcedure>
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 800426a:	e022      	b.n	80042b2 <StartDefaultTask+0x6ea>
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 800426c:	bf00      	nop
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 800426e:	e020      	b.n	80042b2 <StartDefaultTask+0x6ea>
			}//closing "its night"
		}//closing "you can switch on batt mosfet"
    }//closing "config battery"
    //************************************CONFIG Spare ENERGY TO BATTERY, but no battery discharge*********************************
    else if (ConfigReg == CONFIG_MAINS_NOBATTDSCHG)
 8004270:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <StartDefaultTask+0x760>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b0e      	cmp	r3, #14
 8004276:	d10c      	bne.n	8004292 <StartDefaultTask+0x6ca>
    {//is OK to switch on INV mosfet?
    	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <StartDefaultTask+0x72c>)
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	2b46      	cmp	r3, #70	; 0x46
 800427e:	d905      	bls.n	800428c <StartDefaultTask+0x6c4>
    	{//no, its too hot
    		ConfigReg = CONFIG_BATT_0DELAY;	//config changed 'energy to battery'
 8004280:	4b29      	ldr	r3, [pc, #164]	; (8004328 <StartDefaultTask+0x760>)
 8004282:	2207      	movs	r2, #7
 8004284:	701a      	strb	r2, [r3, #0]
			InverterMOS_OFF();		//OVT for InvMosfet usually happens during battery discharge
 8004286:	f7fe f96d 	bl	8002564 <InverterMOS_OFF>
 800428a:	e012      	b.n	80042b2 <StartDefaultTask+0x6ea>
    	}
    	else
    	{//yes, you can switch on INV mosfet
    		InverterOn_batteryAsBackup();
 800428c:	f7fe ffae 	bl	80031ec <InverterOn_batteryAsBackup>
 8004290:	e00f      	b.n	80042b2 <StartDefaultTask+0x6ea>
    	}//closing "ok to switch ON INV mosfet"
    }//closing config "spare energy to battery"
    //************************************CONFIG Spare ENERGY TO BATTERY, discharge battery immediately not waiting for night*********************************
    else if (ConfigReg == 0x0f)
 8004292:	4b25      	ldr	r3, [pc, #148]	; (8004328 <StartDefaultTask+0x760>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b0f      	cmp	r3, #15
 8004298:	d10b      	bne.n	80042b2 <StartDefaultTask+0x6ea>
    {
    	//is OK to switch on INV mosfet?
		if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 800429a:	4b16      	ldr	r3, [pc, #88]	; (80042f4 <StartDefaultTask+0x72c>)
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b46      	cmp	r3, #70	; 0x46
 80042a0:	d905      	bls.n	80042ae <StartDefaultTask+0x6e6>
		{//no, its too hot
			ConfigReg = CONFIG_BATT_0DELAY;	//config changed 'energy to battery'
 80042a2:	4b21      	ldr	r3, [pc, #132]	; (8004328 <StartDefaultTask+0x760>)
 80042a4:	2207      	movs	r2, #7
 80042a6:	701a      	strb	r2, [r3, #0]
			InverterMOS_OFF();		//OVT for InvMosfet usually happens during battery discharge
 80042a8:	f7fe f95c 	bl	8002564 <InverterMOS_OFF>
 80042ac:	e001      	b.n	80042b2 <StartDefaultTask+0x6ea>
		}
		else
		{//yes, you can switch on INV mosfet
			InvOn_DischBattAtDay();
 80042ae:	f7ff f8f9 	bl	80034a4 <InvOn_DischBattAtDay>
		}//closing "can switch INV ON"
    }//closing CONFIG 0x0F

    sprintf(TxBuffer+strlen(TxBuffer), "\r\n");
 80042b2:	4812      	ldr	r0, [pc, #72]	; (80042fc <StartDefaultTask+0x734>)
 80042b4:	f7fb ff8c 	bl	80001d0 <strlen>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4a10      	ldr	r2, [pc, #64]	; (80042fc <StartDefaultTask+0x734>)
 80042bc:	4413      	add	r3, r2
 80042be:	491b      	ldr	r1, [pc, #108]	; (800432c <StartDefaultTask+0x764>)
 80042c0:	4618      	mov	r0, r3
 80042c2:	f00a fda1 	bl	800ee08 <siprintf>
    TxSize = strlen(TxBuffer);
 80042c6:	480d      	ldr	r0, [pc, #52]	; (80042fc <StartDefaultTask+0x734>)
 80042c8:	f7fb ff82 	bl	80001d0 <strlen>
 80042cc:	4603      	mov	r3, r0
 80042ce:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (TxSize>TX_BFR_SIZE) TxSize=TX_BFR_SIZE;
 80042d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d302      	bcc.n	80042de <StartDefaultTask+0x716>
 80042d8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80042dc:	86fb      	strh	r3, [r7, #54]	; 0x36
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 80042de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042e0:	461a      	mov	r2, r3
 80042e2:	4906      	ldr	r1, [pc, #24]	; (80042fc <StartDefaultTask+0x734>)
 80042e4:	4812      	ldr	r0, [pc, #72]	; (8004330 <StartDefaultTask+0x768>)
 80042e6:	f005 f9fb 	bl	80096e0 <HAL_UART_Transmit_DMA>
	osDelay(90);		//one second delay
 80042ea:	e562      	b.n	8003db2 <StartDefaultTask+0x1ea>
	if (HAL_ADC_Start_DMA(&hadc1, &Adc1RawReadings.Inv_current , sizeof(Adc1RawReadings)/sizeof(uint32_t)) != HAL_OK) return ;
 80042ec:	bf00      	nop
  }//closing main, infinite loop
  /* USER CODE END 5 */
}
 80042ee:	373c      	adds	r7, #60	; 0x3c
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f4:	200059a0 	.word	0x200059a0
 80042f8:	2000000c 	.word	0x2000000c
 80042fc:	20005dc4 	.word	0x20005dc4
 8004300:	080141f0 	.word	0x080141f0
 8004304:	200059c4 	.word	0x200059c4
 8004308:	20000258 	.word	0x20000258
 800430c:	080141f4 	.word	0x080141f4
 8004310:	080141f8 	.word	0x080141f8
 8004314:	080141fc 	.word	0x080141fc
 8004318:	20005a34 	.word	0x20005a34
 800431c:	08014200 	.word	0x08014200
 8004320:	08014204 	.word	0x08014204
 8004324:	08014208 	.word	0x08014208
 8004328:	2000599c 	.word	0x2000599c
 800432c:	08014210 	.word	0x08014210
 8004330:	20005bec 	.word	0x20005bec

08004334 <Callback01>:

/* Callback01 function */
void Callback01(void *argument)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	if (count_second) count_second--;
 800433c:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <Callback01+0x1ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <Callback01+0x1c>
 8004344:	4b66      	ldr	r3, [pc, #408]	; (80044e0 <Callback01+0x1ac>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3b01      	subs	r3, #1
 800434a:	4a65      	ldr	r2, [pc, #404]	; (80044e0 <Callback01+0x1ac>)
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e05c      	b.n	800440a <Callback01+0xd6>
					else
					{
						count_second = TICKS_ONESECOND;	//1 for 1sec
 8004350:	4b63      	ldr	r3, [pc, #396]	; (80044e0 <Callback01+0x1ac>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
						Uptime.seconds++;
 8004356:	4b63      	ldr	r3, [pc, #396]	; (80044e4 <Callback01+0x1b0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3301      	adds	r3, #1
 800435c:	4a61      	ldr	r2, [pc, #388]	; (80044e4 <Callback01+0x1b0>)
 800435e:	6013      	str	r3, [r2, #0]
						LedStatusShow();
 8004360:	f7fd fa06 	bl	8001770 <LedStatusShow>
						if (!Flag_ShowStats) Flag_ShowStats=2;				//once a second show secondy stat alternatively with measurements
 8004364:	4b60      	ldr	r3, [pc, #384]	; (80044e8 <Callback01+0x1b4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <Callback01+0x3e>
 800436c:	4b5e      	ldr	r3, [pc, #376]	; (80044e8 <Callback01+0x1b4>)
 800436e:	2202      	movs	r2, #2
 8004370:	601a      	str	r2, [r3, #0]
						if (count_minutes) count_minutes--;
 8004372:	4b5e      	ldr	r3, [pc, #376]	; (80044ec <Callback01+0x1b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <Callback01+0x52>
 800437a:	4b5c      	ldr	r3, [pc, #368]	; (80044ec <Callback01+0x1b8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3b01      	subs	r3, #1
 8004380:	4a5a      	ldr	r2, [pc, #360]	; (80044ec <Callback01+0x1b8>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	e041      	b.n	800440a <Callback01+0xd6>
						else
						{
							count_minutes = TICKS_ONEMINUTE;	//59 for 1 minute
 8004386:	4b59      	ldr	r3, [pc, #356]	; (80044ec <Callback01+0x1b8>)
 8004388:	223b      	movs	r2, #59	; 0x3b
 800438a:	601a      	str	r2, [r3, #0]
							Flag_StoreStatistics = 1;			//only for test
 800438c:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <Callback01+0x1bc>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]
							Uptime.minutes++;
 8004392:	4b54      	ldr	r3, [pc, #336]	; (80044e4 <Callback01+0x1b0>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	3301      	adds	r3, #1
 8004398:	4a52      	ldr	r2, [pc, #328]	; (80044e4 <Callback01+0x1b0>)
 800439a:	6053      	str	r3, [r2, #4]
							Uptime.seconds=0;
 800439c:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <Callback01+0x1b0>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
							ReadConfig();
 80043a2:	f7fd ff41 	bl	8002228 <ReadConfig>
							Flag_ShowStats=3;				//once a minute show hourly stat
 80043a6:	4b50      	ldr	r3, [pc, #320]	; (80044e8 <Callback01+0x1b4>)
 80043a8:	2203      	movs	r2, #3
 80043aa:	601a      	str	r2, [r3, #0]
							if (count_hours) count_hours--;	//60 minutes for one hour
 80043ac:	4b51      	ldr	r3, [pc, #324]	; (80044f4 <Callback01+0x1c0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <Callback01+0x8c>
 80043b4:	4b4f      	ldr	r3, [pc, #316]	; (80044f4 <Callback01+0x1c0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	4a4e      	ldr	r2, [pc, #312]	; (80044f4 <Callback01+0x1c0>)
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e024      	b.n	800440a <Callback01+0xd6>
							else
							{
								Calculate_WattHours();
 80043c0:	f7fd fdd0 	bl	8001f64 <Calculate_WattHours>
								count_hours = TICKS_ONEHOUR;
 80043c4:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <Callback01+0x1c0>)
 80043c6:	223b      	movs	r2, #59	; 0x3b
 80043c8:	601a      	str	r2, [r3, #0]
								Uptime.hours++;
 80043ca:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <Callback01+0x1b0>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	3301      	adds	r3, #1
 80043d0:	4a44      	ldr	r2, [pc, #272]	; (80044e4 <Callback01+0x1b0>)
 80043d2:	6093      	str	r3, [r2, #8]
								Uptime.minutes=0;
 80043d4:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <Callback01+0x1b0>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	605a      	str	r2, [r3, #4]
#if FLASHSTATSAVE_PERIOD == 0	//FLASHSTATSAVE_PERIOD 0-every hour,
								Flag_StoreStatistics = 1;
 80043da:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <Callback01+0x1bc>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
#endif
								if (count_days) count_days--;
 80043e0:	4b45      	ldr	r3, [pc, #276]	; (80044f8 <Callback01+0x1c4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <Callback01+0xc0>
 80043e8:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <Callback01+0x1c4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	4a42      	ldr	r2, [pc, #264]	; (80044f8 <Callback01+0x1c4>)
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e00a      	b.n	800440a <Callback01+0xd6>
								else
								{
									count_days = TICKS_ONEDAY;
 80043f4:	4b40      	ldr	r3, [pc, #256]	; (80044f8 <Callback01+0x1c4>)
 80043f6:	2217      	movs	r2, #23
 80043f8:	601a      	str	r2, [r3, #0]
									Uptime.days++;
 80043fa:	4b3a      	ldr	r3, [pc, #232]	; (80044e4 <Callback01+0x1b0>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	3301      	adds	r3, #1
 8004400:	4a38      	ldr	r2, [pc, #224]	; (80044e4 <Callback01+0x1b0>)
 8004402:	60d3      	str	r3, [r2, #12]
									Uptime.hours=0;
 8004404:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <Callback01+0x1b0>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
								}
							}
						}
					}
		Calculate_WattSeconds();
 800440a:	f7fd fc61 	bl	8001cd0 <Calculate_WattSeconds>
		HAL_ADC_Start(&hadc1);
 800440e:	483b      	ldr	r0, [pc, #236]	; (80044fc <Callback01+0x1c8>)
 8004410:	f000 ffe0 	bl	80053d4 <HAL_ADC_Start>
#ifdef DEBUG_EN
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
#endif
		uint32_t temp;
		//Adc1Measurements.Inv_current = ConvertIValue(Adc1RawReadings.Inv_current);
		temp = 	ConvertIValue(Adc1RawReadings.Inv_current);
 8004414:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <Callback01+0x1cc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe f989 	bl	8002730 <ConvertIValue>
 800441e:	60f8      	str	r0, [r7, #12]
		if ( temp > CalibrationValues.Inv_current_off) Adc1Measurements.Inv_current = temp-CalibrationValues.Inv_current_off;
 8004420:	4b38      	ldr	r3, [pc, #224]	; (8004504 <Callback01+0x1d0>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	461a      	mov	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4293      	cmp	r3, r2
 800442a:	d907      	bls.n	800443c <Callback01+0x108>
 800442c:	4b35      	ldr	r3, [pc, #212]	; (8004504 <Callback01+0x1d0>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	461a      	mov	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	4a34      	ldr	r2, [pc, #208]	; (8004508 <Callback01+0x1d4>)
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e002      	b.n	8004442 <Callback01+0x10e>
		else Adc1Measurements.Inv_current = 0;
 800443c:	4b32      	ldr	r3, [pc, #200]	; (8004508 <Callback01+0x1d4>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
		//Adc1Measurements.PV_current = ConvertIValue(Adc1RawReadings.PV_current) ;
		temp = 	ConvertIValue(Adc1RawReadings.PV_current);
 8004442:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <Callback01+0x1cc>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe f972 	bl	8002730 <ConvertIValue>
 800444c:	60f8      	str	r0, [r7, #12]
		if (temp > CalibrationValues.PV_current_off) Adc1Measurements.PV_current = temp-CalibrationValues.PV_current_off;
 800444e:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <Callback01+0x1d0>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4293      	cmp	r3, r2
 8004458:	d907      	bls.n	800446a <Callback01+0x136>
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <Callback01+0x1d0>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <Callback01+0x1d4>)
 8004466:	6053      	str	r3, [r2, #4]
 8004468:	e002      	b.n	8004470 <Callback01+0x13c>
		else Adc1Measurements.PV_current = 0;
 800446a:	4b27      	ldr	r3, [pc, #156]	; (8004508 <Callback01+0x1d4>)
 800446c:	2200      	movs	r2, #0
 800446e:	605a      	str	r2, [r3, #4]
			Adc1Measurements.PV_voltage = ConvertVValue(Adc1RawReadings.PV_voltage) ;
 8004470:	4b23      	ldr	r3, [pc, #140]	; (8004500 <Callback01+0x1cc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe f8fb 	bl	8002670 <ConvertVValue>
 800447a:	4603      	mov	r3, r0
 800447c:	4a22      	ldr	r2, [pc, #136]	; (8004508 <Callback01+0x1d4>)
 800447e:	6093      	str	r3, [r2, #8]
			Adc1Measurements.Batt_voltage = ConvertVValue(Adc1RawReadings.Batt_voltage) ;
 8004480:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <Callback01+0x1cc>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe f8f3 	bl	8002670 <ConvertVValue>
 800448a:	4603      	mov	r3, r0
 800448c:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <Callback01+0x1d4>)
 800448e:	60d3      	str	r3, [r2, #12]
			Adc1Measurements.NTC1_PCB = ConvertNTCvalue(Adc1RawReadings.NTC1_PCB) ;
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <Callback01+0x1cc>)
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe f877 	bl	8002588 <ConvertNTCvalue>
 800449a:	4603      	mov	r3, r0
 800449c:	4a1a      	ldr	r2, [pc, #104]	; (8004508 <Callback01+0x1d4>)
 800449e:	6113      	str	r3, [r2, #16]
			Adc1Measurements.NTC2_Inverter_mos = ConvertNTCvalue(Adc1RawReadings.NTC2_Inverter_mos) ;
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <Callback01+0x1cc>)
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe f86f 	bl	8002588 <ConvertNTCvalue>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4a16      	ldr	r2, [pc, #88]	; (8004508 <Callback01+0x1d4>)
 80044ae:	6153      	str	r3, [r2, #20]
			Adc1Measurements.NTC3_Battery_mos = ConvertNTCvalue(Adc1RawReadings.NTC3_Battery_mos) ;
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <Callback01+0x1cc>)
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe f867 	bl	8002588 <ConvertNTCvalue>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4a12      	ldr	r2, [pc, #72]	; (8004508 <Callback01+0x1d4>)
 80044be:	6193      	str	r3, [r2, #24]
			FlagExt_I = HAL_GPIO_ReadPin(EXT_I_GPIO_Port, EXT_I_Pin);
 80044c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044c4:	4811      	ldr	r0, [pc, #68]	; (800450c <Callback01+0x1d8>)
 80044c6:	f002 fdd3 	bl	8007070 <HAL_GPIO_ReadPin>
 80044ca:	4603      	mov	r3, r0
 80044cc:	461a      	mov	r2, r3
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <Callback01+0x1dc>)
 80044d0:	601a      	str	r2, [r3, #0]
		FlagRunMainLoop = 1;
 80044d2:	4b10      	ldr	r3, [pc, #64]	; (8004514 <Callback01+0x1e0>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
  /* USER CODE END Callback01 */
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000244 	.word	0x20000244
 80044e4:	20005a24 	.word	0x20005a24
 80044e8:	20000264 	.word	0x20000264
 80044ec:	20000000 	.word	0x20000000
 80044f0:	20000260 	.word	0x20000260
 80044f4:	20000004 	.word	0x20000004
 80044f8:	20000008 	.word	0x20000008
 80044fc:	20005b40 	.word	0x20005b40
 8004500:	200061cc 	.word	0x200061cc
 8004504:	20005c70 	.word	0x20005c70
 8004508:	200059a0 	.word	0x200059a0
 800450c:	48000400 	.word	0x48000400
 8004510:	20000254 	.word	0x20000254
 8004514:	20000268 	.word	0x20000268

08004518 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a04      	ldr	r2, [pc, #16]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800452a:	f000 fbfd 	bl	8004d28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40001000 	.word	0x40001000

0800453c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004540:	b672      	cpsid	i
}
 8004542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004544:	e7fe      	b.n	8004544 <Error_Handler+0x8>
	...

08004548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454e:	4b11      	ldr	r3, [pc, #68]	; (8004594 <HAL_MspInit+0x4c>)
 8004550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <HAL_MspInit+0x4c>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	6613      	str	r3, [r2, #96]	; 0x60
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_MspInit+0x4c>)
 800455c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	607b      	str	r3, [r7, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_MspInit+0x4c>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <HAL_MspInit+0x4c>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	6593      	str	r3, [r2, #88]	; 0x58
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <HAL_MspInit+0x4c>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800457e:	2200      	movs	r2, #0
 8004580:	210f      	movs	r1, #15
 8004582:	f06f 0001 	mvn.w	r0, #1
 8004586:	f001 fec9 	bl	800631c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000

08004598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b0a2      	sub	sp, #136	; 0x88
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045b0:	f107 0318 	add.w	r3, r7, #24
 80045b4:	225c      	movs	r2, #92	; 0x5c
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f009 fcc8 	bl	800df4e <memset>
  if(hadc->Instance==ADC1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a3f      	ldr	r2, [pc, #252]	; (80046c0 <HAL_ADC_MspInit+0x128>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d177      	bne.n	80046b8 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80045c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80045ce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80045d2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045d4:	f107 0318 	add.w	r3, r7, #24
 80045d8:	4618      	mov	r0, r3
 80045da:	f003 fc5f 	bl	8007e9c <HAL_RCCEx_PeriphCLKConfig>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80045e4:	f7ff ffaa 	bl	800453c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80045e8:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <HAL_ADC_MspInit+0x12c>)
 80045ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ec:	4a35      	ldr	r2, [pc, #212]	; (80046c4 <HAL_ADC_MspInit+0x12c>)
 80045ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045f4:	4b33      	ldr	r3, [pc, #204]	; (80046c4 <HAL_ADC_MspInit+0x12c>)
 80045f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004600:	4b30      	ldr	r3, [pc, #192]	; (80046c4 <HAL_ADC_MspInit+0x12c>)
 8004602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004604:	4a2f      	ldr	r2, [pc, #188]	; (80046c4 <HAL_ADC_MspInit+0x12c>)
 8004606:	f043 0304 	orr.w	r3, r3, #4
 800460a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800460c:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <HAL_ADC_MspInit+0x12c>)
 800460e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004618:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <HAL_ADC_MspInit+0x12c>)
 800461a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461c:	4a29      	ldr	r2, [pc, #164]	; (80046c4 <HAL_ADC_MspInit+0x12c>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004624:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <HAL_ADC_MspInit+0x12c>)
 8004626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004630:	230f      	movs	r3, #15
 8004632:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004634:	230b      	movs	r3, #11
 8004636:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004638:	2300      	movs	r3, #0
 800463a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800463c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004640:	4619      	mov	r1, r3
 8004642:	4821      	ldr	r0, [pc, #132]	; (80046c8 <HAL_ADC_MspInit+0x130>)
 8004644:	f002 fb9a 	bl	8006d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004648:	2307      	movs	r3, #7
 800464a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800464c:	230b      	movs	r3, #11
 800464e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004650:	2300      	movs	r3, #0
 8004652:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004654:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004658:	4619      	mov	r1, r3
 800465a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800465e:	f002 fb8d 	bl	8006d7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004662:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <HAL_ADC_MspInit+0x134>)
 8004664:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <HAL_ADC_MspInit+0x138>)
 8004666:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004668:	4b18      	ldr	r3, [pc, #96]	; (80046cc <HAL_ADC_MspInit+0x134>)
 800466a:	2200      	movs	r2, #0
 800466c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800466e:	4b17      	ldr	r3, [pc, #92]	; (80046cc <HAL_ADC_MspInit+0x134>)
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004674:	4b15      	ldr	r3, [pc, #84]	; (80046cc <HAL_ADC_MspInit+0x134>)
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800467a:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_ADC_MspInit+0x134>)
 800467c:	2280      	movs	r2, #128	; 0x80
 800467e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_ADC_MspInit+0x134>)
 8004682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004686:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_ADC_MspInit+0x134>)
 800468a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800468e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <HAL_ADC_MspInit+0x134>)
 8004692:	2220      	movs	r2, #32
 8004694:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_ADC_MspInit+0x134>)
 8004698:	2200      	movs	r2, #0
 800469a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800469c:	480b      	ldr	r0, [pc, #44]	; (80046cc <HAL_ADC_MspInit+0x134>)
 800469e:	f001 fe67 	bl	8006370 <HAL_DMA_Init>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80046a8:	f7ff ff48 	bl	800453c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a07      	ldr	r2, [pc, #28]	; (80046cc <HAL_ADC_MspInit+0x134>)
 80046b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80046b2:	4a06      	ldr	r2, [pc, #24]	; (80046cc <HAL_ADC_MspInit+0x134>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80046b8:	bf00      	nop
 80046ba:	3788      	adds	r7, #136	; 0x88
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	50040000 	.word	0x50040000
 80046c4:	40021000 	.word	0x40021000
 80046c8:	48000800 	.word	0x48000800
 80046cc:	20005cf8 	.word	0x20005cf8
 80046d0:	40020008 	.word	0x40020008

080046d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e4:	d10b      	bne.n	80046fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_TIM_PWM_MspInit+0x38>)
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	4a08      	ldr	r2, [pc, #32]	; (800470c <HAL_TIM_PWM_MspInit+0x38>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6593      	str	r3, [r2, #88]	; 0x58
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_TIM_PWM_MspInit+0x38>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000

08004710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <HAL_TIM_Base_MspInit+0x38>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d10b      	bne.n	800473a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_TIM_Base_MspInit+0x3c>)
 8004724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <HAL_TIM_Base_MspInit+0x3c>)
 8004728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472c:	6613      	str	r3, [r2, #96]	; 0x60
 800472e:	4b07      	ldr	r3, [pc, #28]	; (800474c <HAL_TIM_Base_MspInit+0x3c>)
 8004730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40014400 	.word	0x40014400
 800474c:	40021000 	.word	0x40021000

08004750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004758:	f107 0314 	add.w	r3, r7, #20
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d11d      	bne.n	80047ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004772:	4b22      	ldr	r3, [pc, #136]	; (80047fc <HAL_TIM_MspPostInit+0xac>)
 8004774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004776:	4a21      	ldr	r2, [pc, #132]	; (80047fc <HAL_TIM_MspPostInit+0xac>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800477e:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <HAL_TIM_MspPostInit+0xac>)
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BAT_SWITCH_PWM_Pin;
 800478a:	2320      	movs	r3, #32
 800478c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478e:	2302      	movs	r3, #2
 8004790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004796:	2300      	movs	r3, #0
 8004798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800479a:	2301      	movs	r3, #1
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SWITCH_PWM_GPIO_Port, &GPIO_InitStruct);
 800479e:	f107 0314 	add.w	r3, r7, #20
 80047a2:	4619      	mov	r1, r3
 80047a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047a8:	f002 fae8 	bl	8006d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80047ac:	e021      	b.n	80047f2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM16)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a13      	ldr	r2, [pc, #76]	; (8004800 <HAL_TIM_MspPostInit+0xb0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d11c      	bne.n	80047f2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b8:	4b10      	ldr	r3, [pc, #64]	; (80047fc <HAL_TIM_MspPostInit+0xac>)
 80047ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047bc:	4a0f      	ldr	r2, [pc, #60]	; (80047fc <HAL_TIM_MspPostInit+0xac>)
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047c4:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <HAL_TIM_MspPostInit+0xac>)
 80047c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXT_O_Pin;
 80047d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d6:	2302      	movs	r3, #2
 80047d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047de:	2300      	movs	r3, #0
 80047e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80047e2:	230e      	movs	r3, #14
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_O_GPIO_Port, &GPIO_InitStruct);
 80047e6:	f107 0314 	add.w	r3, r7, #20
 80047ea:	4619      	mov	r1, r3
 80047ec:	4805      	ldr	r0, [pc, #20]	; (8004804 <HAL_TIM_MspPostInit+0xb4>)
 80047ee:	f002 fac5 	bl	8006d7c <HAL_GPIO_Init>
}
 80047f2:	bf00      	nop
 80047f4:	3728      	adds	r7, #40	; 0x28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40021000 	.word	0x40021000
 8004800:	40014400 	.word	0x40014400
 8004804:	48000400 	.word	0x48000400

08004808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b0a0      	sub	sp, #128	; 0x80
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004810:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004820:	f107 0310 	add.w	r3, r7, #16
 8004824:	225c      	movs	r2, #92	; 0x5c
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f009 fb90 	bl	800df4e <memset>
  if(huart->Instance==USART1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a56      	ldr	r2, [pc, #344]	; (800498c <HAL_UART_MspInit+0x184>)
 8004834:	4293      	cmp	r3, r2
 8004836:	f040 80a4 	bne.w	8004982 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800483a:	2301      	movs	r3, #1
 800483c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800483e:	2300      	movs	r3, #0
 8004840:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004842:	f107 0310 	add.w	r3, r7, #16
 8004846:	4618      	mov	r0, r3
 8004848:	f003 fb28 	bl	8007e9c <HAL_RCCEx_PeriphCLKConfig>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004852:	f7ff fe73 	bl	800453c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004856:	4b4e      	ldr	r3, [pc, #312]	; (8004990 <HAL_UART_MspInit+0x188>)
 8004858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485a:	4a4d      	ldr	r2, [pc, #308]	; (8004990 <HAL_UART_MspInit+0x188>)
 800485c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004860:	6613      	str	r3, [r2, #96]	; 0x60
 8004862:	4b4b      	ldr	r3, [pc, #300]	; (8004990 <HAL_UART_MspInit+0x188>)
 8004864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800486e:	4b48      	ldr	r3, [pc, #288]	; (8004990 <HAL_UART_MspInit+0x188>)
 8004870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004872:	4a47      	ldr	r2, [pc, #284]	; (8004990 <HAL_UART_MspInit+0x188>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800487a:	4b45      	ldr	r3, [pc, #276]	; (8004990 <HAL_UART_MspInit+0x188>)
 800487c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800488a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488c:	2302      	movs	r3, #2
 800488e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004890:	2300      	movs	r3, #0
 8004892:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004894:	2302      	movs	r3, #2
 8004896:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004898:	2307      	movs	r3, #7
 800489a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80048a0:	4619      	mov	r1, r3
 80048a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048a6:	f002 fa69 	bl	8006d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80048aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b0:	2302      	movs	r3, #2
 80048b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048b4:	2301      	movs	r3, #1
 80048b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048b8:	2302      	movs	r3, #2
 80048ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048bc:	2307      	movs	r3, #7
 80048be:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80048c4:	4619      	mov	r1, r3
 80048c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048ca:	f002 fa57 	bl	8006d7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 80048ce:	4b31      	ldr	r3, [pc, #196]	; (8004994 <HAL_UART_MspInit+0x18c>)
 80048d0:	4a31      	ldr	r2, [pc, #196]	; (8004998 <HAL_UART_MspInit+0x190>)
 80048d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80048d4:	4b2f      	ldr	r3, [pc, #188]	; (8004994 <HAL_UART_MspInit+0x18c>)
 80048d6:	2202      	movs	r2, #2
 80048d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048da:	4b2e      	ldr	r3, [pc, #184]	; (8004994 <HAL_UART_MspInit+0x18c>)
 80048dc:	2200      	movs	r2, #0
 80048de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048e0:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <HAL_UART_MspInit+0x18c>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048e6:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <HAL_UART_MspInit+0x18c>)
 80048e8:	2280      	movs	r2, #128	; 0x80
 80048ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048ec:	4b29      	ldr	r3, [pc, #164]	; (8004994 <HAL_UART_MspInit+0x18c>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048f2:	4b28      	ldr	r3, [pc, #160]	; (8004994 <HAL_UART_MspInit+0x18c>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80048f8:	4b26      	ldr	r3, [pc, #152]	; (8004994 <HAL_UART_MspInit+0x18c>)
 80048fa:	2220      	movs	r2, #32
 80048fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048fe:	4b25      	ldr	r3, [pc, #148]	; (8004994 <HAL_UART_MspInit+0x18c>)
 8004900:	2200      	movs	r2, #0
 8004902:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004904:	4823      	ldr	r0, [pc, #140]	; (8004994 <HAL_UART_MspInit+0x18c>)
 8004906:	f001 fd33 	bl	8006370 <HAL_DMA_Init>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004910:	f7ff fe14 	bl	800453c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_UART_MspInit+0x18c>)
 8004918:	671a      	str	r2, [r3, #112]	; 0x70
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <HAL_UART_MspInit+0x18c>)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8004920:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_UART_MspInit+0x194>)
 8004922:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <HAL_UART_MspInit+0x198>)
 8004924:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <HAL_UART_MspInit+0x194>)
 8004928:	2202      	movs	r2, #2
 800492a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <HAL_UART_MspInit+0x194>)
 800492e:	2210      	movs	r2, #16
 8004930:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004932:	4b1a      	ldr	r3, [pc, #104]	; (800499c <HAL_UART_MspInit+0x194>)
 8004934:	2200      	movs	r2, #0
 8004936:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004938:	4b18      	ldr	r3, [pc, #96]	; (800499c <HAL_UART_MspInit+0x194>)
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800493e:	4b17      	ldr	r3, [pc, #92]	; (800499c <HAL_UART_MspInit+0x194>)
 8004940:	2200      	movs	r2, #0
 8004942:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004944:	4b15      	ldr	r3, [pc, #84]	; (800499c <HAL_UART_MspInit+0x194>)
 8004946:	2200      	movs	r2, #0
 8004948:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800494a:	4b14      	ldr	r3, [pc, #80]	; (800499c <HAL_UART_MspInit+0x194>)
 800494c:	2200      	movs	r2, #0
 800494e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <HAL_UART_MspInit+0x194>)
 8004952:	2200      	movs	r2, #0
 8004954:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004956:	4811      	ldr	r0, [pc, #68]	; (800499c <HAL_UART_MspInit+0x194>)
 8004958:	f001 fd0a 	bl	8006370 <HAL_DMA_Init>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8004962:	f7ff fdeb 	bl	800453c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a0c      	ldr	r2, [pc, #48]	; (800499c <HAL_UART_MspInit+0x194>)
 800496a:	66da      	str	r2, [r3, #108]	; 0x6c
 800496c:	4a0b      	ldr	r2, [pc, #44]	; (800499c <HAL_UART_MspInit+0x194>)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004972:	2200      	movs	r2, #0
 8004974:	2105      	movs	r1, #5
 8004976:	2025      	movs	r0, #37	; 0x25
 8004978:	f001 fcd0 	bl	800631c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800497c:	2025      	movs	r0, #37	; 0x25
 800497e:	f001 fce9 	bl	8006354 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004982:	bf00      	nop
 8004984:	3780      	adds	r7, #128	; 0x80
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40013800 	.word	0x40013800
 8004990:	40021000 	.word	0x40021000
 8004994:	20005ba4 	.word	0x20005ba4
 8004998:	40020480 	.word	0x40020480
 800499c:	20005af4 	.word	0x20005af4
 80049a0:	4002046c 	.word	0x4002046c

080049a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	; 0x30
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80049b4:	2200      	movs	r2, #0
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	2036      	movs	r0, #54	; 0x36
 80049ba:	f001 fcaf 	bl	800631c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049be:	2036      	movs	r0, #54	; 0x36
 80049c0:	f001 fcc8 	bl	8006354 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80049c4:	4b1e      	ldr	r3, [pc, #120]	; (8004a40 <HAL_InitTick+0x9c>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	4a1d      	ldr	r2, [pc, #116]	; (8004a40 <HAL_InitTick+0x9c>)
 80049ca:	f043 0310 	orr.w	r3, r3, #16
 80049ce:	6593      	str	r3, [r2, #88]	; 0x58
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <HAL_InitTick+0x9c>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049dc:	f107 0210 	add.w	r2, r7, #16
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f003 f9c6 	bl	8007d78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80049ec:	f003 f998 	bl	8007d20 <HAL_RCC_GetPCLK1Freq>
 80049f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <HAL_InitTick+0xa0>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	0c9b      	lsrs	r3, r3, #18
 80049fc:	3b01      	subs	r3, #1
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <HAL_InitTick+0xa4>)
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <HAL_InitTick+0xa8>)
 8004a04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <HAL_InitTick+0xa4>)
 8004a08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004a0e:	4a0e      	ldr	r2, [pc, #56]	; (8004a48 <HAL_InitTick+0xa4>)
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <HAL_InitTick+0xa4>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_InitTick+0xa4>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004a20:	4809      	ldr	r0, [pc, #36]	; (8004a48 <HAL_InitTick+0xa4>)
 8004a22:	f003 fd45 	bl	80084b0 <HAL_TIM_Base_Init>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004a2c:	4806      	ldr	r0, [pc, #24]	; (8004a48 <HAL_InitTick+0xa4>)
 8004a2e:	f003 fd97 	bl	8008560 <HAL_TIM_Base_Start_IT>
 8004a32:	4603      	mov	r3, r0
 8004a34:	e000      	b.n	8004a38 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3730      	adds	r7, #48	; 0x30
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40021000 	.word	0x40021000
 8004a44:	431bde83 	.word	0x431bde83
 8004a48:	20006348 	.word	0x20006348
 8004a4c:	40001000 	.word	0x40001000

08004a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a54:	e7fe      	b.n	8004a54 <NMI_Handler+0x4>

08004a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a5a:	e7fe      	b.n	8004a5a <HardFault_Handler+0x4>

08004a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a60:	e7fe      	b.n	8004a60 <MemManage_Handler+0x4>

08004a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a66:	e7fe      	b.n	8004a66 <BusFault_Handler+0x4>

08004a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a6c:	e7fe      	b.n	8004a6c <UsageFault_Handler+0x4>

08004a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <DMA1_Channel1_IRQHandler+0x10>)
 8004a82:	f001 fe0c 	bl	800669e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20005cf8 	.word	0x20005cf8

08004a90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a94:	4807      	ldr	r0, [pc, #28]	; (8004ab4 <USART1_IRQHandler+0x24>)
 8004a96:	f004 ff9b 	bl	80099d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <USART1_IRQHandler+0x24>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d102      	bne.n	8004aae <USART1_IRQHandler+0x1e>
HAL_UART_RxCpltCallback(&huart1);}
 8004aa8:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <USART1_IRQHandler+0x24>)
 8004aaa:	f7fe f9c3 	bl	8002e34 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20005bec 	.word	0x20005bec

08004ab8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004abc:	4802      	ldr	r0, [pc, #8]	; (8004ac8 <TIM6_DAC_IRQHandler+0x10>)
 8004abe:	f003 ff61 	bl	8008984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20006348 	.word	0x20006348

08004acc <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004ad0:	4802      	ldr	r0, [pc, #8]	; (8004adc <DMA2_Channel6_IRQHandler+0x10>)
 8004ad2:	f001 fde4 	bl	800669e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20005af4 	.word	0x20005af4

08004ae0 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004ae4:	4802      	ldr	r0, [pc, #8]	; (8004af0 <DMA2_Channel7_IRQHandler+0x10>)
 8004ae6:	f001 fdda 	bl	800669e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20005ba4 	.word	0x20005ba4

08004af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
	return 1;
 8004af8:	2301      	movs	r3, #1
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <_kill>:

int _kill(int pid, int sig)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b0e:	f009 f8ed 	bl	800dcec <__errno>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2216      	movs	r2, #22
 8004b16:	601a      	str	r2, [r3, #0]
	return -1;
 8004b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <_exit>:

void _exit (int status)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff ffe7 	bl	8004b04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b36:	e7fe      	b.n	8004b36 <_exit+0x12>

08004b38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e00a      	b.n	8004b60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004b4a:	f3af 8000 	nop.w
 8004b4e:	4601      	mov	r1, r0
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	60ba      	str	r2, [r7, #8]
 8004b56:	b2ca      	uxtb	r2, r1
 8004b58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	dbf0      	blt.n	8004b4a <_read+0x12>
	}

return len;
 8004b68:	687b      	ldr	r3, [r7, #4]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e009      	b.n	8004b98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	60ba      	str	r2, [r7, #8]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	3301      	adds	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	dbf1      	blt.n	8004b84 <_write+0x12>
	}
	return len;
 8004ba0:	687b      	ldr	r3, [r7, #4]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <_close>:

int _close(int file)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
	return -1;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bd2:	605a      	str	r2, [r3, #4]
	return 0;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <_isatty>:

int _isatty(int file)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
	return 1;
 8004bea:	2301      	movs	r3, #1
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
	return 0;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c1c:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <_sbrk+0x5c>)
 8004c1e:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <_sbrk+0x60>)
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c28:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <_sbrk+0x64>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c30:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <_sbrk+0x64>)
 8004c32:	4a12      	ldr	r2, [pc, #72]	; (8004c7c <_sbrk+0x68>)
 8004c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <_sbrk+0x64>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d207      	bcs.n	8004c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c44:	f009 f852 	bl	800dcec <__errno>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	220c      	movs	r2, #12
 8004c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	e009      	b.n	8004c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <_sbrk+0x64>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <_sbrk+0x64>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4413      	add	r3, r2
 8004c62:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <_sbrk+0x64>)
 8004c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c66:	68fb      	ldr	r3, [r7, #12]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20010000 	.word	0x20010000
 8004c74:	00000400 	.word	0x00000400
 8004c78:	2000026c 	.word	0x2000026c
 8004c7c:	200063e8 	.word	0x200063e8

08004c80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004c84:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <SystemInit+0x20>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	4a05      	ldr	r2, [pc, #20]	; (8004ca0 <SystemInit+0x20>)
 8004c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	e000ed00 	.word	0xe000ed00

08004ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ca8:	f7ff ffea 	bl	8004c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cac:	480c      	ldr	r0, [pc, #48]	; (8004ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004cae:	490d      	ldr	r1, [pc, #52]	; (8004ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004cb0:	4a0d      	ldr	r2, [pc, #52]	; (8004ce8 <LoopForever+0xe>)
  movs r3, #0
 8004cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cb4:	e002      	b.n	8004cbc <LoopCopyDataInit>

08004cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cba:	3304      	adds	r3, #4

08004cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cc0:	d3f9      	bcc.n	8004cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8004cc4:	4c0a      	ldr	r4, [pc, #40]	; (8004cf0 <LoopForever+0x16>)
  movs r3, #0
 8004cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cc8:	e001      	b.n	8004cce <LoopFillZerobss>

08004cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ccc:	3204      	adds	r2, #4

08004cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cd0:	d3fb      	bcc.n	8004cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cd2:	f009 f907 	bl	800dee4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004cd6:	f7fd fd73 	bl	80027c0 <main>

08004cda <LoopForever>:

LoopForever:
    b LoopForever
 8004cda:	e7fe      	b.n	8004cda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004cdc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ce4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8004ce8:	080147b0 	.word	0x080147b0
  ldr r2, =_sbss
 8004cec:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8004cf0:	200063e8 	.word	0x200063e8

08004cf4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004cf4:	e7fe      	b.n	8004cf4 <ADC1_IRQHandler>

08004cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d00:	2003      	movs	r0, #3
 8004d02:	f001 fb00 	bl	8006306 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d06:	200f      	movs	r0, #15
 8004d08:	f7ff fe4c 	bl	80049a4 <HAL_InitTick>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	71fb      	strb	r3, [r7, #7]
 8004d16:	e001      	b.n	8004d1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d18:	f7ff fc16 	bl	8004548 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <HAL_IncTick+0x20>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_IncTick+0x24>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4413      	add	r3, r2
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <HAL_IncTick+0x24>)
 8004d3a:	6013      	str	r3, [r2, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000020 	.word	0x20000020
 8004d4c:	20006394 	.word	0x20006394

08004d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return uwTick;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_GetTick+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20006394 	.word	0x20006394

08004d68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	609a      	str	r2, [r3, #8]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3360      	adds	r3, #96	; 0x60
 8004de2:	461a      	mov	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <LL_ADC_SetOffset+0x44>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	03fff000 	.word	0x03fff000

08004e18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3360      	adds	r3, #96	; 0x60
 8004e26:	461a      	mov	r2, r3
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3360      	adds	r3, #96	; 0x60
 8004e54:	461a      	mov	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3330      	adds	r3, #48	; 0x30
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	f003 030c 	and.w	r3, r3, #12
 8004ebc:	4413      	add	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	211f      	movs	r1, #31
 8004ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	0e9b      	lsrs	r3, r3, #26
 8004ed8:	f003 011f 	and.w	r1, r3, #31
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004eec:	bf00      	nop
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3314      	adds	r3, #20
 8004f08:	461a      	mov	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	0e5b      	lsrs	r3, r3, #25
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	4413      	add	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	0d1b      	lsrs	r3, r3, #20
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2107      	movs	r1, #7
 8004f26:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	401a      	ands	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	0d1b      	lsrs	r3, r3, #20
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f003 0318 	and.w	r3, r3, #24
 8004f72:	4908      	ldr	r1, [pc, #32]	; (8004f94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004f74:	40d9      	lsrs	r1, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	400b      	ands	r3, r1
 8004f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	0007ffff 	.word	0x0007ffff

08004f98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6093      	str	r3, [r2, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd0:	d101      	bne.n	8004fd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ff8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005020:	d101      	bne.n	8005026 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005048:	f043 0201 	orr.w	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800506c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005070:	f043 0202 	orr.w	r2, r3, #2
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <LL_ADC_IsEnabled+0x18>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <LL_ADC_IsEnabled+0x1a>
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d101      	bne.n	80050c2 <LL_ADC_IsDisableOngoing+0x18>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <LL_ADC_IsDisableOngoing+0x1a>
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050e4:	f043 0204 	orr.w	r2, r3, #4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d101      	bne.n	8005110 <LL_ADC_REG_IsConversionOngoing+0x18>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b08      	cmp	r3, #8
 8005130:	d101      	bne.n	8005136 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e12c      	b.n	80053b8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005168:	2b00      	cmp	r3, #0
 800516a:	d109      	bne.n	8005180 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fa13 	bl	8004598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff ff19 	bl	8004fbc <LL_ADC_IsDeepPowerDownEnabled>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff feff 	bl	8004f98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff ff34 	bl	800500c <LL_ADC_IsInternalRegulatorEnabled>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d115      	bne.n	80051d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff ff18 	bl	8004fe4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051b4:	4b82      	ldr	r3, [pc, #520]	; (80053c0 <HAL_ADC_Init+0x27c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	099b      	lsrs	r3, r3, #6
 80051ba:	4a82      	ldr	r2, [pc, #520]	; (80053c4 <HAL_ADC_Init+0x280>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	099b      	lsrs	r3, r3, #6
 80051c2:	3301      	adds	r3, #1
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80051c8:	e002      	b.n	80051d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f9      	bne.n	80051ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff ff16 	bl	800500c <LL_ADC_IsInternalRegulatorEnabled>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10d      	bne.n	8005202 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	f043 0210 	orr.w	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff ff76 	bl	80050f8 <LL_ADC_REG_IsConversionOngoing>
 800520c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b00      	cmp	r3, #0
 8005218:	f040 80c5 	bne.w	80053a6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f040 80c1 	bne.w	80053a6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800522c:	f043 0202 	orr.w	r2, r3, #2
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff23 	bl	8005084 <LL_ADC_IsEnabled>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005244:	4860      	ldr	r0, [pc, #384]	; (80053c8 <HAL_ADC_Init+0x284>)
 8005246:	f7ff ff1d 	bl	8005084 <LL_ADC_IsEnabled>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4619      	mov	r1, r3
 8005256:	485d      	ldr	r0, [pc, #372]	; (80053cc <HAL_ADC_Init+0x288>)
 8005258:	f7ff fd86 	bl	8004d68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	7e5b      	ldrb	r3, [r3, #25]
 8005260:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005266:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800526c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005272:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800527a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800527c:	4313      	orrs	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d106      	bne.n	8005298 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	3b01      	subs	r3, #1
 8005290:	045b      	lsls	r3, r3, #17
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4313      	orrs	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	4b45      	ldr	r3, [pc, #276]	; (80053d0 <HAL_ADC_Init+0x28c>)
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	69b9      	ldr	r1, [r7, #24]
 80052c4:	430b      	orrs	r3, r1
 80052c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ff13 	bl	80050f8 <LL_ADC_REG_IsConversionOngoing>
 80052d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff ff20 	bl	800511e <LL_ADC_INJ_IsConversionOngoing>
 80052de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d13d      	bne.n	8005362 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d13a      	bne.n	8005362 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80052f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005308:	f023 0302 	bic.w	r3, r3, #2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	69b9      	ldr	r1, [r7, #24]
 8005312:	430b      	orrs	r3, r1
 8005314:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800531c:	2b01      	cmp	r3, #1
 800531e:	d118      	bne.n	8005352 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800532a:	f023 0304 	bic.w	r3, r3, #4
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005336:	4311      	orrs	r1, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800533c:	4311      	orrs	r1, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005342:	430a      	orrs	r2, r1
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	611a      	str	r2, [r3, #16]
 8005350:	e007      	b.n	8005362 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0201 	bic.w	r2, r2, #1
 8005360:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10c      	bne.n	8005384 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	f023 010f 	bic.w	r1, r3, #15
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	1e5a      	subs	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
 8005382:	e007      	b.n	8005394 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 020f 	bic.w	r2, r2, #15
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005398:	f023 0303 	bic.w	r3, r3, #3
 800539c:	f043 0201 	orr.w	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54
 80053a4:	e007      	b.n	80053b6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	f043 0210 	orr.w	r2, r3, #16
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80053b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000018 	.word	0x20000018
 80053c4:	053e2d63 	.word	0x053e2d63
 80053c8:	50040000 	.word	0x50040000
 80053cc:	50040300 	.word	0x50040300
 80053d0:	fff0c007 	.word	0xfff0c007

080053d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff fe89 	bl	80050f8 <LL_ADC_REG_IsConversionOngoing>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d14f      	bne.n	800548c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_ADC_Start+0x26>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e04b      	b.n	8005492 <HAL_ADC_Start+0xbe>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fccc 	bl	8005da0 <ADC_Enable>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d137      	bne.n	8005482 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800542e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005432:	d106      	bne.n	8005442 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	f023 0206 	bic.w	r2, r3, #6
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	659a      	str	r2, [r3, #88]	; 0x58
 8005440:	e002      	b.n	8005448 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	221c      	movs	r2, #28
 800544e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800546e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff fe28 	bl	80050d0 <LL_ADC_REG_StartConversion>
 8005480:	e006      	b.n	8005490 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800548a:	e001      	b.n	8005490 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800548c:	2302      	movs	r3, #2
 800548e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff fe23 	bl	80050f8 <LL_ADC_REG_IsConversionOngoing>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d167      	bne.n	8005588 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_ADC_Start_DMA+0x2a>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e063      	b.n	800558e <HAL_ADC_Start_DMA+0xf2>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fc66 	bl	8005da0 <ADC_Enable>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d14f      	bne.n	800557e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d006      	beq.n	800550c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	f023 0206 	bic.w	r2, r3, #6
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	659a      	str	r2, [r3, #88]	; 0x58
 800550a:	e002      	b.n	8005512 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005516:	4a20      	ldr	r2, [pc, #128]	; (8005598 <HAL_ADC_Start_DMA+0xfc>)
 8005518:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551e:	4a1f      	ldr	r2, [pc, #124]	; (800559c <HAL_ADC_Start_DMA+0x100>)
 8005520:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005526:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <HAL_ADC_Start_DMA+0x104>)
 8005528:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	221c      	movs	r2, #28
 8005530:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0210 	orr.w	r2, r2, #16
 8005548:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3340      	adds	r3, #64	; 0x40
 8005564:	4619      	mov	r1, r3
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f000 ffb9 	bl	80064e0 <HAL_DMA_Start_IT>
 800556e:	4603      	mov	r3, r0
 8005570:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff fdaa 	bl	80050d0 <LL_ADC_REG_StartConversion>
 800557c:	e006      	b.n	800558c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005586:	e001      	b.n	800558c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005588:	2302      	movs	r3, #2
 800558a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800558c:	7dfb      	ldrb	r3, [r7, #23]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	08005f6b 	.word	0x08005f6b
 800559c:	08006043 	.word	0x08006043
 80055a0:	0800605f 	.word	0x0800605f

080055a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b0b6      	sub	sp, #216	; 0xd8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_ADC_ConfigChannel+0x22>
 80055fe:	2302      	movs	r3, #2
 8005600:	e3b9      	b.n	8005d76 <HAL_ADC_ConfigChannel+0x796>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fd72 	bl	80050f8 <LL_ADC_REG_IsConversionOngoing>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 839e 	bne.w	8005d58 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b05      	cmp	r3, #5
 8005622:	d824      	bhi.n	800566e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	3b02      	subs	r3, #2
 800562a:	2b03      	cmp	r3, #3
 800562c:	d81b      	bhi.n	8005666 <HAL_ADC_ConfigChannel+0x86>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <HAL_ADC_ConfigChannel+0x54>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	08005645 	.word	0x08005645
 8005638:	0800564d 	.word	0x0800564d
 800563c:	08005655 	.word	0x08005655
 8005640:	0800565d 	.word	0x0800565d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	220c      	movs	r2, #12
 8005648:	605a      	str	r2, [r3, #4]
          break;
 800564a:	e011      	b.n	8005670 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2212      	movs	r2, #18
 8005650:	605a      	str	r2, [r3, #4]
          break;
 8005652:	e00d      	b.n	8005670 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2218      	movs	r2, #24
 8005658:	605a      	str	r2, [r3, #4]
          break;
 800565a:	e009      	b.n	8005670 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005662:	605a      	str	r2, [r3, #4]
          break;
 8005664:	e004      	b.n	8005670 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2206      	movs	r2, #6
 800566a:	605a      	str	r2, [r3, #4]
          break;
 800566c:	e000      	b.n	8005670 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800566e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	f7ff fc0f 	bl	8004ea0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff fd36 	bl	80050f8 <LL_ADC_REG_IsConversionOngoing>
 800568c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff fd42 	bl	800511e <LL_ADC_INJ_IsConversionOngoing>
 800569a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800569e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 81a6 	bne.w	80059f4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80056a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f040 81a1 	bne.w	80059f4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7ff fc1a 	bl	8004ef8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	08db      	lsrs	r3, r3, #3
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d00a      	beq.n	80056fc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6919      	ldr	r1, [r3, #16]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056f6:	f7ff fb6b 	bl	8004dd0 <LL_ADC_SetOffset>
 80056fa:	e17b      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fb88 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 8005708:	4603      	mov	r3, r0
 800570a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x148>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2100      	movs	r1, #0
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fb7d 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 800571e:	4603      	mov	r3, r0
 8005720:	0e9b      	lsrs	r3, r3, #26
 8005722:	f003 021f 	and.w	r2, r3, #31
 8005726:	e01e      	b.n	8005766 <HAL_ADC_ConfigChannel+0x186>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2100      	movs	r1, #0
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fb72 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 8005734:	4603      	mov	r3, r0
 8005736:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800573e:	fa93 f3a3 	rbit	r3, r3
 8005742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800574a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800574e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8005756:	2320      	movs	r3, #32
 8005758:	e004      	b.n	8005764 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800575a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800575e:	fab3 f383 	clz	r3, r3
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800576e:	2b00      	cmp	r3, #0
 8005770:	d105      	bne.n	800577e <HAL_ADC_ConfigChannel+0x19e>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	0e9b      	lsrs	r3, r3, #26
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	e018      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x1d0>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005786:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800578a:	fa93 f3a3 	rbit	r3, r3
 800578e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800579a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80057a2:	2320      	movs	r3, #32
 80057a4:	e004      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80057a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d106      	bne.n	80057c2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fb41 	bl	8004e44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2101      	movs	r1, #1
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fb25 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <HAL_ADC_ConfigChannel+0x20e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2101      	movs	r1, #1
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fb1a 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 80057e4:	4603      	mov	r3, r0
 80057e6:	0e9b      	lsrs	r3, r3, #26
 80057e8:	f003 021f 	and.w	r2, r3, #31
 80057ec:	e01e      	b.n	800582c <HAL_ADC_ConfigChannel+0x24c>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2101      	movs	r1, #1
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fb0f 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005800:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005804:	fa93 f3a3 	rbit	r3, r3
 8005808:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800580c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800581c:	2320      	movs	r3, #32
 800581e:	e004      	b.n	800582a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8005820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005824:	fab3 f383 	clz	r3, r3
 8005828:	b2db      	uxtb	r3, r3
 800582a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005834:	2b00      	cmp	r3, #0
 8005836:	d105      	bne.n	8005844 <HAL_ADC_ConfigChannel+0x264>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	0e9b      	lsrs	r3, r3, #26
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	e018      	b.n	8005876 <HAL_ADC_ConfigChannel+0x296>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005850:	fa93 f3a3 	rbit	r3, r3
 8005854:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005858:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800585c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005868:	2320      	movs	r3, #32
 800586a:	e004      	b.n	8005876 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800586c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005870:	fab3 f383 	clz	r3, r3
 8005874:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005876:	429a      	cmp	r2, r3
 8005878:	d106      	bne.n	8005888 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	2101      	movs	r1, #1
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fade 	bl	8004e44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2102      	movs	r1, #2
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff fac2 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 8005894:	4603      	mov	r3, r0
 8005896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x2d4>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2102      	movs	r1, #2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff fab7 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 80058aa:	4603      	mov	r3, r0
 80058ac:	0e9b      	lsrs	r3, r3, #26
 80058ae:	f003 021f 	and.w	r2, r3, #31
 80058b2:	e01e      	b.n	80058f2 <HAL_ADC_ConfigChannel+0x312>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2102      	movs	r1, #2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff faac 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058ca:	fa93 f3a3 	rbit	r3, r3
 80058ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80058d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80058da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80058e2:	2320      	movs	r3, #32
 80058e4:	e004      	b.n	80058f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80058e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058ea:	fab3 f383 	clz	r3, r3
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d105      	bne.n	800590a <HAL_ADC_ConfigChannel+0x32a>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	0e9b      	lsrs	r3, r3, #26
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	e016      	b.n	8005938 <HAL_ADC_ConfigChannel+0x358>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005912:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005916:	fa93 f3a3 	rbit	r3, r3
 800591a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800591c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800591e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800592a:	2320      	movs	r3, #32
 800592c:	e004      	b.n	8005938 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800592e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005932:	fab3 f383 	clz	r3, r3
 8005936:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005938:	429a      	cmp	r2, r3
 800593a:	d106      	bne.n	800594a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2200      	movs	r2, #0
 8005942:	2102      	movs	r1, #2
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fa7d 	bl	8004e44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2103      	movs	r1, #3
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fa61 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 8005956:	4603      	mov	r3, r0
 8005958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <HAL_ADC_ConfigChannel+0x396>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2103      	movs	r1, #3
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fa56 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 800596c:	4603      	mov	r3, r0
 800596e:	0e9b      	lsrs	r3, r3, #26
 8005970:	f003 021f 	and.w	r2, r3, #31
 8005974:	e017      	b.n	80059a6 <HAL_ADC_ConfigChannel+0x3c6>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2103      	movs	r1, #3
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fa4b 	bl	8004e18 <LL_ADC_GetOffsetChannel>
 8005982:	4603      	mov	r3, r0
 8005984:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005988:	fa93 f3a3 	rbit	r3, r3
 800598c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800598e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005990:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005998:	2320      	movs	r3, #32
 800599a:	e003      	b.n	80059a4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800599c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599e:	fab3 f383 	clz	r3, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d105      	bne.n	80059be <HAL_ADC_ConfigChannel+0x3de>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	0e9b      	lsrs	r3, r3, #26
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	e011      	b.n	80059e2 <HAL_ADC_ConfigChannel+0x402>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80059cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80059d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80059d6:	2320      	movs	r3, #32
 80059d8:	e003      	b.n	80059e2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80059da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059dc:	fab3 f383 	clz	r3, r3
 80059e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d106      	bne.n	80059f4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	2103      	movs	r1, #3
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fa28 	bl	8004e44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fb43 	bl	8005084 <LL_ADC_IsEnabled>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f040 813f 	bne.w	8005c84 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6819      	ldr	r1, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	461a      	mov	r2, r3
 8005a14:	f7ff fa9c 	bl	8004f50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	4a8e      	ldr	r2, [pc, #568]	; (8005c58 <HAL_ADC_ConfigChannel+0x678>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	f040 8130 	bne.w	8005c84 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10b      	bne.n	8005a4c <HAL_ADC_ConfigChannel+0x46c>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	0e9b      	lsrs	r3, r3, #26
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	2b09      	cmp	r3, #9
 8005a42:	bf94      	ite	ls
 8005a44:	2301      	movls	r3, #1
 8005a46:	2300      	movhi	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e019      	b.n	8005a80 <HAL_ADC_ConfigChannel+0x4a0>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a54:	fa93 f3a3 	rbit	r3, r3
 8005a58:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005a64:	2320      	movs	r3, #32
 8005a66:	e003      	b.n	8005a70 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a6a:	fab3 f383 	clz	r3, r3
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	3301      	adds	r3, #1
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	2b09      	cmp	r3, #9
 8005a78:	bf94      	ite	ls
 8005a7a:	2301      	movls	r3, #1
 8005a7c:	2300      	movhi	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d079      	beq.n	8005b78 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d107      	bne.n	8005aa0 <HAL_ADC_ConfigChannel+0x4c0>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	0e9b      	lsrs	r3, r3, #26
 8005a96:	3301      	adds	r3, #1
 8005a98:	069b      	lsls	r3, r3, #26
 8005a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a9e:	e015      	b.n	8005acc <HAL_ADC_ConfigChannel+0x4ec>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa8:	fa93 f3a3 	rbit	r3, r3
 8005aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8005ab8:	2320      	movs	r3, #32
 8005aba:	e003      	b.n	8005ac4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8005abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abe:	fab3 f383 	clz	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	069b      	lsls	r3, r3, #26
 8005ac8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d109      	bne.n	8005aec <HAL_ADC_ConfigChannel+0x50c>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	0e9b      	lsrs	r3, r3, #26
 8005ade:	3301      	adds	r3, #1
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aea:	e017      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x53c>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af4:	fa93 f3a3 	rbit	r3, r3
 8005af8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005b04:	2320      	movs	r3, #32
 8005b06:	e003      	b.n	8005b10 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b0a:	fab3 f383 	clz	r3, r3
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	3301      	adds	r3, #1
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	2101      	movs	r1, #1
 8005b18:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1c:	ea42 0103 	orr.w	r1, r2, r3
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <HAL_ADC_ConfigChannel+0x562>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	0e9b      	lsrs	r3, r3, #26
 8005b32:	3301      	adds	r3, #1
 8005b34:	f003 021f 	and.w	r2, r3, #31
 8005b38:	4613      	mov	r3, r2
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	4413      	add	r3, r2
 8005b3e:	051b      	lsls	r3, r3, #20
 8005b40:	e018      	b.n	8005b74 <HAL_ADC_ConfigChannel+0x594>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	fa93 f3a3 	rbit	r3, r3
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005b5a:	2320      	movs	r3, #32
 8005b5c:	e003      	b.n	8005b66 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b60:	fab3 f383 	clz	r3, r3
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	3301      	adds	r3, #1
 8005b68:	f003 021f 	and.w	r2, r3, #31
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b74:	430b      	orrs	r3, r1
 8005b76:	e080      	b.n	8005c7a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <HAL_ADC_ConfigChannel+0x5b4>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	0e9b      	lsrs	r3, r3, #26
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	069b      	lsls	r3, r3, #26
 8005b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b92:	e015      	b.n	8005bc0 <HAL_ADC_ConfigChannel+0x5e0>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	fa93 f3a3 	rbit	r3, r3
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005bac:	2320      	movs	r3, #32
 8005bae:	e003      	b.n	8005bb8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	fab3 f383 	clz	r3, r3
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	3301      	adds	r3, #1
 8005bba:	069b      	lsls	r3, r3, #26
 8005bbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <HAL_ADC_ConfigChannel+0x600>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	0e9b      	lsrs	r3, r3, #26
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	2101      	movs	r1, #1
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	e017      	b.n	8005c10 <HAL_ADC_ConfigChannel+0x630>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	fa93 f3a3 	rbit	r3, r3
 8005bec:	61fb      	str	r3, [r7, #28]
  return result;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	e003      	b.n	8005c04 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	fab3 f383 	clz	r3, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	3301      	adds	r3, #1
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c10:	ea42 0103 	orr.w	r1, r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10d      	bne.n	8005c3c <HAL_ADC_ConfigChannel+0x65c>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	0e9b      	lsrs	r3, r3, #26
 8005c26:	3301      	adds	r3, #1
 8005c28:	f003 021f 	and.w	r2, r3, #31
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4413      	add	r3, r2
 8005c32:	3b1e      	subs	r3, #30
 8005c34:	051b      	lsls	r3, r3, #20
 8005c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c3a:	e01d      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x698>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	fa93 f3a3 	rbit	r3, r3
 8005c48:	613b      	str	r3, [r7, #16]
  return result;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005c54:	2320      	movs	r3, #32
 8005c56:	e005      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x684>
 8005c58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	fab3 f383 	clz	r3, r3
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	3301      	adds	r3, #1
 8005c66:	f003 021f 	and.w	r2, r3, #31
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	4413      	add	r3, r2
 8005c70:	3b1e      	subs	r3, #30
 8005c72:	051b      	lsls	r3, r3, #20
 8005c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	6892      	ldr	r2, [r2, #8]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	f7ff f93a 	bl	8004ef8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b3d      	ldr	r3, [pc, #244]	; (8005d80 <HAL_ADC_ConfigChannel+0x7a0>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d06c      	beq.n	8005d6a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c90:	483c      	ldr	r0, [pc, #240]	; (8005d84 <HAL_ADC_ConfigChannel+0x7a4>)
 8005c92:	f7ff f88f 	bl	8004db4 <LL_ADC_GetCommonPathInternalCh>
 8005c96:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a3a      	ldr	r2, [pc, #232]	; (8005d88 <HAL_ADC_ConfigChannel+0x7a8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d127      	bne.n	8005cf4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d121      	bne.n	8005cf4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a35      	ldr	r2, [pc, #212]	; (8005d8c <HAL_ADC_ConfigChannel+0x7ac>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d157      	bne.n	8005d6a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	482f      	ldr	r0, [pc, #188]	; (8005d84 <HAL_ADC_ConfigChannel+0x7a4>)
 8005cc6:	f7ff f862 	bl	8004d8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cca:	4b31      	ldr	r3, [pc, #196]	; (8005d90 <HAL_ADC_ConfigChannel+0x7b0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	099b      	lsrs	r3, r3, #6
 8005cd0:	4a30      	ldr	r2, [pc, #192]	; (8005d94 <HAL_ADC_ConfigChannel+0x7b4>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	099b      	lsrs	r3, r3, #6
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005ce4:	e002      	b.n	8005cec <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f9      	bne.n	8005ce6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cf2:	e03a      	b.n	8005d6a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a27      	ldr	r2, [pc, #156]	; (8005d98 <HAL_ADC_ConfigChannel+0x7b8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d113      	bne.n	8005d26 <HAL_ADC_ConfigChannel+0x746>
 8005cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10d      	bne.n	8005d26 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <HAL_ADC_ConfigChannel+0x7ac>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d12a      	bne.n	8005d6a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4819      	ldr	r0, [pc, #100]	; (8005d84 <HAL_ADC_ConfigChannel+0x7a4>)
 8005d20:	f7ff f835 	bl	8004d8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d24:	e021      	b.n	8005d6a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <HAL_ADC_ConfigChannel+0x7bc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d11c      	bne.n	8005d6a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d116      	bne.n	8005d6a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a12      	ldr	r2, [pc, #72]	; (8005d8c <HAL_ADC_ConfigChannel+0x7ac>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d111      	bne.n	8005d6a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d4e:	4619      	mov	r1, r3
 8005d50:	480c      	ldr	r0, [pc, #48]	; (8005d84 <HAL_ADC_ConfigChannel+0x7a4>)
 8005d52:	f7ff f81c 	bl	8004d8e <LL_ADC_SetCommonPathInternalCh>
 8005d56:	e008      	b.n	8005d6a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5c:	f043 0220 	orr.w	r2, r3, #32
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d72:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	37d8      	adds	r7, #216	; 0xd8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	80080000 	.word	0x80080000
 8005d84:	50040300 	.word	0x50040300
 8005d88:	c7520000 	.word	0xc7520000
 8005d8c:	50040000 	.word	0x50040000
 8005d90:	20000018 	.word	0x20000018
 8005d94:	053e2d63 	.word	0x053e2d63
 8005d98:	cb840000 	.word	0xcb840000
 8005d9c:	80000001 	.word	0x80000001

08005da0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff f967 	bl	8005084 <LL_ADC_IsEnabled>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d169      	bne.n	8005e90 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <ADC_Enable+0xfc>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00d      	beq.n	8005de6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	f043 0210 	orr.w	r2, r3, #16
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dda:	f043 0201 	orr.w	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e055      	b.n	8005e92 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff f922 	bl	8005034 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005df0:	482b      	ldr	r0, [pc, #172]	; (8005ea0 <ADC_Enable+0x100>)
 8005df2:	f7fe ffdf 	bl	8004db4 <LL_ADC_GetCommonPathInternalCh>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d013      	beq.n	8005e28 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e00:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <ADC_Enable+0x104>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	099b      	lsrs	r3, r3, #6
 8005e06:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <ADC_Enable+0x108>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	099b      	lsrs	r3, r3, #6
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	4613      	mov	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005e1a:	e002      	b.n	8005e22 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f9      	bne.n	8005e1c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e28:	f7fe ff92 	bl	8004d50 <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e2e:	e028      	b.n	8005e82 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff f925 	bl	8005084 <LL_ADC_IsEnabled>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d104      	bne.n	8005e4a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff f8f5 	bl	8005034 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e4a:	f7fe ff81 	bl	8004d50 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d914      	bls.n	8005e82 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d00d      	beq.n	8005e82 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6a:	f043 0210 	orr.w	r2, r3, #16
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e76:	f043 0201 	orr.w	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e007      	b.n	8005e92 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d1cf      	bne.n	8005e30 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	8000003f 	.word	0x8000003f
 8005ea0:	50040300 	.word	0x50040300
 8005ea4:	20000018 	.word	0x20000018
 8005ea8:	053e2d63 	.word	0x053e2d63

08005eac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff f8f6 	bl	80050aa <LL_ADC_IsDisableOngoing>
 8005ebe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff f8dd 	bl	8005084 <LL_ADC_IsEnabled>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d047      	beq.n	8005f60 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d144      	bne.n	8005f60 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 030d 	and.w	r3, r3, #13
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d10c      	bne.n	8005efe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff f8b7 	bl	800505c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005ef6:	f7fe ff2b 	bl	8004d50 <HAL_GetTick>
 8005efa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005efc:	e029      	b.n	8005f52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f02:	f043 0210 	orr.w	r2, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	f043 0201 	orr.w	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e023      	b.n	8005f62 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f1a:	f7fe ff19 	bl	8004d50 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d914      	bls.n	8005f52 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00d      	beq.n	8005f52 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	f043 0210 	orr.w	r2, r3, #16
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f46:	f043 0201 	orr.w	r2, r3, #1
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e007      	b.n	8005f62 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1dc      	bne.n	8005f1a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d14b      	bne.n	800601c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d021      	beq.n	8005fe2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe ff69 	bl	8004e7a <LL_ADC_REG_IsTriggerSourceSWStart>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d032      	beq.n	8006014 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d12b      	bne.n	8006014 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d11f      	bne.n	8006014 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	f043 0201 	orr.w	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
 8005fe0:	e018      	b.n	8006014 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d111      	bne.n	8006014 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600c:	f043 0201 	orr.w	r2, r3, #1
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fac5 	bl	80055a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800601a:	e00e      	b.n	800603a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff facf 	bl	80055cc <HAL_ADC_ErrorCallback>
}
 800602e:	e004      	b.n	800603a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7ff fab1 	bl	80055b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006070:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607c:	f043 0204 	orr.w	r2, r3, #4
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff faa1 	bl	80055cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <LL_ADC_StartCalibration>:
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80060a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <LL_ADC_IsCalibrationOnGoing>:
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d8:	d101      	bne.n	80060de <LL_ADC_IsCalibrationOnGoing+0x1a>
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_ADCEx_Calibration_Start+0x1c>
 8006104:	2302      	movs	r3, #2
 8006106:	e04d      	b.n	80061a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff fecb 	bl	8005eac <ADC_Disable>
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d136      	bne.n	800618e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006124:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006128:	f023 0302 	bic.w	r3, r3, #2
 800612c:	f043 0202 	orr.w	r2, r3, #2
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff ffa9 	bl	8006092 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006140:	e014      	b.n	800616c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	3301      	adds	r3, #1
 8006146:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800614e:	d30d      	bcc.n	800616c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006154:	f023 0312 	bic.w	r3, r3, #18
 8006158:	f043 0210 	orr.w	r2, r3, #16
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e01b      	b.n	80061a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff ffa7 	bl	80060c4 <LL_ADC_IsCalibrationOnGoing>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e2      	bne.n	8006142 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006180:	f023 0303 	bic.w	r3, r3, #3
 8006184:	f043 0201 	orr.w	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	655a      	str	r2, [r3, #84]	; 0x54
 800618c:	e005      	b.n	800619a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006192:	f043 0210 	orr.w	r2, r3, #16
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061bc:	4b0c      	ldr	r3, [pc, #48]	; (80061f0 <__NVIC_SetPriorityGrouping+0x44>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061c8:	4013      	ands	r3, r2
 80061ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061de:	4a04      	ldr	r2, [pc, #16]	; (80061f0 <__NVIC_SetPriorityGrouping+0x44>)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	60d3      	str	r3, [r2, #12]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	e000ed00 	.word	0xe000ed00

080061f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061f8:	4b04      	ldr	r3, [pc, #16]	; (800620c <__NVIC_GetPriorityGrouping+0x18>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	0a1b      	lsrs	r3, r3, #8
 80061fe:	f003 0307 	and.w	r3, r3, #7
}
 8006202:	4618      	mov	r0, r3
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	e000ed00 	.word	0xe000ed00

08006210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800621a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621e:	2b00      	cmp	r3, #0
 8006220:	db0b      	blt.n	800623a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	f003 021f 	and.w	r2, r3, #31
 8006228:	4907      	ldr	r1, [pc, #28]	; (8006248 <__NVIC_EnableIRQ+0x38>)
 800622a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	2001      	movs	r0, #1
 8006232:	fa00 f202 	lsl.w	r2, r0, r2
 8006236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	e000e100 	.word	0xe000e100

0800624c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	6039      	str	r1, [r7, #0]
 8006256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625c:	2b00      	cmp	r3, #0
 800625e:	db0a      	blt.n	8006276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	490c      	ldr	r1, [pc, #48]	; (8006298 <__NVIC_SetPriority+0x4c>)
 8006266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800626a:	0112      	lsls	r2, r2, #4
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	440b      	add	r3, r1
 8006270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006274:	e00a      	b.n	800628c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	b2da      	uxtb	r2, r3
 800627a:	4908      	ldr	r1, [pc, #32]	; (800629c <__NVIC_SetPriority+0x50>)
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	3b04      	subs	r3, #4
 8006284:	0112      	lsls	r2, r2, #4
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	440b      	add	r3, r1
 800628a:	761a      	strb	r2, [r3, #24]
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	e000e100 	.word	0xe000e100
 800629c:	e000ed00 	.word	0xe000ed00

080062a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b089      	sub	sp, #36	; 0x24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	f1c3 0307 	rsb	r3, r3, #7
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	bf28      	it	cs
 80062be:	2304      	movcs	r3, #4
 80062c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	3304      	adds	r3, #4
 80062c6:	2b06      	cmp	r3, #6
 80062c8:	d902      	bls.n	80062d0 <NVIC_EncodePriority+0x30>
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	3b03      	subs	r3, #3
 80062ce:	e000      	b.n	80062d2 <NVIC_EncodePriority+0x32>
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062d4:	f04f 32ff 	mov.w	r2, #4294967295
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	43da      	mvns	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	401a      	ands	r2, r3
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062e8:	f04f 31ff 	mov.w	r1, #4294967295
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	fa01 f303 	lsl.w	r3, r1, r3
 80062f2:	43d9      	mvns	r1, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062f8:	4313      	orrs	r3, r2
         );
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3724      	adds	r7, #36	; 0x24
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff ff4c 	bl	80061ac <__NVIC_SetPriorityGrouping>
}
 8006314:	bf00      	nop
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800632a:	2300      	movs	r3, #0
 800632c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800632e:	f7ff ff61 	bl	80061f4 <__NVIC_GetPriorityGrouping>
 8006332:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	6978      	ldr	r0, [r7, #20]
 800633a:	f7ff ffb1 	bl	80062a0 <NVIC_EncodePriority>
 800633e:	4602      	mov	r2, r0
 8006340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff ff80 	bl	800624c <__NVIC_SetPriority>
}
 800634c:	bf00      	nop
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800635e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff ff54 	bl	8006210 <__NVIC_EnableIRQ>
}
 8006368:	bf00      	nop
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e098      	b.n	80064b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	4b4d      	ldr	r3, [pc, #308]	; (80064c0 <HAL_DMA_Init+0x150>)
 800638a:	429a      	cmp	r2, r3
 800638c:	d80f      	bhi.n	80063ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	4b4b      	ldr	r3, [pc, #300]	; (80064c4 <HAL_DMA_Init+0x154>)
 8006396:	4413      	add	r3, r2
 8006398:	4a4b      	ldr	r2, [pc, #300]	; (80064c8 <HAL_DMA_Init+0x158>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	091b      	lsrs	r3, r3, #4
 80063a0:	009a      	lsls	r2, r3, #2
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a48      	ldr	r2, [pc, #288]	; (80064cc <HAL_DMA_Init+0x15c>)
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40
 80063ac:	e00e      	b.n	80063cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	4b46      	ldr	r3, [pc, #280]	; (80064d0 <HAL_DMA_Init+0x160>)
 80063b6:	4413      	add	r3, r2
 80063b8:	4a43      	ldr	r2, [pc, #268]	; (80064c8 <HAL_DMA_Init+0x158>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	091b      	lsrs	r3, r3, #4
 80063c0:	009a      	lsls	r2, r3, #2
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a42      	ldr	r2, [pc, #264]	; (80064d4 <HAL_DMA_Init+0x164>)
 80063ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80063f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006426:	d039      	beq.n	800649c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	4a27      	ldr	r2, [pc, #156]	; (80064cc <HAL_DMA_Init+0x15c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d11a      	bne.n	8006468 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006432:	4b29      	ldr	r3, [pc, #164]	; (80064d8 <HAL_DMA_Init+0x168>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	f003 031c 	and.w	r3, r3, #28
 800643e:	210f      	movs	r1, #15
 8006440:	fa01 f303 	lsl.w	r3, r1, r3
 8006444:	43db      	mvns	r3, r3
 8006446:	4924      	ldr	r1, [pc, #144]	; (80064d8 <HAL_DMA_Init+0x168>)
 8006448:	4013      	ands	r3, r2
 800644a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800644c:	4b22      	ldr	r3, [pc, #136]	; (80064d8 <HAL_DMA_Init+0x168>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6859      	ldr	r1, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006458:	f003 031c 	and.w	r3, r3, #28
 800645c:	fa01 f303 	lsl.w	r3, r1, r3
 8006460:	491d      	ldr	r1, [pc, #116]	; (80064d8 <HAL_DMA_Init+0x168>)
 8006462:	4313      	orrs	r3, r2
 8006464:	600b      	str	r3, [r1, #0]
 8006466:	e019      	b.n	800649c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006468:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <HAL_DMA_Init+0x16c>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006470:	f003 031c 	and.w	r3, r3, #28
 8006474:	210f      	movs	r1, #15
 8006476:	fa01 f303 	lsl.w	r3, r1, r3
 800647a:	43db      	mvns	r3, r3
 800647c:	4917      	ldr	r1, [pc, #92]	; (80064dc <HAL_DMA_Init+0x16c>)
 800647e:	4013      	ands	r3, r2
 8006480:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006482:	4b16      	ldr	r3, [pc, #88]	; (80064dc <HAL_DMA_Init+0x16c>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648e:	f003 031c 	and.w	r3, r3, #28
 8006492:	fa01 f303 	lsl.w	r3, r1, r3
 8006496:	4911      	ldr	r1, [pc, #68]	; (80064dc <HAL_DMA_Init+0x16c>)
 8006498:	4313      	orrs	r3, r2
 800649a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	40020407 	.word	0x40020407
 80064c4:	bffdfff8 	.word	0xbffdfff8
 80064c8:	cccccccd 	.word	0xcccccccd
 80064cc:	40020000 	.word	0x40020000
 80064d0:	bffdfbf8 	.word	0xbffdfbf8
 80064d4:	40020400 	.word	0x40020400
 80064d8:	400200a8 	.word	0x400200a8
 80064dc:	400204a8 	.word	0x400204a8

080064e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_DMA_Start_IT+0x20>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e04b      	b.n	8006598 <HAL_DMA_Start_IT+0xb8>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d13a      	bne.n	800658a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0201 	bic.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f96b 	bl	8006814 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 020e 	orr.w	r2, r2, #14
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e00f      	b.n	8006578 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0204 	bic.w	r2, r2, #4
 8006566:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 020a 	orr.w	r2, r2, #10
 8006576:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e005      	b.n	8006596 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006592:	2302      	movs	r3, #2
 8006594:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006596:	7dfb      	ldrb	r3, [r7, #23]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d008      	beq.n	80065ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2204      	movs	r2, #4
 80065bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e022      	b.n	8006610 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 020e 	bic.w	r2, r2, #14
 80065d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ee:	f003 021c 	and.w	r2, r3, #28
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	2101      	movs	r1, #1
 80065f8:	fa01 f202 	lsl.w	r2, r1, r2
 80065fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d005      	beq.n	8006640 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2204      	movs	r2, #4
 8006638:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	73fb      	strb	r3, [r7, #15]
 800663e:	e029      	b.n	8006694 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 020e 	bic.w	r2, r2, #14
 800664e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0201 	bic.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006664:	f003 021c 	and.w	r2, r3, #28
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	2101      	movs	r1, #1
 800666e:	fa01 f202 	lsl.w	r2, r1, r2
 8006672:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
    }
  }
  return status;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	f003 031c 	and.w	r3, r3, #28
 80066be:	2204      	movs	r2, #4
 80066c0:	409a      	lsls	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4013      	ands	r3, r2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d026      	beq.n	8006718 <HAL_DMA_IRQHandler+0x7a>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d021      	beq.n	8006718 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d107      	bne.n	80066f2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0204 	bic.w	r2, r2, #4
 80066f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f6:	f003 021c 	and.w	r2, r3, #28
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	2104      	movs	r1, #4
 8006700:	fa01 f202 	lsl.w	r2, r1, r2
 8006704:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	2b00      	cmp	r3, #0
 800670c:	d071      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006716:	e06c      	b.n	80067f2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	f003 031c 	and.w	r3, r3, #28
 8006720:	2202      	movs	r2, #2
 8006722:	409a      	lsls	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4013      	ands	r3, r2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d02e      	beq.n	800678a <HAL_DMA_IRQHandler+0xec>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d029      	beq.n	800678a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10b      	bne.n	800675c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 020a 	bic.w	r2, r2, #10
 8006752:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006760:	f003 021c 	and.w	r2, r3, #28
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	2102      	movs	r1, #2
 800676a:	fa01 f202 	lsl.w	r2, r1, r2
 800676e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d038      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006788:	e033      	b.n	80067f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678e:	f003 031c 	and.w	r3, r3, #28
 8006792:	2208      	movs	r2, #8
 8006794:	409a      	lsls	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4013      	ands	r3, r2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d02a      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x156>
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d025      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 020e 	bic.w	r2, r2, #14
 80067b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067bc:	f003 021c 	and.w	r2, r3, #28
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	2101      	movs	r1, #1
 80067c6:	fa01 f202 	lsl.w	r2, r1, r2
 80067ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d004      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
}
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006826:	f003 021c 	and.w	r2, r3, #28
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	2101      	movs	r1, #1
 8006830:	fa01 f202 	lsl.w	r2, r1, r2
 8006834:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	2b10      	cmp	r3, #16
 8006844:	d108      	bne.n	8006858 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006856:	e007      	b.n	8006868 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	60da      	str	r2, [r3, #12]
}
 8006868:	bf00      	nop
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006886:	4b2f      	ldr	r3, [pc, #188]	; (8006944 <HAL_FLASH_Program+0xd0>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_FLASH_Program+0x1e>
 800688e:	2302      	movs	r3, #2
 8006890:	e053      	b.n	800693a <HAL_FLASH_Program+0xc6>
 8006892:	4b2c      	ldr	r3, [pc, #176]	; (8006944 <HAL_FLASH_Program+0xd0>)
 8006894:	2201      	movs	r2, #1
 8006896:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006898:	f24c 3050 	movw	r0, #50000	; 0xc350
 800689c:	f000 f894 	bl	80069c8 <FLASH_WaitForLastOperation>
 80068a0:	4603      	mov	r3, r0
 80068a2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d143      	bne.n	8006932 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80068aa:	4b26      	ldr	r3, [pc, #152]	; (8006944 <HAL_FLASH_Program+0xd0>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80068b0:	4b25      	ldr	r3, [pc, #148]	; (8006948 <HAL_FLASH_Program+0xd4>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d009      	beq.n	80068d0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80068bc:	4b22      	ldr	r3, [pc, #136]	; (8006948 <HAL_FLASH_Program+0xd4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a21      	ldr	r2, [pc, #132]	; (8006948 <HAL_FLASH_Program+0xd4>)
 80068c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068c6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80068c8:	4b1e      	ldr	r3, [pc, #120]	; (8006944 <HAL_FLASH_Program+0xd0>)
 80068ca:	2202      	movs	r2, #2
 80068cc:	771a      	strb	r2, [r3, #28]
 80068ce:	e002      	b.n	80068d6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80068d0:	4b1c      	ldr	r3, [pc, #112]	; (8006944 <HAL_FLASH_Program+0xd0>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d107      	bne.n	80068ec <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80068dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068e0:	68b8      	ldr	r0, [r7, #8]
 80068e2:	f000 f8c9 	bl	8006a78 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80068e6:	2301      	movs	r3, #1
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	e010      	b.n	800690e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d002      	beq.n	80068f8 <HAL_FLASH_Program+0x84>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d10a      	bne.n	800690e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	4619      	mov	r1, r3
 80068fc:	68b8      	ldr	r0, [r7, #8]
 80068fe:	f000 f8e1 	bl	8006ac4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d102      	bne.n	800690e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006908:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800690c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800690e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006912:	f000 f859 	bl	80069c8 <FLASH_WaitForLastOperation>
 8006916:	4603      	mov	r3, r0
 8006918:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d006      	beq.n	800692e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006920:	4b09      	ldr	r3, [pc, #36]	; (8006948 <HAL_FLASH_Program+0xd4>)
 8006922:	695a      	ldr	r2, [r3, #20]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	43db      	mvns	r3, r3
 8006928:	4907      	ldr	r1, [pc, #28]	; (8006948 <HAL_FLASH_Program+0xd4>)
 800692a:	4013      	ands	r3, r2
 800692c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800692e:	f000 f9db 	bl	8006ce8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006932:	4b04      	ldr	r3, [pc, #16]	; (8006944 <HAL_FLASH_Program+0xd0>)
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]

  return status;
 8006938:	7dfb      	ldrb	r3, [r7, #23]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000024 	.word	0x20000024
 8006948:	40022000 	.word	0x40022000

0800694c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <HAL_FLASH_Unlock+0x38>)
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	da0b      	bge.n	8006976 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <HAL_FLASH_Unlock+0x38>)
 8006960:	4a09      	ldr	r2, [pc, #36]	; (8006988 <HAL_FLASH_Unlock+0x3c>)
 8006962:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006964:	4b07      	ldr	r3, [pc, #28]	; (8006984 <HAL_FLASH_Unlock+0x38>)
 8006966:	4a09      	ldr	r2, [pc, #36]	; (800698c <HAL_FLASH_Unlock+0x40>)
 8006968:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800696a:	4b06      	ldr	r3, [pc, #24]	; (8006984 <HAL_FLASH_Unlock+0x38>)
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	da01      	bge.n	8006976 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006976:	79fb      	ldrb	r3, [r7, #7]
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40022000 	.word	0x40022000
 8006988:	45670123 	.word	0x45670123
 800698c:	cdef89ab 	.word	0xcdef89ab

08006990 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <HAL_FLASH_Lock+0x1c>)
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	4a04      	ldr	r2, [pc, #16]	; (80069ac <HAL_FLASH_Lock+0x1c>)
 800699a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800699e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	40022000 	.word	0x40022000

080069b0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80069b4:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <HAL_FLASH_GetError+0x14>)
 80069b6:	685b      	ldr	r3, [r3, #4]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20000024 	.word	0x20000024

080069c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80069d0:	f7fe f9be 	bl	8004d50 <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80069d6:	e00d      	b.n	80069f4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d009      	beq.n	80069f4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80069e0:	f7fe f9b6 	bl	8004d50 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d801      	bhi.n	80069f4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e036      	b.n	8006a62 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80069f4:	4b1d      	ldr	r3, [pc, #116]	; (8006a6c <FLASH_WaitForLastOperation+0xa4>)
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1eb      	bne.n	80069d8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006a00:	4b1a      	ldr	r3, [pc, #104]	; (8006a6c <FLASH_WaitForLastOperation+0xa4>)
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <FLASH_WaitForLastOperation+0xa8>)
 8006a06:	4013      	ands	r3, r2
 8006a08:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01e      	beq.n	8006a4e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8006a10:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <FLASH_WaitForLastOperation+0xac>)
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	4a16      	ldr	r2, [pc, #88]	; (8006a74 <FLASH_WaitForLastOperation+0xac>)
 8006a1a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <FLASH_WaitForLastOperation+0x6e>
 8006a26:	4b11      	ldr	r3, [pc, #68]	; (8006a6c <FLASH_WaitForLastOperation+0xa4>)
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006a30:	490e      	ldr	r1, [pc, #56]	; (8006a6c <FLASH_WaitForLastOperation+0xa4>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	618b      	str	r3, [r1, #24]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d004      	beq.n	8006a4a <FLASH_WaitForLastOperation+0x82>
 8006a40:	4a0a      	ldr	r2, [pc, #40]	; (8006a6c <FLASH_WaitForLastOperation+0xa4>)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006a48:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e009      	b.n	8006a62 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006a4e:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <FLASH_WaitForLastOperation+0xa4>)
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006a5a:	4b04      	ldr	r3, [pc, #16]	; (8006a6c <FLASH_WaitForLastOperation+0xa4>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40022000 	.word	0x40022000
 8006a70:	0002c3fa 	.word	0x0002c3fa
 8006a74:	20000024 	.word	0x20000024

08006a78 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006a84:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <FLASH_Program_DoubleWord+0x48>)
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <FLASH_Program_DoubleWord+0x48>)
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006a96:	f3bf 8f6f 	isb	sy
}
 8006a9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	000a      	movs	r2, r1
 8006aaa:	2300      	movs	r3, #0
 8006aac:	68f9      	ldr	r1, [r7, #12]
 8006aae:	3104      	adds	r1, #4
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	600b      	str	r3, [r1, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40022000 	.word	0x40022000

08006ac4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b089      	sub	sp, #36	; 0x24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006ace:	2340      	movs	r3, #64	; 0x40
 8006ad0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006ada:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <FLASH_Program_Fast+0x68>)
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	4a13      	ldr	r2, [pc, #76]	; (8006b2c <FLASH_Program_Fast+0x68>)
 8006ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ae4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8006aea:	60fb      	str	r3, [r7, #12]
  return(result);
 8006aec:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006af0:	b672      	cpsid	i
}
 8006af2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	3304      	adds	r3, #4
 8006b00:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	3304      	adds	r3, #4
 8006b06:	617b      	str	r3, [r7, #20]
    row_index--;
 8006b08:	7ffb      	ldrb	r3, [r7, #31]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8006b0e:	7ffb      	ldrb	r3, [r7, #31]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1ef      	bne.n	8006af4 <FLASH_Program_Fast+0x30>
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f383 8810 	msr	PRIMASK, r3
}
 8006b1e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8006b20:	bf00      	nop
 8006b22:	3724      	adds	r7, #36	; 0x24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	40022000 	.word	0x40022000

08006b30 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006b3a:	4b48      	ldr	r3, [pc, #288]	; (8006c5c <HAL_FLASHEx_Erase+0x12c>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_FLASHEx_Erase+0x16>
 8006b42:	2302      	movs	r3, #2
 8006b44:	e085      	b.n	8006c52 <HAL_FLASHEx_Erase+0x122>
 8006b46:	4b45      	ldr	r3, [pc, #276]	; (8006c5c <HAL_FLASHEx_Erase+0x12c>)
 8006b48:	2201      	movs	r2, #1
 8006b4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006b50:	f7ff ff3a 	bl	80069c8 <FLASH_WaitForLastOperation>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d175      	bne.n	8006c4a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b5e:	4b3f      	ldr	r3, [pc, #252]	; (8006c5c <HAL_FLASHEx_Erase+0x12c>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006b64:	4b3e      	ldr	r3, [pc, #248]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d013      	beq.n	8006b98 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006b70:	4b3b      	ldr	r3, [pc, #236]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d009      	beq.n	8006b90 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006b7c:	4b38      	ldr	r3, [pc, #224]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a37      	ldr	r2, [pc, #220]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b86:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006b88:	4b34      	ldr	r3, [pc, #208]	; (8006c5c <HAL_FLASHEx_Erase+0x12c>)
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	771a      	strb	r2, [r3, #28]
 8006b8e:	e016      	b.n	8006bbe <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006b90:	4b32      	ldr	r3, [pc, #200]	; (8006c5c <HAL_FLASHEx_Erase+0x12c>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	771a      	strb	r2, [r3, #28]
 8006b96:	e012      	b.n	8006bbe <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006b98:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d009      	beq.n	8006bb8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006ba4:	4b2e      	ldr	r3, [pc, #184]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2d      	ldr	r2, [pc, #180]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bae:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006bb0:	4b2a      	ldr	r3, [pc, #168]	; (8006c5c <HAL_FLASHEx_Erase+0x12c>)
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	771a      	strb	r2, [r3, #28]
 8006bb6:	e002      	b.n	8006bbe <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006bb8:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <HAL_FLASHEx_Erase+0x12c>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d111      	bne.n	8006bea <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f84a 	bl	8006c64 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006bd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006bd4:	f7ff fef8 	bl	80069c8 <FLASH_WaitForLastOperation>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8006bdc:	4b20      	ldr	r3, [pc, #128]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	4a1f      	ldr	r2, [pc, #124]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006be2:	f023 0304 	bic.w	r3, r3, #4
 8006be6:	6153      	str	r3, [r2, #20]
 8006be8:	e02d      	b.n	8006c46 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	e01d      	b.n	8006c36 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	68b8      	ldr	r0, [r7, #8]
 8006c02:	f000 f84d 	bl	8006ca0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c0a:	f7ff fedd 	bl	80069c8 <FLASH_WaitForLastOperation>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006c12:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	4a12      	ldr	r2, [pc, #72]	; (8006c60 <HAL_FLASHEx_Erase+0x130>)
 8006c18:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8006c1c:	f023 0302 	bic.w	r3, r3, #2
 8006c20:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	601a      	str	r2, [r3, #0]
          break;
 8006c2e:	e00a      	b.n	8006c46 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3301      	adds	r3, #1
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d3d9      	bcc.n	8006bfa <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006c46:	f000 f84f 	bl	8006ce8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006c4a:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <HAL_FLASHEx_Erase+0x12c>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]

  return status;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000024 	.word	0x20000024
 8006c60:	40022000 	.word	0x40022000

08006c64 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006c76:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <FLASH_MassErase+0x38>)
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	4a08      	ldr	r2, [pc, #32]	; (8006c9c <FLASH_MassErase+0x38>)
 8006c7c:	f043 0304 	orr.w	r3, r3, #4
 8006c80:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006c82:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <FLASH_MassErase+0x38>)
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	4a05      	ldr	r2, [pc, #20]	; (8006c9c <FLASH_MassErase+0x38>)
 8006c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8c:	6153      	str	r3, [r2, #20]
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40022000 	.word	0x40022000

08006ca0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006caa:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <FLASH_PageErase+0x44>)
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006cba:	490a      	ldr	r1, [pc, #40]	; (8006ce4 <FLASH_PageErase+0x44>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006cc0:	4b08      	ldr	r3, [pc, #32]	; (8006ce4 <FLASH_PageErase+0x44>)
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	4a07      	ldr	r2, [pc, #28]	; (8006ce4 <FLASH_PageErase+0x44>)
 8006cc6:	f043 0302 	orr.w	r3, r3, #2
 8006cca:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <FLASH_PageErase+0x44>)
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	4a04      	ldr	r2, [pc, #16]	; (8006ce4 <FLASH_PageErase+0x44>)
 8006cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd6:	6153      	str	r3, [r2, #20]
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40022000 	.word	0x40022000

08006ce8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006cee:	4b21      	ldr	r3, [pc, #132]	; (8006d74 <FLASH_FlushCaches+0x8c>)
 8006cf0:	7f1b      	ldrb	r3, [r3, #28]
 8006cf2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d002      	beq.n	8006d00 <FLASH_FlushCaches+0x18>
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d117      	bne.n	8006d30 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006d00:	4b1d      	ldr	r3, [pc, #116]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1c      	ldr	r2, [pc, #112]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d0a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a19      	ldr	r2, [pc, #100]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	4b17      	ldr	r3, [pc, #92]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d22:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d24:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d2e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d002      	beq.n	8006d3c <FLASH_FlushCaches+0x54>
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d111      	bne.n	8006d60 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006d3c:	4b0e      	ldr	r3, [pc, #56]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a0d      	ldr	r2, [pc, #52]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a0a      	ldr	r2, [pc, #40]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d52:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d54:	4b08      	ldr	r3, [pc, #32]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a07      	ldr	r2, [pc, #28]	; (8006d78 <FLASH_FlushCaches+0x90>)
 8006d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d5e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <FLASH_FlushCaches+0x8c>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	771a      	strb	r2, [r3, #28]
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20000024 	.word	0x20000024
 8006d78:	40022000 	.word	0x40022000

08006d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d8a:	e154      	b.n	8007036 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	2101      	movs	r1, #1
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	fa01 f303 	lsl.w	r3, r1, r3
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 8146 	beq.w	8007030 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d005      	beq.n	8006dbc <HAL_GPIO_Init+0x40>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d130      	bne.n	8006e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006df2:	2201      	movs	r2, #1
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfa:	43db      	mvns	r3, r3
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	091b      	lsrs	r3, r3, #4
 8006e08:	f003 0201 	and.w	r2, r3, #1
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d017      	beq.n	8006e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	2203      	movs	r2, #3
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d123      	bne.n	8006eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	08da      	lsrs	r2, r3, #3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3208      	adds	r2, #8
 8006e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	220f      	movs	r2, #15
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	43db      	mvns	r3, r3
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4013      	ands	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	08da      	lsrs	r2, r3, #3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3208      	adds	r2, #8
 8006ea8:	6939      	ldr	r1, [r7, #16]
 8006eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	2203      	movs	r2, #3
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f003 0203 	and.w	r2, r3, #3
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80a0 	beq.w	8007030 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ef0:	4b58      	ldr	r3, [pc, #352]	; (8007054 <HAL_GPIO_Init+0x2d8>)
 8006ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef4:	4a57      	ldr	r2, [pc, #348]	; (8007054 <HAL_GPIO_Init+0x2d8>)
 8006ef6:	f043 0301 	orr.w	r3, r3, #1
 8006efa:	6613      	str	r3, [r2, #96]	; 0x60
 8006efc:	4b55      	ldr	r3, [pc, #340]	; (8007054 <HAL_GPIO_Init+0x2d8>)
 8006efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	60bb      	str	r3, [r7, #8]
 8006f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006f08:	4a53      	ldr	r2, [pc, #332]	; (8007058 <HAL_GPIO_Init+0x2dc>)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	089b      	lsrs	r3, r3, #2
 8006f0e:	3302      	adds	r3, #2
 8006f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	220f      	movs	r2, #15
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	43db      	mvns	r3, r3
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f32:	d019      	beq.n	8006f68 <HAL_GPIO_Init+0x1ec>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a49      	ldr	r2, [pc, #292]	; (800705c <HAL_GPIO_Init+0x2e0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d013      	beq.n	8006f64 <HAL_GPIO_Init+0x1e8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a48      	ldr	r2, [pc, #288]	; (8007060 <HAL_GPIO_Init+0x2e4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d00d      	beq.n	8006f60 <HAL_GPIO_Init+0x1e4>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a47      	ldr	r2, [pc, #284]	; (8007064 <HAL_GPIO_Init+0x2e8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d007      	beq.n	8006f5c <HAL_GPIO_Init+0x1e0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a46      	ldr	r2, [pc, #280]	; (8007068 <HAL_GPIO_Init+0x2ec>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d101      	bne.n	8006f58 <HAL_GPIO_Init+0x1dc>
 8006f54:	2304      	movs	r3, #4
 8006f56:	e008      	b.n	8006f6a <HAL_GPIO_Init+0x1ee>
 8006f58:	2307      	movs	r3, #7
 8006f5a:	e006      	b.n	8006f6a <HAL_GPIO_Init+0x1ee>
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e004      	b.n	8006f6a <HAL_GPIO_Init+0x1ee>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e002      	b.n	8006f6a <HAL_GPIO_Init+0x1ee>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <HAL_GPIO_Init+0x1ee>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	f002 0203 	and.w	r2, r2, #3
 8006f70:	0092      	lsls	r2, r2, #2
 8006f72:	4093      	lsls	r3, r2
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006f7a:	4937      	ldr	r1, [pc, #220]	; (8007058 <HAL_GPIO_Init+0x2dc>)
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	089b      	lsrs	r3, r3, #2
 8006f80:	3302      	adds	r3, #2
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f88:	4b38      	ldr	r3, [pc, #224]	; (800706c <HAL_GPIO_Init+0x2f0>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	43db      	mvns	r3, r3
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4013      	ands	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006fac:	4a2f      	ldr	r2, [pc, #188]	; (800706c <HAL_GPIO_Init+0x2f0>)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006fb2:	4b2e      	ldr	r3, [pc, #184]	; (800706c <HAL_GPIO_Init+0x2f0>)
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	43db      	mvns	r3, r3
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006fd6:	4a25      	ldr	r2, [pc, #148]	; (800706c <HAL_GPIO_Init+0x2f0>)
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006fdc:	4b23      	ldr	r3, [pc, #140]	; (800706c <HAL_GPIO_Init+0x2f0>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d003      	beq.n	8007000 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007000:	4a1a      	ldr	r2, [pc, #104]	; (800706c <HAL_GPIO_Init+0x2f0>)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007006:	4b19      	ldr	r3, [pc, #100]	; (800706c <HAL_GPIO_Init+0x2f0>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	43db      	mvns	r3, r3
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4013      	ands	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800702a:	4a10      	ldr	r2, [pc, #64]	; (800706c <HAL_GPIO_Init+0x2f0>)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	3301      	adds	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	fa22 f303 	lsr.w	r3, r2, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	f47f aea3 	bne.w	8006d8c <HAL_GPIO_Init+0x10>
  }
}
 8007046:	bf00      	nop
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	40021000 	.word	0x40021000
 8007058:	40010000 	.word	0x40010000
 800705c:	48000400 	.word	0x48000400
 8007060:	48000800 	.word	0x48000800
 8007064:	48000c00 	.word	0x48000c00
 8007068:	48001000 	.word	0x48001000
 800706c:	40010400 	.word	0x40010400

08007070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	887b      	ldrh	r3, [r7, #2]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007088:	2301      	movs	r3, #1
 800708a:	73fb      	strb	r3, [r7, #15]
 800708c:	e001      	b.n	8007092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	807b      	strh	r3, [r7, #2]
 80070ac:	4613      	mov	r3, r2
 80070ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070b0:	787b      	ldrb	r3, [r7, #1]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070b6:	887a      	ldrh	r2, [r7, #2]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070bc:	e002      	b.n	80070c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070be:	887a      	ldrh	r2, [r7, #2]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80070e2:	887a      	ldrh	r2, [r7, #2]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4013      	ands	r3, r2
 80070e8:	041a      	lsls	r2, r3, #16
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	43d9      	mvns	r1, r3
 80070ee:	887b      	ldrh	r3, [r7, #2]
 80070f0:	400b      	ands	r3, r1
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	619a      	str	r2, [r3, #24]
}
 80070f8:	bf00      	nop
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007108:	4b04      	ldr	r3, [pc, #16]	; (800711c <HAL_PWREx_GetVoltageRange+0x18>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007110:	4618      	mov	r0, r3
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	40007000 	.word	0x40007000

08007120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800712e:	d130      	bne.n	8007192 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007130:	4b23      	ldr	r3, [pc, #140]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800713c:	d038      	beq.n	80071b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800713e:	4b20      	ldr	r3, [pc, #128]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007146:	4a1e      	ldr	r2, [pc, #120]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800714c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800714e:	4b1d      	ldr	r3, [pc, #116]	; (80071c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2232      	movs	r2, #50	; 0x32
 8007154:	fb02 f303 	mul.w	r3, r2, r3
 8007158:	4a1b      	ldr	r2, [pc, #108]	; (80071c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800715a:	fba2 2303 	umull	r2, r3, r2, r3
 800715e:	0c9b      	lsrs	r3, r3, #18
 8007160:	3301      	adds	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007164:	e002      	b.n	800716c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b01      	subs	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800716c:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007178:	d102      	bne.n	8007180 <HAL_PWREx_ControlVoltageScaling+0x60>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1f2      	bne.n	8007166 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007180:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718c:	d110      	bne.n	80071b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e00f      	b.n	80071b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007192:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800719a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800719e:	d007      	beq.n	80071b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80071a8:	4a05      	ldr	r2, [pc, #20]	; (80071c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80071aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	40007000 	.word	0x40007000
 80071c4:	20000018 	.word	0x20000018
 80071c8:	431bde83 	.word	0x431bde83

080071cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e3fe      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071de:	4ba1      	ldr	r3, [pc, #644]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 030c 	and.w	r3, r3, #12
 80071e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071e8:	4b9e      	ldr	r3, [pc, #632]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0310 	and.w	r3, r3, #16
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80e4 	beq.w	80073c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <HAL_RCC_OscConfig+0x4a>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b0c      	cmp	r3, #12
 800720a:	f040 808b 	bne.w	8007324 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b01      	cmp	r3, #1
 8007212:	f040 8087 	bne.w	8007324 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007216:	4b93      	ldr	r3, [pc, #588]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <HAL_RCC_OscConfig+0x62>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e3d6      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1a      	ldr	r2, [r3, #32]
 8007232:	4b8c      	ldr	r3, [pc, #560]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <HAL_RCC_OscConfig+0x7c>
 800723e:	4b89      	ldr	r3, [pc, #548]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007246:	e005      	b.n	8007254 <HAL_RCC_OscConfig+0x88>
 8007248:	4b86      	ldr	r3, [pc, #536]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800724a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800724e:	091b      	lsrs	r3, r3, #4
 8007250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007254:	4293      	cmp	r3, r2
 8007256:	d223      	bcs.n	80072a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fdbd 	bl	8007ddc <RCC_SetFlashLatencyFromMSIRange>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e3b7      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800726c:	4b7d      	ldr	r3, [pc, #500]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a7c      	ldr	r2, [pc, #496]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007272:	f043 0308 	orr.w	r3, r3, #8
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	4b7a      	ldr	r3, [pc, #488]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	4977      	ldr	r1, [pc, #476]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007286:	4313      	orrs	r3, r2
 8007288:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800728a:	4b76      	ldr	r3, [pc, #472]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	4972      	ldr	r1, [pc, #456]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800729a:	4313      	orrs	r3, r2
 800729c:	604b      	str	r3, [r1, #4]
 800729e:	e025      	b.n	80072ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072a0:	4b70      	ldr	r3, [pc, #448]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a6f      	ldr	r2, [pc, #444]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80072a6:	f043 0308 	orr.w	r3, r3, #8
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	4b6d      	ldr	r3, [pc, #436]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	496a      	ldr	r1, [pc, #424]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072be:	4b69      	ldr	r3, [pc, #420]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	4965      	ldr	r1, [pc, #404]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 fd7d 	bl	8007ddc <RCC_SetFlashLatencyFromMSIRange>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e377      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072ec:	f000 fc80 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 80072f0:	4602      	mov	r2, r0
 80072f2:	4b5c      	ldr	r3, [pc, #368]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	091b      	lsrs	r3, r3, #4
 80072f8:	f003 030f 	and.w	r3, r3, #15
 80072fc:	495a      	ldr	r1, [pc, #360]	; (8007468 <HAL_RCC_OscConfig+0x29c>)
 80072fe:	5ccb      	ldrb	r3, [r1, r3]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	4a58      	ldr	r2, [pc, #352]	; (800746c <HAL_RCC_OscConfig+0x2a0>)
 800730a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800730c:	4b58      	ldr	r3, [pc, #352]	; (8007470 <HAL_RCC_OscConfig+0x2a4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f7fd fb47 	bl	80049a4 <HAL_InitTick>
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d052      	beq.n	80073c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	e35b      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d032      	beq.n	8007392 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800732c:	4b4d      	ldr	r3, [pc, #308]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a4c      	ldr	r2, [pc, #304]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007332:	f043 0301 	orr.w	r3, r3, #1
 8007336:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007338:	f7fd fd0a 	bl	8004d50 <HAL_GetTick>
 800733c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007340:	f7fd fd06 	bl	8004d50 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e344      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007352:	4b44      	ldr	r3, [pc, #272]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0f0      	beq.n	8007340 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800735e:	4b41      	ldr	r3, [pc, #260]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a40      	ldr	r2, [pc, #256]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007364:	f043 0308 	orr.w	r3, r3, #8
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4b3e      	ldr	r3, [pc, #248]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	493b      	ldr	r1, [pc, #236]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007378:	4313      	orrs	r3, r2
 800737a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800737c:	4b39      	ldr	r3, [pc, #228]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	4936      	ldr	r1, [pc, #216]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800738c:	4313      	orrs	r3, r2
 800738e:	604b      	str	r3, [r1, #4]
 8007390:	e01a      	b.n	80073c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007392:	4b34      	ldr	r3, [pc, #208]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a33      	ldr	r2, [pc, #204]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800739e:	f7fd fcd7 	bl	8004d50 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80073a4:	e008      	b.n	80073b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80073a6:	f7fd fcd3 	bl	8004d50 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e311      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80073b8:	4b2a      	ldr	r3, [pc, #168]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1f0      	bne.n	80073a6 <HAL_RCC_OscConfig+0x1da>
 80073c4:	e000      	b.n	80073c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80073c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d074      	beq.n	80074be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d005      	beq.n	80073e6 <HAL_RCC_OscConfig+0x21a>
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b0c      	cmp	r3, #12
 80073de:	d10e      	bne.n	80073fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d10b      	bne.n	80073fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073e6:	4b1f      	ldr	r3, [pc, #124]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d064      	beq.n	80074bc <HAL_RCC_OscConfig+0x2f0>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d160      	bne.n	80074bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e2ee      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007406:	d106      	bne.n	8007416 <HAL_RCC_OscConfig+0x24a>
 8007408:	4b16      	ldr	r3, [pc, #88]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a15      	ldr	r2, [pc, #84]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800740e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	e01d      	b.n	8007452 <HAL_RCC_OscConfig+0x286>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800741e:	d10c      	bne.n	800743a <HAL_RCC_OscConfig+0x26e>
 8007420:	4b10      	ldr	r3, [pc, #64]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a0f      	ldr	r2, [pc, #60]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007426:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	4b0d      	ldr	r3, [pc, #52]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a0c      	ldr	r2, [pc, #48]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	e00b      	b.n	8007452 <HAL_RCC_OscConfig+0x286>
 800743a:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a09      	ldr	r2, [pc, #36]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	4b07      	ldr	r3, [pc, #28]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a06      	ldr	r2, [pc, #24]	; (8007464 <HAL_RCC_OscConfig+0x298>)
 800744c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007450:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01c      	beq.n	8007494 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745a:	f7fd fc79 	bl	8004d50 <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007460:	e011      	b.n	8007486 <HAL_RCC_OscConfig+0x2ba>
 8007462:	bf00      	nop
 8007464:	40021000 	.word	0x40021000
 8007468:	08014260 	.word	0x08014260
 800746c:	20000018 	.word	0x20000018
 8007470:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007474:	f7fd fc6c 	bl	8004d50 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b64      	cmp	r3, #100	; 0x64
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e2aa      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007486:	4baf      	ldr	r3, [pc, #700]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0f0      	beq.n	8007474 <HAL_RCC_OscConfig+0x2a8>
 8007492:	e014      	b.n	80074be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007494:	f7fd fc5c 	bl	8004d50 <HAL_GetTick>
 8007498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800749a:	e008      	b.n	80074ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800749c:	f7fd fc58 	bl	8004d50 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b64      	cmp	r3, #100	; 0x64
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e296      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074ae:	4ba5      	ldr	r3, [pc, #660]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1f0      	bne.n	800749c <HAL_RCC_OscConfig+0x2d0>
 80074ba:	e000      	b.n	80074be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d060      	beq.n	800758c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d005      	beq.n	80074dc <HAL_RCC_OscConfig+0x310>
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b0c      	cmp	r3, #12
 80074d4:	d119      	bne.n	800750a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d116      	bne.n	800750a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074dc:	4b99      	ldr	r3, [pc, #612]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_RCC_OscConfig+0x328>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e273      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f4:	4b93      	ldr	r3, [pc, #588]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	061b      	lsls	r3, r3, #24
 8007502:	4990      	ldr	r1, [pc, #576]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007504:	4313      	orrs	r3, r2
 8007506:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007508:	e040      	b.n	800758c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d023      	beq.n	800755a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007512:	4b8c      	ldr	r3, [pc, #560]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a8b      	ldr	r2, [pc, #556]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800751c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751e:	f7fd fc17 	bl	8004d50 <HAL_GetTick>
 8007522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007524:	e008      	b.n	8007538 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007526:	f7fd fc13 	bl	8004d50 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d901      	bls.n	8007538 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e251      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007538:	4b82      	ldr	r3, [pc, #520]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0f0      	beq.n	8007526 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007544:	4b7f      	ldr	r3, [pc, #508]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	061b      	lsls	r3, r3, #24
 8007552:	497c      	ldr	r1, [pc, #496]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007554:	4313      	orrs	r3, r2
 8007556:	604b      	str	r3, [r1, #4]
 8007558:	e018      	b.n	800758c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800755a:	4b7a      	ldr	r3, [pc, #488]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a79      	ldr	r2, [pc, #484]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007566:	f7fd fbf3 	bl	8004d50 <HAL_GetTick>
 800756a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800756c:	e008      	b.n	8007580 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800756e:	f7fd fbef 	bl	8004d50 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d901      	bls.n	8007580 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e22d      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007580:	4b70      	ldr	r3, [pc, #448]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1f0      	bne.n	800756e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d03c      	beq.n	8007612 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01c      	beq.n	80075da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075a0:	4b68      	ldr	r3, [pc, #416]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80075a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075a6:	4a67      	ldr	r2, [pc, #412]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80075a8:	f043 0301 	orr.w	r3, r3, #1
 80075ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b0:	f7fd fbce 	bl	8004d50 <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075b6:	e008      	b.n	80075ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075b8:	f7fd fbca 	bl	8004d50 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e208      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075ca:	4b5e      	ldr	r3, [pc, #376]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80075cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0ef      	beq.n	80075b8 <HAL_RCC_OscConfig+0x3ec>
 80075d8:	e01b      	b.n	8007612 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075da:	4b5a      	ldr	r3, [pc, #360]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80075dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075e0:	4a58      	ldr	r2, [pc, #352]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80075e2:	f023 0301 	bic.w	r3, r3, #1
 80075e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ea:	f7fd fbb1 	bl	8004d50 <HAL_GetTick>
 80075ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075f0:	e008      	b.n	8007604 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075f2:	f7fd fbad 	bl	8004d50 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d901      	bls.n	8007604 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e1eb      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007604:	4b4f      	ldr	r3, [pc, #316]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1ef      	bne.n	80075f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 80a6 	beq.w	800776c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007620:	2300      	movs	r3, #0
 8007622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007624:	4b47      	ldr	r3, [pc, #284]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10d      	bne.n	800764c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007630:	4b44      	ldr	r3, [pc, #272]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007634:	4a43      	ldr	r2, [pc, #268]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800763a:	6593      	str	r3, [r2, #88]	; 0x58
 800763c:	4b41      	ldr	r3, [pc, #260]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 800763e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007644:	60bb      	str	r3, [r7, #8]
 8007646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007648:	2301      	movs	r3, #1
 800764a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800764c:	4b3e      	ldr	r3, [pc, #248]	; (8007748 <HAL_RCC_OscConfig+0x57c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007654:	2b00      	cmp	r3, #0
 8007656:	d118      	bne.n	800768a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007658:	4b3b      	ldr	r3, [pc, #236]	; (8007748 <HAL_RCC_OscConfig+0x57c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a3a      	ldr	r2, [pc, #232]	; (8007748 <HAL_RCC_OscConfig+0x57c>)
 800765e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007664:	f7fd fb74 	bl	8004d50 <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800766c:	f7fd fb70 	bl	8004d50 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e1ae      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800767e:	4b32      	ldr	r3, [pc, #200]	; (8007748 <HAL_RCC_OscConfig+0x57c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0f0      	beq.n	800766c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d108      	bne.n	80076a4 <HAL_RCC_OscConfig+0x4d8>
 8007692:	4b2c      	ldr	r3, [pc, #176]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007698:	4a2a      	ldr	r2, [pc, #168]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 800769a:	f043 0301 	orr.w	r3, r3, #1
 800769e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076a2:	e024      	b.n	80076ee <HAL_RCC_OscConfig+0x522>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b05      	cmp	r3, #5
 80076aa:	d110      	bne.n	80076ce <HAL_RCC_OscConfig+0x502>
 80076ac:	4b25      	ldr	r3, [pc, #148]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80076ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b2:	4a24      	ldr	r2, [pc, #144]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80076b4:	f043 0304 	orr.w	r3, r3, #4
 80076b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076bc:	4b21      	ldr	r3, [pc, #132]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c2:	4a20      	ldr	r2, [pc, #128]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80076c4:	f043 0301 	orr.w	r3, r3, #1
 80076c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076cc:	e00f      	b.n	80076ee <HAL_RCC_OscConfig+0x522>
 80076ce:	4b1d      	ldr	r3, [pc, #116]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80076d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d4:	4a1b      	ldr	r2, [pc, #108]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80076d6:	f023 0301 	bic.w	r3, r3, #1
 80076da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076de:	4b19      	ldr	r3, [pc, #100]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80076e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e4:	4a17      	ldr	r2, [pc, #92]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 80076e6:	f023 0304 	bic.w	r3, r3, #4
 80076ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d016      	beq.n	8007724 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076f6:	f7fd fb2b 	bl	8004d50 <HAL_GetTick>
 80076fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076fc:	e00a      	b.n	8007714 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076fe:	f7fd fb27 	bl	8004d50 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	f241 3288 	movw	r2, #5000	; 0x1388
 800770c:	4293      	cmp	r3, r2
 800770e:	d901      	bls.n	8007714 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e163      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007714:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <HAL_RCC_OscConfig+0x578>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0ed      	beq.n	80076fe <HAL_RCC_OscConfig+0x532>
 8007722:	e01a      	b.n	800775a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007724:	f7fd fb14 	bl	8004d50 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800772a:	e00f      	b.n	800774c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800772c:	f7fd fb10 	bl	8004d50 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	f241 3288 	movw	r2, #5000	; 0x1388
 800773a:	4293      	cmp	r3, r2
 800773c:	d906      	bls.n	800774c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e14c      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
 8007742:	bf00      	nop
 8007744:	40021000 	.word	0x40021000
 8007748:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800774c:	4ba5      	ldr	r3, [pc, #660]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 800774e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e8      	bne.n	800772c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800775a:	7ffb      	ldrb	r3, [r7, #31]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d105      	bne.n	800776c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007760:	4ba0      	ldr	r3, [pc, #640]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007764:	4a9f      	ldr	r2, [pc, #636]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800776a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0320 	and.w	r3, r3, #32
 8007774:	2b00      	cmp	r3, #0
 8007776:	d03c      	beq.n	80077f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01c      	beq.n	80077ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007780:	4b98      	ldr	r3, [pc, #608]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007786:	4a97      	ldr	r2, [pc, #604]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007788:	f043 0301 	orr.w	r3, r3, #1
 800778c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007790:	f7fd fade 	bl	8004d50 <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007796:	e008      	b.n	80077aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007798:	f7fd fada 	bl	8004d50 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e118      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077aa:	4b8e      	ldr	r3, [pc, #568]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 80077ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0ef      	beq.n	8007798 <HAL_RCC_OscConfig+0x5cc>
 80077b8:	e01b      	b.n	80077f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077ba:	4b8a      	ldr	r3, [pc, #552]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 80077bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077c0:	4a88      	ldr	r2, [pc, #544]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ca:	f7fd fac1 	bl	8004d50 <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077d2:	f7fd fabd 	bl	8004d50 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e0fb      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077e4:	4b7f      	ldr	r3, [pc, #508]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 80077e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1ef      	bne.n	80077d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 80ef 	beq.w	80079da <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	2b02      	cmp	r3, #2
 8007802:	f040 80c5 	bne.w	8007990 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007806:	4b77      	ldr	r3, [pc, #476]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f003 0203 	and.w	r2, r3, #3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	429a      	cmp	r2, r3
 8007818:	d12c      	bne.n	8007874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	3b01      	subs	r3, #1
 8007826:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007828:	429a      	cmp	r2, r3
 800782a:	d123      	bne.n	8007874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007836:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007838:	429a      	cmp	r2, r3
 800783a:	d11b      	bne.n	8007874 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007848:	429a      	cmp	r2, r3
 800784a:	d113      	bne.n	8007874 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007856:	085b      	lsrs	r3, r3, #1
 8007858:	3b01      	subs	r3, #1
 800785a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800785c:	429a      	cmp	r2, r3
 800785e:	d109      	bne.n	8007874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	085b      	lsrs	r3, r3, #1
 800786c:	3b01      	subs	r3, #1
 800786e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007870:	429a      	cmp	r2, r3
 8007872:	d067      	beq.n	8007944 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b0c      	cmp	r3, #12
 8007878:	d062      	beq.n	8007940 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800787a:	4b5a      	ldr	r3, [pc, #360]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e0a8      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800788a:	4b56      	ldr	r3, [pc, #344]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a55      	ldr	r2, [pc, #340]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007894:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007896:	f7fd fa5b 	bl	8004d50 <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800789c:	e008      	b.n	80078b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800789e:	f7fd fa57 	bl	8004d50 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e095      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078b0:	4b4c      	ldr	r3, [pc, #304]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1f0      	bne.n	800789e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078bc:	4b49      	ldr	r3, [pc, #292]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	4b49      	ldr	r3, [pc, #292]	; (80079e8 <HAL_RCC_OscConfig+0x81c>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80078cc:	3a01      	subs	r2, #1
 80078ce:	0112      	lsls	r2, r2, #4
 80078d0:	4311      	orrs	r1, r2
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80078d6:	0212      	lsls	r2, r2, #8
 80078d8:	4311      	orrs	r1, r2
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80078de:	0852      	lsrs	r2, r2, #1
 80078e0:	3a01      	subs	r2, #1
 80078e2:	0552      	lsls	r2, r2, #21
 80078e4:	4311      	orrs	r1, r2
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80078ea:	0852      	lsrs	r2, r2, #1
 80078ec:	3a01      	subs	r2, #1
 80078ee:	0652      	lsls	r2, r2, #25
 80078f0:	4311      	orrs	r1, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078f6:	06d2      	lsls	r2, r2, #27
 80078f8:	430a      	orrs	r2, r1
 80078fa:	493a      	ldr	r1, [pc, #232]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007900:	4b38      	ldr	r3, [pc, #224]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a37      	ldr	r2, [pc, #220]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800790a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800790c:	4b35      	ldr	r3, [pc, #212]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4a34      	ldr	r2, [pc, #208]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007918:	f7fd fa1a 	bl	8004d50 <HAL_GetTick>
 800791c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007920:	f7fd fa16 	bl	8004d50 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e054      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007932:	4b2c      	ldr	r3, [pc, #176]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f0      	beq.n	8007920 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800793e:	e04c      	b.n	80079da <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e04b      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007944:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d144      	bne.n	80079da <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007950:	4b24      	ldr	r3, [pc, #144]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a23      	ldr	r2, [pc, #140]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800795a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800795c:	4b21      	ldr	r3, [pc, #132]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	4a20      	ldr	r2, [pc, #128]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007966:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007968:	f7fd f9f2 	bl	8004d50 <HAL_GetTick>
 800796c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800796e:	e008      	b.n	8007982 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007970:	f7fd f9ee 	bl	8004d50 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d901      	bls.n	8007982 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e02c      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007982:	4b18      	ldr	r3, [pc, #96]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0f0      	beq.n	8007970 <HAL_RCC_OscConfig+0x7a4>
 800798e:	e024      	b.n	80079da <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b0c      	cmp	r3, #12
 8007994:	d01f      	beq.n	80079d6 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007996:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a12      	ldr	r2, [pc, #72]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 800799c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a2:	f7fd f9d5 	bl	8004d50 <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079a8:	e008      	b.n	80079bc <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079aa:	f7fd f9d1 	bl	8004d50 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d901      	bls.n	80079bc <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e00f      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f0      	bne.n	80079aa <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	4905      	ldr	r1, [pc, #20]	; (80079e4 <HAL_RCC_OscConfig+0x818>)
 80079ce:	4b07      	ldr	r3, [pc, #28]	; (80079ec <HAL_RCC_OscConfig+0x820>)
 80079d0:	4013      	ands	r3, r2
 80079d2:	60cb      	str	r3, [r1, #12]
 80079d4:	e001      	b.n	80079da <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3720      	adds	r7, #32
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40021000 	.word	0x40021000
 80079e8:	019d808c 	.word	0x019d808c
 80079ec:	feeefffc 	.word	0xfeeefffc

080079f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e0e7      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a04:	4b75      	ldr	r3, [pc, #468]	; (8007bdc <HAL_RCC_ClockConfig+0x1ec>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d910      	bls.n	8007a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a12:	4b72      	ldr	r3, [pc, #456]	; (8007bdc <HAL_RCC_ClockConfig+0x1ec>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f023 0207 	bic.w	r2, r3, #7
 8007a1a:	4970      	ldr	r1, [pc, #448]	; (8007bdc <HAL_RCC_ClockConfig+0x1ec>)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a22:	4b6e      	ldr	r3, [pc, #440]	; (8007bdc <HAL_RCC_ClockConfig+0x1ec>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d001      	beq.n	8007a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e0cf      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d010      	beq.n	8007a62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	4b66      	ldr	r3, [pc, #408]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d908      	bls.n	8007a62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a50:	4b63      	ldr	r3, [pc, #396]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	4960      	ldr	r1, [pc, #384]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d04c      	beq.n	8007b08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d107      	bne.n	8007a86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a76:	4b5a      	ldr	r3, [pc, #360]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d121      	bne.n	8007ac6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e0a6      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d107      	bne.n	8007a9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a8e:	4b54      	ldr	r3, [pc, #336]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d115      	bne.n	8007ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e09a      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d107      	bne.n	8007ab6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007aa6:	4b4e      	ldr	r3, [pc, #312]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d109      	bne.n	8007ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e08e      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ab6:	4b4a      	ldr	r3, [pc, #296]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e086      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ac6:	4b46      	ldr	r3, [pc, #280]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f023 0203 	bic.w	r2, r3, #3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	4943      	ldr	r1, [pc, #268]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ad8:	f7fd f93a 	bl	8004d50 <HAL_GetTick>
 8007adc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ade:	e00a      	b.n	8007af6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ae0:	f7fd f936 	bl	8004d50 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e06e      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007af6:	4b3a      	ldr	r3, [pc, #232]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 020c 	and.w	r2, r3, #12
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d1eb      	bne.n	8007ae0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d010      	beq.n	8007b36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	4b31      	ldr	r3, [pc, #196]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d208      	bcs.n	8007b36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b24:	4b2e      	ldr	r3, [pc, #184]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	492b      	ldr	r1, [pc, #172]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b36:	4b29      	ldr	r3, [pc, #164]	; (8007bdc <HAL_RCC_ClockConfig+0x1ec>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d210      	bcs.n	8007b66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b44:	4b25      	ldr	r3, [pc, #148]	; (8007bdc <HAL_RCC_ClockConfig+0x1ec>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f023 0207 	bic.w	r2, r3, #7
 8007b4c:	4923      	ldr	r1, [pc, #140]	; (8007bdc <HAL_RCC_ClockConfig+0x1ec>)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b54:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <HAL_RCC_ClockConfig+0x1ec>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d001      	beq.n	8007b66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e036      	b.n	8007bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0304 	and.w	r3, r3, #4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d008      	beq.n	8007b84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b72:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	4918      	ldr	r1, [pc, #96]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b90:	4b13      	ldr	r3, [pc, #76]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	4910      	ldr	r1, [pc, #64]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ba4:	f000 f824 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <HAL_RCC_ClockConfig+0x1f0>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	091b      	lsrs	r3, r3, #4
 8007bb0:	f003 030f 	and.w	r3, r3, #15
 8007bb4:	490b      	ldr	r1, [pc, #44]	; (8007be4 <HAL_RCC_ClockConfig+0x1f4>)
 8007bb6:	5ccb      	ldrb	r3, [r1, r3]
 8007bb8:	f003 031f 	and.w	r3, r3, #31
 8007bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc0:	4a09      	ldr	r2, [pc, #36]	; (8007be8 <HAL_RCC_ClockConfig+0x1f8>)
 8007bc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007bc4:	4b09      	ldr	r3, [pc, #36]	; (8007bec <HAL_RCC_ClockConfig+0x1fc>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fc feeb 	bl	80049a4 <HAL_InitTick>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	40022000 	.word	0x40022000
 8007be0:	40021000 	.word	0x40021000
 8007be4:	08014260 	.word	0x08014260
 8007be8:	20000018 	.word	0x20000018
 8007bec:	2000001c 	.word	0x2000001c

08007bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b089      	sub	sp, #36	; 0x24
 8007bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bfe:	4b3e      	ldr	r3, [pc, #248]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 030c 	and.w	r3, r3, #12
 8007c06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c08:	4b3b      	ldr	r3, [pc, #236]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <HAL_RCC_GetSysClockFreq+0x34>
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	2b0c      	cmp	r3, #12
 8007c1c:	d121      	bne.n	8007c62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d11e      	bne.n	8007c62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007c24:	4b34      	ldr	r3, [pc, #208]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d107      	bne.n	8007c40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007c30:	4b31      	ldr	r3, [pc, #196]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	f003 030f 	and.w	r3, r3, #15
 8007c3c:	61fb      	str	r3, [r7, #28]
 8007c3e:	e005      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007c40:	4b2d      	ldr	r3, [pc, #180]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	091b      	lsrs	r3, r3, #4
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007c4c:	4a2b      	ldr	r2, [pc, #172]	; (8007cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10d      	bne.n	8007c78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c60:	e00a      	b.n	8007c78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d102      	bne.n	8007c6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	e004      	b.n	8007c78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d101      	bne.n	8007c78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c74:	4b23      	ldr	r3, [pc, #140]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8007c76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2b0c      	cmp	r3, #12
 8007c7c:	d134      	bne.n	8007ce8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c7e:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d003      	beq.n	8007c96 <HAL_RCC_GetSysClockFreq+0xa6>
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d003      	beq.n	8007c9c <HAL_RCC_GetSysClockFreq+0xac>
 8007c94:	e005      	b.n	8007ca2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007c96:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c98:	617b      	str	r3, [r7, #20]
      break;
 8007c9a:	e005      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007c9c:	4b19      	ldr	r3, [pc, #100]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8007c9e:	617b      	str	r3, [r7, #20]
      break;
 8007ca0:	e002      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	617b      	str	r3, [r7, #20]
      break;
 8007ca6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ca8:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	091b      	lsrs	r3, r3, #4
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007cb6:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	0a1b      	lsrs	r3, r3, #8
 8007cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	fb02 f203 	mul.w	r2, r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ccc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cce:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	0e5b      	lsrs	r3, r3, #25
 8007cd4:	f003 0303 	and.w	r3, r3, #3
 8007cd8:	3301      	adds	r3, #1
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007ce8:	69bb      	ldr	r3, [r7, #24]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3724      	adds	r7, #36	; 0x24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	40021000 	.word	0x40021000
 8007cfc:	08014278 	.word	0x08014278
 8007d00:	00f42400 	.word	0x00f42400
 8007d04:	007a1200 	.word	0x007a1200

08007d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d0c:	4b03      	ldr	r3, [pc, #12]	; (8007d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20000018 	.word	0x20000018

08007d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d24:	f7ff fff0 	bl	8007d08 <HAL_RCC_GetHCLKFreq>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	4b06      	ldr	r3, [pc, #24]	; (8007d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	0a1b      	lsrs	r3, r3, #8
 8007d30:	f003 0307 	and.w	r3, r3, #7
 8007d34:	4904      	ldr	r1, [pc, #16]	; (8007d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d36:	5ccb      	ldrb	r3, [r1, r3]
 8007d38:	f003 031f 	and.w	r3, r3, #31
 8007d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	40021000 	.word	0x40021000
 8007d48:	08014270 	.word	0x08014270

08007d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d50:	f7ff ffda 	bl	8007d08 <HAL_RCC_GetHCLKFreq>
 8007d54:	4602      	mov	r2, r0
 8007d56:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	0adb      	lsrs	r3, r3, #11
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	4904      	ldr	r1, [pc, #16]	; (8007d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d62:	5ccb      	ldrb	r3, [r1, r3]
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	40021000 	.word	0x40021000
 8007d74:	08014270 	.word	0x08014270

08007d78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	220f      	movs	r2, #15
 8007d86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007d88:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f003 0203 	and.w	r2, r3, #3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007d94:	4b0f      	ldr	r3, [pc, #60]	; (8007dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007da0:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	08db      	lsrs	r3, r3, #3
 8007db2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007dba:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <HAL_RCC_GetClockConfig+0x60>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0207 	and.w	r2, r3, #7
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	40022000 	.word	0x40022000

08007ddc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007de4:	2300      	movs	r3, #0
 8007de6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007de8:	4b2a      	ldr	r3, [pc, #168]	; (8007e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d003      	beq.n	8007dfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007df4:	f7ff f986 	bl	8007104 <HAL_PWREx_GetVoltageRange>
 8007df8:	6178      	str	r0, [r7, #20]
 8007dfa:	e014      	b.n	8007e26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007dfc:	4b25      	ldr	r3, [pc, #148]	; (8007e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e00:	4a24      	ldr	r2, [pc, #144]	; (8007e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e06:	6593      	str	r3, [r2, #88]	; 0x58
 8007e08:	4b22      	ldr	r3, [pc, #136]	; (8007e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007e14:	f7ff f976 	bl	8007104 <HAL_PWREx_GetVoltageRange>
 8007e18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007e1a:	4b1e      	ldr	r3, [pc, #120]	; (8007e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1e:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e2c:	d10b      	bne.n	8007e46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b80      	cmp	r3, #128	; 0x80
 8007e32:	d919      	bls.n	8007e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2ba0      	cmp	r3, #160	; 0xa0
 8007e38:	d902      	bls.n	8007e40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	613b      	str	r3, [r7, #16]
 8007e3e:	e013      	b.n	8007e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e40:	2301      	movs	r3, #1
 8007e42:	613b      	str	r3, [r7, #16]
 8007e44:	e010      	b.n	8007e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b80      	cmp	r3, #128	; 0x80
 8007e4a:	d902      	bls.n	8007e52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	e00a      	b.n	8007e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b80      	cmp	r3, #128	; 0x80
 8007e56:	d102      	bne.n	8007e5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e58:	2302      	movs	r3, #2
 8007e5a:	613b      	str	r3, [r7, #16]
 8007e5c:	e004      	b.n	8007e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b70      	cmp	r3, #112	; 0x70
 8007e62:	d101      	bne.n	8007e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e64:	2301      	movs	r3, #1
 8007e66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e68:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f023 0207 	bic.w	r2, r3, #7
 8007e70:	4909      	ldr	r1, [pc, #36]	; (8007e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0307 	and.w	r3, r3, #7
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d001      	beq.n	8007e8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e000      	b.n	8007e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40021000 	.word	0x40021000
 8007e98:	40022000 	.word	0x40022000

08007e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d031      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ec0:	d01a      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007ec2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ec6:	d814      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d009      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ecc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ed0:	d10f      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007ed2:	4b5d      	ldr	r3, [pc, #372]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	4a5c      	ldr	r2, [pc, #368]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007edc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ede:	e00c      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f9f0 	bl	80082cc <RCCEx_PLLSAI1_Config>
 8007eec:	4603      	mov	r3, r0
 8007eee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ef0:	e003      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	74fb      	strb	r3, [r7, #19]
      break;
 8007ef6:	e000      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007efa:	7cfb      	ldrb	r3, [r7, #19]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f00:	4b51      	ldr	r3, [pc, #324]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0e:	494e      	ldr	r1, [pc, #312]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007f16:	e001      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f18:	7cfb      	ldrb	r3, [r7, #19]
 8007f1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 809e 	beq.w	8008066 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f2e:	4b46      	ldr	r3, [pc, #280]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e000      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00d      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f44:	4b40      	ldr	r3, [pc, #256]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f48:	4a3f      	ldr	r2, [pc, #252]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8007f50:	4b3d      	ldr	r3, [pc, #244]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f58:	60bb      	str	r3, [r7, #8]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f60:	4b3a      	ldr	r3, [pc, #232]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a39      	ldr	r2, [pc, #228]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f6c:	f7fc fef0 	bl	8004d50 <HAL_GetTick>
 8007f70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f72:	e009      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f74:	f7fc feec 	bl	8004d50 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d902      	bls.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	74fb      	strb	r3, [r7, #19]
        break;
 8007f86:	e005      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f88:	4b30      	ldr	r3, [pc, #192]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0ef      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007f94:	7cfb      	ldrb	r3, [r7, #19]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d15a      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f9a:	4b2b      	ldr	r3, [pc, #172]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01e      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d019      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007fb6:	4b24      	ldr	r3, [pc, #144]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fc2:	4b21      	ldr	r3, [pc, #132]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc8:	4a1f      	ldr	r2, [pc, #124]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fd2:	4b1d      	ldr	r3, [pc, #116]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd8:	4a1b      	ldr	r2, [pc, #108]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007fe2:	4a19      	ldr	r2, [pc, #100]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d016      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff4:	f7fc feac 	bl	8004d50 <HAL_GetTick>
 8007ff8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ffa:	e00b      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ffc:	f7fc fea8 	bl	8004d50 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	f241 3288 	movw	r2, #5000	; 0x1388
 800800a:	4293      	cmp	r3, r2
 800800c:	d902      	bls.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	74fb      	strb	r3, [r7, #19]
            break;
 8008012:	e006      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008014:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0ec      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008022:	7cfb      	ldrb	r3, [r7, #19]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10b      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008028:	4b07      	ldr	r3, [pc, #28]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800802a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008036:	4904      	ldr	r1, [pc, #16]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008038:	4313      	orrs	r3, r2
 800803a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800803e:	e009      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008040:	7cfb      	ldrb	r3, [r7, #19]
 8008042:	74bb      	strb	r3, [r7, #18]
 8008044:	e006      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008046:	bf00      	nop
 8008048:	40021000 	.word	0x40021000
 800804c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008050:	7cfb      	ldrb	r3, [r7, #19]
 8008052:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008054:	7c7b      	ldrb	r3, [r7, #17]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d105      	bne.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800805a:	4b9b      	ldr	r3, [pc, #620]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800805c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805e:	4a9a      	ldr	r2, [pc, #616]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008064:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008072:	4b95      	ldr	r3, [pc, #596]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008078:	f023 0203 	bic.w	r2, r3, #3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	4991      	ldr	r1, [pc, #580]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008082:	4313      	orrs	r3, r2
 8008084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00a      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008094:	4b8c      	ldr	r3, [pc, #560]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809a:	f023 020c 	bic.w	r2, r3, #12
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	4989      	ldr	r1, [pc, #548]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080b6:	4b84      	ldr	r3, [pc, #528]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c4:	4980      	ldr	r1, [pc, #512]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080d8:	4b7b      	ldr	r3, [pc, #492]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e6:	4978      	ldr	r1, [pc, #480]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080fa:	4b73      	ldr	r3, [pc, #460]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80080fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008100:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008108:	496f      	ldr	r1, [pc, #444]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800811c:	4b6a      	ldr	r3, [pc, #424]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800811e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	4967      	ldr	r1, [pc, #412]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800813e:	4b62      	ldr	r3, [pc, #392]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008144:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814c:	495e      	ldr	r1, [pc, #376]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008160:	4b59      	ldr	r3, [pc, #356]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008166:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816e:	4956      	ldr	r1, [pc, #344]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008182:	4b51      	ldr	r3, [pc, #324]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	494d      	ldr	r1, [pc, #308]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d028      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80081a4:	4b48      	ldr	r3, [pc, #288]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b2:	4945      	ldr	r1, [pc, #276]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081c2:	d106      	bne.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081c4:	4b40      	ldr	r3, [pc, #256]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	4a3f      	ldr	r2, [pc, #252]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081ce:	60d3      	str	r3, [r2, #12]
 80081d0:	e011      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081da:	d10c      	bne.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3304      	adds	r3, #4
 80081e0:	2101      	movs	r1, #1
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f872 	bl	80082cc <RCCEx_PLLSAI1_Config>
 80081e8:	4603      	mov	r3, r0
 80081ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80081ec:	7cfb      	ldrb	r3, [r7, #19]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80081f2:	7cfb      	ldrb	r3, [r7, #19]
 80081f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d028      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008202:	4b31      	ldr	r3, [pc, #196]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008208:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008210:	492d      	ldr	r1, [pc, #180]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008212:	4313      	orrs	r3, r2
 8008214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008220:	d106      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008222:	4b29      	ldr	r3, [pc, #164]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	4a28      	ldr	r2, [pc, #160]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800822c:	60d3      	str	r3, [r2, #12]
 800822e:	e011      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008238:	d10c      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3304      	adds	r3, #4
 800823e:	2101      	movs	r1, #1
 8008240:	4618      	mov	r0, r3
 8008242:	f000 f843 	bl	80082cc <RCCEx_PLLSAI1_Config>
 8008246:	4603      	mov	r3, r0
 8008248:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800824a:	7cfb      	ldrb	r3, [r7, #19]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008250:	7cfb      	ldrb	r3, [r7, #19]
 8008252:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01c      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008260:	4b19      	ldr	r3, [pc, #100]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826e:	4916      	ldr	r1, [pc, #88]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008270:	4313      	orrs	r3, r2
 8008272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800827e:	d10c      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3304      	adds	r3, #4
 8008284:	2102      	movs	r1, #2
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f820 	bl	80082cc <RCCEx_PLLSAI1_Config>
 800828c:	4603      	mov	r3, r0
 800828e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008290:	7cfb      	ldrb	r3, [r7, #19]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8008296:	7cfb      	ldrb	r3, [r7, #19]
 8008298:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80082a6:	4b08      	ldr	r3, [pc, #32]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b4:	4904      	ldr	r1, [pc, #16]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80082bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	40021000 	.word	0x40021000

080082cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80082da:	4b74      	ldr	r3, [pc, #464]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d018      	beq.n	8008318 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80082e6:	4b71      	ldr	r3, [pc, #452]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f003 0203 	and.w	r2, r3, #3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d10d      	bne.n	8008312 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
       ||
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80082fe:	4b6b      	ldr	r3, [pc, #428]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	091b      	lsrs	r3, r3, #4
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
       ||
 800830e:	429a      	cmp	r2, r3
 8008310:	d047      	beq.n	80083a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	73fb      	strb	r3, [r7, #15]
 8008316:	e044      	b.n	80083a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b03      	cmp	r3, #3
 800831e:	d018      	beq.n	8008352 <RCCEx_PLLSAI1_Config+0x86>
 8008320:	2b03      	cmp	r3, #3
 8008322:	d825      	bhi.n	8008370 <RCCEx_PLLSAI1_Config+0xa4>
 8008324:	2b01      	cmp	r3, #1
 8008326:	d002      	beq.n	800832e <RCCEx_PLLSAI1_Config+0x62>
 8008328:	2b02      	cmp	r3, #2
 800832a:	d009      	beq.n	8008340 <RCCEx_PLLSAI1_Config+0x74>
 800832c:	e020      	b.n	8008370 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800832e:	4b5f      	ldr	r3, [pc, #380]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d11d      	bne.n	8008376 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800833e:	e01a      	b.n	8008376 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008340:	4b5a      	ldr	r3, [pc, #360]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008348:	2b00      	cmp	r3, #0
 800834a:	d116      	bne.n	800837a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008350:	e013      	b.n	800837a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008352:	4b56      	ldr	r3, [pc, #344]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10f      	bne.n	800837e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800835e:	4b53      	ldr	r3, [pc, #332]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800836e:	e006      	b.n	800837e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	73fb      	strb	r3, [r7, #15]
      break;
 8008374:	e004      	b.n	8008380 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008376:	bf00      	nop
 8008378:	e002      	b.n	8008380 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800837a:	bf00      	nop
 800837c:	e000      	b.n	8008380 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800837e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10d      	bne.n	80083a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008386:	4b49      	ldr	r3, [pc, #292]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6819      	ldr	r1, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	3b01      	subs	r3, #1
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	430b      	orrs	r3, r1
 800839c:	4943      	ldr	r1, [pc, #268]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d17c      	bne.n	80084a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80083a8:	4b40      	ldr	r3, [pc, #256]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a3f      	ldr	r2, [pc, #252]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80083ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b4:	f7fc fccc 	bl	8004d50 <HAL_GetTick>
 80083b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80083ba:	e009      	b.n	80083d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083bc:	f7fc fcc8 	bl	8004d50 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d902      	bls.n	80083d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	73fb      	strb	r3, [r7, #15]
        break;
 80083ce:	e005      	b.n	80083dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80083d0:	4b36      	ldr	r3, [pc, #216]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1ef      	bne.n	80083bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d15f      	bne.n	80084a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d110      	bne.n	800840a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083e8:	4b30      	ldr	r3, [pc, #192]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80083f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6892      	ldr	r2, [r2, #8]
 80083f8:	0211      	lsls	r1, r2, #8
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	68d2      	ldr	r2, [r2, #12]
 80083fe:	06d2      	lsls	r2, r2, #27
 8008400:	430a      	orrs	r2, r1
 8008402:	492a      	ldr	r1, [pc, #168]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008404:	4313      	orrs	r3, r2
 8008406:	610b      	str	r3, [r1, #16]
 8008408:	e027      	b.n	800845a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d112      	bne.n	8008436 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008410:	4b26      	ldr	r3, [pc, #152]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008418:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6892      	ldr	r2, [r2, #8]
 8008420:	0211      	lsls	r1, r2, #8
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	6912      	ldr	r2, [r2, #16]
 8008426:	0852      	lsrs	r2, r2, #1
 8008428:	3a01      	subs	r2, #1
 800842a:	0552      	lsls	r2, r2, #21
 800842c:	430a      	orrs	r2, r1
 800842e:	491f      	ldr	r1, [pc, #124]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008430:	4313      	orrs	r3, r2
 8008432:	610b      	str	r3, [r1, #16]
 8008434:	e011      	b.n	800845a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008436:	4b1d      	ldr	r3, [pc, #116]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800843e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6892      	ldr	r2, [r2, #8]
 8008446:	0211      	lsls	r1, r2, #8
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6952      	ldr	r2, [r2, #20]
 800844c:	0852      	lsrs	r2, r2, #1
 800844e:	3a01      	subs	r2, #1
 8008450:	0652      	lsls	r2, r2, #25
 8008452:	430a      	orrs	r2, r1
 8008454:	4915      	ldr	r1, [pc, #84]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008456:	4313      	orrs	r3, r2
 8008458:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800845a:	4b14      	ldr	r3, [pc, #80]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a13      	ldr	r2, [pc, #76]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008460:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008464:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008466:	f7fc fc73 	bl	8004d50 <HAL_GetTick>
 800846a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800846c:	e009      	b.n	8008482 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800846e:	f7fc fc6f 	bl	8004d50 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	d902      	bls.n	8008482 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	73fb      	strb	r3, [r7, #15]
          break;
 8008480:	e005      	b.n	800848e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008482:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0ef      	beq.n	800846e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d106      	bne.n	80084a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	4903      	ldr	r1, [pc, #12]	; (80084ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	40021000 	.word	0x40021000

080084b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e049      	b.n	8008556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d106      	bne.n	80084dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7fc f91a 	bl	8004710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3304      	adds	r3, #4
 80084ec:	4619      	mov	r1, r3
 80084ee:	4610      	mov	r0, r2
 80084f0:	f000 fca4 	bl	8008e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b01      	cmp	r3, #1
 8008572:	d001      	beq.n	8008578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e03b      	b.n	80085f0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0201 	orr.w	r2, r2, #1
 800858e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a19      	ldr	r2, [pc, #100]	; (80085fc <HAL_TIM_Base_Start_IT+0x9c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d009      	beq.n	80085ae <HAL_TIM_Base_Start_IT+0x4e>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a2:	d004      	beq.n	80085ae <HAL_TIM_Base_Start_IT+0x4e>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a15      	ldr	r2, [pc, #84]	; (8008600 <HAL_TIM_Base_Start_IT+0xa0>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d115      	bne.n	80085da <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	4b13      	ldr	r3, [pc, #76]	; (8008604 <HAL_TIM_Base_Start_IT+0xa4>)
 80085b6:	4013      	ands	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b06      	cmp	r3, #6
 80085be:	d015      	beq.n	80085ec <HAL_TIM_Base_Start_IT+0x8c>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c6:	d011      	beq.n	80085ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f042 0201 	orr.w	r2, r2, #1
 80085d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d8:	e008      	b.n	80085ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f042 0201 	orr.w	r2, r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e000      	b.n	80085ee <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	40012c00 	.word	0x40012c00
 8008600:	40014000 	.word	0x40014000
 8008604:	00010007 	.word	0x00010007

08008608 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e049      	b.n	80086ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d106      	bne.n	8008634 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7fc f850 	bl	80046d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3304      	adds	r3, #4
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f000 fbf8 	bl	8008e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d109      	bne.n	80086dc <HAL_TIM_PWM_Start+0x24>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	bf14      	ite	ne
 80086d4:	2301      	movne	r3, #1
 80086d6:	2300      	moveq	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	e03c      	b.n	8008756 <HAL_TIM_PWM_Start+0x9e>
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d109      	bne.n	80086f6 <HAL_TIM_PWM_Start+0x3e>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	bf14      	ite	ne
 80086ee:	2301      	movne	r3, #1
 80086f0:	2300      	moveq	r3, #0
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	e02f      	b.n	8008756 <HAL_TIM_PWM_Start+0x9e>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d109      	bne.n	8008710 <HAL_TIM_PWM_Start+0x58>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b01      	cmp	r3, #1
 8008706:	bf14      	ite	ne
 8008708:	2301      	movne	r3, #1
 800870a:	2300      	moveq	r3, #0
 800870c:	b2db      	uxtb	r3, r3
 800870e:	e022      	b.n	8008756 <HAL_TIM_PWM_Start+0x9e>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b0c      	cmp	r3, #12
 8008714:	d109      	bne.n	800872a <HAL_TIM_PWM_Start+0x72>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b01      	cmp	r3, #1
 8008720:	bf14      	ite	ne
 8008722:	2301      	movne	r3, #1
 8008724:	2300      	moveq	r3, #0
 8008726:	b2db      	uxtb	r3, r3
 8008728:	e015      	b.n	8008756 <HAL_TIM_PWM_Start+0x9e>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b10      	cmp	r3, #16
 800872e:	d109      	bne.n	8008744 <HAL_TIM_PWM_Start+0x8c>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b01      	cmp	r3, #1
 800873a:	bf14      	ite	ne
 800873c:	2301      	movne	r3, #1
 800873e:	2300      	moveq	r3, #0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	e008      	b.n	8008756 <HAL_TIM_PWM_Start+0x9e>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b01      	cmp	r3, #1
 800874e:	bf14      	ite	ne
 8008750:	2301      	movne	r3, #1
 8008752:	2300      	moveq	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e07e      	b.n	800885c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d104      	bne.n	800876e <HAL_TIM_PWM_Start+0xb6>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800876c:	e023      	b.n	80087b6 <HAL_TIM_PWM_Start+0xfe>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b04      	cmp	r3, #4
 8008772:	d104      	bne.n	800877e <HAL_TIM_PWM_Start+0xc6>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2202      	movs	r2, #2
 8008778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800877c:	e01b      	b.n	80087b6 <HAL_TIM_PWM_Start+0xfe>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b08      	cmp	r3, #8
 8008782:	d104      	bne.n	800878e <HAL_TIM_PWM_Start+0xd6>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800878c:	e013      	b.n	80087b6 <HAL_TIM_PWM_Start+0xfe>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b0c      	cmp	r3, #12
 8008792:	d104      	bne.n	800879e <HAL_TIM_PWM_Start+0xe6>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800879c:	e00b      	b.n	80087b6 <HAL_TIM_PWM_Start+0xfe>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b10      	cmp	r3, #16
 80087a2:	d104      	bne.n	80087ae <HAL_TIM_PWM_Start+0xf6>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087ac:	e003      	b.n	80087b6 <HAL_TIM_PWM_Start+0xfe>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2202      	movs	r2, #2
 80087b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2201      	movs	r2, #1
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fe1e 	bl	8009400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a26      	ldr	r2, [pc, #152]	; (8008864 <HAL_TIM_PWM_Start+0x1ac>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d009      	beq.n	80087e2 <HAL_TIM_PWM_Start+0x12a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a25      	ldr	r2, [pc, #148]	; (8008868 <HAL_TIM_PWM_Start+0x1b0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d004      	beq.n	80087e2 <HAL_TIM_PWM_Start+0x12a>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a23      	ldr	r2, [pc, #140]	; (800886c <HAL_TIM_PWM_Start+0x1b4>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d101      	bne.n	80087e6 <HAL_TIM_PWM_Start+0x12e>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e000      	b.n	80087e8 <HAL_TIM_PWM_Start+0x130>
 80087e6:	2300      	movs	r3, #0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a18      	ldr	r2, [pc, #96]	; (8008864 <HAL_TIM_PWM_Start+0x1ac>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d009      	beq.n	800881a <HAL_TIM_PWM_Start+0x162>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800880e:	d004      	beq.n	800881a <HAL_TIM_PWM_Start+0x162>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a14      	ldr	r2, [pc, #80]	; (8008868 <HAL_TIM_PWM_Start+0x1b0>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d115      	bne.n	8008846 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	4b13      	ldr	r3, [pc, #76]	; (8008870 <HAL_TIM_PWM_Start+0x1b8>)
 8008822:	4013      	ands	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b06      	cmp	r3, #6
 800882a:	d015      	beq.n	8008858 <HAL_TIM_PWM_Start+0x1a0>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008832:	d011      	beq.n	8008858 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0201 	orr.w	r2, r2, #1
 8008842:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008844:	e008      	b.n	8008858 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0201 	orr.w	r2, r2, #1
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	e000      	b.n	800885a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008858:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	40012c00 	.word	0x40012c00
 8008868:	40014000 	.word	0x40014000
 800886c:	40014400 	.word	0x40014400
 8008870:	00010007 	.word	0x00010007

08008874 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2200      	movs	r2, #0
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fdba 	bl	8009400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a39      	ldr	r2, [pc, #228]	; (8008978 <HAL_TIM_PWM_Stop+0x104>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d009      	beq.n	80088aa <HAL_TIM_PWM_Stop+0x36>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a38      	ldr	r2, [pc, #224]	; (800897c <HAL_TIM_PWM_Stop+0x108>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d004      	beq.n	80088aa <HAL_TIM_PWM_Stop+0x36>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a36      	ldr	r2, [pc, #216]	; (8008980 <HAL_TIM_PWM_Stop+0x10c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d101      	bne.n	80088ae <HAL_TIM_PWM_Stop+0x3a>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e000      	b.n	80088b0 <HAL_TIM_PWM_Stop+0x3c>
 80088ae:	2300      	movs	r3, #0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d017      	beq.n	80088e4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6a1a      	ldr	r2, [r3, #32]
 80088ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80088be:	4013      	ands	r3, r2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10f      	bne.n	80088e4 <HAL_TIM_PWM_Stop+0x70>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6a1a      	ldr	r2, [r3, #32]
 80088ca:	f240 4344 	movw	r3, #1092	; 0x444
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d107      	bne.n	80088e4 <HAL_TIM_PWM_Stop+0x70>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6a1a      	ldr	r2, [r3, #32]
 80088ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80088ee:	4013      	ands	r3, r2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10f      	bne.n	8008914 <HAL_TIM_PWM_Stop+0xa0>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6a1a      	ldr	r2, [r3, #32]
 80088fa:	f240 4344 	movw	r3, #1092	; 0x444
 80088fe:	4013      	ands	r3, r2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d107      	bne.n	8008914 <HAL_TIM_PWM_Stop+0xa0>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0201 	bic.w	r2, r2, #1
 8008912:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d104      	bne.n	8008924 <HAL_TIM_PWM_Stop+0xb0>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008922:	e023      	b.n	800896c <HAL_TIM_PWM_Stop+0xf8>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b04      	cmp	r3, #4
 8008928:	d104      	bne.n	8008934 <HAL_TIM_PWM_Stop+0xc0>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008932:	e01b      	b.n	800896c <HAL_TIM_PWM_Stop+0xf8>
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b08      	cmp	r3, #8
 8008938:	d104      	bne.n	8008944 <HAL_TIM_PWM_Stop+0xd0>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008942:	e013      	b.n	800896c <HAL_TIM_PWM_Stop+0xf8>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b0c      	cmp	r3, #12
 8008948:	d104      	bne.n	8008954 <HAL_TIM_PWM_Stop+0xe0>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008952:	e00b      	b.n	800896c <HAL_TIM_PWM_Stop+0xf8>
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2b10      	cmp	r3, #16
 8008958:	d104      	bne.n	8008964 <HAL_TIM_PWM_Stop+0xf0>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008962:	e003      	b.n	800896c <HAL_TIM_PWM_Stop+0xf8>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	40012c00 	.word	0x40012c00
 800897c:	40014000 	.word	0x40014000
 8008980:	40014400 	.word	0x40014400

08008984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b02      	cmp	r3, #2
 8008998:	d122      	bne.n	80089e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d11b      	bne.n	80089e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f06f 0202 	mvn.w	r2, #2
 80089b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa1a 	bl	8008e00 <HAL_TIM_IC_CaptureCallback>
 80089cc:	e005      	b.n	80089da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa0c 	bl	8008dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fa1d 	bl	8008e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	d122      	bne.n	8008a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b04      	cmp	r3, #4
 80089fa:	d11b      	bne.n	8008a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0204 	mvn.w	r2, #4
 8008a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f9f0 	bl	8008e00 <HAL_TIM_IC_CaptureCallback>
 8008a20:	e005      	b.n	8008a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f9e2 	bl	8008dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f9f3 	bl	8008e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d122      	bne.n	8008a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f003 0308 	and.w	r3, r3, #8
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d11b      	bne.n	8008a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f06f 0208 	mvn.w	r2, #8
 8008a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2204      	movs	r2, #4
 8008a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	f003 0303 	and.w	r3, r3, #3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d003      	beq.n	8008a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f9c6 	bl	8008e00 <HAL_TIM_IC_CaptureCallback>
 8008a74:	e005      	b.n	8008a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f9b8 	bl	8008dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f9c9 	bl	8008e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	f003 0310 	and.w	r3, r3, #16
 8008a92:	2b10      	cmp	r3, #16
 8008a94:	d122      	bne.n	8008adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f003 0310 	and.w	r3, r3, #16
 8008aa0:	2b10      	cmp	r3, #16
 8008aa2:	d11b      	bne.n	8008adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f06f 0210 	mvn.w	r2, #16
 8008aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f99c 	bl	8008e00 <HAL_TIM_IC_CaptureCallback>
 8008ac8:	e005      	b.n	8008ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f98e 	bl	8008dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f99f 	bl	8008e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d10e      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d107      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f06f 0201 	mvn.w	r2, #1
 8008b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7fb fd08 	bl	8004518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b80      	cmp	r3, #128	; 0x80
 8008b14:	d10e      	bne.n	8008b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b20:	2b80      	cmp	r3, #128	; 0x80
 8008b22:	d107      	bne.n	8008b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fd74 	bl	800961c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b42:	d10e      	bne.n	8008b62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b4e:	2b80      	cmp	r3, #128	; 0x80
 8008b50:	d107      	bne.n	8008b62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fd67 	bl	8009630 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6c:	2b40      	cmp	r3, #64	; 0x40
 8008b6e:	d10e      	bne.n	8008b8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7a:	2b40      	cmp	r3, #64	; 0x40
 8008b7c:	d107      	bne.n	8008b8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f94d 	bl	8008e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b20      	cmp	r3, #32
 8008b9a:	d10e      	bne.n	8008bba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f003 0320 	and.w	r3, r3, #32
 8008ba6:	2b20      	cmp	r3, #32
 8008ba8:	d107      	bne.n	8008bba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f06f 0220 	mvn.w	r2, #32
 8008bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fd27 	bl	8009608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d101      	bne.n	8008be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008bde:	2302      	movs	r3, #2
 8008be0:	e0ff      	b.n	8008de2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b14      	cmp	r3, #20
 8008bee:	f200 80f0 	bhi.w	8008dd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c4d 	.word	0x08008c4d
 8008bfc:	08008dd3 	.word	0x08008dd3
 8008c00:	08008dd3 	.word	0x08008dd3
 8008c04:	08008dd3 	.word	0x08008dd3
 8008c08:	08008c8d 	.word	0x08008c8d
 8008c0c:	08008dd3 	.word	0x08008dd3
 8008c10:	08008dd3 	.word	0x08008dd3
 8008c14:	08008dd3 	.word	0x08008dd3
 8008c18:	08008ccf 	.word	0x08008ccf
 8008c1c:	08008dd3 	.word	0x08008dd3
 8008c20:	08008dd3 	.word	0x08008dd3
 8008c24:	08008dd3 	.word	0x08008dd3
 8008c28:	08008d0f 	.word	0x08008d0f
 8008c2c:	08008dd3 	.word	0x08008dd3
 8008c30:	08008dd3 	.word	0x08008dd3
 8008c34:	08008dd3 	.word	0x08008dd3
 8008c38:	08008d51 	.word	0x08008d51
 8008c3c:	08008dd3 	.word	0x08008dd3
 8008c40:	08008dd3 	.word	0x08008dd3
 8008c44:	08008dd3 	.word	0x08008dd3
 8008c48:	08008d91 	.word	0x08008d91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68b9      	ldr	r1, [r7, #8]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 f956 	bl	8008f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699a      	ldr	r2, [r3, #24]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0208 	orr.w	r2, r2, #8
 8008c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0204 	bic.w	r2, r2, #4
 8008c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6999      	ldr	r1, [r3, #24]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	691a      	ldr	r2, [r3, #16]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	619a      	str	r2, [r3, #24]
      break;
 8008c8a:	e0a5      	b.n	8008dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 f9b2 	bl	8008ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699a      	ldr	r2, [r3, #24]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6999      	ldr	r1, [r3, #24]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	021a      	lsls	r2, r3, #8
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	619a      	str	r2, [r3, #24]
      break;
 8008ccc:	e084      	b.n	8008dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fa0b 	bl	80090f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	69da      	ldr	r2, [r3, #28]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f042 0208 	orr.w	r2, r2, #8
 8008ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 0204 	bic.w	r2, r2, #4
 8008cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69d9      	ldr	r1, [r3, #28]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	691a      	ldr	r2, [r3, #16]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	61da      	str	r2, [r3, #28]
      break;
 8008d0c:	e064      	b.n	8008dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68b9      	ldr	r1, [r7, #8]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fa63 	bl	80091e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69da      	ldr	r2, [r3, #28]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69da      	ldr	r2, [r3, #28]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69d9      	ldr	r1, [r3, #28]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	021a      	lsls	r2, r3, #8
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	61da      	str	r2, [r3, #28]
      break;
 8008d4e:	e043      	b.n	8008dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68b9      	ldr	r1, [r7, #8]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 faa0 	bl	800929c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f042 0208 	orr.w	r2, r2, #8
 8008d6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0204 	bic.w	r2, r2, #4
 8008d7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	691a      	ldr	r2, [r3, #16]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d8e:	e023      	b.n	8008dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68b9      	ldr	r1, [r7, #8]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fad8 	bl	800934c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008daa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	021a      	lsls	r2, r3, #8
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008dd0:	e002      	b.n	8008dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8008dd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop

08008dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a2a      	ldr	r2, [pc, #168]	; (8008ef8 <TIM_Base_SetConfig+0xbc>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d003      	beq.n	8008e5c <TIM_Base_SetConfig+0x20>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5a:	d108      	bne.n	8008e6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a21      	ldr	r2, [pc, #132]	; (8008ef8 <TIM_Base_SetConfig+0xbc>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00b      	beq.n	8008e8e <TIM_Base_SetConfig+0x52>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7c:	d007      	beq.n	8008e8e <TIM_Base_SetConfig+0x52>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a1e      	ldr	r2, [pc, #120]	; (8008efc <TIM_Base_SetConfig+0xc0>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d003      	beq.n	8008e8e <TIM_Base_SetConfig+0x52>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a1d      	ldr	r2, [pc, #116]	; (8008f00 <TIM_Base_SetConfig+0xc4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d108      	bne.n	8008ea0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a0c      	ldr	r2, [pc, #48]	; (8008ef8 <TIM_Base_SetConfig+0xbc>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d007      	beq.n	8008edc <TIM_Base_SetConfig+0xa0>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a0b      	ldr	r2, [pc, #44]	; (8008efc <TIM_Base_SetConfig+0xc0>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d003      	beq.n	8008edc <TIM_Base_SetConfig+0xa0>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a0a      	ldr	r2, [pc, #40]	; (8008f00 <TIM_Base_SetConfig+0xc4>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d103      	bne.n	8008ee4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	691a      	ldr	r2, [r3, #16]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	615a      	str	r2, [r3, #20]
}
 8008eea:	bf00      	nop
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40012c00 	.word	0x40012c00
 8008efc:	40014000 	.word	0x40014000
 8008f00:	40014400 	.word	0x40014400

08008f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	f023 0201 	bic.w	r2, r3, #1
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f023 0303 	bic.w	r3, r3, #3
 8008f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	f023 0302 	bic.w	r3, r3, #2
 8008f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a24      	ldr	r2, [pc, #144]	; (8008ff0 <TIM_OC1_SetConfig+0xec>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d007      	beq.n	8008f74 <TIM_OC1_SetConfig+0x70>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a23      	ldr	r2, [pc, #140]	; (8008ff4 <TIM_OC1_SetConfig+0xf0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d003      	beq.n	8008f74 <TIM_OC1_SetConfig+0x70>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a22      	ldr	r2, [pc, #136]	; (8008ff8 <TIM_OC1_SetConfig+0xf4>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d10c      	bne.n	8008f8e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f023 0308 	bic.w	r3, r3, #8
 8008f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f023 0304 	bic.w	r3, r3, #4
 8008f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a17      	ldr	r2, [pc, #92]	; (8008ff0 <TIM_OC1_SetConfig+0xec>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d007      	beq.n	8008fa6 <TIM_OC1_SetConfig+0xa2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a16      	ldr	r2, [pc, #88]	; (8008ff4 <TIM_OC1_SetConfig+0xf0>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d003      	beq.n	8008fa6 <TIM_OC1_SetConfig+0xa2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a15      	ldr	r2, [pc, #84]	; (8008ff8 <TIM_OC1_SetConfig+0xf4>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d111      	bne.n	8008fca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	621a      	str	r2, [r3, #32]
}
 8008fe4:	bf00      	nop
 8008fe6:	371c      	adds	r7, #28
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	40012c00 	.word	0x40012c00
 8008ff4:	40014000 	.word	0x40014000
 8008ff8:	40014400 	.word	0x40014400

08008ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	f023 0210 	bic.w	r2, r3, #16
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800902a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800902e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	021b      	lsls	r3, r3, #8
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	4313      	orrs	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f023 0320 	bic.w	r3, r3, #32
 800904a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	4313      	orrs	r3, r2
 8009056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a22      	ldr	r2, [pc, #136]	; (80090e4 <TIM_OC2_SetConfig+0xe8>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d10d      	bne.n	800907c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	4313      	orrs	r3, r2
 8009072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800907a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a19      	ldr	r2, [pc, #100]	; (80090e4 <TIM_OC2_SetConfig+0xe8>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d007      	beq.n	8009094 <TIM_OC2_SetConfig+0x98>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a18      	ldr	r2, [pc, #96]	; (80090e8 <TIM_OC2_SetConfig+0xec>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d003      	beq.n	8009094 <TIM_OC2_SetConfig+0x98>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a17      	ldr	r2, [pc, #92]	; (80090ec <TIM_OC2_SetConfig+0xf0>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d113      	bne.n	80090bc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800909a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	621a      	str	r2, [r3, #32]
}
 80090d6:	bf00      	nop
 80090d8:	371c      	adds	r7, #28
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40012c00 	.word	0x40012c00
 80090e8:	40014000 	.word	0x40014000
 80090ec:	40014400 	.word	0x40014400

080090f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800911e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0303 	bic.w	r3, r3, #3
 800912a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800913c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	021b      	lsls	r3, r3, #8
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	4313      	orrs	r3, r2
 8009148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a21      	ldr	r2, [pc, #132]	; (80091d4 <TIM_OC3_SetConfig+0xe4>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d10d      	bne.n	800916e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	4313      	orrs	r3, r2
 8009164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800916c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a18      	ldr	r2, [pc, #96]	; (80091d4 <TIM_OC3_SetConfig+0xe4>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d007      	beq.n	8009186 <TIM_OC3_SetConfig+0x96>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <TIM_OC3_SetConfig+0xe8>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d003      	beq.n	8009186 <TIM_OC3_SetConfig+0x96>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a16      	ldr	r2, [pc, #88]	; (80091dc <TIM_OC3_SetConfig+0xec>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d113      	bne.n	80091ae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800918c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4313      	orrs	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	621a      	str	r2, [r3, #32]
}
 80091c8:	bf00      	nop
 80091ca:	371c      	adds	r7, #28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	40012c00 	.word	0x40012c00
 80091d8:	40014000 	.word	0x40014000
 80091dc:	40014400 	.word	0x40014400

080091e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800920e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800921a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	021b      	lsls	r3, r3, #8
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	4313      	orrs	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800922e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	031b      	lsls	r3, r3, #12
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a14      	ldr	r2, [pc, #80]	; (8009290 <TIM_OC4_SetConfig+0xb0>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d007      	beq.n	8009254 <TIM_OC4_SetConfig+0x74>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a13      	ldr	r2, [pc, #76]	; (8009294 <TIM_OC4_SetConfig+0xb4>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC4_SetConfig+0x74>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a12      	ldr	r2, [pc, #72]	; (8009298 <TIM_OC4_SetConfig+0xb8>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d109      	bne.n	8009268 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800925a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	019b      	lsls	r3, r3, #6
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	4313      	orrs	r3, r2
 8009266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	621a      	str	r2, [r3, #32]
}
 8009282:	bf00      	nop
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	40012c00 	.word	0x40012c00
 8009294:	40014000 	.word	0x40014000
 8009298:	40014400 	.word	0x40014400

0800929c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80092e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	041b      	lsls	r3, r3, #16
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a13      	ldr	r2, [pc, #76]	; (8009340 <TIM_OC5_SetConfig+0xa4>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d007      	beq.n	8009306 <TIM_OC5_SetConfig+0x6a>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a12      	ldr	r2, [pc, #72]	; (8009344 <TIM_OC5_SetConfig+0xa8>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d003      	beq.n	8009306 <TIM_OC5_SetConfig+0x6a>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a11      	ldr	r2, [pc, #68]	; (8009348 <TIM_OC5_SetConfig+0xac>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d109      	bne.n	800931a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800930c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	021b      	lsls	r3, r3, #8
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	4313      	orrs	r3, r2
 8009318:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	697a      	ldr	r2, [r7, #20]
 800931e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	621a      	str	r2, [r3, #32]
}
 8009334:	bf00      	nop
 8009336:	371c      	adds	r7, #28
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	40012c00 	.word	0x40012c00
 8009344:	40014000 	.word	0x40014000
 8009348:	40014400 	.word	0x40014400

0800934c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800937a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800937e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	021b      	lsls	r3, r3, #8
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	4313      	orrs	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	051b      	lsls	r3, r3, #20
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	4313      	orrs	r3, r2
 800939e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a14      	ldr	r2, [pc, #80]	; (80093f4 <TIM_OC6_SetConfig+0xa8>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d007      	beq.n	80093b8 <TIM_OC6_SetConfig+0x6c>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a13      	ldr	r2, [pc, #76]	; (80093f8 <TIM_OC6_SetConfig+0xac>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d003      	beq.n	80093b8 <TIM_OC6_SetConfig+0x6c>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a12      	ldr	r2, [pc, #72]	; (80093fc <TIM_OC6_SetConfig+0xb0>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d109      	bne.n	80093cc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	029b      	lsls	r3, r3, #10
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	621a      	str	r2, [r3, #32]
}
 80093e6:	bf00      	nop
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	40012c00 	.word	0x40012c00
 80093f8:	40014000 	.word	0x40014000
 80093fc:	40014400 	.word	0x40014400

08009400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009400:	b480      	push	{r7}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f003 031f 	and.w	r3, r3, #31
 8009412:	2201      	movs	r2, #1
 8009414:	fa02 f303 	lsl.w	r3, r2, r3
 8009418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6a1a      	ldr	r2, [r3, #32]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	43db      	mvns	r3, r3
 8009422:	401a      	ands	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6a1a      	ldr	r2, [r3, #32]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f003 031f 	and.w	r3, r3, #31
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	fa01 f303 	lsl.w	r3, r1, r3
 8009438:	431a      	orrs	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	621a      	str	r2, [r3, #32]
}
 800943e:	bf00      	nop
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
	...

0800944c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800945c:	2b01      	cmp	r3, #1
 800945e:	d101      	bne.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009460:	2302      	movs	r3, #2
 8009462:	e04f      	b.n	8009504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a21      	ldr	r2, [pc, #132]	; (8009510 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d108      	bne.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009494:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4313      	orrs	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a14      	ldr	r2, [pc, #80]	; (8009510 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d009      	beq.n	80094d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094cc:	d004      	beq.n	80094d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a10      	ldr	r2, [pc, #64]	; (8009514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d10c      	bne.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	40012c00 	.word	0x40012c00
 8009514:	40014000 	.word	0x40014000

08009518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800952c:	2b01      	cmp	r3, #1
 800952e:	d101      	bne.n	8009534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009530:	2302      	movs	r3, #2
 8009532:	e060      	b.n	80095f6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	4313      	orrs	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	041b      	lsls	r3, r3, #16
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a14      	ldr	r2, [pc, #80]	; (8009604 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d115      	bne.n	80095e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	051b      	lsls	r3, r3, #20
 80095c4:	4313      	orrs	r3, r2
 80095c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	40012c00 	.word	0x40012c00

08009608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e040      	b.n	80096d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7fb f8ce 	bl	8004808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2224      	movs	r2, #36	; 0x24
 8009670:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 0201 	bic.w	r2, r2, #1
 8009680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fcbe 	bl	800a004 <UART_SetConfig>
 8009688:	4603      	mov	r3, r0
 800968a:	2b01      	cmp	r3, #1
 800968c:	d101      	bne.n	8009692 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e022      	b.n	80096d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	2b00      	cmp	r3, #0
 8009698:	d002      	beq.n	80096a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fee6 	bl	800a46c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689a      	ldr	r2, [r3, #8]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0201 	orr.w	r2, r2, #1
 80096ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 ff6d 	bl	800a5b0 <UART_CheckIdleState>
 80096d6:	4603      	mov	r3, r0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b08a      	sub	sp, #40	; 0x28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	4613      	mov	r3, r2
 80096ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096f2:	2b20      	cmp	r3, #32
 80096f4:	d178      	bne.n	80097e8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <HAL_UART_Transmit_DMA+0x22>
 80096fc:	88fb      	ldrh	r3, [r7, #6]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e071      	b.n	80097ea <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800970c:	2b01      	cmp	r3, #1
 800970e:	d101      	bne.n	8009714 <HAL_UART_Transmit_DMA+0x34>
 8009710:	2302      	movs	r3, #2
 8009712:	e06a      	b.n	80097ea <HAL_UART_Transmit_DMA+0x10a>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	88fa      	ldrh	r2, [r7, #6]
 8009726:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	88fa      	ldrh	r2, [r7, #6]
 800972e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2221      	movs	r2, #33	; 0x21
 800973e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009744:	2b00      	cmp	r3, #0
 8009746:	d02b      	beq.n	80097a0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800974c:	4a29      	ldr	r2, [pc, #164]	; (80097f4 <HAL_UART_Transmit_DMA+0x114>)
 800974e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009754:	4a28      	ldr	r2, [pc, #160]	; (80097f8 <HAL_UART_Transmit_DMA+0x118>)
 8009756:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800975c:	4a27      	ldr	r2, [pc, #156]	; (80097fc <HAL_UART_Transmit_DMA+0x11c>)
 800975e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009764:	2200      	movs	r2, #0
 8009766:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009770:	4619      	mov	r1, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3328      	adds	r3, #40	; 0x28
 8009778:	461a      	mov	r2, r3
 800977a:	88fb      	ldrh	r3, [r7, #6]
 800977c:	f7fc feb0 	bl	80064e0 <HAL_DMA_Start_IT>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00c      	beq.n	80097a0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2210      	movs	r2, #16
 800978a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2220      	movs	r2, #32
 800979a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e024      	b.n	80097ea <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2240      	movs	r2, #64	; 0x40
 80097a6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	613b      	str	r3, [r7, #16]
   return(result);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c6:	627b      	str	r3, [r7, #36]	; 0x24
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3308      	adds	r3, #8
 80097ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d0:	623a      	str	r2, [r7, #32]
 80097d2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	69f9      	ldr	r1, [r7, #28]
 80097d6:	6a3a      	ldr	r2, [r7, #32]
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e5      	bne.n	80097b0 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	e000      	b.n	80097ea <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80097e8:	2302      	movs	r3, #2
  }
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3728      	adds	r7, #40	; 0x28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	0800aa2b 	.word	0x0800aa2b
 80097f8:	0800aac5 	.word	0x0800aac5
 80097fc:	0800ac3d 	.word	0x0800ac3d

08009800 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b08a      	sub	sp, #40	; 0x28
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	4613      	mov	r3, r2
 800980c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009812:	2b20      	cmp	r3, #32
 8009814:	d142      	bne.n	800989c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <HAL_UART_Receive_DMA+0x22>
 800981c:	88fb      	ldrh	r3, [r7, #6]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e03b      	b.n	800989e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800982c:	2b01      	cmp	r3, #1
 800982e:	d101      	bne.n	8009834 <HAL_UART_Receive_DMA+0x34>
 8009830:	2302      	movs	r3, #2
 8009832:	e034      	b.n	800989e <HAL_UART_Receive_DMA+0x9e>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a18      	ldr	r2, [pc, #96]	; (80098a8 <HAL_UART_Receive_DMA+0xa8>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d01f      	beq.n	800988c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d018      	beq.n	800988c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	e853 3f00 	ldrex	r3, [r3]
 8009866:	613b      	str	r3, [r7, #16]
   return(result);
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	623b      	str	r3, [r7, #32]
 800987a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987c:	69f9      	ldr	r1, [r7, #28]
 800987e:	6a3a      	ldr	r2, [r7, #32]
 8009880:	e841 2300 	strex	r3, r2, [r1]
 8009884:	61bb      	str	r3, [r7, #24]
   return(result);
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1e6      	bne.n	800985a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800988c:	88fb      	ldrh	r3, [r7, #6]
 800988e:	461a      	mov	r2, r3
 8009890:	68b9      	ldr	r1, [r7, #8]
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 ff9a 	bl	800a7cc <UART_Start_Receive_DMA>
 8009898:	4603      	mov	r3, r0
 800989a:	e000      	b.n	800989e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800989c:	2302      	movs	r3, #2
  }
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3728      	adds	r7, #40	; 0x28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	40008000 	.word	0x40008000

080098ac <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b090      	sub	sp, #64	; 0x40
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ca:	2b80      	cmp	r3, #128	; 0x80
 80098cc:	d139      	bne.n	8009942 <HAL_UART_DMAStop+0x96>
 80098ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d0:	2b21      	cmp	r3, #33	; 0x21
 80098d2:	d136      	bne.n	8009942 <HAL_UART_DMAStop+0x96>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3308      	adds	r3, #8
 80098da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	e853 3f00 	ldrex	r3, [r3]
 80098e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098ea:	637b      	str	r3, [r7, #52]	; 0x34
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3308      	adds	r3, #8
 80098f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098fc:	e841 2300 	strex	r3, r2, [r1]
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e5      	bne.n	80098d4 <HAL_UART_DMAStop+0x28>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800990c:	2b00      	cmp	r3, #0
 800990e:	d015      	beq.n	800993c <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009914:	4618      	mov	r0, r3
 8009916:	f7fc fe43 	bl	80065a0 <HAL_DMA_Abort>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00d      	beq.n	800993c <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009924:	4618      	mov	r0, r3
 8009926:	f7fc ff69 	bl	80067fc <HAL_DMA_GetError>
 800992a:	4603      	mov	r3, r0
 800992c:	2b20      	cmp	r3, #32
 800992e:	d105      	bne.n	800993c <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2210      	movs	r2, #16
 8009934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e044      	b.n	80099c6 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 ffeb 	bl	800a918 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800994c:	2b40      	cmp	r3, #64	; 0x40
 800994e:	d139      	bne.n	80099c4 <HAL_UART_DMAStop+0x118>
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	2b22      	cmp	r3, #34	; 0x22
 8009954:	d136      	bne.n	80099c4 <HAL_UART_DMAStop+0x118>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3308      	adds	r3, #8
 800995c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	60bb      	str	r3, [r7, #8]
   return(result);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800996c:	633b      	str	r3, [r7, #48]	; 0x30
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3308      	adds	r3, #8
 8009974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009976:	61ba      	str	r2, [r7, #24]
 8009978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997a:	6979      	ldr	r1, [r7, #20]
 800997c:	69ba      	ldr	r2, [r7, #24]
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	613b      	str	r3, [r7, #16]
   return(result);
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e5      	bne.n	8009956 <HAL_UART_DMAStop+0xaa>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998e:	2b00      	cmp	r3, #0
 8009990:	d015      	beq.n	80099be <HAL_UART_DMAStop+0x112>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	4618      	mov	r0, r3
 8009998:	f7fc fe02 	bl	80065a0 <HAL_DMA_Abort>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00d      	beq.n	80099be <HAL_UART_DMAStop+0x112>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fc ff28 	bl	80067fc <HAL_DMA_GetError>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b20      	cmp	r3, #32
 80099b0:	d105      	bne.n	80099be <HAL_UART_DMAStop+0x112>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2210      	movs	r2, #16
 80099b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e003      	b.n	80099c6 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 ffd0 	bl	800a964 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3740      	adds	r7, #64	; 0x40
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b0ba      	sub	sp, #232	; 0xe8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80099f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80099fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80099fe:	4013      	ands	r3, r2
 8009a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d115      	bne.n	8009a38 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a10:	f003 0320 	and.w	r3, r3, #32
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00f      	beq.n	8009a38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d009      	beq.n	8009a38 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 82a6 	beq.w	8009f7a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
      }
      return;
 8009a36:	e2a0      	b.n	8009f7a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009a38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 8117 	beq.w	8009c70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d106      	bne.n	8009a5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009a4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009a52:	4b85      	ldr	r3, [pc, #532]	; (8009c68 <HAL_UART_IRQHandler+0x298>)
 8009a54:	4013      	ands	r3, r2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 810a 	beq.w	8009c70 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d011      	beq.n	8009a8c <HAL_UART_IRQHandler+0xbc>
 8009a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00b      	beq.n	8009a8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a82:	f043 0201 	orr.w	r2, r3, #1
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d011      	beq.n	8009abc <HAL_UART_IRQHandler+0xec>
 8009a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ab2:	f043 0204 	orr.w	r2, r3, #4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d011      	beq.n	8009aec <HAL_UART_IRQHandler+0x11c>
 8009ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2204      	movs	r2, #4
 8009ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ae2:	f043 0202 	orr.w	r2, r3, #2
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af0:	f003 0308 	and.w	r3, r3, #8
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d017      	beq.n	8009b28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d105      	bne.n	8009b10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2208      	movs	r2, #8
 8009b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b1e:	f043 0208 	orr.w	r2, r3, #8
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d012      	beq.n	8009b5a <HAL_UART_IRQHandler+0x18a>
 8009b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00c      	beq.n	8009b5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b50:	f043 0220 	orr.w	r2, r3, #32
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 820c 	beq.w	8009f7e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00d      	beq.n	8009b8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba2:	2b40      	cmp	r3, #64	; 0x40
 8009ba4:	d005      	beq.n	8009bb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009baa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d04f      	beq.n	8009c52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fed6 	bl	800a964 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc2:	2b40      	cmp	r3, #64	; 0x40
 8009bc4:	d141      	bne.n	8009c4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bd4:	e853 3f00 	ldrex	r3, [r3]
 8009bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3308      	adds	r3, #8
 8009bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1d9      	bne.n	8009bc6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d013      	beq.n	8009c42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1e:	4a13      	ldr	r2, [pc, #76]	; (8009c6c <HAL_UART_IRQHandler+0x29c>)
 8009c20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fc fcf8 	bl	800661c <HAL_DMA_Abort_IT>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d017      	beq.n	8009c62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c40:	e00f      	b.n	8009c62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f9ba 	bl	8009fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c48:	e00b      	b.n	8009c62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f9b6 	bl	8009fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c50:	e007      	b.n	8009c62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f9b2 	bl	8009fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009c60:	e18d      	b.n	8009f7e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c62:	bf00      	nop
    return;
 8009c64:	e18b      	b.n	8009f7e <HAL_UART_IRQHandler+0x5ae>
 8009c66:	bf00      	nop
 8009c68:	04000120 	.word	0x04000120
 8009c6c:	0800acb9 	.word	0x0800acb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	f040 8146 	bne.w	8009f06 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c7e:	f003 0310 	and.w	r3, r3, #16
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 813f 	beq.w	8009f06 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c8c:	f003 0310 	and.w	r3, r3, #16
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 8138 	beq.w	8009f06 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2210      	movs	r2, #16
 8009c9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca8:	2b40      	cmp	r3, #64	; 0x40
 8009caa:	f040 80b4 	bne.w	8009e16 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 815f 	beq.w	8009f82 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	f080 8157 	bcs.w	8009f82 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f040 8085 	bne.w	8009dfa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cfc:	e853 3f00 	ldrex	r3, [r3]
 8009d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1da      	bne.n	8009cf0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3308      	adds	r3, #8
 8009d40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d4c:	f023 0301 	bic.w	r3, r3, #1
 8009d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e1      	bne.n	8009d3a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3308      	adds	r3, #8
 8009d96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009da2:	e841 2300 	strex	r3, r2, [r1]
 8009da6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1e3      	bne.n	8009d76 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2220      	movs	r2, #32
 8009db2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc2:	e853 3f00 	ldrex	r3, [r3]
 8009dc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dca:	f023 0310 	bic.w	r3, r3, #16
 8009dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ddc:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dde:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009de4:	e841 2300 	strex	r3, r2, [r1]
 8009de8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1e4      	bne.n	8009dba <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fc fbd3 	bl	80065a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f8de 	bl	8009fd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e14:	e0b5      	b.n	8009f82 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 80a7 	beq.w	8009f86 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8009e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 80a2 	beq.w	8009f86 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4a:	e853 3f00 	ldrex	r3, [r3]
 8009e4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e64:	647b      	str	r3, [r7, #68]	; 0x44
 8009e66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e4      	bne.n	8009e42 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	623b      	str	r3, [r7, #32]
   return(result);
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	f023 0301 	bic.w	r3, r3, #1
 8009e8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3308      	adds	r3, #8
 8009e98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e9c:	633a      	str	r2, [r7, #48]	; 0x30
 8009e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea4:	e841 2300 	strex	r3, r2, [r1]
 8009ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1e3      	bne.n	8009e78 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	e853 3f00 	ldrex	r3, [r3]
 8009ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f023 0310 	bic.w	r3, r3, #16
 8009ed6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ee4:	61fb      	str	r3, [r7, #28]
 8009ee6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	69b9      	ldr	r1, [r7, #24]
 8009eea:	69fa      	ldr	r2, [r7, #28]
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e4      	bne.n	8009ec2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f866 	bl	8009fd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f04:	e03f      	b.n	8009f86 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00e      	beq.n	8009f30 <HAL_UART_IRQHandler+0x560>
 8009f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d008      	beq.n	8009f30 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 ff05 	bl	800ad38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f2e:	e02d      	b.n	8009f8c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00e      	beq.n	8009f5a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d008      	beq.n	8009f5a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01c      	beq.n	8009f8a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	4798      	blx	r3
    }
    return;
 8009f58:	e017      	b.n	8009f8a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d012      	beq.n	8009f8c <HAL_UART_IRQHandler+0x5bc>
 8009f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00c      	beq.n	8009f8c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 feb6 	bl	800ace4 <UART_EndTransmit_IT>
    return;
 8009f78:	e008      	b.n	8009f8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8009f7a:	bf00      	nop
 8009f7c:	e006      	b.n	8009f8c <HAL_UART_IRQHandler+0x5bc>
    return;
 8009f7e:	bf00      	nop
 8009f80:	e004      	b.n	8009f8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8009f82:	bf00      	nop
 8009f84:	e002      	b.n	8009f8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8009f86:	bf00      	nop
 8009f88:	e000      	b.n	8009f8c <HAL_UART_IRQHandler+0x5bc>
    return;
 8009f8a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009f8c:	37e8      	adds	r7, #232	; 0xe8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop

08009f94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
	...

0800a004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a004:	b5b0      	push	{r4, r5, r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	431a      	orrs	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	431a      	orrs	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	69db      	ldr	r3, [r3, #28]
 800a024:	4313      	orrs	r3, r2
 800a026:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	4baa      	ldr	r3, [pc, #680]	; (800a2d8 <UART_SetConfig+0x2d4>)
 800a030:	4013      	ands	r3, r2
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	6812      	ldr	r2, [r2, #0]
 800a036:	69f9      	ldr	r1, [r7, #28]
 800a038:	430b      	orrs	r3, r1
 800a03a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68da      	ldr	r2, [r3, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a9f      	ldr	r2, [pc, #636]	; (800a2dc <UART_SetConfig+0x2d8>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d004      	beq.n	800a06c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	69fa      	ldr	r2, [r7, #28]
 800a068:	4313      	orrs	r3, r2
 800a06a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	430a      	orrs	r2, r1
 800a07e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a96      	ldr	r2, [pc, #600]	; (800a2e0 <UART_SetConfig+0x2dc>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d121      	bne.n	800a0ce <UART_SetConfig+0xca>
 800a08a:	4b96      	ldr	r3, [pc, #600]	; (800a2e4 <UART_SetConfig+0x2e0>)
 800a08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a090:	f003 0303 	and.w	r3, r3, #3
 800a094:	2b03      	cmp	r3, #3
 800a096:	d817      	bhi.n	800a0c8 <UART_SetConfig+0xc4>
 800a098:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <UART_SetConfig+0x9c>)
 800a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09e:	bf00      	nop
 800a0a0:	0800a0b1 	.word	0x0800a0b1
 800a0a4:	0800a0bd 	.word	0x0800a0bd
 800a0a8:	0800a0b7 	.word	0x0800a0b7
 800a0ac:	0800a0c3 	.word	0x0800a0c3
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	76fb      	strb	r3, [r7, #27]
 800a0b4:	e096      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	76fb      	strb	r3, [r7, #27]
 800a0ba:	e093      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a0bc:	2304      	movs	r3, #4
 800a0be:	76fb      	strb	r3, [r7, #27]
 800a0c0:	e090      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a0c2:	2308      	movs	r3, #8
 800a0c4:	76fb      	strb	r3, [r7, #27]
 800a0c6:	e08d      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a0c8:	2310      	movs	r3, #16
 800a0ca:	76fb      	strb	r3, [r7, #27]
 800a0cc:	e08a      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a85      	ldr	r2, [pc, #532]	; (800a2e8 <UART_SetConfig+0x2e4>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d132      	bne.n	800a13e <UART_SetConfig+0x13a>
 800a0d8:	4b82      	ldr	r3, [pc, #520]	; (800a2e4 <UART_SetConfig+0x2e0>)
 800a0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0de:	f003 030c 	and.w	r3, r3, #12
 800a0e2:	2b0c      	cmp	r3, #12
 800a0e4:	d828      	bhi.n	800a138 <UART_SetConfig+0x134>
 800a0e6:	a201      	add	r2, pc, #4	; (adr r2, 800a0ec <UART_SetConfig+0xe8>)
 800a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ec:	0800a121 	.word	0x0800a121
 800a0f0:	0800a139 	.word	0x0800a139
 800a0f4:	0800a139 	.word	0x0800a139
 800a0f8:	0800a139 	.word	0x0800a139
 800a0fc:	0800a12d 	.word	0x0800a12d
 800a100:	0800a139 	.word	0x0800a139
 800a104:	0800a139 	.word	0x0800a139
 800a108:	0800a139 	.word	0x0800a139
 800a10c:	0800a127 	.word	0x0800a127
 800a110:	0800a139 	.word	0x0800a139
 800a114:	0800a139 	.word	0x0800a139
 800a118:	0800a139 	.word	0x0800a139
 800a11c:	0800a133 	.word	0x0800a133
 800a120:	2300      	movs	r3, #0
 800a122:	76fb      	strb	r3, [r7, #27]
 800a124:	e05e      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a126:	2302      	movs	r3, #2
 800a128:	76fb      	strb	r3, [r7, #27]
 800a12a:	e05b      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a12c:	2304      	movs	r3, #4
 800a12e:	76fb      	strb	r3, [r7, #27]
 800a130:	e058      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a132:	2308      	movs	r3, #8
 800a134:	76fb      	strb	r3, [r7, #27]
 800a136:	e055      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a138:	2310      	movs	r3, #16
 800a13a:	76fb      	strb	r3, [r7, #27]
 800a13c:	e052      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a6a      	ldr	r2, [pc, #424]	; (800a2ec <UART_SetConfig+0x2e8>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d120      	bne.n	800a18a <UART_SetConfig+0x186>
 800a148:	4b66      	ldr	r3, [pc, #408]	; (800a2e4 <UART_SetConfig+0x2e0>)
 800a14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a152:	2b30      	cmp	r3, #48	; 0x30
 800a154:	d013      	beq.n	800a17e <UART_SetConfig+0x17a>
 800a156:	2b30      	cmp	r3, #48	; 0x30
 800a158:	d814      	bhi.n	800a184 <UART_SetConfig+0x180>
 800a15a:	2b20      	cmp	r3, #32
 800a15c:	d009      	beq.n	800a172 <UART_SetConfig+0x16e>
 800a15e:	2b20      	cmp	r3, #32
 800a160:	d810      	bhi.n	800a184 <UART_SetConfig+0x180>
 800a162:	2b00      	cmp	r3, #0
 800a164:	d002      	beq.n	800a16c <UART_SetConfig+0x168>
 800a166:	2b10      	cmp	r3, #16
 800a168:	d006      	beq.n	800a178 <UART_SetConfig+0x174>
 800a16a:	e00b      	b.n	800a184 <UART_SetConfig+0x180>
 800a16c:	2300      	movs	r3, #0
 800a16e:	76fb      	strb	r3, [r7, #27]
 800a170:	e038      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a172:	2302      	movs	r3, #2
 800a174:	76fb      	strb	r3, [r7, #27]
 800a176:	e035      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a178:	2304      	movs	r3, #4
 800a17a:	76fb      	strb	r3, [r7, #27]
 800a17c:	e032      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a17e:	2308      	movs	r3, #8
 800a180:	76fb      	strb	r3, [r7, #27]
 800a182:	e02f      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a184:	2310      	movs	r3, #16
 800a186:	76fb      	strb	r3, [r7, #27]
 800a188:	e02c      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a53      	ldr	r2, [pc, #332]	; (800a2dc <UART_SetConfig+0x2d8>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d125      	bne.n	800a1e0 <UART_SetConfig+0x1dc>
 800a194:	4b53      	ldr	r3, [pc, #332]	; (800a2e4 <UART_SetConfig+0x2e0>)
 800a196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a19e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1a2:	d017      	beq.n	800a1d4 <UART_SetConfig+0x1d0>
 800a1a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1a8:	d817      	bhi.n	800a1da <UART_SetConfig+0x1d6>
 800a1aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ae:	d00b      	beq.n	800a1c8 <UART_SetConfig+0x1c4>
 800a1b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1b4:	d811      	bhi.n	800a1da <UART_SetConfig+0x1d6>
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <UART_SetConfig+0x1be>
 800a1ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1be:	d006      	beq.n	800a1ce <UART_SetConfig+0x1ca>
 800a1c0:	e00b      	b.n	800a1da <UART_SetConfig+0x1d6>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	76fb      	strb	r3, [r7, #27]
 800a1c6:	e00d      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a1c8:	2302      	movs	r3, #2
 800a1ca:	76fb      	strb	r3, [r7, #27]
 800a1cc:	e00a      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a1ce:	2304      	movs	r3, #4
 800a1d0:	76fb      	strb	r3, [r7, #27]
 800a1d2:	e007      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a1d4:	2308      	movs	r3, #8
 800a1d6:	76fb      	strb	r3, [r7, #27]
 800a1d8:	e004      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a1da:	2310      	movs	r3, #16
 800a1dc:	76fb      	strb	r3, [r7, #27]
 800a1de:	e001      	b.n	800a1e4 <UART_SetConfig+0x1e0>
 800a1e0:	2310      	movs	r3, #16
 800a1e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a3c      	ldr	r2, [pc, #240]	; (800a2dc <UART_SetConfig+0x2d8>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	f040 8082 	bne.w	800a2f4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1f0:	7efb      	ldrb	r3, [r7, #27]
 800a1f2:	2b08      	cmp	r3, #8
 800a1f4:	d823      	bhi.n	800a23e <UART_SetConfig+0x23a>
 800a1f6:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <UART_SetConfig+0x1f8>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a221 	.word	0x0800a221
 800a200:	0800a23f 	.word	0x0800a23f
 800a204:	0800a229 	.word	0x0800a229
 800a208:	0800a23f 	.word	0x0800a23f
 800a20c:	0800a22f 	.word	0x0800a22f
 800a210:	0800a23f 	.word	0x0800a23f
 800a214:	0800a23f 	.word	0x0800a23f
 800a218:	0800a23f 	.word	0x0800a23f
 800a21c:	0800a237 	.word	0x0800a237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a220:	f7fd fd7e 	bl	8007d20 <HAL_RCC_GetPCLK1Freq>
 800a224:	6178      	str	r0, [r7, #20]
        break;
 800a226:	e00f      	b.n	800a248 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a228:	4b31      	ldr	r3, [pc, #196]	; (800a2f0 <UART_SetConfig+0x2ec>)
 800a22a:	617b      	str	r3, [r7, #20]
        break;
 800a22c:	e00c      	b.n	800a248 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a22e:	f7fd fcdf 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 800a232:	6178      	str	r0, [r7, #20]
        break;
 800a234:	e008      	b.n	800a248 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a23a:	617b      	str	r3, [r7, #20]
        break;
 800a23c:	e004      	b.n	800a248 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	76bb      	strb	r3, [r7, #26]
        break;
 800a246:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 8100 	beq.w	800a450 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	4613      	mov	r3, r2
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	4413      	add	r3, r2
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d305      	bcc.n	800a26c <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d902      	bls.n	800a272 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	76bb      	strb	r3, [r7, #26]
 800a270:	e0ee      	b.n	800a450 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	4618      	mov	r0, r3
 800a276:	f04f 0100 	mov.w	r1, #0
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	f04f 0300 	mov.w	r3, #0
 800a282:	020b      	lsls	r3, r1, #8
 800a284:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a288:	0202      	lsls	r2, r0, #8
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	6849      	ldr	r1, [r1, #4]
 800a28e:	0849      	lsrs	r1, r1, #1
 800a290:	4608      	mov	r0, r1
 800a292:	f04f 0100 	mov.w	r1, #0
 800a296:	1814      	adds	r4, r2, r0
 800a298:	eb43 0501 	adc.w	r5, r3, r1
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	f04f 0300 	mov.w	r3, #0
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	f7f6 fced 	bl	8000c88 <__aeabi_uldivmod>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2bc:	d308      	bcc.n	800a2d0 <UART_SetConfig+0x2cc>
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2c4:	d204      	bcs.n	800a2d0 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	60da      	str	r2, [r3, #12]
 800a2ce:	e0bf      	b.n	800a450 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	76bb      	strb	r3, [r7, #26]
 800a2d4:	e0bc      	b.n	800a450 <UART_SetConfig+0x44c>
 800a2d6:	bf00      	nop
 800a2d8:	efff69f3 	.word	0xefff69f3
 800a2dc:	40008000 	.word	0x40008000
 800a2e0:	40013800 	.word	0x40013800
 800a2e4:	40021000 	.word	0x40021000
 800a2e8:	40004400 	.word	0x40004400
 800a2ec:	40004800 	.word	0x40004800
 800a2f0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	69db      	ldr	r3, [r3, #28]
 800a2f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2fc:	d15b      	bne.n	800a3b6 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 800a2fe:	7efb      	ldrb	r3, [r7, #27]
 800a300:	2b08      	cmp	r3, #8
 800a302:	d828      	bhi.n	800a356 <UART_SetConfig+0x352>
 800a304:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <UART_SetConfig+0x308>)
 800a306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30a:	bf00      	nop
 800a30c:	0800a331 	.word	0x0800a331
 800a310:	0800a339 	.word	0x0800a339
 800a314:	0800a341 	.word	0x0800a341
 800a318:	0800a357 	.word	0x0800a357
 800a31c:	0800a347 	.word	0x0800a347
 800a320:	0800a357 	.word	0x0800a357
 800a324:	0800a357 	.word	0x0800a357
 800a328:	0800a357 	.word	0x0800a357
 800a32c:	0800a34f 	.word	0x0800a34f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a330:	f7fd fcf6 	bl	8007d20 <HAL_RCC_GetPCLK1Freq>
 800a334:	6178      	str	r0, [r7, #20]
        break;
 800a336:	e013      	b.n	800a360 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a338:	f7fd fd08 	bl	8007d4c <HAL_RCC_GetPCLK2Freq>
 800a33c:	6178      	str	r0, [r7, #20]
        break;
 800a33e:	e00f      	b.n	800a360 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a340:	4b49      	ldr	r3, [pc, #292]	; (800a468 <UART_SetConfig+0x464>)
 800a342:	617b      	str	r3, [r7, #20]
        break;
 800a344:	e00c      	b.n	800a360 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a346:	f7fd fc53 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 800a34a:	6178      	str	r0, [r7, #20]
        break;
 800a34c:	e008      	b.n	800a360 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a34e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a352:	617b      	str	r3, [r7, #20]
        break;
 800a354:	e004      	b.n	800a360 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 800a356:	2300      	movs	r3, #0
 800a358:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	76bb      	strb	r3, [r7, #26]
        break;
 800a35e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d074      	beq.n	800a450 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	005a      	lsls	r2, r3, #1
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	085b      	lsrs	r3, r3, #1
 800a370:	441a      	add	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	2b0f      	cmp	r3, #15
 800a380:	d916      	bls.n	800a3b0 <UART_SetConfig+0x3ac>
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a388:	d212      	bcs.n	800a3b0 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	f023 030f 	bic.w	r3, r3, #15
 800a392:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	085b      	lsrs	r3, r3, #1
 800a398:	b29b      	uxth	r3, r3
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	89fb      	ldrh	r3, [r7, #14]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	89fa      	ldrh	r2, [r7, #14]
 800a3ac:	60da      	str	r2, [r3, #12]
 800a3ae:	e04f      	b.n	800a450 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	76bb      	strb	r3, [r7, #26]
 800a3b4:	e04c      	b.n	800a450 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3b6:	7efb      	ldrb	r3, [r7, #27]
 800a3b8:	2b08      	cmp	r3, #8
 800a3ba:	d828      	bhi.n	800a40e <UART_SetConfig+0x40a>
 800a3bc:	a201      	add	r2, pc, #4	; (adr r2, 800a3c4 <UART_SetConfig+0x3c0>)
 800a3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c2:	bf00      	nop
 800a3c4:	0800a3e9 	.word	0x0800a3e9
 800a3c8:	0800a3f1 	.word	0x0800a3f1
 800a3cc:	0800a3f9 	.word	0x0800a3f9
 800a3d0:	0800a40f 	.word	0x0800a40f
 800a3d4:	0800a3ff 	.word	0x0800a3ff
 800a3d8:	0800a40f 	.word	0x0800a40f
 800a3dc:	0800a40f 	.word	0x0800a40f
 800a3e0:	0800a40f 	.word	0x0800a40f
 800a3e4:	0800a407 	.word	0x0800a407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3e8:	f7fd fc9a 	bl	8007d20 <HAL_RCC_GetPCLK1Freq>
 800a3ec:	6178      	str	r0, [r7, #20]
        break;
 800a3ee:	e013      	b.n	800a418 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3f0:	f7fd fcac 	bl	8007d4c <HAL_RCC_GetPCLK2Freq>
 800a3f4:	6178      	str	r0, [r7, #20]
        break;
 800a3f6:	e00f      	b.n	800a418 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3f8:	4b1b      	ldr	r3, [pc, #108]	; (800a468 <UART_SetConfig+0x464>)
 800a3fa:	617b      	str	r3, [r7, #20]
        break;
 800a3fc:	e00c      	b.n	800a418 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3fe:	f7fd fbf7 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 800a402:	6178      	str	r0, [r7, #20]
        break;
 800a404:	e008      	b.n	800a418 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a40a:	617b      	str	r3, [r7, #20]
        break;
 800a40c:	e004      	b.n	800a418 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	76bb      	strb	r3, [r7, #26]
        break;
 800a416:	bf00      	nop
    }

    if (pclk != 0U)
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d018      	beq.n	800a450 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	085a      	lsrs	r2, r3, #1
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	441a      	add	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a430:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	2b0f      	cmp	r3, #15
 800a436:	d909      	bls.n	800a44c <UART_SetConfig+0x448>
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a43e:	d205      	bcs.n	800a44c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	b29a      	uxth	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	60da      	str	r2, [r3, #12]
 800a44a:	e001      	b.n	800a450 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a45c:	7ebb      	ldrb	r3, [r7, #26]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3720      	adds	r7, #32
 800a462:	46bd      	mov	sp, r7
 800a464:	bdb0      	pop	{r4, r5, r7, pc}
 800a466:	bf00      	nop
 800a468:	00f42400 	.word	0x00f42400

0800a46c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00a      	beq.n	800a496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	430a      	orrs	r2, r1
 800a494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49a:	f003 0302 	and.w	r3, r3, #2
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00a      	beq.n	800a4b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00a      	beq.n	800a4da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	f003 0308 	and.w	r3, r3, #8
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	f003 0310 	and.w	r3, r3, #16
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00a      	beq.n	800a51e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	f003 0320 	and.w	r3, r3, #32
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00a      	beq.n	800a540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01a      	beq.n	800a582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	430a      	orrs	r2, r1
 800a560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a56a:	d10a      	bne.n	800a582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00a      	beq.n	800a5a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	430a      	orrs	r2, r1
 800a5a2:	605a      	str	r2, [r3, #4]
  }
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af02      	add	r7, sp, #8
 800a5b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5c0:	f7fa fbc6 	bl	8004d50 <HAL_GetTick>
 800a5c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0308 	and.w	r3, r3, #8
 800a5d0:	2b08      	cmp	r3, #8
 800a5d2:	d10e      	bne.n	800a5f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f82d 	bl	800a642 <UART_WaitOnFlagUntilTimeout>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e023      	b.n	800a63a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	d10e      	bne.n	800a61e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f817 	bl	800a642 <UART_WaitOnFlagUntilTimeout>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	e00d      	b.n	800a63a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2220      	movs	r2, #32
 800a628:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b09c      	sub	sp, #112	; 0x70
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	603b      	str	r3, [r7, #0]
 800a64e:	4613      	mov	r3, r2
 800a650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a652:	e0a5      	b.n	800a7a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65a:	f000 80a1 	beq.w	800a7a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65e:	f7fa fb77 	bl	8004d50 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d302      	bcc.n	800a674 <UART_WaitOnFlagUntilTimeout+0x32>
 800a66e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a670:	2b00      	cmp	r3, #0
 800a672:	d13e      	bne.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a684:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a688:	667b      	str	r3, [r7, #100]	; 0x64
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a692:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a694:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a698:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a6a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e6      	bne.n	800a674 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b8:	f023 0301 	bic.w	r3, r3, #1
 800a6bc:	663b      	str	r3, [r7, #96]	; 0x60
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3308      	adds	r3, #8
 800a6c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6c6:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e5      	bne.n	800a6a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e067      	b.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0304 	and.w	r3, r3, #4
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d04f      	beq.n	800a7a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a70a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a70e:	d147      	bne.n	800a7a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a718:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	e853 3f00 	ldrex	r3, [r3]
 800a726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a72e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	461a      	mov	r2, r3
 800a736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a738:	637b      	str	r3, [r7, #52]	; 0x34
 800a73a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a73e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e6      	bne.n	800a71a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3308      	adds	r3, #8
 800a752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	613b      	str	r3, [r7, #16]
   return(result);
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f023 0301 	bic.w	r3, r3, #1
 800a762:	66bb      	str	r3, [r7, #104]	; 0x68
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3308      	adds	r3, #8
 800a76a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a76c:	623a      	str	r2, [r7, #32]
 800a76e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	69f9      	ldr	r1, [r7, #28]
 800a772:	6a3a      	ldr	r2, [r7, #32]
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	61bb      	str	r3, [r7, #24]
   return(result);
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e5      	bne.n	800a74c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2220      	movs	r2, #32
 800a784:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2220      	movs	r2, #32
 800a78a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2220      	movs	r2, #32
 800a790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a79c:	2303      	movs	r3, #3
 800a79e:	e010      	b.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	69da      	ldr	r2, [r3, #28]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	bf0c      	ite	eq
 800a7b0:	2301      	moveq	r3, #1
 800a7b2:	2300      	movne	r3, #0
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	79fb      	ldrb	r3, [r7, #7]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	f43f af4a 	beq.w	800a654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3770      	adds	r7, #112	; 0x70
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
	...

0800a7cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b096      	sub	sp, #88	; 0x58
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	88fa      	ldrh	r2, [r7, #6]
 800a7e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2222      	movs	r2, #34	; 0x22
 800a7f4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d02b      	beq.n	800a856 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a802:	4a42      	ldr	r2, [pc, #264]	; (800a90c <UART_Start_Receive_DMA+0x140>)
 800a804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80a:	4a41      	ldr	r2, [pc, #260]	; (800a910 <UART_Start_Receive_DMA+0x144>)
 800a80c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a812:	4a40      	ldr	r2, [pc, #256]	; (800a914 <UART_Start_Receive_DMA+0x148>)
 800a814:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81a:	2200      	movs	r2, #0
 800a81c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3324      	adds	r3, #36	; 0x24
 800a828:	4619      	mov	r1, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a82e:	461a      	mov	r2, r3
 800a830:	88fb      	ldrh	r3, [r7, #6]
 800a832:	f7fb fe55 	bl	80064e0 <HAL_DMA_Start_IT>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00c      	beq.n	800a856 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2210      	movs	r2, #16
 800a840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2220      	movs	r2, #32
 800a850:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e055      	b.n	800a902 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d018      	beq.n	800a898 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86e:	e853 3f00 	ldrex	r3, [r3]
 800a872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a87a:	657b      	str	r3, [r7, #84]	; 0x54
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	461a      	mov	r2, r3
 800a882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a884:	64bb      	str	r3, [r7, #72]	; 0x48
 800a886:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a888:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a88a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a88c:	e841 2300 	strex	r3, r2, [r1]
 800a890:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1e6      	bne.n	800a866 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	3308      	adds	r3, #8
 800a89e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a2:	e853 3f00 	ldrex	r3, [r3]
 800a8a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	f043 0301 	orr.w	r3, r3, #1
 800a8ae:	653b      	str	r3, [r7, #80]	; 0x50
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8b8:	637a      	str	r2, [r7, #52]	; 0x34
 800a8ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8c0:	e841 2300 	strex	r3, r2, [r1]
 800a8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e5      	bne.n	800a898 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	e853 3f00 	ldrex	r3, [r3]
 800a8da:	613b      	str	r3, [r7, #16]
   return(result);
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8ec:	623a      	str	r2, [r7, #32]
 800a8ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f0:	69f9      	ldr	r1, [r7, #28]
 800a8f2:	6a3a      	ldr	r2, [r7, #32]
 800a8f4:	e841 2300 	strex	r3, r2, [r1]
 800a8f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1e5      	bne.n	800a8cc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3758      	adds	r7, #88	; 0x58
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	0800aae1 	.word	0x0800aae1
 800a910:	0800ac05 	.word	0x0800ac05
 800a914:	0800ac3d 	.word	0x0800ac3d

0800a918 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a918:	b480      	push	{r7}
 800a91a:	b089      	sub	sp, #36	; 0x24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	e853 3f00 	ldrex	r3, [r3]
 800a92c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a934:	61fb      	str	r3, [r7, #28]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	61bb      	str	r3, [r7, #24]
 800a940:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a942:	6979      	ldr	r1, [r7, #20]
 800a944:	69ba      	ldr	r2, [r7, #24]
 800a946:	e841 2300 	strex	r3, r2, [r1]
 800a94a:	613b      	str	r3, [r7, #16]
   return(result);
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1e6      	bne.n	800a920 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2220      	movs	r2, #32
 800a956:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a958:	bf00      	nop
 800a95a:	3724      	adds	r7, #36	; 0x24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a964:	b480      	push	{r7}
 800a966:	b095      	sub	sp, #84	; 0x54
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a974:	e853 3f00 	ldrex	r3, [r3]
 800a978:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a980:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a98a:	643b      	str	r3, [r7, #64]	; 0x40
 800a98c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a990:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a992:	e841 2300 	strex	r3, r2, [r1]
 800a996:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1e6      	bne.n	800a96c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	f023 0301 	bic.w	r3, r3, #1
 800a9b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3308      	adds	r3, #8
 800a9bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e5      	bne.n	800a99e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d118      	bne.n	800aa0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	e853 3f00 	ldrex	r3, [r3]
 800a9e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f023 0310 	bic.w	r3, r3, #16
 800a9ee:	647b      	str	r3, [r7, #68]	; 0x44
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9f8:	61bb      	str	r3, [r7, #24]
 800a9fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fc:	6979      	ldr	r1, [r7, #20]
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	e841 2300 	strex	r3, r2, [r1]
 800aa04:	613b      	str	r3, [r7, #16]
   return(result);
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1e6      	bne.n	800a9da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800aa1e:	bf00      	nop
 800aa20:	3754      	adds	r7, #84	; 0x54
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b090      	sub	sp, #64	; 0x40
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d137      	bne.n	800aab6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800aa46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3308      	adds	r3, #8
 800aa54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	623b      	str	r3, [r7, #32]
   return(result);
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa64:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa6e:	633a      	str	r2, [r7, #48]	; 0x30
 800aa70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e5      	bne.n	800aa4e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa96:	637b      	str	r3, [r7, #52]	; 0x34
 800aa98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa0:	61fb      	str	r3, [r7, #28]
 800aaa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	69b9      	ldr	r1, [r7, #24]
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	617b      	str	r3, [r7, #20]
   return(result);
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e6      	bne.n	800aa82 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aab4:	e002      	b.n	800aabc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aab6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aab8:	f7f8 fb86 	bl	80031c8 <HAL_UART_TxCpltCallback>
}
 800aabc:	bf00      	nop
 800aabe:	3740      	adds	r7, #64	; 0x40
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7ff fa5e 	bl	8009f94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aad8:	bf00      	nop
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b09c      	sub	sp, #112	; 0x70
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaec:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0320 	and.w	r3, r3, #32
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d170      	bne.n	800abde <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800aafc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab0c:	e853 3f00 	ldrex	r3, [r3]
 800ab10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab18:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab22:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab2a:	e841 2300 	strex	r3, r2, [r1]
 800ab2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1e6      	bne.n	800ab04 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab40:	e853 3f00 	ldrex	r3, [r3]
 800ab44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab48:	f023 0301 	bic.w	r3, r3, #1
 800ab4c:	667b      	str	r3, [r7, #100]	; 0x64
 800ab4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3308      	adds	r3, #8
 800ab54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab56:	647a      	str	r2, [r7, #68]	; 0x44
 800ab58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab5e:	e841 2300 	strex	r3, r2, [r1]
 800ab62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1e5      	bne.n	800ab36 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3308      	adds	r3, #8
 800ab70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	e853 3f00 	ldrex	r3, [r3]
 800ab78:	623b      	str	r3, [r7, #32]
   return(result);
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab80:	663b      	str	r3, [r7, #96]	; 0x60
 800ab82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3308      	adds	r3, #8
 800ab88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab8a:	633a      	str	r2, [r7, #48]	; 0x30
 800ab8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab92:	e841 2300 	strex	r3, r2, [r1]
 800ab96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1e5      	bne.n	800ab6a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba0:	2220      	movs	r2, #32
 800aba2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d118      	bne.n	800abde <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f023 0310 	bic.w	r3, r3, #16
 800abc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	461a      	mov	r2, r3
 800abc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abca:	61fb      	str	r3, [r7, #28]
 800abcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	69b9      	ldr	r1, [r7, #24]
 800abd0:	69fa      	ldr	r2, [r7, #28]
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	617b      	str	r3, [r7, #20]
   return(result);
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e6      	bne.n	800abac <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d107      	bne.n	800abf6 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800abec:	4619      	mov	r1, r3
 800abee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abf0:	f7ff f9ee 	bl	8009fd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abf4:	e002      	b.n	800abfc <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800abf6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abf8:	f7f8 f91c 	bl	8002e34 <HAL_UART_RxCpltCallback>
}
 800abfc:	bf00      	nop
 800abfe:	3770      	adds	r7, #112	; 0x70
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac10:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d109      	bne.n	800ac2e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ac20:	085b      	lsrs	r3, r3, #1
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	4619      	mov	r1, r3
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f7ff f9d2 	bl	8009fd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac2c:	e002      	b.n	800ac34 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7ff f9ba 	bl	8009fa8 <HAL_UART_RxHalfCpltCallback>
}
 800ac34:	bf00      	nop
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac48:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac54:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac60:	2b80      	cmp	r3, #128	; 0x80
 800ac62:	d109      	bne.n	800ac78 <UART_DMAError+0x3c>
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2b21      	cmp	r3, #33	; 0x21
 800ac68:	d106      	bne.n	800ac78 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ac72:	6978      	ldr	r0, [r7, #20]
 800ac74:	f7ff fe50 	bl	800a918 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac82:	2b40      	cmp	r3, #64	; 0x40
 800ac84:	d109      	bne.n	800ac9a <UART_DMAError+0x5e>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b22      	cmp	r3, #34	; 0x22
 800ac8a:	d106      	bne.n	800ac9a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ac94:	6978      	ldr	r0, [r7, #20]
 800ac96:	f7ff fe65 	bl	800a964 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aca0:	f043 0210 	orr.w	r2, r3, #16
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acaa:	6978      	ldr	r0, [r7, #20]
 800acac:	f7ff f986 	bl	8009fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acb0:	bf00      	nop
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f7ff f970 	bl	8009fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acdc:	bf00      	nop
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	e853 3f00 	ldrex	r3, [r3]
 800acf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad00:	61fb      	str	r3, [r7, #28]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	61bb      	str	r3, [r7, #24]
 800ad0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0e:	6979      	ldr	r1, [r7, #20]
 800ad10:	69ba      	ldr	r2, [r7, #24]
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	613b      	str	r3, [r7, #16]
   return(result);
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e6      	bne.n	800acec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2220      	movs	r2, #32
 800ad22:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7f8 fa4c 	bl	80031c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad30:	bf00      	nop
 800ad32:	3720      	adds	r7, #32
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <__NVIC_SetPriority>:
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4603      	mov	r3, r0
 800ad54:	6039      	str	r1, [r7, #0]
 800ad56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	db0a      	blt.n	800ad76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	490c      	ldr	r1, [pc, #48]	; (800ad98 <__NVIC_SetPriority+0x4c>)
 800ad66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad6a:	0112      	lsls	r2, r2, #4
 800ad6c:	b2d2      	uxtb	r2, r2
 800ad6e:	440b      	add	r3, r1
 800ad70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad74:	e00a      	b.n	800ad8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	4908      	ldr	r1, [pc, #32]	; (800ad9c <__NVIC_SetPriority+0x50>)
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	f003 030f 	and.w	r3, r3, #15
 800ad82:	3b04      	subs	r3, #4
 800ad84:	0112      	lsls	r2, r2, #4
 800ad86:	b2d2      	uxtb	r2, r2
 800ad88:	440b      	add	r3, r1
 800ad8a:	761a      	strb	r2, [r3, #24]
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	e000e100 	.word	0xe000e100
 800ad9c:	e000ed00 	.word	0xe000ed00

0800ada0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ada4:	4b05      	ldr	r3, [pc, #20]	; (800adbc <SysTick_Handler+0x1c>)
 800ada6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ada8:	f001 fe52 	bl	800ca50 <xTaskGetSchedulerState>
 800adac:	4603      	mov	r3, r0
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d001      	beq.n	800adb6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800adb2:	f002 fd21 	bl	800d7f8 <xPortSysTickHandler>
  }
}
 800adb6:	bf00      	nop
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	e000e010 	.word	0xe000e010

0800adc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800adc4:	2100      	movs	r1, #0
 800adc6:	f06f 0004 	mvn.w	r0, #4
 800adca:	f7ff ffbf 	bl	800ad4c <__NVIC_SetPriority>
#endif
}
 800adce:	bf00      	nop
 800add0:	bd80      	pop	{r7, pc}
	...

0800add4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adda:	f3ef 8305 	mrs	r3, IPSR
 800adde:	603b      	str	r3, [r7, #0]
  return(result);
 800ade0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d003      	beq.n	800adee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ade6:	f06f 0305 	mvn.w	r3, #5
 800adea:	607b      	str	r3, [r7, #4]
 800adec:	e00c      	b.n	800ae08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800adee:	4b0a      	ldr	r3, [pc, #40]	; (800ae18 <osKernelInitialize+0x44>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d105      	bne.n	800ae02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800adf6:	4b08      	ldr	r3, [pc, #32]	; (800ae18 <osKernelInitialize+0x44>)
 800adf8:	2201      	movs	r2, #1
 800adfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	607b      	str	r3, [r7, #4]
 800ae00:	e002      	b.n	800ae08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ae02:	f04f 33ff 	mov.w	r3, #4294967295
 800ae06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae08:	687b      	ldr	r3, [r7, #4]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	20000270 	.word	0x20000270

0800ae1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae22:	f3ef 8305 	mrs	r3, IPSR
 800ae26:	603b      	str	r3, [r7, #0]
  return(result);
 800ae28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ae2e:	f06f 0305 	mvn.w	r3, #5
 800ae32:	607b      	str	r3, [r7, #4]
 800ae34:	e010      	b.n	800ae58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ae36:	4b0b      	ldr	r3, [pc, #44]	; (800ae64 <osKernelStart+0x48>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d109      	bne.n	800ae52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ae3e:	f7ff ffbf 	bl	800adc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae42:	4b08      	ldr	r3, [pc, #32]	; (800ae64 <osKernelStart+0x48>)
 800ae44:	2202      	movs	r2, #2
 800ae46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae48:	f001 f978 	bl	800c13c <vTaskStartScheduler>
      stat = osOK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	607b      	str	r3, [r7, #4]
 800ae50:	e002      	b.n	800ae58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ae52:	f04f 33ff 	mov.w	r3, #4294967295
 800ae56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae58:	687b      	ldr	r3, [r7, #4]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20000270 	.word	0x20000270

0800ae68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08e      	sub	sp, #56	; 0x38
 800ae6c:	af04      	add	r7, sp, #16
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae74:	2300      	movs	r3, #0
 800ae76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae78:	f3ef 8305 	mrs	r3, IPSR
 800ae7c:	617b      	str	r3, [r7, #20]
  return(result);
 800ae7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d17f      	bne.n	800af84 <osThreadNew+0x11c>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d07c      	beq.n	800af84 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800ae8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae8e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae90:	2318      	movs	r3, #24
 800ae92:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae94:	2300      	movs	r3, #0
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ae98:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d045      	beq.n	800af30 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <osThreadNew+0x4a>
        name = attr->name;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d008      	beq.n	800aed8 <osThreadNew+0x70>
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	2b38      	cmp	r3, #56	; 0x38
 800aeca:	d805      	bhi.n	800aed8 <osThreadNew+0x70>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <osThreadNew+0x74>
        return (NULL);
 800aed8:	2300      	movs	r3, #0
 800aeda:	e054      	b.n	800af86 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d003      	beq.n	800aeec <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	089b      	lsrs	r3, r3, #2
 800aeea:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00e      	beq.n	800af12 <osThreadNew+0xaa>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	2bbf      	cmp	r3, #191	; 0xbf
 800aefa:	d90a      	bls.n	800af12 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af00:	2b00      	cmp	r3, #0
 800af02:	d006      	beq.n	800af12 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <osThreadNew+0xaa>
        mem = 1;
 800af0c:	2301      	movs	r3, #1
 800af0e:	61bb      	str	r3, [r7, #24]
 800af10:	e010      	b.n	800af34 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10c      	bne.n	800af34 <osThreadNew+0xcc>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d108      	bne.n	800af34 <osThreadNew+0xcc>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d104      	bne.n	800af34 <osThreadNew+0xcc>
          mem = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	61bb      	str	r3, [r7, #24]
 800af2e:	e001      	b.n	800af34 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d110      	bne.n	800af5c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af42:	9202      	str	r2, [sp, #8]
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	6a3a      	ldr	r2, [r7, #32]
 800af4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f000 ff03 	bl	800bd5c <xTaskCreateStatic>
 800af56:	4603      	mov	r3, r0
 800af58:	613b      	str	r3, [r7, #16]
 800af5a:	e013      	b.n	800af84 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d110      	bne.n	800af84 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800af62:	6a3b      	ldr	r3, [r7, #32]
 800af64:	b29a      	uxth	r2, r3
 800af66:	f107 0310 	add.w	r3, r7, #16
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 ff4e 	bl	800be16 <xTaskCreate>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d001      	beq.n	800af84 <osThreadNew+0x11c>
            hTask = NULL;
 800af80:	2300      	movs	r3, #0
 800af82:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af84:	693b      	ldr	r3, [r7, #16]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3728      	adds	r7, #40	; 0x28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af96:	f3ef 8305 	mrs	r3, IPSR
 800af9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800af9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <osDelay+0x1c>
    stat = osErrorISR;
 800afa2:	f06f 0305 	mvn.w	r3, #5
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	e007      	b.n	800afba <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800afaa:	2300      	movs	r3, #0
 800afac:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <osDelay+0x2c>
      vTaskDelay(ticks);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f001 f88d 	bl	800c0d4 <vTaskDelay>
    }
  }

  return (stat);
 800afba:	68fb      	ldr	r3, [r7, #12]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f002 fa30 	bl	800d432 <pvTimerGetTimerID>
 800afd2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d005      	beq.n	800afe6 <TimerCallback+0x22>
    callb->func (callb->arg);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	6852      	ldr	r2, [r2, #4]
 800afe2:	4610      	mov	r0, r2
 800afe4:	4798      	blx	r3
  }
}
 800afe6:	bf00      	nop
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b08c      	sub	sp, #48	; 0x30
 800aff4:	af02      	add	r7, sp, #8
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	607a      	str	r2, [r7, #4]
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	460b      	mov	r3, r1
 800affe:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b000:	2300      	movs	r3, #0
 800b002:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b004:	f3ef 8305 	mrs	r3, IPSR
 800b008:	613b      	str	r3, [r7, #16]
  return(result);
 800b00a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d163      	bne.n	800b0d8 <osTimerNew+0xe8>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d060      	beq.n	800b0d8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b016:	2008      	movs	r0, #8
 800b018:	f002 fc7e 	bl	800d918 <pvPortMalloc>
 800b01c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d059      	beq.n	800b0d8 <osTimerNew+0xe8>
      callb->func = func;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b030:	7afb      	ldrb	r3, [r7, #11]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d102      	bne.n	800b03c <osTimerNew+0x4c>
        reload = pdFALSE;
 800b036:	2300      	movs	r3, #0
 800b038:	61fb      	str	r3, [r7, #28]
 800b03a:	e001      	b.n	800b040 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b03c:	2301      	movs	r3, #1
 800b03e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b040:	f04f 33ff 	mov.w	r3, #4294967295
 800b044:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b046:	2300      	movs	r3, #0
 800b048:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d01c      	beq.n	800b08a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <osTimerNew+0x6e>
          name = attr->name;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d006      	beq.n	800b074 <osTimerNew+0x84>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	2b2b      	cmp	r3, #43	; 0x2b
 800b06c:	d902      	bls.n	800b074 <osTimerNew+0x84>
          mem = 1;
 800b06e:	2301      	movs	r3, #1
 800b070:	61bb      	str	r3, [r7, #24]
 800b072:	e00c      	b.n	800b08e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d108      	bne.n	800b08e <osTimerNew+0x9e>
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d104      	bne.n	800b08e <osTimerNew+0x9e>
            mem = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	61bb      	str	r3, [r7, #24]
 800b088:	e001      	b.n	800b08e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d10c      	bne.n	800b0ae <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	4b12      	ldr	r3, [pc, #72]	; (800b0e4 <osTimerNew+0xf4>)
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	69fa      	ldr	r2, [r7, #28]
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0a6:	f001 fe1c 	bl	800cce2 <xTimerCreateStatic>
 800b0aa:	6238      	str	r0, [r7, #32]
 800b0ac:	e00b      	b.n	800b0c6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d108      	bne.n	800b0c6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b0b4:	4b0b      	ldr	r3, [pc, #44]	; (800b0e4 <osTimerNew+0xf4>)
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	69fa      	ldr	r2, [r7, #28]
 800b0bc:	2101      	movs	r1, #1
 800b0be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0c0:	f001 fdee 	bl	800cca0 <xTimerCreate>
 800b0c4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d105      	bne.n	800b0d8 <osTimerNew+0xe8>
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <osTimerNew+0xe8>
        vPortFree (callb);
 800b0d2:	6978      	ldr	r0, [r7, #20]
 800b0d4:	f002 fcec 	bl	800dab0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b0d8:	6a3b      	ldr	r3, [r7, #32]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3728      	adds	r7, #40	; 0x28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	0800afc5 	.word	0x0800afc5

0800b0e8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af02      	add	r7, sp, #8
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0f6:	f3ef 8305 	mrs	r3, IPSR
 800b0fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <osTimerStart+0x22>
    stat = osErrorISR;
 800b102:	f06f 0305 	mvn.w	r3, #5
 800b106:	617b      	str	r3, [r7, #20]
 800b108:	e017      	b.n	800b13a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d103      	bne.n	800b118 <osTimerStart+0x30>
    stat = osErrorParameter;
 800b110:	f06f 0303 	mvn.w	r3, #3
 800b114:	617b      	str	r3, [r7, #20]
 800b116:	e010      	b.n	800b13a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800b118:	2300      	movs	r3, #0
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	2300      	movs	r3, #0
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	2104      	movs	r1, #4
 800b122:	6938      	ldr	r0, [r7, #16]
 800b124:	f001 fe56 	bl	800cdd4 <xTimerGenericCommand>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d102      	bne.n	800b134 <osTimerStart+0x4c>
      stat = osOK;
 800b12e:	2300      	movs	r3, #0
 800b130:	617b      	str	r3, [r7, #20]
 800b132:	e002      	b.n	800b13a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800b134:	f06f 0302 	mvn.w	r3, #2
 800b138:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b13a:	697b      	ldr	r3, [r7, #20]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800b144:	b580      	push	{r7, lr}
 800b146:	b088      	sub	sp, #32
 800b148:	af02      	add	r7, sp, #8
 800b14a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b150:	f3ef 8305 	mrs	r3, IPSR
 800b154:	60fb      	str	r3, [r7, #12]
  return(result);
 800b156:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d003      	beq.n	800b164 <osTimerStop+0x20>
    stat = osErrorISR;
 800b15c:	f06f 0305 	mvn.w	r3, #5
 800b160:	617b      	str	r3, [r7, #20]
 800b162:	e021      	b.n	800b1a8 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d103      	bne.n	800b172 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800b16a:	f06f 0303 	mvn.w	r3, #3
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	e01a      	b.n	800b1a8 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800b172:	6938      	ldr	r0, [r7, #16]
 800b174:	f002 f934 	bl	800d3e0 <xTimerIsTimerActive>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d103      	bne.n	800b186 <osTimerStop+0x42>
      stat = osErrorResource;
 800b17e:	f06f 0302 	mvn.w	r3, #2
 800b182:	617b      	str	r3, [r7, #20]
 800b184:	e010      	b.n	800b1a8 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800b186:	2300      	movs	r3, #0
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	2300      	movs	r3, #0
 800b18c:	2200      	movs	r2, #0
 800b18e:	2103      	movs	r1, #3
 800b190:	6938      	ldr	r0, [r7, #16]
 800b192:	f001 fe1f 	bl	800cdd4 <xTimerGenericCommand>
 800b196:	4603      	mov	r3, r0
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d102      	bne.n	800b1a2 <osTimerStop+0x5e>
        stat = osOK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	617b      	str	r3, [r7, #20]
 800b1a0:	e002      	b.n	800b1a8 <osTimerStop+0x64>
      } else {
        stat = osError;
 800b1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b1a8:	697b      	ldr	r3, [r7, #20]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
	...

0800b1b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	4a07      	ldr	r2, [pc, #28]	; (800b1e0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b1c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	4a06      	ldr	r2, [pc, #24]	; (800b1e4 <vApplicationGetIdleTaskMemory+0x30>)
 800b1ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b1d2:	601a      	str	r2, [r3, #0]
}
 800b1d4:	bf00      	nop
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	20000274 	.word	0x20000274
 800b1e4:	20000334 	.word	0x20000334

0800b1e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	4a07      	ldr	r2, [pc, #28]	; (800b214 <vApplicationGetTimerTaskMemory+0x2c>)
 800b1f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	4a06      	ldr	r2, [pc, #24]	; (800b218 <vApplicationGetTimerTaskMemory+0x30>)
 800b1fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b206:	601a      	str	r2, [r3, #0]
}
 800b208:	bf00      	nop
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	20001334 	.word	0x20001334
 800b218:	200013f4 	.word	0x200013f4

0800b21c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f103 0208 	add.w	r2, r3, #8
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f04f 32ff 	mov.w	r2, #4294967295
 800b234:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f103 0208 	add.w	r2, r3, #8
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f103 0208 	add.w	r2, r3, #8
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b26a:	bf00      	nop
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b276:	b480      	push	{r7}
 800b278:	b085      	sub	sp, #20
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	689a      	ldr	r2, [r3, #8]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	1c5a      	adds	r2, r3, #1
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	601a      	str	r2, [r3, #0]
}
 800b2b2:	bf00      	nop
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b085      	sub	sp, #20
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d4:	d103      	bne.n	800b2de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	e00c      	b.n	800b2f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	e002      	b.n	800b2ec <vListInsert+0x2e>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	60fb      	str	r3, [r7, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d2f6      	bcs.n	800b2e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	683a      	ldr	r2, [r7, #0]
 800b312:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	601a      	str	r2, [r3, #0]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	6892      	ldr	r2, [r2, #8]
 800b346:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	6852      	ldr	r2, [r2, #4]
 800b350:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d103      	bne.n	800b364 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	689a      	ldr	r2, [r3, #8]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	1e5a      	subs	r2, r3, #1
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10a      	bne.n	800b3ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b3aa:	bf00      	nop
 800b3ac:	e7fe      	b.n	800b3ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b3ae:	f002 f991 	bl	800d6d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ba:	68f9      	ldr	r1, [r7, #12]
 800b3bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3be:	fb01 f303 	mul.w	r3, r1, r3
 800b3c2:	441a      	add	r2, r3
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	68f9      	ldr	r1, [r7, #12]
 800b3e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3e4:	fb01 f303 	mul.w	r3, r1, r3
 800b3e8:	441a      	add	r2, r3
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	22ff      	movs	r2, #255	; 0xff
 800b3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	22ff      	movs	r2, #255	; 0xff
 800b3fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d114      	bne.n	800b42e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d01a      	beq.n	800b442 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3310      	adds	r3, #16
 800b410:	4618      	mov	r0, r3
 800b412:	f001 f95b 	bl	800c6cc <xTaskRemoveFromEventList>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d012      	beq.n	800b442 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b41c:	4b0c      	ldr	r3, [pc, #48]	; (800b450 <xQueueGenericReset+0xcc>)
 800b41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	e009      	b.n	800b442 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3310      	adds	r3, #16
 800b432:	4618      	mov	r0, r3
 800b434:	f7ff fef2 	bl	800b21c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3324      	adds	r3, #36	; 0x24
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff feed 	bl	800b21c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b442:	f002 f977 	bl	800d734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b446:	2301      	movs	r3, #1
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	e000ed04 	.word	0xe000ed04

0800b454 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b454:	b580      	push	{r7, lr}
 800b456:	b08e      	sub	sp, #56	; 0x38
 800b458:	af02      	add	r7, sp, #8
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
 800b460:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10a      	bne.n	800b47e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b47a:	bf00      	nop
 800b47c:	e7fe      	b.n	800b47c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10a      	bne.n	800b49a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b496:	bf00      	nop
 800b498:	e7fe      	b.n	800b498 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d002      	beq.n	800b4a6 <xQueueGenericCreateStatic+0x52>
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <xQueueGenericCreateStatic+0x56>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e000      	b.n	800b4ac <xQueueGenericCreateStatic+0x58>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10a      	bne.n	800b4c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	623b      	str	r3, [r7, #32]
}
 800b4c2:	bf00      	nop
 800b4c4:	e7fe      	b.n	800b4c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d102      	bne.n	800b4d2 <xQueueGenericCreateStatic+0x7e>
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <xQueueGenericCreateStatic+0x82>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e000      	b.n	800b4d8 <xQueueGenericCreateStatic+0x84>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10a      	bne.n	800b4f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	61fb      	str	r3, [r7, #28]
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b4f2:	2350      	movs	r3, #80	; 0x50
 800b4f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2b50      	cmp	r3, #80	; 0x50
 800b4fa:	d00a      	beq.n	800b512 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	61bb      	str	r3, [r7, #24]
}
 800b50e:	bf00      	nop
 800b510:	e7fe      	b.n	800b510 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b512:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00d      	beq.n	800b53a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	2201      	movs	r2, #1
 800b522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b526:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	4613      	mov	r3, r2
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	68b9      	ldr	r1, [r7, #8]
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 f805 	bl	800b544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3730      	adds	r7, #48	; 0x30
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
 800b550:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d103      	bne.n	800b560 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	69ba      	ldr	r2, [r7, #24]
 800b55c:	601a      	str	r2, [r3, #0]
 800b55e:	e002      	b.n	800b566 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b572:	2101      	movs	r1, #1
 800b574:	69b8      	ldr	r0, [r7, #24]
 800b576:	f7ff ff05 	bl	800b384 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	78fa      	ldrb	r2, [r7, #3]
 800b57e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b582:	bf00      	nop
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b08e      	sub	sp, #56	; 0x38
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
 800b598:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b59a:	2300      	movs	r3, #0
 800b59c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10a      	bne.n	800b5be <xQueueGenericSend+0x32>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5ba:	bf00      	nop
 800b5bc:	e7fe      	b.n	800b5bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d103      	bne.n	800b5cc <xQueueGenericSend+0x40>
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <xQueueGenericSend+0x44>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e000      	b.n	800b5d2 <xQueueGenericSend+0x46>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10a      	bne.n	800b5ec <xQueueGenericSend+0x60>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5e8:	bf00      	nop
 800b5ea:	e7fe      	b.n	800b5ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d103      	bne.n	800b5fa <xQueueGenericSend+0x6e>
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d101      	bne.n	800b5fe <xQueueGenericSend+0x72>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e000      	b.n	800b600 <xQueueGenericSend+0x74>
 800b5fe:	2300      	movs	r3, #0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <xQueueGenericSend+0x8e>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	623b      	str	r3, [r7, #32]
}
 800b616:	bf00      	nop
 800b618:	e7fe      	b.n	800b618 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b61a:	f001 fa19 	bl	800ca50 <xTaskGetSchedulerState>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d102      	bne.n	800b62a <xQueueGenericSend+0x9e>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <xQueueGenericSend+0xa2>
 800b62a:	2301      	movs	r3, #1
 800b62c:	e000      	b.n	800b630 <xQueueGenericSend+0xa4>
 800b62e:	2300      	movs	r3, #0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10a      	bne.n	800b64a <xQueueGenericSend+0xbe>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	61fb      	str	r3, [r7, #28]
}
 800b646:	bf00      	nop
 800b648:	e7fe      	b.n	800b648 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b64a:	f002 f843 	bl	800d6d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b656:	429a      	cmp	r2, r3
 800b658:	d302      	bcc.n	800b660 <xQueueGenericSend+0xd4>
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d129      	bne.n	800b6b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b660:	683a      	ldr	r2, [r7, #0]
 800b662:	68b9      	ldr	r1, [r7, #8]
 800b664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b666:	f000 fa0b 	bl	800ba80 <prvCopyDataToQueue>
 800b66a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	2b00      	cmp	r3, #0
 800b672:	d010      	beq.n	800b696 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	3324      	adds	r3, #36	; 0x24
 800b678:	4618      	mov	r0, r3
 800b67a:	f001 f827 	bl	800c6cc <xTaskRemoveFromEventList>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d013      	beq.n	800b6ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b684:	4b3f      	ldr	r3, [pc, #252]	; (800b784 <xQueueGenericSend+0x1f8>)
 800b686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	e00a      	b.n	800b6ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b69c:	4b39      	ldr	r3, [pc, #228]	; (800b784 <xQueueGenericSend+0x1f8>)
 800b69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6ac:	f002 f842 	bl	800d734 <vPortExitCritical>
				return pdPASS;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e063      	b.n	800b77c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d103      	bne.n	800b6c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6ba:	f002 f83b 	bl	800d734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e05c      	b.n	800b77c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d106      	bne.n	800b6d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6c8:	f107 0314 	add.w	r3, r7, #20
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f001 f861 	bl	800c794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6d6:	f002 f82d 	bl	800d734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6da:	f000 fda1 	bl	800c220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6de:	f001 fff9 	bl	800d6d4 <vPortEnterCritical>
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6e8:	b25b      	sxtb	r3, r3
 800b6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ee:	d103      	bne.n	800b6f8 <xQueueGenericSend+0x16c>
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6fe:	b25b      	sxtb	r3, r3
 800b700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b704:	d103      	bne.n	800b70e <xQueueGenericSend+0x182>
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b70e:	f002 f811 	bl	800d734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b712:	1d3a      	adds	r2, r7, #4
 800b714:	f107 0314 	add.w	r3, r7, #20
 800b718:	4611      	mov	r1, r2
 800b71a:	4618      	mov	r0, r3
 800b71c:	f001 f850 	bl	800c7c0 <xTaskCheckForTimeOut>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d124      	bne.n	800b770 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b728:	f000 faa2 	bl	800bc70 <prvIsQueueFull>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d018      	beq.n	800b764 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b734:	3310      	adds	r3, #16
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 ff76 	bl	800c62c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b742:	f000 fa2d 	bl	800bba0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b746:	f000 fd79 	bl	800c23c <xTaskResumeAll>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f47f af7c 	bne.w	800b64a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b752:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <xQueueGenericSend+0x1f8>)
 800b754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	e772      	b.n	800b64a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b766:	f000 fa1b 	bl	800bba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b76a:	f000 fd67 	bl	800c23c <xTaskResumeAll>
 800b76e:	e76c      	b.n	800b64a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b772:	f000 fa15 	bl	800bba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b776:	f000 fd61 	bl	800c23c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b77a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3738      	adds	r7, #56	; 0x38
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	e000ed04 	.word	0xe000ed04

0800b788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b090      	sub	sp, #64	; 0x40
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10a      	bne.n	800b7b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7b2:	bf00      	nop
 800b7b4:	e7fe      	b.n	800b7b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d103      	bne.n	800b7c4 <xQueueGenericSendFromISR+0x3c>
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <xQueueGenericSendFromISR+0x40>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e000      	b.n	800b7ca <xQueueGenericSendFromISR+0x42>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10a      	bne.n	800b7e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7e0:	bf00      	nop
 800b7e2:	e7fe      	b.n	800b7e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d103      	bne.n	800b7f2 <xQueueGenericSendFromISR+0x6a>
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d101      	bne.n	800b7f6 <xQueueGenericSendFromISR+0x6e>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <xQueueGenericSendFromISR+0x70>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10a      	bne.n	800b812 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	623b      	str	r3, [r7, #32]
}
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b812:	f002 f841 	bl	800d898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b816:	f3ef 8211 	mrs	r2, BASEPRI
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	61fa      	str	r2, [r7, #28]
 800b82c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b82e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b830:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d302      	bcc.n	800b844 <xQueueGenericSendFromISR+0xbc>
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	2b02      	cmp	r3, #2
 800b842:	d12f      	bne.n	800b8a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b852:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b85a:	f000 f911 	bl	800ba80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b85e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b866:	d112      	bne.n	800b88e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d016      	beq.n	800b89e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	3324      	adds	r3, #36	; 0x24
 800b874:	4618      	mov	r0, r3
 800b876:	f000 ff29 	bl	800c6cc <xTaskRemoveFromEventList>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00e      	beq.n	800b89e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00b      	beq.n	800b89e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	e007      	b.n	800b89e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b88e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b892:	3301      	adds	r3, #1
 800b894:	b2db      	uxtb	r3, r3
 800b896:	b25a      	sxtb	r2, r3
 800b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b8a2:	e001      	b.n	800b8a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b8b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3740      	adds	r7, #64	; 0x40
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
	...

0800b8c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b08c      	sub	sp, #48	; 0x30
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10a      	bne.n	800b8f0 <xQueueReceive+0x30>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	623b      	str	r3, [r7, #32]
}
 800b8ec:	bf00      	nop
 800b8ee:	e7fe      	b.n	800b8ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d103      	bne.n	800b8fe <xQueueReceive+0x3e>
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <xQueueReceive+0x42>
 800b8fe:	2301      	movs	r3, #1
 800b900:	e000      	b.n	800b904 <xQueueReceive+0x44>
 800b902:	2300      	movs	r3, #0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10a      	bne.n	800b91e <xQueueReceive+0x5e>
	__asm volatile
 800b908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90c:	f383 8811 	msr	BASEPRI, r3
 800b910:	f3bf 8f6f 	isb	sy
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	61fb      	str	r3, [r7, #28]
}
 800b91a:	bf00      	nop
 800b91c:	e7fe      	b.n	800b91c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b91e:	f001 f897 	bl	800ca50 <xTaskGetSchedulerState>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <xQueueReceive+0x6e>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <xQueueReceive+0x72>
 800b92e:	2301      	movs	r3, #1
 800b930:	e000      	b.n	800b934 <xQueueReceive+0x74>
 800b932:	2300      	movs	r3, #0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10a      	bne.n	800b94e <xQueueReceive+0x8e>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	61bb      	str	r3, [r7, #24]
}
 800b94a:	bf00      	nop
 800b94c:	e7fe      	b.n	800b94c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b94e:	f001 fec1 	bl	800d6d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b956:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d01f      	beq.n	800b99e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b95e:	68b9      	ldr	r1, [r7, #8]
 800b960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b962:	f000 f8f7 	bl	800bb54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b968:	1e5a      	subs	r2, r3, #1
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00f      	beq.n	800b996 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	3310      	adds	r3, #16
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 fea6 	bl	800c6cc <xTaskRemoveFromEventList>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d007      	beq.n	800b996 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b986:	4b3d      	ldr	r3, [pc, #244]	; (800ba7c <xQueueReceive+0x1bc>)
 800b988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b996:	f001 fecd 	bl	800d734 <vPortExitCritical>
				return pdPASS;
 800b99a:	2301      	movs	r3, #1
 800b99c:	e069      	b.n	800ba72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d103      	bne.n	800b9ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9a4:	f001 fec6 	bl	800d734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	e062      	b.n	800ba72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9b2:	f107 0310 	add.w	r3, r7, #16
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 feec 	bl	800c794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9c0:	f001 feb8 	bl	800d734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9c4:	f000 fc2c 	bl	800c220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9c8:	f001 fe84 	bl	800d6d4 <vPortEnterCritical>
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9d2:	b25b      	sxtb	r3, r3
 800b9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d8:	d103      	bne.n	800b9e2 <xQueueReceive+0x122>
 800b9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9e8:	b25b      	sxtb	r3, r3
 800b9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ee:	d103      	bne.n	800b9f8 <xQueueReceive+0x138>
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9f8:	f001 fe9c 	bl	800d734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9fc:	1d3a      	adds	r2, r7, #4
 800b9fe:	f107 0310 	add.w	r3, r7, #16
 800ba02:	4611      	mov	r1, r2
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 fedb 	bl	800c7c0 <xTaskCheckForTimeOut>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d123      	bne.n	800ba58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba12:	f000 f917 	bl	800bc44 <prvIsQueueEmpty>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d017      	beq.n	800ba4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1e:	3324      	adds	r3, #36	; 0x24
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	4611      	mov	r1, r2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fe01 	bl	800c62c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba2c:	f000 f8b8 	bl	800bba0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba30:	f000 fc04 	bl	800c23c <xTaskResumeAll>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d189      	bne.n	800b94e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ba3a:	4b10      	ldr	r3, [pc, #64]	; (800ba7c <xQueueReceive+0x1bc>)
 800ba3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba40:	601a      	str	r2, [r3, #0]
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	e780      	b.n	800b94e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba4e:	f000 f8a7 	bl	800bba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba52:	f000 fbf3 	bl	800c23c <xTaskResumeAll>
 800ba56:	e77a      	b.n	800b94e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba5a:	f000 f8a1 	bl	800bba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba5e:	f000 fbed 	bl	800c23c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba64:	f000 f8ee 	bl	800bc44 <prvIsQueueEmpty>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f43f af6f 	beq.w	800b94e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3730      	adds	r7, #48	; 0x30
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	e000ed04 	.word	0xe000ed04

0800ba80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10d      	bne.n	800baba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d14d      	bne.n	800bb42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 ffee 	bl	800ca8c <xTaskPriorityDisinherit>
 800bab0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	609a      	str	r2, [r3, #8]
 800bab8:	e043      	b.n	800bb42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d119      	bne.n	800baf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6858      	ldr	r0, [r3, #4]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac8:	461a      	mov	r2, r3
 800baca:	68b9      	ldr	r1, [r7, #8]
 800bacc:	f002 fa31 	bl	800df32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad8:	441a      	add	r2, r3
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	685a      	ldr	r2, [r3, #4]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d32b      	bcc.n	800bb42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	605a      	str	r2, [r3, #4]
 800baf2:	e026      	b.n	800bb42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	68d8      	ldr	r0, [r3, #12]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafc:	461a      	mov	r2, r3
 800bafe:	68b9      	ldr	r1, [r7, #8]
 800bb00:	f002 fa17 	bl	800df32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	68da      	ldr	r2, [r3, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0c:	425b      	negs	r3, r3
 800bb0e:	441a      	add	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	68da      	ldr	r2, [r3, #12]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d207      	bcs.n	800bb30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	689a      	ldr	r2, [r3, #8]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb28:	425b      	negs	r3, r3
 800bb2a:	441a      	add	r2, r3
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d105      	bne.n	800bb42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb4a:	697b      	ldr	r3, [r7, #20]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d018      	beq.n	800bb98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	68da      	ldr	r2, [r3, #12]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6e:	441a      	add	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68da      	ldr	r2, [r3, #12]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d303      	bcc.n	800bb88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	68d9      	ldr	r1, [r3, #12]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb90:	461a      	mov	r2, r3
 800bb92:	6838      	ldr	r0, [r7, #0]
 800bb94:	f002 f9cd 	bl	800df32 <memcpy>
	}
}
 800bb98:	bf00      	nop
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bba8:	f001 fd94 	bl	800d6d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbb4:	e011      	b.n	800bbda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d012      	beq.n	800bbe4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	3324      	adds	r3, #36	; 0x24
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 fd82 	bl	800c6cc <xTaskRemoveFromEventList>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbce:	f000 fe59 	bl	800c884 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	dce9      	bgt.n	800bbb6 <prvUnlockQueue+0x16>
 800bbe2:	e000      	b.n	800bbe6 <prvUnlockQueue+0x46>
					break;
 800bbe4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	22ff      	movs	r2, #255	; 0xff
 800bbea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bbee:	f001 fda1 	bl	800d734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bbf2:	f001 fd6f 	bl	800d6d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbfe:	e011      	b.n	800bc24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d012      	beq.n	800bc2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3310      	adds	r3, #16
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 fd5d 	bl	800c6cc <xTaskRemoveFromEventList>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc18:	f000 fe34 	bl	800c884 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	dce9      	bgt.n	800bc00 <prvUnlockQueue+0x60>
 800bc2c:	e000      	b.n	800bc30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	22ff      	movs	r2, #255	; 0xff
 800bc34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bc38:	f001 fd7c 	bl	800d734 <vPortExitCritical>
}
 800bc3c:	bf00      	nop
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc4c:	f001 fd42 	bl	800d6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d102      	bne.n	800bc5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	e001      	b.n	800bc62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc62:	f001 fd67 	bl	800d734 <vPortExitCritical>

	return xReturn;
 800bc66:	68fb      	ldr	r3, [r7, #12]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc78:	f001 fd2c 	bl	800d6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d102      	bne.n	800bc8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	60fb      	str	r3, [r7, #12]
 800bc8c:	e001      	b.n	800bc92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc92:	f001 fd4f 	bl	800d734 <vPortExitCritical>

	return xReturn;
 800bc96:	68fb      	ldr	r3, [r7, #12]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60fb      	str	r3, [r7, #12]
 800bcae:	e014      	b.n	800bcda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bcb0:	4a0f      	ldr	r2, [pc, #60]	; (800bcf0 <vQueueAddToRegistry+0x50>)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10b      	bne.n	800bcd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bcbc:	490c      	ldr	r1, [pc, #48]	; (800bcf0 <vQueueAddToRegistry+0x50>)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bcc6:	4a0a      	ldr	r2, [pc, #40]	; (800bcf0 <vQueueAddToRegistry+0x50>)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	4413      	add	r3, r2
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bcd2:	e006      	b.n	800bce2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	60fb      	str	r3, [r7, #12]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2b07      	cmp	r3, #7
 800bcde:	d9e7      	bls.n	800bcb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bce0:	bf00      	nop
 800bce2:	bf00      	nop
 800bce4:	3714      	adds	r7, #20
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop
 800bcf0:	20006398 	.word	0x20006398

0800bcf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd04:	f001 fce6 	bl	800d6d4 <vPortEnterCritical>
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd0e:	b25b      	sxtb	r3, r3
 800bd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd14:	d103      	bne.n	800bd1e <vQueueWaitForMessageRestricted+0x2a>
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd24:	b25b      	sxtb	r3, r3
 800bd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2a:	d103      	bne.n	800bd34 <vQueueWaitForMessageRestricted+0x40>
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd34:	f001 fcfe 	bl	800d734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d106      	bne.n	800bd4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	3324      	adds	r3, #36	; 0x24
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	68b9      	ldr	r1, [r7, #8]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 fc93 	bl	800c674 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd4e:	6978      	ldr	r0, [r7, #20]
 800bd50:	f7ff ff26 	bl	800bba0 <prvUnlockQueue>
	}
 800bd54:	bf00      	nop
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08e      	sub	sp, #56	; 0x38
 800bd60:	af04      	add	r7, sp, #16
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10a      	bne.n	800bd86 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd74:	f383 8811 	msr	BASEPRI, r3
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	623b      	str	r3, [r7, #32]
}
 800bd82:	bf00      	nop
 800bd84:	e7fe      	b.n	800bd84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10a      	bne.n	800bda2 <xTaskCreateStatic+0x46>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	61fb      	str	r3, [r7, #28]
}
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bda2:	23c0      	movs	r3, #192	; 0xc0
 800bda4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	2bc0      	cmp	r3, #192	; 0xc0
 800bdaa:	d00a      	beq.n	800bdc2 <xTaskCreateStatic+0x66>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	61bb      	str	r3, [r7, #24]
}
 800bdbe:	bf00      	nop
 800bdc0:	e7fe      	b.n	800bdc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bdc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d01e      	beq.n	800be08 <xTaskCreateStatic+0xac>
 800bdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d01b      	beq.n	800be08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	2202      	movs	r2, #2
 800bdde:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bde2:	2300      	movs	r3, #0
 800bde4:	9303      	str	r3, [sp, #12]
 800bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde8:	9302      	str	r3, [sp, #8]
 800bdea:	f107 0314 	add.w	r3, r7, #20
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	68b9      	ldr	r1, [r7, #8]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 f850 	bl	800bea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be02:	f000 f8f7 	bl	800bff4 <prvAddNewTaskToReadyList>
 800be06:	e001      	b.n	800be0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800be08:	2300      	movs	r3, #0
 800be0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be0c:	697b      	ldr	r3, [r7, #20]
	}
 800be0e:	4618      	mov	r0, r3
 800be10:	3728      	adds	r7, #40	; 0x28
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be16:	b580      	push	{r7, lr}
 800be18:	b08c      	sub	sp, #48	; 0x30
 800be1a:	af04      	add	r7, sp, #16
 800be1c:	60f8      	str	r0, [r7, #12]
 800be1e:	60b9      	str	r1, [r7, #8]
 800be20:	603b      	str	r3, [r7, #0]
 800be22:	4613      	mov	r3, r2
 800be24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be26:	88fb      	ldrh	r3, [r7, #6]
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f001 fd74 	bl	800d918 <pvPortMalloc>
 800be30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00e      	beq.n	800be56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be38:	20c0      	movs	r0, #192	; 0xc0
 800be3a:	f001 fd6d 	bl	800d918 <pvPortMalloc>
 800be3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d003      	beq.n	800be4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	697a      	ldr	r2, [r7, #20]
 800be4a:	631a      	str	r2, [r3, #48]	; 0x30
 800be4c:	e005      	b.n	800be5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be4e:	6978      	ldr	r0, [r7, #20]
 800be50:	f001 fe2e 	bl	800dab0 <vPortFree>
 800be54:	e001      	b.n	800be5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be56:	2300      	movs	r3, #0
 800be58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d017      	beq.n	800be90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	2200      	movs	r2, #0
 800be64:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be68:	88fa      	ldrh	r2, [r7, #6]
 800be6a:	2300      	movs	r3, #0
 800be6c:	9303      	str	r3, [sp, #12]
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	9302      	str	r3, [sp, #8]
 800be72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	68b9      	ldr	r1, [r7, #8]
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f000 f80e 	bl	800bea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be84:	69f8      	ldr	r0, [r7, #28]
 800be86:	f000 f8b5 	bl	800bff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be8a:	2301      	movs	r3, #1
 800be8c:	61bb      	str	r3, [r7, #24]
 800be8e:	e002      	b.n	800be96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be90:	f04f 33ff 	mov.w	r3, #4294967295
 800be94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be96:	69bb      	ldr	r3, [r7, #24]
	}
 800be98:	4618      	mov	r0, r3
 800be9a:	3720      	adds	r7, #32
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
 800beac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	461a      	mov	r2, r3
 800beb8:	21a5      	movs	r1, #165	; 0xa5
 800beba:	f002 f848 	bl	800df4e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bec8:	3b01      	subs	r3, #1
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	f023 0307 	bic.w	r3, r3, #7
 800bed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	f003 0307 	and.w	r3, r3, #7
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00a      	beq.n	800bef8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	617b      	str	r3, [r7, #20]
}
 800bef4:	bf00      	nop
 800bef6:	e7fe      	b.n	800bef6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d01f      	beq.n	800bf3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800befe:	2300      	movs	r3, #0
 800bf00:	61fb      	str	r3, [r7, #28]
 800bf02:	e012      	b.n	800bf2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	4413      	add	r3, r2
 800bf0a:	7819      	ldrb	r1, [r3, #0]
 800bf0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	4413      	add	r3, r2
 800bf12:	3334      	adds	r3, #52	; 0x34
 800bf14:	460a      	mov	r2, r1
 800bf16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	3301      	adds	r3, #1
 800bf28:	61fb      	str	r3, [r7, #28]
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	2b0f      	cmp	r3, #15
 800bf2e:	d9e9      	bls.n	800bf04 <prvInitialiseNewTask+0x64>
 800bf30:	e000      	b.n	800bf34 <prvInitialiseNewTask+0x94>
			{
				break;
 800bf32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf3c:	e003      	b.n	800bf46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf48:	2b37      	cmp	r3, #55	; 0x37
 800bf4a:	d901      	bls.n	800bf50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf4c:	2337      	movs	r3, #55	; 0x37
 800bf4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5e:	2200      	movs	r2, #0
 800bf60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	3304      	adds	r3, #4
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff f978 	bl	800b25c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	3318      	adds	r3, #24
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7ff f973 	bl	800b25c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8e:	2200      	movs	r2, #0
 800bf90:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	2200      	movs	r2, #0
 800bf96:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	3358      	adds	r3, #88	; 0x58
 800bfa6:	2260      	movs	r2, #96	; 0x60
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f001 ffcf 	bl	800df4e <memset>
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	4a0d      	ldr	r2, [pc, #52]	; (800bfe8 <prvInitialiseNewTask+0x148>)
 800bfb4:	65da      	str	r2, [r3, #92]	; 0x5c
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	4a0c      	ldr	r2, [pc, #48]	; (800bfec <prvInitialiseNewTask+0x14c>)
 800bfba:	661a      	str	r2, [r3, #96]	; 0x60
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	4a0c      	ldr	r2, [pc, #48]	; (800bff0 <prvInitialiseNewTask+0x150>)
 800bfc0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	68f9      	ldr	r1, [r7, #12]
 800bfc6:	69b8      	ldr	r0, [r7, #24]
 800bfc8:	f001 fa54 	bl	800d474 <pxPortInitialiseStack>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfde:	bf00      	nop
 800bfe0:	3720      	adds	r7, #32
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	080142c8 	.word	0x080142c8
 800bfec:	080142e8 	.word	0x080142e8
 800bff0:	080142a8 	.word	0x080142a8

0800bff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bffc:	f001 fb6a 	bl	800d6d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c000:	4b2d      	ldr	r3, [pc, #180]	; (800c0b8 <prvAddNewTaskToReadyList+0xc4>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3301      	adds	r3, #1
 800c006:	4a2c      	ldr	r2, [pc, #176]	; (800c0b8 <prvAddNewTaskToReadyList+0xc4>)
 800c008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c00a:	4b2c      	ldr	r3, [pc, #176]	; (800c0bc <prvAddNewTaskToReadyList+0xc8>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d109      	bne.n	800c026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c012:	4a2a      	ldr	r2, [pc, #168]	; (800c0bc <prvAddNewTaskToReadyList+0xc8>)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c018:	4b27      	ldr	r3, [pc, #156]	; (800c0b8 <prvAddNewTaskToReadyList+0xc4>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d110      	bne.n	800c042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c020:	f000 fc54 	bl	800c8cc <prvInitialiseTaskLists>
 800c024:	e00d      	b.n	800c042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c026:	4b26      	ldr	r3, [pc, #152]	; (800c0c0 <prvAddNewTaskToReadyList+0xcc>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d109      	bne.n	800c042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c02e:	4b23      	ldr	r3, [pc, #140]	; (800c0bc <prvAddNewTaskToReadyList+0xc8>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	429a      	cmp	r2, r3
 800c03a:	d802      	bhi.n	800c042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c03c:	4a1f      	ldr	r2, [pc, #124]	; (800c0bc <prvAddNewTaskToReadyList+0xc8>)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c042:	4b20      	ldr	r3, [pc, #128]	; (800c0c4 <prvAddNewTaskToReadyList+0xd0>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3301      	adds	r3, #1
 800c048:	4a1e      	ldr	r2, [pc, #120]	; (800c0c4 <prvAddNewTaskToReadyList+0xd0>)
 800c04a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c04c:	4b1d      	ldr	r3, [pc, #116]	; (800c0c4 <prvAddNewTaskToReadyList+0xd0>)
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c058:	4b1b      	ldr	r3, [pc, #108]	; (800c0c8 <prvAddNewTaskToReadyList+0xd4>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d903      	bls.n	800c068 <prvAddNewTaskToReadyList+0x74>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c064:	4a18      	ldr	r2, [pc, #96]	; (800c0c8 <prvAddNewTaskToReadyList+0xd4>)
 800c066:	6013      	str	r3, [r2, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	4a15      	ldr	r2, [pc, #84]	; (800c0cc <prvAddNewTaskToReadyList+0xd8>)
 800c076:	441a      	add	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3304      	adds	r3, #4
 800c07c:	4619      	mov	r1, r3
 800c07e:	4610      	mov	r0, r2
 800c080:	f7ff f8f9 	bl	800b276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c084:	f001 fb56 	bl	800d734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c088:	4b0d      	ldr	r3, [pc, #52]	; (800c0c0 <prvAddNewTaskToReadyList+0xcc>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00e      	beq.n	800c0ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c090:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <prvAddNewTaskToReadyList+0xc8>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d207      	bcs.n	800c0ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c09e:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <prvAddNewTaskToReadyList+0xdc>)
 800c0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0ae:	bf00      	nop
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	200038c8 	.word	0x200038c8
 800c0bc:	200033f4 	.word	0x200033f4
 800c0c0:	200038d4 	.word	0x200038d4
 800c0c4:	200038e4 	.word	0x200038e4
 800c0c8:	200038d0 	.word	0x200038d0
 800c0cc:	200033f8 	.word	0x200033f8
 800c0d0:	e000ed04 	.word	0xe000ed04

0800c0d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d017      	beq.n	800c116 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c0e6:	4b13      	ldr	r3, [pc, #76]	; (800c134 <vTaskDelay+0x60>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00a      	beq.n	800c104 <vTaskDelay+0x30>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	60bb      	str	r3, [r7, #8]
}
 800c100:	bf00      	nop
 800c102:	e7fe      	b.n	800c102 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c104:	f000 f88c 	bl	800c220 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c108:	2100      	movs	r1, #0
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fd2c 	bl	800cb68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c110:	f000 f894 	bl	800c23c <xTaskResumeAll>
 800c114:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d107      	bne.n	800c12c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c11c:	4b06      	ldr	r3, [pc, #24]	; (800c138 <vTaskDelay+0x64>)
 800c11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	f3bf 8f4f 	dsb	sy
 800c128:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c12c:	bf00      	nop
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	200038f0 	.word	0x200038f0
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b08a      	sub	sp, #40	; 0x28
 800c140:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c142:	2300      	movs	r3, #0
 800c144:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c146:	2300      	movs	r3, #0
 800c148:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c14a:	463a      	mov	r2, r7
 800c14c:	1d39      	adds	r1, r7, #4
 800c14e:	f107 0308 	add.w	r3, r7, #8
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff f82e 	bl	800b1b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	9202      	str	r2, [sp, #8]
 800c160:	9301      	str	r3, [sp, #4]
 800c162:	2300      	movs	r3, #0
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	2300      	movs	r3, #0
 800c168:	460a      	mov	r2, r1
 800c16a:	4925      	ldr	r1, [pc, #148]	; (800c200 <vTaskStartScheduler+0xc4>)
 800c16c:	4825      	ldr	r0, [pc, #148]	; (800c204 <vTaskStartScheduler+0xc8>)
 800c16e:	f7ff fdf5 	bl	800bd5c <xTaskCreateStatic>
 800c172:	4603      	mov	r3, r0
 800c174:	4a24      	ldr	r2, [pc, #144]	; (800c208 <vTaskStartScheduler+0xcc>)
 800c176:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c178:	4b23      	ldr	r3, [pc, #140]	; (800c208 <vTaskStartScheduler+0xcc>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c180:	2301      	movs	r3, #1
 800c182:	617b      	str	r3, [r7, #20]
 800c184:	e001      	b.n	800c18a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c186:	2300      	movs	r3, #0
 800c188:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d102      	bne.n	800c196 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c190:	f000 fd3e 	bl	800cc10 <xTimerCreateTimerTask>
 800c194:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d11d      	bne.n	800c1d8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	613b      	str	r3, [r7, #16]
}
 800c1ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c1b0:	4b16      	ldr	r3, [pc, #88]	; (800c20c <vTaskStartScheduler+0xd0>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3358      	adds	r3, #88	; 0x58
 800c1b6:	4a16      	ldr	r2, [pc, #88]	; (800c210 <vTaskStartScheduler+0xd4>)
 800c1b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c1ba:	4b16      	ldr	r3, [pc, #88]	; (800c214 <vTaskStartScheduler+0xd8>)
 800c1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c1c2:	4b15      	ldr	r3, [pc, #84]	; (800c218 <vTaskStartScheduler+0xdc>)
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c1c8:	4b14      	ldr	r3, [pc, #80]	; (800c21c <vTaskStartScheduler+0xe0>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c1ce:	f7f4 ff0d 	bl	8000fec <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c1d2:	f001 f9dd 	bl	800d590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c1d6:	e00e      	b.n	800c1f6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1de:	d10a      	bne.n	800c1f6 <vTaskStartScheduler+0xba>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	60fb      	str	r3, [r7, #12]
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <vTaskStartScheduler+0xb8>
}
 800c1f6:	bf00      	nop
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	08014214 	.word	0x08014214
 800c204:	0800c89d 	.word	0x0800c89d
 800c208:	200038ec 	.word	0x200038ec
 800c20c:	200033f4 	.word	0x200033f4
 800c210:	20000048 	.word	0x20000048
 800c214:	200038e8 	.word	0x200038e8
 800c218:	200038d4 	.word	0x200038d4
 800c21c:	200038cc 	.word	0x200038cc

0800c220 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c220:	b480      	push	{r7}
 800c222:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c224:	4b04      	ldr	r3, [pc, #16]	; (800c238 <vTaskSuspendAll+0x18>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3301      	adds	r3, #1
 800c22a:	4a03      	ldr	r2, [pc, #12]	; (800c238 <vTaskSuspendAll+0x18>)
 800c22c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c22e:	bf00      	nop
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr
 800c238:	200038f0 	.word	0x200038f0

0800c23c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c242:	2300      	movs	r3, #0
 800c244:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c246:	2300      	movs	r3, #0
 800c248:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c24a:	4b42      	ldr	r3, [pc, #264]	; (800c354 <xTaskResumeAll+0x118>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10a      	bne.n	800c268 <xTaskResumeAll+0x2c>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	603b      	str	r3, [r7, #0]
}
 800c264:	bf00      	nop
 800c266:	e7fe      	b.n	800c266 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c268:	f001 fa34 	bl	800d6d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c26c:	4b39      	ldr	r3, [pc, #228]	; (800c354 <xTaskResumeAll+0x118>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3b01      	subs	r3, #1
 800c272:	4a38      	ldr	r2, [pc, #224]	; (800c354 <xTaskResumeAll+0x118>)
 800c274:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c276:	4b37      	ldr	r3, [pc, #220]	; (800c354 <xTaskResumeAll+0x118>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d162      	bne.n	800c344 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c27e:	4b36      	ldr	r3, [pc, #216]	; (800c358 <xTaskResumeAll+0x11c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d05e      	beq.n	800c344 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c286:	e02f      	b.n	800c2e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c288:	4b34      	ldr	r3, [pc, #208]	; (800c35c <xTaskResumeAll+0x120>)
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	3318      	adds	r3, #24
 800c294:	4618      	mov	r0, r3
 800c296:	f7ff f84b 	bl	800b330 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	3304      	adds	r3, #4
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff f846 	bl	800b330 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a8:	4b2d      	ldr	r3, [pc, #180]	; (800c360 <xTaskResumeAll+0x124>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d903      	bls.n	800c2b8 <xTaskResumeAll+0x7c>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b4:	4a2a      	ldr	r2, [pc, #168]	; (800c360 <xTaskResumeAll+0x124>)
 800c2b6:	6013      	str	r3, [r2, #0]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2bc:	4613      	mov	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4a27      	ldr	r2, [pc, #156]	; (800c364 <xTaskResumeAll+0x128>)
 800c2c6:	441a      	add	r2, r3
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	4610      	mov	r0, r2
 800c2d0:	f7fe ffd1 	bl	800b276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d8:	4b23      	ldr	r3, [pc, #140]	; (800c368 <xTaskResumeAll+0x12c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d302      	bcc.n	800c2e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c2e2:	4b22      	ldr	r3, [pc, #136]	; (800c36c <xTaskResumeAll+0x130>)
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2e8:	4b1c      	ldr	r3, [pc, #112]	; (800c35c <xTaskResumeAll+0x120>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1cb      	bne.n	800c288 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2f6:	f000 fb8b 	bl	800ca10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2fa:	4b1d      	ldr	r3, [pc, #116]	; (800c370 <xTaskResumeAll+0x134>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d010      	beq.n	800c328 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c306:	f000 f847 	bl	800c398 <xTaskIncrementTick>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c310:	4b16      	ldr	r3, [pc, #88]	; (800c36c <xTaskResumeAll+0x130>)
 800c312:	2201      	movs	r2, #1
 800c314:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3b01      	subs	r3, #1
 800c31a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1f1      	bne.n	800c306 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c322:	4b13      	ldr	r3, [pc, #76]	; (800c370 <xTaskResumeAll+0x134>)
 800c324:	2200      	movs	r2, #0
 800c326:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c328:	4b10      	ldr	r3, [pc, #64]	; (800c36c <xTaskResumeAll+0x130>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d009      	beq.n	800c344 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c330:	2301      	movs	r3, #1
 800c332:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c334:	4b0f      	ldr	r3, [pc, #60]	; (800c374 <xTaskResumeAll+0x138>)
 800c336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c33a:	601a      	str	r2, [r3, #0]
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c344:	f001 f9f6 	bl	800d734 <vPortExitCritical>

	return xAlreadyYielded;
 800c348:	68bb      	ldr	r3, [r7, #8]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	200038f0 	.word	0x200038f0
 800c358:	200038c8 	.word	0x200038c8
 800c35c:	20003888 	.word	0x20003888
 800c360:	200038d0 	.word	0x200038d0
 800c364:	200033f8 	.word	0x200033f8
 800c368:	200033f4 	.word	0x200033f4
 800c36c:	200038dc 	.word	0x200038dc
 800c370:	200038d8 	.word	0x200038d8
 800c374:	e000ed04 	.word	0xe000ed04

0800c378 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <xTaskGetTickCount+0x1c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c384:	687b      	ldr	r3, [r7, #4]
}
 800c386:	4618      	mov	r0, r3
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	200038cc 	.word	0x200038cc

0800c398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b086      	sub	sp, #24
 800c39c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3a2:	4b4f      	ldr	r3, [pc, #316]	; (800c4e0 <xTaskIncrementTick+0x148>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f040 808f 	bne.w	800c4ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3ac:	4b4d      	ldr	r3, [pc, #308]	; (800c4e4 <xTaskIncrementTick+0x14c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c3b4:	4a4b      	ldr	r2, [pc, #300]	; (800c4e4 <xTaskIncrementTick+0x14c>)
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d120      	bne.n	800c402 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c3c0:	4b49      	ldr	r3, [pc, #292]	; (800c4e8 <xTaskIncrementTick+0x150>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00a      	beq.n	800c3e0 <xTaskIncrementTick+0x48>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	603b      	str	r3, [r7, #0]
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <xTaskIncrementTick+0x46>
 800c3e0:	4b41      	ldr	r3, [pc, #260]	; (800c4e8 <xTaskIncrementTick+0x150>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	60fb      	str	r3, [r7, #12]
 800c3e6:	4b41      	ldr	r3, [pc, #260]	; (800c4ec <xTaskIncrementTick+0x154>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a3f      	ldr	r2, [pc, #252]	; (800c4e8 <xTaskIncrementTick+0x150>)
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	4a3f      	ldr	r2, [pc, #252]	; (800c4ec <xTaskIncrementTick+0x154>)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6013      	str	r3, [r2, #0]
 800c3f4:	4b3e      	ldr	r3, [pc, #248]	; (800c4f0 <xTaskIncrementTick+0x158>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	4a3d      	ldr	r2, [pc, #244]	; (800c4f0 <xTaskIncrementTick+0x158>)
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	f000 fb07 	bl	800ca10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c402:	4b3c      	ldr	r3, [pc, #240]	; (800c4f4 <xTaskIncrementTick+0x15c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	693a      	ldr	r2, [r7, #16]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d349      	bcc.n	800c4a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c40c:	4b36      	ldr	r3, [pc, #216]	; (800c4e8 <xTaskIncrementTick+0x150>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d104      	bne.n	800c420 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c416:	4b37      	ldr	r3, [pc, #220]	; (800c4f4 <xTaskIncrementTick+0x15c>)
 800c418:	f04f 32ff 	mov.w	r2, #4294967295
 800c41c:	601a      	str	r2, [r3, #0]
					break;
 800c41e:	e03f      	b.n	800c4a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c420:	4b31      	ldr	r3, [pc, #196]	; (800c4e8 <xTaskIncrementTick+0x150>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c430:	693a      	ldr	r2, [r7, #16]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	429a      	cmp	r2, r3
 800c436:	d203      	bcs.n	800c440 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c438:	4a2e      	ldr	r2, [pc, #184]	; (800c4f4 <xTaskIncrementTick+0x15c>)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c43e:	e02f      	b.n	800c4a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	3304      	adds	r3, #4
 800c444:	4618      	mov	r0, r3
 800c446:	f7fe ff73 	bl	800b330 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d004      	beq.n	800c45c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	3318      	adds	r3, #24
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe ff6a 	bl	800b330 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c460:	4b25      	ldr	r3, [pc, #148]	; (800c4f8 <xTaskIncrementTick+0x160>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	429a      	cmp	r2, r3
 800c466:	d903      	bls.n	800c470 <xTaskIncrementTick+0xd8>
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46c:	4a22      	ldr	r2, [pc, #136]	; (800c4f8 <xTaskIncrementTick+0x160>)
 800c46e:	6013      	str	r3, [r2, #0]
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4a1f      	ldr	r2, [pc, #124]	; (800c4fc <xTaskIncrementTick+0x164>)
 800c47e:	441a      	add	r2, r3
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	3304      	adds	r3, #4
 800c484:	4619      	mov	r1, r3
 800c486:	4610      	mov	r0, r2
 800c488:	f7fe fef5 	bl	800b276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c490:	4b1b      	ldr	r3, [pc, #108]	; (800c500 <xTaskIncrementTick+0x168>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c496:	429a      	cmp	r2, r3
 800c498:	d3b8      	bcc.n	800c40c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c49a:	2301      	movs	r3, #1
 800c49c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c49e:	e7b5      	b.n	800c40c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c4a0:	4b17      	ldr	r3, [pc, #92]	; (800c500 <xTaskIncrementTick+0x168>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a6:	4915      	ldr	r1, [pc, #84]	; (800c4fc <xTaskIncrementTick+0x164>)
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	440b      	add	r3, r1
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d901      	bls.n	800c4bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c4bc:	4b11      	ldr	r3, [pc, #68]	; (800c504 <xTaskIncrementTick+0x16c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d007      	beq.n	800c4d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	617b      	str	r3, [r7, #20]
 800c4c8:	e004      	b.n	800c4d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c4ca:	4b0f      	ldr	r3, [pc, #60]	; (800c508 <xTaskIncrementTick+0x170>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	4a0d      	ldr	r2, [pc, #52]	; (800c508 <xTaskIncrementTick+0x170>)
 800c4d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c4d4:	697b      	ldr	r3, [r7, #20]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3718      	adds	r7, #24
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	200038f0 	.word	0x200038f0
 800c4e4:	200038cc 	.word	0x200038cc
 800c4e8:	20003880 	.word	0x20003880
 800c4ec:	20003884 	.word	0x20003884
 800c4f0:	200038e0 	.word	0x200038e0
 800c4f4:	200038e8 	.word	0x200038e8
 800c4f8:	200038d0 	.word	0x200038d0
 800c4fc:	200033f8 	.word	0x200033f8
 800c500:	200033f4 	.word	0x200033f4
 800c504:	200038dc 	.word	0x200038dc
 800c508:	200038d8 	.word	0x200038d8

0800c50c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c512:	4b3e      	ldr	r3, [pc, #248]	; (800c60c <vTaskSwitchContext+0x100>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d003      	beq.n	800c522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c51a:	4b3d      	ldr	r3, [pc, #244]	; (800c610 <vTaskSwitchContext+0x104>)
 800c51c:	2201      	movs	r2, #1
 800c51e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c520:	e070      	b.n	800c604 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800c522:	4b3b      	ldr	r3, [pc, #236]	; (800c610 <vTaskSwitchContext+0x104>)
 800c524:	2200      	movs	r2, #0
 800c526:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c528:	f7f4 fd67 	bl	8000ffa <getRunTimeCounterValue>
 800c52c:	4603      	mov	r3, r0
 800c52e:	4a39      	ldr	r2, [pc, #228]	; (800c614 <vTaskSwitchContext+0x108>)
 800c530:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c532:	4b38      	ldr	r3, [pc, #224]	; (800c614 <vTaskSwitchContext+0x108>)
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	4b38      	ldr	r3, [pc, #224]	; (800c618 <vTaskSwitchContext+0x10c>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d909      	bls.n	800c552 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c53e:	4b37      	ldr	r3, [pc, #220]	; (800c61c <vTaskSwitchContext+0x110>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c544:	4a33      	ldr	r2, [pc, #204]	; (800c614 <vTaskSwitchContext+0x108>)
 800c546:	6810      	ldr	r0, [r2, #0]
 800c548:	4a33      	ldr	r2, [pc, #204]	; (800c618 <vTaskSwitchContext+0x10c>)
 800c54a:	6812      	ldr	r2, [r2, #0]
 800c54c:	1a82      	subs	r2, r0, r2
 800c54e:	440a      	add	r2, r1
 800c550:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c552:	4b30      	ldr	r3, [pc, #192]	; (800c614 <vTaskSwitchContext+0x108>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a30      	ldr	r2, [pc, #192]	; (800c618 <vTaskSwitchContext+0x10c>)
 800c558:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c55a:	4b30      	ldr	r3, [pc, #192]	; (800c61c <vTaskSwitchContext+0x110>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	4b2e      	ldr	r3, [pc, #184]	; (800c61c <vTaskSwitchContext+0x110>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c566:	429a      	cmp	r2, r3
 800c568:	d808      	bhi.n	800c57c <vTaskSwitchContext+0x70>
 800c56a:	4b2c      	ldr	r3, [pc, #176]	; (800c61c <vTaskSwitchContext+0x110>)
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	4b2b      	ldr	r3, [pc, #172]	; (800c61c <vTaskSwitchContext+0x110>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3334      	adds	r3, #52	; 0x34
 800c574:	4619      	mov	r1, r3
 800c576:	4610      	mov	r0, r2
 800c578:	f7f4 fd47 	bl	800100a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c57c:	4b28      	ldr	r3, [pc, #160]	; (800c620 <vTaskSwitchContext+0x114>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	60fb      	str	r3, [r7, #12]
 800c582:	e010      	b.n	800c5a6 <vTaskSwitchContext+0x9a>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10a      	bne.n	800c5a0 <vTaskSwitchContext+0x94>
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	607b      	str	r3, [r7, #4]
}
 800c59c:	bf00      	nop
 800c59e:	e7fe      	b.n	800c59e <vTaskSwitchContext+0x92>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	60fb      	str	r3, [r7, #12]
 800c5a6:	491f      	ldr	r1, [pc, #124]	; (800c624 <vTaskSwitchContext+0x118>)
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	440b      	add	r3, r1
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d0e4      	beq.n	800c584 <vTaskSwitchContext+0x78>
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4a17      	ldr	r2, [pc, #92]	; (800c624 <vTaskSwitchContext+0x118>)
 800c5c6:	4413      	add	r3, r2
 800c5c8:	60bb      	str	r3, [r7, #8]
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	605a      	str	r2, [r3, #4]
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	685a      	ldr	r2, [r3, #4]
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	3308      	adds	r3, #8
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d104      	bne.n	800c5ea <vTaskSwitchContext+0xde>
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	605a      	str	r2, [r3, #4]
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	4a0a      	ldr	r2, [pc, #40]	; (800c61c <vTaskSwitchContext+0x110>)
 800c5f2:	6013      	str	r3, [r2, #0]
 800c5f4:	4a0a      	ldr	r2, [pc, #40]	; (800c620 <vTaskSwitchContext+0x114>)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c5fa:	4b08      	ldr	r3, [pc, #32]	; (800c61c <vTaskSwitchContext+0x110>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	3358      	adds	r3, #88	; 0x58
 800c600:	4a09      	ldr	r2, [pc, #36]	; (800c628 <vTaskSwitchContext+0x11c>)
 800c602:	6013      	str	r3, [r2, #0]
}
 800c604:	bf00      	nop
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	200038f0 	.word	0x200038f0
 800c610:	200038dc 	.word	0x200038dc
 800c614:	200038f8 	.word	0x200038f8
 800c618:	200038f4 	.word	0x200038f4
 800c61c:	200033f4 	.word	0x200033f4
 800c620:	200038d0 	.word	0x200038d0
 800c624:	200033f8 	.word	0x200033f8
 800c628:	20000048 	.word	0x20000048

0800c62c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10a      	bne.n	800c652 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	60fb      	str	r3, [r7, #12]
}
 800c64e:	bf00      	nop
 800c650:	e7fe      	b.n	800c650 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c652:	4b07      	ldr	r3, [pc, #28]	; (800c670 <vTaskPlaceOnEventList+0x44>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	3318      	adds	r3, #24
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7fe fe2f 	bl	800b2be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c660:	2101      	movs	r1, #1
 800c662:	6838      	ldr	r0, [r7, #0]
 800c664:	f000 fa80 	bl	800cb68 <prvAddCurrentTaskToDelayedList>
}
 800c668:	bf00      	nop
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	200033f4 	.word	0x200033f4

0800c674 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10a      	bne.n	800c69c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68a:	f383 8811 	msr	BASEPRI, r3
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	f3bf 8f4f 	dsb	sy
 800c696:	617b      	str	r3, [r7, #20]
}
 800c698:	bf00      	nop
 800c69a:	e7fe      	b.n	800c69a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c69c:	4b0a      	ldr	r3, [pc, #40]	; (800c6c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	3318      	adds	r3, #24
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7fe fde6 	bl	800b276 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c6b6:	6879      	ldr	r1, [r7, #4]
 800c6b8:	68b8      	ldr	r0, [r7, #8]
 800c6ba:	f000 fa55 	bl	800cb68 <prvAddCurrentTaskToDelayedList>
	}
 800c6be:	bf00      	nop
 800c6c0:	3718      	adds	r7, #24
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	200033f4 	.word	0x200033f4

0800c6cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10a      	bne.n	800c6f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	60fb      	str	r3, [r7, #12]
}
 800c6f4:	bf00      	nop
 800c6f6:	e7fe      	b.n	800c6f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	3318      	adds	r3, #24
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fe fe17 	bl	800b330 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c702:	4b1e      	ldr	r3, [pc, #120]	; (800c77c <xTaskRemoveFromEventList+0xb0>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d11d      	bne.n	800c746 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	3304      	adds	r3, #4
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fe fe0e 	bl	800b330 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c718:	4b19      	ldr	r3, [pc, #100]	; (800c780 <xTaskRemoveFromEventList+0xb4>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d903      	bls.n	800c728 <xTaskRemoveFromEventList+0x5c>
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c724:	4a16      	ldr	r2, [pc, #88]	; (800c780 <xTaskRemoveFromEventList+0xb4>)
 800c726:	6013      	str	r3, [r2, #0]
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72c:	4613      	mov	r3, r2
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	4413      	add	r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4a13      	ldr	r2, [pc, #76]	; (800c784 <xTaskRemoveFromEventList+0xb8>)
 800c736:	441a      	add	r2, r3
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	3304      	adds	r3, #4
 800c73c:	4619      	mov	r1, r3
 800c73e:	4610      	mov	r0, r2
 800c740:	f7fe fd99 	bl	800b276 <vListInsertEnd>
 800c744:	e005      	b.n	800c752 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	3318      	adds	r3, #24
 800c74a:	4619      	mov	r1, r3
 800c74c:	480e      	ldr	r0, [pc, #56]	; (800c788 <xTaskRemoveFromEventList+0xbc>)
 800c74e:	f7fe fd92 	bl	800b276 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c756:	4b0d      	ldr	r3, [pc, #52]	; (800c78c <xTaskRemoveFromEventList+0xc0>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d905      	bls.n	800c76c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c760:	2301      	movs	r3, #1
 800c762:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c764:	4b0a      	ldr	r3, [pc, #40]	; (800c790 <xTaskRemoveFromEventList+0xc4>)
 800c766:	2201      	movs	r2, #1
 800c768:	601a      	str	r2, [r3, #0]
 800c76a:	e001      	b.n	800c770 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c76c:	2300      	movs	r3, #0
 800c76e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c770:	697b      	ldr	r3, [r7, #20]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3718      	adds	r7, #24
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	200038f0 	.word	0x200038f0
 800c780:	200038d0 	.word	0x200038d0
 800c784:	200033f8 	.word	0x200033f8
 800c788:	20003888 	.word	0x20003888
 800c78c:	200033f4 	.word	0x200033f4
 800c790:	200038dc 	.word	0x200038dc

0800c794 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c79c:	4b06      	ldr	r3, [pc, #24]	; (800c7b8 <vTaskInternalSetTimeOutState+0x24>)
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c7a4:	4b05      	ldr	r3, [pc, #20]	; (800c7bc <vTaskInternalSetTimeOutState+0x28>)
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	605a      	str	r2, [r3, #4]
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	200038e0 	.word	0x200038e0
 800c7bc:	200038cc 	.word	0x200038cc

0800c7c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b088      	sub	sp, #32
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10a      	bne.n	800c7e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	613b      	str	r3, [r7, #16]
}
 800c7e2:	bf00      	nop
 800c7e4:	e7fe      	b.n	800c7e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10a      	bne.n	800c802 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	60fb      	str	r3, [r7, #12]
}
 800c7fe:	bf00      	nop
 800c800:	e7fe      	b.n	800c800 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c802:	f000 ff67 	bl	800d6d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c806:	4b1d      	ldr	r3, [pc, #116]	; (800c87c <xTaskCheckForTimeOut+0xbc>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	69ba      	ldr	r2, [r7, #24]
 800c812:	1ad3      	subs	r3, r2, r3
 800c814:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c81e:	d102      	bne.n	800c826 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c820:	2300      	movs	r3, #0
 800c822:	61fb      	str	r3, [r7, #28]
 800c824:	e023      	b.n	800c86e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	4b15      	ldr	r3, [pc, #84]	; (800c880 <xTaskCheckForTimeOut+0xc0>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d007      	beq.n	800c842 <xTaskCheckForTimeOut+0x82>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d302      	bcc.n	800c842 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c83c:	2301      	movs	r3, #1
 800c83e:	61fb      	str	r3, [r7, #28]
 800c840:	e015      	b.n	800c86e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d20b      	bcs.n	800c864 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	1ad2      	subs	r2, r2, r3
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7ff ff9b 	bl	800c794 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c85e:	2300      	movs	r3, #0
 800c860:	61fb      	str	r3, [r7, #28]
 800c862:	e004      	b.n	800c86e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	2200      	movs	r2, #0
 800c868:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c86a:	2301      	movs	r3, #1
 800c86c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c86e:	f000 ff61 	bl	800d734 <vPortExitCritical>

	return xReturn;
 800c872:	69fb      	ldr	r3, [r7, #28]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3720      	adds	r7, #32
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	200038cc 	.word	0x200038cc
 800c880:	200038e0 	.word	0x200038e0

0800c884 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c884:	b480      	push	{r7}
 800c886:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c888:	4b03      	ldr	r3, [pc, #12]	; (800c898 <vTaskMissedYield+0x14>)
 800c88a:	2201      	movs	r2, #1
 800c88c:	601a      	str	r2, [r3, #0]
}
 800c88e:	bf00      	nop
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	200038dc 	.word	0x200038dc

0800c89c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c8a4:	f000 f852 	bl	800c94c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c8a8:	4b06      	ldr	r3, [pc, #24]	; (800c8c4 <prvIdleTask+0x28>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d9f9      	bls.n	800c8a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c8b0:	4b05      	ldr	r3, [pc, #20]	; (800c8c8 <prvIdleTask+0x2c>)
 800c8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b6:	601a      	str	r2, [r3, #0]
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c8c0:	e7f0      	b.n	800c8a4 <prvIdleTask+0x8>
 800c8c2:	bf00      	nop
 800c8c4:	200033f8 	.word	0x200033f8
 800c8c8:	e000ed04 	.word	0xe000ed04

0800c8cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	607b      	str	r3, [r7, #4]
 800c8d6:	e00c      	b.n	800c8f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4a12      	ldr	r2, [pc, #72]	; (800c92c <prvInitialiseTaskLists+0x60>)
 800c8e4:	4413      	add	r3, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fe fc98 	bl	800b21c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	607b      	str	r3, [r7, #4]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b37      	cmp	r3, #55	; 0x37
 800c8f6:	d9ef      	bls.n	800c8d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8f8:	480d      	ldr	r0, [pc, #52]	; (800c930 <prvInitialiseTaskLists+0x64>)
 800c8fa:	f7fe fc8f 	bl	800b21c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8fe:	480d      	ldr	r0, [pc, #52]	; (800c934 <prvInitialiseTaskLists+0x68>)
 800c900:	f7fe fc8c 	bl	800b21c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c904:	480c      	ldr	r0, [pc, #48]	; (800c938 <prvInitialiseTaskLists+0x6c>)
 800c906:	f7fe fc89 	bl	800b21c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c90a:	480c      	ldr	r0, [pc, #48]	; (800c93c <prvInitialiseTaskLists+0x70>)
 800c90c:	f7fe fc86 	bl	800b21c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c910:	480b      	ldr	r0, [pc, #44]	; (800c940 <prvInitialiseTaskLists+0x74>)
 800c912:	f7fe fc83 	bl	800b21c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c916:	4b0b      	ldr	r3, [pc, #44]	; (800c944 <prvInitialiseTaskLists+0x78>)
 800c918:	4a05      	ldr	r2, [pc, #20]	; (800c930 <prvInitialiseTaskLists+0x64>)
 800c91a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c91c:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <prvInitialiseTaskLists+0x7c>)
 800c91e:	4a05      	ldr	r2, [pc, #20]	; (800c934 <prvInitialiseTaskLists+0x68>)
 800c920:	601a      	str	r2, [r3, #0]
}
 800c922:	bf00      	nop
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	200033f8 	.word	0x200033f8
 800c930:	20003858 	.word	0x20003858
 800c934:	2000386c 	.word	0x2000386c
 800c938:	20003888 	.word	0x20003888
 800c93c:	2000389c 	.word	0x2000389c
 800c940:	200038b4 	.word	0x200038b4
 800c944:	20003880 	.word	0x20003880
 800c948:	20003884 	.word	0x20003884

0800c94c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c952:	e019      	b.n	800c988 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c954:	f000 febe 	bl	800d6d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c958:	4b10      	ldr	r3, [pc, #64]	; (800c99c <prvCheckTasksWaitingTermination+0x50>)
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	3304      	adds	r3, #4
 800c964:	4618      	mov	r0, r3
 800c966:	f7fe fce3 	bl	800b330 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c96a:	4b0d      	ldr	r3, [pc, #52]	; (800c9a0 <prvCheckTasksWaitingTermination+0x54>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	3b01      	subs	r3, #1
 800c970:	4a0b      	ldr	r2, [pc, #44]	; (800c9a0 <prvCheckTasksWaitingTermination+0x54>)
 800c972:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c974:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <prvCheckTasksWaitingTermination+0x58>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	3b01      	subs	r3, #1
 800c97a:	4a0a      	ldr	r2, [pc, #40]	; (800c9a4 <prvCheckTasksWaitingTermination+0x58>)
 800c97c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c97e:	f000 fed9 	bl	800d734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 f810 	bl	800c9a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c988:	4b06      	ldr	r3, [pc, #24]	; (800c9a4 <prvCheckTasksWaitingTermination+0x58>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1e1      	bne.n	800c954 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c990:	bf00      	nop
 800c992:	bf00      	nop
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	2000389c 	.word	0x2000389c
 800c9a0:	200038c8 	.word	0x200038c8
 800c9a4:	200038b0 	.word	0x200038b0

0800c9a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	3358      	adds	r3, #88	; 0x58
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f002 f9b5 	bl	800ed24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d108      	bne.n	800c9d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f001 f871 	bl	800dab0 <vPortFree>
				vPortFree( pxTCB );
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f001 f86e 	bl	800dab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9d4:	e018      	b.n	800ca08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d103      	bne.n	800c9e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f001 f865 	bl	800dab0 <vPortFree>
	}
 800c9e6:	e00f      	b.n	800ca08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d00a      	beq.n	800ca08 <prvDeleteTCB+0x60>
	__asm volatile
 800c9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f6:	f383 8811 	msr	BASEPRI, r3
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	60fb      	str	r3, [r7, #12]
}
 800ca04:	bf00      	nop
 800ca06:	e7fe      	b.n	800ca06 <prvDeleteTCB+0x5e>
	}
 800ca08:	bf00      	nop
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca16:	4b0c      	ldr	r3, [pc, #48]	; (800ca48 <prvResetNextTaskUnblockTime+0x38>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d104      	bne.n	800ca2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca20:	4b0a      	ldr	r3, [pc, #40]	; (800ca4c <prvResetNextTaskUnblockTime+0x3c>)
 800ca22:	f04f 32ff 	mov.w	r2, #4294967295
 800ca26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca28:	e008      	b.n	800ca3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca2a:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <prvResetNextTaskUnblockTime+0x38>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	4a04      	ldr	r2, [pc, #16]	; (800ca4c <prvResetNextTaskUnblockTime+0x3c>)
 800ca3a:	6013      	str	r3, [r2, #0]
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr
 800ca48:	20003880 	.word	0x20003880
 800ca4c:	200038e8 	.word	0x200038e8

0800ca50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca56:	4b0b      	ldr	r3, [pc, #44]	; (800ca84 <xTaskGetSchedulerState+0x34>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d102      	bne.n	800ca64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	607b      	str	r3, [r7, #4]
 800ca62:	e008      	b.n	800ca76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca64:	4b08      	ldr	r3, [pc, #32]	; (800ca88 <xTaskGetSchedulerState+0x38>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d102      	bne.n	800ca72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	607b      	str	r3, [r7, #4]
 800ca70:	e001      	b.n	800ca76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca72:	2300      	movs	r3, #0
 800ca74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca76:	687b      	ldr	r3, [r7, #4]
	}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	200038d4 	.word	0x200038d4
 800ca88:	200038f0 	.word	0x200038f0

0800ca8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d056      	beq.n	800cb50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800caa2:	4b2e      	ldr	r3, [pc, #184]	; (800cb5c <xTaskPriorityDisinherit+0xd0>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	693a      	ldr	r2, [r7, #16]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d00a      	beq.n	800cac2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	60fb      	str	r3, [r7, #12]
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d10a      	bne.n	800cae0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	f383 8811 	msr	BASEPRI, r3
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	60bb      	str	r3, [r7, #8]
}
 800cadc:	bf00      	nop
 800cade:	e7fe      	b.n	800cade <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cae4:	1e5a      	subs	r2, r3, #1
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d02c      	beq.n	800cb50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d128      	bne.n	800cb50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	3304      	adds	r3, #4
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe fc14 	bl	800b330 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb20:	4b0f      	ldr	r3, [pc, #60]	; (800cb60 <xTaskPriorityDisinherit+0xd4>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d903      	bls.n	800cb30 <xTaskPriorityDisinherit+0xa4>
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2c:	4a0c      	ldr	r2, [pc, #48]	; (800cb60 <xTaskPriorityDisinherit+0xd4>)
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb34:	4613      	mov	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	4a09      	ldr	r2, [pc, #36]	; (800cb64 <xTaskPriorityDisinherit+0xd8>)
 800cb3e:	441a      	add	r2, r3
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	3304      	adds	r3, #4
 800cb44:	4619      	mov	r1, r3
 800cb46:	4610      	mov	r0, r2
 800cb48:	f7fe fb95 	bl	800b276 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb50:	697b      	ldr	r3, [r7, #20]
	}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3718      	adds	r7, #24
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	200033f4 	.word	0x200033f4
 800cb60:	200038d0 	.word	0x200038d0
 800cb64:	200033f8 	.word	0x200033f8

0800cb68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb72:	4b21      	ldr	r3, [pc, #132]	; (800cbf8 <prvAddCurrentTaskToDelayedList+0x90>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb78:	4b20      	ldr	r3, [pc, #128]	; (800cbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	3304      	adds	r3, #4
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe fbd6 	bl	800b330 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb8a:	d10a      	bne.n	800cba2 <prvAddCurrentTaskToDelayedList+0x3a>
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d007      	beq.n	800cba2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb92:	4b1a      	ldr	r3, [pc, #104]	; (800cbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	3304      	adds	r3, #4
 800cb98:	4619      	mov	r1, r3
 800cb9a:	4819      	ldr	r0, [pc, #100]	; (800cc00 <prvAddCurrentTaskToDelayedList+0x98>)
 800cb9c:	f7fe fb6b 	bl	800b276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cba0:	e026      	b.n	800cbf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4413      	add	r3, r2
 800cba8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cbaa:	4b14      	ldr	r3, [pc, #80]	; (800cbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d209      	bcs.n	800cbce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbba:	4b12      	ldr	r3, [pc, #72]	; (800cc04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	4b0f      	ldr	r3, [pc, #60]	; (800cbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	4610      	mov	r0, r2
 800cbc8:	f7fe fb79 	bl	800b2be <vListInsert>
}
 800cbcc:	e010      	b.n	800cbf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbce:	4b0e      	ldr	r3, [pc, #56]	; (800cc08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	4619      	mov	r1, r3
 800cbda:	4610      	mov	r0, r2
 800cbdc:	f7fe fb6f 	bl	800b2be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbe0:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d202      	bcs.n	800cbf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cbea:	4a08      	ldr	r2, [pc, #32]	; (800cc0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	6013      	str	r3, [r2, #0]
}
 800cbf0:	bf00      	nop
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	200038cc 	.word	0x200038cc
 800cbfc:	200033f4 	.word	0x200033f4
 800cc00:	200038b4 	.word	0x200038b4
 800cc04:	20003884 	.word	0x20003884
 800cc08:	20003880 	.word	0x20003880
 800cc0c:	200038e8 	.word	0x200038e8

0800cc10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08a      	sub	sp, #40	; 0x28
 800cc14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cc16:	2300      	movs	r3, #0
 800cc18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cc1a:	f000 fba1 	bl	800d360 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cc1e:	4b1c      	ldr	r3, [pc, #112]	; (800cc90 <xTimerCreateTimerTask+0x80>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d021      	beq.n	800cc6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cc26:	2300      	movs	r3, #0
 800cc28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cc2e:	1d3a      	adds	r2, r7, #4
 800cc30:	f107 0108 	add.w	r1, r7, #8
 800cc34:	f107 030c 	add.w	r3, r7, #12
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fe fad5 	bl	800b1e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cc3e:	6879      	ldr	r1, [r7, #4]
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	9202      	str	r2, [sp, #8]
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	2302      	movs	r3, #2
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	460a      	mov	r2, r1
 800cc50:	4910      	ldr	r1, [pc, #64]	; (800cc94 <xTimerCreateTimerTask+0x84>)
 800cc52:	4811      	ldr	r0, [pc, #68]	; (800cc98 <xTimerCreateTimerTask+0x88>)
 800cc54:	f7ff f882 	bl	800bd5c <xTaskCreateStatic>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	4a10      	ldr	r2, [pc, #64]	; (800cc9c <xTimerCreateTimerTask+0x8c>)
 800cc5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cc5e:	4b0f      	ldr	r3, [pc, #60]	; (800cc9c <xTimerCreateTimerTask+0x8c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cc66:	2301      	movs	r3, #1
 800cc68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10a      	bne.n	800cc86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	613b      	str	r3, [r7, #16]
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cc86:	697b      	ldr	r3, [r7, #20]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3718      	adds	r7, #24
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	2000392c 	.word	0x2000392c
 800cc94:	0801421c 	.word	0x0801421c
 800cc98:	0800cf09 	.word	0x0800cf09
 800cc9c:	20003930 	.word	0x20003930

0800cca0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b088      	sub	sp, #32
 800cca4:	af02      	add	r7, sp, #8
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
 800ccac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ccae:	202c      	movs	r0, #44	; 0x2c
 800ccb0:	f000 fe32 	bl	800d918 <pvPortMalloc>
 800ccb4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00d      	beq.n	800ccd8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	9301      	str	r3, [sp, #4]
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	68b9      	ldr	r1, [r7, #8]
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f000 f843 	bl	800cd5e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ccd8:	697b      	ldr	r3, [r7, #20]
	}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3718      	adds	r7, #24
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b08a      	sub	sp, #40	; 0x28
 800cce6:	af02      	add	r7, sp, #8
 800cce8:	60f8      	str	r0, [r7, #12]
 800ccea:	60b9      	str	r1, [r7, #8]
 800ccec:	607a      	str	r2, [r7, #4]
 800ccee:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ccf0:	232c      	movs	r3, #44	; 0x2c
 800ccf2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	2b2c      	cmp	r3, #44	; 0x2c
 800ccf8:	d00a      	beq.n	800cd10 <xTimerCreateStatic+0x2e>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	61bb      	str	r3, [r7, #24]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd10:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10a      	bne.n	800cd2e <xTimerCreateStatic+0x4c>
	__asm volatile
 800cd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1c:	f383 8811 	msr	BASEPRI, r3
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	617b      	str	r3, [r7, #20]
}
 800cd2a:	bf00      	nop
 800cd2c:	e7fe      	b.n	800cd2c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd30:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00d      	beq.n	800cd54 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	9301      	str	r3, [sp, #4]
 800cd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	68b9      	ldr	r1, [r7, #8]
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f000 f805 	bl	800cd5e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cd54:	69fb      	ldr	r3, [r7, #28]
	}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3720      	adds	r7, #32
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b086      	sub	sp, #24
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	60f8      	str	r0, [r7, #12]
 800cd66:	60b9      	str	r1, [r7, #8]
 800cd68:	607a      	str	r2, [r7, #4]
 800cd6a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10a      	bne.n	800cd88 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	617b      	str	r3, [r7, #20]
}
 800cd84:	bf00      	nop
 800cd86:	e7fe      	b.n	800cd86 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800cd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d01e      	beq.n	800cdcc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cd8e:	f000 fae7 	bl	800d360 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	6a3a      	ldr	r2, [r7, #32]
 800cda8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	3304      	adds	r3, #4
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7fe fa54 	bl	800b25c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d008      	beq.n	800cdcc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800cdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdc0:	f043 0304 	orr.w	r3, r3, #4
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800cdcc:	bf00      	nop
 800cdce:	3718      	adds	r7, #24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b08a      	sub	sp, #40	; 0x28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
 800cde0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10a      	bne.n	800ce02 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	623b      	str	r3, [r7, #32]
}
 800cdfe:	bf00      	nop
 800ce00:	e7fe      	b.n	800ce00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce02:	4b1a      	ldr	r3, [pc, #104]	; (800ce6c <xTimerGenericCommand+0x98>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d02a      	beq.n	800ce60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	2b05      	cmp	r3, #5
 800ce1a:	dc18      	bgt.n	800ce4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce1c:	f7ff fe18 	bl	800ca50 <xTaskGetSchedulerState>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	d109      	bne.n	800ce3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce26:	4b11      	ldr	r3, [pc, #68]	; (800ce6c <xTimerGenericCommand+0x98>)
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	f107 0110 	add.w	r1, r7, #16
 800ce2e:	2300      	movs	r3, #0
 800ce30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce32:	f7fe fbab 	bl	800b58c <xQueueGenericSend>
 800ce36:	6278      	str	r0, [r7, #36]	; 0x24
 800ce38:	e012      	b.n	800ce60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ce3a:	4b0c      	ldr	r3, [pc, #48]	; (800ce6c <xTimerGenericCommand+0x98>)
 800ce3c:	6818      	ldr	r0, [r3, #0]
 800ce3e:	f107 0110 	add.w	r1, r7, #16
 800ce42:	2300      	movs	r3, #0
 800ce44:	2200      	movs	r2, #0
 800ce46:	f7fe fba1 	bl	800b58c <xQueueGenericSend>
 800ce4a:	6278      	str	r0, [r7, #36]	; 0x24
 800ce4c:	e008      	b.n	800ce60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce4e:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <xTimerGenericCommand+0x98>)
 800ce50:	6818      	ldr	r0, [r3, #0]
 800ce52:	f107 0110 	add.w	r1, r7, #16
 800ce56:	2300      	movs	r3, #0
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	f7fe fc95 	bl	800b788 <xQueueGenericSendFromISR>
 800ce5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3728      	adds	r7, #40	; 0x28
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	2000392c 	.word	0x2000392c

0800ce70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce7a:	4b22      	ldr	r3, [pc, #136]	; (800cf04 <prvProcessExpiredTimer+0x94>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	3304      	adds	r3, #4
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fe fa51 	bl	800b330 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d022      	beq.n	800cee2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	699a      	ldr	r2, [r3, #24]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	18d1      	adds	r1, r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	6978      	ldr	r0, [r7, #20]
 800ceaa:	f000 f8d1 	bl	800d050 <prvInsertTimerInActiveList>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d01f      	beq.n	800cef4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	2300      	movs	r3, #0
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	2100      	movs	r1, #0
 800cebe:	6978      	ldr	r0, [r7, #20]
 800cec0:	f7ff ff88 	bl	800cdd4 <xTimerGenericCommand>
 800cec4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d113      	bne.n	800cef4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	60fb      	str	r3, [r7, #12]
}
 800cede:	bf00      	nop
 800cee0:	e7fe      	b.n	800cee0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cee8:	f023 0301 	bic.w	r3, r3, #1
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	6a1b      	ldr	r3, [r3, #32]
 800cef8:	6978      	ldr	r0, [r7, #20]
 800cefa:	4798      	blx	r3
}
 800cefc:	bf00      	nop
 800cefe:	3718      	adds	r7, #24
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	20003924 	.word	0x20003924

0800cf08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf10:	f107 0308 	add.w	r3, r7, #8
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 f857 	bl	800cfc8 <prvGetNextExpireTime>
 800cf1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4619      	mov	r1, r3
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f000 f803 	bl	800cf2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf26:	f000 f8d5 	bl	800d0d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf2a:	e7f1      	b.n	800cf10 <prvTimerTask+0x8>

0800cf2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf36:	f7ff f973 	bl	800c220 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf3a:	f107 0308 	add.w	r3, r7, #8
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 f866 	bl	800d010 <prvSampleTimeNow>
 800cf44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d130      	bne.n	800cfae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10a      	bne.n	800cf68 <prvProcessTimerOrBlockTask+0x3c>
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d806      	bhi.n	800cf68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf5a:	f7ff f96f 	bl	800c23c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf5e:	68f9      	ldr	r1, [r7, #12]
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7ff ff85 	bl	800ce70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf66:	e024      	b.n	800cfb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d008      	beq.n	800cf80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf6e:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <prvProcessTimerOrBlockTask+0x90>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d101      	bne.n	800cf7c <prvProcessTimerOrBlockTask+0x50>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	e000      	b.n	800cf7e <prvProcessTimerOrBlockTask+0x52>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf80:	4b0f      	ldr	r3, [pc, #60]	; (800cfc0 <prvProcessTimerOrBlockTask+0x94>)
 800cf82:	6818      	ldr	r0, [r3, #0]
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	f7fe feb1 	bl	800bcf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf92:	f7ff f953 	bl	800c23c <xTaskResumeAll>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10a      	bne.n	800cfb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cf9c:	4b09      	ldr	r3, [pc, #36]	; (800cfc4 <prvProcessTimerOrBlockTask+0x98>)
 800cf9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	f3bf 8f6f 	isb	sy
}
 800cfac:	e001      	b.n	800cfb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cfae:	f7ff f945 	bl	800c23c <xTaskResumeAll>
}
 800cfb2:	bf00      	nop
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	20003928 	.word	0x20003928
 800cfc0:	2000392c 	.word	0x2000392c
 800cfc4:	e000ed04 	.word	0xe000ed04

0800cfc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfd0:	4b0e      	ldr	r3, [pc, #56]	; (800d00c <prvGetNextExpireTime+0x44>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d101      	bne.n	800cfde <prvGetNextExpireTime+0x16>
 800cfda:	2201      	movs	r2, #1
 800cfdc:	e000      	b.n	800cfe0 <prvGetNextExpireTime+0x18>
 800cfde:	2200      	movs	r2, #0
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d105      	bne.n	800cff8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfec:	4b07      	ldr	r3, [pc, #28]	; (800d00c <prvGetNextExpireTime+0x44>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	60fb      	str	r3, [r7, #12]
 800cff6:	e001      	b.n	800cffc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cff8:	2300      	movs	r3, #0
 800cffa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cffc:	68fb      	ldr	r3, [r7, #12]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	20003924 	.word	0x20003924

0800d010 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d018:	f7ff f9ae 	bl	800c378 <xTaskGetTickCount>
 800d01c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d01e:	4b0b      	ldr	r3, [pc, #44]	; (800d04c <prvSampleTimeNow+0x3c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	429a      	cmp	r2, r3
 800d026:	d205      	bcs.n	800d034 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d028:	f000 f936 	bl	800d298 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	e002      	b.n	800d03a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d03a:	4a04      	ldr	r2, [pc, #16]	; (800d04c <prvSampleTimeNow+0x3c>)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d040:	68fb      	ldr	r3, [r7, #12]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	20003934 	.word	0x20003934

0800d050 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
 800d05c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d05e:	2300      	movs	r3, #0
 800d060:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	429a      	cmp	r2, r3
 800d074:	d812      	bhi.n	800d09c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	1ad2      	subs	r2, r2, r3
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	699b      	ldr	r3, [r3, #24]
 800d080:	429a      	cmp	r2, r3
 800d082:	d302      	bcc.n	800d08a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d084:	2301      	movs	r3, #1
 800d086:	617b      	str	r3, [r7, #20]
 800d088:	e01b      	b.n	800d0c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d08a:	4b10      	ldr	r3, [pc, #64]	; (800d0cc <prvInsertTimerInActiveList+0x7c>)
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	3304      	adds	r3, #4
 800d092:	4619      	mov	r1, r3
 800d094:	4610      	mov	r0, r2
 800d096:	f7fe f912 	bl	800b2be <vListInsert>
 800d09a:	e012      	b.n	800d0c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d206      	bcs.n	800d0b2 <prvInsertTimerInActiveList+0x62>
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d302      	bcc.n	800d0b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	617b      	str	r3, [r7, #20]
 800d0b0:	e007      	b.n	800d0c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0b2:	4b07      	ldr	r3, [pc, #28]	; (800d0d0 <prvInsertTimerInActiveList+0x80>)
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	4610      	mov	r0, r2
 800d0be:	f7fe f8fe 	bl	800b2be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d0c2:	697b      	ldr	r3, [r7, #20]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3718      	adds	r7, #24
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	20003928 	.word	0x20003928
 800d0d0:	20003924 	.word	0x20003924

0800d0d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08e      	sub	sp, #56	; 0x38
 800d0d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0da:	e0ca      	b.n	800d272 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	da18      	bge.n	800d114 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d0e2:	1d3b      	adds	r3, r7, #4
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10a      	bne.n	800d104 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	61fb      	str	r3, [r7, #28]
}
 800d100:	bf00      	nop
 800d102:	e7fe      	b.n	800d102 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d10a:	6850      	ldr	r0, [r2, #4]
 800d10c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d10e:	6892      	ldr	r2, [r2, #8]
 800d110:	4611      	mov	r1, r2
 800d112:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	f2c0 80aa 	blt.w	800d270 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d122:	695b      	ldr	r3, [r3, #20]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d004      	beq.n	800d132 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12a:	3304      	adds	r3, #4
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7fe f8ff 	bl	800b330 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d132:	463b      	mov	r3, r7
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff ff6b 	bl	800d010 <prvSampleTimeNow>
 800d13a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b09      	cmp	r3, #9
 800d140:	f200 8097 	bhi.w	800d272 <prvProcessReceivedCommands+0x19e>
 800d144:	a201      	add	r2, pc, #4	; (adr r2, 800d14c <prvProcessReceivedCommands+0x78>)
 800d146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d14a:	bf00      	nop
 800d14c:	0800d175 	.word	0x0800d175
 800d150:	0800d175 	.word	0x0800d175
 800d154:	0800d175 	.word	0x0800d175
 800d158:	0800d1e9 	.word	0x0800d1e9
 800d15c:	0800d1fd 	.word	0x0800d1fd
 800d160:	0800d247 	.word	0x0800d247
 800d164:	0800d175 	.word	0x0800d175
 800d168:	0800d175 	.word	0x0800d175
 800d16c:	0800d1e9 	.word	0x0800d1e9
 800d170:	0800d1fd 	.word	0x0800d1fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d17a:	f043 0301 	orr.w	r3, r3, #1
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18a:	699b      	ldr	r3, [r3, #24]
 800d18c:	18d1      	adds	r1, r2, r3
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d194:	f7ff ff5c 	bl	800d050 <prvInsertTimerInActiveList>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d069      	beq.n	800d272 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1ac:	f003 0304 	and.w	r3, r3, #4
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d05e      	beq.n	800d272 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	699b      	ldr	r3, [r3, #24]
 800d1ba:	441a      	add	r2, r3
 800d1bc:	2300      	movs	r3, #0
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c6:	f7ff fe05 	bl	800cdd4 <xTimerGenericCommand>
 800d1ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d14f      	bne.n	800d272 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d6:	f383 8811 	msr	BASEPRI, r3
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	61bb      	str	r3, [r7, #24]
}
 800d1e4:	bf00      	nop
 800d1e6:	e7fe      	b.n	800d1e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1ee:	f023 0301 	bic.w	r3, r3, #1
 800d1f2:	b2da      	uxtb	r2, r3
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d1fa:	e03a      	b.n	800d272 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d202:	f043 0301 	orr.w	r3, r3, #1
 800d206:	b2da      	uxtb	r2, r3
 800d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10a      	bne.n	800d232 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	617b      	str	r3, [r7, #20]
}
 800d22e:	bf00      	nop
 800d230:	e7fe      	b.n	800d230 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d234:	699a      	ldr	r2, [r3, #24]
 800d236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d238:	18d1      	adds	r1, r2, r3
 800d23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d23e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d240:	f7ff ff06 	bl	800d050 <prvInsertTimerInActiveList>
					break;
 800d244:	e015      	b.n	800d272 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d24c:	f003 0302 	and.w	r3, r3, #2
 800d250:	2b00      	cmp	r3, #0
 800d252:	d103      	bne.n	800d25c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d256:	f000 fc2b 	bl	800dab0 <vPortFree>
 800d25a:	e00a      	b.n	800d272 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d262:	f023 0301 	bic.w	r3, r3, #1
 800d266:	b2da      	uxtb	r2, r3
 800d268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d26e:	e000      	b.n	800d272 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d270:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d272:	4b08      	ldr	r3, [pc, #32]	; (800d294 <prvProcessReceivedCommands+0x1c0>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	1d39      	adds	r1, r7, #4
 800d278:	2200      	movs	r2, #0
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fe fb20 	bl	800b8c0 <xQueueReceive>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	f47f af2a 	bne.w	800d0dc <prvProcessReceivedCommands+0x8>
	}
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	3730      	adds	r7, #48	; 0x30
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	2000392c 	.word	0x2000392c

0800d298 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b088      	sub	sp, #32
 800d29c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d29e:	e048      	b.n	800d332 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2a0:	4b2d      	ldr	r3, [pc, #180]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2aa:	4b2b      	ldr	r3, [pc, #172]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe f839 	bl	800b330 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6a1b      	ldr	r3, [r3, #32]
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2cc:	f003 0304 	and.w	r3, r3, #4
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d02e      	beq.n	800d332 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	4413      	add	r3, r2
 800d2dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d90e      	bls.n	800d304 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2f2:	4b19      	ldr	r3, [pc, #100]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	f7fd ffde 	bl	800b2be <vListInsert>
 800d302:	e016      	b.n	800d332 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d304:	2300      	movs	r3, #0
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	2300      	movs	r3, #0
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	2100      	movs	r1, #0
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f7ff fd60 	bl	800cdd4 <xTimerGenericCommand>
 800d314:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10a      	bne.n	800d332 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	603b      	str	r3, [r7, #0]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d332:	4b09      	ldr	r3, [pc, #36]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1b1      	bne.n	800d2a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d33c:	4b06      	ldr	r3, [pc, #24]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d342:	4b06      	ldr	r3, [pc, #24]	; (800d35c <prvSwitchTimerLists+0xc4>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a04      	ldr	r2, [pc, #16]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d348:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d34a:	4a04      	ldr	r2, [pc, #16]	; (800d35c <prvSwitchTimerLists+0xc4>)
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	6013      	str	r3, [r2, #0]
}
 800d350:	bf00      	nop
 800d352:	3718      	adds	r7, #24
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	20003924 	.word	0x20003924
 800d35c:	20003928 	.word	0x20003928

0800d360 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d366:	f000 f9b5 	bl	800d6d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d36a:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d120      	bne.n	800d3b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d372:	4814      	ldr	r0, [pc, #80]	; (800d3c4 <prvCheckForValidListAndQueue+0x64>)
 800d374:	f7fd ff52 	bl	800b21c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d378:	4813      	ldr	r0, [pc, #76]	; (800d3c8 <prvCheckForValidListAndQueue+0x68>)
 800d37a:	f7fd ff4f 	bl	800b21c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d37e:	4b13      	ldr	r3, [pc, #76]	; (800d3cc <prvCheckForValidListAndQueue+0x6c>)
 800d380:	4a10      	ldr	r2, [pc, #64]	; (800d3c4 <prvCheckForValidListAndQueue+0x64>)
 800d382:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d384:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <prvCheckForValidListAndQueue+0x70>)
 800d386:	4a10      	ldr	r2, [pc, #64]	; (800d3c8 <prvCheckForValidListAndQueue+0x68>)
 800d388:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d38a:	2300      	movs	r3, #0
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	4b11      	ldr	r3, [pc, #68]	; (800d3d4 <prvCheckForValidListAndQueue+0x74>)
 800d390:	4a11      	ldr	r2, [pc, #68]	; (800d3d8 <prvCheckForValidListAndQueue+0x78>)
 800d392:	2110      	movs	r1, #16
 800d394:	200a      	movs	r0, #10
 800d396:	f7fe f85d 	bl	800b454 <xQueueGenericCreateStatic>
 800d39a:	4603      	mov	r3, r0
 800d39c:	4a08      	ldr	r2, [pc, #32]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d39e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d3a0:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d005      	beq.n	800d3b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d3a8:	4b05      	ldr	r3, [pc, #20]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	490b      	ldr	r1, [pc, #44]	; (800d3dc <prvCheckForValidListAndQueue+0x7c>)
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fe fc76 	bl	800bca0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3b4:	f000 f9be 	bl	800d734 <vPortExitCritical>
}
 800d3b8:	bf00      	nop
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	2000392c 	.word	0x2000392c
 800d3c4:	200038fc 	.word	0x200038fc
 800d3c8:	20003910 	.word	0x20003910
 800d3cc:	20003924 	.word	0x20003924
 800d3d0:	20003928 	.word	0x20003928
 800d3d4:	200039d8 	.word	0x200039d8
 800d3d8:	20003938 	.word	0x20003938
 800d3dc:	08014224 	.word	0x08014224

0800d3e0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d10a      	bne.n	800d408 <xTimerIsTimerActive+0x28>
	__asm volatile
 800d3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f6:	f383 8811 	msr	BASEPRI, r3
 800d3fa:	f3bf 8f6f 	isb	sy
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	60fb      	str	r3, [r7, #12]
}
 800d404:	bf00      	nop
 800d406:	e7fe      	b.n	800d406 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800d408:	f000 f964 	bl	800d6d4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d412:	f003 0301 	and.w	r3, r3, #1
 800d416:	2b00      	cmp	r3, #0
 800d418:	d102      	bne.n	800d420 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800d41a:	2300      	movs	r3, #0
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	e001      	b.n	800d424 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800d420:	2301      	movs	r3, #1
 800d422:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800d424:	f000 f986 	bl	800d734 <vPortExitCritical>

	return xReturn;
 800d428:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800d42a:	4618      	mov	r0, r3
 800d42c:	3718      	adds	r7, #24
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b086      	sub	sp, #24
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10a      	bne.n	800d45a <pvTimerGetTimerID+0x28>
	__asm volatile
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	60fb      	str	r3, [r7, #12]
}
 800d456:	bf00      	nop
 800d458:	e7fe      	b.n	800d458 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d45a:	f000 f93b 	bl	800d6d4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	69db      	ldr	r3, [r3, #28]
 800d462:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d464:	f000 f966 	bl	800d734 <vPortExitCritical>

	return pvReturn;
 800d468:	693b      	ldr	r3, [r7, #16]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3718      	adds	r7, #24
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
	...

0800d474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d474:	b480      	push	{r7}
 800d476:	b085      	sub	sp, #20
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	3b04      	subs	r3, #4
 800d484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d48c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	3b04      	subs	r3, #4
 800d492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	f023 0201 	bic.w	r2, r3, #1
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	3b04      	subs	r3, #4
 800d4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4a4:	4a0c      	ldr	r2, [pc, #48]	; (800d4d8 <pxPortInitialiseStack+0x64>)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3b14      	subs	r3, #20
 800d4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	3b04      	subs	r3, #4
 800d4ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f06f 0202 	mvn.w	r2, #2
 800d4c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	3b20      	subs	r3, #32
 800d4c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3714      	adds	r7, #20
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr
 800d4d8:	0800d4dd 	.word	0x0800d4dd

0800d4dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d4e6:	4b12      	ldr	r3, [pc, #72]	; (800d530 <prvTaskExitError+0x54>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ee:	d00a      	beq.n	800d506 <prvTaskExitError+0x2a>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	60fb      	str	r3, [r7, #12]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <prvTaskExitError+0x28>
	__asm volatile
 800d506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	60bb      	str	r3, [r7, #8]
}
 800d518:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d51a:	bf00      	nop
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d0fc      	beq.n	800d51c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d522:	bf00      	nop
 800d524:	bf00      	nop
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	20000044 	.word	0x20000044
	...

0800d540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d540:	4b07      	ldr	r3, [pc, #28]	; (800d560 <pxCurrentTCBConst2>)
 800d542:	6819      	ldr	r1, [r3, #0]
 800d544:	6808      	ldr	r0, [r1, #0]
 800d546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54a:	f380 8809 	msr	PSP, r0
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f04f 0000 	mov.w	r0, #0
 800d556:	f380 8811 	msr	BASEPRI, r0
 800d55a:	4770      	bx	lr
 800d55c:	f3af 8000 	nop.w

0800d560 <pxCurrentTCBConst2>:
 800d560:	200033f4 	.word	0x200033f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop

0800d568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d568:	4808      	ldr	r0, [pc, #32]	; (800d58c <prvPortStartFirstTask+0x24>)
 800d56a:	6800      	ldr	r0, [r0, #0]
 800d56c:	6800      	ldr	r0, [r0, #0]
 800d56e:	f380 8808 	msr	MSP, r0
 800d572:	f04f 0000 	mov.w	r0, #0
 800d576:	f380 8814 	msr	CONTROL, r0
 800d57a:	b662      	cpsie	i
 800d57c:	b661      	cpsie	f
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	df00      	svc	0
 800d588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d58a:	bf00      	nop
 800d58c:	e000ed08 	.word	0xe000ed08

0800d590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d596:	4b46      	ldr	r3, [pc, #280]	; (800d6b0 <xPortStartScheduler+0x120>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a46      	ldr	r2, [pc, #280]	; (800d6b4 <xPortStartScheduler+0x124>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d10a      	bne.n	800d5b6 <xPortStartScheduler+0x26>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	613b      	str	r3, [r7, #16]
}
 800d5b2:	bf00      	nop
 800d5b4:	e7fe      	b.n	800d5b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5b6:	4b3e      	ldr	r3, [pc, #248]	; (800d6b0 <xPortStartScheduler+0x120>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a3f      	ldr	r2, [pc, #252]	; (800d6b8 <xPortStartScheduler+0x128>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d10a      	bne.n	800d5d6 <xPortStartScheduler+0x46>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	60fb      	str	r3, [r7, #12]
}
 800d5d2:	bf00      	nop
 800d5d4:	e7fe      	b.n	800d5d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5d6:	4b39      	ldr	r3, [pc, #228]	; (800d6bc <xPortStartScheduler+0x12c>)
 800d5d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	22ff      	movs	r2, #255	; 0xff
 800d5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d5f0:	78fb      	ldrb	r3, [r7, #3]
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	4b31      	ldr	r3, [pc, #196]	; (800d6c0 <xPortStartScheduler+0x130>)
 800d5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d5fe:	4b31      	ldr	r3, [pc, #196]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d600:	2207      	movs	r2, #7
 800d602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d604:	e009      	b.n	800d61a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d606:	4b2f      	ldr	r3, [pc, #188]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	3b01      	subs	r3, #1
 800d60c:	4a2d      	ldr	r2, [pc, #180]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d610:	78fb      	ldrb	r3, [r7, #3]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	005b      	lsls	r3, r3, #1
 800d616:	b2db      	uxtb	r3, r3
 800d618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d61a:	78fb      	ldrb	r3, [r7, #3]
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d622:	2b80      	cmp	r3, #128	; 0x80
 800d624:	d0ef      	beq.n	800d606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d626:	4b27      	ldr	r3, [pc, #156]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f1c3 0307 	rsb	r3, r3, #7
 800d62e:	2b04      	cmp	r3, #4
 800d630:	d00a      	beq.n	800d648 <xPortStartScheduler+0xb8>
	__asm volatile
 800d632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	60bb      	str	r3, [r7, #8]
}
 800d644:	bf00      	nop
 800d646:	e7fe      	b.n	800d646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d648:	4b1e      	ldr	r3, [pc, #120]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	021b      	lsls	r3, r3, #8
 800d64e:	4a1d      	ldr	r2, [pc, #116]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d652:	4b1c      	ldr	r3, [pc, #112]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d65a:	4a1a      	ldr	r2, [pc, #104]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d65c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	b2da      	uxtb	r2, r3
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d666:	4b18      	ldr	r3, [pc, #96]	; (800d6c8 <xPortStartScheduler+0x138>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a17      	ldr	r2, [pc, #92]	; (800d6c8 <xPortStartScheduler+0x138>)
 800d66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d672:	4b15      	ldr	r3, [pc, #84]	; (800d6c8 <xPortStartScheduler+0x138>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a14      	ldr	r2, [pc, #80]	; (800d6c8 <xPortStartScheduler+0x138>)
 800d678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d67c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d67e:	f000 f8dd 	bl	800d83c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d682:	4b12      	ldr	r3, [pc, #72]	; (800d6cc <xPortStartScheduler+0x13c>)
 800d684:	2200      	movs	r2, #0
 800d686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d688:	f000 f8fc 	bl	800d884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d68c:	4b10      	ldr	r3, [pc, #64]	; (800d6d0 <xPortStartScheduler+0x140>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a0f      	ldr	r2, [pc, #60]	; (800d6d0 <xPortStartScheduler+0x140>)
 800d692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d698:	f7ff ff66 	bl	800d568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d69c:	f7fe ff36 	bl	800c50c <vTaskSwitchContext>
	prvTaskExitError();
 800d6a0:	f7ff ff1c 	bl	800d4dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	e000ed00 	.word	0xe000ed00
 800d6b4:	410fc271 	.word	0x410fc271
 800d6b8:	410fc270 	.word	0x410fc270
 800d6bc:	e000e400 	.word	0xe000e400
 800d6c0:	20003a28 	.word	0x20003a28
 800d6c4:	20003a2c 	.word	0x20003a2c
 800d6c8:	e000ed20 	.word	0xe000ed20
 800d6cc:	20000044 	.word	0x20000044
 800d6d0:	e000ef34 	.word	0xe000ef34

0800d6d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6de:	f383 8811 	msr	BASEPRI, r3
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	607b      	str	r3, [r7, #4]
}
 800d6ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d6ee:	4b0f      	ldr	r3, [pc, #60]	; (800d72c <vPortEnterCritical+0x58>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	4a0d      	ldr	r2, [pc, #52]	; (800d72c <vPortEnterCritical+0x58>)
 800d6f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d6f8:	4b0c      	ldr	r3, [pc, #48]	; (800d72c <vPortEnterCritical+0x58>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d10f      	bne.n	800d720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d700:	4b0b      	ldr	r3, [pc, #44]	; (800d730 <vPortEnterCritical+0x5c>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	b2db      	uxtb	r3, r3
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00a      	beq.n	800d720 <vPortEnterCritical+0x4c>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	603b      	str	r3, [r7, #0]
}
 800d71c:	bf00      	nop
 800d71e:	e7fe      	b.n	800d71e <vPortEnterCritical+0x4a>
	}
}
 800d720:	bf00      	nop
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	20000044 	.word	0x20000044
 800d730:	e000ed04 	.word	0xe000ed04

0800d734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d73a:	4b12      	ldr	r3, [pc, #72]	; (800d784 <vPortExitCritical+0x50>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10a      	bne.n	800d758 <vPortExitCritical+0x24>
	__asm volatile
 800d742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	607b      	str	r3, [r7, #4]
}
 800d754:	bf00      	nop
 800d756:	e7fe      	b.n	800d756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d758:	4b0a      	ldr	r3, [pc, #40]	; (800d784 <vPortExitCritical+0x50>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	4a09      	ldr	r2, [pc, #36]	; (800d784 <vPortExitCritical+0x50>)
 800d760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d762:	4b08      	ldr	r3, [pc, #32]	; (800d784 <vPortExitCritical+0x50>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d105      	bne.n	800d776 <vPortExitCritical+0x42>
 800d76a:	2300      	movs	r3, #0
 800d76c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	f383 8811 	msr	BASEPRI, r3
}
 800d774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d776:	bf00      	nop
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	20000044 	.word	0x20000044
	...

0800d790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d790:	f3ef 8009 	mrs	r0, PSP
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	4b15      	ldr	r3, [pc, #84]	; (800d7f0 <pxCurrentTCBConst>)
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	f01e 0f10 	tst.w	lr, #16
 800d7a0:	bf08      	it	eq
 800d7a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7aa:	6010      	str	r0, [r2, #0]
 800d7ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d7b4:	f380 8811 	msr	BASEPRI, r0
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f7fe fea4 	bl	800c50c <vTaskSwitchContext>
 800d7c4:	f04f 0000 	mov.w	r0, #0
 800d7c8:	f380 8811 	msr	BASEPRI, r0
 800d7cc:	bc09      	pop	{r0, r3}
 800d7ce:	6819      	ldr	r1, [r3, #0]
 800d7d0:	6808      	ldr	r0, [r1, #0]
 800d7d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d6:	f01e 0f10 	tst.w	lr, #16
 800d7da:	bf08      	it	eq
 800d7dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d7e0:	f380 8809 	msr	PSP, r0
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	f3af 8000 	nop.w

0800d7f0 <pxCurrentTCBConst>:
 800d7f0:	200033f4 	.word	0x200033f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop

0800d7f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d802:	f383 8811 	msr	BASEPRI, r3
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	607b      	str	r3, [r7, #4]
}
 800d810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d812:	f7fe fdc1 	bl	800c398 <xTaskIncrementTick>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d003      	beq.n	800d824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d81c:	4b06      	ldr	r3, [pc, #24]	; (800d838 <xPortSysTickHandler+0x40>)
 800d81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	2300      	movs	r3, #0
 800d826:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	f383 8811 	msr	BASEPRI, r3
}
 800d82e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	e000ed04 	.word	0xe000ed04

0800d83c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d83c:	b480      	push	{r7}
 800d83e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d840:	4b0b      	ldr	r3, [pc, #44]	; (800d870 <vPortSetupTimerInterrupt+0x34>)
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d846:	4b0b      	ldr	r3, [pc, #44]	; (800d874 <vPortSetupTimerInterrupt+0x38>)
 800d848:	2200      	movs	r2, #0
 800d84a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d84c:	4b0a      	ldr	r3, [pc, #40]	; (800d878 <vPortSetupTimerInterrupt+0x3c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a0a      	ldr	r2, [pc, #40]	; (800d87c <vPortSetupTimerInterrupt+0x40>)
 800d852:	fba2 2303 	umull	r2, r3, r2, r3
 800d856:	095b      	lsrs	r3, r3, #5
 800d858:	4a09      	ldr	r2, [pc, #36]	; (800d880 <vPortSetupTimerInterrupt+0x44>)
 800d85a:	3b01      	subs	r3, #1
 800d85c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d85e:	4b04      	ldr	r3, [pc, #16]	; (800d870 <vPortSetupTimerInterrupt+0x34>)
 800d860:	2207      	movs	r2, #7
 800d862:	601a      	str	r2, [r3, #0]
}
 800d864:	bf00      	nop
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	e000e010 	.word	0xe000e010
 800d874:	e000e018 	.word	0xe000e018
 800d878:	20000018 	.word	0x20000018
 800d87c:	51eb851f 	.word	0x51eb851f
 800d880:	e000e014 	.word	0xe000e014

0800d884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d894 <vPortEnableVFP+0x10>
 800d888:	6801      	ldr	r1, [r0, #0]
 800d88a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d88e:	6001      	str	r1, [r0, #0]
 800d890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d892:	bf00      	nop
 800d894:	e000ed88 	.word	0xe000ed88

0800d898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d89e:	f3ef 8305 	mrs	r3, IPSR
 800d8a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b0f      	cmp	r3, #15
 800d8a8:	d914      	bls.n	800d8d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8aa:	4a17      	ldr	r2, [pc, #92]	; (800d908 <vPortValidateInterruptPriority+0x70>)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8b4:	4b15      	ldr	r3, [pc, #84]	; (800d90c <vPortValidateInterruptPriority+0x74>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	7afa      	ldrb	r2, [r7, #11]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d20a      	bcs.n	800d8d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c2:	f383 8811 	msr	BASEPRI, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	f3bf 8f4f 	dsb	sy
 800d8ce:	607b      	str	r3, [r7, #4]
}
 800d8d0:	bf00      	nop
 800d8d2:	e7fe      	b.n	800d8d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8d4:	4b0e      	ldr	r3, [pc, #56]	; (800d910 <vPortValidateInterruptPriority+0x78>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d8dc:	4b0d      	ldr	r3, [pc, #52]	; (800d914 <vPortValidateInterruptPriority+0x7c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d90a      	bls.n	800d8fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	603b      	str	r3, [r7, #0]
}
 800d8f6:	bf00      	nop
 800d8f8:	e7fe      	b.n	800d8f8 <vPortValidateInterruptPriority+0x60>
	}
 800d8fa:	bf00      	nop
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	e000e3f0 	.word	0xe000e3f0
 800d90c:	20003a28 	.word	0x20003a28
 800d910:	e000ed0c 	.word	0xe000ed0c
 800d914:	20003a2c 	.word	0x20003a2c

0800d918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08a      	sub	sp, #40	; 0x28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d920:	2300      	movs	r3, #0
 800d922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d924:	f7fe fc7c 	bl	800c220 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d928:	4b5b      	ldr	r3, [pc, #364]	; (800da98 <pvPortMalloc+0x180>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d101      	bne.n	800d934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d930:	f000 f920 	bl	800db74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d934:	4b59      	ldr	r3, [pc, #356]	; (800da9c <pvPortMalloc+0x184>)
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4013      	ands	r3, r2
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f040 8093 	bne.w	800da68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d01d      	beq.n	800d984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d948:	2208      	movs	r2, #8
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4413      	add	r3, r2
 800d94e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f003 0307 	and.w	r3, r3, #7
 800d956:	2b00      	cmp	r3, #0
 800d958:	d014      	beq.n	800d984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f023 0307 	bic.w	r3, r3, #7
 800d960:	3308      	adds	r3, #8
 800d962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f003 0307 	and.w	r3, r3, #7
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00a      	beq.n	800d984 <pvPortMalloc+0x6c>
	__asm volatile
 800d96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d972:	f383 8811 	msr	BASEPRI, r3
 800d976:	f3bf 8f6f 	isb	sy
 800d97a:	f3bf 8f4f 	dsb	sy
 800d97e:	617b      	str	r3, [r7, #20]
}
 800d980:	bf00      	nop
 800d982:	e7fe      	b.n	800d982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d06e      	beq.n	800da68 <pvPortMalloc+0x150>
 800d98a:	4b45      	ldr	r3, [pc, #276]	; (800daa0 <pvPortMalloc+0x188>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	429a      	cmp	r2, r3
 800d992:	d869      	bhi.n	800da68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d994:	4b43      	ldr	r3, [pc, #268]	; (800daa4 <pvPortMalloc+0x18c>)
 800d996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d998:	4b42      	ldr	r3, [pc, #264]	; (800daa4 <pvPortMalloc+0x18c>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d99e:	e004      	b.n	800d9aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d903      	bls.n	800d9bc <pvPortMalloc+0xa4>
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1f1      	bne.n	800d9a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9bc:	4b36      	ldr	r3, [pc, #216]	; (800da98 <pvPortMalloc+0x180>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d050      	beq.n	800da68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9c6:	6a3b      	ldr	r3, [r7, #32]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2208      	movs	r2, #8
 800d9cc:	4413      	add	r3, r2
 800d9ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9da:	685a      	ldr	r2, [r3, #4]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	1ad2      	subs	r2, r2, r3
 800d9e0:	2308      	movs	r3, #8
 800d9e2:	005b      	lsls	r3, r3, #1
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d91f      	bls.n	800da28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	f003 0307 	and.w	r3, r3, #7
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00a      	beq.n	800da10 <pvPortMalloc+0xf8>
	__asm volatile
 800d9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fe:	f383 8811 	msr	BASEPRI, r3
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	613b      	str	r3, [r7, #16]
}
 800da0c:	bf00      	nop
 800da0e:	e7fe      	b.n	800da0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	685a      	ldr	r2, [r3, #4]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	1ad2      	subs	r2, r2, r3
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da22:	69b8      	ldr	r0, [r7, #24]
 800da24:	f000 f908 	bl	800dc38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da28:	4b1d      	ldr	r3, [pc, #116]	; (800daa0 <pvPortMalloc+0x188>)
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	4a1b      	ldr	r2, [pc, #108]	; (800daa0 <pvPortMalloc+0x188>)
 800da34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da36:	4b1a      	ldr	r3, [pc, #104]	; (800daa0 <pvPortMalloc+0x188>)
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	4b1b      	ldr	r3, [pc, #108]	; (800daa8 <pvPortMalloc+0x190>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d203      	bcs.n	800da4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da42:	4b17      	ldr	r3, [pc, #92]	; (800daa0 <pvPortMalloc+0x188>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a18      	ldr	r2, [pc, #96]	; (800daa8 <pvPortMalloc+0x190>)
 800da48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	4b13      	ldr	r3, [pc, #76]	; (800da9c <pvPortMalloc+0x184>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	431a      	orrs	r2, r3
 800da54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	2200      	movs	r2, #0
 800da5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da5e:	4b13      	ldr	r3, [pc, #76]	; (800daac <pvPortMalloc+0x194>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	3301      	adds	r3, #1
 800da64:	4a11      	ldr	r2, [pc, #68]	; (800daac <pvPortMalloc+0x194>)
 800da66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da68:	f7fe fbe8 	bl	800c23c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	f003 0307 	and.w	r3, r3, #7
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00a      	beq.n	800da8c <pvPortMalloc+0x174>
	__asm volatile
 800da76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7a:	f383 8811 	msr	BASEPRI, r3
 800da7e:	f3bf 8f6f 	isb	sy
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	60fb      	str	r3, [r7, #12]
}
 800da88:	bf00      	nop
 800da8a:	e7fe      	b.n	800da8a <pvPortMalloc+0x172>
	return pvReturn;
 800da8c:	69fb      	ldr	r3, [r7, #28]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3728      	adds	r7, #40	; 0x28
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	20005978 	.word	0x20005978
 800da9c:	2000598c 	.word	0x2000598c
 800daa0:	2000597c 	.word	0x2000597c
 800daa4:	20005970 	.word	0x20005970
 800daa8:	20005980 	.word	0x20005980
 800daac:	20005984 	.word	0x20005984

0800dab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d04d      	beq.n	800db5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dac2:	2308      	movs	r3, #8
 800dac4:	425b      	negs	r3, r3
 800dac6:	697a      	ldr	r2, [r7, #20]
 800dac8:	4413      	add	r3, r2
 800daca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	4b24      	ldr	r3, [pc, #144]	; (800db68 <vPortFree+0xb8>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4013      	ands	r3, r2
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10a      	bne.n	800daf4 <vPortFree+0x44>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	60fb      	str	r3, [r7, #12]
}
 800daf0:	bf00      	nop
 800daf2:	e7fe      	b.n	800daf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00a      	beq.n	800db12 <vPortFree+0x62>
	__asm volatile
 800dafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	60bb      	str	r3, [r7, #8]
}
 800db0e:	bf00      	nop
 800db10:	e7fe      	b.n	800db10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	685a      	ldr	r2, [r3, #4]
 800db16:	4b14      	ldr	r3, [pc, #80]	; (800db68 <vPortFree+0xb8>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4013      	ands	r3, r2
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d01e      	beq.n	800db5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d11a      	bne.n	800db5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	685a      	ldr	r2, [r3, #4]
 800db2c:	4b0e      	ldr	r3, [pc, #56]	; (800db68 <vPortFree+0xb8>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	43db      	mvns	r3, r3
 800db32:	401a      	ands	r2, r3
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db38:	f7fe fb72 	bl	800c220 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	4b0a      	ldr	r3, [pc, #40]	; (800db6c <vPortFree+0xbc>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4413      	add	r3, r2
 800db46:	4a09      	ldr	r2, [pc, #36]	; (800db6c <vPortFree+0xbc>)
 800db48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db4a:	6938      	ldr	r0, [r7, #16]
 800db4c:	f000 f874 	bl	800dc38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db50:	4b07      	ldr	r3, [pc, #28]	; (800db70 <vPortFree+0xc0>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	3301      	adds	r3, #1
 800db56:	4a06      	ldr	r2, [pc, #24]	; (800db70 <vPortFree+0xc0>)
 800db58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db5a:	f7fe fb6f 	bl	800c23c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db5e:	bf00      	nop
 800db60:	3718      	adds	r7, #24
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	2000598c 	.word	0x2000598c
 800db6c:	2000597c 	.word	0x2000597c
 800db70:	20005988 	.word	0x20005988

0800db74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db74:	b480      	push	{r7}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db7a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800db7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db80:	4b27      	ldr	r3, [pc, #156]	; (800dc20 <prvHeapInit+0xac>)
 800db82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f003 0307 	and.w	r3, r3, #7
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00c      	beq.n	800dba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	3307      	adds	r3, #7
 800db92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f023 0307 	bic.w	r3, r3, #7
 800db9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	4a1f      	ldr	r2, [pc, #124]	; (800dc20 <prvHeapInit+0xac>)
 800dba4:	4413      	add	r3, r2
 800dba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbac:	4a1d      	ldr	r2, [pc, #116]	; (800dc24 <prvHeapInit+0xb0>)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbb2:	4b1c      	ldr	r3, [pc, #112]	; (800dc24 <prvHeapInit+0xb0>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbc0:	2208      	movs	r2, #8
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	1a9b      	subs	r3, r3, r2
 800dbc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f023 0307 	bic.w	r3, r3, #7
 800dbce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4a15      	ldr	r2, [pc, #84]	; (800dc28 <prvHeapInit+0xb4>)
 800dbd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dbd6:	4b14      	ldr	r3, [pc, #80]	; (800dc28 <prvHeapInit+0xb4>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbde:	4b12      	ldr	r3, [pc, #72]	; (800dc28 <prvHeapInit+0xb4>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	1ad2      	subs	r2, r2, r3
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dbf4:	4b0c      	ldr	r3, [pc, #48]	; (800dc28 <prvHeapInit+0xb4>)
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	4a0a      	ldr	r2, [pc, #40]	; (800dc2c <prvHeapInit+0xb8>)
 800dc02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	4a09      	ldr	r2, [pc, #36]	; (800dc30 <prvHeapInit+0xbc>)
 800dc0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc0c:	4b09      	ldr	r3, [pc, #36]	; (800dc34 <prvHeapInit+0xc0>)
 800dc0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc12:	601a      	str	r2, [r3, #0]
}
 800dc14:	bf00      	nop
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr
 800dc20:	20003a30 	.word	0x20003a30
 800dc24:	20005970 	.word	0x20005970
 800dc28:	20005978 	.word	0x20005978
 800dc2c:	20005980 	.word	0x20005980
 800dc30:	2000597c 	.word	0x2000597c
 800dc34:	2000598c 	.word	0x2000598c

0800dc38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc40:	4b28      	ldr	r3, [pc, #160]	; (800dce4 <prvInsertBlockIntoFreeList+0xac>)
 800dc42:	60fb      	str	r3, [r7, #12]
 800dc44:	e002      	b.n	800dc4c <prvInsertBlockIntoFreeList+0x14>
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	60fb      	str	r3, [r7, #12]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d8f7      	bhi.n	800dc46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	4413      	add	r3, r2
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d108      	bne.n	800dc7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	685a      	ldr	r2, [r3, #4]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	441a      	add	r2, r3
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	441a      	add	r2, r3
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d118      	bne.n	800dcc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	4b15      	ldr	r3, [pc, #84]	; (800dce8 <prvInsertBlockIntoFreeList+0xb0>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d00d      	beq.n	800dcb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	685a      	ldr	r2, [r3, #4]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	441a      	add	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	601a      	str	r2, [r3, #0]
 800dcb4:	e008      	b.n	800dcc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcb6:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <prvInsertBlockIntoFreeList+0xb0>)
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	601a      	str	r2, [r3, #0]
 800dcbe:	e003      	b.n	800dcc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d002      	beq.n	800dcd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcd6:	bf00      	nop
 800dcd8:	3714      	adds	r7, #20
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr
 800dce2:	bf00      	nop
 800dce4:	20005970 	.word	0x20005970
 800dce8:	20005978 	.word	0x20005978

0800dcec <__errno>:
 800dcec:	4b01      	ldr	r3, [pc, #4]	; (800dcf4 <__errno+0x8>)
 800dcee:	6818      	ldr	r0, [r3, #0]
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	20000048 	.word	0x20000048

0800dcf8 <std>:
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	b510      	push	{r4, lr}
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	e9c0 3300 	strd	r3, r3, [r0]
 800dd02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd06:	6083      	str	r3, [r0, #8]
 800dd08:	8181      	strh	r1, [r0, #12]
 800dd0a:	6643      	str	r3, [r0, #100]	; 0x64
 800dd0c:	81c2      	strh	r2, [r0, #14]
 800dd0e:	6183      	str	r3, [r0, #24]
 800dd10:	4619      	mov	r1, r3
 800dd12:	2208      	movs	r2, #8
 800dd14:	305c      	adds	r0, #92	; 0x5c
 800dd16:	f000 f91a 	bl	800df4e <memset>
 800dd1a:	4b05      	ldr	r3, [pc, #20]	; (800dd30 <std+0x38>)
 800dd1c:	6263      	str	r3, [r4, #36]	; 0x24
 800dd1e:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <std+0x3c>)
 800dd20:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd22:	4b05      	ldr	r3, [pc, #20]	; (800dd38 <std+0x40>)
 800dd24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd26:	4b05      	ldr	r3, [pc, #20]	; (800dd3c <std+0x44>)
 800dd28:	6224      	str	r4, [r4, #32]
 800dd2a:	6323      	str	r3, [r4, #48]	; 0x30
 800dd2c:	bd10      	pop	{r4, pc}
 800dd2e:	bf00      	nop
 800dd30:	0800ee49 	.word	0x0800ee49
 800dd34:	0800ee6b 	.word	0x0800ee6b
 800dd38:	0800eea3 	.word	0x0800eea3
 800dd3c:	0800eec7 	.word	0x0800eec7

0800dd40 <_cleanup_r>:
 800dd40:	4901      	ldr	r1, [pc, #4]	; (800dd48 <_cleanup_r+0x8>)
 800dd42:	f000 b8af 	b.w	800dea4 <_fwalk_reent>
 800dd46:	bf00      	nop
 800dd48:	08010a75 	.word	0x08010a75

0800dd4c <__sfmoreglue>:
 800dd4c:	b570      	push	{r4, r5, r6, lr}
 800dd4e:	1e4a      	subs	r2, r1, #1
 800dd50:	2568      	movs	r5, #104	; 0x68
 800dd52:	4355      	muls	r5, r2
 800dd54:	460e      	mov	r6, r1
 800dd56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd5a:	f000 f901 	bl	800df60 <_malloc_r>
 800dd5e:	4604      	mov	r4, r0
 800dd60:	b140      	cbz	r0, 800dd74 <__sfmoreglue+0x28>
 800dd62:	2100      	movs	r1, #0
 800dd64:	e9c0 1600 	strd	r1, r6, [r0]
 800dd68:	300c      	adds	r0, #12
 800dd6a:	60a0      	str	r0, [r4, #8]
 800dd6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd70:	f000 f8ed 	bl	800df4e <memset>
 800dd74:	4620      	mov	r0, r4
 800dd76:	bd70      	pop	{r4, r5, r6, pc}

0800dd78 <__sfp_lock_acquire>:
 800dd78:	4801      	ldr	r0, [pc, #4]	; (800dd80 <__sfp_lock_acquire+0x8>)
 800dd7a:	f000 b8d8 	b.w	800df2e <__retarget_lock_acquire_recursive>
 800dd7e:	bf00      	nop
 800dd80:	200063e0 	.word	0x200063e0

0800dd84 <__sfp_lock_release>:
 800dd84:	4801      	ldr	r0, [pc, #4]	; (800dd8c <__sfp_lock_release+0x8>)
 800dd86:	f000 b8d3 	b.w	800df30 <__retarget_lock_release_recursive>
 800dd8a:	bf00      	nop
 800dd8c:	200063e0 	.word	0x200063e0

0800dd90 <__sinit_lock_acquire>:
 800dd90:	4801      	ldr	r0, [pc, #4]	; (800dd98 <__sinit_lock_acquire+0x8>)
 800dd92:	f000 b8cc 	b.w	800df2e <__retarget_lock_acquire_recursive>
 800dd96:	bf00      	nop
 800dd98:	200063db 	.word	0x200063db

0800dd9c <__sinit_lock_release>:
 800dd9c:	4801      	ldr	r0, [pc, #4]	; (800dda4 <__sinit_lock_release+0x8>)
 800dd9e:	f000 b8c7 	b.w	800df30 <__retarget_lock_release_recursive>
 800dda2:	bf00      	nop
 800dda4:	200063db 	.word	0x200063db

0800dda8 <__sinit>:
 800dda8:	b510      	push	{r4, lr}
 800ddaa:	4604      	mov	r4, r0
 800ddac:	f7ff fff0 	bl	800dd90 <__sinit_lock_acquire>
 800ddb0:	69a3      	ldr	r3, [r4, #24]
 800ddb2:	b11b      	cbz	r3, 800ddbc <__sinit+0x14>
 800ddb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddb8:	f7ff bff0 	b.w	800dd9c <__sinit_lock_release>
 800ddbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ddc0:	6523      	str	r3, [r4, #80]	; 0x50
 800ddc2:	4b13      	ldr	r3, [pc, #76]	; (800de10 <__sinit+0x68>)
 800ddc4:	4a13      	ldr	r2, [pc, #76]	; (800de14 <__sinit+0x6c>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ddca:	42a3      	cmp	r3, r4
 800ddcc:	bf04      	itt	eq
 800ddce:	2301      	moveq	r3, #1
 800ddd0:	61a3      	streq	r3, [r4, #24]
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 f820 	bl	800de18 <__sfp>
 800ddd8:	6060      	str	r0, [r4, #4]
 800ddda:	4620      	mov	r0, r4
 800dddc:	f000 f81c 	bl	800de18 <__sfp>
 800dde0:	60a0      	str	r0, [r4, #8]
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 f818 	bl	800de18 <__sfp>
 800dde8:	2200      	movs	r2, #0
 800ddea:	60e0      	str	r0, [r4, #12]
 800ddec:	2104      	movs	r1, #4
 800ddee:	6860      	ldr	r0, [r4, #4]
 800ddf0:	f7ff ff82 	bl	800dcf8 <std>
 800ddf4:	68a0      	ldr	r0, [r4, #8]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	2109      	movs	r1, #9
 800ddfa:	f7ff ff7d 	bl	800dcf8 <std>
 800ddfe:	68e0      	ldr	r0, [r4, #12]
 800de00:	2202      	movs	r2, #2
 800de02:	2112      	movs	r1, #18
 800de04:	f7ff ff78 	bl	800dcf8 <std>
 800de08:	2301      	movs	r3, #1
 800de0a:	61a3      	str	r3, [r4, #24]
 800de0c:	e7d2      	b.n	800ddb4 <__sinit+0xc>
 800de0e:	bf00      	nop
 800de10:	08014308 	.word	0x08014308
 800de14:	0800dd41 	.word	0x0800dd41

0800de18 <__sfp>:
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	4607      	mov	r7, r0
 800de1c:	f7ff ffac 	bl	800dd78 <__sfp_lock_acquire>
 800de20:	4b1e      	ldr	r3, [pc, #120]	; (800de9c <__sfp+0x84>)
 800de22:	681e      	ldr	r6, [r3, #0]
 800de24:	69b3      	ldr	r3, [r6, #24]
 800de26:	b913      	cbnz	r3, 800de2e <__sfp+0x16>
 800de28:	4630      	mov	r0, r6
 800de2a:	f7ff ffbd 	bl	800dda8 <__sinit>
 800de2e:	3648      	adds	r6, #72	; 0x48
 800de30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de34:	3b01      	subs	r3, #1
 800de36:	d503      	bpl.n	800de40 <__sfp+0x28>
 800de38:	6833      	ldr	r3, [r6, #0]
 800de3a:	b30b      	cbz	r3, 800de80 <__sfp+0x68>
 800de3c:	6836      	ldr	r6, [r6, #0]
 800de3e:	e7f7      	b.n	800de30 <__sfp+0x18>
 800de40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de44:	b9d5      	cbnz	r5, 800de7c <__sfp+0x64>
 800de46:	4b16      	ldr	r3, [pc, #88]	; (800dea0 <__sfp+0x88>)
 800de48:	60e3      	str	r3, [r4, #12]
 800de4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de4e:	6665      	str	r5, [r4, #100]	; 0x64
 800de50:	f000 f86c 	bl	800df2c <__retarget_lock_init_recursive>
 800de54:	f7ff ff96 	bl	800dd84 <__sfp_lock_release>
 800de58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de60:	6025      	str	r5, [r4, #0]
 800de62:	61a5      	str	r5, [r4, #24]
 800de64:	2208      	movs	r2, #8
 800de66:	4629      	mov	r1, r5
 800de68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de6c:	f000 f86f 	bl	800df4e <memset>
 800de70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de78:	4620      	mov	r0, r4
 800de7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de7c:	3468      	adds	r4, #104	; 0x68
 800de7e:	e7d9      	b.n	800de34 <__sfp+0x1c>
 800de80:	2104      	movs	r1, #4
 800de82:	4638      	mov	r0, r7
 800de84:	f7ff ff62 	bl	800dd4c <__sfmoreglue>
 800de88:	4604      	mov	r4, r0
 800de8a:	6030      	str	r0, [r6, #0]
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d1d5      	bne.n	800de3c <__sfp+0x24>
 800de90:	f7ff ff78 	bl	800dd84 <__sfp_lock_release>
 800de94:	230c      	movs	r3, #12
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	e7ee      	b.n	800de78 <__sfp+0x60>
 800de9a:	bf00      	nop
 800de9c:	08014308 	.word	0x08014308
 800dea0:	ffff0001 	.word	0xffff0001

0800dea4 <_fwalk_reent>:
 800dea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dea8:	4606      	mov	r6, r0
 800deaa:	4688      	mov	r8, r1
 800deac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800deb0:	2700      	movs	r7, #0
 800deb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800deb6:	f1b9 0901 	subs.w	r9, r9, #1
 800deba:	d505      	bpl.n	800dec8 <_fwalk_reent+0x24>
 800debc:	6824      	ldr	r4, [r4, #0]
 800debe:	2c00      	cmp	r4, #0
 800dec0:	d1f7      	bne.n	800deb2 <_fwalk_reent+0xe>
 800dec2:	4638      	mov	r0, r7
 800dec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dec8:	89ab      	ldrh	r3, [r5, #12]
 800deca:	2b01      	cmp	r3, #1
 800decc:	d907      	bls.n	800dede <_fwalk_reent+0x3a>
 800dece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ded2:	3301      	adds	r3, #1
 800ded4:	d003      	beq.n	800dede <_fwalk_reent+0x3a>
 800ded6:	4629      	mov	r1, r5
 800ded8:	4630      	mov	r0, r6
 800deda:	47c0      	blx	r8
 800dedc:	4307      	orrs	r7, r0
 800dede:	3568      	adds	r5, #104	; 0x68
 800dee0:	e7e9      	b.n	800deb6 <_fwalk_reent+0x12>
	...

0800dee4 <__libc_init_array>:
 800dee4:	b570      	push	{r4, r5, r6, lr}
 800dee6:	4d0d      	ldr	r5, [pc, #52]	; (800df1c <__libc_init_array+0x38>)
 800dee8:	4c0d      	ldr	r4, [pc, #52]	; (800df20 <__libc_init_array+0x3c>)
 800deea:	1b64      	subs	r4, r4, r5
 800deec:	10a4      	asrs	r4, r4, #2
 800deee:	2600      	movs	r6, #0
 800def0:	42a6      	cmp	r6, r4
 800def2:	d109      	bne.n	800df08 <__libc_init_array+0x24>
 800def4:	4d0b      	ldr	r5, [pc, #44]	; (800df24 <__libc_init_array+0x40>)
 800def6:	4c0c      	ldr	r4, [pc, #48]	; (800df28 <__libc_init_array+0x44>)
 800def8:	f005 fb64 	bl	80135c4 <_init>
 800defc:	1b64      	subs	r4, r4, r5
 800defe:	10a4      	asrs	r4, r4, #2
 800df00:	2600      	movs	r6, #0
 800df02:	42a6      	cmp	r6, r4
 800df04:	d105      	bne.n	800df12 <__libc_init_array+0x2e>
 800df06:	bd70      	pop	{r4, r5, r6, pc}
 800df08:	f855 3b04 	ldr.w	r3, [r5], #4
 800df0c:	4798      	blx	r3
 800df0e:	3601      	adds	r6, #1
 800df10:	e7ee      	b.n	800def0 <__libc_init_array+0xc>
 800df12:	f855 3b04 	ldr.w	r3, [r5], #4
 800df16:	4798      	blx	r3
 800df18:	3601      	adds	r6, #1
 800df1a:	e7f2      	b.n	800df02 <__libc_init_array+0x1e>
 800df1c:	080147a8 	.word	0x080147a8
 800df20:	080147a8 	.word	0x080147a8
 800df24:	080147a8 	.word	0x080147a8
 800df28:	080147ac 	.word	0x080147ac

0800df2c <__retarget_lock_init_recursive>:
 800df2c:	4770      	bx	lr

0800df2e <__retarget_lock_acquire_recursive>:
 800df2e:	4770      	bx	lr

0800df30 <__retarget_lock_release_recursive>:
 800df30:	4770      	bx	lr

0800df32 <memcpy>:
 800df32:	440a      	add	r2, r1
 800df34:	4291      	cmp	r1, r2
 800df36:	f100 33ff 	add.w	r3, r0, #4294967295
 800df3a:	d100      	bne.n	800df3e <memcpy+0xc>
 800df3c:	4770      	bx	lr
 800df3e:	b510      	push	{r4, lr}
 800df40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df48:	4291      	cmp	r1, r2
 800df4a:	d1f9      	bne.n	800df40 <memcpy+0xe>
 800df4c:	bd10      	pop	{r4, pc}

0800df4e <memset>:
 800df4e:	4402      	add	r2, r0
 800df50:	4603      	mov	r3, r0
 800df52:	4293      	cmp	r3, r2
 800df54:	d100      	bne.n	800df58 <memset+0xa>
 800df56:	4770      	bx	lr
 800df58:	f803 1b01 	strb.w	r1, [r3], #1
 800df5c:	e7f9      	b.n	800df52 <memset+0x4>
	...

0800df60 <_malloc_r>:
 800df60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df62:	1ccd      	adds	r5, r1, #3
 800df64:	f025 0503 	bic.w	r5, r5, #3
 800df68:	3508      	adds	r5, #8
 800df6a:	2d0c      	cmp	r5, #12
 800df6c:	bf38      	it	cc
 800df6e:	250c      	movcc	r5, #12
 800df70:	2d00      	cmp	r5, #0
 800df72:	4606      	mov	r6, r0
 800df74:	db01      	blt.n	800df7a <_malloc_r+0x1a>
 800df76:	42a9      	cmp	r1, r5
 800df78:	d903      	bls.n	800df82 <_malloc_r+0x22>
 800df7a:	230c      	movs	r3, #12
 800df7c:	6033      	str	r3, [r6, #0]
 800df7e:	2000      	movs	r0, #0
 800df80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df82:	f003 f953 	bl	801122c <__malloc_lock>
 800df86:	4921      	ldr	r1, [pc, #132]	; (800e00c <_malloc_r+0xac>)
 800df88:	680a      	ldr	r2, [r1, #0]
 800df8a:	4614      	mov	r4, r2
 800df8c:	b99c      	cbnz	r4, 800dfb6 <_malloc_r+0x56>
 800df8e:	4f20      	ldr	r7, [pc, #128]	; (800e010 <_malloc_r+0xb0>)
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	b923      	cbnz	r3, 800df9e <_malloc_r+0x3e>
 800df94:	4621      	mov	r1, r4
 800df96:	4630      	mov	r0, r6
 800df98:	f000 ff20 	bl	800eddc <_sbrk_r>
 800df9c:	6038      	str	r0, [r7, #0]
 800df9e:	4629      	mov	r1, r5
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f000 ff1b 	bl	800eddc <_sbrk_r>
 800dfa6:	1c43      	adds	r3, r0, #1
 800dfa8:	d123      	bne.n	800dff2 <_malloc_r+0x92>
 800dfaa:	230c      	movs	r3, #12
 800dfac:	6033      	str	r3, [r6, #0]
 800dfae:	4630      	mov	r0, r6
 800dfb0:	f003 f942 	bl	8011238 <__malloc_unlock>
 800dfb4:	e7e3      	b.n	800df7e <_malloc_r+0x1e>
 800dfb6:	6823      	ldr	r3, [r4, #0]
 800dfb8:	1b5b      	subs	r3, r3, r5
 800dfba:	d417      	bmi.n	800dfec <_malloc_r+0x8c>
 800dfbc:	2b0b      	cmp	r3, #11
 800dfbe:	d903      	bls.n	800dfc8 <_malloc_r+0x68>
 800dfc0:	6023      	str	r3, [r4, #0]
 800dfc2:	441c      	add	r4, r3
 800dfc4:	6025      	str	r5, [r4, #0]
 800dfc6:	e004      	b.n	800dfd2 <_malloc_r+0x72>
 800dfc8:	6863      	ldr	r3, [r4, #4]
 800dfca:	42a2      	cmp	r2, r4
 800dfcc:	bf0c      	ite	eq
 800dfce:	600b      	streq	r3, [r1, #0]
 800dfd0:	6053      	strne	r3, [r2, #4]
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f003 f930 	bl	8011238 <__malloc_unlock>
 800dfd8:	f104 000b 	add.w	r0, r4, #11
 800dfdc:	1d23      	adds	r3, r4, #4
 800dfde:	f020 0007 	bic.w	r0, r0, #7
 800dfe2:	1ac2      	subs	r2, r0, r3
 800dfe4:	d0cc      	beq.n	800df80 <_malloc_r+0x20>
 800dfe6:	1a1b      	subs	r3, r3, r0
 800dfe8:	50a3      	str	r3, [r4, r2]
 800dfea:	e7c9      	b.n	800df80 <_malloc_r+0x20>
 800dfec:	4622      	mov	r2, r4
 800dfee:	6864      	ldr	r4, [r4, #4]
 800dff0:	e7cc      	b.n	800df8c <_malloc_r+0x2c>
 800dff2:	1cc4      	adds	r4, r0, #3
 800dff4:	f024 0403 	bic.w	r4, r4, #3
 800dff8:	42a0      	cmp	r0, r4
 800dffa:	d0e3      	beq.n	800dfc4 <_malloc_r+0x64>
 800dffc:	1a21      	subs	r1, r4, r0
 800dffe:	4630      	mov	r0, r6
 800e000:	f000 feec 	bl	800eddc <_sbrk_r>
 800e004:	3001      	adds	r0, #1
 800e006:	d1dd      	bne.n	800dfc4 <_malloc_r+0x64>
 800e008:	e7cf      	b.n	800dfaa <_malloc_r+0x4a>
 800e00a:	bf00      	nop
 800e00c:	20005990 	.word	0x20005990
 800e010:	20005994 	.word	0x20005994

0800e014 <__cvt>:
 800e014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e018:	ec55 4b10 	vmov	r4, r5, d0
 800e01c:	2d00      	cmp	r5, #0
 800e01e:	460e      	mov	r6, r1
 800e020:	4619      	mov	r1, r3
 800e022:	462b      	mov	r3, r5
 800e024:	bfbb      	ittet	lt
 800e026:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e02a:	461d      	movlt	r5, r3
 800e02c:	2300      	movge	r3, #0
 800e02e:	232d      	movlt	r3, #45	; 0x2d
 800e030:	700b      	strb	r3, [r1, #0]
 800e032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e034:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e038:	4691      	mov	r9, r2
 800e03a:	f023 0820 	bic.w	r8, r3, #32
 800e03e:	bfbc      	itt	lt
 800e040:	4622      	movlt	r2, r4
 800e042:	4614      	movlt	r4, r2
 800e044:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e048:	d005      	beq.n	800e056 <__cvt+0x42>
 800e04a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e04e:	d100      	bne.n	800e052 <__cvt+0x3e>
 800e050:	3601      	adds	r6, #1
 800e052:	2102      	movs	r1, #2
 800e054:	e000      	b.n	800e058 <__cvt+0x44>
 800e056:	2103      	movs	r1, #3
 800e058:	ab03      	add	r3, sp, #12
 800e05a:	9301      	str	r3, [sp, #4]
 800e05c:	ab02      	add	r3, sp, #8
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	ec45 4b10 	vmov	d0, r4, r5
 800e064:	4653      	mov	r3, sl
 800e066:	4632      	mov	r2, r6
 800e068:	f001 fe92 	bl	800fd90 <_dtoa_r>
 800e06c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e070:	4607      	mov	r7, r0
 800e072:	d102      	bne.n	800e07a <__cvt+0x66>
 800e074:	f019 0f01 	tst.w	r9, #1
 800e078:	d022      	beq.n	800e0c0 <__cvt+0xac>
 800e07a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e07e:	eb07 0906 	add.w	r9, r7, r6
 800e082:	d110      	bne.n	800e0a6 <__cvt+0x92>
 800e084:	783b      	ldrb	r3, [r7, #0]
 800e086:	2b30      	cmp	r3, #48	; 0x30
 800e088:	d10a      	bne.n	800e0a0 <__cvt+0x8c>
 800e08a:	2200      	movs	r2, #0
 800e08c:	2300      	movs	r3, #0
 800e08e:	4620      	mov	r0, r4
 800e090:	4629      	mov	r1, r5
 800e092:	f7f2 fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 800e096:	b918      	cbnz	r0, 800e0a0 <__cvt+0x8c>
 800e098:	f1c6 0601 	rsb	r6, r6, #1
 800e09c:	f8ca 6000 	str.w	r6, [sl]
 800e0a0:	f8da 3000 	ldr.w	r3, [sl]
 800e0a4:	4499      	add	r9, r3
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	f7f2 fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0b2:	b108      	cbz	r0, 800e0b8 <__cvt+0xa4>
 800e0b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0b8:	2230      	movs	r2, #48	; 0x30
 800e0ba:	9b03      	ldr	r3, [sp, #12]
 800e0bc:	454b      	cmp	r3, r9
 800e0be:	d307      	bcc.n	800e0d0 <__cvt+0xbc>
 800e0c0:	9b03      	ldr	r3, [sp, #12]
 800e0c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0c4:	1bdb      	subs	r3, r3, r7
 800e0c6:	4638      	mov	r0, r7
 800e0c8:	6013      	str	r3, [r2, #0]
 800e0ca:	b004      	add	sp, #16
 800e0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0d0:	1c59      	adds	r1, r3, #1
 800e0d2:	9103      	str	r1, [sp, #12]
 800e0d4:	701a      	strb	r2, [r3, #0]
 800e0d6:	e7f0      	b.n	800e0ba <__cvt+0xa6>

0800e0d8 <__exponent>:
 800e0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2900      	cmp	r1, #0
 800e0de:	bfb8      	it	lt
 800e0e0:	4249      	neglt	r1, r1
 800e0e2:	f803 2b02 	strb.w	r2, [r3], #2
 800e0e6:	bfb4      	ite	lt
 800e0e8:	222d      	movlt	r2, #45	; 0x2d
 800e0ea:	222b      	movge	r2, #43	; 0x2b
 800e0ec:	2909      	cmp	r1, #9
 800e0ee:	7042      	strb	r2, [r0, #1]
 800e0f0:	dd2a      	ble.n	800e148 <__exponent+0x70>
 800e0f2:	f10d 0407 	add.w	r4, sp, #7
 800e0f6:	46a4      	mov	ip, r4
 800e0f8:	270a      	movs	r7, #10
 800e0fa:	46a6      	mov	lr, r4
 800e0fc:	460a      	mov	r2, r1
 800e0fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800e102:	fb07 1516 	mls	r5, r7, r6, r1
 800e106:	3530      	adds	r5, #48	; 0x30
 800e108:	2a63      	cmp	r2, #99	; 0x63
 800e10a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e10e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e112:	4631      	mov	r1, r6
 800e114:	dcf1      	bgt.n	800e0fa <__exponent+0x22>
 800e116:	3130      	adds	r1, #48	; 0x30
 800e118:	f1ae 0502 	sub.w	r5, lr, #2
 800e11c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e120:	1c44      	adds	r4, r0, #1
 800e122:	4629      	mov	r1, r5
 800e124:	4561      	cmp	r1, ip
 800e126:	d30a      	bcc.n	800e13e <__exponent+0x66>
 800e128:	f10d 0209 	add.w	r2, sp, #9
 800e12c:	eba2 020e 	sub.w	r2, r2, lr
 800e130:	4565      	cmp	r5, ip
 800e132:	bf88      	it	hi
 800e134:	2200      	movhi	r2, #0
 800e136:	4413      	add	r3, r2
 800e138:	1a18      	subs	r0, r3, r0
 800e13a:	b003      	add	sp, #12
 800e13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e13e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e142:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e146:	e7ed      	b.n	800e124 <__exponent+0x4c>
 800e148:	2330      	movs	r3, #48	; 0x30
 800e14a:	3130      	adds	r1, #48	; 0x30
 800e14c:	7083      	strb	r3, [r0, #2]
 800e14e:	70c1      	strb	r1, [r0, #3]
 800e150:	1d03      	adds	r3, r0, #4
 800e152:	e7f1      	b.n	800e138 <__exponent+0x60>

0800e154 <_printf_float>:
 800e154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e158:	ed2d 8b02 	vpush	{d8}
 800e15c:	b08d      	sub	sp, #52	; 0x34
 800e15e:	460c      	mov	r4, r1
 800e160:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e164:	4616      	mov	r6, r2
 800e166:	461f      	mov	r7, r3
 800e168:	4605      	mov	r5, r0
 800e16a:	f003 f82f 	bl	80111cc <_localeconv_r>
 800e16e:	f8d0 a000 	ldr.w	sl, [r0]
 800e172:	4650      	mov	r0, sl
 800e174:	f7f2 f82c 	bl	80001d0 <strlen>
 800e178:	2300      	movs	r3, #0
 800e17a:	930a      	str	r3, [sp, #40]	; 0x28
 800e17c:	6823      	ldr	r3, [r4, #0]
 800e17e:	9305      	str	r3, [sp, #20]
 800e180:	f8d8 3000 	ldr.w	r3, [r8]
 800e184:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e188:	3307      	adds	r3, #7
 800e18a:	f023 0307 	bic.w	r3, r3, #7
 800e18e:	f103 0208 	add.w	r2, r3, #8
 800e192:	f8c8 2000 	str.w	r2, [r8]
 800e196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e19e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e1a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e1a6:	9307      	str	r3, [sp, #28]
 800e1a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e1ac:	ee08 0a10 	vmov	s16, r0
 800e1b0:	4b9f      	ldr	r3, [pc, #636]	; (800e430 <_printf_float+0x2dc>)
 800e1b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ba:	f7f2 fcb7 	bl	8000b2c <__aeabi_dcmpun>
 800e1be:	bb88      	cbnz	r0, 800e224 <_printf_float+0xd0>
 800e1c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1c4:	4b9a      	ldr	r3, [pc, #616]	; (800e430 <_printf_float+0x2dc>)
 800e1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ca:	f7f2 fc91 	bl	8000af0 <__aeabi_dcmple>
 800e1ce:	bb48      	cbnz	r0, 800e224 <_printf_float+0xd0>
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	4640      	mov	r0, r8
 800e1d6:	4649      	mov	r1, r9
 800e1d8:	f7f2 fc80 	bl	8000adc <__aeabi_dcmplt>
 800e1dc:	b110      	cbz	r0, 800e1e4 <_printf_float+0x90>
 800e1de:	232d      	movs	r3, #45	; 0x2d
 800e1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1e4:	4b93      	ldr	r3, [pc, #588]	; (800e434 <_printf_float+0x2e0>)
 800e1e6:	4894      	ldr	r0, [pc, #592]	; (800e438 <_printf_float+0x2e4>)
 800e1e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e1ec:	bf94      	ite	ls
 800e1ee:	4698      	movls	r8, r3
 800e1f0:	4680      	movhi	r8, r0
 800e1f2:	2303      	movs	r3, #3
 800e1f4:	6123      	str	r3, [r4, #16]
 800e1f6:	9b05      	ldr	r3, [sp, #20]
 800e1f8:	f023 0204 	bic.w	r2, r3, #4
 800e1fc:	6022      	str	r2, [r4, #0]
 800e1fe:	f04f 0900 	mov.w	r9, #0
 800e202:	9700      	str	r7, [sp, #0]
 800e204:	4633      	mov	r3, r6
 800e206:	aa0b      	add	r2, sp, #44	; 0x2c
 800e208:	4621      	mov	r1, r4
 800e20a:	4628      	mov	r0, r5
 800e20c:	f000 f9d8 	bl	800e5c0 <_printf_common>
 800e210:	3001      	adds	r0, #1
 800e212:	f040 8090 	bne.w	800e336 <_printf_float+0x1e2>
 800e216:	f04f 30ff 	mov.w	r0, #4294967295
 800e21a:	b00d      	add	sp, #52	; 0x34
 800e21c:	ecbd 8b02 	vpop	{d8}
 800e220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e224:	4642      	mov	r2, r8
 800e226:	464b      	mov	r3, r9
 800e228:	4640      	mov	r0, r8
 800e22a:	4649      	mov	r1, r9
 800e22c:	f7f2 fc7e 	bl	8000b2c <__aeabi_dcmpun>
 800e230:	b140      	cbz	r0, 800e244 <_printf_float+0xf0>
 800e232:	464b      	mov	r3, r9
 800e234:	2b00      	cmp	r3, #0
 800e236:	bfbc      	itt	lt
 800e238:	232d      	movlt	r3, #45	; 0x2d
 800e23a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e23e:	487f      	ldr	r0, [pc, #508]	; (800e43c <_printf_float+0x2e8>)
 800e240:	4b7f      	ldr	r3, [pc, #508]	; (800e440 <_printf_float+0x2ec>)
 800e242:	e7d1      	b.n	800e1e8 <_printf_float+0x94>
 800e244:	6863      	ldr	r3, [r4, #4]
 800e246:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e24a:	9206      	str	r2, [sp, #24]
 800e24c:	1c5a      	adds	r2, r3, #1
 800e24e:	d13f      	bne.n	800e2d0 <_printf_float+0x17c>
 800e250:	2306      	movs	r3, #6
 800e252:	6063      	str	r3, [r4, #4]
 800e254:	9b05      	ldr	r3, [sp, #20]
 800e256:	6861      	ldr	r1, [r4, #4]
 800e258:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e25c:	2300      	movs	r3, #0
 800e25e:	9303      	str	r3, [sp, #12]
 800e260:	ab0a      	add	r3, sp, #40	; 0x28
 800e262:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e266:	ab09      	add	r3, sp, #36	; 0x24
 800e268:	ec49 8b10 	vmov	d0, r8, r9
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	6022      	str	r2, [r4, #0]
 800e270:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e274:	4628      	mov	r0, r5
 800e276:	f7ff fecd 	bl	800e014 <__cvt>
 800e27a:	9b06      	ldr	r3, [sp, #24]
 800e27c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e27e:	2b47      	cmp	r3, #71	; 0x47
 800e280:	4680      	mov	r8, r0
 800e282:	d108      	bne.n	800e296 <_printf_float+0x142>
 800e284:	1cc8      	adds	r0, r1, #3
 800e286:	db02      	blt.n	800e28e <_printf_float+0x13a>
 800e288:	6863      	ldr	r3, [r4, #4]
 800e28a:	4299      	cmp	r1, r3
 800e28c:	dd41      	ble.n	800e312 <_printf_float+0x1be>
 800e28e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e292:	fa5f fb8b 	uxtb.w	fp, fp
 800e296:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e29a:	d820      	bhi.n	800e2de <_printf_float+0x18a>
 800e29c:	3901      	subs	r1, #1
 800e29e:	465a      	mov	r2, fp
 800e2a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e2a4:	9109      	str	r1, [sp, #36]	; 0x24
 800e2a6:	f7ff ff17 	bl	800e0d8 <__exponent>
 800e2aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2ac:	1813      	adds	r3, r2, r0
 800e2ae:	2a01      	cmp	r2, #1
 800e2b0:	4681      	mov	r9, r0
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	dc02      	bgt.n	800e2bc <_printf_float+0x168>
 800e2b6:	6822      	ldr	r2, [r4, #0]
 800e2b8:	07d2      	lsls	r2, r2, #31
 800e2ba:	d501      	bpl.n	800e2c0 <_printf_float+0x16c>
 800e2bc:	3301      	adds	r3, #1
 800e2be:	6123      	str	r3, [r4, #16]
 800e2c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d09c      	beq.n	800e202 <_printf_float+0xae>
 800e2c8:	232d      	movs	r3, #45	; 0x2d
 800e2ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2ce:	e798      	b.n	800e202 <_printf_float+0xae>
 800e2d0:	9a06      	ldr	r2, [sp, #24]
 800e2d2:	2a47      	cmp	r2, #71	; 0x47
 800e2d4:	d1be      	bne.n	800e254 <_printf_float+0x100>
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d1bc      	bne.n	800e254 <_printf_float+0x100>
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e7b9      	b.n	800e252 <_printf_float+0xfe>
 800e2de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e2e2:	d118      	bne.n	800e316 <_printf_float+0x1c2>
 800e2e4:	2900      	cmp	r1, #0
 800e2e6:	6863      	ldr	r3, [r4, #4]
 800e2e8:	dd0b      	ble.n	800e302 <_printf_float+0x1ae>
 800e2ea:	6121      	str	r1, [r4, #16]
 800e2ec:	b913      	cbnz	r3, 800e2f4 <_printf_float+0x1a0>
 800e2ee:	6822      	ldr	r2, [r4, #0]
 800e2f0:	07d0      	lsls	r0, r2, #31
 800e2f2:	d502      	bpl.n	800e2fa <_printf_float+0x1a6>
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	440b      	add	r3, r1
 800e2f8:	6123      	str	r3, [r4, #16]
 800e2fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800e2fc:	f04f 0900 	mov.w	r9, #0
 800e300:	e7de      	b.n	800e2c0 <_printf_float+0x16c>
 800e302:	b913      	cbnz	r3, 800e30a <_printf_float+0x1b6>
 800e304:	6822      	ldr	r2, [r4, #0]
 800e306:	07d2      	lsls	r2, r2, #31
 800e308:	d501      	bpl.n	800e30e <_printf_float+0x1ba>
 800e30a:	3302      	adds	r3, #2
 800e30c:	e7f4      	b.n	800e2f8 <_printf_float+0x1a4>
 800e30e:	2301      	movs	r3, #1
 800e310:	e7f2      	b.n	800e2f8 <_printf_float+0x1a4>
 800e312:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e318:	4299      	cmp	r1, r3
 800e31a:	db05      	blt.n	800e328 <_printf_float+0x1d4>
 800e31c:	6823      	ldr	r3, [r4, #0]
 800e31e:	6121      	str	r1, [r4, #16]
 800e320:	07d8      	lsls	r0, r3, #31
 800e322:	d5ea      	bpl.n	800e2fa <_printf_float+0x1a6>
 800e324:	1c4b      	adds	r3, r1, #1
 800e326:	e7e7      	b.n	800e2f8 <_printf_float+0x1a4>
 800e328:	2900      	cmp	r1, #0
 800e32a:	bfd4      	ite	le
 800e32c:	f1c1 0202 	rsble	r2, r1, #2
 800e330:	2201      	movgt	r2, #1
 800e332:	4413      	add	r3, r2
 800e334:	e7e0      	b.n	800e2f8 <_printf_float+0x1a4>
 800e336:	6823      	ldr	r3, [r4, #0]
 800e338:	055a      	lsls	r2, r3, #21
 800e33a:	d407      	bmi.n	800e34c <_printf_float+0x1f8>
 800e33c:	6923      	ldr	r3, [r4, #16]
 800e33e:	4642      	mov	r2, r8
 800e340:	4631      	mov	r1, r6
 800e342:	4628      	mov	r0, r5
 800e344:	47b8      	blx	r7
 800e346:	3001      	adds	r0, #1
 800e348:	d12c      	bne.n	800e3a4 <_printf_float+0x250>
 800e34a:	e764      	b.n	800e216 <_printf_float+0xc2>
 800e34c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e350:	f240 80e0 	bls.w	800e514 <_printf_float+0x3c0>
 800e354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e358:	2200      	movs	r2, #0
 800e35a:	2300      	movs	r3, #0
 800e35c:	f7f2 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800e360:	2800      	cmp	r0, #0
 800e362:	d034      	beq.n	800e3ce <_printf_float+0x27a>
 800e364:	4a37      	ldr	r2, [pc, #220]	; (800e444 <_printf_float+0x2f0>)
 800e366:	2301      	movs	r3, #1
 800e368:	4631      	mov	r1, r6
 800e36a:	4628      	mov	r0, r5
 800e36c:	47b8      	blx	r7
 800e36e:	3001      	adds	r0, #1
 800e370:	f43f af51 	beq.w	800e216 <_printf_float+0xc2>
 800e374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e378:	429a      	cmp	r2, r3
 800e37a:	db02      	blt.n	800e382 <_printf_float+0x22e>
 800e37c:	6823      	ldr	r3, [r4, #0]
 800e37e:	07d8      	lsls	r0, r3, #31
 800e380:	d510      	bpl.n	800e3a4 <_printf_float+0x250>
 800e382:	ee18 3a10 	vmov	r3, s16
 800e386:	4652      	mov	r2, sl
 800e388:	4631      	mov	r1, r6
 800e38a:	4628      	mov	r0, r5
 800e38c:	47b8      	blx	r7
 800e38e:	3001      	adds	r0, #1
 800e390:	f43f af41 	beq.w	800e216 <_printf_float+0xc2>
 800e394:	f04f 0800 	mov.w	r8, #0
 800e398:	f104 091a 	add.w	r9, r4, #26
 800e39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	4543      	cmp	r3, r8
 800e3a2:	dc09      	bgt.n	800e3b8 <_printf_float+0x264>
 800e3a4:	6823      	ldr	r3, [r4, #0]
 800e3a6:	079b      	lsls	r3, r3, #30
 800e3a8:	f100 8105 	bmi.w	800e5b6 <_printf_float+0x462>
 800e3ac:	68e0      	ldr	r0, [r4, #12]
 800e3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3b0:	4298      	cmp	r0, r3
 800e3b2:	bfb8      	it	lt
 800e3b4:	4618      	movlt	r0, r3
 800e3b6:	e730      	b.n	800e21a <_printf_float+0xc6>
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	464a      	mov	r2, r9
 800e3bc:	4631      	mov	r1, r6
 800e3be:	4628      	mov	r0, r5
 800e3c0:	47b8      	blx	r7
 800e3c2:	3001      	adds	r0, #1
 800e3c4:	f43f af27 	beq.w	800e216 <_printf_float+0xc2>
 800e3c8:	f108 0801 	add.w	r8, r8, #1
 800e3cc:	e7e6      	b.n	800e39c <_printf_float+0x248>
 800e3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	dc39      	bgt.n	800e448 <_printf_float+0x2f4>
 800e3d4:	4a1b      	ldr	r2, [pc, #108]	; (800e444 <_printf_float+0x2f0>)
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	4631      	mov	r1, r6
 800e3da:	4628      	mov	r0, r5
 800e3dc:	47b8      	blx	r7
 800e3de:	3001      	adds	r0, #1
 800e3e0:	f43f af19 	beq.w	800e216 <_printf_float+0xc2>
 800e3e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	d102      	bne.n	800e3f2 <_printf_float+0x29e>
 800e3ec:	6823      	ldr	r3, [r4, #0]
 800e3ee:	07d9      	lsls	r1, r3, #31
 800e3f0:	d5d8      	bpl.n	800e3a4 <_printf_float+0x250>
 800e3f2:	ee18 3a10 	vmov	r3, s16
 800e3f6:	4652      	mov	r2, sl
 800e3f8:	4631      	mov	r1, r6
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	47b8      	blx	r7
 800e3fe:	3001      	adds	r0, #1
 800e400:	f43f af09 	beq.w	800e216 <_printf_float+0xc2>
 800e404:	f04f 0900 	mov.w	r9, #0
 800e408:	f104 0a1a 	add.w	sl, r4, #26
 800e40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e40e:	425b      	negs	r3, r3
 800e410:	454b      	cmp	r3, r9
 800e412:	dc01      	bgt.n	800e418 <_printf_float+0x2c4>
 800e414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e416:	e792      	b.n	800e33e <_printf_float+0x1ea>
 800e418:	2301      	movs	r3, #1
 800e41a:	4652      	mov	r2, sl
 800e41c:	4631      	mov	r1, r6
 800e41e:	4628      	mov	r0, r5
 800e420:	47b8      	blx	r7
 800e422:	3001      	adds	r0, #1
 800e424:	f43f aef7 	beq.w	800e216 <_printf_float+0xc2>
 800e428:	f109 0901 	add.w	r9, r9, #1
 800e42c:	e7ee      	b.n	800e40c <_printf_float+0x2b8>
 800e42e:	bf00      	nop
 800e430:	7fefffff 	.word	0x7fefffff
 800e434:	0801430c 	.word	0x0801430c
 800e438:	08014310 	.word	0x08014310
 800e43c:	08014318 	.word	0x08014318
 800e440:	08014314 	.word	0x08014314
 800e444:	0801431c 	.word	0x0801431c
 800e448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e44a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e44c:	429a      	cmp	r2, r3
 800e44e:	bfa8      	it	ge
 800e450:	461a      	movge	r2, r3
 800e452:	2a00      	cmp	r2, #0
 800e454:	4691      	mov	r9, r2
 800e456:	dc37      	bgt.n	800e4c8 <_printf_float+0x374>
 800e458:	f04f 0b00 	mov.w	fp, #0
 800e45c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e460:	f104 021a 	add.w	r2, r4, #26
 800e464:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e466:	9305      	str	r3, [sp, #20]
 800e468:	eba3 0309 	sub.w	r3, r3, r9
 800e46c:	455b      	cmp	r3, fp
 800e46e:	dc33      	bgt.n	800e4d8 <_printf_float+0x384>
 800e470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e474:	429a      	cmp	r2, r3
 800e476:	db3b      	blt.n	800e4f0 <_printf_float+0x39c>
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	07da      	lsls	r2, r3, #31
 800e47c:	d438      	bmi.n	800e4f0 <_printf_float+0x39c>
 800e47e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e480:	9b05      	ldr	r3, [sp, #20]
 800e482:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e484:	1ad3      	subs	r3, r2, r3
 800e486:	eba2 0901 	sub.w	r9, r2, r1
 800e48a:	4599      	cmp	r9, r3
 800e48c:	bfa8      	it	ge
 800e48e:	4699      	movge	r9, r3
 800e490:	f1b9 0f00 	cmp.w	r9, #0
 800e494:	dc35      	bgt.n	800e502 <_printf_float+0x3ae>
 800e496:	f04f 0800 	mov.w	r8, #0
 800e49a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e49e:	f104 0a1a 	add.w	sl, r4, #26
 800e4a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4a6:	1a9b      	subs	r3, r3, r2
 800e4a8:	eba3 0309 	sub.w	r3, r3, r9
 800e4ac:	4543      	cmp	r3, r8
 800e4ae:	f77f af79 	ble.w	800e3a4 <_printf_float+0x250>
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	4652      	mov	r2, sl
 800e4b6:	4631      	mov	r1, r6
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	47b8      	blx	r7
 800e4bc:	3001      	adds	r0, #1
 800e4be:	f43f aeaa 	beq.w	800e216 <_printf_float+0xc2>
 800e4c2:	f108 0801 	add.w	r8, r8, #1
 800e4c6:	e7ec      	b.n	800e4a2 <_printf_float+0x34e>
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	4631      	mov	r1, r6
 800e4cc:	4642      	mov	r2, r8
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	47b8      	blx	r7
 800e4d2:	3001      	adds	r0, #1
 800e4d4:	d1c0      	bne.n	800e458 <_printf_float+0x304>
 800e4d6:	e69e      	b.n	800e216 <_printf_float+0xc2>
 800e4d8:	2301      	movs	r3, #1
 800e4da:	4631      	mov	r1, r6
 800e4dc:	4628      	mov	r0, r5
 800e4de:	9205      	str	r2, [sp, #20]
 800e4e0:	47b8      	blx	r7
 800e4e2:	3001      	adds	r0, #1
 800e4e4:	f43f ae97 	beq.w	800e216 <_printf_float+0xc2>
 800e4e8:	9a05      	ldr	r2, [sp, #20]
 800e4ea:	f10b 0b01 	add.w	fp, fp, #1
 800e4ee:	e7b9      	b.n	800e464 <_printf_float+0x310>
 800e4f0:	ee18 3a10 	vmov	r3, s16
 800e4f4:	4652      	mov	r2, sl
 800e4f6:	4631      	mov	r1, r6
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	47b8      	blx	r7
 800e4fc:	3001      	adds	r0, #1
 800e4fe:	d1be      	bne.n	800e47e <_printf_float+0x32a>
 800e500:	e689      	b.n	800e216 <_printf_float+0xc2>
 800e502:	9a05      	ldr	r2, [sp, #20]
 800e504:	464b      	mov	r3, r9
 800e506:	4442      	add	r2, r8
 800e508:	4631      	mov	r1, r6
 800e50a:	4628      	mov	r0, r5
 800e50c:	47b8      	blx	r7
 800e50e:	3001      	adds	r0, #1
 800e510:	d1c1      	bne.n	800e496 <_printf_float+0x342>
 800e512:	e680      	b.n	800e216 <_printf_float+0xc2>
 800e514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e516:	2a01      	cmp	r2, #1
 800e518:	dc01      	bgt.n	800e51e <_printf_float+0x3ca>
 800e51a:	07db      	lsls	r3, r3, #31
 800e51c:	d538      	bpl.n	800e590 <_printf_float+0x43c>
 800e51e:	2301      	movs	r3, #1
 800e520:	4642      	mov	r2, r8
 800e522:	4631      	mov	r1, r6
 800e524:	4628      	mov	r0, r5
 800e526:	47b8      	blx	r7
 800e528:	3001      	adds	r0, #1
 800e52a:	f43f ae74 	beq.w	800e216 <_printf_float+0xc2>
 800e52e:	ee18 3a10 	vmov	r3, s16
 800e532:	4652      	mov	r2, sl
 800e534:	4631      	mov	r1, r6
 800e536:	4628      	mov	r0, r5
 800e538:	47b8      	blx	r7
 800e53a:	3001      	adds	r0, #1
 800e53c:	f43f ae6b 	beq.w	800e216 <_printf_float+0xc2>
 800e540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e544:	2200      	movs	r2, #0
 800e546:	2300      	movs	r3, #0
 800e548:	f7f2 fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 800e54c:	b9d8      	cbnz	r0, 800e586 <_printf_float+0x432>
 800e54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e550:	f108 0201 	add.w	r2, r8, #1
 800e554:	3b01      	subs	r3, #1
 800e556:	4631      	mov	r1, r6
 800e558:	4628      	mov	r0, r5
 800e55a:	47b8      	blx	r7
 800e55c:	3001      	adds	r0, #1
 800e55e:	d10e      	bne.n	800e57e <_printf_float+0x42a>
 800e560:	e659      	b.n	800e216 <_printf_float+0xc2>
 800e562:	2301      	movs	r3, #1
 800e564:	4652      	mov	r2, sl
 800e566:	4631      	mov	r1, r6
 800e568:	4628      	mov	r0, r5
 800e56a:	47b8      	blx	r7
 800e56c:	3001      	adds	r0, #1
 800e56e:	f43f ae52 	beq.w	800e216 <_printf_float+0xc2>
 800e572:	f108 0801 	add.w	r8, r8, #1
 800e576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e578:	3b01      	subs	r3, #1
 800e57a:	4543      	cmp	r3, r8
 800e57c:	dcf1      	bgt.n	800e562 <_printf_float+0x40e>
 800e57e:	464b      	mov	r3, r9
 800e580:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e584:	e6dc      	b.n	800e340 <_printf_float+0x1ec>
 800e586:	f04f 0800 	mov.w	r8, #0
 800e58a:	f104 0a1a 	add.w	sl, r4, #26
 800e58e:	e7f2      	b.n	800e576 <_printf_float+0x422>
 800e590:	2301      	movs	r3, #1
 800e592:	4642      	mov	r2, r8
 800e594:	e7df      	b.n	800e556 <_printf_float+0x402>
 800e596:	2301      	movs	r3, #1
 800e598:	464a      	mov	r2, r9
 800e59a:	4631      	mov	r1, r6
 800e59c:	4628      	mov	r0, r5
 800e59e:	47b8      	blx	r7
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	f43f ae38 	beq.w	800e216 <_printf_float+0xc2>
 800e5a6:	f108 0801 	add.w	r8, r8, #1
 800e5aa:	68e3      	ldr	r3, [r4, #12]
 800e5ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5ae:	1a5b      	subs	r3, r3, r1
 800e5b0:	4543      	cmp	r3, r8
 800e5b2:	dcf0      	bgt.n	800e596 <_printf_float+0x442>
 800e5b4:	e6fa      	b.n	800e3ac <_printf_float+0x258>
 800e5b6:	f04f 0800 	mov.w	r8, #0
 800e5ba:	f104 0919 	add.w	r9, r4, #25
 800e5be:	e7f4      	b.n	800e5aa <_printf_float+0x456>

0800e5c0 <_printf_common>:
 800e5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5c4:	4616      	mov	r6, r2
 800e5c6:	4699      	mov	r9, r3
 800e5c8:	688a      	ldr	r2, [r1, #8]
 800e5ca:	690b      	ldr	r3, [r1, #16]
 800e5cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	bfb8      	it	lt
 800e5d4:	4613      	movlt	r3, r2
 800e5d6:	6033      	str	r3, [r6, #0]
 800e5d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5dc:	4607      	mov	r7, r0
 800e5de:	460c      	mov	r4, r1
 800e5e0:	b10a      	cbz	r2, 800e5e6 <_printf_common+0x26>
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	6033      	str	r3, [r6, #0]
 800e5e6:	6823      	ldr	r3, [r4, #0]
 800e5e8:	0699      	lsls	r1, r3, #26
 800e5ea:	bf42      	ittt	mi
 800e5ec:	6833      	ldrmi	r3, [r6, #0]
 800e5ee:	3302      	addmi	r3, #2
 800e5f0:	6033      	strmi	r3, [r6, #0]
 800e5f2:	6825      	ldr	r5, [r4, #0]
 800e5f4:	f015 0506 	ands.w	r5, r5, #6
 800e5f8:	d106      	bne.n	800e608 <_printf_common+0x48>
 800e5fa:	f104 0a19 	add.w	sl, r4, #25
 800e5fe:	68e3      	ldr	r3, [r4, #12]
 800e600:	6832      	ldr	r2, [r6, #0]
 800e602:	1a9b      	subs	r3, r3, r2
 800e604:	42ab      	cmp	r3, r5
 800e606:	dc26      	bgt.n	800e656 <_printf_common+0x96>
 800e608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e60c:	1e13      	subs	r3, r2, #0
 800e60e:	6822      	ldr	r2, [r4, #0]
 800e610:	bf18      	it	ne
 800e612:	2301      	movne	r3, #1
 800e614:	0692      	lsls	r2, r2, #26
 800e616:	d42b      	bmi.n	800e670 <_printf_common+0xb0>
 800e618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e61c:	4649      	mov	r1, r9
 800e61e:	4638      	mov	r0, r7
 800e620:	47c0      	blx	r8
 800e622:	3001      	adds	r0, #1
 800e624:	d01e      	beq.n	800e664 <_printf_common+0xa4>
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	68e5      	ldr	r5, [r4, #12]
 800e62a:	6832      	ldr	r2, [r6, #0]
 800e62c:	f003 0306 	and.w	r3, r3, #6
 800e630:	2b04      	cmp	r3, #4
 800e632:	bf08      	it	eq
 800e634:	1aad      	subeq	r5, r5, r2
 800e636:	68a3      	ldr	r3, [r4, #8]
 800e638:	6922      	ldr	r2, [r4, #16]
 800e63a:	bf0c      	ite	eq
 800e63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e640:	2500      	movne	r5, #0
 800e642:	4293      	cmp	r3, r2
 800e644:	bfc4      	itt	gt
 800e646:	1a9b      	subgt	r3, r3, r2
 800e648:	18ed      	addgt	r5, r5, r3
 800e64a:	2600      	movs	r6, #0
 800e64c:	341a      	adds	r4, #26
 800e64e:	42b5      	cmp	r5, r6
 800e650:	d11a      	bne.n	800e688 <_printf_common+0xc8>
 800e652:	2000      	movs	r0, #0
 800e654:	e008      	b.n	800e668 <_printf_common+0xa8>
 800e656:	2301      	movs	r3, #1
 800e658:	4652      	mov	r2, sl
 800e65a:	4649      	mov	r1, r9
 800e65c:	4638      	mov	r0, r7
 800e65e:	47c0      	blx	r8
 800e660:	3001      	adds	r0, #1
 800e662:	d103      	bne.n	800e66c <_printf_common+0xac>
 800e664:	f04f 30ff 	mov.w	r0, #4294967295
 800e668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e66c:	3501      	adds	r5, #1
 800e66e:	e7c6      	b.n	800e5fe <_printf_common+0x3e>
 800e670:	18e1      	adds	r1, r4, r3
 800e672:	1c5a      	adds	r2, r3, #1
 800e674:	2030      	movs	r0, #48	; 0x30
 800e676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e67a:	4422      	add	r2, r4
 800e67c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e684:	3302      	adds	r3, #2
 800e686:	e7c7      	b.n	800e618 <_printf_common+0x58>
 800e688:	2301      	movs	r3, #1
 800e68a:	4622      	mov	r2, r4
 800e68c:	4649      	mov	r1, r9
 800e68e:	4638      	mov	r0, r7
 800e690:	47c0      	blx	r8
 800e692:	3001      	adds	r0, #1
 800e694:	d0e6      	beq.n	800e664 <_printf_common+0xa4>
 800e696:	3601      	adds	r6, #1
 800e698:	e7d9      	b.n	800e64e <_printf_common+0x8e>
	...

0800e69c <_printf_i>:
 800e69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6a0:	460c      	mov	r4, r1
 800e6a2:	4691      	mov	r9, r2
 800e6a4:	7e27      	ldrb	r7, [r4, #24]
 800e6a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e6a8:	2f78      	cmp	r7, #120	; 0x78
 800e6aa:	4680      	mov	r8, r0
 800e6ac:	469a      	mov	sl, r3
 800e6ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6b2:	d807      	bhi.n	800e6c4 <_printf_i+0x28>
 800e6b4:	2f62      	cmp	r7, #98	; 0x62
 800e6b6:	d80a      	bhi.n	800e6ce <_printf_i+0x32>
 800e6b8:	2f00      	cmp	r7, #0
 800e6ba:	f000 80d8 	beq.w	800e86e <_printf_i+0x1d2>
 800e6be:	2f58      	cmp	r7, #88	; 0x58
 800e6c0:	f000 80a3 	beq.w	800e80a <_printf_i+0x16e>
 800e6c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e6c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6cc:	e03a      	b.n	800e744 <_printf_i+0xa8>
 800e6ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6d2:	2b15      	cmp	r3, #21
 800e6d4:	d8f6      	bhi.n	800e6c4 <_printf_i+0x28>
 800e6d6:	a001      	add	r0, pc, #4	; (adr r0, 800e6dc <_printf_i+0x40>)
 800e6d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e6dc:	0800e735 	.word	0x0800e735
 800e6e0:	0800e749 	.word	0x0800e749
 800e6e4:	0800e6c5 	.word	0x0800e6c5
 800e6e8:	0800e6c5 	.word	0x0800e6c5
 800e6ec:	0800e6c5 	.word	0x0800e6c5
 800e6f0:	0800e6c5 	.word	0x0800e6c5
 800e6f4:	0800e749 	.word	0x0800e749
 800e6f8:	0800e6c5 	.word	0x0800e6c5
 800e6fc:	0800e6c5 	.word	0x0800e6c5
 800e700:	0800e6c5 	.word	0x0800e6c5
 800e704:	0800e6c5 	.word	0x0800e6c5
 800e708:	0800e855 	.word	0x0800e855
 800e70c:	0800e779 	.word	0x0800e779
 800e710:	0800e837 	.word	0x0800e837
 800e714:	0800e6c5 	.word	0x0800e6c5
 800e718:	0800e6c5 	.word	0x0800e6c5
 800e71c:	0800e877 	.word	0x0800e877
 800e720:	0800e6c5 	.word	0x0800e6c5
 800e724:	0800e779 	.word	0x0800e779
 800e728:	0800e6c5 	.word	0x0800e6c5
 800e72c:	0800e6c5 	.word	0x0800e6c5
 800e730:	0800e83f 	.word	0x0800e83f
 800e734:	680b      	ldr	r3, [r1, #0]
 800e736:	1d1a      	adds	r2, r3, #4
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	600a      	str	r2, [r1, #0]
 800e73c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e744:	2301      	movs	r3, #1
 800e746:	e0a3      	b.n	800e890 <_printf_i+0x1f4>
 800e748:	6825      	ldr	r5, [r4, #0]
 800e74a:	6808      	ldr	r0, [r1, #0]
 800e74c:	062e      	lsls	r6, r5, #24
 800e74e:	f100 0304 	add.w	r3, r0, #4
 800e752:	d50a      	bpl.n	800e76a <_printf_i+0xce>
 800e754:	6805      	ldr	r5, [r0, #0]
 800e756:	600b      	str	r3, [r1, #0]
 800e758:	2d00      	cmp	r5, #0
 800e75a:	da03      	bge.n	800e764 <_printf_i+0xc8>
 800e75c:	232d      	movs	r3, #45	; 0x2d
 800e75e:	426d      	negs	r5, r5
 800e760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e764:	485e      	ldr	r0, [pc, #376]	; (800e8e0 <_printf_i+0x244>)
 800e766:	230a      	movs	r3, #10
 800e768:	e019      	b.n	800e79e <_printf_i+0x102>
 800e76a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e76e:	6805      	ldr	r5, [r0, #0]
 800e770:	600b      	str	r3, [r1, #0]
 800e772:	bf18      	it	ne
 800e774:	b22d      	sxthne	r5, r5
 800e776:	e7ef      	b.n	800e758 <_printf_i+0xbc>
 800e778:	680b      	ldr	r3, [r1, #0]
 800e77a:	6825      	ldr	r5, [r4, #0]
 800e77c:	1d18      	adds	r0, r3, #4
 800e77e:	6008      	str	r0, [r1, #0]
 800e780:	0628      	lsls	r0, r5, #24
 800e782:	d501      	bpl.n	800e788 <_printf_i+0xec>
 800e784:	681d      	ldr	r5, [r3, #0]
 800e786:	e002      	b.n	800e78e <_printf_i+0xf2>
 800e788:	0669      	lsls	r1, r5, #25
 800e78a:	d5fb      	bpl.n	800e784 <_printf_i+0xe8>
 800e78c:	881d      	ldrh	r5, [r3, #0]
 800e78e:	4854      	ldr	r0, [pc, #336]	; (800e8e0 <_printf_i+0x244>)
 800e790:	2f6f      	cmp	r7, #111	; 0x6f
 800e792:	bf0c      	ite	eq
 800e794:	2308      	moveq	r3, #8
 800e796:	230a      	movne	r3, #10
 800e798:	2100      	movs	r1, #0
 800e79a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e79e:	6866      	ldr	r6, [r4, #4]
 800e7a0:	60a6      	str	r6, [r4, #8]
 800e7a2:	2e00      	cmp	r6, #0
 800e7a4:	bfa2      	ittt	ge
 800e7a6:	6821      	ldrge	r1, [r4, #0]
 800e7a8:	f021 0104 	bicge.w	r1, r1, #4
 800e7ac:	6021      	strge	r1, [r4, #0]
 800e7ae:	b90d      	cbnz	r5, 800e7b4 <_printf_i+0x118>
 800e7b0:	2e00      	cmp	r6, #0
 800e7b2:	d04d      	beq.n	800e850 <_printf_i+0x1b4>
 800e7b4:	4616      	mov	r6, r2
 800e7b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e7ba:	fb03 5711 	mls	r7, r3, r1, r5
 800e7be:	5dc7      	ldrb	r7, [r0, r7]
 800e7c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7c4:	462f      	mov	r7, r5
 800e7c6:	42bb      	cmp	r3, r7
 800e7c8:	460d      	mov	r5, r1
 800e7ca:	d9f4      	bls.n	800e7b6 <_printf_i+0x11a>
 800e7cc:	2b08      	cmp	r3, #8
 800e7ce:	d10b      	bne.n	800e7e8 <_printf_i+0x14c>
 800e7d0:	6823      	ldr	r3, [r4, #0]
 800e7d2:	07df      	lsls	r7, r3, #31
 800e7d4:	d508      	bpl.n	800e7e8 <_printf_i+0x14c>
 800e7d6:	6923      	ldr	r3, [r4, #16]
 800e7d8:	6861      	ldr	r1, [r4, #4]
 800e7da:	4299      	cmp	r1, r3
 800e7dc:	bfde      	ittt	le
 800e7de:	2330      	movle	r3, #48	; 0x30
 800e7e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7e8:	1b92      	subs	r2, r2, r6
 800e7ea:	6122      	str	r2, [r4, #16]
 800e7ec:	f8cd a000 	str.w	sl, [sp]
 800e7f0:	464b      	mov	r3, r9
 800e7f2:	aa03      	add	r2, sp, #12
 800e7f4:	4621      	mov	r1, r4
 800e7f6:	4640      	mov	r0, r8
 800e7f8:	f7ff fee2 	bl	800e5c0 <_printf_common>
 800e7fc:	3001      	adds	r0, #1
 800e7fe:	d14c      	bne.n	800e89a <_printf_i+0x1fe>
 800e800:	f04f 30ff 	mov.w	r0, #4294967295
 800e804:	b004      	add	sp, #16
 800e806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e80a:	4835      	ldr	r0, [pc, #212]	; (800e8e0 <_printf_i+0x244>)
 800e80c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	680e      	ldr	r6, [r1, #0]
 800e814:	061f      	lsls	r7, r3, #24
 800e816:	f856 5b04 	ldr.w	r5, [r6], #4
 800e81a:	600e      	str	r6, [r1, #0]
 800e81c:	d514      	bpl.n	800e848 <_printf_i+0x1ac>
 800e81e:	07d9      	lsls	r1, r3, #31
 800e820:	bf44      	itt	mi
 800e822:	f043 0320 	orrmi.w	r3, r3, #32
 800e826:	6023      	strmi	r3, [r4, #0]
 800e828:	b91d      	cbnz	r5, 800e832 <_printf_i+0x196>
 800e82a:	6823      	ldr	r3, [r4, #0]
 800e82c:	f023 0320 	bic.w	r3, r3, #32
 800e830:	6023      	str	r3, [r4, #0]
 800e832:	2310      	movs	r3, #16
 800e834:	e7b0      	b.n	800e798 <_printf_i+0xfc>
 800e836:	6823      	ldr	r3, [r4, #0]
 800e838:	f043 0320 	orr.w	r3, r3, #32
 800e83c:	6023      	str	r3, [r4, #0]
 800e83e:	2378      	movs	r3, #120	; 0x78
 800e840:	4828      	ldr	r0, [pc, #160]	; (800e8e4 <_printf_i+0x248>)
 800e842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e846:	e7e3      	b.n	800e810 <_printf_i+0x174>
 800e848:	065e      	lsls	r6, r3, #25
 800e84a:	bf48      	it	mi
 800e84c:	b2ad      	uxthmi	r5, r5
 800e84e:	e7e6      	b.n	800e81e <_printf_i+0x182>
 800e850:	4616      	mov	r6, r2
 800e852:	e7bb      	b.n	800e7cc <_printf_i+0x130>
 800e854:	680b      	ldr	r3, [r1, #0]
 800e856:	6826      	ldr	r6, [r4, #0]
 800e858:	6960      	ldr	r0, [r4, #20]
 800e85a:	1d1d      	adds	r5, r3, #4
 800e85c:	600d      	str	r5, [r1, #0]
 800e85e:	0635      	lsls	r5, r6, #24
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	d501      	bpl.n	800e868 <_printf_i+0x1cc>
 800e864:	6018      	str	r0, [r3, #0]
 800e866:	e002      	b.n	800e86e <_printf_i+0x1d2>
 800e868:	0671      	lsls	r1, r6, #25
 800e86a:	d5fb      	bpl.n	800e864 <_printf_i+0x1c8>
 800e86c:	8018      	strh	r0, [r3, #0]
 800e86e:	2300      	movs	r3, #0
 800e870:	6123      	str	r3, [r4, #16]
 800e872:	4616      	mov	r6, r2
 800e874:	e7ba      	b.n	800e7ec <_printf_i+0x150>
 800e876:	680b      	ldr	r3, [r1, #0]
 800e878:	1d1a      	adds	r2, r3, #4
 800e87a:	600a      	str	r2, [r1, #0]
 800e87c:	681e      	ldr	r6, [r3, #0]
 800e87e:	6862      	ldr	r2, [r4, #4]
 800e880:	2100      	movs	r1, #0
 800e882:	4630      	mov	r0, r6
 800e884:	f7f1 fcac 	bl	80001e0 <memchr>
 800e888:	b108      	cbz	r0, 800e88e <_printf_i+0x1f2>
 800e88a:	1b80      	subs	r0, r0, r6
 800e88c:	6060      	str	r0, [r4, #4]
 800e88e:	6863      	ldr	r3, [r4, #4]
 800e890:	6123      	str	r3, [r4, #16]
 800e892:	2300      	movs	r3, #0
 800e894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e898:	e7a8      	b.n	800e7ec <_printf_i+0x150>
 800e89a:	6923      	ldr	r3, [r4, #16]
 800e89c:	4632      	mov	r2, r6
 800e89e:	4649      	mov	r1, r9
 800e8a0:	4640      	mov	r0, r8
 800e8a2:	47d0      	blx	sl
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	d0ab      	beq.n	800e800 <_printf_i+0x164>
 800e8a8:	6823      	ldr	r3, [r4, #0]
 800e8aa:	079b      	lsls	r3, r3, #30
 800e8ac:	d413      	bmi.n	800e8d6 <_printf_i+0x23a>
 800e8ae:	68e0      	ldr	r0, [r4, #12]
 800e8b0:	9b03      	ldr	r3, [sp, #12]
 800e8b2:	4298      	cmp	r0, r3
 800e8b4:	bfb8      	it	lt
 800e8b6:	4618      	movlt	r0, r3
 800e8b8:	e7a4      	b.n	800e804 <_printf_i+0x168>
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	4632      	mov	r2, r6
 800e8be:	4649      	mov	r1, r9
 800e8c0:	4640      	mov	r0, r8
 800e8c2:	47d0      	blx	sl
 800e8c4:	3001      	adds	r0, #1
 800e8c6:	d09b      	beq.n	800e800 <_printf_i+0x164>
 800e8c8:	3501      	adds	r5, #1
 800e8ca:	68e3      	ldr	r3, [r4, #12]
 800e8cc:	9903      	ldr	r1, [sp, #12]
 800e8ce:	1a5b      	subs	r3, r3, r1
 800e8d0:	42ab      	cmp	r3, r5
 800e8d2:	dcf2      	bgt.n	800e8ba <_printf_i+0x21e>
 800e8d4:	e7eb      	b.n	800e8ae <_printf_i+0x212>
 800e8d6:	2500      	movs	r5, #0
 800e8d8:	f104 0619 	add.w	r6, r4, #25
 800e8dc:	e7f5      	b.n	800e8ca <_printf_i+0x22e>
 800e8de:	bf00      	nop
 800e8e0:	0801431e 	.word	0x0801431e
 800e8e4:	0801432f 	.word	0x0801432f

0800e8e8 <_scanf_float>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	b087      	sub	sp, #28
 800e8ee:	4617      	mov	r7, r2
 800e8f0:	9303      	str	r3, [sp, #12]
 800e8f2:	688b      	ldr	r3, [r1, #8]
 800e8f4:	1e5a      	subs	r2, r3, #1
 800e8f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e8fa:	bf83      	ittte	hi
 800e8fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e900:	195b      	addhi	r3, r3, r5
 800e902:	9302      	strhi	r3, [sp, #8]
 800e904:	2300      	movls	r3, #0
 800e906:	bf86      	itte	hi
 800e908:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e90c:	608b      	strhi	r3, [r1, #8]
 800e90e:	9302      	strls	r3, [sp, #8]
 800e910:	680b      	ldr	r3, [r1, #0]
 800e912:	468b      	mov	fp, r1
 800e914:	2500      	movs	r5, #0
 800e916:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e91a:	f84b 3b1c 	str.w	r3, [fp], #28
 800e91e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e922:	4680      	mov	r8, r0
 800e924:	460c      	mov	r4, r1
 800e926:	465e      	mov	r6, fp
 800e928:	46aa      	mov	sl, r5
 800e92a:	46a9      	mov	r9, r5
 800e92c:	9501      	str	r5, [sp, #4]
 800e92e:	68a2      	ldr	r2, [r4, #8]
 800e930:	b152      	cbz	r2, 800e948 <_scanf_float+0x60>
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2b4e      	cmp	r3, #78	; 0x4e
 800e938:	d864      	bhi.n	800ea04 <_scanf_float+0x11c>
 800e93a:	2b40      	cmp	r3, #64	; 0x40
 800e93c:	d83c      	bhi.n	800e9b8 <_scanf_float+0xd0>
 800e93e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e942:	b2c8      	uxtb	r0, r1
 800e944:	280e      	cmp	r0, #14
 800e946:	d93a      	bls.n	800e9be <_scanf_float+0xd6>
 800e948:	f1b9 0f00 	cmp.w	r9, #0
 800e94c:	d003      	beq.n	800e956 <_scanf_float+0x6e>
 800e94e:	6823      	ldr	r3, [r4, #0]
 800e950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e95a:	f1ba 0f01 	cmp.w	sl, #1
 800e95e:	f200 8113 	bhi.w	800eb88 <_scanf_float+0x2a0>
 800e962:	455e      	cmp	r6, fp
 800e964:	f200 8105 	bhi.w	800eb72 <_scanf_float+0x28a>
 800e968:	2501      	movs	r5, #1
 800e96a:	4628      	mov	r0, r5
 800e96c:	b007      	add	sp, #28
 800e96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e972:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e976:	2a0d      	cmp	r2, #13
 800e978:	d8e6      	bhi.n	800e948 <_scanf_float+0x60>
 800e97a:	a101      	add	r1, pc, #4	; (adr r1, 800e980 <_scanf_float+0x98>)
 800e97c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e980:	0800eabf 	.word	0x0800eabf
 800e984:	0800e949 	.word	0x0800e949
 800e988:	0800e949 	.word	0x0800e949
 800e98c:	0800e949 	.word	0x0800e949
 800e990:	0800eb1f 	.word	0x0800eb1f
 800e994:	0800eaf7 	.word	0x0800eaf7
 800e998:	0800e949 	.word	0x0800e949
 800e99c:	0800e949 	.word	0x0800e949
 800e9a0:	0800eacd 	.word	0x0800eacd
 800e9a4:	0800e949 	.word	0x0800e949
 800e9a8:	0800e949 	.word	0x0800e949
 800e9ac:	0800e949 	.word	0x0800e949
 800e9b0:	0800e949 	.word	0x0800e949
 800e9b4:	0800ea85 	.word	0x0800ea85
 800e9b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e9bc:	e7db      	b.n	800e976 <_scanf_float+0x8e>
 800e9be:	290e      	cmp	r1, #14
 800e9c0:	d8c2      	bhi.n	800e948 <_scanf_float+0x60>
 800e9c2:	a001      	add	r0, pc, #4	; (adr r0, 800e9c8 <_scanf_float+0xe0>)
 800e9c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e9c8:	0800ea77 	.word	0x0800ea77
 800e9cc:	0800e949 	.word	0x0800e949
 800e9d0:	0800ea77 	.word	0x0800ea77
 800e9d4:	0800eb0b 	.word	0x0800eb0b
 800e9d8:	0800e949 	.word	0x0800e949
 800e9dc:	0800ea25 	.word	0x0800ea25
 800e9e0:	0800ea61 	.word	0x0800ea61
 800e9e4:	0800ea61 	.word	0x0800ea61
 800e9e8:	0800ea61 	.word	0x0800ea61
 800e9ec:	0800ea61 	.word	0x0800ea61
 800e9f0:	0800ea61 	.word	0x0800ea61
 800e9f4:	0800ea61 	.word	0x0800ea61
 800e9f8:	0800ea61 	.word	0x0800ea61
 800e9fc:	0800ea61 	.word	0x0800ea61
 800ea00:	0800ea61 	.word	0x0800ea61
 800ea04:	2b6e      	cmp	r3, #110	; 0x6e
 800ea06:	d809      	bhi.n	800ea1c <_scanf_float+0x134>
 800ea08:	2b60      	cmp	r3, #96	; 0x60
 800ea0a:	d8b2      	bhi.n	800e972 <_scanf_float+0x8a>
 800ea0c:	2b54      	cmp	r3, #84	; 0x54
 800ea0e:	d077      	beq.n	800eb00 <_scanf_float+0x218>
 800ea10:	2b59      	cmp	r3, #89	; 0x59
 800ea12:	d199      	bne.n	800e948 <_scanf_float+0x60>
 800ea14:	2d07      	cmp	r5, #7
 800ea16:	d197      	bne.n	800e948 <_scanf_float+0x60>
 800ea18:	2508      	movs	r5, #8
 800ea1a:	e029      	b.n	800ea70 <_scanf_float+0x188>
 800ea1c:	2b74      	cmp	r3, #116	; 0x74
 800ea1e:	d06f      	beq.n	800eb00 <_scanf_float+0x218>
 800ea20:	2b79      	cmp	r3, #121	; 0x79
 800ea22:	e7f6      	b.n	800ea12 <_scanf_float+0x12a>
 800ea24:	6821      	ldr	r1, [r4, #0]
 800ea26:	05c8      	lsls	r0, r1, #23
 800ea28:	d51a      	bpl.n	800ea60 <_scanf_float+0x178>
 800ea2a:	9b02      	ldr	r3, [sp, #8]
 800ea2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ea30:	6021      	str	r1, [r4, #0]
 800ea32:	f109 0901 	add.w	r9, r9, #1
 800ea36:	b11b      	cbz	r3, 800ea40 <_scanf_float+0x158>
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	3201      	adds	r2, #1
 800ea3c:	9302      	str	r3, [sp, #8]
 800ea3e:	60a2      	str	r2, [r4, #8]
 800ea40:	68a3      	ldr	r3, [r4, #8]
 800ea42:	3b01      	subs	r3, #1
 800ea44:	60a3      	str	r3, [r4, #8]
 800ea46:	6923      	ldr	r3, [r4, #16]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	6123      	str	r3, [r4, #16]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	607b      	str	r3, [r7, #4]
 800ea54:	f340 8084 	ble.w	800eb60 <_scanf_float+0x278>
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	603b      	str	r3, [r7, #0]
 800ea5e:	e766      	b.n	800e92e <_scanf_float+0x46>
 800ea60:	eb1a 0f05 	cmn.w	sl, r5
 800ea64:	f47f af70 	bne.w	800e948 <_scanf_float+0x60>
 800ea68:	6822      	ldr	r2, [r4, #0]
 800ea6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ea6e:	6022      	str	r2, [r4, #0]
 800ea70:	f806 3b01 	strb.w	r3, [r6], #1
 800ea74:	e7e4      	b.n	800ea40 <_scanf_float+0x158>
 800ea76:	6822      	ldr	r2, [r4, #0]
 800ea78:	0610      	lsls	r0, r2, #24
 800ea7a:	f57f af65 	bpl.w	800e948 <_scanf_float+0x60>
 800ea7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea82:	e7f4      	b.n	800ea6e <_scanf_float+0x186>
 800ea84:	f1ba 0f00 	cmp.w	sl, #0
 800ea88:	d10e      	bne.n	800eaa8 <_scanf_float+0x1c0>
 800ea8a:	f1b9 0f00 	cmp.w	r9, #0
 800ea8e:	d10e      	bne.n	800eaae <_scanf_float+0x1c6>
 800ea90:	6822      	ldr	r2, [r4, #0]
 800ea92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ea96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ea9a:	d108      	bne.n	800eaae <_scanf_float+0x1c6>
 800ea9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eaa0:	6022      	str	r2, [r4, #0]
 800eaa2:	f04f 0a01 	mov.w	sl, #1
 800eaa6:	e7e3      	b.n	800ea70 <_scanf_float+0x188>
 800eaa8:	f1ba 0f02 	cmp.w	sl, #2
 800eaac:	d055      	beq.n	800eb5a <_scanf_float+0x272>
 800eaae:	2d01      	cmp	r5, #1
 800eab0:	d002      	beq.n	800eab8 <_scanf_float+0x1d0>
 800eab2:	2d04      	cmp	r5, #4
 800eab4:	f47f af48 	bne.w	800e948 <_scanf_float+0x60>
 800eab8:	3501      	adds	r5, #1
 800eaba:	b2ed      	uxtb	r5, r5
 800eabc:	e7d8      	b.n	800ea70 <_scanf_float+0x188>
 800eabe:	f1ba 0f01 	cmp.w	sl, #1
 800eac2:	f47f af41 	bne.w	800e948 <_scanf_float+0x60>
 800eac6:	f04f 0a02 	mov.w	sl, #2
 800eaca:	e7d1      	b.n	800ea70 <_scanf_float+0x188>
 800eacc:	b97d      	cbnz	r5, 800eaee <_scanf_float+0x206>
 800eace:	f1b9 0f00 	cmp.w	r9, #0
 800ead2:	f47f af3c 	bne.w	800e94e <_scanf_float+0x66>
 800ead6:	6822      	ldr	r2, [r4, #0]
 800ead8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eadc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eae0:	f47f af39 	bne.w	800e956 <_scanf_float+0x6e>
 800eae4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eae8:	6022      	str	r2, [r4, #0]
 800eaea:	2501      	movs	r5, #1
 800eaec:	e7c0      	b.n	800ea70 <_scanf_float+0x188>
 800eaee:	2d03      	cmp	r5, #3
 800eaf0:	d0e2      	beq.n	800eab8 <_scanf_float+0x1d0>
 800eaf2:	2d05      	cmp	r5, #5
 800eaf4:	e7de      	b.n	800eab4 <_scanf_float+0x1cc>
 800eaf6:	2d02      	cmp	r5, #2
 800eaf8:	f47f af26 	bne.w	800e948 <_scanf_float+0x60>
 800eafc:	2503      	movs	r5, #3
 800eafe:	e7b7      	b.n	800ea70 <_scanf_float+0x188>
 800eb00:	2d06      	cmp	r5, #6
 800eb02:	f47f af21 	bne.w	800e948 <_scanf_float+0x60>
 800eb06:	2507      	movs	r5, #7
 800eb08:	e7b2      	b.n	800ea70 <_scanf_float+0x188>
 800eb0a:	6822      	ldr	r2, [r4, #0]
 800eb0c:	0591      	lsls	r1, r2, #22
 800eb0e:	f57f af1b 	bpl.w	800e948 <_scanf_float+0x60>
 800eb12:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800eb16:	6022      	str	r2, [r4, #0]
 800eb18:	f8cd 9004 	str.w	r9, [sp, #4]
 800eb1c:	e7a8      	b.n	800ea70 <_scanf_float+0x188>
 800eb1e:	6822      	ldr	r2, [r4, #0]
 800eb20:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800eb24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800eb28:	d006      	beq.n	800eb38 <_scanf_float+0x250>
 800eb2a:	0550      	lsls	r0, r2, #21
 800eb2c:	f57f af0c 	bpl.w	800e948 <_scanf_float+0x60>
 800eb30:	f1b9 0f00 	cmp.w	r9, #0
 800eb34:	f43f af0f 	beq.w	800e956 <_scanf_float+0x6e>
 800eb38:	0591      	lsls	r1, r2, #22
 800eb3a:	bf58      	it	pl
 800eb3c:	9901      	ldrpl	r1, [sp, #4]
 800eb3e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eb42:	bf58      	it	pl
 800eb44:	eba9 0101 	subpl.w	r1, r9, r1
 800eb48:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800eb4c:	bf58      	it	pl
 800eb4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eb52:	6022      	str	r2, [r4, #0]
 800eb54:	f04f 0900 	mov.w	r9, #0
 800eb58:	e78a      	b.n	800ea70 <_scanf_float+0x188>
 800eb5a:	f04f 0a03 	mov.w	sl, #3
 800eb5e:	e787      	b.n	800ea70 <_scanf_float+0x188>
 800eb60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eb64:	4639      	mov	r1, r7
 800eb66:	4640      	mov	r0, r8
 800eb68:	4798      	blx	r3
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	f43f aedf 	beq.w	800e92e <_scanf_float+0x46>
 800eb70:	e6ea      	b.n	800e948 <_scanf_float+0x60>
 800eb72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb7a:	463a      	mov	r2, r7
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	4798      	blx	r3
 800eb80:	6923      	ldr	r3, [r4, #16]
 800eb82:	3b01      	subs	r3, #1
 800eb84:	6123      	str	r3, [r4, #16]
 800eb86:	e6ec      	b.n	800e962 <_scanf_float+0x7a>
 800eb88:	1e6b      	subs	r3, r5, #1
 800eb8a:	2b06      	cmp	r3, #6
 800eb8c:	d825      	bhi.n	800ebda <_scanf_float+0x2f2>
 800eb8e:	2d02      	cmp	r5, #2
 800eb90:	d836      	bhi.n	800ec00 <_scanf_float+0x318>
 800eb92:	455e      	cmp	r6, fp
 800eb94:	f67f aee8 	bls.w	800e968 <_scanf_float+0x80>
 800eb98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb9c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eba0:	463a      	mov	r2, r7
 800eba2:	4640      	mov	r0, r8
 800eba4:	4798      	blx	r3
 800eba6:	6923      	ldr	r3, [r4, #16]
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	6123      	str	r3, [r4, #16]
 800ebac:	e7f1      	b.n	800eb92 <_scanf_float+0x2aa>
 800ebae:	9802      	ldr	r0, [sp, #8]
 800ebb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ebb4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ebb8:	9002      	str	r0, [sp, #8]
 800ebba:	463a      	mov	r2, r7
 800ebbc:	4640      	mov	r0, r8
 800ebbe:	4798      	blx	r3
 800ebc0:	6923      	ldr	r3, [r4, #16]
 800ebc2:	3b01      	subs	r3, #1
 800ebc4:	6123      	str	r3, [r4, #16]
 800ebc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebca:	fa5f fa8a 	uxtb.w	sl, sl
 800ebce:	f1ba 0f02 	cmp.w	sl, #2
 800ebd2:	d1ec      	bne.n	800ebae <_scanf_float+0x2c6>
 800ebd4:	3d03      	subs	r5, #3
 800ebd6:	b2ed      	uxtb	r5, r5
 800ebd8:	1b76      	subs	r6, r6, r5
 800ebda:	6823      	ldr	r3, [r4, #0]
 800ebdc:	05da      	lsls	r2, r3, #23
 800ebde:	d52f      	bpl.n	800ec40 <_scanf_float+0x358>
 800ebe0:	055b      	lsls	r3, r3, #21
 800ebe2:	d510      	bpl.n	800ec06 <_scanf_float+0x31e>
 800ebe4:	455e      	cmp	r6, fp
 800ebe6:	f67f aebf 	bls.w	800e968 <_scanf_float+0x80>
 800ebea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ebee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebf2:	463a      	mov	r2, r7
 800ebf4:	4640      	mov	r0, r8
 800ebf6:	4798      	blx	r3
 800ebf8:	6923      	ldr	r3, [r4, #16]
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	6123      	str	r3, [r4, #16]
 800ebfe:	e7f1      	b.n	800ebe4 <_scanf_float+0x2fc>
 800ec00:	46aa      	mov	sl, r5
 800ec02:	9602      	str	r6, [sp, #8]
 800ec04:	e7df      	b.n	800ebc6 <_scanf_float+0x2de>
 800ec06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ec0a:	6923      	ldr	r3, [r4, #16]
 800ec0c:	2965      	cmp	r1, #101	; 0x65
 800ec0e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec12:	f106 35ff 	add.w	r5, r6, #4294967295
 800ec16:	6123      	str	r3, [r4, #16]
 800ec18:	d00c      	beq.n	800ec34 <_scanf_float+0x34c>
 800ec1a:	2945      	cmp	r1, #69	; 0x45
 800ec1c:	d00a      	beq.n	800ec34 <_scanf_float+0x34c>
 800ec1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec22:	463a      	mov	r2, r7
 800ec24:	4640      	mov	r0, r8
 800ec26:	4798      	blx	r3
 800ec28:	6923      	ldr	r3, [r4, #16]
 800ec2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ec2e:	3b01      	subs	r3, #1
 800ec30:	1eb5      	subs	r5, r6, #2
 800ec32:	6123      	str	r3, [r4, #16]
 800ec34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec38:	463a      	mov	r2, r7
 800ec3a:	4640      	mov	r0, r8
 800ec3c:	4798      	blx	r3
 800ec3e:	462e      	mov	r6, r5
 800ec40:	6825      	ldr	r5, [r4, #0]
 800ec42:	f015 0510 	ands.w	r5, r5, #16
 800ec46:	d158      	bne.n	800ecfa <_scanf_float+0x412>
 800ec48:	7035      	strb	r5, [r6, #0]
 800ec4a:	6823      	ldr	r3, [r4, #0]
 800ec4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ec50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec54:	d11c      	bne.n	800ec90 <_scanf_float+0x3a8>
 800ec56:	9b01      	ldr	r3, [sp, #4]
 800ec58:	454b      	cmp	r3, r9
 800ec5a:	eba3 0209 	sub.w	r2, r3, r9
 800ec5e:	d124      	bne.n	800ecaa <_scanf_float+0x3c2>
 800ec60:	2200      	movs	r2, #0
 800ec62:	4659      	mov	r1, fp
 800ec64:	4640      	mov	r0, r8
 800ec66:	f000 ff59 	bl	800fb1c <_strtod_r>
 800ec6a:	9b03      	ldr	r3, [sp, #12]
 800ec6c:	6821      	ldr	r1, [r4, #0]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f011 0f02 	tst.w	r1, #2
 800ec74:	ec57 6b10 	vmov	r6, r7, d0
 800ec78:	f103 0204 	add.w	r2, r3, #4
 800ec7c:	d020      	beq.n	800ecc0 <_scanf_float+0x3d8>
 800ec7e:	9903      	ldr	r1, [sp, #12]
 800ec80:	600a      	str	r2, [r1, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	e9c3 6700 	strd	r6, r7, [r3]
 800ec88:	68e3      	ldr	r3, [r4, #12]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	60e3      	str	r3, [r4, #12]
 800ec8e:	e66c      	b.n	800e96a <_scanf_float+0x82>
 800ec90:	9b04      	ldr	r3, [sp, #16]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d0e4      	beq.n	800ec60 <_scanf_float+0x378>
 800ec96:	9905      	ldr	r1, [sp, #20]
 800ec98:	230a      	movs	r3, #10
 800ec9a:	462a      	mov	r2, r5
 800ec9c:	3101      	adds	r1, #1
 800ec9e:	4640      	mov	r0, r8
 800eca0:	f000 ffc6 	bl	800fc30 <_strtol_r>
 800eca4:	9b04      	ldr	r3, [sp, #16]
 800eca6:	9e05      	ldr	r6, [sp, #20]
 800eca8:	1ac2      	subs	r2, r0, r3
 800ecaa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ecae:	429e      	cmp	r6, r3
 800ecb0:	bf28      	it	cs
 800ecb2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ecb6:	4912      	ldr	r1, [pc, #72]	; (800ed00 <_scanf_float+0x418>)
 800ecb8:	4630      	mov	r0, r6
 800ecba:	f000 f8a5 	bl	800ee08 <siprintf>
 800ecbe:	e7cf      	b.n	800ec60 <_scanf_float+0x378>
 800ecc0:	f011 0f04 	tst.w	r1, #4
 800ecc4:	9903      	ldr	r1, [sp, #12]
 800ecc6:	600a      	str	r2, [r1, #0]
 800ecc8:	d1db      	bne.n	800ec82 <_scanf_float+0x39a>
 800ecca:	f8d3 8000 	ldr.w	r8, [r3]
 800ecce:	ee10 2a10 	vmov	r2, s0
 800ecd2:	ee10 0a10 	vmov	r0, s0
 800ecd6:	463b      	mov	r3, r7
 800ecd8:	4639      	mov	r1, r7
 800ecda:	f7f1 ff27 	bl	8000b2c <__aeabi_dcmpun>
 800ecde:	b128      	cbz	r0, 800ecec <_scanf_float+0x404>
 800ece0:	4808      	ldr	r0, [pc, #32]	; (800ed04 <_scanf_float+0x41c>)
 800ece2:	f000 f88b 	bl	800edfc <nanf>
 800ece6:	ed88 0a00 	vstr	s0, [r8]
 800ecea:	e7cd      	b.n	800ec88 <_scanf_float+0x3a0>
 800ecec:	4630      	mov	r0, r6
 800ecee:	4639      	mov	r1, r7
 800ecf0:	f7f1 ff7a 	bl	8000be8 <__aeabi_d2f>
 800ecf4:	f8c8 0000 	str.w	r0, [r8]
 800ecf8:	e7c6      	b.n	800ec88 <_scanf_float+0x3a0>
 800ecfa:	2500      	movs	r5, #0
 800ecfc:	e635      	b.n	800e96a <_scanf_float+0x82>
 800ecfe:	bf00      	nop
 800ed00:	08014340 	.word	0x08014340
 800ed04:	08014758 	.word	0x08014758

0800ed08 <cleanup_glue>:
 800ed08:	b538      	push	{r3, r4, r5, lr}
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	6809      	ldr	r1, [r1, #0]
 800ed0e:	4605      	mov	r5, r0
 800ed10:	b109      	cbz	r1, 800ed16 <cleanup_glue+0xe>
 800ed12:	f7ff fff9 	bl	800ed08 <cleanup_glue>
 800ed16:	4621      	mov	r1, r4
 800ed18:	4628      	mov	r0, r5
 800ed1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed1e:	f002 bf5b 	b.w	8011bd8 <_free_r>
	...

0800ed24 <_reclaim_reent>:
 800ed24:	4b2c      	ldr	r3, [pc, #176]	; (800edd8 <_reclaim_reent+0xb4>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4283      	cmp	r3, r0
 800ed2a:	b570      	push	{r4, r5, r6, lr}
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	d051      	beq.n	800edd4 <_reclaim_reent+0xb0>
 800ed30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ed32:	b143      	cbz	r3, 800ed46 <_reclaim_reent+0x22>
 800ed34:	68db      	ldr	r3, [r3, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d14a      	bne.n	800edd0 <_reclaim_reent+0xac>
 800ed3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed3c:	6819      	ldr	r1, [r3, #0]
 800ed3e:	b111      	cbz	r1, 800ed46 <_reclaim_reent+0x22>
 800ed40:	4620      	mov	r0, r4
 800ed42:	f002 ff49 	bl	8011bd8 <_free_r>
 800ed46:	6961      	ldr	r1, [r4, #20]
 800ed48:	b111      	cbz	r1, 800ed50 <_reclaim_reent+0x2c>
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	f002 ff44 	bl	8011bd8 <_free_r>
 800ed50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ed52:	b111      	cbz	r1, 800ed5a <_reclaim_reent+0x36>
 800ed54:	4620      	mov	r0, r4
 800ed56:	f002 ff3f 	bl	8011bd8 <_free_r>
 800ed5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ed5c:	b111      	cbz	r1, 800ed64 <_reclaim_reent+0x40>
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f002 ff3a 	bl	8011bd8 <_free_r>
 800ed64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ed66:	b111      	cbz	r1, 800ed6e <_reclaim_reent+0x4a>
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f002 ff35 	bl	8011bd8 <_free_r>
 800ed6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ed70:	b111      	cbz	r1, 800ed78 <_reclaim_reent+0x54>
 800ed72:	4620      	mov	r0, r4
 800ed74:	f002 ff30 	bl	8011bd8 <_free_r>
 800ed78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ed7a:	b111      	cbz	r1, 800ed82 <_reclaim_reent+0x5e>
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	f002 ff2b 	bl	8011bd8 <_free_r>
 800ed82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ed84:	b111      	cbz	r1, 800ed8c <_reclaim_reent+0x68>
 800ed86:	4620      	mov	r0, r4
 800ed88:	f002 ff26 	bl	8011bd8 <_free_r>
 800ed8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed8e:	b111      	cbz	r1, 800ed96 <_reclaim_reent+0x72>
 800ed90:	4620      	mov	r0, r4
 800ed92:	f002 ff21 	bl	8011bd8 <_free_r>
 800ed96:	69a3      	ldr	r3, [r4, #24]
 800ed98:	b1e3      	cbz	r3, 800edd4 <_reclaim_reent+0xb0>
 800ed9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	4798      	blx	r3
 800eda0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eda2:	b1b9      	cbz	r1, 800edd4 <_reclaim_reent+0xb0>
 800eda4:	4620      	mov	r0, r4
 800eda6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edaa:	f7ff bfad 	b.w	800ed08 <cleanup_glue>
 800edae:	5949      	ldr	r1, [r1, r5]
 800edb0:	b941      	cbnz	r1, 800edc4 <_reclaim_reent+0xa0>
 800edb2:	3504      	adds	r5, #4
 800edb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edb6:	2d80      	cmp	r5, #128	; 0x80
 800edb8:	68d9      	ldr	r1, [r3, #12]
 800edba:	d1f8      	bne.n	800edae <_reclaim_reent+0x8a>
 800edbc:	4620      	mov	r0, r4
 800edbe:	f002 ff0b 	bl	8011bd8 <_free_r>
 800edc2:	e7ba      	b.n	800ed3a <_reclaim_reent+0x16>
 800edc4:	680e      	ldr	r6, [r1, #0]
 800edc6:	4620      	mov	r0, r4
 800edc8:	f002 ff06 	bl	8011bd8 <_free_r>
 800edcc:	4631      	mov	r1, r6
 800edce:	e7ef      	b.n	800edb0 <_reclaim_reent+0x8c>
 800edd0:	2500      	movs	r5, #0
 800edd2:	e7ef      	b.n	800edb4 <_reclaim_reent+0x90>
 800edd4:	bd70      	pop	{r4, r5, r6, pc}
 800edd6:	bf00      	nop
 800edd8:	20000048 	.word	0x20000048

0800eddc <_sbrk_r>:
 800eddc:	b538      	push	{r3, r4, r5, lr}
 800edde:	4d06      	ldr	r5, [pc, #24]	; (800edf8 <_sbrk_r+0x1c>)
 800ede0:	2300      	movs	r3, #0
 800ede2:	4604      	mov	r4, r0
 800ede4:	4608      	mov	r0, r1
 800ede6:	602b      	str	r3, [r5, #0]
 800ede8:	f7f5 ff14 	bl	8004c14 <_sbrk>
 800edec:	1c43      	adds	r3, r0, #1
 800edee:	d102      	bne.n	800edf6 <_sbrk_r+0x1a>
 800edf0:	682b      	ldr	r3, [r5, #0]
 800edf2:	b103      	cbz	r3, 800edf6 <_sbrk_r+0x1a>
 800edf4:	6023      	str	r3, [r4, #0]
 800edf6:	bd38      	pop	{r3, r4, r5, pc}
 800edf8:	200063e4 	.word	0x200063e4

0800edfc <nanf>:
 800edfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ee04 <nanf+0x8>
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop
 800ee04:	7fc00000 	.word	0x7fc00000

0800ee08 <siprintf>:
 800ee08:	b40e      	push	{r1, r2, r3}
 800ee0a:	b500      	push	{lr}
 800ee0c:	b09c      	sub	sp, #112	; 0x70
 800ee0e:	ab1d      	add	r3, sp, #116	; 0x74
 800ee10:	9002      	str	r0, [sp, #8]
 800ee12:	9006      	str	r0, [sp, #24]
 800ee14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee18:	4809      	ldr	r0, [pc, #36]	; (800ee40 <siprintf+0x38>)
 800ee1a:	9107      	str	r1, [sp, #28]
 800ee1c:	9104      	str	r1, [sp, #16]
 800ee1e:	4909      	ldr	r1, [pc, #36]	; (800ee44 <siprintf+0x3c>)
 800ee20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee24:	9105      	str	r1, [sp, #20]
 800ee26:	6800      	ldr	r0, [r0, #0]
 800ee28:	9301      	str	r3, [sp, #4]
 800ee2a:	a902      	add	r1, sp, #8
 800ee2c:	f002 ff80 	bl	8011d30 <_svfiprintf_r>
 800ee30:	9b02      	ldr	r3, [sp, #8]
 800ee32:	2200      	movs	r2, #0
 800ee34:	701a      	strb	r2, [r3, #0]
 800ee36:	b01c      	add	sp, #112	; 0x70
 800ee38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee3c:	b003      	add	sp, #12
 800ee3e:	4770      	bx	lr
 800ee40:	20000048 	.word	0x20000048
 800ee44:	ffff0208 	.word	0xffff0208

0800ee48 <__sread>:
 800ee48:	b510      	push	{r4, lr}
 800ee4a:	460c      	mov	r4, r1
 800ee4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee50:	f003 f86e 	bl	8011f30 <_read_r>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	bfab      	itete	ge
 800ee58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ee5c:	181b      	addge	r3, r3, r0
 800ee5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee62:	bfac      	ite	ge
 800ee64:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee66:	81a3      	strhlt	r3, [r4, #12]
 800ee68:	bd10      	pop	{r4, pc}

0800ee6a <__swrite>:
 800ee6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee6e:	461f      	mov	r7, r3
 800ee70:	898b      	ldrh	r3, [r1, #12]
 800ee72:	05db      	lsls	r3, r3, #23
 800ee74:	4605      	mov	r5, r0
 800ee76:	460c      	mov	r4, r1
 800ee78:	4616      	mov	r6, r2
 800ee7a:	d505      	bpl.n	800ee88 <__swrite+0x1e>
 800ee7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee80:	2302      	movs	r3, #2
 800ee82:	2200      	movs	r2, #0
 800ee84:	f002 f9a6 	bl	80111d4 <_lseek_r>
 800ee88:	89a3      	ldrh	r3, [r4, #12]
 800ee8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee92:	81a3      	strh	r3, [r4, #12]
 800ee94:	4632      	mov	r2, r6
 800ee96:	463b      	mov	r3, r7
 800ee98:	4628      	mov	r0, r5
 800ee9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9e:	f000 bec9 	b.w	800fc34 <_write_r>

0800eea2 <__sseek>:
 800eea2:	b510      	push	{r4, lr}
 800eea4:	460c      	mov	r4, r1
 800eea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeaa:	f002 f993 	bl	80111d4 <_lseek_r>
 800eeae:	1c43      	adds	r3, r0, #1
 800eeb0:	89a3      	ldrh	r3, [r4, #12]
 800eeb2:	bf15      	itete	ne
 800eeb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eeba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eebe:	81a3      	strheq	r3, [r4, #12]
 800eec0:	bf18      	it	ne
 800eec2:	81a3      	strhne	r3, [r4, #12]
 800eec4:	bd10      	pop	{r4, pc}

0800eec6 <__sclose>:
 800eec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeca:	f000 bec5 	b.w	800fc58 <_close_r>

0800eece <sulp>:
 800eece:	b570      	push	{r4, r5, r6, lr}
 800eed0:	4604      	mov	r4, r0
 800eed2:	460d      	mov	r5, r1
 800eed4:	ec45 4b10 	vmov	d0, r4, r5
 800eed8:	4616      	mov	r6, r2
 800eeda:	f002 fd1f 	bl	801191c <__ulp>
 800eede:	ec51 0b10 	vmov	r0, r1, d0
 800eee2:	b17e      	cbz	r6, 800ef04 <sulp+0x36>
 800eee4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eee8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	dd09      	ble.n	800ef04 <sulp+0x36>
 800eef0:	051b      	lsls	r3, r3, #20
 800eef2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800eef6:	2400      	movs	r4, #0
 800eef8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800eefc:	4622      	mov	r2, r4
 800eefe:	462b      	mov	r3, r5
 800ef00:	f7f1 fb7a 	bl	80005f8 <__aeabi_dmul>
 800ef04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef08 <_strtod_l>:
 800ef08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0c:	b0a3      	sub	sp, #140	; 0x8c
 800ef0e:	461f      	mov	r7, r3
 800ef10:	2300      	movs	r3, #0
 800ef12:	931e      	str	r3, [sp, #120]	; 0x78
 800ef14:	4ba4      	ldr	r3, [pc, #656]	; (800f1a8 <_strtod_l+0x2a0>)
 800ef16:	9219      	str	r2, [sp, #100]	; 0x64
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	9307      	str	r3, [sp, #28]
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	4618      	mov	r0, r3
 800ef20:	4688      	mov	r8, r1
 800ef22:	f7f1 f955 	bl	80001d0 <strlen>
 800ef26:	f04f 0a00 	mov.w	sl, #0
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	f04f 0b00 	mov.w	fp, #0
 800ef30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ef34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef36:	781a      	ldrb	r2, [r3, #0]
 800ef38:	2a2b      	cmp	r2, #43	; 0x2b
 800ef3a:	d04c      	beq.n	800efd6 <_strtod_l+0xce>
 800ef3c:	d839      	bhi.n	800efb2 <_strtod_l+0xaa>
 800ef3e:	2a0d      	cmp	r2, #13
 800ef40:	d832      	bhi.n	800efa8 <_strtod_l+0xa0>
 800ef42:	2a08      	cmp	r2, #8
 800ef44:	d832      	bhi.n	800efac <_strtod_l+0xa4>
 800ef46:	2a00      	cmp	r2, #0
 800ef48:	d03c      	beq.n	800efc4 <_strtod_l+0xbc>
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	930e      	str	r3, [sp, #56]	; 0x38
 800ef4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ef50:	7833      	ldrb	r3, [r6, #0]
 800ef52:	2b30      	cmp	r3, #48	; 0x30
 800ef54:	f040 80b4 	bne.w	800f0c0 <_strtod_l+0x1b8>
 800ef58:	7873      	ldrb	r3, [r6, #1]
 800ef5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef5e:	2b58      	cmp	r3, #88	; 0x58
 800ef60:	d16c      	bne.n	800f03c <_strtod_l+0x134>
 800ef62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef64:	9301      	str	r3, [sp, #4]
 800ef66:	ab1e      	add	r3, sp, #120	; 0x78
 800ef68:	9702      	str	r7, [sp, #8]
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	4a8f      	ldr	r2, [pc, #572]	; (800f1ac <_strtod_l+0x2a4>)
 800ef6e:	ab1f      	add	r3, sp, #124	; 0x7c
 800ef70:	a91d      	add	r1, sp, #116	; 0x74
 800ef72:	4620      	mov	r0, r4
 800ef74:	f001 fe22 	bl	8010bbc <__gethex>
 800ef78:	f010 0707 	ands.w	r7, r0, #7
 800ef7c:	4605      	mov	r5, r0
 800ef7e:	d005      	beq.n	800ef8c <_strtod_l+0x84>
 800ef80:	2f06      	cmp	r7, #6
 800ef82:	d12a      	bne.n	800efda <_strtod_l+0xd2>
 800ef84:	3601      	adds	r6, #1
 800ef86:	2300      	movs	r3, #0
 800ef88:	961d      	str	r6, [sp, #116]	; 0x74
 800ef8a:	930e      	str	r3, [sp, #56]	; 0x38
 800ef8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f040 8596 	bne.w	800fac0 <_strtod_l+0xbb8>
 800ef94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef96:	b1db      	cbz	r3, 800efd0 <_strtod_l+0xc8>
 800ef98:	4652      	mov	r2, sl
 800ef9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ef9e:	ec43 2b10 	vmov	d0, r2, r3
 800efa2:	b023      	add	sp, #140	; 0x8c
 800efa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa8:	2a20      	cmp	r2, #32
 800efaa:	d1ce      	bne.n	800ef4a <_strtod_l+0x42>
 800efac:	3301      	adds	r3, #1
 800efae:	931d      	str	r3, [sp, #116]	; 0x74
 800efb0:	e7c0      	b.n	800ef34 <_strtod_l+0x2c>
 800efb2:	2a2d      	cmp	r2, #45	; 0x2d
 800efb4:	d1c9      	bne.n	800ef4a <_strtod_l+0x42>
 800efb6:	2201      	movs	r2, #1
 800efb8:	920e      	str	r2, [sp, #56]	; 0x38
 800efba:	1c5a      	adds	r2, r3, #1
 800efbc:	921d      	str	r2, [sp, #116]	; 0x74
 800efbe:	785b      	ldrb	r3, [r3, #1]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d1c4      	bne.n	800ef4e <_strtod_l+0x46>
 800efc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800efc6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f040 8576 	bne.w	800fabc <_strtod_l+0xbb4>
 800efd0:	4652      	mov	r2, sl
 800efd2:	465b      	mov	r3, fp
 800efd4:	e7e3      	b.n	800ef9e <_strtod_l+0x96>
 800efd6:	2200      	movs	r2, #0
 800efd8:	e7ee      	b.n	800efb8 <_strtod_l+0xb0>
 800efda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800efdc:	b13a      	cbz	r2, 800efee <_strtod_l+0xe6>
 800efde:	2135      	movs	r1, #53	; 0x35
 800efe0:	a820      	add	r0, sp, #128	; 0x80
 800efe2:	f002 fda6 	bl	8011b32 <__copybits>
 800efe6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800efe8:	4620      	mov	r0, r4
 800efea:	f002 f96b 	bl	80112c4 <_Bfree>
 800efee:	3f01      	subs	r7, #1
 800eff0:	2f05      	cmp	r7, #5
 800eff2:	d807      	bhi.n	800f004 <_strtod_l+0xfc>
 800eff4:	e8df f007 	tbb	[pc, r7]
 800eff8:	1d180b0e 	.word	0x1d180b0e
 800effc:	030e      	.short	0x030e
 800effe:	f04f 0b00 	mov.w	fp, #0
 800f002:	46da      	mov	sl, fp
 800f004:	0728      	lsls	r0, r5, #28
 800f006:	d5c1      	bpl.n	800ef8c <_strtod_l+0x84>
 800f008:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f00c:	e7be      	b.n	800ef8c <_strtod_l+0x84>
 800f00e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800f012:	e7f7      	b.n	800f004 <_strtod_l+0xfc>
 800f014:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f018:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f01a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f01e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f022:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f026:	e7ed      	b.n	800f004 <_strtod_l+0xfc>
 800f028:	f8df b184 	ldr.w	fp, [pc, #388]	; 800f1b0 <_strtod_l+0x2a8>
 800f02c:	f04f 0a00 	mov.w	sl, #0
 800f030:	e7e8      	b.n	800f004 <_strtod_l+0xfc>
 800f032:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f036:	f04f 3aff 	mov.w	sl, #4294967295
 800f03a:	e7e3      	b.n	800f004 <_strtod_l+0xfc>
 800f03c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f03e:	1c5a      	adds	r2, r3, #1
 800f040:	921d      	str	r2, [sp, #116]	; 0x74
 800f042:	785b      	ldrb	r3, [r3, #1]
 800f044:	2b30      	cmp	r3, #48	; 0x30
 800f046:	d0f9      	beq.n	800f03c <_strtod_l+0x134>
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d09f      	beq.n	800ef8c <_strtod_l+0x84>
 800f04c:	2301      	movs	r3, #1
 800f04e:	f04f 0900 	mov.w	r9, #0
 800f052:	9304      	str	r3, [sp, #16]
 800f054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f056:	930a      	str	r3, [sp, #40]	; 0x28
 800f058:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f05c:	464f      	mov	r7, r9
 800f05e:	220a      	movs	r2, #10
 800f060:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f062:	7806      	ldrb	r6, [r0, #0]
 800f064:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f068:	b2d9      	uxtb	r1, r3
 800f06a:	2909      	cmp	r1, #9
 800f06c:	d92a      	bls.n	800f0c4 <_strtod_l+0x1bc>
 800f06e:	9907      	ldr	r1, [sp, #28]
 800f070:	462a      	mov	r2, r5
 800f072:	f002 ff79 	bl	8011f68 <strncmp>
 800f076:	b398      	cbz	r0, 800f0e0 <_strtod_l+0x1d8>
 800f078:	2000      	movs	r0, #0
 800f07a:	4633      	mov	r3, r6
 800f07c:	463d      	mov	r5, r7
 800f07e:	9007      	str	r0, [sp, #28]
 800f080:	4602      	mov	r2, r0
 800f082:	2b65      	cmp	r3, #101	; 0x65
 800f084:	d001      	beq.n	800f08a <_strtod_l+0x182>
 800f086:	2b45      	cmp	r3, #69	; 0x45
 800f088:	d118      	bne.n	800f0bc <_strtod_l+0x1b4>
 800f08a:	b91d      	cbnz	r5, 800f094 <_strtod_l+0x18c>
 800f08c:	9b04      	ldr	r3, [sp, #16]
 800f08e:	4303      	orrs	r3, r0
 800f090:	d098      	beq.n	800efc4 <_strtod_l+0xbc>
 800f092:	2500      	movs	r5, #0
 800f094:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800f098:	f108 0301 	add.w	r3, r8, #1
 800f09c:	931d      	str	r3, [sp, #116]	; 0x74
 800f09e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f0a2:	2b2b      	cmp	r3, #43	; 0x2b
 800f0a4:	d075      	beq.n	800f192 <_strtod_l+0x28a>
 800f0a6:	2b2d      	cmp	r3, #45	; 0x2d
 800f0a8:	d07b      	beq.n	800f1a2 <_strtod_l+0x29a>
 800f0aa:	f04f 0c00 	mov.w	ip, #0
 800f0ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f0b2:	2909      	cmp	r1, #9
 800f0b4:	f240 8082 	bls.w	800f1bc <_strtod_l+0x2b4>
 800f0b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f0bc:	2600      	movs	r6, #0
 800f0be:	e09d      	b.n	800f1fc <_strtod_l+0x2f4>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	e7c4      	b.n	800f04e <_strtod_l+0x146>
 800f0c4:	2f08      	cmp	r7, #8
 800f0c6:	bfd8      	it	le
 800f0c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f0ca:	f100 0001 	add.w	r0, r0, #1
 800f0ce:	bfda      	itte	le
 800f0d0:	fb02 3301 	mlale	r3, r2, r1, r3
 800f0d4:	9309      	strle	r3, [sp, #36]	; 0x24
 800f0d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f0da:	3701      	adds	r7, #1
 800f0dc:	901d      	str	r0, [sp, #116]	; 0x74
 800f0de:	e7bf      	b.n	800f060 <_strtod_l+0x158>
 800f0e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0e2:	195a      	adds	r2, r3, r5
 800f0e4:	921d      	str	r2, [sp, #116]	; 0x74
 800f0e6:	5d5b      	ldrb	r3, [r3, r5]
 800f0e8:	2f00      	cmp	r7, #0
 800f0ea:	d037      	beq.n	800f15c <_strtod_l+0x254>
 800f0ec:	9007      	str	r0, [sp, #28]
 800f0ee:	463d      	mov	r5, r7
 800f0f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f0f4:	2a09      	cmp	r2, #9
 800f0f6:	d912      	bls.n	800f11e <_strtod_l+0x216>
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	e7c2      	b.n	800f082 <_strtod_l+0x17a>
 800f0fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0fe:	1c5a      	adds	r2, r3, #1
 800f100:	921d      	str	r2, [sp, #116]	; 0x74
 800f102:	785b      	ldrb	r3, [r3, #1]
 800f104:	3001      	adds	r0, #1
 800f106:	2b30      	cmp	r3, #48	; 0x30
 800f108:	d0f8      	beq.n	800f0fc <_strtod_l+0x1f4>
 800f10a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f10e:	2a08      	cmp	r2, #8
 800f110:	f200 84db 	bhi.w	800faca <_strtod_l+0xbc2>
 800f114:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f116:	9007      	str	r0, [sp, #28]
 800f118:	2000      	movs	r0, #0
 800f11a:	920a      	str	r2, [sp, #40]	; 0x28
 800f11c:	4605      	mov	r5, r0
 800f11e:	3b30      	subs	r3, #48	; 0x30
 800f120:	f100 0201 	add.w	r2, r0, #1
 800f124:	d014      	beq.n	800f150 <_strtod_l+0x248>
 800f126:	9907      	ldr	r1, [sp, #28]
 800f128:	4411      	add	r1, r2
 800f12a:	9107      	str	r1, [sp, #28]
 800f12c:	462a      	mov	r2, r5
 800f12e:	eb00 0e05 	add.w	lr, r0, r5
 800f132:	210a      	movs	r1, #10
 800f134:	4572      	cmp	r2, lr
 800f136:	d113      	bne.n	800f160 <_strtod_l+0x258>
 800f138:	182a      	adds	r2, r5, r0
 800f13a:	2a08      	cmp	r2, #8
 800f13c:	f105 0501 	add.w	r5, r5, #1
 800f140:	4405      	add	r5, r0
 800f142:	dc1c      	bgt.n	800f17e <_strtod_l+0x276>
 800f144:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f146:	220a      	movs	r2, #10
 800f148:	fb02 3301 	mla	r3, r2, r1, r3
 800f14c:	9309      	str	r3, [sp, #36]	; 0x24
 800f14e:	2200      	movs	r2, #0
 800f150:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f152:	1c59      	adds	r1, r3, #1
 800f154:	911d      	str	r1, [sp, #116]	; 0x74
 800f156:	785b      	ldrb	r3, [r3, #1]
 800f158:	4610      	mov	r0, r2
 800f15a:	e7c9      	b.n	800f0f0 <_strtod_l+0x1e8>
 800f15c:	4638      	mov	r0, r7
 800f15e:	e7d2      	b.n	800f106 <_strtod_l+0x1fe>
 800f160:	2a08      	cmp	r2, #8
 800f162:	dc04      	bgt.n	800f16e <_strtod_l+0x266>
 800f164:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f166:	434e      	muls	r6, r1
 800f168:	9609      	str	r6, [sp, #36]	; 0x24
 800f16a:	3201      	adds	r2, #1
 800f16c:	e7e2      	b.n	800f134 <_strtod_l+0x22c>
 800f16e:	f102 0c01 	add.w	ip, r2, #1
 800f172:	f1bc 0f10 	cmp.w	ip, #16
 800f176:	bfd8      	it	le
 800f178:	fb01 f909 	mulle.w	r9, r1, r9
 800f17c:	e7f5      	b.n	800f16a <_strtod_l+0x262>
 800f17e:	2d10      	cmp	r5, #16
 800f180:	bfdc      	itt	le
 800f182:	220a      	movle	r2, #10
 800f184:	fb02 3909 	mlale	r9, r2, r9, r3
 800f188:	e7e1      	b.n	800f14e <_strtod_l+0x246>
 800f18a:	2300      	movs	r3, #0
 800f18c:	9307      	str	r3, [sp, #28]
 800f18e:	2201      	movs	r2, #1
 800f190:	e77c      	b.n	800f08c <_strtod_l+0x184>
 800f192:	f04f 0c00 	mov.w	ip, #0
 800f196:	f108 0302 	add.w	r3, r8, #2
 800f19a:	931d      	str	r3, [sp, #116]	; 0x74
 800f19c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f1a0:	e785      	b.n	800f0ae <_strtod_l+0x1a6>
 800f1a2:	f04f 0c01 	mov.w	ip, #1
 800f1a6:	e7f6      	b.n	800f196 <_strtod_l+0x28e>
 800f1a8:	08014598 	.word	0x08014598
 800f1ac:	08014348 	.word	0x08014348
 800f1b0:	7ff00000 	.word	0x7ff00000
 800f1b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f1b6:	1c59      	adds	r1, r3, #1
 800f1b8:	911d      	str	r1, [sp, #116]	; 0x74
 800f1ba:	785b      	ldrb	r3, [r3, #1]
 800f1bc:	2b30      	cmp	r3, #48	; 0x30
 800f1be:	d0f9      	beq.n	800f1b4 <_strtod_l+0x2ac>
 800f1c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f1c4:	2908      	cmp	r1, #8
 800f1c6:	f63f af79 	bhi.w	800f0bc <_strtod_l+0x1b4>
 800f1ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f1ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f1d0:	9308      	str	r3, [sp, #32]
 800f1d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f1d4:	1c59      	adds	r1, r3, #1
 800f1d6:	911d      	str	r1, [sp, #116]	; 0x74
 800f1d8:	785b      	ldrb	r3, [r3, #1]
 800f1da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800f1de:	2e09      	cmp	r6, #9
 800f1e0:	d937      	bls.n	800f252 <_strtod_l+0x34a>
 800f1e2:	9e08      	ldr	r6, [sp, #32]
 800f1e4:	1b89      	subs	r1, r1, r6
 800f1e6:	2908      	cmp	r1, #8
 800f1e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f1ec:	dc02      	bgt.n	800f1f4 <_strtod_l+0x2ec>
 800f1ee:	4576      	cmp	r6, lr
 800f1f0:	bfa8      	it	ge
 800f1f2:	4676      	movge	r6, lr
 800f1f4:	f1bc 0f00 	cmp.w	ip, #0
 800f1f8:	d000      	beq.n	800f1fc <_strtod_l+0x2f4>
 800f1fa:	4276      	negs	r6, r6
 800f1fc:	2d00      	cmp	r5, #0
 800f1fe:	d14f      	bne.n	800f2a0 <_strtod_l+0x398>
 800f200:	9904      	ldr	r1, [sp, #16]
 800f202:	4301      	orrs	r1, r0
 800f204:	f47f aec2 	bne.w	800ef8c <_strtod_l+0x84>
 800f208:	2a00      	cmp	r2, #0
 800f20a:	f47f aedb 	bne.w	800efc4 <_strtod_l+0xbc>
 800f20e:	2b69      	cmp	r3, #105	; 0x69
 800f210:	d027      	beq.n	800f262 <_strtod_l+0x35a>
 800f212:	dc24      	bgt.n	800f25e <_strtod_l+0x356>
 800f214:	2b49      	cmp	r3, #73	; 0x49
 800f216:	d024      	beq.n	800f262 <_strtod_l+0x35a>
 800f218:	2b4e      	cmp	r3, #78	; 0x4e
 800f21a:	f47f aed3 	bne.w	800efc4 <_strtod_l+0xbc>
 800f21e:	499e      	ldr	r1, [pc, #632]	; (800f498 <_strtod_l+0x590>)
 800f220:	a81d      	add	r0, sp, #116	; 0x74
 800f222:	f001 ff23 	bl	801106c <__match>
 800f226:	2800      	cmp	r0, #0
 800f228:	f43f aecc 	beq.w	800efc4 <_strtod_l+0xbc>
 800f22c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	2b28      	cmp	r3, #40	; 0x28
 800f232:	d12d      	bne.n	800f290 <_strtod_l+0x388>
 800f234:	4999      	ldr	r1, [pc, #612]	; (800f49c <_strtod_l+0x594>)
 800f236:	aa20      	add	r2, sp, #128	; 0x80
 800f238:	a81d      	add	r0, sp, #116	; 0x74
 800f23a:	f001 ff2b 	bl	8011094 <__hexnan>
 800f23e:	2805      	cmp	r0, #5
 800f240:	d126      	bne.n	800f290 <_strtod_l+0x388>
 800f242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f244:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f248:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f24c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f250:	e69c      	b.n	800ef8c <_strtod_l+0x84>
 800f252:	210a      	movs	r1, #10
 800f254:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f258:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f25c:	e7b9      	b.n	800f1d2 <_strtod_l+0x2ca>
 800f25e:	2b6e      	cmp	r3, #110	; 0x6e
 800f260:	e7db      	b.n	800f21a <_strtod_l+0x312>
 800f262:	498f      	ldr	r1, [pc, #572]	; (800f4a0 <_strtod_l+0x598>)
 800f264:	a81d      	add	r0, sp, #116	; 0x74
 800f266:	f001 ff01 	bl	801106c <__match>
 800f26a:	2800      	cmp	r0, #0
 800f26c:	f43f aeaa 	beq.w	800efc4 <_strtod_l+0xbc>
 800f270:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f272:	498c      	ldr	r1, [pc, #560]	; (800f4a4 <_strtod_l+0x59c>)
 800f274:	3b01      	subs	r3, #1
 800f276:	a81d      	add	r0, sp, #116	; 0x74
 800f278:	931d      	str	r3, [sp, #116]	; 0x74
 800f27a:	f001 fef7 	bl	801106c <__match>
 800f27e:	b910      	cbnz	r0, 800f286 <_strtod_l+0x37e>
 800f280:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f282:	3301      	adds	r3, #1
 800f284:	931d      	str	r3, [sp, #116]	; 0x74
 800f286:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f4b4 <_strtod_l+0x5ac>
 800f28a:	f04f 0a00 	mov.w	sl, #0
 800f28e:	e67d      	b.n	800ef8c <_strtod_l+0x84>
 800f290:	4885      	ldr	r0, [pc, #532]	; (800f4a8 <_strtod_l+0x5a0>)
 800f292:	f002 fe61 	bl	8011f58 <nan>
 800f296:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f29a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f29e:	e675      	b.n	800ef8c <_strtod_l+0x84>
 800f2a0:	9b07      	ldr	r3, [sp, #28]
 800f2a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2a4:	1af3      	subs	r3, r6, r3
 800f2a6:	2f00      	cmp	r7, #0
 800f2a8:	bf08      	it	eq
 800f2aa:	462f      	moveq	r7, r5
 800f2ac:	2d10      	cmp	r5, #16
 800f2ae:	9308      	str	r3, [sp, #32]
 800f2b0:	46a8      	mov	r8, r5
 800f2b2:	bfa8      	it	ge
 800f2b4:	f04f 0810 	movge.w	r8, #16
 800f2b8:	f7f1 f924 	bl	8000504 <__aeabi_ui2d>
 800f2bc:	2d09      	cmp	r5, #9
 800f2be:	4682      	mov	sl, r0
 800f2c0:	468b      	mov	fp, r1
 800f2c2:	dd13      	ble.n	800f2ec <_strtod_l+0x3e4>
 800f2c4:	4b79      	ldr	r3, [pc, #484]	; (800f4ac <_strtod_l+0x5a4>)
 800f2c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f2ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f2ce:	f7f1 f993 	bl	80005f8 <__aeabi_dmul>
 800f2d2:	4682      	mov	sl, r0
 800f2d4:	4648      	mov	r0, r9
 800f2d6:	468b      	mov	fp, r1
 800f2d8:	f7f1 f914 	bl	8000504 <__aeabi_ui2d>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	460b      	mov	r3, r1
 800f2e0:	4650      	mov	r0, sl
 800f2e2:	4659      	mov	r1, fp
 800f2e4:	f7f0 ffd2 	bl	800028c <__adddf3>
 800f2e8:	4682      	mov	sl, r0
 800f2ea:	468b      	mov	fp, r1
 800f2ec:	2d0f      	cmp	r5, #15
 800f2ee:	dc38      	bgt.n	800f362 <_strtod_l+0x45a>
 800f2f0:	9b08      	ldr	r3, [sp, #32]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	f43f ae4a 	beq.w	800ef8c <_strtod_l+0x84>
 800f2f8:	dd24      	ble.n	800f344 <_strtod_l+0x43c>
 800f2fa:	2b16      	cmp	r3, #22
 800f2fc:	dc0b      	bgt.n	800f316 <_strtod_l+0x40e>
 800f2fe:	4d6b      	ldr	r5, [pc, #428]	; (800f4ac <_strtod_l+0x5a4>)
 800f300:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f304:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f308:	4652      	mov	r2, sl
 800f30a:	465b      	mov	r3, fp
 800f30c:	f7f1 f974 	bl	80005f8 <__aeabi_dmul>
 800f310:	4682      	mov	sl, r0
 800f312:	468b      	mov	fp, r1
 800f314:	e63a      	b.n	800ef8c <_strtod_l+0x84>
 800f316:	9a08      	ldr	r2, [sp, #32]
 800f318:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f31c:	4293      	cmp	r3, r2
 800f31e:	db20      	blt.n	800f362 <_strtod_l+0x45a>
 800f320:	4c62      	ldr	r4, [pc, #392]	; (800f4ac <_strtod_l+0x5a4>)
 800f322:	f1c5 050f 	rsb	r5, r5, #15
 800f326:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f32a:	4652      	mov	r2, sl
 800f32c:	465b      	mov	r3, fp
 800f32e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f332:	f7f1 f961 	bl	80005f8 <__aeabi_dmul>
 800f336:	9b08      	ldr	r3, [sp, #32]
 800f338:	1b5d      	subs	r5, r3, r5
 800f33a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f33e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f342:	e7e3      	b.n	800f30c <_strtod_l+0x404>
 800f344:	9b08      	ldr	r3, [sp, #32]
 800f346:	3316      	adds	r3, #22
 800f348:	db0b      	blt.n	800f362 <_strtod_l+0x45a>
 800f34a:	9b07      	ldr	r3, [sp, #28]
 800f34c:	4a57      	ldr	r2, [pc, #348]	; (800f4ac <_strtod_l+0x5a4>)
 800f34e:	1b9e      	subs	r6, r3, r6
 800f350:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f354:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f358:	4650      	mov	r0, sl
 800f35a:	4659      	mov	r1, fp
 800f35c:	f7f1 fa76 	bl	800084c <__aeabi_ddiv>
 800f360:	e7d6      	b.n	800f310 <_strtod_l+0x408>
 800f362:	9b08      	ldr	r3, [sp, #32]
 800f364:	eba5 0808 	sub.w	r8, r5, r8
 800f368:	4498      	add	r8, r3
 800f36a:	f1b8 0f00 	cmp.w	r8, #0
 800f36e:	dd71      	ble.n	800f454 <_strtod_l+0x54c>
 800f370:	f018 030f 	ands.w	r3, r8, #15
 800f374:	d00a      	beq.n	800f38c <_strtod_l+0x484>
 800f376:	494d      	ldr	r1, [pc, #308]	; (800f4ac <_strtod_l+0x5a4>)
 800f378:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f37c:	4652      	mov	r2, sl
 800f37e:	465b      	mov	r3, fp
 800f380:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f384:	f7f1 f938 	bl	80005f8 <__aeabi_dmul>
 800f388:	4682      	mov	sl, r0
 800f38a:	468b      	mov	fp, r1
 800f38c:	f038 080f 	bics.w	r8, r8, #15
 800f390:	d04d      	beq.n	800f42e <_strtod_l+0x526>
 800f392:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f396:	dd22      	ble.n	800f3de <_strtod_l+0x4d6>
 800f398:	2500      	movs	r5, #0
 800f39a:	462e      	mov	r6, r5
 800f39c:	9509      	str	r5, [sp, #36]	; 0x24
 800f39e:	9507      	str	r5, [sp, #28]
 800f3a0:	2322      	movs	r3, #34	; 0x22
 800f3a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f4b4 <_strtod_l+0x5ac>
 800f3a6:	6023      	str	r3, [r4, #0]
 800f3a8:	f04f 0a00 	mov.w	sl, #0
 800f3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	f43f adec 	beq.w	800ef8c <_strtod_l+0x84>
 800f3b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f001 ff84 	bl	80112c4 <_Bfree>
 800f3bc:	9907      	ldr	r1, [sp, #28]
 800f3be:	4620      	mov	r0, r4
 800f3c0:	f001 ff80 	bl	80112c4 <_Bfree>
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	f001 ff7c 	bl	80112c4 <_Bfree>
 800f3cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f001 ff78 	bl	80112c4 <_Bfree>
 800f3d4:	4629      	mov	r1, r5
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f001 ff74 	bl	80112c4 <_Bfree>
 800f3dc:	e5d6      	b.n	800ef8c <_strtod_l+0x84>
 800f3de:	2300      	movs	r3, #0
 800f3e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f3e4:	4650      	mov	r0, sl
 800f3e6:	4659      	mov	r1, fp
 800f3e8:	4699      	mov	r9, r3
 800f3ea:	f1b8 0f01 	cmp.w	r8, #1
 800f3ee:	dc21      	bgt.n	800f434 <_strtod_l+0x52c>
 800f3f0:	b10b      	cbz	r3, 800f3f6 <_strtod_l+0x4ee>
 800f3f2:	4682      	mov	sl, r0
 800f3f4:	468b      	mov	fp, r1
 800f3f6:	4b2e      	ldr	r3, [pc, #184]	; (800f4b0 <_strtod_l+0x5a8>)
 800f3f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f3fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f400:	4652      	mov	r2, sl
 800f402:	465b      	mov	r3, fp
 800f404:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f408:	f7f1 f8f6 	bl	80005f8 <__aeabi_dmul>
 800f40c:	4b29      	ldr	r3, [pc, #164]	; (800f4b4 <_strtod_l+0x5ac>)
 800f40e:	460a      	mov	r2, r1
 800f410:	400b      	ands	r3, r1
 800f412:	4929      	ldr	r1, [pc, #164]	; (800f4b8 <_strtod_l+0x5b0>)
 800f414:	428b      	cmp	r3, r1
 800f416:	4682      	mov	sl, r0
 800f418:	d8be      	bhi.n	800f398 <_strtod_l+0x490>
 800f41a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f41e:	428b      	cmp	r3, r1
 800f420:	bf86      	itte	hi
 800f422:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f4bc <_strtod_l+0x5b4>
 800f426:	f04f 3aff 	movhi.w	sl, #4294967295
 800f42a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f42e:	2300      	movs	r3, #0
 800f430:	9304      	str	r3, [sp, #16]
 800f432:	e081      	b.n	800f538 <_strtod_l+0x630>
 800f434:	f018 0f01 	tst.w	r8, #1
 800f438:	d007      	beq.n	800f44a <_strtod_l+0x542>
 800f43a:	4b1d      	ldr	r3, [pc, #116]	; (800f4b0 <_strtod_l+0x5a8>)
 800f43c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f444:	f7f1 f8d8 	bl	80005f8 <__aeabi_dmul>
 800f448:	2301      	movs	r3, #1
 800f44a:	f109 0901 	add.w	r9, r9, #1
 800f44e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f452:	e7ca      	b.n	800f3ea <_strtod_l+0x4e2>
 800f454:	d0eb      	beq.n	800f42e <_strtod_l+0x526>
 800f456:	f1c8 0800 	rsb	r8, r8, #0
 800f45a:	f018 020f 	ands.w	r2, r8, #15
 800f45e:	d00a      	beq.n	800f476 <_strtod_l+0x56e>
 800f460:	4b12      	ldr	r3, [pc, #72]	; (800f4ac <_strtod_l+0x5a4>)
 800f462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f466:	4650      	mov	r0, sl
 800f468:	4659      	mov	r1, fp
 800f46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46e:	f7f1 f9ed 	bl	800084c <__aeabi_ddiv>
 800f472:	4682      	mov	sl, r0
 800f474:	468b      	mov	fp, r1
 800f476:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f47a:	d0d8      	beq.n	800f42e <_strtod_l+0x526>
 800f47c:	f1b8 0f1f 	cmp.w	r8, #31
 800f480:	dd1e      	ble.n	800f4c0 <_strtod_l+0x5b8>
 800f482:	2500      	movs	r5, #0
 800f484:	462e      	mov	r6, r5
 800f486:	9509      	str	r5, [sp, #36]	; 0x24
 800f488:	9507      	str	r5, [sp, #28]
 800f48a:	2322      	movs	r3, #34	; 0x22
 800f48c:	f04f 0a00 	mov.w	sl, #0
 800f490:	f04f 0b00 	mov.w	fp, #0
 800f494:	6023      	str	r3, [r4, #0]
 800f496:	e789      	b.n	800f3ac <_strtod_l+0x4a4>
 800f498:	08014319 	.word	0x08014319
 800f49c:	0801435c 	.word	0x0801435c
 800f4a0:	08014311 	.word	0x08014311
 800f4a4:	0801449c 	.word	0x0801449c
 800f4a8:	08014758 	.word	0x08014758
 800f4ac:	08014638 	.word	0x08014638
 800f4b0:	08014610 	.word	0x08014610
 800f4b4:	7ff00000 	.word	0x7ff00000
 800f4b8:	7ca00000 	.word	0x7ca00000
 800f4bc:	7fefffff 	.word	0x7fefffff
 800f4c0:	f018 0310 	ands.w	r3, r8, #16
 800f4c4:	bf18      	it	ne
 800f4c6:	236a      	movne	r3, #106	; 0x6a
 800f4c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800f880 <_strtod_l+0x978>
 800f4cc:	9304      	str	r3, [sp, #16]
 800f4ce:	4650      	mov	r0, sl
 800f4d0:	4659      	mov	r1, fp
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	f018 0f01 	tst.w	r8, #1
 800f4d8:	d004      	beq.n	800f4e4 <_strtod_l+0x5dc>
 800f4da:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f4de:	f7f1 f88b 	bl	80005f8 <__aeabi_dmul>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f4e8:	f109 0908 	add.w	r9, r9, #8
 800f4ec:	d1f2      	bne.n	800f4d4 <_strtod_l+0x5cc>
 800f4ee:	b10b      	cbz	r3, 800f4f4 <_strtod_l+0x5ec>
 800f4f0:	4682      	mov	sl, r0
 800f4f2:	468b      	mov	fp, r1
 800f4f4:	9b04      	ldr	r3, [sp, #16]
 800f4f6:	b1bb      	cbz	r3, 800f528 <_strtod_l+0x620>
 800f4f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f4fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f500:	2b00      	cmp	r3, #0
 800f502:	4659      	mov	r1, fp
 800f504:	dd10      	ble.n	800f528 <_strtod_l+0x620>
 800f506:	2b1f      	cmp	r3, #31
 800f508:	f340 8128 	ble.w	800f75c <_strtod_l+0x854>
 800f50c:	2b34      	cmp	r3, #52	; 0x34
 800f50e:	bfde      	ittt	le
 800f510:	3b20      	suble	r3, #32
 800f512:	f04f 32ff 	movle.w	r2, #4294967295
 800f516:	fa02 f303 	lslle.w	r3, r2, r3
 800f51a:	f04f 0a00 	mov.w	sl, #0
 800f51e:	bfcc      	ite	gt
 800f520:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f524:	ea03 0b01 	andle.w	fp, r3, r1
 800f528:	2200      	movs	r2, #0
 800f52a:	2300      	movs	r3, #0
 800f52c:	4650      	mov	r0, sl
 800f52e:	4659      	mov	r1, fp
 800f530:	f7f1 faca 	bl	8000ac8 <__aeabi_dcmpeq>
 800f534:	2800      	cmp	r0, #0
 800f536:	d1a4      	bne.n	800f482 <_strtod_l+0x57a>
 800f538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f53a:	9300      	str	r3, [sp, #0]
 800f53c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f53e:	462b      	mov	r3, r5
 800f540:	463a      	mov	r2, r7
 800f542:	4620      	mov	r0, r4
 800f544:	f001 ff2a 	bl	801139c <__s2b>
 800f548:	9009      	str	r0, [sp, #36]	; 0x24
 800f54a:	2800      	cmp	r0, #0
 800f54c:	f43f af24 	beq.w	800f398 <_strtod_l+0x490>
 800f550:	9b07      	ldr	r3, [sp, #28]
 800f552:	1b9e      	subs	r6, r3, r6
 800f554:	9b08      	ldr	r3, [sp, #32]
 800f556:	2b00      	cmp	r3, #0
 800f558:	bfb4      	ite	lt
 800f55a:	4633      	movlt	r3, r6
 800f55c:	2300      	movge	r3, #0
 800f55e:	9310      	str	r3, [sp, #64]	; 0x40
 800f560:	9b08      	ldr	r3, [sp, #32]
 800f562:	2500      	movs	r5, #0
 800f564:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f568:	9318      	str	r3, [sp, #96]	; 0x60
 800f56a:	462e      	mov	r6, r5
 800f56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f56e:	4620      	mov	r0, r4
 800f570:	6859      	ldr	r1, [r3, #4]
 800f572:	f001 fe67 	bl	8011244 <_Balloc>
 800f576:	9007      	str	r0, [sp, #28]
 800f578:	2800      	cmp	r0, #0
 800f57a:	f43f af11 	beq.w	800f3a0 <_strtod_l+0x498>
 800f57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f580:	691a      	ldr	r2, [r3, #16]
 800f582:	3202      	adds	r2, #2
 800f584:	f103 010c 	add.w	r1, r3, #12
 800f588:	0092      	lsls	r2, r2, #2
 800f58a:	300c      	adds	r0, #12
 800f58c:	f7fe fcd1 	bl	800df32 <memcpy>
 800f590:	ec4b ab10 	vmov	d0, sl, fp
 800f594:	aa20      	add	r2, sp, #128	; 0x80
 800f596:	a91f      	add	r1, sp, #124	; 0x7c
 800f598:	4620      	mov	r0, r4
 800f59a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f59e:	f002 fa39 	bl	8011a14 <__d2b>
 800f5a2:	901e      	str	r0, [sp, #120]	; 0x78
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	f43f aefb 	beq.w	800f3a0 <_strtod_l+0x498>
 800f5aa:	2101      	movs	r1, #1
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f001 ff8f 	bl	80114d0 <__i2b>
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	f43f aef3 	beq.w	800f3a0 <_strtod_l+0x498>
 800f5ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f5bc:	9904      	ldr	r1, [sp, #16]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	bfab      	itete	ge
 800f5c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f5c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f5c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f5c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f5cc:	bfac      	ite	ge
 800f5ce:	eb03 0902 	addge.w	r9, r3, r2
 800f5d2:	1ad7      	sublt	r7, r2, r3
 800f5d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f5d6:	eba3 0801 	sub.w	r8, r3, r1
 800f5da:	4490      	add	r8, r2
 800f5dc:	4ba3      	ldr	r3, [pc, #652]	; (800f86c <_strtod_l+0x964>)
 800f5de:	f108 38ff 	add.w	r8, r8, #4294967295
 800f5e2:	4598      	cmp	r8, r3
 800f5e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f5e8:	f280 80cc 	bge.w	800f784 <_strtod_l+0x87c>
 800f5ec:	eba3 0308 	sub.w	r3, r3, r8
 800f5f0:	2b1f      	cmp	r3, #31
 800f5f2:	eba2 0203 	sub.w	r2, r2, r3
 800f5f6:	f04f 0101 	mov.w	r1, #1
 800f5fa:	f300 80b6 	bgt.w	800f76a <_strtod_l+0x862>
 800f5fe:	fa01 f303 	lsl.w	r3, r1, r3
 800f602:	9311      	str	r3, [sp, #68]	; 0x44
 800f604:	2300      	movs	r3, #0
 800f606:	930c      	str	r3, [sp, #48]	; 0x30
 800f608:	eb09 0802 	add.w	r8, r9, r2
 800f60c:	9b04      	ldr	r3, [sp, #16]
 800f60e:	45c1      	cmp	r9, r8
 800f610:	4417      	add	r7, r2
 800f612:	441f      	add	r7, r3
 800f614:	464b      	mov	r3, r9
 800f616:	bfa8      	it	ge
 800f618:	4643      	movge	r3, r8
 800f61a:	42bb      	cmp	r3, r7
 800f61c:	bfa8      	it	ge
 800f61e:	463b      	movge	r3, r7
 800f620:	2b00      	cmp	r3, #0
 800f622:	bfc2      	ittt	gt
 800f624:	eba8 0803 	subgt.w	r8, r8, r3
 800f628:	1aff      	subgt	r7, r7, r3
 800f62a:	eba9 0903 	subgt.w	r9, r9, r3
 800f62e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f630:	2b00      	cmp	r3, #0
 800f632:	dd17      	ble.n	800f664 <_strtod_l+0x75c>
 800f634:	4631      	mov	r1, r6
 800f636:	461a      	mov	r2, r3
 800f638:	4620      	mov	r0, r4
 800f63a:	f002 f805 	bl	8011648 <__pow5mult>
 800f63e:	4606      	mov	r6, r0
 800f640:	2800      	cmp	r0, #0
 800f642:	f43f aead 	beq.w	800f3a0 <_strtod_l+0x498>
 800f646:	4601      	mov	r1, r0
 800f648:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f64a:	4620      	mov	r0, r4
 800f64c:	f001 ff56 	bl	80114fc <__multiply>
 800f650:	900f      	str	r0, [sp, #60]	; 0x3c
 800f652:	2800      	cmp	r0, #0
 800f654:	f43f aea4 	beq.w	800f3a0 <_strtod_l+0x498>
 800f658:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f65a:	4620      	mov	r0, r4
 800f65c:	f001 fe32 	bl	80112c4 <_Bfree>
 800f660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f662:	931e      	str	r3, [sp, #120]	; 0x78
 800f664:	f1b8 0f00 	cmp.w	r8, #0
 800f668:	f300 8091 	bgt.w	800f78e <_strtod_l+0x886>
 800f66c:	9b08      	ldr	r3, [sp, #32]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	dd08      	ble.n	800f684 <_strtod_l+0x77c>
 800f672:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f674:	9907      	ldr	r1, [sp, #28]
 800f676:	4620      	mov	r0, r4
 800f678:	f001 ffe6 	bl	8011648 <__pow5mult>
 800f67c:	9007      	str	r0, [sp, #28]
 800f67e:	2800      	cmp	r0, #0
 800f680:	f43f ae8e 	beq.w	800f3a0 <_strtod_l+0x498>
 800f684:	2f00      	cmp	r7, #0
 800f686:	dd08      	ble.n	800f69a <_strtod_l+0x792>
 800f688:	9907      	ldr	r1, [sp, #28]
 800f68a:	463a      	mov	r2, r7
 800f68c:	4620      	mov	r0, r4
 800f68e:	f002 f835 	bl	80116fc <__lshift>
 800f692:	9007      	str	r0, [sp, #28]
 800f694:	2800      	cmp	r0, #0
 800f696:	f43f ae83 	beq.w	800f3a0 <_strtod_l+0x498>
 800f69a:	f1b9 0f00 	cmp.w	r9, #0
 800f69e:	dd08      	ble.n	800f6b2 <_strtod_l+0x7aa>
 800f6a0:	4631      	mov	r1, r6
 800f6a2:	464a      	mov	r2, r9
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f002 f829 	bl	80116fc <__lshift>
 800f6aa:	4606      	mov	r6, r0
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	f43f ae77 	beq.w	800f3a0 <_strtod_l+0x498>
 800f6b2:	9a07      	ldr	r2, [sp, #28]
 800f6b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f002 f8a8 	bl	801180c <__mdiff>
 800f6bc:	4605      	mov	r5, r0
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	f43f ae6e 	beq.w	800f3a0 <_strtod_l+0x498>
 800f6c4:	68c3      	ldr	r3, [r0, #12]
 800f6c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	60c3      	str	r3, [r0, #12]
 800f6cc:	4631      	mov	r1, r6
 800f6ce:	f002 f881 	bl	80117d4 <__mcmp>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	da65      	bge.n	800f7a2 <_strtod_l+0x89a>
 800f6d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6d8:	ea53 030a 	orrs.w	r3, r3, sl
 800f6dc:	f040 8087 	bne.w	800f7ee <_strtod_l+0x8e6>
 800f6e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	f040 8082 	bne.w	800f7ee <_strtod_l+0x8e6>
 800f6ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f6ee:	0d1b      	lsrs	r3, r3, #20
 800f6f0:	051b      	lsls	r3, r3, #20
 800f6f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f6f6:	d97a      	bls.n	800f7ee <_strtod_l+0x8e6>
 800f6f8:	696b      	ldr	r3, [r5, #20]
 800f6fa:	b913      	cbnz	r3, 800f702 <_strtod_l+0x7fa>
 800f6fc:	692b      	ldr	r3, [r5, #16]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	dd75      	ble.n	800f7ee <_strtod_l+0x8e6>
 800f702:	4629      	mov	r1, r5
 800f704:	2201      	movs	r2, #1
 800f706:	4620      	mov	r0, r4
 800f708:	f001 fff8 	bl	80116fc <__lshift>
 800f70c:	4631      	mov	r1, r6
 800f70e:	4605      	mov	r5, r0
 800f710:	f002 f860 	bl	80117d4 <__mcmp>
 800f714:	2800      	cmp	r0, #0
 800f716:	dd6a      	ble.n	800f7ee <_strtod_l+0x8e6>
 800f718:	9904      	ldr	r1, [sp, #16]
 800f71a:	4a55      	ldr	r2, [pc, #340]	; (800f870 <_strtod_l+0x968>)
 800f71c:	465b      	mov	r3, fp
 800f71e:	2900      	cmp	r1, #0
 800f720:	f000 8085 	beq.w	800f82e <_strtod_l+0x926>
 800f724:	ea02 010b 	and.w	r1, r2, fp
 800f728:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f72c:	dc7f      	bgt.n	800f82e <_strtod_l+0x926>
 800f72e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f732:	f77f aeaa 	ble.w	800f48a <_strtod_l+0x582>
 800f736:	4a4f      	ldr	r2, [pc, #316]	; (800f874 <_strtod_l+0x96c>)
 800f738:	2300      	movs	r3, #0
 800f73a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800f73e:	4650      	mov	r0, sl
 800f740:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f744:	4659      	mov	r1, fp
 800f746:	f7f0 ff57 	bl	80005f8 <__aeabi_dmul>
 800f74a:	460b      	mov	r3, r1
 800f74c:	4303      	orrs	r3, r0
 800f74e:	bf08      	it	eq
 800f750:	2322      	moveq	r3, #34	; 0x22
 800f752:	4682      	mov	sl, r0
 800f754:	468b      	mov	fp, r1
 800f756:	bf08      	it	eq
 800f758:	6023      	streq	r3, [r4, #0]
 800f75a:	e62b      	b.n	800f3b4 <_strtod_l+0x4ac>
 800f75c:	f04f 32ff 	mov.w	r2, #4294967295
 800f760:	fa02 f303 	lsl.w	r3, r2, r3
 800f764:	ea03 0a0a 	and.w	sl, r3, sl
 800f768:	e6de      	b.n	800f528 <_strtod_l+0x620>
 800f76a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f76e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f772:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f776:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f77a:	fa01 f308 	lsl.w	r3, r1, r8
 800f77e:	930c      	str	r3, [sp, #48]	; 0x30
 800f780:	9111      	str	r1, [sp, #68]	; 0x44
 800f782:	e741      	b.n	800f608 <_strtod_l+0x700>
 800f784:	2300      	movs	r3, #0
 800f786:	930c      	str	r3, [sp, #48]	; 0x30
 800f788:	2301      	movs	r3, #1
 800f78a:	9311      	str	r3, [sp, #68]	; 0x44
 800f78c:	e73c      	b.n	800f608 <_strtod_l+0x700>
 800f78e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f790:	4642      	mov	r2, r8
 800f792:	4620      	mov	r0, r4
 800f794:	f001 ffb2 	bl	80116fc <__lshift>
 800f798:	901e      	str	r0, [sp, #120]	; 0x78
 800f79a:	2800      	cmp	r0, #0
 800f79c:	f47f af66 	bne.w	800f66c <_strtod_l+0x764>
 800f7a0:	e5fe      	b.n	800f3a0 <_strtod_l+0x498>
 800f7a2:	465f      	mov	r7, fp
 800f7a4:	d16e      	bne.n	800f884 <_strtod_l+0x97c>
 800f7a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7ac:	b342      	cbz	r2, 800f800 <_strtod_l+0x8f8>
 800f7ae:	4a32      	ldr	r2, [pc, #200]	; (800f878 <_strtod_l+0x970>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d128      	bne.n	800f806 <_strtod_l+0x8fe>
 800f7b4:	9b04      	ldr	r3, [sp, #16]
 800f7b6:	4650      	mov	r0, sl
 800f7b8:	b1eb      	cbz	r3, 800f7f6 <_strtod_l+0x8ee>
 800f7ba:	4a2d      	ldr	r2, [pc, #180]	; (800f870 <_strtod_l+0x968>)
 800f7bc:	403a      	ands	r2, r7
 800f7be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f7c2:	f04f 31ff 	mov.w	r1, #4294967295
 800f7c6:	d819      	bhi.n	800f7fc <_strtod_l+0x8f4>
 800f7c8:	0d12      	lsrs	r2, r2, #20
 800f7ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f7ce:	fa01 f303 	lsl.w	r3, r1, r3
 800f7d2:	4298      	cmp	r0, r3
 800f7d4:	d117      	bne.n	800f806 <_strtod_l+0x8fe>
 800f7d6:	4b29      	ldr	r3, [pc, #164]	; (800f87c <_strtod_l+0x974>)
 800f7d8:	429f      	cmp	r7, r3
 800f7da:	d102      	bne.n	800f7e2 <_strtod_l+0x8da>
 800f7dc:	3001      	adds	r0, #1
 800f7de:	f43f addf 	beq.w	800f3a0 <_strtod_l+0x498>
 800f7e2:	4b23      	ldr	r3, [pc, #140]	; (800f870 <_strtod_l+0x968>)
 800f7e4:	403b      	ands	r3, r7
 800f7e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f7ea:	f04f 0a00 	mov.w	sl, #0
 800f7ee:	9b04      	ldr	r3, [sp, #16]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d1a0      	bne.n	800f736 <_strtod_l+0x82e>
 800f7f4:	e5de      	b.n	800f3b4 <_strtod_l+0x4ac>
 800f7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7fa:	e7ea      	b.n	800f7d2 <_strtod_l+0x8ca>
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	e7e8      	b.n	800f7d2 <_strtod_l+0x8ca>
 800f800:	ea53 030a 	orrs.w	r3, r3, sl
 800f804:	d088      	beq.n	800f718 <_strtod_l+0x810>
 800f806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f808:	b1db      	cbz	r3, 800f842 <_strtod_l+0x93a>
 800f80a:	423b      	tst	r3, r7
 800f80c:	d0ef      	beq.n	800f7ee <_strtod_l+0x8e6>
 800f80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f810:	9a04      	ldr	r2, [sp, #16]
 800f812:	4650      	mov	r0, sl
 800f814:	4659      	mov	r1, fp
 800f816:	b1c3      	cbz	r3, 800f84a <_strtod_l+0x942>
 800f818:	f7ff fb59 	bl	800eece <sulp>
 800f81c:	4602      	mov	r2, r0
 800f81e:	460b      	mov	r3, r1
 800f820:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f824:	f7f0 fd32 	bl	800028c <__adddf3>
 800f828:	4682      	mov	sl, r0
 800f82a:	468b      	mov	fp, r1
 800f82c:	e7df      	b.n	800f7ee <_strtod_l+0x8e6>
 800f82e:	4013      	ands	r3, r2
 800f830:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f834:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f838:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f83c:	f04f 3aff 	mov.w	sl, #4294967295
 800f840:	e7d5      	b.n	800f7ee <_strtod_l+0x8e6>
 800f842:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f844:	ea13 0f0a 	tst.w	r3, sl
 800f848:	e7e0      	b.n	800f80c <_strtod_l+0x904>
 800f84a:	f7ff fb40 	bl	800eece <sulp>
 800f84e:	4602      	mov	r2, r0
 800f850:	460b      	mov	r3, r1
 800f852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f856:	f7f0 fd17 	bl	8000288 <__aeabi_dsub>
 800f85a:	2200      	movs	r2, #0
 800f85c:	2300      	movs	r3, #0
 800f85e:	4682      	mov	sl, r0
 800f860:	468b      	mov	fp, r1
 800f862:	f7f1 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 800f866:	2800      	cmp	r0, #0
 800f868:	d0c1      	beq.n	800f7ee <_strtod_l+0x8e6>
 800f86a:	e60e      	b.n	800f48a <_strtod_l+0x582>
 800f86c:	fffffc02 	.word	0xfffffc02
 800f870:	7ff00000 	.word	0x7ff00000
 800f874:	39500000 	.word	0x39500000
 800f878:	000fffff 	.word	0x000fffff
 800f87c:	7fefffff 	.word	0x7fefffff
 800f880:	08014370 	.word	0x08014370
 800f884:	4631      	mov	r1, r6
 800f886:	4628      	mov	r0, r5
 800f888:	f002 f920 	bl	8011acc <__ratio>
 800f88c:	ec59 8b10 	vmov	r8, r9, d0
 800f890:	ee10 0a10 	vmov	r0, s0
 800f894:	2200      	movs	r2, #0
 800f896:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f89a:	4649      	mov	r1, r9
 800f89c:	f7f1 f928 	bl	8000af0 <__aeabi_dcmple>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	d07c      	beq.n	800f99e <_strtod_l+0xa96>
 800f8a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d04c      	beq.n	800f944 <_strtod_l+0xa3c>
 800f8aa:	4b95      	ldr	r3, [pc, #596]	; (800fb00 <_strtod_l+0xbf8>)
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f8b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fb00 <_strtod_l+0xbf8>
 800f8b6:	f04f 0800 	mov.w	r8, #0
 800f8ba:	4b92      	ldr	r3, [pc, #584]	; (800fb04 <_strtod_l+0xbfc>)
 800f8bc:	403b      	ands	r3, r7
 800f8be:	9311      	str	r3, [sp, #68]	; 0x44
 800f8c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f8c2:	4b91      	ldr	r3, [pc, #580]	; (800fb08 <_strtod_l+0xc00>)
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	f040 80b2 	bne.w	800fa2e <_strtod_l+0xb26>
 800f8ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f8ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f8d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f8d6:	ec4b ab10 	vmov	d0, sl, fp
 800f8da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800f8de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f8e2:	f002 f81b 	bl	801191c <__ulp>
 800f8e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f8ea:	ec53 2b10 	vmov	r2, r3, d0
 800f8ee:	f7f0 fe83 	bl	80005f8 <__aeabi_dmul>
 800f8f2:	4652      	mov	r2, sl
 800f8f4:	465b      	mov	r3, fp
 800f8f6:	f7f0 fcc9 	bl	800028c <__adddf3>
 800f8fa:	460b      	mov	r3, r1
 800f8fc:	4981      	ldr	r1, [pc, #516]	; (800fb04 <_strtod_l+0xbfc>)
 800f8fe:	4a83      	ldr	r2, [pc, #524]	; (800fb0c <_strtod_l+0xc04>)
 800f900:	4019      	ands	r1, r3
 800f902:	4291      	cmp	r1, r2
 800f904:	4682      	mov	sl, r0
 800f906:	d95e      	bls.n	800f9c6 <_strtod_l+0xabe>
 800f908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f90a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f90e:	4293      	cmp	r3, r2
 800f910:	d103      	bne.n	800f91a <_strtod_l+0xa12>
 800f912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f914:	3301      	adds	r3, #1
 800f916:	f43f ad43 	beq.w	800f3a0 <_strtod_l+0x498>
 800f91a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800fb18 <_strtod_l+0xc10>
 800f91e:	f04f 3aff 	mov.w	sl, #4294967295
 800f922:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f924:	4620      	mov	r0, r4
 800f926:	f001 fccd 	bl	80112c4 <_Bfree>
 800f92a:	9907      	ldr	r1, [sp, #28]
 800f92c:	4620      	mov	r0, r4
 800f92e:	f001 fcc9 	bl	80112c4 <_Bfree>
 800f932:	4631      	mov	r1, r6
 800f934:	4620      	mov	r0, r4
 800f936:	f001 fcc5 	bl	80112c4 <_Bfree>
 800f93a:	4629      	mov	r1, r5
 800f93c:	4620      	mov	r0, r4
 800f93e:	f001 fcc1 	bl	80112c4 <_Bfree>
 800f942:	e613      	b.n	800f56c <_strtod_l+0x664>
 800f944:	f1ba 0f00 	cmp.w	sl, #0
 800f948:	d11b      	bne.n	800f982 <_strtod_l+0xa7a>
 800f94a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f94e:	b9f3      	cbnz	r3, 800f98e <_strtod_l+0xa86>
 800f950:	4b6b      	ldr	r3, [pc, #428]	; (800fb00 <_strtod_l+0xbf8>)
 800f952:	2200      	movs	r2, #0
 800f954:	4640      	mov	r0, r8
 800f956:	4649      	mov	r1, r9
 800f958:	f7f1 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800f95c:	b9d0      	cbnz	r0, 800f994 <_strtod_l+0xa8c>
 800f95e:	4640      	mov	r0, r8
 800f960:	4649      	mov	r1, r9
 800f962:	4b6b      	ldr	r3, [pc, #428]	; (800fb10 <_strtod_l+0xc08>)
 800f964:	2200      	movs	r2, #0
 800f966:	f7f0 fe47 	bl	80005f8 <__aeabi_dmul>
 800f96a:	4680      	mov	r8, r0
 800f96c:	4689      	mov	r9, r1
 800f96e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f972:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f976:	931b      	str	r3, [sp, #108]	; 0x6c
 800f978:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f97c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f980:	e79b      	b.n	800f8ba <_strtod_l+0x9b2>
 800f982:	f1ba 0f01 	cmp.w	sl, #1
 800f986:	d102      	bne.n	800f98e <_strtod_l+0xa86>
 800f988:	2f00      	cmp	r7, #0
 800f98a:	f43f ad7e 	beq.w	800f48a <_strtod_l+0x582>
 800f98e:	4b61      	ldr	r3, [pc, #388]	; (800fb14 <_strtod_l+0xc0c>)
 800f990:	2200      	movs	r2, #0
 800f992:	e78c      	b.n	800f8ae <_strtod_l+0x9a6>
 800f994:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fb10 <_strtod_l+0xc08>
 800f998:	f04f 0800 	mov.w	r8, #0
 800f99c:	e7e7      	b.n	800f96e <_strtod_l+0xa66>
 800f99e:	4b5c      	ldr	r3, [pc, #368]	; (800fb10 <_strtod_l+0xc08>)
 800f9a0:	4640      	mov	r0, r8
 800f9a2:	4649      	mov	r1, r9
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f7f0 fe27 	bl	80005f8 <__aeabi_dmul>
 800f9aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9ac:	4680      	mov	r8, r0
 800f9ae:	4689      	mov	r9, r1
 800f9b0:	b933      	cbnz	r3, 800f9c0 <_strtod_l+0xab8>
 800f9b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9b6:	9012      	str	r0, [sp, #72]	; 0x48
 800f9b8:	9313      	str	r3, [sp, #76]	; 0x4c
 800f9ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f9be:	e7dd      	b.n	800f97c <_strtod_l+0xa74>
 800f9c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f9c4:	e7f9      	b.n	800f9ba <_strtod_l+0xab2>
 800f9c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f9ca:	9b04      	ldr	r3, [sp, #16]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d1a8      	bne.n	800f922 <_strtod_l+0xa1a>
 800f9d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f9d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f9d6:	0d1b      	lsrs	r3, r3, #20
 800f9d8:	051b      	lsls	r3, r3, #20
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d1a1      	bne.n	800f922 <_strtod_l+0xa1a>
 800f9de:	4640      	mov	r0, r8
 800f9e0:	4649      	mov	r1, r9
 800f9e2:	f7f1 f969 	bl	8000cb8 <__aeabi_d2lz>
 800f9e6:	f7f0 fdd9 	bl	800059c <__aeabi_l2d>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	4640      	mov	r0, r8
 800f9f0:	4649      	mov	r1, r9
 800f9f2:	f7f0 fc49 	bl	8000288 <__aeabi_dsub>
 800f9f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f9f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9fc:	ea43 030a 	orr.w	r3, r3, sl
 800fa00:	4313      	orrs	r3, r2
 800fa02:	4680      	mov	r8, r0
 800fa04:	4689      	mov	r9, r1
 800fa06:	d053      	beq.n	800fab0 <_strtod_l+0xba8>
 800fa08:	a335      	add	r3, pc, #212	; (adr r3, 800fae0 <_strtod_l+0xbd8>)
 800fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0e:	f7f1 f865 	bl	8000adc <__aeabi_dcmplt>
 800fa12:	2800      	cmp	r0, #0
 800fa14:	f47f acce 	bne.w	800f3b4 <_strtod_l+0x4ac>
 800fa18:	a333      	add	r3, pc, #204	; (adr r3, 800fae8 <_strtod_l+0xbe0>)
 800fa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1e:	4640      	mov	r0, r8
 800fa20:	4649      	mov	r1, r9
 800fa22:	f7f1 f879 	bl	8000b18 <__aeabi_dcmpgt>
 800fa26:	2800      	cmp	r0, #0
 800fa28:	f43f af7b 	beq.w	800f922 <_strtod_l+0xa1a>
 800fa2c:	e4c2      	b.n	800f3b4 <_strtod_l+0x4ac>
 800fa2e:	9b04      	ldr	r3, [sp, #16]
 800fa30:	b333      	cbz	r3, 800fa80 <_strtod_l+0xb78>
 800fa32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fa38:	d822      	bhi.n	800fa80 <_strtod_l+0xb78>
 800fa3a:	a32d      	add	r3, pc, #180	; (adr r3, 800faf0 <_strtod_l+0xbe8>)
 800fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa40:	4640      	mov	r0, r8
 800fa42:	4649      	mov	r1, r9
 800fa44:	f7f1 f854 	bl	8000af0 <__aeabi_dcmple>
 800fa48:	b1a0      	cbz	r0, 800fa74 <_strtod_l+0xb6c>
 800fa4a:	4649      	mov	r1, r9
 800fa4c:	4640      	mov	r0, r8
 800fa4e:	f7f1 f8ab 	bl	8000ba8 <__aeabi_d2uiz>
 800fa52:	2801      	cmp	r0, #1
 800fa54:	bf38      	it	cc
 800fa56:	2001      	movcc	r0, #1
 800fa58:	f7f0 fd54 	bl	8000504 <__aeabi_ui2d>
 800fa5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa5e:	4680      	mov	r8, r0
 800fa60:	4689      	mov	r9, r1
 800fa62:	bb13      	cbnz	r3, 800faaa <_strtod_l+0xba2>
 800fa64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa68:	9014      	str	r0, [sp, #80]	; 0x50
 800fa6a:	9315      	str	r3, [sp, #84]	; 0x54
 800fa6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fa70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fa74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fa78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fa7c:	1a9b      	subs	r3, r3, r2
 800fa7e:	930d      	str	r3, [sp, #52]	; 0x34
 800fa80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa84:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fa88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fa8c:	f001 ff46 	bl	801191c <__ulp>
 800fa90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa94:	ec53 2b10 	vmov	r2, r3, d0
 800fa98:	f7f0 fdae 	bl	80005f8 <__aeabi_dmul>
 800fa9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800faa0:	f7f0 fbf4 	bl	800028c <__adddf3>
 800faa4:	4682      	mov	sl, r0
 800faa6:	468b      	mov	fp, r1
 800faa8:	e78f      	b.n	800f9ca <_strtod_l+0xac2>
 800faaa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800faae:	e7dd      	b.n	800fa6c <_strtod_l+0xb64>
 800fab0:	a311      	add	r3, pc, #68	; (adr r3, 800faf8 <_strtod_l+0xbf0>)
 800fab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab6:	f7f1 f811 	bl	8000adc <__aeabi_dcmplt>
 800faba:	e7b4      	b.n	800fa26 <_strtod_l+0xb1e>
 800fabc:	2300      	movs	r3, #0
 800fabe:	930e      	str	r3, [sp, #56]	; 0x38
 800fac0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fac2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fac4:	6013      	str	r3, [r2, #0]
 800fac6:	f7ff ba65 	b.w	800ef94 <_strtod_l+0x8c>
 800faca:	2b65      	cmp	r3, #101	; 0x65
 800facc:	f43f ab5d 	beq.w	800f18a <_strtod_l+0x282>
 800fad0:	2b45      	cmp	r3, #69	; 0x45
 800fad2:	f43f ab5a 	beq.w	800f18a <_strtod_l+0x282>
 800fad6:	2201      	movs	r2, #1
 800fad8:	f7ff bb92 	b.w	800f200 <_strtod_l+0x2f8>
 800fadc:	f3af 8000 	nop.w
 800fae0:	94a03595 	.word	0x94a03595
 800fae4:	3fdfffff 	.word	0x3fdfffff
 800fae8:	35afe535 	.word	0x35afe535
 800faec:	3fe00000 	.word	0x3fe00000
 800faf0:	ffc00000 	.word	0xffc00000
 800faf4:	41dfffff 	.word	0x41dfffff
 800faf8:	94a03595 	.word	0x94a03595
 800fafc:	3fcfffff 	.word	0x3fcfffff
 800fb00:	3ff00000 	.word	0x3ff00000
 800fb04:	7ff00000 	.word	0x7ff00000
 800fb08:	7fe00000 	.word	0x7fe00000
 800fb0c:	7c9fffff 	.word	0x7c9fffff
 800fb10:	3fe00000 	.word	0x3fe00000
 800fb14:	bff00000 	.word	0xbff00000
 800fb18:	7fefffff 	.word	0x7fefffff

0800fb1c <_strtod_r>:
 800fb1c:	4b01      	ldr	r3, [pc, #4]	; (800fb24 <_strtod_r+0x8>)
 800fb1e:	f7ff b9f3 	b.w	800ef08 <_strtod_l>
 800fb22:	bf00      	nop
 800fb24:	200000b0 	.word	0x200000b0

0800fb28 <_strtol_l.isra.0>:
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb2e:	d001      	beq.n	800fb34 <_strtol_l.isra.0+0xc>
 800fb30:	2b24      	cmp	r3, #36	; 0x24
 800fb32:	d906      	bls.n	800fb42 <_strtol_l.isra.0+0x1a>
 800fb34:	f7fe f8da 	bl	800dcec <__errno>
 800fb38:	2316      	movs	r3, #22
 800fb3a:	6003      	str	r3, [r0, #0]
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb42:	4f3a      	ldr	r7, [pc, #232]	; (800fc2c <_strtol_l.isra.0+0x104>)
 800fb44:	468e      	mov	lr, r1
 800fb46:	4676      	mov	r6, lr
 800fb48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800fb4c:	5de5      	ldrb	r5, [r4, r7]
 800fb4e:	f015 0508 	ands.w	r5, r5, #8
 800fb52:	d1f8      	bne.n	800fb46 <_strtol_l.isra.0+0x1e>
 800fb54:	2c2d      	cmp	r4, #45	; 0x2d
 800fb56:	d134      	bne.n	800fbc2 <_strtol_l.isra.0+0x9a>
 800fb58:	f89e 4000 	ldrb.w	r4, [lr]
 800fb5c:	f04f 0801 	mov.w	r8, #1
 800fb60:	f106 0e02 	add.w	lr, r6, #2
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d05c      	beq.n	800fc22 <_strtol_l.isra.0+0xfa>
 800fb68:	2b10      	cmp	r3, #16
 800fb6a:	d10c      	bne.n	800fb86 <_strtol_l.isra.0+0x5e>
 800fb6c:	2c30      	cmp	r4, #48	; 0x30
 800fb6e:	d10a      	bne.n	800fb86 <_strtol_l.isra.0+0x5e>
 800fb70:	f89e 4000 	ldrb.w	r4, [lr]
 800fb74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fb78:	2c58      	cmp	r4, #88	; 0x58
 800fb7a:	d14d      	bne.n	800fc18 <_strtol_l.isra.0+0xf0>
 800fb7c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800fb80:	2310      	movs	r3, #16
 800fb82:	f10e 0e02 	add.w	lr, lr, #2
 800fb86:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800fb8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fb8e:	2600      	movs	r6, #0
 800fb90:	fbbc f9f3 	udiv	r9, ip, r3
 800fb94:	4635      	mov	r5, r6
 800fb96:	fb03 ca19 	mls	sl, r3, r9, ip
 800fb9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800fb9e:	2f09      	cmp	r7, #9
 800fba0:	d818      	bhi.n	800fbd4 <_strtol_l.isra.0+0xac>
 800fba2:	463c      	mov	r4, r7
 800fba4:	42a3      	cmp	r3, r4
 800fba6:	dd24      	ble.n	800fbf2 <_strtol_l.isra.0+0xca>
 800fba8:	2e00      	cmp	r6, #0
 800fbaa:	db1f      	blt.n	800fbec <_strtol_l.isra.0+0xc4>
 800fbac:	45a9      	cmp	r9, r5
 800fbae:	d31d      	bcc.n	800fbec <_strtol_l.isra.0+0xc4>
 800fbb0:	d101      	bne.n	800fbb6 <_strtol_l.isra.0+0x8e>
 800fbb2:	45a2      	cmp	sl, r4
 800fbb4:	db1a      	blt.n	800fbec <_strtol_l.isra.0+0xc4>
 800fbb6:	fb05 4503 	mla	r5, r5, r3, r4
 800fbba:	2601      	movs	r6, #1
 800fbbc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800fbc0:	e7eb      	b.n	800fb9a <_strtol_l.isra.0+0x72>
 800fbc2:	2c2b      	cmp	r4, #43	; 0x2b
 800fbc4:	bf08      	it	eq
 800fbc6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800fbca:	46a8      	mov	r8, r5
 800fbcc:	bf08      	it	eq
 800fbce:	f106 0e02 	addeq.w	lr, r6, #2
 800fbd2:	e7c7      	b.n	800fb64 <_strtol_l.isra.0+0x3c>
 800fbd4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800fbd8:	2f19      	cmp	r7, #25
 800fbda:	d801      	bhi.n	800fbe0 <_strtol_l.isra.0+0xb8>
 800fbdc:	3c37      	subs	r4, #55	; 0x37
 800fbde:	e7e1      	b.n	800fba4 <_strtol_l.isra.0+0x7c>
 800fbe0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800fbe4:	2f19      	cmp	r7, #25
 800fbe6:	d804      	bhi.n	800fbf2 <_strtol_l.isra.0+0xca>
 800fbe8:	3c57      	subs	r4, #87	; 0x57
 800fbea:	e7db      	b.n	800fba4 <_strtol_l.isra.0+0x7c>
 800fbec:	f04f 36ff 	mov.w	r6, #4294967295
 800fbf0:	e7e4      	b.n	800fbbc <_strtol_l.isra.0+0x94>
 800fbf2:	2e00      	cmp	r6, #0
 800fbf4:	da05      	bge.n	800fc02 <_strtol_l.isra.0+0xda>
 800fbf6:	2322      	movs	r3, #34	; 0x22
 800fbf8:	6003      	str	r3, [r0, #0]
 800fbfa:	4665      	mov	r5, ip
 800fbfc:	b942      	cbnz	r2, 800fc10 <_strtol_l.isra.0+0xe8>
 800fbfe:	4628      	mov	r0, r5
 800fc00:	e79d      	b.n	800fb3e <_strtol_l.isra.0+0x16>
 800fc02:	f1b8 0f00 	cmp.w	r8, #0
 800fc06:	d000      	beq.n	800fc0a <_strtol_l.isra.0+0xe2>
 800fc08:	426d      	negs	r5, r5
 800fc0a:	2a00      	cmp	r2, #0
 800fc0c:	d0f7      	beq.n	800fbfe <_strtol_l.isra.0+0xd6>
 800fc0e:	b10e      	cbz	r6, 800fc14 <_strtol_l.isra.0+0xec>
 800fc10:	f10e 31ff 	add.w	r1, lr, #4294967295
 800fc14:	6011      	str	r1, [r2, #0]
 800fc16:	e7f2      	b.n	800fbfe <_strtol_l.isra.0+0xd6>
 800fc18:	2430      	movs	r4, #48	; 0x30
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d1b3      	bne.n	800fb86 <_strtol_l.isra.0+0x5e>
 800fc1e:	2308      	movs	r3, #8
 800fc20:	e7b1      	b.n	800fb86 <_strtol_l.isra.0+0x5e>
 800fc22:	2c30      	cmp	r4, #48	; 0x30
 800fc24:	d0a4      	beq.n	800fb70 <_strtol_l.isra.0+0x48>
 800fc26:	230a      	movs	r3, #10
 800fc28:	e7ad      	b.n	800fb86 <_strtol_l.isra.0+0x5e>
 800fc2a:	bf00      	nop
 800fc2c:	08014399 	.word	0x08014399

0800fc30 <_strtol_r>:
 800fc30:	f7ff bf7a 	b.w	800fb28 <_strtol_l.isra.0>

0800fc34 <_write_r>:
 800fc34:	b538      	push	{r3, r4, r5, lr}
 800fc36:	4d07      	ldr	r5, [pc, #28]	; (800fc54 <_write_r+0x20>)
 800fc38:	4604      	mov	r4, r0
 800fc3a:	4608      	mov	r0, r1
 800fc3c:	4611      	mov	r1, r2
 800fc3e:	2200      	movs	r2, #0
 800fc40:	602a      	str	r2, [r5, #0]
 800fc42:	461a      	mov	r2, r3
 800fc44:	f7f4 ff95 	bl	8004b72 <_write>
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	d102      	bne.n	800fc52 <_write_r+0x1e>
 800fc4c:	682b      	ldr	r3, [r5, #0]
 800fc4e:	b103      	cbz	r3, 800fc52 <_write_r+0x1e>
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	bd38      	pop	{r3, r4, r5, pc}
 800fc54:	200063e4 	.word	0x200063e4

0800fc58 <_close_r>:
 800fc58:	b538      	push	{r3, r4, r5, lr}
 800fc5a:	4d06      	ldr	r5, [pc, #24]	; (800fc74 <_close_r+0x1c>)
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	4604      	mov	r4, r0
 800fc60:	4608      	mov	r0, r1
 800fc62:	602b      	str	r3, [r5, #0]
 800fc64:	f7f4 ffa1 	bl	8004baa <_close>
 800fc68:	1c43      	adds	r3, r0, #1
 800fc6a:	d102      	bne.n	800fc72 <_close_r+0x1a>
 800fc6c:	682b      	ldr	r3, [r5, #0]
 800fc6e:	b103      	cbz	r3, 800fc72 <_close_r+0x1a>
 800fc70:	6023      	str	r3, [r4, #0]
 800fc72:	bd38      	pop	{r3, r4, r5, pc}
 800fc74:	200063e4 	.word	0x200063e4

0800fc78 <quorem>:
 800fc78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7c:	6903      	ldr	r3, [r0, #16]
 800fc7e:	690c      	ldr	r4, [r1, #16]
 800fc80:	42a3      	cmp	r3, r4
 800fc82:	4607      	mov	r7, r0
 800fc84:	f2c0 8081 	blt.w	800fd8a <quorem+0x112>
 800fc88:	3c01      	subs	r4, #1
 800fc8a:	f101 0814 	add.w	r8, r1, #20
 800fc8e:	f100 0514 	add.w	r5, r0, #20
 800fc92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc96:	9301      	str	r3, [sp, #4]
 800fc98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fca0:	3301      	adds	r3, #1
 800fca2:	429a      	cmp	r2, r3
 800fca4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fca8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fcac:	fbb2 f6f3 	udiv	r6, r2, r3
 800fcb0:	d331      	bcc.n	800fd16 <quorem+0x9e>
 800fcb2:	f04f 0e00 	mov.w	lr, #0
 800fcb6:	4640      	mov	r0, r8
 800fcb8:	46ac      	mov	ip, r5
 800fcba:	46f2      	mov	sl, lr
 800fcbc:	f850 2b04 	ldr.w	r2, [r0], #4
 800fcc0:	b293      	uxth	r3, r2
 800fcc2:	fb06 e303 	mla	r3, r6, r3, lr
 800fcc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	ebaa 0303 	sub.w	r3, sl, r3
 800fcd0:	0c12      	lsrs	r2, r2, #16
 800fcd2:	f8dc a000 	ldr.w	sl, [ip]
 800fcd6:	fb06 e202 	mla	r2, r6, r2, lr
 800fcda:	fa13 f38a 	uxtah	r3, r3, sl
 800fcde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fce2:	fa1f fa82 	uxth.w	sl, r2
 800fce6:	f8dc 2000 	ldr.w	r2, [ip]
 800fcea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fcee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcf8:	4581      	cmp	r9, r0
 800fcfa:	f84c 3b04 	str.w	r3, [ip], #4
 800fcfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fd02:	d2db      	bcs.n	800fcbc <quorem+0x44>
 800fd04:	f855 300b 	ldr.w	r3, [r5, fp]
 800fd08:	b92b      	cbnz	r3, 800fd16 <quorem+0x9e>
 800fd0a:	9b01      	ldr	r3, [sp, #4]
 800fd0c:	3b04      	subs	r3, #4
 800fd0e:	429d      	cmp	r5, r3
 800fd10:	461a      	mov	r2, r3
 800fd12:	d32e      	bcc.n	800fd72 <quorem+0xfa>
 800fd14:	613c      	str	r4, [r7, #16]
 800fd16:	4638      	mov	r0, r7
 800fd18:	f001 fd5c 	bl	80117d4 <__mcmp>
 800fd1c:	2800      	cmp	r0, #0
 800fd1e:	db24      	blt.n	800fd6a <quorem+0xf2>
 800fd20:	3601      	adds	r6, #1
 800fd22:	4628      	mov	r0, r5
 800fd24:	f04f 0c00 	mov.w	ip, #0
 800fd28:	f858 2b04 	ldr.w	r2, [r8], #4
 800fd2c:	f8d0 e000 	ldr.w	lr, [r0]
 800fd30:	b293      	uxth	r3, r2
 800fd32:	ebac 0303 	sub.w	r3, ip, r3
 800fd36:	0c12      	lsrs	r2, r2, #16
 800fd38:	fa13 f38e 	uxtah	r3, r3, lr
 800fd3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fd40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd4a:	45c1      	cmp	r9, r8
 800fd4c:	f840 3b04 	str.w	r3, [r0], #4
 800fd50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fd54:	d2e8      	bcs.n	800fd28 <quorem+0xb0>
 800fd56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd5e:	b922      	cbnz	r2, 800fd6a <quorem+0xf2>
 800fd60:	3b04      	subs	r3, #4
 800fd62:	429d      	cmp	r5, r3
 800fd64:	461a      	mov	r2, r3
 800fd66:	d30a      	bcc.n	800fd7e <quorem+0x106>
 800fd68:	613c      	str	r4, [r7, #16]
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	b003      	add	sp, #12
 800fd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd72:	6812      	ldr	r2, [r2, #0]
 800fd74:	3b04      	subs	r3, #4
 800fd76:	2a00      	cmp	r2, #0
 800fd78:	d1cc      	bne.n	800fd14 <quorem+0x9c>
 800fd7a:	3c01      	subs	r4, #1
 800fd7c:	e7c7      	b.n	800fd0e <quorem+0x96>
 800fd7e:	6812      	ldr	r2, [r2, #0]
 800fd80:	3b04      	subs	r3, #4
 800fd82:	2a00      	cmp	r2, #0
 800fd84:	d1f0      	bne.n	800fd68 <quorem+0xf0>
 800fd86:	3c01      	subs	r4, #1
 800fd88:	e7eb      	b.n	800fd62 <quorem+0xea>
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	e7ee      	b.n	800fd6c <quorem+0xf4>
	...

0800fd90 <_dtoa_r>:
 800fd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd94:	ed2d 8b02 	vpush	{d8}
 800fd98:	ec57 6b10 	vmov	r6, r7, d0
 800fd9c:	b095      	sub	sp, #84	; 0x54
 800fd9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fda0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fda4:	9105      	str	r1, [sp, #20]
 800fda6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fdaa:	4604      	mov	r4, r0
 800fdac:	9209      	str	r2, [sp, #36]	; 0x24
 800fdae:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdb0:	b975      	cbnz	r5, 800fdd0 <_dtoa_r+0x40>
 800fdb2:	2010      	movs	r0, #16
 800fdb4:	f001 fa20 	bl	80111f8 <malloc>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	6260      	str	r0, [r4, #36]	; 0x24
 800fdbc:	b920      	cbnz	r0, 800fdc8 <_dtoa_r+0x38>
 800fdbe:	4bb2      	ldr	r3, [pc, #712]	; (8010088 <_dtoa_r+0x2f8>)
 800fdc0:	21ea      	movs	r1, #234	; 0xea
 800fdc2:	48b2      	ldr	r0, [pc, #712]	; (801008c <_dtoa_r+0x2fc>)
 800fdc4:	f002 f8f0 	bl	8011fa8 <__assert_func>
 800fdc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fdcc:	6005      	str	r5, [r0, #0]
 800fdce:	60c5      	str	r5, [r0, #12]
 800fdd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdd2:	6819      	ldr	r1, [r3, #0]
 800fdd4:	b151      	cbz	r1, 800fdec <_dtoa_r+0x5c>
 800fdd6:	685a      	ldr	r2, [r3, #4]
 800fdd8:	604a      	str	r2, [r1, #4]
 800fdda:	2301      	movs	r3, #1
 800fddc:	4093      	lsls	r3, r2
 800fdde:	608b      	str	r3, [r1, #8]
 800fde0:	4620      	mov	r0, r4
 800fde2:	f001 fa6f 	bl	80112c4 <_Bfree>
 800fde6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fde8:	2200      	movs	r2, #0
 800fdea:	601a      	str	r2, [r3, #0]
 800fdec:	1e3b      	subs	r3, r7, #0
 800fdee:	bfb9      	ittee	lt
 800fdf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fdf4:	9303      	strlt	r3, [sp, #12]
 800fdf6:	2300      	movge	r3, #0
 800fdf8:	f8c8 3000 	strge.w	r3, [r8]
 800fdfc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fe00:	4ba3      	ldr	r3, [pc, #652]	; (8010090 <_dtoa_r+0x300>)
 800fe02:	bfbc      	itt	lt
 800fe04:	2201      	movlt	r2, #1
 800fe06:	f8c8 2000 	strlt.w	r2, [r8]
 800fe0a:	ea33 0309 	bics.w	r3, r3, r9
 800fe0e:	d11b      	bne.n	800fe48 <_dtoa_r+0xb8>
 800fe10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe12:	f242 730f 	movw	r3, #9999	; 0x270f
 800fe16:	6013      	str	r3, [r2, #0]
 800fe18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe1c:	4333      	orrs	r3, r6
 800fe1e:	f000 857a 	beq.w	8010916 <_dtoa_r+0xb86>
 800fe22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe24:	b963      	cbnz	r3, 800fe40 <_dtoa_r+0xb0>
 800fe26:	4b9b      	ldr	r3, [pc, #620]	; (8010094 <_dtoa_r+0x304>)
 800fe28:	e024      	b.n	800fe74 <_dtoa_r+0xe4>
 800fe2a:	4b9b      	ldr	r3, [pc, #620]	; (8010098 <_dtoa_r+0x308>)
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	3308      	adds	r3, #8
 800fe30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe32:	6013      	str	r3, [r2, #0]
 800fe34:	9800      	ldr	r0, [sp, #0]
 800fe36:	b015      	add	sp, #84	; 0x54
 800fe38:	ecbd 8b02 	vpop	{d8}
 800fe3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe40:	4b94      	ldr	r3, [pc, #592]	; (8010094 <_dtoa_r+0x304>)
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	3303      	adds	r3, #3
 800fe46:	e7f3      	b.n	800fe30 <_dtoa_r+0xa0>
 800fe48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	ec51 0b17 	vmov	r0, r1, d7
 800fe52:	2300      	movs	r3, #0
 800fe54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fe58:	f7f0 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe5c:	4680      	mov	r8, r0
 800fe5e:	b158      	cbz	r0, 800fe78 <_dtoa_r+0xe8>
 800fe60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe62:	2301      	movs	r3, #1
 800fe64:	6013      	str	r3, [r2, #0]
 800fe66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f000 8551 	beq.w	8010910 <_dtoa_r+0xb80>
 800fe6e:	488b      	ldr	r0, [pc, #556]	; (801009c <_dtoa_r+0x30c>)
 800fe70:	6018      	str	r0, [r3, #0]
 800fe72:	1e43      	subs	r3, r0, #1
 800fe74:	9300      	str	r3, [sp, #0]
 800fe76:	e7dd      	b.n	800fe34 <_dtoa_r+0xa4>
 800fe78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fe7c:	aa12      	add	r2, sp, #72	; 0x48
 800fe7e:	a913      	add	r1, sp, #76	; 0x4c
 800fe80:	4620      	mov	r0, r4
 800fe82:	f001 fdc7 	bl	8011a14 <__d2b>
 800fe86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fe8a:	4683      	mov	fp, r0
 800fe8c:	2d00      	cmp	r5, #0
 800fe8e:	d07c      	beq.n	800ff8a <_dtoa_r+0x1fa>
 800fe90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800fe96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800fe9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fea2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fea6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800feaa:	4b7d      	ldr	r3, [pc, #500]	; (80100a0 <_dtoa_r+0x310>)
 800feac:	2200      	movs	r2, #0
 800feae:	4630      	mov	r0, r6
 800feb0:	4639      	mov	r1, r7
 800feb2:	f7f0 f9e9 	bl	8000288 <__aeabi_dsub>
 800feb6:	a36e      	add	r3, pc, #440	; (adr r3, 8010070 <_dtoa_r+0x2e0>)
 800feb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800febc:	f7f0 fb9c 	bl	80005f8 <__aeabi_dmul>
 800fec0:	a36d      	add	r3, pc, #436	; (adr r3, 8010078 <_dtoa_r+0x2e8>)
 800fec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec6:	f7f0 f9e1 	bl	800028c <__adddf3>
 800feca:	4606      	mov	r6, r0
 800fecc:	4628      	mov	r0, r5
 800fece:	460f      	mov	r7, r1
 800fed0:	f7f0 fb28 	bl	8000524 <__aeabi_i2d>
 800fed4:	a36a      	add	r3, pc, #424	; (adr r3, 8010080 <_dtoa_r+0x2f0>)
 800fed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feda:	f7f0 fb8d 	bl	80005f8 <__aeabi_dmul>
 800fede:	4602      	mov	r2, r0
 800fee0:	460b      	mov	r3, r1
 800fee2:	4630      	mov	r0, r6
 800fee4:	4639      	mov	r1, r7
 800fee6:	f7f0 f9d1 	bl	800028c <__adddf3>
 800feea:	4606      	mov	r6, r0
 800feec:	460f      	mov	r7, r1
 800feee:	f7f0 fe33 	bl	8000b58 <__aeabi_d2iz>
 800fef2:	2200      	movs	r2, #0
 800fef4:	4682      	mov	sl, r0
 800fef6:	2300      	movs	r3, #0
 800fef8:	4630      	mov	r0, r6
 800fefa:	4639      	mov	r1, r7
 800fefc:	f7f0 fdee 	bl	8000adc <__aeabi_dcmplt>
 800ff00:	b148      	cbz	r0, 800ff16 <_dtoa_r+0x186>
 800ff02:	4650      	mov	r0, sl
 800ff04:	f7f0 fb0e 	bl	8000524 <__aeabi_i2d>
 800ff08:	4632      	mov	r2, r6
 800ff0a:	463b      	mov	r3, r7
 800ff0c:	f7f0 fddc 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff10:	b908      	cbnz	r0, 800ff16 <_dtoa_r+0x186>
 800ff12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff16:	f1ba 0f16 	cmp.w	sl, #22
 800ff1a:	d854      	bhi.n	800ffc6 <_dtoa_r+0x236>
 800ff1c:	4b61      	ldr	r3, [pc, #388]	; (80100a4 <_dtoa_r+0x314>)
 800ff1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ff22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ff2a:	f7f0 fdd7 	bl	8000adc <__aeabi_dcmplt>
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	d04b      	beq.n	800ffca <_dtoa_r+0x23a>
 800ff32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff36:	2300      	movs	r3, #0
 800ff38:	930e      	str	r3, [sp, #56]	; 0x38
 800ff3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ff3c:	1b5d      	subs	r5, r3, r5
 800ff3e:	1e6b      	subs	r3, r5, #1
 800ff40:	9304      	str	r3, [sp, #16]
 800ff42:	bf43      	ittte	mi
 800ff44:	2300      	movmi	r3, #0
 800ff46:	f1c5 0801 	rsbmi	r8, r5, #1
 800ff4a:	9304      	strmi	r3, [sp, #16]
 800ff4c:	f04f 0800 	movpl.w	r8, #0
 800ff50:	f1ba 0f00 	cmp.w	sl, #0
 800ff54:	db3b      	blt.n	800ffce <_dtoa_r+0x23e>
 800ff56:	9b04      	ldr	r3, [sp, #16]
 800ff58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ff5c:	4453      	add	r3, sl
 800ff5e:	9304      	str	r3, [sp, #16]
 800ff60:	2300      	movs	r3, #0
 800ff62:	9306      	str	r3, [sp, #24]
 800ff64:	9b05      	ldr	r3, [sp, #20]
 800ff66:	2b09      	cmp	r3, #9
 800ff68:	d869      	bhi.n	801003e <_dtoa_r+0x2ae>
 800ff6a:	2b05      	cmp	r3, #5
 800ff6c:	bfc4      	itt	gt
 800ff6e:	3b04      	subgt	r3, #4
 800ff70:	9305      	strgt	r3, [sp, #20]
 800ff72:	9b05      	ldr	r3, [sp, #20]
 800ff74:	f1a3 0302 	sub.w	r3, r3, #2
 800ff78:	bfcc      	ite	gt
 800ff7a:	2500      	movgt	r5, #0
 800ff7c:	2501      	movle	r5, #1
 800ff7e:	2b03      	cmp	r3, #3
 800ff80:	d869      	bhi.n	8010056 <_dtoa_r+0x2c6>
 800ff82:	e8df f003 	tbb	[pc, r3]
 800ff86:	4e2c      	.short	0x4e2c
 800ff88:	5a4c      	.short	0x5a4c
 800ff8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ff8e:	441d      	add	r5, r3
 800ff90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ff94:	2b20      	cmp	r3, #32
 800ff96:	bfc1      	itttt	gt
 800ff98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ff9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ffa0:	fa09 f303 	lslgt.w	r3, r9, r3
 800ffa4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ffa8:	bfda      	itte	le
 800ffaa:	f1c3 0320 	rsble	r3, r3, #32
 800ffae:	fa06 f003 	lslle.w	r0, r6, r3
 800ffb2:	4318      	orrgt	r0, r3
 800ffb4:	f7f0 faa6 	bl	8000504 <__aeabi_ui2d>
 800ffb8:	2301      	movs	r3, #1
 800ffba:	4606      	mov	r6, r0
 800ffbc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ffc0:	3d01      	subs	r5, #1
 800ffc2:	9310      	str	r3, [sp, #64]	; 0x40
 800ffc4:	e771      	b.n	800feaa <_dtoa_r+0x11a>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e7b6      	b.n	800ff38 <_dtoa_r+0x1a8>
 800ffca:	900e      	str	r0, [sp, #56]	; 0x38
 800ffcc:	e7b5      	b.n	800ff3a <_dtoa_r+0x1aa>
 800ffce:	f1ca 0300 	rsb	r3, sl, #0
 800ffd2:	9306      	str	r3, [sp, #24]
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	eba8 080a 	sub.w	r8, r8, sl
 800ffda:	930d      	str	r3, [sp, #52]	; 0x34
 800ffdc:	e7c2      	b.n	800ff64 <_dtoa_r+0x1d4>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	9308      	str	r3, [sp, #32]
 800ffe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	dc39      	bgt.n	801005c <_dtoa_r+0x2cc>
 800ffe8:	f04f 0901 	mov.w	r9, #1
 800ffec:	f8cd 9004 	str.w	r9, [sp, #4]
 800fff0:	464b      	mov	r3, r9
 800fff2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fff6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fff8:	2200      	movs	r2, #0
 800fffa:	6042      	str	r2, [r0, #4]
 800fffc:	2204      	movs	r2, #4
 800fffe:	f102 0614 	add.w	r6, r2, #20
 8010002:	429e      	cmp	r6, r3
 8010004:	6841      	ldr	r1, [r0, #4]
 8010006:	d92f      	bls.n	8010068 <_dtoa_r+0x2d8>
 8010008:	4620      	mov	r0, r4
 801000a:	f001 f91b 	bl	8011244 <_Balloc>
 801000e:	9000      	str	r0, [sp, #0]
 8010010:	2800      	cmp	r0, #0
 8010012:	d14b      	bne.n	80100ac <_dtoa_r+0x31c>
 8010014:	4b24      	ldr	r3, [pc, #144]	; (80100a8 <_dtoa_r+0x318>)
 8010016:	4602      	mov	r2, r0
 8010018:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801001c:	e6d1      	b.n	800fdc2 <_dtoa_r+0x32>
 801001e:	2301      	movs	r3, #1
 8010020:	e7de      	b.n	800ffe0 <_dtoa_r+0x250>
 8010022:	2300      	movs	r3, #0
 8010024:	9308      	str	r3, [sp, #32]
 8010026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010028:	eb0a 0903 	add.w	r9, sl, r3
 801002c:	f109 0301 	add.w	r3, r9, #1
 8010030:	2b01      	cmp	r3, #1
 8010032:	9301      	str	r3, [sp, #4]
 8010034:	bfb8      	it	lt
 8010036:	2301      	movlt	r3, #1
 8010038:	e7dd      	b.n	800fff6 <_dtoa_r+0x266>
 801003a:	2301      	movs	r3, #1
 801003c:	e7f2      	b.n	8010024 <_dtoa_r+0x294>
 801003e:	2501      	movs	r5, #1
 8010040:	2300      	movs	r3, #0
 8010042:	9305      	str	r3, [sp, #20]
 8010044:	9508      	str	r5, [sp, #32]
 8010046:	f04f 39ff 	mov.w	r9, #4294967295
 801004a:	2200      	movs	r2, #0
 801004c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010050:	2312      	movs	r3, #18
 8010052:	9209      	str	r2, [sp, #36]	; 0x24
 8010054:	e7cf      	b.n	800fff6 <_dtoa_r+0x266>
 8010056:	2301      	movs	r3, #1
 8010058:	9308      	str	r3, [sp, #32]
 801005a:	e7f4      	b.n	8010046 <_dtoa_r+0x2b6>
 801005c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010060:	f8cd 9004 	str.w	r9, [sp, #4]
 8010064:	464b      	mov	r3, r9
 8010066:	e7c6      	b.n	800fff6 <_dtoa_r+0x266>
 8010068:	3101      	adds	r1, #1
 801006a:	6041      	str	r1, [r0, #4]
 801006c:	0052      	lsls	r2, r2, #1
 801006e:	e7c6      	b.n	800fffe <_dtoa_r+0x26e>
 8010070:	636f4361 	.word	0x636f4361
 8010074:	3fd287a7 	.word	0x3fd287a7
 8010078:	8b60c8b3 	.word	0x8b60c8b3
 801007c:	3fc68a28 	.word	0x3fc68a28
 8010080:	509f79fb 	.word	0x509f79fb
 8010084:	3fd34413 	.word	0x3fd34413
 8010088:	080144a6 	.word	0x080144a6
 801008c:	080144bd 	.word	0x080144bd
 8010090:	7ff00000 	.word	0x7ff00000
 8010094:	080144a2 	.word	0x080144a2
 8010098:	08014499 	.word	0x08014499
 801009c:	0801431d 	.word	0x0801431d
 80100a0:	3ff80000 	.word	0x3ff80000
 80100a4:	08014638 	.word	0x08014638
 80100a8:	0801451c 	.word	0x0801451c
 80100ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100ae:	9a00      	ldr	r2, [sp, #0]
 80100b0:	601a      	str	r2, [r3, #0]
 80100b2:	9b01      	ldr	r3, [sp, #4]
 80100b4:	2b0e      	cmp	r3, #14
 80100b6:	f200 80ad 	bhi.w	8010214 <_dtoa_r+0x484>
 80100ba:	2d00      	cmp	r5, #0
 80100bc:	f000 80aa 	beq.w	8010214 <_dtoa_r+0x484>
 80100c0:	f1ba 0f00 	cmp.w	sl, #0
 80100c4:	dd36      	ble.n	8010134 <_dtoa_r+0x3a4>
 80100c6:	4ac3      	ldr	r2, [pc, #780]	; (80103d4 <_dtoa_r+0x644>)
 80100c8:	f00a 030f 	and.w	r3, sl, #15
 80100cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80100d0:	ed93 7b00 	vldr	d7, [r3]
 80100d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80100d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80100dc:	eeb0 8a47 	vmov.f32	s16, s14
 80100e0:	eef0 8a67 	vmov.f32	s17, s15
 80100e4:	d016      	beq.n	8010114 <_dtoa_r+0x384>
 80100e6:	4bbc      	ldr	r3, [pc, #752]	; (80103d8 <_dtoa_r+0x648>)
 80100e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80100ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80100f0:	f7f0 fbac 	bl	800084c <__aeabi_ddiv>
 80100f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100f8:	f007 070f 	and.w	r7, r7, #15
 80100fc:	2503      	movs	r5, #3
 80100fe:	4eb6      	ldr	r6, [pc, #728]	; (80103d8 <_dtoa_r+0x648>)
 8010100:	b957      	cbnz	r7, 8010118 <_dtoa_r+0x388>
 8010102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010106:	ec53 2b18 	vmov	r2, r3, d8
 801010a:	f7f0 fb9f 	bl	800084c <__aeabi_ddiv>
 801010e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010112:	e029      	b.n	8010168 <_dtoa_r+0x3d8>
 8010114:	2502      	movs	r5, #2
 8010116:	e7f2      	b.n	80100fe <_dtoa_r+0x36e>
 8010118:	07f9      	lsls	r1, r7, #31
 801011a:	d508      	bpl.n	801012e <_dtoa_r+0x39e>
 801011c:	ec51 0b18 	vmov	r0, r1, d8
 8010120:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010124:	f7f0 fa68 	bl	80005f8 <__aeabi_dmul>
 8010128:	ec41 0b18 	vmov	d8, r0, r1
 801012c:	3501      	adds	r5, #1
 801012e:	107f      	asrs	r7, r7, #1
 8010130:	3608      	adds	r6, #8
 8010132:	e7e5      	b.n	8010100 <_dtoa_r+0x370>
 8010134:	f000 80a6 	beq.w	8010284 <_dtoa_r+0x4f4>
 8010138:	f1ca 0600 	rsb	r6, sl, #0
 801013c:	4ba5      	ldr	r3, [pc, #660]	; (80103d4 <_dtoa_r+0x644>)
 801013e:	4fa6      	ldr	r7, [pc, #664]	; (80103d8 <_dtoa_r+0x648>)
 8010140:	f006 020f 	and.w	r2, r6, #15
 8010144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010150:	f7f0 fa52 	bl	80005f8 <__aeabi_dmul>
 8010154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010158:	1136      	asrs	r6, r6, #4
 801015a:	2300      	movs	r3, #0
 801015c:	2502      	movs	r5, #2
 801015e:	2e00      	cmp	r6, #0
 8010160:	f040 8085 	bne.w	801026e <_dtoa_r+0x4de>
 8010164:	2b00      	cmp	r3, #0
 8010166:	d1d2      	bne.n	801010e <_dtoa_r+0x37e>
 8010168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801016a:	2b00      	cmp	r3, #0
 801016c:	f000 808c 	beq.w	8010288 <_dtoa_r+0x4f8>
 8010170:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010174:	4b99      	ldr	r3, [pc, #612]	; (80103dc <_dtoa_r+0x64c>)
 8010176:	2200      	movs	r2, #0
 8010178:	4630      	mov	r0, r6
 801017a:	4639      	mov	r1, r7
 801017c:	f7f0 fcae 	bl	8000adc <__aeabi_dcmplt>
 8010180:	2800      	cmp	r0, #0
 8010182:	f000 8081 	beq.w	8010288 <_dtoa_r+0x4f8>
 8010186:	9b01      	ldr	r3, [sp, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d07d      	beq.n	8010288 <_dtoa_r+0x4f8>
 801018c:	f1b9 0f00 	cmp.w	r9, #0
 8010190:	dd3c      	ble.n	801020c <_dtoa_r+0x47c>
 8010192:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010196:	9307      	str	r3, [sp, #28]
 8010198:	2200      	movs	r2, #0
 801019a:	4b91      	ldr	r3, [pc, #580]	; (80103e0 <_dtoa_r+0x650>)
 801019c:	4630      	mov	r0, r6
 801019e:	4639      	mov	r1, r7
 80101a0:	f7f0 fa2a 	bl	80005f8 <__aeabi_dmul>
 80101a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101a8:	3501      	adds	r5, #1
 80101aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80101ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80101b2:	4628      	mov	r0, r5
 80101b4:	f7f0 f9b6 	bl	8000524 <__aeabi_i2d>
 80101b8:	4632      	mov	r2, r6
 80101ba:	463b      	mov	r3, r7
 80101bc:	f7f0 fa1c 	bl	80005f8 <__aeabi_dmul>
 80101c0:	4b88      	ldr	r3, [pc, #544]	; (80103e4 <_dtoa_r+0x654>)
 80101c2:	2200      	movs	r2, #0
 80101c4:	f7f0 f862 	bl	800028c <__adddf3>
 80101c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80101cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101d0:	9303      	str	r3, [sp, #12]
 80101d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d15c      	bne.n	8010292 <_dtoa_r+0x502>
 80101d8:	4b83      	ldr	r3, [pc, #524]	; (80103e8 <_dtoa_r+0x658>)
 80101da:	2200      	movs	r2, #0
 80101dc:	4630      	mov	r0, r6
 80101de:	4639      	mov	r1, r7
 80101e0:	f7f0 f852 	bl	8000288 <__aeabi_dsub>
 80101e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101e8:	4606      	mov	r6, r0
 80101ea:	460f      	mov	r7, r1
 80101ec:	f7f0 fc94 	bl	8000b18 <__aeabi_dcmpgt>
 80101f0:	2800      	cmp	r0, #0
 80101f2:	f040 8296 	bne.w	8010722 <_dtoa_r+0x992>
 80101f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80101fa:	4630      	mov	r0, r6
 80101fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010200:	4639      	mov	r1, r7
 8010202:	f7f0 fc6b 	bl	8000adc <__aeabi_dcmplt>
 8010206:	2800      	cmp	r0, #0
 8010208:	f040 8288 	bne.w	801071c <_dtoa_r+0x98c>
 801020c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010210:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010214:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010216:	2b00      	cmp	r3, #0
 8010218:	f2c0 8158 	blt.w	80104cc <_dtoa_r+0x73c>
 801021c:	f1ba 0f0e 	cmp.w	sl, #14
 8010220:	f300 8154 	bgt.w	80104cc <_dtoa_r+0x73c>
 8010224:	4b6b      	ldr	r3, [pc, #428]	; (80103d4 <_dtoa_r+0x644>)
 8010226:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801022a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801022e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010230:	2b00      	cmp	r3, #0
 8010232:	f280 80e3 	bge.w	80103fc <_dtoa_r+0x66c>
 8010236:	9b01      	ldr	r3, [sp, #4]
 8010238:	2b00      	cmp	r3, #0
 801023a:	f300 80df 	bgt.w	80103fc <_dtoa_r+0x66c>
 801023e:	f040 826d 	bne.w	801071c <_dtoa_r+0x98c>
 8010242:	4b69      	ldr	r3, [pc, #420]	; (80103e8 <_dtoa_r+0x658>)
 8010244:	2200      	movs	r2, #0
 8010246:	4640      	mov	r0, r8
 8010248:	4649      	mov	r1, r9
 801024a:	f7f0 f9d5 	bl	80005f8 <__aeabi_dmul>
 801024e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010252:	f7f0 fc57 	bl	8000b04 <__aeabi_dcmpge>
 8010256:	9e01      	ldr	r6, [sp, #4]
 8010258:	4637      	mov	r7, r6
 801025a:	2800      	cmp	r0, #0
 801025c:	f040 8243 	bne.w	80106e6 <_dtoa_r+0x956>
 8010260:	9d00      	ldr	r5, [sp, #0]
 8010262:	2331      	movs	r3, #49	; 0x31
 8010264:	f805 3b01 	strb.w	r3, [r5], #1
 8010268:	f10a 0a01 	add.w	sl, sl, #1
 801026c:	e23f      	b.n	80106ee <_dtoa_r+0x95e>
 801026e:	07f2      	lsls	r2, r6, #31
 8010270:	d505      	bpl.n	801027e <_dtoa_r+0x4ee>
 8010272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010276:	f7f0 f9bf 	bl	80005f8 <__aeabi_dmul>
 801027a:	3501      	adds	r5, #1
 801027c:	2301      	movs	r3, #1
 801027e:	1076      	asrs	r6, r6, #1
 8010280:	3708      	adds	r7, #8
 8010282:	e76c      	b.n	801015e <_dtoa_r+0x3ce>
 8010284:	2502      	movs	r5, #2
 8010286:	e76f      	b.n	8010168 <_dtoa_r+0x3d8>
 8010288:	9b01      	ldr	r3, [sp, #4]
 801028a:	f8cd a01c 	str.w	sl, [sp, #28]
 801028e:	930c      	str	r3, [sp, #48]	; 0x30
 8010290:	e78d      	b.n	80101ae <_dtoa_r+0x41e>
 8010292:	9900      	ldr	r1, [sp, #0]
 8010294:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010298:	4b4e      	ldr	r3, [pc, #312]	; (80103d4 <_dtoa_r+0x644>)
 801029a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801029e:	4401      	add	r1, r0
 80102a0:	9102      	str	r1, [sp, #8]
 80102a2:	9908      	ldr	r1, [sp, #32]
 80102a4:	eeb0 8a47 	vmov.f32	s16, s14
 80102a8:	eef0 8a67 	vmov.f32	s17, s15
 80102ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80102b4:	2900      	cmp	r1, #0
 80102b6:	d045      	beq.n	8010344 <_dtoa_r+0x5b4>
 80102b8:	494c      	ldr	r1, [pc, #304]	; (80103ec <_dtoa_r+0x65c>)
 80102ba:	2000      	movs	r0, #0
 80102bc:	f7f0 fac6 	bl	800084c <__aeabi_ddiv>
 80102c0:	ec53 2b18 	vmov	r2, r3, d8
 80102c4:	f7ef ffe0 	bl	8000288 <__aeabi_dsub>
 80102c8:	9d00      	ldr	r5, [sp, #0]
 80102ca:	ec41 0b18 	vmov	d8, r0, r1
 80102ce:	4639      	mov	r1, r7
 80102d0:	4630      	mov	r0, r6
 80102d2:	f7f0 fc41 	bl	8000b58 <__aeabi_d2iz>
 80102d6:	900c      	str	r0, [sp, #48]	; 0x30
 80102d8:	f7f0 f924 	bl	8000524 <__aeabi_i2d>
 80102dc:	4602      	mov	r2, r0
 80102de:	460b      	mov	r3, r1
 80102e0:	4630      	mov	r0, r6
 80102e2:	4639      	mov	r1, r7
 80102e4:	f7ef ffd0 	bl	8000288 <__aeabi_dsub>
 80102e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102ea:	3330      	adds	r3, #48	; 0x30
 80102ec:	f805 3b01 	strb.w	r3, [r5], #1
 80102f0:	ec53 2b18 	vmov	r2, r3, d8
 80102f4:	4606      	mov	r6, r0
 80102f6:	460f      	mov	r7, r1
 80102f8:	f7f0 fbf0 	bl	8000adc <__aeabi_dcmplt>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	d165      	bne.n	80103cc <_dtoa_r+0x63c>
 8010300:	4632      	mov	r2, r6
 8010302:	463b      	mov	r3, r7
 8010304:	4935      	ldr	r1, [pc, #212]	; (80103dc <_dtoa_r+0x64c>)
 8010306:	2000      	movs	r0, #0
 8010308:	f7ef ffbe 	bl	8000288 <__aeabi_dsub>
 801030c:	ec53 2b18 	vmov	r2, r3, d8
 8010310:	f7f0 fbe4 	bl	8000adc <__aeabi_dcmplt>
 8010314:	2800      	cmp	r0, #0
 8010316:	f040 80b9 	bne.w	801048c <_dtoa_r+0x6fc>
 801031a:	9b02      	ldr	r3, [sp, #8]
 801031c:	429d      	cmp	r5, r3
 801031e:	f43f af75 	beq.w	801020c <_dtoa_r+0x47c>
 8010322:	4b2f      	ldr	r3, [pc, #188]	; (80103e0 <_dtoa_r+0x650>)
 8010324:	ec51 0b18 	vmov	r0, r1, d8
 8010328:	2200      	movs	r2, #0
 801032a:	f7f0 f965 	bl	80005f8 <__aeabi_dmul>
 801032e:	4b2c      	ldr	r3, [pc, #176]	; (80103e0 <_dtoa_r+0x650>)
 8010330:	ec41 0b18 	vmov	d8, r0, r1
 8010334:	2200      	movs	r2, #0
 8010336:	4630      	mov	r0, r6
 8010338:	4639      	mov	r1, r7
 801033a:	f7f0 f95d 	bl	80005f8 <__aeabi_dmul>
 801033e:	4606      	mov	r6, r0
 8010340:	460f      	mov	r7, r1
 8010342:	e7c4      	b.n	80102ce <_dtoa_r+0x53e>
 8010344:	ec51 0b17 	vmov	r0, r1, d7
 8010348:	f7f0 f956 	bl	80005f8 <__aeabi_dmul>
 801034c:	9b02      	ldr	r3, [sp, #8]
 801034e:	9d00      	ldr	r5, [sp, #0]
 8010350:	930c      	str	r3, [sp, #48]	; 0x30
 8010352:	ec41 0b18 	vmov	d8, r0, r1
 8010356:	4639      	mov	r1, r7
 8010358:	4630      	mov	r0, r6
 801035a:	f7f0 fbfd 	bl	8000b58 <__aeabi_d2iz>
 801035e:	9011      	str	r0, [sp, #68]	; 0x44
 8010360:	f7f0 f8e0 	bl	8000524 <__aeabi_i2d>
 8010364:	4602      	mov	r2, r0
 8010366:	460b      	mov	r3, r1
 8010368:	4630      	mov	r0, r6
 801036a:	4639      	mov	r1, r7
 801036c:	f7ef ff8c 	bl	8000288 <__aeabi_dsub>
 8010370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010372:	3330      	adds	r3, #48	; 0x30
 8010374:	f805 3b01 	strb.w	r3, [r5], #1
 8010378:	9b02      	ldr	r3, [sp, #8]
 801037a:	429d      	cmp	r5, r3
 801037c:	4606      	mov	r6, r0
 801037e:	460f      	mov	r7, r1
 8010380:	f04f 0200 	mov.w	r2, #0
 8010384:	d134      	bne.n	80103f0 <_dtoa_r+0x660>
 8010386:	4b19      	ldr	r3, [pc, #100]	; (80103ec <_dtoa_r+0x65c>)
 8010388:	ec51 0b18 	vmov	r0, r1, d8
 801038c:	f7ef ff7e 	bl	800028c <__adddf3>
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	4630      	mov	r0, r6
 8010396:	4639      	mov	r1, r7
 8010398:	f7f0 fbbe 	bl	8000b18 <__aeabi_dcmpgt>
 801039c:	2800      	cmp	r0, #0
 801039e:	d175      	bne.n	801048c <_dtoa_r+0x6fc>
 80103a0:	ec53 2b18 	vmov	r2, r3, d8
 80103a4:	4911      	ldr	r1, [pc, #68]	; (80103ec <_dtoa_r+0x65c>)
 80103a6:	2000      	movs	r0, #0
 80103a8:	f7ef ff6e 	bl	8000288 <__aeabi_dsub>
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	4630      	mov	r0, r6
 80103b2:	4639      	mov	r1, r7
 80103b4:	f7f0 fb92 	bl	8000adc <__aeabi_dcmplt>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	f43f af27 	beq.w	801020c <_dtoa_r+0x47c>
 80103be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103c0:	1e6b      	subs	r3, r5, #1
 80103c2:	930c      	str	r3, [sp, #48]	; 0x30
 80103c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80103c8:	2b30      	cmp	r3, #48	; 0x30
 80103ca:	d0f8      	beq.n	80103be <_dtoa_r+0x62e>
 80103cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80103d0:	e04a      	b.n	8010468 <_dtoa_r+0x6d8>
 80103d2:	bf00      	nop
 80103d4:	08014638 	.word	0x08014638
 80103d8:	08014610 	.word	0x08014610
 80103dc:	3ff00000 	.word	0x3ff00000
 80103e0:	40240000 	.word	0x40240000
 80103e4:	401c0000 	.word	0x401c0000
 80103e8:	40140000 	.word	0x40140000
 80103ec:	3fe00000 	.word	0x3fe00000
 80103f0:	4baf      	ldr	r3, [pc, #700]	; (80106b0 <_dtoa_r+0x920>)
 80103f2:	f7f0 f901 	bl	80005f8 <__aeabi_dmul>
 80103f6:	4606      	mov	r6, r0
 80103f8:	460f      	mov	r7, r1
 80103fa:	e7ac      	b.n	8010356 <_dtoa_r+0x5c6>
 80103fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010400:	9d00      	ldr	r5, [sp, #0]
 8010402:	4642      	mov	r2, r8
 8010404:	464b      	mov	r3, r9
 8010406:	4630      	mov	r0, r6
 8010408:	4639      	mov	r1, r7
 801040a:	f7f0 fa1f 	bl	800084c <__aeabi_ddiv>
 801040e:	f7f0 fba3 	bl	8000b58 <__aeabi_d2iz>
 8010412:	9002      	str	r0, [sp, #8]
 8010414:	f7f0 f886 	bl	8000524 <__aeabi_i2d>
 8010418:	4642      	mov	r2, r8
 801041a:	464b      	mov	r3, r9
 801041c:	f7f0 f8ec 	bl	80005f8 <__aeabi_dmul>
 8010420:	4602      	mov	r2, r0
 8010422:	460b      	mov	r3, r1
 8010424:	4630      	mov	r0, r6
 8010426:	4639      	mov	r1, r7
 8010428:	f7ef ff2e 	bl	8000288 <__aeabi_dsub>
 801042c:	9e02      	ldr	r6, [sp, #8]
 801042e:	9f01      	ldr	r7, [sp, #4]
 8010430:	3630      	adds	r6, #48	; 0x30
 8010432:	f805 6b01 	strb.w	r6, [r5], #1
 8010436:	9e00      	ldr	r6, [sp, #0]
 8010438:	1bae      	subs	r6, r5, r6
 801043a:	42b7      	cmp	r7, r6
 801043c:	4602      	mov	r2, r0
 801043e:	460b      	mov	r3, r1
 8010440:	d137      	bne.n	80104b2 <_dtoa_r+0x722>
 8010442:	f7ef ff23 	bl	800028c <__adddf3>
 8010446:	4642      	mov	r2, r8
 8010448:	464b      	mov	r3, r9
 801044a:	4606      	mov	r6, r0
 801044c:	460f      	mov	r7, r1
 801044e:	f7f0 fb63 	bl	8000b18 <__aeabi_dcmpgt>
 8010452:	b9c8      	cbnz	r0, 8010488 <_dtoa_r+0x6f8>
 8010454:	4642      	mov	r2, r8
 8010456:	464b      	mov	r3, r9
 8010458:	4630      	mov	r0, r6
 801045a:	4639      	mov	r1, r7
 801045c:	f7f0 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 8010460:	b110      	cbz	r0, 8010468 <_dtoa_r+0x6d8>
 8010462:	9b02      	ldr	r3, [sp, #8]
 8010464:	07d9      	lsls	r1, r3, #31
 8010466:	d40f      	bmi.n	8010488 <_dtoa_r+0x6f8>
 8010468:	4620      	mov	r0, r4
 801046a:	4659      	mov	r1, fp
 801046c:	f000 ff2a 	bl	80112c4 <_Bfree>
 8010470:	2300      	movs	r3, #0
 8010472:	702b      	strb	r3, [r5, #0]
 8010474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010476:	f10a 0001 	add.w	r0, sl, #1
 801047a:	6018      	str	r0, [r3, #0]
 801047c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801047e:	2b00      	cmp	r3, #0
 8010480:	f43f acd8 	beq.w	800fe34 <_dtoa_r+0xa4>
 8010484:	601d      	str	r5, [r3, #0]
 8010486:	e4d5      	b.n	800fe34 <_dtoa_r+0xa4>
 8010488:	f8cd a01c 	str.w	sl, [sp, #28]
 801048c:	462b      	mov	r3, r5
 801048e:	461d      	mov	r5, r3
 8010490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010494:	2a39      	cmp	r2, #57	; 0x39
 8010496:	d108      	bne.n	80104aa <_dtoa_r+0x71a>
 8010498:	9a00      	ldr	r2, [sp, #0]
 801049a:	429a      	cmp	r2, r3
 801049c:	d1f7      	bne.n	801048e <_dtoa_r+0x6fe>
 801049e:	9a07      	ldr	r2, [sp, #28]
 80104a0:	9900      	ldr	r1, [sp, #0]
 80104a2:	3201      	adds	r2, #1
 80104a4:	9207      	str	r2, [sp, #28]
 80104a6:	2230      	movs	r2, #48	; 0x30
 80104a8:	700a      	strb	r2, [r1, #0]
 80104aa:	781a      	ldrb	r2, [r3, #0]
 80104ac:	3201      	adds	r2, #1
 80104ae:	701a      	strb	r2, [r3, #0]
 80104b0:	e78c      	b.n	80103cc <_dtoa_r+0x63c>
 80104b2:	4b7f      	ldr	r3, [pc, #508]	; (80106b0 <_dtoa_r+0x920>)
 80104b4:	2200      	movs	r2, #0
 80104b6:	f7f0 f89f 	bl	80005f8 <__aeabi_dmul>
 80104ba:	2200      	movs	r2, #0
 80104bc:	2300      	movs	r3, #0
 80104be:	4606      	mov	r6, r0
 80104c0:	460f      	mov	r7, r1
 80104c2:	f7f0 fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d09b      	beq.n	8010402 <_dtoa_r+0x672>
 80104ca:	e7cd      	b.n	8010468 <_dtoa_r+0x6d8>
 80104cc:	9a08      	ldr	r2, [sp, #32]
 80104ce:	2a00      	cmp	r2, #0
 80104d0:	f000 80c4 	beq.w	801065c <_dtoa_r+0x8cc>
 80104d4:	9a05      	ldr	r2, [sp, #20]
 80104d6:	2a01      	cmp	r2, #1
 80104d8:	f300 80a8 	bgt.w	801062c <_dtoa_r+0x89c>
 80104dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80104de:	2a00      	cmp	r2, #0
 80104e0:	f000 80a0 	beq.w	8010624 <_dtoa_r+0x894>
 80104e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80104e8:	9e06      	ldr	r6, [sp, #24]
 80104ea:	4645      	mov	r5, r8
 80104ec:	9a04      	ldr	r2, [sp, #16]
 80104ee:	2101      	movs	r1, #1
 80104f0:	441a      	add	r2, r3
 80104f2:	4620      	mov	r0, r4
 80104f4:	4498      	add	r8, r3
 80104f6:	9204      	str	r2, [sp, #16]
 80104f8:	f000 ffea 	bl	80114d0 <__i2b>
 80104fc:	4607      	mov	r7, r0
 80104fe:	2d00      	cmp	r5, #0
 8010500:	dd0b      	ble.n	801051a <_dtoa_r+0x78a>
 8010502:	9b04      	ldr	r3, [sp, #16]
 8010504:	2b00      	cmp	r3, #0
 8010506:	dd08      	ble.n	801051a <_dtoa_r+0x78a>
 8010508:	42ab      	cmp	r3, r5
 801050a:	9a04      	ldr	r2, [sp, #16]
 801050c:	bfa8      	it	ge
 801050e:	462b      	movge	r3, r5
 8010510:	eba8 0803 	sub.w	r8, r8, r3
 8010514:	1aed      	subs	r5, r5, r3
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	9304      	str	r3, [sp, #16]
 801051a:	9b06      	ldr	r3, [sp, #24]
 801051c:	b1fb      	cbz	r3, 801055e <_dtoa_r+0x7ce>
 801051e:	9b08      	ldr	r3, [sp, #32]
 8010520:	2b00      	cmp	r3, #0
 8010522:	f000 809f 	beq.w	8010664 <_dtoa_r+0x8d4>
 8010526:	2e00      	cmp	r6, #0
 8010528:	dd11      	ble.n	801054e <_dtoa_r+0x7be>
 801052a:	4639      	mov	r1, r7
 801052c:	4632      	mov	r2, r6
 801052e:	4620      	mov	r0, r4
 8010530:	f001 f88a 	bl	8011648 <__pow5mult>
 8010534:	465a      	mov	r2, fp
 8010536:	4601      	mov	r1, r0
 8010538:	4607      	mov	r7, r0
 801053a:	4620      	mov	r0, r4
 801053c:	f000 ffde 	bl	80114fc <__multiply>
 8010540:	4659      	mov	r1, fp
 8010542:	9007      	str	r0, [sp, #28]
 8010544:	4620      	mov	r0, r4
 8010546:	f000 febd 	bl	80112c4 <_Bfree>
 801054a:	9b07      	ldr	r3, [sp, #28]
 801054c:	469b      	mov	fp, r3
 801054e:	9b06      	ldr	r3, [sp, #24]
 8010550:	1b9a      	subs	r2, r3, r6
 8010552:	d004      	beq.n	801055e <_dtoa_r+0x7ce>
 8010554:	4659      	mov	r1, fp
 8010556:	4620      	mov	r0, r4
 8010558:	f001 f876 	bl	8011648 <__pow5mult>
 801055c:	4683      	mov	fp, r0
 801055e:	2101      	movs	r1, #1
 8010560:	4620      	mov	r0, r4
 8010562:	f000 ffb5 	bl	80114d0 <__i2b>
 8010566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010568:	2b00      	cmp	r3, #0
 801056a:	4606      	mov	r6, r0
 801056c:	dd7c      	ble.n	8010668 <_dtoa_r+0x8d8>
 801056e:	461a      	mov	r2, r3
 8010570:	4601      	mov	r1, r0
 8010572:	4620      	mov	r0, r4
 8010574:	f001 f868 	bl	8011648 <__pow5mult>
 8010578:	9b05      	ldr	r3, [sp, #20]
 801057a:	2b01      	cmp	r3, #1
 801057c:	4606      	mov	r6, r0
 801057e:	dd76      	ble.n	801066e <_dtoa_r+0x8de>
 8010580:	2300      	movs	r3, #0
 8010582:	9306      	str	r3, [sp, #24]
 8010584:	6933      	ldr	r3, [r6, #16]
 8010586:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801058a:	6918      	ldr	r0, [r3, #16]
 801058c:	f000 ff50 	bl	8011430 <__hi0bits>
 8010590:	f1c0 0020 	rsb	r0, r0, #32
 8010594:	9b04      	ldr	r3, [sp, #16]
 8010596:	4418      	add	r0, r3
 8010598:	f010 001f 	ands.w	r0, r0, #31
 801059c:	f000 8086 	beq.w	80106ac <_dtoa_r+0x91c>
 80105a0:	f1c0 0320 	rsb	r3, r0, #32
 80105a4:	2b04      	cmp	r3, #4
 80105a6:	dd7f      	ble.n	80106a8 <_dtoa_r+0x918>
 80105a8:	f1c0 001c 	rsb	r0, r0, #28
 80105ac:	9b04      	ldr	r3, [sp, #16]
 80105ae:	4403      	add	r3, r0
 80105b0:	4480      	add	r8, r0
 80105b2:	4405      	add	r5, r0
 80105b4:	9304      	str	r3, [sp, #16]
 80105b6:	f1b8 0f00 	cmp.w	r8, #0
 80105ba:	dd05      	ble.n	80105c8 <_dtoa_r+0x838>
 80105bc:	4659      	mov	r1, fp
 80105be:	4642      	mov	r2, r8
 80105c0:	4620      	mov	r0, r4
 80105c2:	f001 f89b 	bl	80116fc <__lshift>
 80105c6:	4683      	mov	fp, r0
 80105c8:	9b04      	ldr	r3, [sp, #16]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	dd05      	ble.n	80105da <_dtoa_r+0x84a>
 80105ce:	4631      	mov	r1, r6
 80105d0:	461a      	mov	r2, r3
 80105d2:	4620      	mov	r0, r4
 80105d4:	f001 f892 	bl	80116fc <__lshift>
 80105d8:	4606      	mov	r6, r0
 80105da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d069      	beq.n	80106b4 <_dtoa_r+0x924>
 80105e0:	4631      	mov	r1, r6
 80105e2:	4658      	mov	r0, fp
 80105e4:	f001 f8f6 	bl	80117d4 <__mcmp>
 80105e8:	2800      	cmp	r0, #0
 80105ea:	da63      	bge.n	80106b4 <_dtoa_r+0x924>
 80105ec:	2300      	movs	r3, #0
 80105ee:	4659      	mov	r1, fp
 80105f0:	220a      	movs	r2, #10
 80105f2:	4620      	mov	r0, r4
 80105f4:	f000 fe88 	bl	8011308 <__multadd>
 80105f8:	9b08      	ldr	r3, [sp, #32]
 80105fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80105fe:	4683      	mov	fp, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	f000 818f 	beq.w	8010924 <_dtoa_r+0xb94>
 8010606:	4639      	mov	r1, r7
 8010608:	2300      	movs	r3, #0
 801060a:	220a      	movs	r2, #10
 801060c:	4620      	mov	r0, r4
 801060e:	f000 fe7b 	bl	8011308 <__multadd>
 8010612:	f1b9 0f00 	cmp.w	r9, #0
 8010616:	4607      	mov	r7, r0
 8010618:	f300 808e 	bgt.w	8010738 <_dtoa_r+0x9a8>
 801061c:	9b05      	ldr	r3, [sp, #20]
 801061e:	2b02      	cmp	r3, #2
 8010620:	dc50      	bgt.n	80106c4 <_dtoa_r+0x934>
 8010622:	e089      	b.n	8010738 <_dtoa_r+0x9a8>
 8010624:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010626:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801062a:	e75d      	b.n	80104e8 <_dtoa_r+0x758>
 801062c:	9b01      	ldr	r3, [sp, #4]
 801062e:	1e5e      	subs	r6, r3, #1
 8010630:	9b06      	ldr	r3, [sp, #24]
 8010632:	42b3      	cmp	r3, r6
 8010634:	bfbf      	itttt	lt
 8010636:	9b06      	ldrlt	r3, [sp, #24]
 8010638:	9606      	strlt	r6, [sp, #24]
 801063a:	1af2      	sublt	r2, r6, r3
 801063c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801063e:	bfb6      	itet	lt
 8010640:	189b      	addlt	r3, r3, r2
 8010642:	1b9e      	subge	r6, r3, r6
 8010644:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010646:	9b01      	ldr	r3, [sp, #4]
 8010648:	bfb8      	it	lt
 801064a:	2600      	movlt	r6, #0
 801064c:	2b00      	cmp	r3, #0
 801064e:	bfb5      	itete	lt
 8010650:	eba8 0503 	sublt.w	r5, r8, r3
 8010654:	9b01      	ldrge	r3, [sp, #4]
 8010656:	2300      	movlt	r3, #0
 8010658:	4645      	movge	r5, r8
 801065a:	e747      	b.n	80104ec <_dtoa_r+0x75c>
 801065c:	9e06      	ldr	r6, [sp, #24]
 801065e:	9f08      	ldr	r7, [sp, #32]
 8010660:	4645      	mov	r5, r8
 8010662:	e74c      	b.n	80104fe <_dtoa_r+0x76e>
 8010664:	9a06      	ldr	r2, [sp, #24]
 8010666:	e775      	b.n	8010554 <_dtoa_r+0x7c4>
 8010668:	9b05      	ldr	r3, [sp, #20]
 801066a:	2b01      	cmp	r3, #1
 801066c:	dc18      	bgt.n	80106a0 <_dtoa_r+0x910>
 801066e:	9b02      	ldr	r3, [sp, #8]
 8010670:	b9b3      	cbnz	r3, 80106a0 <_dtoa_r+0x910>
 8010672:	9b03      	ldr	r3, [sp, #12]
 8010674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010678:	b9a3      	cbnz	r3, 80106a4 <_dtoa_r+0x914>
 801067a:	9b03      	ldr	r3, [sp, #12]
 801067c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010680:	0d1b      	lsrs	r3, r3, #20
 8010682:	051b      	lsls	r3, r3, #20
 8010684:	b12b      	cbz	r3, 8010692 <_dtoa_r+0x902>
 8010686:	9b04      	ldr	r3, [sp, #16]
 8010688:	3301      	adds	r3, #1
 801068a:	9304      	str	r3, [sp, #16]
 801068c:	f108 0801 	add.w	r8, r8, #1
 8010690:	2301      	movs	r3, #1
 8010692:	9306      	str	r3, [sp, #24]
 8010694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010696:	2b00      	cmp	r3, #0
 8010698:	f47f af74 	bne.w	8010584 <_dtoa_r+0x7f4>
 801069c:	2001      	movs	r0, #1
 801069e:	e779      	b.n	8010594 <_dtoa_r+0x804>
 80106a0:	2300      	movs	r3, #0
 80106a2:	e7f6      	b.n	8010692 <_dtoa_r+0x902>
 80106a4:	9b02      	ldr	r3, [sp, #8]
 80106a6:	e7f4      	b.n	8010692 <_dtoa_r+0x902>
 80106a8:	d085      	beq.n	80105b6 <_dtoa_r+0x826>
 80106aa:	4618      	mov	r0, r3
 80106ac:	301c      	adds	r0, #28
 80106ae:	e77d      	b.n	80105ac <_dtoa_r+0x81c>
 80106b0:	40240000 	.word	0x40240000
 80106b4:	9b01      	ldr	r3, [sp, #4]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	dc38      	bgt.n	801072c <_dtoa_r+0x99c>
 80106ba:	9b05      	ldr	r3, [sp, #20]
 80106bc:	2b02      	cmp	r3, #2
 80106be:	dd35      	ble.n	801072c <_dtoa_r+0x99c>
 80106c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80106c4:	f1b9 0f00 	cmp.w	r9, #0
 80106c8:	d10d      	bne.n	80106e6 <_dtoa_r+0x956>
 80106ca:	4631      	mov	r1, r6
 80106cc:	464b      	mov	r3, r9
 80106ce:	2205      	movs	r2, #5
 80106d0:	4620      	mov	r0, r4
 80106d2:	f000 fe19 	bl	8011308 <__multadd>
 80106d6:	4601      	mov	r1, r0
 80106d8:	4606      	mov	r6, r0
 80106da:	4658      	mov	r0, fp
 80106dc:	f001 f87a 	bl	80117d4 <__mcmp>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	f73f adbd 	bgt.w	8010260 <_dtoa_r+0x4d0>
 80106e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106e8:	9d00      	ldr	r5, [sp, #0]
 80106ea:	ea6f 0a03 	mvn.w	sl, r3
 80106ee:	f04f 0800 	mov.w	r8, #0
 80106f2:	4631      	mov	r1, r6
 80106f4:	4620      	mov	r0, r4
 80106f6:	f000 fde5 	bl	80112c4 <_Bfree>
 80106fa:	2f00      	cmp	r7, #0
 80106fc:	f43f aeb4 	beq.w	8010468 <_dtoa_r+0x6d8>
 8010700:	f1b8 0f00 	cmp.w	r8, #0
 8010704:	d005      	beq.n	8010712 <_dtoa_r+0x982>
 8010706:	45b8      	cmp	r8, r7
 8010708:	d003      	beq.n	8010712 <_dtoa_r+0x982>
 801070a:	4641      	mov	r1, r8
 801070c:	4620      	mov	r0, r4
 801070e:	f000 fdd9 	bl	80112c4 <_Bfree>
 8010712:	4639      	mov	r1, r7
 8010714:	4620      	mov	r0, r4
 8010716:	f000 fdd5 	bl	80112c4 <_Bfree>
 801071a:	e6a5      	b.n	8010468 <_dtoa_r+0x6d8>
 801071c:	2600      	movs	r6, #0
 801071e:	4637      	mov	r7, r6
 8010720:	e7e1      	b.n	80106e6 <_dtoa_r+0x956>
 8010722:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010724:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010728:	4637      	mov	r7, r6
 801072a:	e599      	b.n	8010260 <_dtoa_r+0x4d0>
 801072c:	9b08      	ldr	r3, [sp, #32]
 801072e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	f000 80fd 	beq.w	8010932 <_dtoa_r+0xba2>
 8010738:	2d00      	cmp	r5, #0
 801073a:	dd05      	ble.n	8010748 <_dtoa_r+0x9b8>
 801073c:	4639      	mov	r1, r7
 801073e:	462a      	mov	r2, r5
 8010740:	4620      	mov	r0, r4
 8010742:	f000 ffdb 	bl	80116fc <__lshift>
 8010746:	4607      	mov	r7, r0
 8010748:	9b06      	ldr	r3, [sp, #24]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d05c      	beq.n	8010808 <_dtoa_r+0xa78>
 801074e:	6879      	ldr	r1, [r7, #4]
 8010750:	4620      	mov	r0, r4
 8010752:	f000 fd77 	bl	8011244 <_Balloc>
 8010756:	4605      	mov	r5, r0
 8010758:	b928      	cbnz	r0, 8010766 <_dtoa_r+0x9d6>
 801075a:	4b80      	ldr	r3, [pc, #512]	; (801095c <_dtoa_r+0xbcc>)
 801075c:	4602      	mov	r2, r0
 801075e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010762:	f7ff bb2e 	b.w	800fdc2 <_dtoa_r+0x32>
 8010766:	693a      	ldr	r2, [r7, #16]
 8010768:	3202      	adds	r2, #2
 801076a:	0092      	lsls	r2, r2, #2
 801076c:	f107 010c 	add.w	r1, r7, #12
 8010770:	300c      	adds	r0, #12
 8010772:	f7fd fbde 	bl	800df32 <memcpy>
 8010776:	2201      	movs	r2, #1
 8010778:	4629      	mov	r1, r5
 801077a:	4620      	mov	r0, r4
 801077c:	f000 ffbe 	bl	80116fc <__lshift>
 8010780:	9b00      	ldr	r3, [sp, #0]
 8010782:	3301      	adds	r3, #1
 8010784:	9301      	str	r3, [sp, #4]
 8010786:	9b00      	ldr	r3, [sp, #0]
 8010788:	444b      	add	r3, r9
 801078a:	9307      	str	r3, [sp, #28]
 801078c:	9b02      	ldr	r3, [sp, #8]
 801078e:	f003 0301 	and.w	r3, r3, #1
 8010792:	46b8      	mov	r8, r7
 8010794:	9306      	str	r3, [sp, #24]
 8010796:	4607      	mov	r7, r0
 8010798:	9b01      	ldr	r3, [sp, #4]
 801079a:	4631      	mov	r1, r6
 801079c:	3b01      	subs	r3, #1
 801079e:	4658      	mov	r0, fp
 80107a0:	9302      	str	r3, [sp, #8]
 80107a2:	f7ff fa69 	bl	800fc78 <quorem>
 80107a6:	4603      	mov	r3, r0
 80107a8:	3330      	adds	r3, #48	; 0x30
 80107aa:	9004      	str	r0, [sp, #16]
 80107ac:	4641      	mov	r1, r8
 80107ae:	4658      	mov	r0, fp
 80107b0:	9308      	str	r3, [sp, #32]
 80107b2:	f001 f80f 	bl	80117d4 <__mcmp>
 80107b6:	463a      	mov	r2, r7
 80107b8:	4681      	mov	r9, r0
 80107ba:	4631      	mov	r1, r6
 80107bc:	4620      	mov	r0, r4
 80107be:	f001 f825 	bl	801180c <__mdiff>
 80107c2:	68c2      	ldr	r2, [r0, #12]
 80107c4:	9b08      	ldr	r3, [sp, #32]
 80107c6:	4605      	mov	r5, r0
 80107c8:	bb02      	cbnz	r2, 801080c <_dtoa_r+0xa7c>
 80107ca:	4601      	mov	r1, r0
 80107cc:	4658      	mov	r0, fp
 80107ce:	f001 f801 	bl	80117d4 <__mcmp>
 80107d2:	9b08      	ldr	r3, [sp, #32]
 80107d4:	4602      	mov	r2, r0
 80107d6:	4629      	mov	r1, r5
 80107d8:	4620      	mov	r0, r4
 80107da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80107de:	f000 fd71 	bl	80112c4 <_Bfree>
 80107e2:	9b05      	ldr	r3, [sp, #20]
 80107e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107e6:	9d01      	ldr	r5, [sp, #4]
 80107e8:	ea43 0102 	orr.w	r1, r3, r2
 80107ec:	9b06      	ldr	r3, [sp, #24]
 80107ee:	430b      	orrs	r3, r1
 80107f0:	9b08      	ldr	r3, [sp, #32]
 80107f2:	d10d      	bne.n	8010810 <_dtoa_r+0xa80>
 80107f4:	2b39      	cmp	r3, #57	; 0x39
 80107f6:	d029      	beq.n	801084c <_dtoa_r+0xabc>
 80107f8:	f1b9 0f00 	cmp.w	r9, #0
 80107fc:	dd01      	ble.n	8010802 <_dtoa_r+0xa72>
 80107fe:	9b04      	ldr	r3, [sp, #16]
 8010800:	3331      	adds	r3, #49	; 0x31
 8010802:	9a02      	ldr	r2, [sp, #8]
 8010804:	7013      	strb	r3, [r2, #0]
 8010806:	e774      	b.n	80106f2 <_dtoa_r+0x962>
 8010808:	4638      	mov	r0, r7
 801080a:	e7b9      	b.n	8010780 <_dtoa_r+0x9f0>
 801080c:	2201      	movs	r2, #1
 801080e:	e7e2      	b.n	80107d6 <_dtoa_r+0xa46>
 8010810:	f1b9 0f00 	cmp.w	r9, #0
 8010814:	db06      	blt.n	8010824 <_dtoa_r+0xa94>
 8010816:	9905      	ldr	r1, [sp, #20]
 8010818:	ea41 0909 	orr.w	r9, r1, r9
 801081c:	9906      	ldr	r1, [sp, #24]
 801081e:	ea59 0101 	orrs.w	r1, r9, r1
 8010822:	d120      	bne.n	8010866 <_dtoa_r+0xad6>
 8010824:	2a00      	cmp	r2, #0
 8010826:	ddec      	ble.n	8010802 <_dtoa_r+0xa72>
 8010828:	4659      	mov	r1, fp
 801082a:	2201      	movs	r2, #1
 801082c:	4620      	mov	r0, r4
 801082e:	9301      	str	r3, [sp, #4]
 8010830:	f000 ff64 	bl	80116fc <__lshift>
 8010834:	4631      	mov	r1, r6
 8010836:	4683      	mov	fp, r0
 8010838:	f000 ffcc 	bl	80117d4 <__mcmp>
 801083c:	2800      	cmp	r0, #0
 801083e:	9b01      	ldr	r3, [sp, #4]
 8010840:	dc02      	bgt.n	8010848 <_dtoa_r+0xab8>
 8010842:	d1de      	bne.n	8010802 <_dtoa_r+0xa72>
 8010844:	07da      	lsls	r2, r3, #31
 8010846:	d5dc      	bpl.n	8010802 <_dtoa_r+0xa72>
 8010848:	2b39      	cmp	r3, #57	; 0x39
 801084a:	d1d8      	bne.n	80107fe <_dtoa_r+0xa6e>
 801084c:	9a02      	ldr	r2, [sp, #8]
 801084e:	2339      	movs	r3, #57	; 0x39
 8010850:	7013      	strb	r3, [r2, #0]
 8010852:	462b      	mov	r3, r5
 8010854:	461d      	mov	r5, r3
 8010856:	3b01      	subs	r3, #1
 8010858:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801085c:	2a39      	cmp	r2, #57	; 0x39
 801085e:	d050      	beq.n	8010902 <_dtoa_r+0xb72>
 8010860:	3201      	adds	r2, #1
 8010862:	701a      	strb	r2, [r3, #0]
 8010864:	e745      	b.n	80106f2 <_dtoa_r+0x962>
 8010866:	2a00      	cmp	r2, #0
 8010868:	dd03      	ble.n	8010872 <_dtoa_r+0xae2>
 801086a:	2b39      	cmp	r3, #57	; 0x39
 801086c:	d0ee      	beq.n	801084c <_dtoa_r+0xabc>
 801086e:	3301      	adds	r3, #1
 8010870:	e7c7      	b.n	8010802 <_dtoa_r+0xa72>
 8010872:	9a01      	ldr	r2, [sp, #4]
 8010874:	9907      	ldr	r1, [sp, #28]
 8010876:	f802 3c01 	strb.w	r3, [r2, #-1]
 801087a:	428a      	cmp	r2, r1
 801087c:	d02a      	beq.n	80108d4 <_dtoa_r+0xb44>
 801087e:	4659      	mov	r1, fp
 8010880:	2300      	movs	r3, #0
 8010882:	220a      	movs	r2, #10
 8010884:	4620      	mov	r0, r4
 8010886:	f000 fd3f 	bl	8011308 <__multadd>
 801088a:	45b8      	cmp	r8, r7
 801088c:	4683      	mov	fp, r0
 801088e:	f04f 0300 	mov.w	r3, #0
 8010892:	f04f 020a 	mov.w	r2, #10
 8010896:	4641      	mov	r1, r8
 8010898:	4620      	mov	r0, r4
 801089a:	d107      	bne.n	80108ac <_dtoa_r+0xb1c>
 801089c:	f000 fd34 	bl	8011308 <__multadd>
 80108a0:	4680      	mov	r8, r0
 80108a2:	4607      	mov	r7, r0
 80108a4:	9b01      	ldr	r3, [sp, #4]
 80108a6:	3301      	adds	r3, #1
 80108a8:	9301      	str	r3, [sp, #4]
 80108aa:	e775      	b.n	8010798 <_dtoa_r+0xa08>
 80108ac:	f000 fd2c 	bl	8011308 <__multadd>
 80108b0:	4639      	mov	r1, r7
 80108b2:	4680      	mov	r8, r0
 80108b4:	2300      	movs	r3, #0
 80108b6:	220a      	movs	r2, #10
 80108b8:	4620      	mov	r0, r4
 80108ba:	f000 fd25 	bl	8011308 <__multadd>
 80108be:	4607      	mov	r7, r0
 80108c0:	e7f0      	b.n	80108a4 <_dtoa_r+0xb14>
 80108c2:	f1b9 0f00 	cmp.w	r9, #0
 80108c6:	9a00      	ldr	r2, [sp, #0]
 80108c8:	bfcc      	ite	gt
 80108ca:	464d      	movgt	r5, r9
 80108cc:	2501      	movle	r5, #1
 80108ce:	4415      	add	r5, r2
 80108d0:	f04f 0800 	mov.w	r8, #0
 80108d4:	4659      	mov	r1, fp
 80108d6:	2201      	movs	r2, #1
 80108d8:	4620      	mov	r0, r4
 80108da:	9301      	str	r3, [sp, #4]
 80108dc:	f000 ff0e 	bl	80116fc <__lshift>
 80108e0:	4631      	mov	r1, r6
 80108e2:	4683      	mov	fp, r0
 80108e4:	f000 ff76 	bl	80117d4 <__mcmp>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	dcb2      	bgt.n	8010852 <_dtoa_r+0xac2>
 80108ec:	d102      	bne.n	80108f4 <_dtoa_r+0xb64>
 80108ee:	9b01      	ldr	r3, [sp, #4]
 80108f0:	07db      	lsls	r3, r3, #31
 80108f2:	d4ae      	bmi.n	8010852 <_dtoa_r+0xac2>
 80108f4:	462b      	mov	r3, r5
 80108f6:	461d      	mov	r5, r3
 80108f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108fc:	2a30      	cmp	r2, #48	; 0x30
 80108fe:	d0fa      	beq.n	80108f6 <_dtoa_r+0xb66>
 8010900:	e6f7      	b.n	80106f2 <_dtoa_r+0x962>
 8010902:	9a00      	ldr	r2, [sp, #0]
 8010904:	429a      	cmp	r2, r3
 8010906:	d1a5      	bne.n	8010854 <_dtoa_r+0xac4>
 8010908:	f10a 0a01 	add.w	sl, sl, #1
 801090c:	2331      	movs	r3, #49	; 0x31
 801090e:	e779      	b.n	8010804 <_dtoa_r+0xa74>
 8010910:	4b13      	ldr	r3, [pc, #76]	; (8010960 <_dtoa_r+0xbd0>)
 8010912:	f7ff baaf 	b.w	800fe74 <_dtoa_r+0xe4>
 8010916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010918:	2b00      	cmp	r3, #0
 801091a:	f47f aa86 	bne.w	800fe2a <_dtoa_r+0x9a>
 801091e:	4b11      	ldr	r3, [pc, #68]	; (8010964 <_dtoa_r+0xbd4>)
 8010920:	f7ff baa8 	b.w	800fe74 <_dtoa_r+0xe4>
 8010924:	f1b9 0f00 	cmp.w	r9, #0
 8010928:	dc03      	bgt.n	8010932 <_dtoa_r+0xba2>
 801092a:	9b05      	ldr	r3, [sp, #20]
 801092c:	2b02      	cmp	r3, #2
 801092e:	f73f aec9 	bgt.w	80106c4 <_dtoa_r+0x934>
 8010932:	9d00      	ldr	r5, [sp, #0]
 8010934:	4631      	mov	r1, r6
 8010936:	4658      	mov	r0, fp
 8010938:	f7ff f99e 	bl	800fc78 <quorem>
 801093c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010940:	f805 3b01 	strb.w	r3, [r5], #1
 8010944:	9a00      	ldr	r2, [sp, #0]
 8010946:	1aaa      	subs	r2, r5, r2
 8010948:	4591      	cmp	r9, r2
 801094a:	ddba      	ble.n	80108c2 <_dtoa_r+0xb32>
 801094c:	4659      	mov	r1, fp
 801094e:	2300      	movs	r3, #0
 8010950:	220a      	movs	r2, #10
 8010952:	4620      	mov	r0, r4
 8010954:	f000 fcd8 	bl	8011308 <__multadd>
 8010958:	4683      	mov	fp, r0
 801095a:	e7eb      	b.n	8010934 <_dtoa_r+0xba4>
 801095c:	0801451c 	.word	0x0801451c
 8010960:	0801431c 	.word	0x0801431c
 8010964:	08014499 	.word	0x08014499

08010968 <__sflush_r>:
 8010968:	898a      	ldrh	r2, [r1, #12]
 801096a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801096e:	4605      	mov	r5, r0
 8010970:	0710      	lsls	r0, r2, #28
 8010972:	460c      	mov	r4, r1
 8010974:	d458      	bmi.n	8010a28 <__sflush_r+0xc0>
 8010976:	684b      	ldr	r3, [r1, #4]
 8010978:	2b00      	cmp	r3, #0
 801097a:	dc05      	bgt.n	8010988 <__sflush_r+0x20>
 801097c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801097e:	2b00      	cmp	r3, #0
 8010980:	dc02      	bgt.n	8010988 <__sflush_r+0x20>
 8010982:	2000      	movs	r0, #0
 8010984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801098a:	2e00      	cmp	r6, #0
 801098c:	d0f9      	beq.n	8010982 <__sflush_r+0x1a>
 801098e:	2300      	movs	r3, #0
 8010990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010994:	682f      	ldr	r7, [r5, #0]
 8010996:	602b      	str	r3, [r5, #0]
 8010998:	d032      	beq.n	8010a00 <__sflush_r+0x98>
 801099a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801099c:	89a3      	ldrh	r3, [r4, #12]
 801099e:	075a      	lsls	r2, r3, #29
 80109a0:	d505      	bpl.n	80109ae <__sflush_r+0x46>
 80109a2:	6863      	ldr	r3, [r4, #4]
 80109a4:	1ac0      	subs	r0, r0, r3
 80109a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109a8:	b10b      	cbz	r3, 80109ae <__sflush_r+0x46>
 80109aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80109ac:	1ac0      	subs	r0, r0, r3
 80109ae:	2300      	movs	r3, #0
 80109b0:	4602      	mov	r2, r0
 80109b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109b4:	6a21      	ldr	r1, [r4, #32]
 80109b6:	4628      	mov	r0, r5
 80109b8:	47b0      	blx	r6
 80109ba:	1c43      	adds	r3, r0, #1
 80109bc:	89a3      	ldrh	r3, [r4, #12]
 80109be:	d106      	bne.n	80109ce <__sflush_r+0x66>
 80109c0:	6829      	ldr	r1, [r5, #0]
 80109c2:	291d      	cmp	r1, #29
 80109c4:	d82c      	bhi.n	8010a20 <__sflush_r+0xb8>
 80109c6:	4a2a      	ldr	r2, [pc, #168]	; (8010a70 <__sflush_r+0x108>)
 80109c8:	40ca      	lsrs	r2, r1
 80109ca:	07d6      	lsls	r6, r2, #31
 80109cc:	d528      	bpl.n	8010a20 <__sflush_r+0xb8>
 80109ce:	2200      	movs	r2, #0
 80109d0:	6062      	str	r2, [r4, #4]
 80109d2:	04d9      	lsls	r1, r3, #19
 80109d4:	6922      	ldr	r2, [r4, #16]
 80109d6:	6022      	str	r2, [r4, #0]
 80109d8:	d504      	bpl.n	80109e4 <__sflush_r+0x7c>
 80109da:	1c42      	adds	r2, r0, #1
 80109dc:	d101      	bne.n	80109e2 <__sflush_r+0x7a>
 80109de:	682b      	ldr	r3, [r5, #0]
 80109e0:	b903      	cbnz	r3, 80109e4 <__sflush_r+0x7c>
 80109e2:	6560      	str	r0, [r4, #84]	; 0x54
 80109e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109e6:	602f      	str	r7, [r5, #0]
 80109e8:	2900      	cmp	r1, #0
 80109ea:	d0ca      	beq.n	8010982 <__sflush_r+0x1a>
 80109ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109f0:	4299      	cmp	r1, r3
 80109f2:	d002      	beq.n	80109fa <__sflush_r+0x92>
 80109f4:	4628      	mov	r0, r5
 80109f6:	f001 f8ef 	bl	8011bd8 <_free_r>
 80109fa:	2000      	movs	r0, #0
 80109fc:	6360      	str	r0, [r4, #52]	; 0x34
 80109fe:	e7c1      	b.n	8010984 <__sflush_r+0x1c>
 8010a00:	6a21      	ldr	r1, [r4, #32]
 8010a02:	2301      	movs	r3, #1
 8010a04:	4628      	mov	r0, r5
 8010a06:	47b0      	blx	r6
 8010a08:	1c41      	adds	r1, r0, #1
 8010a0a:	d1c7      	bne.n	801099c <__sflush_r+0x34>
 8010a0c:	682b      	ldr	r3, [r5, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d0c4      	beq.n	801099c <__sflush_r+0x34>
 8010a12:	2b1d      	cmp	r3, #29
 8010a14:	d001      	beq.n	8010a1a <__sflush_r+0xb2>
 8010a16:	2b16      	cmp	r3, #22
 8010a18:	d101      	bne.n	8010a1e <__sflush_r+0xb6>
 8010a1a:	602f      	str	r7, [r5, #0]
 8010a1c:	e7b1      	b.n	8010982 <__sflush_r+0x1a>
 8010a1e:	89a3      	ldrh	r3, [r4, #12]
 8010a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a24:	81a3      	strh	r3, [r4, #12]
 8010a26:	e7ad      	b.n	8010984 <__sflush_r+0x1c>
 8010a28:	690f      	ldr	r7, [r1, #16]
 8010a2a:	2f00      	cmp	r7, #0
 8010a2c:	d0a9      	beq.n	8010982 <__sflush_r+0x1a>
 8010a2e:	0793      	lsls	r3, r2, #30
 8010a30:	680e      	ldr	r6, [r1, #0]
 8010a32:	bf08      	it	eq
 8010a34:	694b      	ldreq	r3, [r1, #20]
 8010a36:	600f      	str	r7, [r1, #0]
 8010a38:	bf18      	it	ne
 8010a3a:	2300      	movne	r3, #0
 8010a3c:	eba6 0807 	sub.w	r8, r6, r7
 8010a40:	608b      	str	r3, [r1, #8]
 8010a42:	f1b8 0f00 	cmp.w	r8, #0
 8010a46:	dd9c      	ble.n	8010982 <__sflush_r+0x1a>
 8010a48:	6a21      	ldr	r1, [r4, #32]
 8010a4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a4c:	4643      	mov	r3, r8
 8010a4e:	463a      	mov	r2, r7
 8010a50:	4628      	mov	r0, r5
 8010a52:	47b0      	blx	r6
 8010a54:	2800      	cmp	r0, #0
 8010a56:	dc06      	bgt.n	8010a66 <__sflush_r+0xfe>
 8010a58:	89a3      	ldrh	r3, [r4, #12]
 8010a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a5e:	81a3      	strh	r3, [r4, #12]
 8010a60:	f04f 30ff 	mov.w	r0, #4294967295
 8010a64:	e78e      	b.n	8010984 <__sflush_r+0x1c>
 8010a66:	4407      	add	r7, r0
 8010a68:	eba8 0800 	sub.w	r8, r8, r0
 8010a6c:	e7e9      	b.n	8010a42 <__sflush_r+0xda>
 8010a6e:	bf00      	nop
 8010a70:	20400001 	.word	0x20400001

08010a74 <_fflush_r>:
 8010a74:	b538      	push	{r3, r4, r5, lr}
 8010a76:	690b      	ldr	r3, [r1, #16]
 8010a78:	4605      	mov	r5, r0
 8010a7a:	460c      	mov	r4, r1
 8010a7c:	b913      	cbnz	r3, 8010a84 <_fflush_r+0x10>
 8010a7e:	2500      	movs	r5, #0
 8010a80:	4628      	mov	r0, r5
 8010a82:	bd38      	pop	{r3, r4, r5, pc}
 8010a84:	b118      	cbz	r0, 8010a8e <_fflush_r+0x1a>
 8010a86:	6983      	ldr	r3, [r0, #24]
 8010a88:	b90b      	cbnz	r3, 8010a8e <_fflush_r+0x1a>
 8010a8a:	f7fd f98d 	bl	800dda8 <__sinit>
 8010a8e:	4b14      	ldr	r3, [pc, #80]	; (8010ae0 <_fflush_r+0x6c>)
 8010a90:	429c      	cmp	r4, r3
 8010a92:	d11b      	bne.n	8010acc <_fflush_r+0x58>
 8010a94:	686c      	ldr	r4, [r5, #4]
 8010a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d0ef      	beq.n	8010a7e <_fflush_r+0xa>
 8010a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010aa0:	07d0      	lsls	r0, r2, #31
 8010aa2:	d404      	bmi.n	8010aae <_fflush_r+0x3a>
 8010aa4:	0599      	lsls	r1, r3, #22
 8010aa6:	d402      	bmi.n	8010aae <_fflush_r+0x3a>
 8010aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010aaa:	f7fd fa40 	bl	800df2e <__retarget_lock_acquire_recursive>
 8010aae:	4628      	mov	r0, r5
 8010ab0:	4621      	mov	r1, r4
 8010ab2:	f7ff ff59 	bl	8010968 <__sflush_r>
 8010ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ab8:	07da      	lsls	r2, r3, #31
 8010aba:	4605      	mov	r5, r0
 8010abc:	d4e0      	bmi.n	8010a80 <_fflush_r+0xc>
 8010abe:	89a3      	ldrh	r3, [r4, #12]
 8010ac0:	059b      	lsls	r3, r3, #22
 8010ac2:	d4dd      	bmi.n	8010a80 <_fflush_r+0xc>
 8010ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ac6:	f7fd fa33 	bl	800df30 <__retarget_lock_release_recursive>
 8010aca:	e7d9      	b.n	8010a80 <_fflush_r+0xc>
 8010acc:	4b05      	ldr	r3, [pc, #20]	; (8010ae4 <_fflush_r+0x70>)
 8010ace:	429c      	cmp	r4, r3
 8010ad0:	d101      	bne.n	8010ad6 <_fflush_r+0x62>
 8010ad2:	68ac      	ldr	r4, [r5, #8]
 8010ad4:	e7df      	b.n	8010a96 <_fflush_r+0x22>
 8010ad6:	4b04      	ldr	r3, [pc, #16]	; (8010ae8 <_fflush_r+0x74>)
 8010ad8:	429c      	cmp	r4, r3
 8010ada:	bf08      	it	eq
 8010adc:	68ec      	ldreq	r4, [r5, #12]
 8010ade:	e7da      	b.n	8010a96 <_fflush_r+0x22>
 8010ae0:	080142c8 	.word	0x080142c8
 8010ae4:	080142e8 	.word	0x080142e8
 8010ae8:	080142a8 	.word	0x080142a8

08010aec <rshift>:
 8010aec:	6903      	ldr	r3, [r0, #16]
 8010aee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010af2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010af6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010afa:	f100 0414 	add.w	r4, r0, #20
 8010afe:	dd45      	ble.n	8010b8c <rshift+0xa0>
 8010b00:	f011 011f 	ands.w	r1, r1, #31
 8010b04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010b08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010b0c:	d10c      	bne.n	8010b28 <rshift+0x3c>
 8010b0e:	f100 0710 	add.w	r7, r0, #16
 8010b12:	4629      	mov	r1, r5
 8010b14:	42b1      	cmp	r1, r6
 8010b16:	d334      	bcc.n	8010b82 <rshift+0x96>
 8010b18:	1a9b      	subs	r3, r3, r2
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	1eea      	subs	r2, r5, #3
 8010b1e:	4296      	cmp	r6, r2
 8010b20:	bf38      	it	cc
 8010b22:	2300      	movcc	r3, #0
 8010b24:	4423      	add	r3, r4
 8010b26:	e015      	b.n	8010b54 <rshift+0x68>
 8010b28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010b2c:	f1c1 0820 	rsb	r8, r1, #32
 8010b30:	40cf      	lsrs	r7, r1
 8010b32:	f105 0e04 	add.w	lr, r5, #4
 8010b36:	46a1      	mov	r9, r4
 8010b38:	4576      	cmp	r6, lr
 8010b3a:	46f4      	mov	ip, lr
 8010b3c:	d815      	bhi.n	8010b6a <rshift+0x7e>
 8010b3e:	1a9b      	subs	r3, r3, r2
 8010b40:	009a      	lsls	r2, r3, #2
 8010b42:	3a04      	subs	r2, #4
 8010b44:	3501      	adds	r5, #1
 8010b46:	42ae      	cmp	r6, r5
 8010b48:	bf38      	it	cc
 8010b4a:	2200      	movcc	r2, #0
 8010b4c:	18a3      	adds	r3, r4, r2
 8010b4e:	50a7      	str	r7, [r4, r2]
 8010b50:	b107      	cbz	r7, 8010b54 <rshift+0x68>
 8010b52:	3304      	adds	r3, #4
 8010b54:	1b1a      	subs	r2, r3, r4
 8010b56:	42a3      	cmp	r3, r4
 8010b58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010b5c:	bf08      	it	eq
 8010b5e:	2300      	moveq	r3, #0
 8010b60:	6102      	str	r2, [r0, #16]
 8010b62:	bf08      	it	eq
 8010b64:	6143      	streq	r3, [r0, #20]
 8010b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b6a:	f8dc c000 	ldr.w	ip, [ip]
 8010b6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010b72:	ea4c 0707 	orr.w	r7, ip, r7
 8010b76:	f849 7b04 	str.w	r7, [r9], #4
 8010b7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010b7e:	40cf      	lsrs	r7, r1
 8010b80:	e7da      	b.n	8010b38 <rshift+0x4c>
 8010b82:	f851 cb04 	ldr.w	ip, [r1], #4
 8010b86:	f847 cf04 	str.w	ip, [r7, #4]!
 8010b8a:	e7c3      	b.n	8010b14 <rshift+0x28>
 8010b8c:	4623      	mov	r3, r4
 8010b8e:	e7e1      	b.n	8010b54 <rshift+0x68>

08010b90 <__hexdig_fun>:
 8010b90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010b94:	2b09      	cmp	r3, #9
 8010b96:	d802      	bhi.n	8010b9e <__hexdig_fun+0xe>
 8010b98:	3820      	subs	r0, #32
 8010b9a:	b2c0      	uxtb	r0, r0
 8010b9c:	4770      	bx	lr
 8010b9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010ba2:	2b05      	cmp	r3, #5
 8010ba4:	d801      	bhi.n	8010baa <__hexdig_fun+0x1a>
 8010ba6:	3847      	subs	r0, #71	; 0x47
 8010ba8:	e7f7      	b.n	8010b9a <__hexdig_fun+0xa>
 8010baa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010bae:	2b05      	cmp	r3, #5
 8010bb0:	d801      	bhi.n	8010bb6 <__hexdig_fun+0x26>
 8010bb2:	3827      	subs	r0, #39	; 0x27
 8010bb4:	e7f1      	b.n	8010b9a <__hexdig_fun+0xa>
 8010bb6:	2000      	movs	r0, #0
 8010bb8:	4770      	bx	lr
	...

08010bbc <__gethex>:
 8010bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc0:	ed2d 8b02 	vpush	{d8}
 8010bc4:	b089      	sub	sp, #36	; 0x24
 8010bc6:	ee08 0a10 	vmov	s16, r0
 8010bca:	9304      	str	r3, [sp, #16]
 8010bcc:	4bbc      	ldr	r3, [pc, #752]	; (8010ec0 <__gethex+0x304>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	9301      	str	r3, [sp, #4]
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	468b      	mov	fp, r1
 8010bd6:	4690      	mov	r8, r2
 8010bd8:	f7ef fafa 	bl	80001d0 <strlen>
 8010bdc:	9b01      	ldr	r3, [sp, #4]
 8010bde:	f8db 2000 	ldr.w	r2, [fp]
 8010be2:	4403      	add	r3, r0
 8010be4:	4682      	mov	sl, r0
 8010be6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010bea:	9305      	str	r3, [sp, #20]
 8010bec:	1c93      	adds	r3, r2, #2
 8010bee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010bf2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010bf6:	32fe      	adds	r2, #254	; 0xfe
 8010bf8:	18d1      	adds	r1, r2, r3
 8010bfa:	461f      	mov	r7, r3
 8010bfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010c00:	9100      	str	r1, [sp, #0]
 8010c02:	2830      	cmp	r0, #48	; 0x30
 8010c04:	d0f8      	beq.n	8010bf8 <__gethex+0x3c>
 8010c06:	f7ff ffc3 	bl	8010b90 <__hexdig_fun>
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	d13a      	bne.n	8010c86 <__gethex+0xca>
 8010c10:	9901      	ldr	r1, [sp, #4]
 8010c12:	4652      	mov	r2, sl
 8010c14:	4638      	mov	r0, r7
 8010c16:	f001 f9a7 	bl	8011f68 <strncmp>
 8010c1a:	4605      	mov	r5, r0
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	d168      	bne.n	8010cf2 <__gethex+0x136>
 8010c20:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010c24:	eb07 060a 	add.w	r6, r7, sl
 8010c28:	f7ff ffb2 	bl	8010b90 <__hexdig_fun>
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	d062      	beq.n	8010cf6 <__gethex+0x13a>
 8010c30:	4633      	mov	r3, r6
 8010c32:	7818      	ldrb	r0, [r3, #0]
 8010c34:	2830      	cmp	r0, #48	; 0x30
 8010c36:	461f      	mov	r7, r3
 8010c38:	f103 0301 	add.w	r3, r3, #1
 8010c3c:	d0f9      	beq.n	8010c32 <__gethex+0x76>
 8010c3e:	f7ff ffa7 	bl	8010b90 <__hexdig_fun>
 8010c42:	2301      	movs	r3, #1
 8010c44:	fab0 f480 	clz	r4, r0
 8010c48:	0964      	lsrs	r4, r4, #5
 8010c4a:	4635      	mov	r5, r6
 8010c4c:	9300      	str	r3, [sp, #0]
 8010c4e:	463a      	mov	r2, r7
 8010c50:	4616      	mov	r6, r2
 8010c52:	3201      	adds	r2, #1
 8010c54:	7830      	ldrb	r0, [r6, #0]
 8010c56:	f7ff ff9b 	bl	8010b90 <__hexdig_fun>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	d1f8      	bne.n	8010c50 <__gethex+0x94>
 8010c5e:	9901      	ldr	r1, [sp, #4]
 8010c60:	4652      	mov	r2, sl
 8010c62:	4630      	mov	r0, r6
 8010c64:	f001 f980 	bl	8011f68 <strncmp>
 8010c68:	b980      	cbnz	r0, 8010c8c <__gethex+0xd0>
 8010c6a:	b94d      	cbnz	r5, 8010c80 <__gethex+0xc4>
 8010c6c:	eb06 050a 	add.w	r5, r6, sl
 8010c70:	462a      	mov	r2, r5
 8010c72:	4616      	mov	r6, r2
 8010c74:	3201      	adds	r2, #1
 8010c76:	7830      	ldrb	r0, [r6, #0]
 8010c78:	f7ff ff8a 	bl	8010b90 <__hexdig_fun>
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	d1f8      	bne.n	8010c72 <__gethex+0xb6>
 8010c80:	1bad      	subs	r5, r5, r6
 8010c82:	00ad      	lsls	r5, r5, #2
 8010c84:	e004      	b.n	8010c90 <__gethex+0xd4>
 8010c86:	2400      	movs	r4, #0
 8010c88:	4625      	mov	r5, r4
 8010c8a:	e7e0      	b.n	8010c4e <__gethex+0x92>
 8010c8c:	2d00      	cmp	r5, #0
 8010c8e:	d1f7      	bne.n	8010c80 <__gethex+0xc4>
 8010c90:	7833      	ldrb	r3, [r6, #0]
 8010c92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010c96:	2b50      	cmp	r3, #80	; 0x50
 8010c98:	d13b      	bne.n	8010d12 <__gethex+0x156>
 8010c9a:	7873      	ldrb	r3, [r6, #1]
 8010c9c:	2b2b      	cmp	r3, #43	; 0x2b
 8010c9e:	d02c      	beq.n	8010cfa <__gethex+0x13e>
 8010ca0:	2b2d      	cmp	r3, #45	; 0x2d
 8010ca2:	d02e      	beq.n	8010d02 <__gethex+0x146>
 8010ca4:	1c71      	adds	r1, r6, #1
 8010ca6:	f04f 0900 	mov.w	r9, #0
 8010caa:	7808      	ldrb	r0, [r1, #0]
 8010cac:	f7ff ff70 	bl	8010b90 <__hexdig_fun>
 8010cb0:	1e43      	subs	r3, r0, #1
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	2b18      	cmp	r3, #24
 8010cb6:	d82c      	bhi.n	8010d12 <__gethex+0x156>
 8010cb8:	f1a0 0210 	sub.w	r2, r0, #16
 8010cbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010cc0:	f7ff ff66 	bl	8010b90 <__hexdig_fun>
 8010cc4:	1e43      	subs	r3, r0, #1
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	2b18      	cmp	r3, #24
 8010cca:	d91d      	bls.n	8010d08 <__gethex+0x14c>
 8010ccc:	f1b9 0f00 	cmp.w	r9, #0
 8010cd0:	d000      	beq.n	8010cd4 <__gethex+0x118>
 8010cd2:	4252      	negs	r2, r2
 8010cd4:	4415      	add	r5, r2
 8010cd6:	f8cb 1000 	str.w	r1, [fp]
 8010cda:	b1e4      	cbz	r4, 8010d16 <__gethex+0x15a>
 8010cdc:	9b00      	ldr	r3, [sp, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	bf14      	ite	ne
 8010ce2:	2700      	movne	r7, #0
 8010ce4:	2706      	moveq	r7, #6
 8010ce6:	4638      	mov	r0, r7
 8010ce8:	b009      	add	sp, #36	; 0x24
 8010cea:	ecbd 8b02 	vpop	{d8}
 8010cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cf2:	463e      	mov	r6, r7
 8010cf4:	4625      	mov	r5, r4
 8010cf6:	2401      	movs	r4, #1
 8010cf8:	e7ca      	b.n	8010c90 <__gethex+0xd4>
 8010cfa:	f04f 0900 	mov.w	r9, #0
 8010cfe:	1cb1      	adds	r1, r6, #2
 8010d00:	e7d3      	b.n	8010caa <__gethex+0xee>
 8010d02:	f04f 0901 	mov.w	r9, #1
 8010d06:	e7fa      	b.n	8010cfe <__gethex+0x142>
 8010d08:	230a      	movs	r3, #10
 8010d0a:	fb03 0202 	mla	r2, r3, r2, r0
 8010d0e:	3a10      	subs	r2, #16
 8010d10:	e7d4      	b.n	8010cbc <__gethex+0x100>
 8010d12:	4631      	mov	r1, r6
 8010d14:	e7df      	b.n	8010cd6 <__gethex+0x11a>
 8010d16:	1bf3      	subs	r3, r6, r7
 8010d18:	3b01      	subs	r3, #1
 8010d1a:	4621      	mov	r1, r4
 8010d1c:	2b07      	cmp	r3, #7
 8010d1e:	dc0b      	bgt.n	8010d38 <__gethex+0x17c>
 8010d20:	ee18 0a10 	vmov	r0, s16
 8010d24:	f000 fa8e 	bl	8011244 <_Balloc>
 8010d28:	4604      	mov	r4, r0
 8010d2a:	b940      	cbnz	r0, 8010d3e <__gethex+0x182>
 8010d2c:	4b65      	ldr	r3, [pc, #404]	; (8010ec4 <__gethex+0x308>)
 8010d2e:	4602      	mov	r2, r0
 8010d30:	21de      	movs	r1, #222	; 0xde
 8010d32:	4865      	ldr	r0, [pc, #404]	; (8010ec8 <__gethex+0x30c>)
 8010d34:	f001 f938 	bl	8011fa8 <__assert_func>
 8010d38:	3101      	adds	r1, #1
 8010d3a:	105b      	asrs	r3, r3, #1
 8010d3c:	e7ee      	b.n	8010d1c <__gethex+0x160>
 8010d3e:	f100 0914 	add.w	r9, r0, #20
 8010d42:	f04f 0b00 	mov.w	fp, #0
 8010d46:	f1ca 0301 	rsb	r3, sl, #1
 8010d4a:	f8cd 9008 	str.w	r9, [sp, #8]
 8010d4e:	f8cd b000 	str.w	fp, [sp]
 8010d52:	9306      	str	r3, [sp, #24]
 8010d54:	42b7      	cmp	r7, r6
 8010d56:	d340      	bcc.n	8010dda <__gethex+0x21e>
 8010d58:	9802      	ldr	r0, [sp, #8]
 8010d5a:	9b00      	ldr	r3, [sp, #0]
 8010d5c:	f840 3b04 	str.w	r3, [r0], #4
 8010d60:	eba0 0009 	sub.w	r0, r0, r9
 8010d64:	1080      	asrs	r0, r0, #2
 8010d66:	0146      	lsls	r6, r0, #5
 8010d68:	6120      	str	r0, [r4, #16]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f000 fb60 	bl	8011430 <__hi0bits>
 8010d70:	1a30      	subs	r0, r6, r0
 8010d72:	f8d8 6000 	ldr.w	r6, [r8]
 8010d76:	42b0      	cmp	r0, r6
 8010d78:	dd63      	ble.n	8010e42 <__gethex+0x286>
 8010d7a:	1b87      	subs	r7, r0, r6
 8010d7c:	4639      	mov	r1, r7
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f000 fefa 	bl	8011b78 <__any_on>
 8010d84:	4682      	mov	sl, r0
 8010d86:	b1a8      	cbz	r0, 8010db4 <__gethex+0x1f8>
 8010d88:	1e7b      	subs	r3, r7, #1
 8010d8a:	1159      	asrs	r1, r3, #5
 8010d8c:	f003 021f 	and.w	r2, r3, #31
 8010d90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010d94:	f04f 0a01 	mov.w	sl, #1
 8010d98:	fa0a f202 	lsl.w	r2, sl, r2
 8010d9c:	420a      	tst	r2, r1
 8010d9e:	d009      	beq.n	8010db4 <__gethex+0x1f8>
 8010da0:	4553      	cmp	r3, sl
 8010da2:	dd05      	ble.n	8010db0 <__gethex+0x1f4>
 8010da4:	1eb9      	subs	r1, r7, #2
 8010da6:	4620      	mov	r0, r4
 8010da8:	f000 fee6 	bl	8011b78 <__any_on>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	d145      	bne.n	8010e3c <__gethex+0x280>
 8010db0:	f04f 0a02 	mov.w	sl, #2
 8010db4:	4639      	mov	r1, r7
 8010db6:	4620      	mov	r0, r4
 8010db8:	f7ff fe98 	bl	8010aec <rshift>
 8010dbc:	443d      	add	r5, r7
 8010dbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010dc2:	42ab      	cmp	r3, r5
 8010dc4:	da4c      	bge.n	8010e60 <__gethex+0x2a4>
 8010dc6:	ee18 0a10 	vmov	r0, s16
 8010dca:	4621      	mov	r1, r4
 8010dcc:	f000 fa7a 	bl	80112c4 <_Bfree>
 8010dd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	6013      	str	r3, [r2, #0]
 8010dd6:	27a3      	movs	r7, #163	; 0xa3
 8010dd8:	e785      	b.n	8010ce6 <__gethex+0x12a>
 8010dda:	1e73      	subs	r3, r6, #1
 8010ddc:	9a05      	ldr	r2, [sp, #20]
 8010dde:	9303      	str	r3, [sp, #12]
 8010de0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d019      	beq.n	8010e1c <__gethex+0x260>
 8010de8:	f1bb 0f20 	cmp.w	fp, #32
 8010dec:	d107      	bne.n	8010dfe <__gethex+0x242>
 8010dee:	9b02      	ldr	r3, [sp, #8]
 8010df0:	9a00      	ldr	r2, [sp, #0]
 8010df2:	f843 2b04 	str.w	r2, [r3], #4
 8010df6:	9302      	str	r3, [sp, #8]
 8010df8:	2300      	movs	r3, #0
 8010dfa:	9300      	str	r3, [sp, #0]
 8010dfc:	469b      	mov	fp, r3
 8010dfe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010e02:	f7ff fec5 	bl	8010b90 <__hexdig_fun>
 8010e06:	9b00      	ldr	r3, [sp, #0]
 8010e08:	f000 000f 	and.w	r0, r0, #15
 8010e0c:	fa00 f00b 	lsl.w	r0, r0, fp
 8010e10:	4303      	orrs	r3, r0
 8010e12:	9300      	str	r3, [sp, #0]
 8010e14:	f10b 0b04 	add.w	fp, fp, #4
 8010e18:	9b03      	ldr	r3, [sp, #12]
 8010e1a:	e00d      	b.n	8010e38 <__gethex+0x27c>
 8010e1c:	9b03      	ldr	r3, [sp, #12]
 8010e1e:	9a06      	ldr	r2, [sp, #24]
 8010e20:	4413      	add	r3, r2
 8010e22:	42bb      	cmp	r3, r7
 8010e24:	d3e0      	bcc.n	8010de8 <__gethex+0x22c>
 8010e26:	4618      	mov	r0, r3
 8010e28:	9901      	ldr	r1, [sp, #4]
 8010e2a:	9307      	str	r3, [sp, #28]
 8010e2c:	4652      	mov	r2, sl
 8010e2e:	f001 f89b 	bl	8011f68 <strncmp>
 8010e32:	9b07      	ldr	r3, [sp, #28]
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d1d7      	bne.n	8010de8 <__gethex+0x22c>
 8010e38:	461e      	mov	r6, r3
 8010e3a:	e78b      	b.n	8010d54 <__gethex+0x198>
 8010e3c:	f04f 0a03 	mov.w	sl, #3
 8010e40:	e7b8      	b.n	8010db4 <__gethex+0x1f8>
 8010e42:	da0a      	bge.n	8010e5a <__gethex+0x29e>
 8010e44:	1a37      	subs	r7, r6, r0
 8010e46:	4621      	mov	r1, r4
 8010e48:	ee18 0a10 	vmov	r0, s16
 8010e4c:	463a      	mov	r2, r7
 8010e4e:	f000 fc55 	bl	80116fc <__lshift>
 8010e52:	1bed      	subs	r5, r5, r7
 8010e54:	4604      	mov	r4, r0
 8010e56:	f100 0914 	add.w	r9, r0, #20
 8010e5a:	f04f 0a00 	mov.w	sl, #0
 8010e5e:	e7ae      	b.n	8010dbe <__gethex+0x202>
 8010e60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010e64:	42a8      	cmp	r0, r5
 8010e66:	dd72      	ble.n	8010f4e <__gethex+0x392>
 8010e68:	1b45      	subs	r5, r0, r5
 8010e6a:	42ae      	cmp	r6, r5
 8010e6c:	dc36      	bgt.n	8010edc <__gethex+0x320>
 8010e6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e72:	2b02      	cmp	r3, #2
 8010e74:	d02a      	beq.n	8010ecc <__gethex+0x310>
 8010e76:	2b03      	cmp	r3, #3
 8010e78:	d02c      	beq.n	8010ed4 <__gethex+0x318>
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d115      	bne.n	8010eaa <__gethex+0x2ee>
 8010e7e:	42ae      	cmp	r6, r5
 8010e80:	d113      	bne.n	8010eaa <__gethex+0x2ee>
 8010e82:	2e01      	cmp	r6, #1
 8010e84:	d10b      	bne.n	8010e9e <__gethex+0x2e2>
 8010e86:	9a04      	ldr	r2, [sp, #16]
 8010e88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e8c:	6013      	str	r3, [r2, #0]
 8010e8e:	2301      	movs	r3, #1
 8010e90:	6123      	str	r3, [r4, #16]
 8010e92:	f8c9 3000 	str.w	r3, [r9]
 8010e96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e98:	2762      	movs	r7, #98	; 0x62
 8010e9a:	601c      	str	r4, [r3, #0]
 8010e9c:	e723      	b.n	8010ce6 <__gethex+0x12a>
 8010e9e:	1e71      	subs	r1, r6, #1
 8010ea0:	4620      	mov	r0, r4
 8010ea2:	f000 fe69 	bl	8011b78 <__any_on>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	d1ed      	bne.n	8010e86 <__gethex+0x2ca>
 8010eaa:	ee18 0a10 	vmov	r0, s16
 8010eae:	4621      	mov	r1, r4
 8010eb0:	f000 fa08 	bl	80112c4 <_Bfree>
 8010eb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	6013      	str	r3, [r2, #0]
 8010eba:	2750      	movs	r7, #80	; 0x50
 8010ebc:	e713      	b.n	8010ce6 <__gethex+0x12a>
 8010ebe:	bf00      	nop
 8010ec0:	08014598 	.word	0x08014598
 8010ec4:	0801451c 	.word	0x0801451c
 8010ec8:	0801452d 	.word	0x0801452d
 8010ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d1eb      	bne.n	8010eaa <__gethex+0x2ee>
 8010ed2:	e7d8      	b.n	8010e86 <__gethex+0x2ca>
 8010ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d1d5      	bne.n	8010e86 <__gethex+0x2ca>
 8010eda:	e7e6      	b.n	8010eaa <__gethex+0x2ee>
 8010edc:	1e6f      	subs	r7, r5, #1
 8010ede:	f1ba 0f00 	cmp.w	sl, #0
 8010ee2:	d131      	bne.n	8010f48 <__gethex+0x38c>
 8010ee4:	b127      	cbz	r7, 8010ef0 <__gethex+0x334>
 8010ee6:	4639      	mov	r1, r7
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f000 fe45 	bl	8011b78 <__any_on>
 8010eee:	4682      	mov	sl, r0
 8010ef0:	117b      	asrs	r3, r7, #5
 8010ef2:	2101      	movs	r1, #1
 8010ef4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010ef8:	f007 071f 	and.w	r7, r7, #31
 8010efc:	fa01 f707 	lsl.w	r7, r1, r7
 8010f00:	421f      	tst	r7, r3
 8010f02:	4629      	mov	r1, r5
 8010f04:	4620      	mov	r0, r4
 8010f06:	bf18      	it	ne
 8010f08:	f04a 0a02 	orrne.w	sl, sl, #2
 8010f0c:	1b76      	subs	r6, r6, r5
 8010f0e:	f7ff fded 	bl	8010aec <rshift>
 8010f12:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010f16:	2702      	movs	r7, #2
 8010f18:	f1ba 0f00 	cmp.w	sl, #0
 8010f1c:	d048      	beq.n	8010fb0 <__gethex+0x3f4>
 8010f1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f22:	2b02      	cmp	r3, #2
 8010f24:	d015      	beq.n	8010f52 <__gethex+0x396>
 8010f26:	2b03      	cmp	r3, #3
 8010f28:	d017      	beq.n	8010f5a <__gethex+0x39e>
 8010f2a:	2b01      	cmp	r3, #1
 8010f2c:	d109      	bne.n	8010f42 <__gethex+0x386>
 8010f2e:	f01a 0f02 	tst.w	sl, #2
 8010f32:	d006      	beq.n	8010f42 <__gethex+0x386>
 8010f34:	f8d9 0000 	ldr.w	r0, [r9]
 8010f38:	ea4a 0a00 	orr.w	sl, sl, r0
 8010f3c:	f01a 0f01 	tst.w	sl, #1
 8010f40:	d10e      	bne.n	8010f60 <__gethex+0x3a4>
 8010f42:	f047 0710 	orr.w	r7, r7, #16
 8010f46:	e033      	b.n	8010fb0 <__gethex+0x3f4>
 8010f48:	f04f 0a01 	mov.w	sl, #1
 8010f4c:	e7d0      	b.n	8010ef0 <__gethex+0x334>
 8010f4e:	2701      	movs	r7, #1
 8010f50:	e7e2      	b.n	8010f18 <__gethex+0x35c>
 8010f52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f54:	f1c3 0301 	rsb	r3, r3, #1
 8010f58:	9315      	str	r3, [sp, #84]	; 0x54
 8010f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d0f0      	beq.n	8010f42 <__gethex+0x386>
 8010f60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010f64:	f104 0314 	add.w	r3, r4, #20
 8010f68:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010f6c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010f70:	f04f 0c00 	mov.w	ip, #0
 8010f74:	4618      	mov	r0, r3
 8010f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010f7e:	d01c      	beq.n	8010fba <__gethex+0x3fe>
 8010f80:	3201      	adds	r2, #1
 8010f82:	6002      	str	r2, [r0, #0]
 8010f84:	2f02      	cmp	r7, #2
 8010f86:	f104 0314 	add.w	r3, r4, #20
 8010f8a:	d13f      	bne.n	801100c <__gethex+0x450>
 8010f8c:	f8d8 2000 	ldr.w	r2, [r8]
 8010f90:	3a01      	subs	r2, #1
 8010f92:	42b2      	cmp	r2, r6
 8010f94:	d10a      	bne.n	8010fac <__gethex+0x3f0>
 8010f96:	1171      	asrs	r1, r6, #5
 8010f98:	2201      	movs	r2, #1
 8010f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f9e:	f006 061f 	and.w	r6, r6, #31
 8010fa2:	fa02 f606 	lsl.w	r6, r2, r6
 8010fa6:	421e      	tst	r6, r3
 8010fa8:	bf18      	it	ne
 8010faa:	4617      	movne	r7, r2
 8010fac:	f047 0720 	orr.w	r7, r7, #32
 8010fb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010fb2:	601c      	str	r4, [r3, #0]
 8010fb4:	9b04      	ldr	r3, [sp, #16]
 8010fb6:	601d      	str	r5, [r3, #0]
 8010fb8:	e695      	b.n	8010ce6 <__gethex+0x12a>
 8010fba:	4299      	cmp	r1, r3
 8010fbc:	f843 cc04 	str.w	ip, [r3, #-4]
 8010fc0:	d8d8      	bhi.n	8010f74 <__gethex+0x3b8>
 8010fc2:	68a3      	ldr	r3, [r4, #8]
 8010fc4:	459b      	cmp	fp, r3
 8010fc6:	db19      	blt.n	8010ffc <__gethex+0x440>
 8010fc8:	6861      	ldr	r1, [r4, #4]
 8010fca:	ee18 0a10 	vmov	r0, s16
 8010fce:	3101      	adds	r1, #1
 8010fd0:	f000 f938 	bl	8011244 <_Balloc>
 8010fd4:	4681      	mov	r9, r0
 8010fd6:	b918      	cbnz	r0, 8010fe0 <__gethex+0x424>
 8010fd8:	4b1a      	ldr	r3, [pc, #104]	; (8011044 <__gethex+0x488>)
 8010fda:	4602      	mov	r2, r0
 8010fdc:	2184      	movs	r1, #132	; 0x84
 8010fde:	e6a8      	b.n	8010d32 <__gethex+0x176>
 8010fe0:	6922      	ldr	r2, [r4, #16]
 8010fe2:	3202      	adds	r2, #2
 8010fe4:	f104 010c 	add.w	r1, r4, #12
 8010fe8:	0092      	lsls	r2, r2, #2
 8010fea:	300c      	adds	r0, #12
 8010fec:	f7fc ffa1 	bl	800df32 <memcpy>
 8010ff0:	4621      	mov	r1, r4
 8010ff2:	ee18 0a10 	vmov	r0, s16
 8010ff6:	f000 f965 	bl	80112c4 <_Bfree>
 8010ffa:	464c      	mov	r4, r9
 8010ffc:	6923      	ldr	r3, [r4, #16]
 8010ffe:	1c5a      	adds	r2, r3, #1
 8011000:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011004:	6122      	str	r2, [r4, #16]
 8011006:	2201      	movs	r2, #1
 8011008:	615a      	str	r2, [r3, #20]
 801100a:	e7bb      	b.n	8010f84 <__gethex+0x3c8>
 801100c:	6922      	ldr	r2, [r4, #16]
 801100e:	455a      	cmp	r2, fp
 8011010:	dd0b      	ble.n	801102a <__gethex+0x46e>
 8011012:	2101      	movs	r1, #1
 8011014:	4620      	mov	r0, r4
 8011016:	f7ff fd69 	bl	8010aec <rshift>
 801101a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801101e:	3501      	adds	r5, #1
 8011020:	42ab      	cmp	r3, r5
 8011022:	f6ff aed0 	blt.w	8010dc6 <__gethex+0x20a>
 8011026:	2701      	movs	r7, #1
 8011028:	e7c0      	b.n	8010fac <__gethex+0x3f0>
 801102a:	f016 061f 	ands.w	r6, r6, #31
 801102e:	d0fa      	beq.n	8011026 <__gethex+0x46a>
 8011030:	449a      	add	sl, r3
 8011032:	f1c6 0620 	rsb	r6, r6, #32
 8011036:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801103a:	f000 f9f9 	bl	8011430 <__hi0bits>
 801103e:	42b0      	cmp	r0, r6
 8011040:	dbe7      	blt.n	8011012 <__gethex+0x456>
 8011042:	e7f0      	b.n	8011026 <__gethex+0x46a>
 8011044:	0801451c 	.word	0x0801451c

08011048 <L_shift>:
 8011048:	f1c2 0208 	rsb	r2, r2, #8
 801104c:	0092      	lsls	r2, r2, #2
 801104e:	b570      	push	{r4, r5, r6, lr}
 8011050:	f1c2 0620 	rsb	r6, r2, #32
 8011054:	6843      	ldr	r3, [r0, #4]
 8011056:	6804      	ldr	r4, [r0, #0]
 8011058:	fa03 f506 	lsl.w	r5, r3, r6
 801105c:	432c      	orrs	r4, r5
 801105e:	40d3      	lsrs	r3, r2
 8011060:	6004      	str	r4, [r0, #0]
 8011062:	f840 3f04 	str.w	r3, [r0, #4]!
 8011066:	4288      	cmp	r0, r1
 8011068:	d3f4      	bcc.n	8011054 <L_shift+0xc>
 801106a:	bd70      	pop	{r4, r5, r6, pc}

0801106c <__match>:
 801106c:	b530      	push	{r4, r5, lr}
 801106e:	6803      	ldr	r3, [r0, #0]
 8011070:	3301      	adds	r3, #1
 8011072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011076:	b914      	cbnz	r4, 801107e <__match+0x12>
 8011078:	6003      	str	r3, [r0, #0]
 801107a:	2001      	movs	r0, #1
 801107c:	bd30      	pop	{r4, r5, pc}
 801107e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011082:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011086:	2d19      	cmp	r5, #25
 8011088:	bf98      	it	ls
 801108a:	3220      	addls	r2, #32
 801108c:	42a2      	cmp	r2, r4
 801108e:	d0f0      	beq.n	8011072 <__match+0x6>
 8011090:	2000      	movs	r0, #0
 8011092:	e7f3      	b.n	801107c <__match+0x10>

08011094 <__hexnan>:
 8011094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011098:	680b      	ldr	r3, [r1, #0]
 801109a:	6801      	ldr	r1, [r0, #0]
 801109c:	115e      	asrs	r6, r3, #5
 801109e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80110a2:	f013 031f 	ands.w	r3, r3, #31
 80110a6:	b087      	sub	sp, #28
 80110a8:	bf18      	it	ne
 80110aa:	3604      	addne	r6, #4
 80110ac:	2500      	movs	r5, #0
 80110ae:	1f37      	subs	r7, r6, #4
 80110b0:	4682      	mov	sl, r0
 80110b2:	4690      	mov	r8, r2
 80110b4:	9301      	str	r3, [sp, #4]
 80110b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80110ba:	46b9      	mov	r9, r7
 80110bc:	463c      	mov	r4, r7
 80110be:	9502      	str	r5, [sp, #8]
 80110c0:	46ab      	mov	fp, r5
 80110c2:	784a      	ldrb	r2, [r1, #1]
 80110c4:	1c4b      	adds	r3, r1, #1
 80110c6:	9303      	str	r3, [sp, #12]
 80110c8:	b342      	cbz	r2, 801111c <__hexnan+0x88>
 80110ca:	4610      	mov	r0, r2
 80110cc:	9105      	str	r1, [sp, #20]
 80110ce:	9204      	str	r2, [sp, #16]
 80110d0:	f7ff fd5e 	bl	8010b90 <__hexdig_fun>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d14f      	bne.n	8011178 <__hexnan+0xe4>
 80110d8:	9a04      	ldr	r2, [sp, #16]
 80110da:	9905      	ldr	r1, [sp, #20]
 80110dc:	2a20      	cmp	r2, #32
 80110de:	d818      	bhi.n	8011112 <__hexnan+0x7e>
 80110e0:	9b02      	ldr	r3, [sp, #8]
 80110e2:	459b      	cmp	fp, r3
 80110e4:	dd13      	ble.n	801110e <__hexnan+0x7a>
 80110e6:	454c      	cmp	r4, r9
 80110e8:	d206      	bcs.n	80110f8 <__hexnan+0x64>
 80110ea:	2d07      	cmp	r5, #7
 80110ec:	dc04      	bgt.n	80110f8 <__hexnan+0x64>
 80110ee:	462a      	mov	r2, r5
 80110f0:	4649      	mov	r1, r9
 80110f2:	4620      	mov	r0, r4
 80110f4:	f7ff ffa8 	bl	8011048 <L_shift>
 80110f8:	4544      	cmp	r4, r8
 80110fa:	d950      	bls.n	801119e <__hexnan+0x10a>
 80110fc:	2300      	movs	r3, #0
 80110fe:	f1a4 0904 	sub.w	r9, r4, #4
 8011102:	f844 3c04 	str.w	r3, [r4, #-4]
 8011106:	f8cd b008 	str.w	fp, [sp, #8]
 801110a:	464c      	mov	r4, r9
 801110c:	461d      	mov	r5, r3
 801110e:	9903      	ldr	r1, [sp, #12]
 8011110:	e7d7      	b.n	80110c2 <__hexnan+0x2e>
 8011112:	2a29      	cmp	r2, #41	; 0x29
 8011114:	d156      	bne.n	80111c4 <__hexnan+0x130>
 8011116:	3102      	adds	r1, #2
 8011118:	f8ca 1000 	str.w	r1, [sl]
 801111c:	f1bb 0f00 	cmp.w	fp, #0
 8011120:	d050      	beq.n	80111c4 <__hexnan+0x130>
 8011122:	454c      	cmp	r4, r9
 8011124:	d206      	bcs.n	8011134 <__hexnan+0xa0>
 8011126:	2d07      	cmp	r5, #7
 8011128:	dc04      	bgt.n	8011134 <__hexnan+0xa0>
 801112a:	462a      	mov	r2, r5
 801112c:	4649      	mov	r1, r9
 801112e:	4620      	mov	r0, r4
 8011130:	f7ff ff8a 	bl	8011048 <L_shift>
 8011134:	4544      	cmp	r4, r8
 8011136:	d934      	bls.n	80111a2 <__hexnan+0x10e>
 8011138:	f1a8 0204 	sub.w	r2, r8, #4
 801113c:	4623      	mov	r3, r4
 801113e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011142:	f842 1f04 	str.w	r1, [r2, #4]!
 8011146:	429f      	cmp	r7, r3
 8011148:	d2f9      	bcs.n	801113e <__hexnan+0xaa>
 801114a:	1b3b      	subs	r3, r7, r4
 801114c:	f023 0303 	bic.w	r3, r3, #3
 8011150:	3304      	adds	r3, #4
 8011152:	3401      	adds	r4, #1
 8011154:	3e03      	subs	r6, #3
 8011156:	42b4      	cmp	r4, r6
 8011158:	bf88      	it	hi
 801115a:	2304      	movhi	r3, #4
 801115c:	4443      	add	r3, r8
 801115e:	2200      	movs	r2, #0
 8011160:	f843 2b04 	str.w	r2, [r3], #4
 8011164:	429f      	cmp	r7, r3
 8011166:	d2fb      	bcs.n	8011160 <__hexnan+0xcc>
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	b91b      	cbnz	r3, 8011174 <__hexnan+0xe0>
 801116c:	4547      	cmp	r7, r8
 801116e:	d127      	bne.n	80111c0 <__hexnan+0x12c>
 8011170:	2301      	movs	r3, #1
 8011172:	603b      	str	r3, [r7, #0]
 8011174:	2005      	movs	r0, #5
 8011176:	e026      	b.n	80111c6 <__hexnan+0x132>
 8011178:	3501      	adds	r5, #1
 801117a:	2d08      	cmp	r5, #8
 801117c:	f10b 0b01 	add.w	fp, fp, #1
 8011180:	dd06      	ble.n	8011190 <__hexnan+0xfc>
 8011182:	4544      	cmp	r4, r8
 8011184:	d9c3      	bls.n	801110e <__hexnan+0x7a>
 8011186:	2300      	movs	r3, #0
 8011188:	f844 3c04 	str.w	r3, [r4, #-4]
 801118c:	2501      	movs	r5, #1
 801118e:	3c04      	subs	r4, #4
 8011190:	6822      	ldr	r2, [r4, #0]
 8011192:	f000 000f 	and.w	r0, r0, #15
 8011196:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801119a:	6022      	str	r2, [r4, #0]
 801119c:	e7b7      	b.n	801110e <__hexnan+0x7a>
 801119e:	2508      	movs	r5, #8
 80111a0:	e7b5      	b.n	801110e <__hexnan+0x7a>
 80111a2:	9b01      	ldr	r3, [sp, #4]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d0df      	beq.n	8011168 <__hexnan+0xd4>
 80111a8:	f04f 32ff 	mov.w	r2, #4294967295
 80111ac:	f1c3 0320 	rsb	r3, r3, #32
 80111b0:	fa22 f303 	lsr.w	r3, r2, r3
 80111b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80111b8:	401a      	ands	r2, r3
 80111ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80111be:	e7d3      	b.n	8011168 <__hexnan+0xd4>
 80111c0:	3f04      	subs	r7, #4
 80111c2:	e7d1      	b.n	8011168 <__hexnan+0xd4>
 80111c4:	2004      	movs	r0, #4
 80111c6:	b007      	add	sp, #28
 80111c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080111cc <_localeconv_r>:
 80111cc:	4800      	ldr	r0, [pc, #0]	; (80111d0 <_localeconv_r+0x4>)
 80111ce:	4770      	bx	lr
 80111d0:	200001a0 	.word	0x200001a0

080111d4 <_lseek_r>:
 80111d4:	b538      	push	{r3, r4, r5, lr}
 80111d6:	4d07      	ldr	r5, [pc, #28]	; (80111f4 <_lseek_r+0x20>)
 80111d8:	4604      	mov	r4, r0
 80111da:	4608      	mov	r0, r1
 80111dc:	4611      	mov	r1, r2
 80111de:	2200      	movs	r2, #0
 80111e0:	602a      	str	r2, [r5, #0]
 80111e2:	461a      	mov	r2, r3
 80111e4:	f7f3 fd08 	bl	8004bf8 <_lseek>
 80111e8:	1c43      	adds	r3, r0, #1
 80111ea:	d102      	bne.n	80111f2 <_lseek_r+0x1e>
 80111ec:	682b      	ldr	r3, [r5, #0]
 80111ee:	b103      	cbz	r3, 80111f2 <_lseek_r+0x1e>
 80111f0:	6023      	str	r3, [r4, #0]
 80111f2:	bd38      	pop	{r3, r4, r5, pc}
 80111f4:	200063e4 	.word	0x200063e4

080111f8 <malloc>:
 80111f8:	4b02      	ldr	r3, [pc, #8]	; (8011204 <malloc+0xc>)
 80111fa:	4601      	mov	r1, r0
 80111fc:	6818      	ldr	r0, [r3, #0]
 80111fe:	f7fc beaf 	b.w	800df60 <_malloc_r>
 8011202:	bf00      	nop
 8011204:	20000048 	.word	0x20000048

08011208 <__ascii_mbtowc>:
 8011208:	b082      	sub	sp, #8
 801120a:	b901      	cbnz	r1, 801120e <__ascii_mbtowc+0x6>
 801120c:	a901      	add	r1, sp, #4
 801120e:	b142      	cbz	r2, 8011222 <__ascii_mbtowc+0x1a>
 8011210:	b14b      	cbz	r3, 8011226 <__ascii_mbtowc+0x1e>
 8011212:	7813      	ldrb	r3, [r2, #0]
 8011214:	600b      	str	r3, [r1, #0]
 8011216:	7812      	ldrb	r2, [r2, #0]
 8011218:	1e10      	subs	r0, r2, #0
 801121a:	bf18      	it	ne
 801121c:	2001      	movne	r0, #1
 801121e:	b002      	add	sp, #8
 8011220:	4770      	bx	lr
 8011222:	4610      	mov	r0, r2
 8011224:	e7fb      	b.n	801121e <__ascii_mbtowc+0x16>
 8011226:	f06f 0001 	mvn.w	r0, #1
 801122a:	e7f8      	b.n	801121e <__ascii_mbtowc+0x16>

0801122c <__malloc_lock>:
 801122c:	4801      	ldr	r0, [pc, #4]	; (8011234 <__malloc_lock+0x8>)
 801122e:	f7fc be7e 	b.w	800df2e <__retarget_lock_acquire_recursive>
 8011232:	bf00      	nop
 8011234:	200063dc 	.word	0x200063dc

08011238 <__malloc_unlock>:
 8011238:	4801      	ldr	r0, [pc, #4]	; (8011240 <__malloc_unlock+0x8>)
 801123a:	f7fc be79 	b.w	800df30 <__retarget_lock_release_recursive>
 801123e:	bf00      	nop
 8011240:	200063dc 	.word	0x200063dc

08011244 <_Balloc>:
 8011244:	b570      	push	{r4, r5, r6, lr}
 8011246:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011248:	4604      	mov	r4, r0
 801124a:	460d      	mov	r5, r1
 801124c:	b976      	cbnz	r6, 801126c <_Balloc+0x28>
 801124e:	2010      	movs	r0, #16
 8011250:	f7ff ffd2 	bl	80111f8 <malloc>
 8011254:	4602      	mov	r2, r0
 8011256:	6260      	str	r0, [r4, #36]	; 0x24
 8011258:	b920      	cbnz	r0, 8011264 <_Balloc+0x20>
 801125a:	4b18      	ldr	r3, [pc, #96]	; (80112bc <_Balloc+0x78>)
 801125c:	4818      	ldr	r0, [pc, #96]	; (80112c0 <_Balloc+0x7c>)
 801125e:	2166      	movs	r1, #102	; 0x66
 8011260:	f000 fea2 	bl	8011fa8 <__assert_func>
 8011264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011268:	6006      	str	r6, [r0, #0]
 801126a:	60c6      	str	r6, [r0, #12]
 801126c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801126e:	68f3      	ldr	r3, [r6, #12]
 8011270:	b183      	cbz	r3, 8011294 <_Balloc+0x50>
 8011272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801127a:	b9b8      	cbnz	r0, 80112ac <_Balloc+0x68>
 801127c:	2101      	movs	r1, #1
 801127e:	fa01 f605 	lsl.w	r6, r1, r5
 8011282:	1d72      	adds	r2, r6, #5
 8011284:	0092      	lsls	r2, r2, #2
 8011286:	4620      	mov	r0, r4
 8011288:	f000 fc97 	bl	8011bba <_calloc_r>
 801128c:	b160      	cbz	r0, 80112a8 <_Balloc+0x64>
 801128e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011292:	e00e      	b.n	80112b2 <_Balloc+0x6e>
 8011294:	2221      	movs	r2, #33	; 0x21
 8011296:	2104      	movs	r1, #4
 8011298:	4620      	mov	r0, r4
 801129a:	f000 fc8e 	bl	8011bba <_calloc_r>
 801129e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112a0:	60f0      	str	r0, [r6, #12]
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d1e4      	bne.n	8011272 <_Balloc+0x2e>
 80112a8:	2000      	movs	r0, #0
 80112aa:	bd70      	pop	{r4, r5, r6, pc}
 80112ac:	6802      	ldr	r2, [r0, #0]
 80112ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112b2:	2300      	movs	r3, #0
 80112b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80112b8:	e7f7      	b.n	80112aa <_Balloc+0x66>
 80112ba:	bf00      	nop
 80112bc:	080144a6 	.word	0x080144a6
 80112c0:	080145ac 	.word	0x080145ac

080112c4 <_Bfree>:
 80112c4:	b570      	push	{r4, r5, r6, lr}
 80112c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80112c8:	4605      	mov	r5, r0
 80112ca:	460c      	mov	r4, r1
 80112cc:	b976      	cbnz	r6, 80112ec <_Bfree+0x28>
 80112ce:	2010      	movs	r0, #16
 80112d0:	f7ff ff92 	bl	80111f8 <malloc>
 80112d4:	4602      	mov	r2, r0
 80112d6:	6268      	str	r0, [r5, #36]	; 0x24
 80112d8:	b920      	cbnz	r0, 80112e4 <_Bfree+0x20>
 80112da:	4b09      	ldr	r3, [pc, #36]	; (8011300 <_Bfree+0x3c>)
 80112dc:	4809      	ldr	r0, [pc, #36]	; (8011304 <_Bfree+0x40>)
 80112de:	218a      	movs	r1, #138	; 0x8a
 80112e0:	f000 fe62 	bl	8011fa8 <__assert_func>
 80112e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112e8:	6006      	str	r6, [r0, #0]
 80112ea:	60c6      	str	r6, [r0, #12]
 80112ec:	b13c      	cbz	r4, 80112fe <_Bfree+0x3a>
 80112ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80112f0:	6862      	ldr	r2, [r4, #4]
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112f8:	6021      	str	r1, [r4, #0]
 80112fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80112fe:	bd70      	pop	{r4, r5, r6, pc}
 8011300:	080144a6 	.word	0x080144a6
 8011304:	080145ac 	.word	0x080145ac

08011308 <__multadd>:
 8011308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801130c:	690e      	ldr	r6, [r1, #16]
 801130e:	4607      	mov	r7, r0
 8011310:	4698      	mov	r8, r3
 8011312:	460c      	mov	r4, r1
 8011314:	f101 0014 	add.w	r0, r1, #20
 8011318:	2300      	movs	r3, #0
 801131a:	6805      	ldr	r5, [r0, #0]
 801131c:	b2a9      	uxth	r1, r5
 801131e:	fb02 8101 	mla	r1, r2, r1, r8
 8011322:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011326:	0c2d      	lsrs	r5, r5, #16
 8011328:	fb02 c505 	mla	r5, r2, r5, ip
 801132c:	b289      	uxth	r1, r1
 801132e:	3301      	adds	r3, #1
 8011330:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011334:	429e      	cmp	r6, r3
 8011336:	f840 1b04 	str.w	r1, [r0], #4
 801133a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801133e:	dcec      	bgt.n	801131a <__multadd+0x12>
 8011340:	f1b8 0f00 	cmp.w	r8, #0
 8011344:	d022      	beq.n	801138c <__multadd+0x84>
 8011346:	68a3      	ldr	r3, [r4, #8]
 8011348:	42b3      	cmp	r3, r6
 801134a:	dc19      	bgt.n	8011380 <__multadd+0x78>
 801134c:	6861      	ldr	r1, [r4, #4]
 801134e:	4638      	mov	r0, r7
 8011350:	3101      	adds	r1, #1
 8011352:	f7ff ff77 	bl	8011244 <_Balloc>
 8011356:	4605      	mov	r5, r0
 8011358:	b928      	cbnz	r0, 8011366 <__multadd+0x5e>
 801135a:	4602      	mov	r2, r0
 801135c:	4b0d      	ldr	r3, [pc, #52]	; (8011394 <__multadd+0x8c>)
 801135e:	480e      	ldr	r0, [pc, #56]	; (8011398 <__multadd+0x90>)
 8011360:	21b5      	movs	r1, #181	; 0xb5
 8011362:	f000 fe21 	bl	8011fa8 <__assert_func>
 8011366:	6922      	ldr	r2, [r4, #16]
 8011368:	3202      	adds	r2, #2
 801136a:	f104 010c 	add.w	r1, r4, #12
 801136e:	0092      	lsls	r2, r2, #2
 8011370:	300c      	adds	r0, #12
 8011372:	f7fc fdde 	bl	800df32 <memcpy>
 8011376:	4621      	mov	r1, r4
 8011378:	4638      	mov	r0, r7
 801137a:	f7ff ffa3 	bl	80112c4 <_Bfree>
 801137e:	462c      	mov	r4, r5
 8011380:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011384:	3601      	adds	r6, #1
 8011386:	f8c3 8014 	str.w	r8, [r3, #20]
 801138a:	6126      	str	r6, [r4, #16]
 801138c:	4620      	mov	r0, r4
 801138e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011392:	bf00      	nop
 8011394:	0801451c 	.word	0x0801451c
 8011398:	080145ac 	.word	0x080145ac

0801139c <__s2b>:
 801139c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113a0:	460c      	mov	r4, r1
 80113a2:	4615      	mov	r5, r2
 80113a4:	461f      	mov	r7, r3
 80113a6:	2209      	movs	r2, #9
 80113a8:	3308      	adds	r3, #8
 80113aa:	4606      	mov	r6, r0
 80113ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80113b0:	2100      	movs	r1, #0
 80113b2:	2201      	movs	r2, #1
 80113b4:	429a      	cmp	r2, r3
 80113b6:	db09      	blt.n	80113cc <__s2b+0x30>
 80113b8:	4630      	mov	r0, r6
 80113ba:	f7ff ff43 	bl	8011244 <_Balloc>
 80113be:	b940      	cbnz	r0, 80113d2 <__s2b+0x36>
 80113c0:	4602      	mov	r2, r0
 80113c2:	4b19      	ldr	r3, [pc, #100]	; (8011428 <__s2b+0x8c>)
 80113c4:	4819      	ldr	r0, [pc, #100]	; (801142c <__s2b+0x90>)
 80113c6:	21ce      	movs	r1, #206	; 0xce
 80113c8:	f000 fdee 	bl	8011fa8 <__assert_func>
 80113cc:	0052      	lsls	r2, r2, #1
 80113ce:	3101      	adds	r1, #1
 80113d0:	e7f0      	b.n	80113b4 <__s2b+0x18>
 80113d2:	9b08      	ldr	r3, [sp, #32]
 80113d4:	6143      	str	r3, [r0, #20]
 80113d6:	2d09      	cmp	r5, #9
 80113d8:	f04f 0301 	mov.w	r3, #1
 80113dc:	6103      	str	r3, [r0, #16]
 80113de:	dd16      	ble.n	801140e <__s2b+0x72>
 80113e0:	f104 0909 	add.w	r9, r4, #9
 80113e4:	46c8      	mov	r8, r9
 80113e6:	442c      	add	r4, r5
 80113e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80113ec:	4601      	mov	r1, r0
 80113ee:	3b30      	subs	r3, #48	; 0x30
 80113f0:	220a      	movs	r2, #10
 80113f2:	4630      	mov	r0, r6
 80113f4:	f7ff ff88 	bl	8011308 <__multadd>
 80113f8:	45a0      	cmp	r8, r4
 80113fa:	d1f5      	bne.n	80113e8 <__s2b+0x4c>
 80113fc:	f1a5 0408 	sub.w	r4, r5, #8
 8011400:	444c      	add	r4, r9
 8011402:	1b2d      	subs	r5, r5, r4
 8011404:	1963      	adds	r3, r4, r5
 8011406:	42bb      	cmp	r3, r7
 8011408:	db04      	blt.n	8011414 <__s2b+0x78>
 801140a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801140e:	340a      	adds	r4, #10
 8011410:	2509      	movs	r5, #9
 8011412:	e7f6      	b.n	8011402 <__s2b+0x66>
 8011414:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011418:	4601      	mov	r1, r0
 801141a:	3b30      	subs	r3, #48	; 0x30
 801141c:	220a      	movs	r2, #10
 801141e:	4630      	mov	r0, r6
 8011420:	f7ff ff72 	bl	8011308 <__multadd>
 8011424:	e7ee      	b.n	8011404 <__s2b+0x68>
 8011426:	bf00      	nop
 8011428:	0801451c 	.word	0x0801451c
 801142c:	080145ac 	.word	0x080145ac

08011430 <__hi0bits>:
 8011430:	0c03      	lsrs	r3, r0, #16
 8011432:	041b      	lsls	r3, r3, #16
 8011434:	b9d3      	cbnz	r3, 801146c <__hi0bits+0x3c>
 8011436:	0400      	lsls	r0, r0, #16
 8011438:	2310      	movs	r3, #16
 801143a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801143e:	bf04      	itt	eq
 8011440:	0200      	lsleq	r0, r0, #8
 8011442:	3308      	addeq	r3, #8
 8011444:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011448:	bf04      	itt	eq
 801144a:	0100      	lsleq	r0, r0, #4
 801144c:	3304      	addeq	r3, #4
 801144e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011452:	bf04      	itt	eq
 8011454:	0080      	lsleq	r0, r0, #2
 8011456:	3302      	addeq	r3, #2
 8011458:	2800      	cmp	r0, #0
 801145a:	db05      	blt.n	8011468 <__hi0bits+0x38>
 801145c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011460:	f103 0301 	add.w	r3, r3, #1
 8011464:	bf08      	it	eq
 8011466:	2320      	moveq	r3, #32
 8011468:	4618      	mov	r0, r3
 801146a:	4770      	bx	lr
 801146c:	2300      	movs	r3, #0
 801146e:	e7e4      	b.n	801143a <__hi0bits+0xa>

08011470 <__lo0bits>:
 8011470:	6803      	ldr	r3, [r0, #0]
 8011472:	f013 0207 	ands.w	r2, r3, #7
 8011476:	4601      	mov	r1, r0
 8011478:	d00b      	beq.n	8011492 <__lo0bits+0x22>
 801147a:	07da      	lsls	r2, r3, #31
 801147c:	d424      	bmi.n	80114c8 <__lo0bits+0x58>
 801147e:	0798      	lsls	r0, r3, #30
 8011480:	bf49      	itett	mi
 8011482:	085b      	lsrmi	r3, r3, #1
 8011484:	089b      	lsrpl	r3, r3, #2
 8011486:	2001      	movmi	r0, #1
 8011488:	600b      	strmi	r3, [r1, #0]
 801148a:	bf5c      	itt	pl
 801148c:	600b      	strpl	r3, [r1, #0]
 801148e:	2002      	movpl	r0, #2
 8011490:	4770      	bx	lr
 8011492:	b298      	uxth	r0, r3
 8011494:	b9b0      	cbnz	r0, 80114c4 <__lo0bits+0x54>
 8011496:	0c1b      	lsrs	r3, r3, #16
 8011498:	2010      	movs	r0, #16
 801149a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801149e:	bf04      	itt	eq
 80114a0:	0a1b      	lsreq	r3, r3, #8
 80114a2:	3008      	addeq	r0, #8
 80114a4:	071a      	lsls	r2, r3, #28
 80114a6:	bf04      	itt	eq
 80114a8:	091b      	lsreq	r3, r3, #4
 80114aa:	3004      	addeq	r0, #4
 80114ac:	079a      	lsls	r2, r3, #30
 80114ae:	bf04      	itt	eq
 80114b0:	089b      	lsreq	r3, r3, #2
 80114b2:	3002      	addeq	r0, #2
 80114b4:	07da      	lsls	r2, r3, #31
 80114b6:	d403      	bmi.n	80114c0 <__lo0bits+0x50>
 80114b8:	085b      	lsrs	r3, r3, #1
 80114ba:	f100 0001 	add.w	r0, r0, #1
 80114be:	d005      	beq.n	80114cc <__lo0bits+0x5c>
 80114c0:	600b      	str	r3, [r1, #0]
 80114c2:	4770      	bx	lr
 80114c4:	4610      	mov	r0, r2
 80114c6:	e7e8      	b.n	801149a <__lo0bits+0x2a>
 80114c8:	2000      	movs	r0, #0
 80114ca:	4770      	bx	lr
 80114cc:	2020      	movs	r0, #32
 80114ce:	4770      	bx	lr

080114d0 <__i2b>:
 80114d0:	b510      	push	{r4, lr}
 80114d2:	460c      	mov	r4, r1
 80114d4:	2101      	movs	r1, #1
 80114d6:	f7ff feb5 	bl	8011244 <_Balloc>
 80114da:	4602      	mov	r2, r0
 80114dc:	b928      	cbnz	r0, 80114ea <__i2b+0x1a>
 80114de:	4b05      	ldr	r3, [pc, #20]	; (80114f4 <__i2b+0x24>)
 80114e0:	4805      	ldr	r0, [pc, #20]	; (80114f8 <__i2b+0x28>)
 80114e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80114e6:	f000 fd5f 	bl	8011fa8 <__assert_func>
 80114ea:	2301      	movs	r3, #1
 80114ec:	6144      	str	r4, [r0, #20]
 80114ee:	6103      	str	r3, [r0, #16]
 80114f0:	bd10      	pop	{r4, pc}
 80114f2:	bf00      	nop
 80114f4:	0801451c 	.word	0x0801451c
 80114f8:	080145ac 	.word	0x080145ac

080114fc <__multiply>:
 80114fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011500:	4614      	mov	r4, r2
 8011502:	690a      	ldr	r2, [r1, #16]
 8011504:	6923      	ldr	r3, [r4, #16]
 8011506:	429a      	cmp	r2, r3
 8011508:	bfb8      	it	lt
 801150a:	460b      	movlt	r3, r1
 801150c:	460d      	mov	r5, r1
 801150e:	bfbc      	itt	lt
 8011510:	4625      	movlt	r5, r4
 8011512:	461c      	movlt	r4, r3
 8011514:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011518:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801151c:	68ab      	ldr	r3, [r5, #8]
 801151e:	6869      	ldr	r1, [r5, #4]
 8011520:	eb0a 0709 	add.w	r7, sl, r9
 8011524:	42bb      	cmp	r3, r7
 8011526:	b085      	sub	sp, #20
 8011528:	bfb8      	it	lt
 801152a:	3101      	addlt	r1, #1
 801152c:	f7ff fe8a 	bl	8011244 <_Balloc>
 8011530:	b930      	cbnz	r0, 8011540 <__multiply+0x44>
 8011532:	4602      	mov	r2, r0
 8011534:	4b42      	ldr	r3, [pc, #264]	; (8011640 <__multiply+0x144>)
 8011536:	4843      	ldr	r0, [pc, #268]	; (8011644 <__multiply+0x148>)
 8011538:	f240 115d 	movw	r1, #349	; 0x15d
 801153c:	f000 fd34 	bl	8011fa8 <__assert_func>
 8011540:	f100 0614 	add.w	r6, r0, #20
 8011544:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011548:	4633      	mov	r3, r6
 801154a:	2200      	movs	r2, #0
 801154c:	4543      	cmp	r3, r8
 801154e:	d31e      	bcc.n	801158e <__multiply+0x92>
 8011550:	f105 0c14 	add.w	ip, r5, #20
 8011554:	f104 0314 	add.w	r3, r4, #20
 8011558:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801155c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011560:	9202      	str	r2, [sp, #8]
 8011562:	ebac 0205 	sub.w	r2, ip, r5
 8011566:	3a15      	subs	r2, #21
 8011568:	f022 0203 	bic.w	r2, r2, #3
 801156c:	3204      	adds	r2, #4
 801156e:	f105 0115 	add.w	r1, r5, #21
 8011572:	458c      	cmp	ip, r1
 8011574:	bf38      	it	cc
 8011576:	2204      	movcc	r2, #4
 8011578:	9201      	str	r2, [sp, #4]
 801157a:	9a02      	ldr	r2, [sp, #8]
 801157c:	9303      	str	r3, [sp, #12]
 801157e:	429a      	cmp	r2, r3
 8011580:	d808      	bhi.n	8011594 <__multiply+0x98>
 8011582:	2f00      	cmp	r7, #0
 8011584:	dc55      	bgt.n	8011632 <__multiply+0x136>
 8011586:	6107      	str	r7, [r0, #16]
 8011588:	b005      	add	sp, #20
 801158a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801158e:	f843 2b04 	str.w	r2, [r3], #4
 8011592:	e7db      	b.n	801154c <__multiply+0x50>
 8011594:	f8b3 a000 	ldrh.w	sl, [r3]
 8011598:	f1ba 0f00 	cmp.w	sl, #0
 801159c:	d020      	beq.n	80115e0 <__multiply+0xe4>
 801159e:	f105 0e14 	add.w	lr, r5, #20
 80115a2:	46b1      	mov	r9, r6
 80115a4:	2200      	movs	r2, #0
 80115a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80115aa:	f8d9 b000 	ldr.w	fp, [r9]
 80115ae:	b2a1      	uxth	r1, r4
 80115b0:	fa1f fb8b 	uxth.w	fp, fp
 80115b4:	fb0a b101 	mla	r1, sl, r1, fp
 80115b8:	4411      	add	r1, r2
 80115ba:	f8d9 2000 	ldr.w	r2, [r9]
 80115be:	0c24      	lsrs	r4, r4, #16
 80115c0:	0c12      	lsrs	r2, r2, #16
 80115c2:	fb0a 2404 	mla	r4, sl, r4, r2
 80115c6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80115ca:	b289      	uxth	r1, r1
 80115cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80115d0:	45f4      	cmp	ip, lr
 80115d2:	f849 1b04 	str.w	r1, [r9], #4
 80115d6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80115da:	d8e4      	bhi.n	80115a6 <__multiply+0xaa>
 80115dc:	9901      	ldr	r1, [sp, #4]
 80115de:	5072      	str	r2, [r6, r1]
 80115e0:	9a03      	ldr	r2, [sp, #12]
 80115e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80115e6:	3304      	adds	r3, #4
 80115e8:	f1b9 0f00 	cmp.w	r9, #0
 80115ec:	d01f      	beq.n	801162e <__multiply+0x132>
 80115ee:	6834      	ldr	r4, [r6, #0]
 80115f0:	f105 0114 	add.w	r1, r5, #20
 80115f4:	46b6      	mov	lr, r6
 80115f6:	f04f 0a00 	mov.w	sl, #0
 80115fa:	880a      	ldrh	r2, [r1, #0]
 80115fc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011600:	fb09 b202 	mla	r2, r9, r2, fp
 8011604:	4492      	add	sl, r2
 8011606:	b2a4      	uxth	r4, r4
 8011608:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801160c:	f84e 4b04 	str.w	r4, [lr], #4
 8011610:	f851 4b04 	ldr.w	r4, [r1], #4
 8011614:	f8be 2000 	ldrh.w	r2, [lr]
 8011618:	0c24      	lsrs	r4, r4, #16
 801161a:	fb09 2404 	mla	r4, r9, r4, r2
 801161e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011622:	458c      	cmp	ip, r1
 8011624:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011628:	d8e7      	bhi.n	80115fa <__multiply+0xfe>
 801162a:	9a01      	ldr	r2, [sp, #4]
 801162c:	50b4      	str	r4, [r6, r2]
 801162e:	3604      	adds	r6, #4
 8011630:	e7a3      	b.n	801157a <__multiply+0x7e>
 8011632:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011636:	2b00      	cmp	r3, #0
 8011638:	d1a5      	bne.n	8011586 <__multiply+0x8a>
 801163a:	3f01      	subs	r7, #1
 801163c:	e7a1      	b.n	8011582 <__multiply+0x86>
 801163e:	bf00      	nop
 8011640:	0801451c 	.word	0x0801451c
 8011644:	080145ac 	.word	0x080145ac

08011648 <__pow5mult>:
 8011648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801164c:	4615      	mov	r5, r2
 801164e:	f012 0203 	ands.w	r2, r2, #3
 8011652:	4606      	mov	r6, r0
 8011654:	460f      	mov	r7, r1
 8011656:	d007      	beq.n	8011668 <__pow5mult+0x20>
 8011658:	4c25      	ldr	r4, [pc, #148]	; (80116f0 <__pow5mult+0xa8>)
 801165a:	3a01      	subs	r2, #1
 801165c:	2300      	movs	r3, #0
 801165e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011662:	f7ff fe51 	bl	8011308 <__multadd>
 8011666:	4607      	mov	r7, r0
 8011668:	10ad      	asrs	r5, r5, #2
 801166a:	d03d      	beq.n	80116e8 <__pow5mult+0xa0>
 801166c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801166e:	b97c      	cbnz	r4, 8011690 <__pow5mult+0x48>
 8011670:	2010      	movs	r0, #16
 8011672:	f7ff fdc1 	bl	80111f8 <malloc>
 8011676:	4602      	mov	r2, r0
 8011678:	6270      	str	r0, [r6, #36]	; 0x24
 801167a:	b928      	cbnz	r0, 8011688 <__pow5mult+0x40>
 801167c:	4b1d      	ldr	r3, [pc, #116]	; (80116f4 <__pow5mult+0xac>)
 801167e:	481e      	ldr	r0, [pc, #120]	; (80116f8 <__pow5mult+0xb0>)
 8011680:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011684:	f000 fc90 	bl	8011fa8 <__assert_func>
 8011688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801168c:	6004      	str	r4, [r0, #0]
 801168e:	60c4      	str	r4, [r0, #12]
 8011690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011698:	b94c      	cbnz	r4, 80116ae <__pow5mult+0x66>
 801169a:	f240 2171 	movw	r1, #625	; 0x271
 801169e:	4630      	mov	r0, r6
 80116a0:	f7ff ff16 	bl	80114d0 <__i2b>
 80116a4:	2300      	movs	r3, #0
 80116a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80116aa:	4604      	mov	r4, r0
 80116ac:	6003      	str	r3, [r0, #0]
 80116ae:	f04f 0900 	mov.w	r9, #0
 80116b2:	07eb      	lsls	r3, r5, #31
 80116b4:	d50a      	bpl.n	80116cc <__pow5mult+0x84>
 80116b6:	4639      	mov	r1, r7
 80116b8:	4622      	mov	r2, r4
 80116ba:	4630      	mov	r0, r6
 80116bc:	f7ff ff1e 	bl	80114fc <__multiply>
 80116c0:	4639      	mov	r1, r7
 80116c2:	4680      	mov	r8, r0
 80116c4:	4630      	mov	r0, r6
 80116c6:	f7ff fdfd 	bl	80112c4 <_Bfree>
 80116ca:	4647      	mov	r7, r8
 80116cc:	106d      	asrs	r5, r5, #1
 80116ce:	d00b      	beq.n	80116e8 <__pow5mult+0xa0>
 80116d0:	6820      	ldr	r0, [r4, #0]
 80116d2:	b938      	cbnz	r0, 80116e4 <__pow5mult+0x9c>
 80116d4:	4622      	mov	r2, r4
 80116d6:	4621      	mov	r1, r4
 80116d8:	4630      	mov	r0, r6
 80116da:	f7ff ff0f 	bl	80114fc <__multiply>
 80116de:	6020      	str	r0, [r4, #0]
 80116e0:	f8c0 9000 	str.w	r9, [r0]
 80116e4:	4604      	mov	r4, r0
 80116e6:	e7e4      	b.n	80116b2 <__pow5mult+0x6a>
 80116e8:	4638      	mov	r0, r7
 80116ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ee:	bf00      	nop
 80116f0:	08014700 	.word	0x08014700
 80116f4:	080144a6 	.word	0x080144a6
 80116f8:	080145ac 	.word	0x080145ac

080116fc <__lshift>:
 80116fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011700:	460c      	mov	r4, r1
 8011702:	6849      	ldr	r1, [r1, #4]
 8011704:	6923      	ldr	r3, [r4, #16]
 8011706:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801170a:	68a3      	ldr	r3, [r4, #8]
 801170c:	4607      	mov	r7, r0
 801170e:	4691      	mov	r9, r2
 8011710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011714:	f108 0601 	add.w	r6, r8, #1
 8011718:	42b3      	cmp	r3, r6
 801171a:	db0b      	blt.n	8011734 <__lshift+0x38>
 801171c:	4638      	mov	r0, r7
 801171e:	f7ff fd91 	bl	8011244 <_Balloc>
 8011722:	4605      	mov	r5, r0
 8011724:	b948      	cbnz	r0, 801173a <__lshift+0x3e>
 8011726:	4602      	mov	r2, r0
 8011728:	4b28      	ldr	r3, [pc, #160]	; (80117cc <__lshift+0xd0>)
 801172a:	4829      	ldr	r0, [pc, #164]	; (80117d0 <__lshift+0xd4>)
 801172c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011730:	f000 fc3a 	bl	8011fa8 <__assert_func>
 8011734:	3101      	adds	r1, #1
 8011736:	005b      	lsls	r3, r3, #1
 8011738:	e7ee      	b.n	8011718 <__lshift+0x1c>
 801173a:	2300      	movs	r3, #0
 801173c:	f100 0114 	add.w	r1, r0, #20
 8011740:	f100 0210 	add.w	r2, r0, #16
 8011744:	4618      	mov	r0, r3
 8011746:	4553      	cmp	r3, sl
 8011748:	db33      	blt.n	80117b2 <__lshift+0xb6>
 801174a:	6920      	ldr	r0, [r4, #16]
 801174c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011750:	f104 0314 	add.w	r3, r4, #20
 8011754:	f019 091f 	ands.w	r9, r9, #31
 8011758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801175c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011760:	d02b      	beq.n	80117ba <__lshift+0xbe>
 8011762:	f1c9 0e20 	rsb	lr, r9, #32
 8011766:	468a      	mov	sl, r1
 8011768:	2200      	movs	r2, #0
 801176a:	6818      	ldr	r0, [r3, #0]
 801176c:	fa00 f009 	lsl.w	r0, r0, r9
 8011770:	4302      	orrs	r2, r0
 8011772:	f84a 2b04 	str.w	r2, [sl], #4
 8011776:	f853 2b04 	ldr.w	r2, [r3], #4
 801177a:	459c      	cmp	ip, r3
 801177c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011780:	d8f3      	bhi.n	801176a <__lshift+0x6e>
 8011782:	ebac 0304 	sub.w	r3, ip, r4
 8011786:	3b15      	subs	r3, #21
 8011788:	f023 0303 	bic.w	r3, r3, #3
 801178c:	3304      	adds	r3, #4
 801178e:	f104 0015 	add.w	r0, r4, #21
 8011792:	4584      	cmp	ip, r0
 8011794:	bf38      	it	cc
 8011796:	2304      	movcc	r3, #4
 8011798:	50ca      	str	r2, [r1, r3]
 801179a:	b10a      	cbz	r2, 80117a0 <__lshift+0xa4>
 801179c:	f108 0602 	add.w	r6, r8, #2
 80117a0:	3e01      	subs	r6, #1
 80117a2:	4638      	mov	r0, r7
 80117a4:	612e      	str	r6, [r5, #16]
 80117a6:	4621      	mov	r1, r4
 80117a8:	f7ff fd8c 	bl	80112c4 <_Bfree>
 80117ac:	4628      	mov	r0, r5
 80117ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80117b6:	3301      	adds	r3, #1
 80117b8:	e7c5      	b.n	8011746 <__lshift+0x4a>
 80117ba:	3904      	subs	r1, #4
 80117bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80117c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80117c4:	459c      	cmp	ip, r3
 80117c6:	d8f9      	bhi.n	80117bc <__lshift+0xc0>
 80117c8:	e7ea      	b.n	80117a0 <__lshift+0xa4>
 80117ca:	bf00      	nop
 80117cc:	0801451c 	.word	0x0801451c
 80117d0:	080145ac 	.word	0x080145ac

080117d4 <__mcmp>:
 80117d4:	b530      	push	{r4, r5, lr}
 80117d6:	6902      	ldr	r2, [r0, #16]
 80117d8:	690c      	ldr	r4, [r1, #16]
 80117da:	1b12      	subs	r2, r2, r4
 80117dc:	d10e      	bne.n	80117fc <__mcmp+0x28>
 80117de:	f100 0314 	add.w	r3, r0, #20
 80117e2:	3114      	adds	r1, #20
 80117e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80117e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80117ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80117f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80117f4:	42a5      	cmp	r5, r4
 80117f6:	d003      	beq.n	8011800 <__mcmp+0x2c>
 80117f8:	d305      	bcc.n	8011806 <__mcmp+0x32>
 80117fa:	2201      	movs	r2, #1
 80117fc:	4610      	mov	r0, r2
 80117fe:	bd30      	pop	{r4, r5, pc}
 8011800:	4283      	cmp	r3, r0
 8011802:	d3f3      	bcc.n	80117ec <__mcmp+0x18>
 8011804:	e7fa      	b.n	80117fc <__mcmp+0x28>
 8011806:	f04f 32ff 	mov.w	r2, #4294967295
 801180a:	e7f7      	b.n	80117fc <__mcmp+0x28>

0801180c <__mdiff>:
 801180c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011810:	460c      	mov	r4, r1
 8011812:	4606      	mov	r6, r0
 8011814:	4611      	mov	r1, r2
 8011816:	4620      	mov	r0, r4
 8011818:	4617      	mov	r7, r2
 801181a:	f7ff ffdb 	bl	80117d4 <__mcmp>
 801181e:	1e05      	subs	r5, r0, #0
 8011820:	d110      	bne.n	8011844 <__mdiff+0x38>
 8011822:	4629      	mov	r1, r5
 8011824:	4630      	mov	r0, r6
 8011826:	f7ff fd0d 	bl	8011244 <_Balloc>
 801182a:	b930      	cbnz	r0, 801183a <__mdiff+0x2e>
 801182c:	4b39      	ldr	r3, [pc, #228]	; (8011914 <__mdiff+0x108>)
 801182e:	4602      	mov	r2, r0
 8011830:	f240 2132 	movw	r1, #562	; 0x232
 8011834:	4838      	ldr	r0, [pc, #224]	; (8011918 <__mdiff+0x10c>)
 8011836:	f000 fbb7 	bl	8011fa8 <__assert_func>
 801183a:	2301      	movs	r3, #1
 801183c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011844:	bfa4      	itt	ge
 8011846:	463b      	movge	r3, r7
 8011848:	4627      	movge	r7, r4
 801184a:	4630      	mov	r0, r6
 801184c:	6879      	ldr	r1, [r7, #4]
 801184e:	bfa6      	itte	ge
 8011850:	461c      	movge	r4, r3
 8011852:	2500      	movge	r5, #0
 8011854:	2501      	movlt	r5, #1
 8011856:	f7ff fcf5 	bl	8011244 <_Balloc>
 801185a:	b920      	cbnz	r0, 8011866 <__mdiff+0x5a>
 801185c:	4b2d      	ldr	r3, [pc, #180]	; (8011914 <__mdiff+0x108>)
 801185e:	4602      	mov	r2, r0
 8011860:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011864:	e7e6      	b.n	8011834 <__mdiff+0x28>
 8011866:	693e      	ldr	r6, [r7, #16]
 8011868:	60c5      	str	r5, [r0, #12]
 801186a:	6925      	ldr	r5, [r4, #16]
 801186c:	f107 0114 	add.w	r1, r7, #20
 8011870:	f104 0914 	add.w	r9, r4, #20
 8011874:	f100 0e14 	add.w	lr, r0, #20
 8011878:	f107 0210 	add.w	r2, r7, #16
 801187c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011880:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011884:	46f2      	mov	sl, lr
 8011886:	2700      	movs	r7, #0
 8011888:	f859 3b04 	ldr.w	r3, [r9], #4
 801188c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011890:	fa1f f883 	uxth.w	r8, r3
 8011894:	fa17 f78b 	uxtah	r7, r7, fp
 8011898:	0c1b      	lsrs	r3, r3, #16
 801189a:	eba7 0808 	sub.w	r8, r7, r8
 801189e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80118a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80118a6:	fa1f f888 	uxth.w	r8, r8
 80118aa:	141f      	asrs	r7, r3, #16
 80118ac:	454d      	cmp	r5, r9
 80118ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80118b2:	f84a 3b04 	str.w	r3, [sl], #4
 80118b6:	d8e7      	bhi.n	8011888 <__mdiff+0x7c>
 80118b8:	1b2b      	subs	r3, r5, r4
 80118ba:	3b15      	subs	r3, #21
 80118bc:	f023 0303 	bic.w	r3, r3, #3
 80118c0:	3304      	adds	r3, #4
 80118c2:	3415      	adds	r4, #21
 80118c4:	42a5      	cmp	r5, r4
 80118c6:	bf38      	it	cc
 80118c8:	2304      	movcc	r3, #4
 80118ca:	4419      	add	r1, r3
 80118cc:	4473      	add	r3, lr
 80118ce:	469e      	mov	lr, r3
 80118d0:	460d      	mov	r5, r1
 80118d2:	4565      	cmp	r5, ip
 80118d4:	d30e      	bcc.n	80118f4 <__mdiff+0xe8>
 80118d6:	f10c 0203 	add.w	r2, ip, #3
 80118da:	1a52      	subs	r2, r2, r1
 80118dc:	f022 0203 	bic.w	r2, r2, #3
 80118e0:	3903      	subs	r1, #3
 80118e2:	458c      	cmp	ip, r1
 80118e4:	bf38      	it	cc
 80118e6:	2200      	movcc	r2, #0
 80118e8:	441a      	add	r2, r3
 80118ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80118ee:	b17b      	cbz	r3, 8011910 <__mdiff+0x104>
 80118f0:	6106      	str	r6, [r0, #16]
 80118f2:	e7a5      	b.n	8011840 <__mdiff+0x34>
 80118f4:	f855 8b04 	ldr.w	r8, [r5], #4
 80118f8:	fa17 f488 	uxtah	r4, r7, r8
 80118fc:	1422      	asrs	r2, r4, #16
 80118fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011902:	b2a4      	uxth	r4, r4
 8011904:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011908:	f84e 4b04 	str.w	r4, [lr], #4
 801190c:	1417      	asrs	r7, r2, #16
 801190e:	e7e0      	b.n	80118d2 <__mdiff+0xc6>
 8011910:	3e01      	subs	r6, #1
 8011912:	e7ea      	b.n	80118ea <__mdiff+0xde>
 8011914:	0801451c 	.word	0x0801451c
 8011918:	080145ac 	.word	0x080145ac

0801191c <__ulp>:
 801191c:	b082      	sub	sp, #8
 801191e:	ed8d 0b00 	vstr	d0, [sp]
 8011922:	9b01      	ldr	r3, [sp, #4]
 8011924:	4912      	ldr	r1, [pc, #72]	; (8011970 <__ulp+0x54>)
 8011926:	4019      	ands	r1, r3
 8011928:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801192c:	2900      	cmp	r1, #0
 801192e:	dd05      	ble.n	801193c <__ulp+0x20>
 8011930:	2200      	movs	r2, #0
 8011932:	460b      	mov	r3, r1
 8011934:	ec43 2b10 	vmov	d0, r2, r3
 8011938:	b002      	add	sp, #8
 801193a:	4770      	bx	lr
 801193c:	4249      	negs	r1, r1
 801193e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011942:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011946:	f04f 0200 	mov.w	r2, #0
 801194a:	f04f 0300 	mov.w	r3, #0
 801194e:	da04      	bge.n	801195a <__ulp+0x3e>
 8011950:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011954:	fa41 f300 	asr.w	r3, r1, r0
 8011958:	e7ec      	b.n	8011934 <__ulp+0x18>
 801195a:	f1a0 0114 	sub.w	r1, r0, #20
 801195e:	291e      	cmp	r1, #30
 8011960:	bfda      	itte	le
 8011962:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011966:	fa20 f101 	lsrle.w	r1, r0, r1
 801196a:	2101      	movgt	r1, #1
 801196c:	460a      	mov	r2, r1
 801196e:	e7e1      	b.n	8011934 <__ulp+0x18>
 8011970:	7ff00000 	.word	0x7ff00000

08011974 <__b2d>:
 8011974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011976:	6905      	ldr	r5, [r0, #16]
 8011978:	f100 0714 	add.w	r7, r0, #20
 801197c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011980:	1f2e      	subs	r6, r5, #4
 8011982:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011986:	4620      	mov	r0, r4
 8011988:	f7ff fd52 	bl	8011430 <__hi0bits>
 801198c:	f1c0 0320 	rsb	r3, r0, #32
 8011990:	280a      	cmp	r0, #10
 8011992:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011a10 <__b2d+0x9c>
 8011996:	600b      	str	r3, [r1, #0]
 8011998:	dc14      	bgt.n	80119c4 <__b2d+0x50>
 801199a:	f1c0 0e0b 	rsb	lr, r0, #11
 801199e:	fa24 f10e 	lsr.w	r1, r4, lr
 80119a2:	42b7      	cmp	r7, r6
 80119a4:	ea41 030c 	orr.w	r3, r1, ip
 80119a8:	bf34      	ite	cc
 80119aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80119ae:	2100      	movcs	r1, #0
 80119b0:	3015      	adds	r0, #21
 80119b2:	fa04 f000 	lsl.w	r0, r4, r0
 80119b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80119ba:	ea40 0201 	orr.w	r2, r0, r1
 80119be:	ec43 2b10 	vmov	d0, r2, r3
 80119c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119c4:	42b7      	cmp	r7, r6
 80119c6:	bf3a      	itte	cc
 80119c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80119cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80119d0:	2100      	movcs	r1, #0
 80119d2:	380b      	subs	r0, #11
 80119d4:	d017      	beq.n	8011a06 <__b2d+0x92>
 80119d6:	f1c0 0c20 	rsb	ip, r0, #32
 80119da:	fa04 f500 	lsl.w	r5, r4, r0
 80119de:	42be      	cmp	r6, r7
 80119e0:	fa21 f40c 	lsr.w	r4, r1, ip
 80119e4:	ea45 0504 	orr.w	r5, r5, r4
 80119e8:	bf8c      	ite	hi
 80119ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80119ee:	2400      	movls	r4, #0
 80119f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80119f4:	fa01 f000 	lsl.w	r0, r1, r0
 80119f8:	fa24 f40c 	lsr.w	r4, r4, ip
 80119fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011a00:	ea40 0204 	orr.w	r2, r0, r4
 8011a04:	e7db      	b.n	80119be <__b2d+0x4a>
 8011a06:	ea44 030c 	orr.w	r3, r4, ip
 8011a0a:	460a      	mov	r2, r1
 8011a0c:	e7d7      	b.n	80119be <__b2d+0x4a>
 8011a0e:	bf00      	nop
 8011a10:	3ff00000 	.word	0x3ff00000

08011a14 <__d2b>:
 8011a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a18:	4689      	mov	r9, r1
 8011a1a:	2101      	movs	r1, #1
 8011a1c:	ec57 6b10 	vmov	r6, r7, d0
 8011a20:	4690      	mov	r8, r2
 8011a22:	f7ff fc0f 	bl	8011244 <_Balloc>
 8011a26:	4604      	mov	r4, r0
 8011a28:	b930      	cbnz	r0, 8011a38 <__d2b+0x24>
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	4b25      	ldr	r3, [pc, #148]	; (8011ac4 <__d2b+0xb0>)
 8011a2e:	4826      	ldr	r0, [pc, #152]	; (8011ac8 <__d2b+0xb4>)
 8011a30:	f240 310a 	movw	r1, #778	; 0x30a
 8011a34:	f000 fab8 	bl	8011fa8 <__assert_func>
 8011a38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011a3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a40:	bb35      	cbnz	r5, 8011a90 <__d2b+0x7c>
 8011a42:	2e00      	cmp	r6, #0
 8011a44:	9301      	str	r3, [sp, #4]
 8011a46:	d028      	beq.n	8011a9a <__d2b+0x86>
 8011a48:	4668      	mov	r0, sp
 8011a4a:	9600      	str	r6, [sp, #0]
 8011a4c:	f7ff fd10 	bl	8011470 <__lo0bits>
 8011a50:	9900      	ldr	r1, [sp, #0]
 8011a52:	b300      	cbz	r0, 8011a96 <__d2b+0x82>
 8011a54:	9a01      	ldr	r2, [sp, #4]
 8011a56:	f1c0 0320 	rsb	r3, r0, #32
 8011a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011a5e:	430b      	orrs	r3, r1
 8011a60:	40c2      	lsrs	r2, r0
 8011a62:	6163      	str	r3, [r4, #20]
 8011a64:	9201      	str	r2, [sp, #4]
 8011a66:	9b01      	ldr	r3, [sp, #4]
 8011a68:	61a3      	str	r3, [r4, #24]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	bf14      	ite	ne
 8011a6e:	2202      	movne	r2, #2
 8011a70:	2201      	moveq	r2, #1
 8011a72:	6122      	str	r2, [r4, #16]
 8011a74:	b1d5      	cbz	r5, 8011aac <__d2b+0x98>
 8011a76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011a7a:	4405      	add	r5, r0
 8011a7c:	f8c9 5000 	str.w	r5, [r9]
 8011a80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011a84:	f8c8 0000 	str.w	r0, [r8]
 8011a88:	4620      	mov	r0, r4
 8011a8a:	b003      	add	sp, #12
 8011a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a94:	e7d5      	b.n	8011a42 <__d2b+0x2e>
 8011a96:	6161      	str	r1, [r4, #20]
 8011a98:	e7e5      	b.n	8011a66 <__d2b+0x52>
 8011a9a:	a801      	add	r0, sp, #4
 8011a9c:	f7ff fce8 	bl	8011470 <__lo0bits>
 8011aa0:	9b01      	ldr	r3, [sp, #4]
 8011aa2:	6163      	str	r3, [r4, #20]
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	6122      	str	r2, [r4, #16]
 8011aa8:	3020      	adds	r0, #32
 8011aaa:	e7e3      	b.n	8011a74 <__d2b+0x60>
 8011aac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ab0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011ab4:	f8c9 0000 	str.w	r0, [r9]
 8011ab8:	6918      	ldr	r0, [r3, #16]
 8011aba:	f7ff fcb9 	bl	8011430 <__hi0bits>
 8011abe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ac2:	e7df      	b.n	8011a84 <__d2b+0x70>
 8011ac4:	0801451c 	.word	0x0801451c
 8011ac8:	080145ac 	.word	0x080145ac

08011acc <__ratio>:
 8011acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad0:	4688      	mov	r8, r1
 8011ad2:	4669      	mov	r1, sp
 8011ad4:	4681      	mov	r9, r0
 8011ad6:	f7ff ff4d 	bl	8011974 <__b2d>
 8011ada:	a901      	add	r1, sp, #4
 8011adc:	4640      	mov	r0, r8
 8011ade:	ec55 4b10 	vmov	r4, r5, d0
 8011ae2:	f7ff ff47 	bl	8011974 <__b2d>
 8011ae6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011aea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011aee:	eba3 0c02 	sub.w	ip, r3, r2
 8011af2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011af6:	1a9b      	subs	r3, r3, r2
 8011af8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011afc:	ec51 0b10 	vmov	r0, r1, d0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	bfd6      	itet	le
 8011b04:	460a      	movle	r2, r1
 8011b06:	462a      	movgt	r2, r5
 8011b08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011b0c:	468b      	mov	fp, r1
 8011b0e:	462f      	mov	r7, r5
 8011b10:	bfd4      	ite	le
 8011b12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011b16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	ee10 2a10 	vmov	r2, s0
 8011b20:	465b      	mov	r3, fp
 8011b22:	4639      	mov	r1, r7
 8011b24:	f7ee fe92 	bl	800084c <__aeabi_ddiv>
 8011b28:	ec41 0b10 	vmov	d0, r0, r1
 8011b2c:	b003      	add	sp, #12
 8011b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b32 <__copybits>:
 8011b32:	3901      	subs	r1, #1
 8011b34:	b570      	push	{r4, r5, r6, lr}
 8011b36:	1149      	asrs	r1, r1, #5
 8011b38:	6914      	ldr	r4, [r2, #16]
 8011b3a:	3101      	adds	r1, #1
 8011b3c:	f102 0314 	add.w	r3, r2, #20
 8011b40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011b48:	1f05      	subs	r5, r0, #4
 8011b4a:	42a3      	cmp	r3, r4
 8011b4c:	d30c      	bcc.n	8011b68 <__copybits+0x36>
 8011b4e:	1aa3      	subs	r3, r4, r2
 8011b50:	3b11      	subs	r3, #17
 8011b52:	f023 0303 	bic.w	r3, r3, #3
 8011b56:	3211      	adds	r2, #17
 8011b58:	42a2      	cmp	r2, r4
 8011b5a:	bf88      	it	hi
 8011b5c:	2300      	movhi	r3, #0
 8011b5e:	4418      	add	r0, r3
 8011b60:	2300      	movs	r3, #0
 8011b62:	4288      	cmp	r0, r1
 8011b64:	d305      	bcc.n	8011b72 <__copybits+0x40>
 8011b66:	bd70      	pop	{r4, r5, r6, pc}
 8011b68:	f853 6b04 	ldr.w	r6, [r3], #4
 8011b6c:	f845 6f04 	str.w	r6, [r5, #4]!
 8011b70:	e7eb      	b.n	8011b4a <__copybits+0x18>
 8011b72:	f840 3b04 	str.w	r3, [r0], #4
 8011b76:	e7f4      	b.n	8011b62 <__copybits+0x30>

08011b78 <__any_on>:
 8011b78:	f100 0214 	add.w	r2, r0, #20
 8011b7c:	6900      	ldr	r0, [r0, #16]
 8011b7e:	114b      	asrs	r3, r1, #5
 8011b80:	4298      	cmp	r0, r3
 8011b82:	b510      	push	{r4, lr}
 8011b84:	db11      	blt.n	8011baa <__any_on+0x32>
 8011b86:	dd0a      	ble.n	8011b9e <__any_on+0x26>
 8011b88:	f011 011f 	ands.w	r1, r1, #31
 8011b8c:	d007      	beq.n	8011b9e <__any_on+0x26>
 8011b8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011b92:	fa24 f001 	lsr.w	r0, r4, r1
 8011b96:	fa00 f101 	lsl.w	r1, r0, r1
 8011b9a:	428c      	cmp	r4, r1
 8011b9c:	d10b      	bne.n	8011bb6 <__any_on+0x3e>
 8011b9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d803      	bhi.n	8011bae <__any_on+0x36>
 8011ba6:	2000      	movs	r0, #0
 8011ba8:	bd10      	pop	{r4, pc}
 8011baa:	4603      	mov	r3, r0
 8011bac:	e7f7      	b.n	8011b9e <__any_on+0x26>
 8011bae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011bb2:	2900      	cmp	r1, #0
 8011bb4:	d0f5      	beq.n	8011ba2 <__any_on+0x2a>
 8011bb6:	2001      	movs	r0, #1
 8011bb8:	e7f6      	b.n	8011ba8 <__any_on+0x30>

08011bba <_calloc_r>:
 8011bba:	b513      	push	{r0, r1, r4, lr}
 8011bbc:	434a      	muls	r2, r1
 8011bbe:	4611      	mov	r1, r2
 8011bc0:	9201      	str	r2, [sp, #4]
 8011bc2:	f7fc f9cd 	bl	800df60 <_malloc_r>
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	b118      	cbz	r0, 8011bd2 <_calloc_r+0x18>
 8011bca:	9a01      	ldr	r2, [sp, #4]
 8011bcc:	2100      	movs	r1, #0
 8011bce:	f7fc f9be 	bl	800df4e <memset>
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	b002      	add	sp, #8
 8011bd6:	bd10      	pop	{r4, pc}

08011bd8 <_free_r>:
 8011bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011bda:	2900      	cmp	r1, #0
 8011bdc:	d048      	beq.n	8011c70 <_free_r+0x98>
 8011bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011be2:	9001      	str	r0, [sp, #4]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	f1a1 0404 	sub.w	r4, r1, #4
 8011bea:	bfb8      	it	lt
 8011bec:	18e4      	addlt	r4, r4, r3
 8011bee:	f7ff fb1d 	bl	801122c <__malloc_lock>
 8011bf2:	4a20      	ldr	r2, [pc, #128]	; (8011c74 <_free_r+0x9c>)
 8011bf4:	9801      	ldr	r0, [sp, #4]
 8011bf6:	6813      	ldr	r3, [r2, #0]
 8011bf8:	4615      	mov	r5, r2
 8011bfa:	b933      	cbnz	r3, 8011c0a <_free_r+0x32>
 8011bfc:	6063      	str	r3, [r4, #4]
 8011bfe:	6014      	str	r4, [r2, #0]
 8011c00:	b003      	add	sp, #12
 8011c02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c06:	f7ff bb17 	b.w	8011238 <__malloc_unlock>
 8011c0a:	42a3      	cmp	r3, r4
 8011c0c:	d90b      	bls.n	8011c26 <_free_r+0x4e>
 8011c0e:	6821      	ldr	r1, [r4, #0]
 8011c10:	1862      	adds	r2, r4, r1
 8011c12:	4293      	cmp	r3, r2
 8011c14:	bf04      	itt	eq
 8011c16:	681a      	ldreq	r2, [r3, #0]
 8011c18:	685b      	ldreq	r3, [r3, #4]
 8011c1a:	6063      	str	r3, [r4, #4]
 8011c1c:	bf04      	itt	eq
 8011c1e:	1852      	addeq	r2, r2, r1
 8011c20:	6022      	streq	r2, [r4, #0]
 8011c22:	602c      	str	r4, [r5, #0]
 8011c24:	e7ec      	b.n	8011c00 <_free_r+0x28>
 8011c26:	461a      	mov	r2, r3
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	b10b      	cbz	r3, 8011c30 <_free_r+0x58>
 8011c2c:	42a3      	cmp	r3, r4
 8011c2e:	d9fa      	bls.n	8011c26 <_free_r+0x4e>
 8011c30:	6811      	ldr	r1, [r2, #0]
 8011c32:	1855      	adds	r5, r2, r1
 8011c34:	42a5      	cmp	r5, r4
 8011c36:	d10b      	bne.n	8011c50 <_free_r+0x78>
 8011c38:	6824      	ldr	r4, [r4, #0]
 8011c3a:	4421      	add	r1, r4
 8011c3c:	1854      	adds	r4, r2, r1
 8011c3e:	42a3      	cmp	r3, r4
 8011c40:	6011      	str	r1, [r2, #0]
 8011c42:	d1dd      	bne.n	8011c00 <_free_r+0x28>
 8011c44:	681c      	ldr	r4, [r3, #0]
 8011c46:	685b      	ldr	r3, [r3, #4]
 8011c48:	6053      	str	r3, [r2, #4]
 8011c4a:	4421      	add	r1, r4
 8011c4c:	6011      	str	r1, [r2, #0]
 8011c4e:	e7d7      	b.n	8011c00 <_free_r+0x28>
 8011c50:	d902      	bls.n	8011c58 <_free_r+0x80>
 8011c52:	230c      	movs	r3, #12
 8011c54:	6003      	str	r3, [r0, #0]
 8011c56:	e7d3      	b.n	8011c00 <_free_r+0x28>
 8011c58:	6825      	ldr	r5, [r4, #0]
 8011c5a:	1961      	adds	r1, r4, r5
 8011c5c:	428b      	cmp	r3, r1
 8011c5e:	bf04      	itt	eq
 8011c60:	6819      	ldreq	r1, [r3, #0]
 8011c62:	685b      	ldreq	r3, [r3, #4]
 8011c64:	6063      	str	r3, [r4, #4]
 8011c66:	bf04      	itt	eq
 8011c68:	1949      	addeq	r1, r1, r5
 8011c6a:	6021      	streq	r1, [r4, #0]
 8011c6c:	6054      	str	r4, [r2, #4]
 8011c6e:	e7c7      	b.n	8011c00 <_free_r+0x28>
 8011c70:	b003      	add	sp, #12
 8011c72:	bd30      	pop	{r4, r5, pc}
 8011c74:	20005990 	.word	0x20005990

08011c78 <__ssputs_r>:
 8011c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c7c:	688e      	ldr	r6, [r1, #8]
 8011c7e:	429e      	cmp	r6, r3
 8011c80:	4682      	mov	sl, r0
 8011c82:	460c      	mov	r4, r1
 8011c84:	4690      	mov	r8, r2
 8011c86:	461f      	mov	r7, r3
 8011c88:	d838      	bhi.n	8011cfc <__ssputs_r+0x84>
 8011c8a:	898a      	ldrh	r2, [r1, #12]
 8011c8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011c90:	d032      	beq.n	8011cf8 <__ssputs_r+0x80>
 8011c92:	6825      	ldr	r5, [r4, #0]
 8011c94:	6909      	ldr	r1, [r1, #16]
 8011c96:	eba5 0901 	sub.w	r9, r5, r1
 8011c9a:	6965      	ldr	r5, [r4, #20]
 8011c9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	444b      	add	r3, r9
 8011ca8:	106d      	asrs	r5, r5, #1
 8011caa:	429d      	cmp	r5, r3
 8011cac:	bf38      	it	cc
 8011cae:	461d      	movcc	r5, r3
 8011cb0:	0553      	lsls	r3, r2, #21
 8011cb2:	d531      	bpl.n	8011d18 <__ssputs_r+0xa0>
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	f7fc f953 	bl	800df60 <_malloc_r>
 8011cba:	4606      	mov	r6, r0
 8011cbc:	b950      	cbnz	r0, 8011cd4 <__ssputs_r+0x5c>
 8011cbe:	230c      	movs	r3, #12
 8011cc0:	f8ca 3000 	str.w	r3, [sl]
 8011cc4:	89a3      	ldrh	r3, [r4, #12]
 8011cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cca:	81a3      	strh	r3, [r4, #12]
 8011ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cd4:	6921      	ldr	r1, [r4, #16]
 8011cd6:	464a      	mov	r2, r9
 8011cd8:	f7fc f92b 	bl	800df32 <memcpy>
 8011cdc:	89a3      	ldrh	r3, [r4, #12]
 8011cde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ce6:	81a3      	strh	r3, [r4, #12]
 8011ce8:	6126      	str	r6, [r4, #16]
 8011cea:	6165      	str	r5, [r4, #20]
 8011cec:	444e      	add	r6, r9
 8011cee:	eba5 0509 	sub.w	r5, r5, r9
 8011cf2:	6026      	str	r6, [r4, #0]
 8011cf4:	60a5      	str	r5, [r4, #8]
 8011cf6:	463e      	mov	r6, r7
 8011cf8:	42be      	cmp	r6, r7
 8011cfa:	d900      	bls.n	8011cfe <__ssputs_r+0x86>
 8011cfc:	463e      	mov	r6, r7
 8011cfe:	4632      	mov	r2, r6
 8011d00:	6820      	ldr	r0, [r4, #0]
 8011d02:	4641      	mov	r1, r8
 8011d04:	f000 f980 	bl	8012008 <memmove>
 8011d08:	68a3      	ldr	r3, [r4, #8]
 8011d0a:	6822      	ldr	r2, [r4, #0]
 8011d0c:	1b9b      	subs	r3, r3, r6
 8011d0e:	4432      	add	r2, r6
 8011d10:	60a3      	str	r3, [r4, #8]
 8011d12:	6022      	str	r2, [r4, #0]
 8011d14:	2000      	movs	r0, #0
 8011d16:	e7db      	b.n	8011cd0 <__ssputs_r+0x58>
 8011d18:	462a      	mov	r2, r5
 8011d1a:	f000 f98f 	bl	801203c <_realloc_r>
 8011d1e:	4606      	mov	r6, r0
 8011d20:	2800      	cmp	r0, #0
 8011d22:	d1e1      	bne.n	8011ce8 <__ssputs_r+0x70>
 8011d24:	6921      	ldr	r1, [r4, #16]
 8011d26:	4650      	mov	r0, sl
 8011d28:	f7ff ff56 	bl	8011bd8 <_free_r>
 8011d2c:	e7c7      	b.n	8011cbe <__ssputs_r+0x46>
	...

08011d30 <_svfiprintf_r>:
 8011d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d34:	4698      	mov	r8, r3
 8011d36:	898b      	ldrh	r3, [r1, #12]
 8011d38:	061b      	lsls	r3, r3, #24
 8011d3a:	b09d      	sub	sp, #116	; 0x74
 8011d3c:	4607      	mov	r7, r0
 8011d3e:	460d      	mov	r5, r1
 8011d40:	4614      	mov	r4, r2
 8011d42:	d50e      	bpl.n	8011d62 <_svfiprintf_r+0x32>
 8011d44:	690b      	ldr	r3, [r1, #16]
 8011d46:	b963      	cbnz	r3, 8011d62 <_svfiprintf_r+0x32>
 8011d48:	2140      	movs	r1, #64	; 0x40
 8011d4a:	f7fc f909 	bl	800df60 <_malloc_r>
 8011d4e:	6028      	str	r0, [r5, #0]
 8011d50:	6128      	str	r0, [r5, #16]
 8011d52:	b920      	cbnz	r0, 8011d5e <_svfiprintf_r+0x2e>
 8011d54:	230c      	movs	r3, #12
 8011d56:	603b      	str	r3, [r7, #0]
 8011d58:	f04f 30ff 	mov.w	r0, #4294967295
 8011d5c:	e0d1      	b.n	8011f02 <_svfiprintf_r+0x1d2>
 8011d5e:	2340      	movs	r3, #64	; 0x40
 8011d60:	616b      	str	r3, [r5, #20]
 8011d62:	2300      	movs	r3, #0
 8011d64:	9309      	str	r3, [sp, #36]	; 0x24
 8011d66:	2320      	movs	r3, #32
 8011d68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d70:	2330      	movs	r3, #48	; 0x30
 8011d72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011f1c <_svfiprintf_r+0x1ec>
 8011d76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d7a:	f04f 0901 	mov.w	r9, #1
 8011d7e:	4623      	mov	r3, r4
 8011d80:	469a      	mov	sl, r3
 8011d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d86:	b10a      	cbz	r2, 8011d8c <_svfiprintf_r+0x5c>
 8011d88:	2a25      	cmp	r2, #37	; 0x25
 8011d8a:	d1f9      	bne.n	8011d80 <_svfiprintf_r+0x50>
 8011d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8011d90:	d00b      	beq.n	8011daa <_svfiprintf_r+0x7a>
 8011d92:	465b      	mov	r3, fp
 8011d94:	4622      	mov	r2, r4
 8011d96:	4629      	mov	r1, r5
 8011d98:	4638      	mov	r0, r7
 8011d9a:	f7ff ff6d 	bl	8011c78 <__ssputs_r>
 8011d9e:	3001      	adds	r0, #1
 8011da0:	f000 80aa 	beq.w	8011ef8 <_svfiprintf_r+0x1c8>
 8011da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011da6:	445a      	add	r2, fp
 8011da8:	9209      	str	r2, [sp, #36]	; 0x24
 8011daa:	f89a 3000 	ldrb.w	r3, [sl]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	f000 80a2 	beq.w	8011ef8 <_svfiprintf_r+0x1c8>
 8011db4:	2300      	movs	r3, #0
 8011db6:	f04f 32ff 	mov.w	r2, #4294967295
 8011dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dbe:	f10a 0a01 	add.w	sl, sl, #1
 8011dc2:	9304      	str	r3, [sp, #16]
 8011dc4:	9307      	str	r3, [sp, #28]
 8011dc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dca:	931a      	str	r3, [sp, #104]	; 0x68
 8011dcc:	4654      	mov	r4, sl
 8011dce:	2205      	movs	r2, #5
 8011dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dd4:	4851      	ldr	r0, [pc, #324]	; (8011f1c <_svfiprintf_r+0x1ec>)
 8011dd6:	f7ee fa03 	bl	80001e0 <memchr>
 8011dda:	9a04      	ldr	r2, [sp, #16]
 8011ddc:	b9d8      	cbnz	r0, 8011e16 <_svfiprintf_r+0xe6>
 8011dde:	06d0      	lsls	r0, r2, #27
 8011de0:	bf44      	itt	mi
 8011de2:	2320      	movmi	r3, #32
 8011de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011de8:	0711      	lsls	r1, r2, #28
 8011dea:	bf44      	itt	mi
 8011dec:	232b      	movmi	r3, #43	; 0x2b
 8011dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011df2:	f89a 3000 	ldrb.w	r3, [sl]
 8011df6:	2b2a      	cmp	r3, #42	; 0x2a
 8011df8:	d015      	beq.n	8011e26 <_svfiprintf_r+0xf6>
 8011dfa:	9a07      	ldr	r2, [sp, #28]
 8011dfc:	4654      	mov	r4, sl
 8011dfe:	2000      	movs	r0, #0
 8011e00:	f04f 0c0a 	mov.w	ip, #10
 8011e04:	4621      	mov	r1, r4
 8011e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e0a:	3b30      	subs	r3, #48	; 0x30
 8011e0c:	2b09      	cmp	r3, #9
 8011e0e:	d94e      	bls.n	8011eae <_svfiprintf_r+0x17e>
 8011e10:	b1b0      	cbz	r0, 8011e40 <_svfiprintf_r+0x110>
 8011e12:	9207      	str	r2, [sp, #28]
 8011e14:	e014      	b.n	8011e40 <_svfiprintf_r+0x110>
 8011e16:	eba0 0308 	sub.w	r3, r0, r8
 8011e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	9304      	str	r3, [sp, #16]
 8011e22:	46a2      	mov	sl, r4
 8011e24:	e7d2      	b.n	8011dcc <_svfiprintf_r+0x9c>
 8011e26:	9b03      	ldr	r3, [sp, #12]
 8011e28:	1d19      	adds	r1, r3, #4
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	9103      	str	r1, [sp, #12]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	bfbb      	ittet	lt
 8011e32:	425b      	neglt	r3, r3
 8011e34:	f042 0202 	orrlt.w	r2, r2, #2
 8011e38:	9307      	strge	r3, [sp, #28]
 8011e3a:	9307      	strlt	r3, [sp, #28]
 8011e3c:	bfb8      	it	lt
 8011e3e:	9204      	strlt	r2, [sp, #16]
 8011e40:	7823      	ldrb	r3, [r4, #0]
 8011e42:	2b2e      	cmp	r3, #46	; 0x2e
 8011e44:	d10c      	bne.n	8011e60 <_svfiprintf_r+0x130>
 8011e46:	7863      	ldrb	r3, [r4, #1]
 8011e48:	2b2a      	cmp	r3, #42	; 0x2a
 8011e4a:	d135      	bne.n	8011eb8 <_svfiprintf_r+0x188>
 8011e4c:	9b03      	ldr	r3, [sp, #12]
 8011e4e:	1d1a      	adds	r2, r3, #4
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	9203      	str	r2, [sp, #12]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	bfb8      	it	lt
 8011e58:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e5c:	3402      	adds	r4, #2
 8011e5e:	9305      	str	r3, [sp, #20]
 8011e60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011f2c <_svfiprintf_r+0x1fc>
 8011e64:	7821      	ldrb	r1, [r4, #0]
 8011e66:	2203      	movs	r2, #3
 8011e68:	4650      	mov	r0, sl
 8011e6a:	f7ee f9b9 	bl	80001e0 <memchr>
 8011e6e:	b140      	cbz	r0, 8011e82 <_svfiprintf_r+0x152>
 8011e70:	2340      	movs	r3, #64	; 0x40
 8011e72:	eba0 000a 	sub.w	r0, r0, sl
 8011e76:	fa03 f000 	lsl.w	r0, r3, r0
 8011e7a:	9b04      	ldr	r3, [sp, #16]
 8011e7c:	4303      	orrs	r3, r0
 8011e7e:	3401      	adds	r4, #1
 8011e80:	9304      	str	r3, [sp, #16]
 8011e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e86:	4826      	ldr	r0, [pc, #152]	; (8011f20 <_svfiprintf_r+0x1f0>)
 8011e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e8c:	2206      	movs	r2, #6
 8011e8e:	f7ee f9a7 	bl	80001e0 <memchr>
 8011e92:	2800      	cmp	r0, #0
 8011e94:	d038      	beq.n	8011f08 <_svfiprintf_r+0x1d8>
 8011e96:	4b23      	ldr	r3, [pc, #140]	; (8011f24 <_svfiprintf_r+0x1f4>)
 8011e98:	bb1b      	cbnz	r3, 8011ee2 <_svfiprintf_r+0x1b2>
 8011e9a:	9b03      	ldr	r3, [sp, #12]
 8011e9c:	3307      	adds	r3, #7
 8011e9e:	f023 0307 	bic.w	r3, r3, #7
 8011ea2:	3308      	adds	r3, #8
 8011ea4:	9303      	str	r3, [sp, #12]
 8011ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ea8:	4433      	add	r3, r6
 8011eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8011eac:	e767      	b.n	8011d7e <_svfiprintf_r+0x4e>
 8011eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8011eb2:	460c      	mov	r4, r1
 8011eb4:	2001      	movs	r0, #1
 8011eb6:	e7a5      	b.n	8011e04 <_svfiprintf_r+0xd4>
 8011eb8:	2300      	movs	r3, #0
 8011eba:	3401      	adds	r4, #1
 8011ebc:	9305      	str	r3, [sp, #20]
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	f04f 0c0a 	mov.w	ip, #10
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011eca:	3a30      	subs	r2, #48	; 0x30
 8011ecc:	2a09      	cmp	r2, #9
 8011ece:	d903      	bls.n	8011ed8 <_svfiprintf_r+0x1a8>
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d0c5      	beq.n	8011e60 <_svfiprintf_r+0x130>
 8011ed4:	9105      	str	r1, [sp, #20]
 8011ed6:	e7c3      	b.n	8011e60 <_svfiprintf_r+0x130>
 8011ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011edc:	4604      	mov	r4, r0
 8011ede:	2301      	movs	r3, #1
 8011ee0:	e7f0      	b.n	8011ec4 <_svfiprintf_r+0x194>
 8011ee2:	ab03      	add	r3, sp, #12
 8011ee4:	9300      	str	r3, [sp, #0]
 8011ee6:	462a      	mov	r2, r5
 8011ee8:	4b0f      	ldr	r3, [pc, #60]	; (8011f28 <_svfiprintf_r+0x1f8>)
 8011eea:	a904      	add	r1, sp, #16
 8011eec:	4638      	mov	r0, r7
 8011eee:	f7fc f931 	bl	800e154 <_printf_float>
 8011ef2:	1c42      	adds	r2, r0, #1
 8011ef4:	4606      	mov	r6, r0
 8011ef6:	d1d6      	bne.n	8011ea6 <_svfiprintf_r+0x176>
 8011ef8:	89ab      	ldrh	r3, [r5, #12]
 8011efa:	065b      	lsls	r3, r3, #25
 8011efc:	f53f af2c 	bmi.w	8011d58 <_svfiprintf_r+0x28>
 8011f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f02:	b01d      	add	sp, #116	; 0x74
 8011f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f08:	ab03      	add	r3, sp, #12
 8011f0a:	9300      	str	r3, [sp, #0]
 8011f0c:	462a      	mov	r2, r5
 8011f0e:	4b06      	ldr	r3, [pc, #24]	; (8011f28 <_svfiprintf_r+0x1f8>)
 8011f10:	a904      	add	r1, sp, #16
 8011f12:	4638      	mov	r0, r7
 8011f14:	f7fc fbc2 	bl	800e69c <_printf_i>
 8011f18:	e7eb      	b.n	8011ef2 <_svfiprintf_r+0x1c2>
 8011f1a:	bf00      	nop
 8011f1c:	0801470c 	.word	0x0801470c
 8011f20:	08014716 	.word	0x08014716
 8011f24:	0800e155 	.word	0x0800e155
 8011f28:	08011c79 	.word	0x08011c79
 8011f2c:	08014712 	.word	0x08014712

08011f30 <_read_r>:
 8011f30:	b538      	push	{r3, r4, r5, lr}
 8011f32:	4d07      	ldr	r5, [pc, #28]	; (8011f50 <_read_r+0x20>)
 8011f34:	4604      	mov	r4, r0
 8011f36:	4608      	mov	r0, r1
 8011f38:	4611      	mov	r1, r2
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	602a      	str	r2, [r5, #0]
 8011f3e:	461a      	mov	r2, r3
 8011f40:	f7f2 fdfa 	bl	8004b38 <_read>
 8011f44:	1c43      	adds	r3, r0, #1
 8011f46:	d102      	bne.n	8011f4e <_read_r+0x1e>
 8011f48:	682b      	ldr	r3, [r5, #0]
 8011f4a:	b103      	cbz	r3, 8011f4e <_read_r+0x1e>
 8011f4c:	6023      	str	r3, [r4, #0]
 8011f4e:	bd38      	pop	{r3, r4, r5, pc}
 8011f50:	200063e4 	.word	0x200063e4
 8011f54:	00000000 	.word	0x00000000

08011f58 <nan>:
 8011f58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f60 <nan+0x8>
 8011f5c:	4770      	bx	lr
 8011f5e:	bf00      	nop
 8011f60:	00000000 	.word	0x00000000
 8011f64:	7ff80000 	.word	0x7ff80000

08011f68 <strncmp>:
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	b16a      	cbz	r2, 8011f88 <strncmp+0x20>
 8011f6c:	3901      	subs	r1, #1
 8011f6e:	1884      	adds	r4, r0, r2
 8011f70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011f74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011f78:	4293      	cmp	r3, r2
 8011f7a:	d103      	bne.n	8011f84 <strncmp+0x1c>
 8011f7c:	42a0      	cmp	r0, r4
 8011f7e:	d001      	beq.n	8011f84 <strncmp+0x1c>
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d1f5      	bne.n	8011f70 <strncmp+0x8>
 8011f84:	1a98      	subs	r0, r3, r2
 8011f86:	bd10      	pop	{r4, pc}
 8011f88:	4610      	mov	r0, r2
 8011f8a:	e7fc      	b.n	8011f86 <strncmp+0x1e>

08011f8c <__ascii_wctomb>:
 8011f8c:	b149      	cbz	r1, 8011fa2 <__ascii_wctomb+0x16>
 8011f8e:	2aff      	cmp	r2, #255	; 0xff
 8011f90:	bf85      	ittet	hi
 8011f92:	238a      	movhi	r3, #138	; 0x8a
 8011f94:	6003      	strhi	r3, [r0, #0]
 8011f96:	700a      	strbls	r2, [r1, #0]
 8011f98:	f04f 30ff 	movhi.w	r0, #4294967295
 8011f9c:	bf98      	it	ls
 8011f9e:	2001      	movls	r0, #1
 8011fa0:	4770      	bx	lr
 8011fa2:	4608      	mov	r0, r1
 8011fa4:	4770      	bx	lr
	...

08011fa8 <__assert_func>:
 8011fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011faa:	4614      	mov	r4, r2
 8011fac:	461a      	mov	r2, r3
 8011fae:	4b09      	ldr	r3, [pc, #36]	; (8011fd4 <__assert_func+0x2c>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4605      	mov	r5, r0
 8011fb4:	68d8      	ldr	r0, [r3, #12]
 8011fb6:	b14c      	cbz	r4, 8011fcc <__assert_func+0x24>
 8011fb8:	4b07      	ldr	r3, [pc, #28]	; (8011fd8 <__assert_func+0x30>)
 8011fba:	9100      	str	r1, [sp, #0]
 8011fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fc0:	4906      	ldr	r1, [pc, #24]	; (8011fdc <__assert_func+0x34>)
 8011fc2:	462b      	mov	r3, r5
 8011fc4:	f000 f80e 	bl	8011fe4 <fiprintf>
 8011fc8:	f000 fa78 	bl	80124bc <abort>
 8011fcc:	4b04      	ldr	r3, [pc, #16]	; (8011fe0 <__assert_func+0x38>)
 8011fce:	461c      	mov	r4, r3
 8011fd0:	e7f3      	b.n	8011fba <__assert_func+0x12>
 8011fd2:	bf00      	nop
 8011fd4:	20000048 	.word	0x20000048
 8011fd8:	0801471d 	.word	0x0801471d
 8011fdc:	0801472a 	.word	0x0801472a
 8011fe0:	08014758 	.word	0x08014758

08011fe4 <fiprintf>:
 8011fe4:	b40e      	push	{r1, r2, r3}
 8011fe6:	b503      	push	{r0, r1, lr}
 8011fe8:	4601      	mov	r1, r0
 8011fea:	ab03      	add	r3, sp, #12
 8011fec:	4805      	ldr	r0, [pc, #20]	; (8012004 <fiprintf+0x20>)
 8011fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ff2:	6800      	ldr	r0, [r0, #0]
 8011ff4:	9301      	str	r3, [sp, #4]
 8011ff6:	f000 f871 	bl	80120dc <_vfiprintf_r>
 8011ffa:	b002      	add	sp, #8
 8011ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012000:	b003      	add	sp, #12
 8012002:	4770      	bx	lr
 8012004:	20000048 	.word	0x20000048

08012008 <memmove>:
 8012008:	4288      	cmp	r0, r1
 801200a:	b510      	push	{r4, lr}
 801200c:	eb01 0402 	add.w	r4, r1, r2
 8012010:	d902      	bls.n	8012018 <memmove+0x10>
 8012012:	4284      	cmp	r4, r0
 8012014:	4623      	mov	r3, r4
 8012016:	d807      	bhi.n	8012028 <memmove+0x20>
 8012018:	1e43      	subs	r3, r0, #1
 801201a:	42a1      	cmp	r1, r4
 801201c:	d008      	beq.n	8012030 <memmove+0x28>
 801201e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012022:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012026:	e7f8      	b.n	801201a <memmove+0x12>
 8012028:	4402      	add	r2, r0
 801202a:	4601      	mov	r1, r0
 801202c:	428a      	cmp	r2, r1
 801202e:	d100      	bne.n	8012032 <memmove+0x2a>
 8012030:	bd10      	pop	{r4, pc}
 8012032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801203a:	e7f7      	b.n	801202c <memmove+0x24>

0801203c <_realloc_r>:
 801203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801203e:	4607      	mov	r7, r0
 8012040:	4614      	mov	r4, r2
 8012042:	460e      	mov	r6, r1
 8012044:	b921      	cbnz	r1, 8012050 <_realloc_r+0x14>
 8012046:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801204a:	4611      	mov	r1, r2
 801204c:	f7fb bf88 	b.w	800df60 <_malloc_r>
 8012050:	b922      	cbnz	r2, 801205c <_realloc_r+0x20>
 8012052:	f7ff fdc1 	bl	8011bd8 <_free_r>
 8012056:	4625      	mov	r5, r4
 8012058:	4628      	mov	r0, r5
 801205a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801205c:	f000 fa9a 	bl	8012594 <_malloc_usable_size_r>
 8012060:	42a0      	cmp	r0, r4
 8012062:	d20f      	bcs.n	8012084 <_realloc_r+0x48>
 8012064:	4621      	mov	r1, r4
 8012066:	4638      	mov	r0, r7
 8012068:	f7fb ff7a 	bl	800df60 <_malloc_r>
 801206c:	4605      	mov	r5, r0
 801206e:	2800      	cmp	r0, #0
 8012070:	d0f2      	beq.n	8012058 <_realloc_r+0x1c>
 8012072:	4631      	mov	r1, r6
 8012074:	4622      	mov	r2, r4
 8012076:	f7fb ff5c 	bl	800df32 <memcpy>
 801207a:	4631      	mov	r1, r6
 801207c:	4638      	mov	r0, r7
 801207e:	f7ff fdab 	bl	8011bd8 <_free_r>
 8012082:	e7e9      	b.n	8012058 <_realloc_r+0x1c>
 8012084:	4635      	mov	r5, r6
 8012086:	e7e7      	b.n	8012058 <_realloc_r+0x1c>

08012088 <__sfputc_r>:
 8012088:	6893      	ldr	r3, [r2, #8]
 801208a:	3b01      	subs	r3, #1
 801208c:	2b00      	cmp	r3, #0
 801208e:	b410      	push	{r4}
 8012090:	6093      	str	r3, [r2, #8]
 8012092:	da08      	bge.n	80120a6 <__sfputc_r+0x1e>
 8012094:	6994      	ldr	r4, [r2, #24]
 8012096:	42a3      	cmp	r3, r4
 8012098:	db01      	blt.n	801209e <__sfputc_r+0x16>
 801209a:	290a      	cmp	r1, #10
 801209c:	d103      	bne.n	80120a6 <__sfputc_r+0x1e>
 801209e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120a2:	f000 b94b 	b.w	801233c <__swbuf_r>
 80120a6:	6813      	ldr	r3, [r2, #0]
 80120a8:	1c58      	adds	r0, r3, #1
 80120aa:	6010      	str	r0, [r2, #0]
 80120ac:	7019      	strb	r1, [r3, #0]
 80120ae:	4608      	mov	r0, r1
 80120b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120b4:	4770      	bx	lr

080120b6 <__sfputs_r>:
 80120b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120b8:	4606      	mov	r6, r0
 80120ba:	460f      	mov	r7, r1
 80120bc:	4614      	mov	r4, r2
 80120be:	18d5      	adds	r5, r2, r3
 80120c0:	42ac      	cmp	r4, r5
 80120c2:	d101      	bne.n	80120c8 <__sfputs_r+0x12>
 80120c4:	2000      	movs	r0, #0
 80120c6:	e007      	b.n	80120d8 <__sfputs_r+0x22>
 80120c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120cc:	463a      	mov	r2, r7
 80120ce:	4630      	mov	r0, r6
 80120d0:	f7ff ffda 	bl	8012088 <__sfputc_r>
 80120d4:	1c43      	adds	r3, r0, #1
 80120d6:	d1f3      	bne.n	80120c0 <__sfputs_r+0xa>
 80120d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080120dc <_vfiprintf_r>:
 80120dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e0:	460d      	mov	r5, r1
 80120e2:	b09d      	sub	sp, #116	; 0x74
 80120e4:	4614      	mov	r4, r2
 80120e6:	4698      	mov	r8, r3
 80120e8:	4606      	mov	r6, r0
 80120ea:	b118      	cbz	r0, 80120f4 <_vfiprintf_r+0x18>
 80120ec:	6983      	ldr	r3, [r0, #24]
 80120ee:	b90b      	cbnz	r3, 80120f4 <_vfiprintf_r+0x18>
 80120f0:	f7fb fe5a 	bl	800dda8 <__sinit>
 80120f4:	4b89      	ldr	r3, [pc, #548]	; (801231c <_vfiprintf_r+0x240>)
 80120f6:	429d      	cmp	r5, r3
 80120f8:	d11b      	bne.n	8012132 <_vfiprintf_r+0x56>
 80120fa:	6875      	ldr	r5, [r6, #4]
 80120fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120fe:	07d9      	lsls	r1, r3, #31
 8012100:	d405      	bmi.n	801210e <_vfiprintf_r+0x32>
 8012102:	89ab      	ldrh	r3, [r5, #12]
 8012104:	059a      	lsls	r2, r3, #22
 8012106:	d402      	bmi.n	801210e <_vfiprintf_r+0x32>
 8012108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801210a:	f7fb ff10 	bl	800df2e <__retarget_lock_acquire_recursive>
 801210e:	89ab      	ldrh	r3, [r5, #12]
 8012110:	071b      	lsls	r3, r3, #28
 8012112:	d501      	bpl.n	8012118 <_vfiprintf_r+0x3c>
 8012114:	692b      	ldr	r3, [r5, #16]
 8012116:	b9eb      	cbnz	r3, 8012154 <_vfiprintf_r+0x78>
 8012118:	4629      	mov	r1, r5
 801211a:	4630      	mov	r0, r6
 801211c:	f000 f960 	bl	80123e0 <__swsetup_r>
 8012120:	b1c0      	cbz	r0, 8012154 <_vfiprintf_r+0x78>
 8012122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012124:	07dc      	lsls	r4, r3, #31
 8012126:	d50e      	bpl.n	8012146 <_vfiprintf_r+0x6a>
 8012128:	f04f 30ff 	mov.w	r0, #4294967295
 801212c:	b01d      	add	sp, #116	; 0x74
 801212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012132:	4b7b      	ldr	r3, [pc, #492]	; (8012320 <_vfiprintf_r+0x244>)
 8012134:	429d      	cmp	r5, r3
 8012136:	d101      	bne.n	801213c <_vfiprintf_r+0x60>
 8012138:	68b5      	ldr	r5, [r6, #8]
 801213a:	e7df      	b.n	80120fc <_vfiprintf_r+0x20>
 801213c:	4b79      	ldr	r3, [pc, #484]	; (8012324 <_vfiprintf_r+0x248>)
 801213e:	429d      	cmp	r5, r3
 8012140:	bf08      	it	eq
 8012142:	68f5      	ldreq	r5, [r6, #12]
 8012144:	e7da      	b.n	80120fc <_vfiprintf_r+0x20>
 8012146:	89ab      	ldrh	r3, [r5, #12]
 8012148:	0598      	lsls	r0, r3, #22
 801214a:	d4ed      	bmi.n	8012128 <_vfiprintf_r+0x4c>
 801214c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801214e:	f7fb feef 	bl	800df30 <__retarget_lock_release_recursive>
 8012152:	e7e9      	b.n	8012128 <_vfiprintf_r+0x4c>
 8012154:	2300      	movs	r3, #0
 8012156:	9309      	str	r3, [sp, #36]	; 0x24
 8012158:	2320      	movs	r3, #32
 801215a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801215e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012162:	2330      	movs	r3, #48	; 0x30
 8012164:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012328 <_vfiprintf_r+0x24c>
 8012168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801216c:	f04f 0901 	mov.w	r9, #1
 8012170:	4623      	mov	r3, r4
 8012172:	469a      	mov	sl, r3
 8012174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012178:	b10a      	cbz	r2, 801217e <_vfiprintf_r+0xa2>
 801217a:	2a25      	cmp	r2, #37	; 0x25
 801217c:	d1f9      	bne.n	8012172 <_vfiprintf_r+0x96>
 801217e:	ebba 0b04 	subs.w	fp, sl, r4
 8012182:	d00b      	beq.n	801219c <_vfiprintf_r+0xc0>
 8012184:	465b      	mov	r3, fp
 8012186:	4622      	mov	r2, r4
 8012188:	4629      	mov	r1, r5
 801218a:	4630      	mov	r0, r6
 801218c:	f7ff ff93 	bl	80120b6 <__sfputs_r>
 8012190:	3001      	adds	r0, #1
 8012192:	f000 80aa 	beq.w	80122ea <_vfiprintf_r+0x20e>
 8012196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012198:	445a      	add	r2, fp
 801219a:	9209      	str	r2, [sp, #36]	; 0x24
 801219c:	f89a 3000 	ldrb.w	r3, [sl]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f000 80a2 	beq.w	80122ea <_vfiprintf_r+0x20e>
 80121a6:	2300      	movs	r3, #0
 80121a8:	f04f 32ff 	mov.w	r2, #4294967295
 80121ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121b0:	f10a 0a01 	add.w	sl, sl, #1
 80121b4:	9304      	str	r3, [sp, #16]
 80121b6:	9307      	str	r3, [sp, #28]
 80121b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121bc:	931a      	str	r3, [sp, #104]	; 0x68
 80121be:	4654      	mov	r4, sl
 80121c0:	2205      	movs	r2, #5
 80121c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121c6:	4858      	ldr	r0, [pc, #352]	; (8012328 <_vfiprintf_r+0x24c>)
 80121c8:	f7ee f80a 	bl	80001e0 <memchr>
 80121cc:	9a04      	ldr	r2, [sp, #16]
 80121ce:	b9d8      	cbnz	r0, 8012208 <_vfiprintf_r+0x12c>
 80121d0:	06d1      	lsls	r1, r2, #27
 80121d2:	bf44      	itt	mi
 80121d4:	2320      	movmi	r3, #32
 80121d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121da:	0713      	lsls	r3, r2, #28
 80121dc:	bf44      	itt	mi
 80121de:	232b      	movmi	r3, #43	; 0x2b
 80121e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121e4:	f89a 3000 	ldrb.w	r3, [sl]
 80121e8:	2b2a      	cmp	r3, #42	; 0x2a
 80121ea:	d015      	beq.n	8012218 <_vfiprintf_r+0x13c>
 80121ec:	9a07      	ldr	r2, [sp, #28]
 80121ee:	4654      	mov	r4, sl
 80121f0:	2000      	movs	r0, #0
 80121f2:	f04f 0c0a 	mov.w	ip, #10
 80121f6:	4621      	mov	r1, r4
 80121f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121fc:	3b30      	subs	r3, #48	; 0x30
 80121fe:	2b09      	cmp	r3, #9
 8012200:	d94e      	bls.n	80122a0 <_vfiprintf_r+0x1c4>
 8012202:	b1b0      	cbz	r0, 8012232 <_vfiprintf_r+0x156>
 8012204:	9207      	str	r2, [sp, #28]
 8012206:	e014      	b.n	8012232 <_vfiprintf_r+0x156>
 8012208:	eba0 0308 	sub.w	r3, r0, r8
 801220c:	fa09 f303 	lsl.w	r3, r9, r3
 8012210:	4313      	orrs	r3, r2
 8012212:	9304      	str	r3, [sp, #16]
 8012214:	46a2      	mov	sl, r4
 8012216:	e7d2      	b.n	80121be <_vfiprintf_r+0xe2>
 8012218:	9b03      	ldr	r3, [sp, #12]
 801221a:	1d19      	adds	r1, r3, #4
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	9103      	str	r1, [sp, #12]
 8012220:	2b00      	cmp	r3, #0
 8012222:	bfbb      	ittet	lt
 8012224:	425b      	neglt	r3, r3
 8012226:	f042 0202 	orrlt.w	r2, r2, #2
 801222a:	9307      	strge	r3, [sp, #28]
 801222c:	9307      	strlt	r3, [sp, #28]
 801222e:	bfb8      	it	lt
 8012230:	9204      	strlt	r2, [sp, #16]
 8012232:	7823      	ldrb	r3, [r4, #0]
 8012234:	2b2e      	cmp	r3, #46	; 0x2e
 8012236:	d10c      	bne.n	8012252 <_vfiprintf_r+0x176>
 8012238:	7863      	ldrb	r3, [r4, #1]
 801223a:	2b2a      	cmp	r3, #42	; 0x2a
 801223c:	d135      	bne.n	80122aa <_vfiprintf_r+0x1ce>
 801223e:	9b03      	ldr	r3, [sp, #12]
 8012240:	1d1a      	adds	r2, r3, #4
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	9203      	str	r2, [sp, #12]
 8012246:	2b00      	cmp	r3, #0
 8012248:	bfb8      	it	lt
 801224a:	f04f 33ff 	movlt.w	r3, #4294967295
 801224e:	3402      	adds	r4, #2
 8012250:	9305      	str	r3, [sp, #20]
 8012252:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012338 <_vfiprintf_r+0x25c>
 8012256:	7821      	ldrb	r1, [r4, #0]
 8012258:	2203      	movs	r2, #3
 801225a:	4650      	mov	r0, sl
 801225c:	f7ed ffc0 	bl	80001e0 <memchr>
 8012260:	b140      	cbz	r0, 8012274 <_vfiprintf_r+0x198>
 8012262:	2340      	movs	r3, #64	; 0x40
 8012264:	eba0 000a 	sub.w	r0, r0, sl
 8012268:	fa03 f000 	lsl.w	r0, r3, r0
 801226c:	9b04      	ldr	r3, [sp, #16]
 801226e:	4303      	orrs	r3, r0
 8012270:	3401      	adds	r4, #1
 8012272:	9304      	str	r3, [sp, #16]
 8012274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012278:	482c      	ldr	r0, [pc, #176]	; (801232c <_vfiprintf_r+0x250>)
 801227a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801227e:	2206      	movs	r2, #6
 8012280:	f7ed ffae 	bl	80001e0 <memchr>
 8012284:	2800      	cmp	r0, #0
 8012286:	d03f      	beq.n	8012308 <_vfiprintf_r+0x22c>
 8012288:	4b29      	ldr	r3, [pc, #164]	; (8012330 <_vfiprintf_r+0x254>)
 801228a:	bb1b      	cbnz	r3, 80122d4 <_vfiprintf_r+0x1f8>
 801228c:	9b03      	ldr	r3, [sp, #12]
 801228e:	3307      	adds	r3, #7
 8012290:	f023 0307 	bic.w	r3, r3, #7
 8012294:	3308      	adds	r3, #8
 8012296:	9303      	str	r3, [sp, #12]
 8012298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801229a:	443b      	add	r3, r7
 801229c:	9309      	str	r3, [sp, #36]	; 0x24
 801229e:	e767      	b.n	8012170 <_vfiprintf_r+0x94>
 80122a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80122a4:	460c      	mov	r4, r1
 80122a6:	2001      	movs	r0, #1
 80122a8:	e7a5      	b.n	80121f6 <_vfiprintf_r+0x11a>
 80122aa:	2300      	movs	r3, #0
 80122ac:	3401      	adds	r4, #1
 80122ae:	9305      	str	r3, [sp, #20]
 80122b0:	4619      	mov	r1, r3
 80122b2:	f04f 0c0a 	mov.w	ip, #10
 80122b6:	4620      	mov	r0, r4
 80122b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122bc:	3a30      	subs	r2, #48	; 0x30
 80122be:	2a09      	cmp	r2, #9
 80122c0:	d903      	bls.n	80122ca <_vfiprintf_r+0x1ee>
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d0c5      	beq.n	8012252 <_vfiprintf_r+0x176>
 80122c6:	9105      	str	r1, [sp, #20]
 80122c8:	e7c3      	b.n	8012252 <_vfiprintf_r+0x176>
 80122ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80122ce:	4604      	mov	r4, r0
 80122d0:	2301      	movs	r3, #1
 80122d2:	e7f0      	b.n	80122b6 <_vfiprintf_r+0x1da>
 80122d4:	ab03      	add	r3, sp, #12
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	462a      	mov	r2, r5
 80122da:	4b16      	ldr	r3, [pc, #88]	; (8012334 <_vfiprintf_r+0x258>)
 80122dc:	a904      	add	r1, sp, #16
 80122de:	4630      	mov	r0, r6
 80122e0:	f7fb ff38 	bl	800e154 <_printf_float>
 80122e4:	4607      	mov	r7, r0
 80122e6:	1c78      	adds	r0, r7, #1
 80122e8:	d1d6      	bne.n	8012298 <_vfiprintf_r+0x1bc>
 80122ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122ec:	07d9      	lsls	r1, r3, #31
 80122ee:	d405      	bmi.n	80122fc <_vfiprintf_r+0x220>
 80122f0:	89ab      	ldrh	r3, [r5, #12]
 80122f2:	059a      	lsls	r2, r3, #22
 80122f4:	d402      	bmi.n	80122fc <_vfiprintf_r+0x220>
 80122f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122f8:	f7fb fe1a 	bl	800df30 <__retarget_lock_release_recursive>
 80122fc:	89ab      	ldrh	r3, [r5, #12]
 80122fe:	065b      	lsls	r3, r3, #25
 8012300:	f53f af12 	bmi.w	8012128 <_vfiprintf_r+0x4c>
 8012304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012306:	e711      	b.n	801212c <_vfiprintf_r+0x50>
 8012308:	ab03      	add	r3, sp, #12
 801230a:	9300      	str	r3, [sp, #0]
 801230c:	462a      	mov	r2, r5
 801230e:	4b09      	ldr	r3, [pc, #36]	; (8012334 <_vfiprintf_r+0x258>)
 8012310:	a904      	add	r1, sp, #16
 8012312:	4630      	mov	r0, r6
 8012314:	f7fc f9c2 	bl	800e69c <_printf_i>
 8012318:	e7e4      	b.n	80122e4 <_vfiprintf_r+0x208>
 801231a:	bf00      	nop
 801231c:	080142c8 	.word	0x080142c8
 8012320:	080142e8 	.word	0x080142e8
 8012324:	080142a8 	.word	0x080142a8
 8012328:	0801470c 	.word	0x0801470c
 801232c:	08014716 	.word	0x08014716
 8012330:	0800e155 	.word	0x0800e155
 8012334:	080120b7 	.word	0x080120b7
 8012338:	08014712 	.word	0x08014712

0801233c <__swbuf_r>:
 801233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801233e:	460e      	mov	r6, r1
 8012340:	4614      	mov	r4, r2
 8012342:	4605      	mov	r5, r0
 8012344:	b118      	cbz	r0, 801234e <__swbuf_r+0x12>
 8012346:	6983      	ldr	r3, [r0, #24]
 8012348:	b90b      	cbnz	r3, 801234e <__swbuf_r+0x12>
 801234a:	f7fb fd2d 	bl	800dda8 <__sinit>
 801234e:	4b21      	ldr	r3, [pc, #132]	; (80123d4 <__swbuf_r+0x98>)
 8012350:	429c      	cmp	r4, r3
 8012352:	d12b      	bne.n	80123ac <__swbuf_r+0x70>
 8012354:	686c      	ldr	r4, [r5, #4]
 8012356:	69a3      	ldr	r3, [r4, #24]
 8012358:	60a3      	str	r3, [r4, #8]
 801235a:	89a3      	ldrh	r3, [r4, #12]
 801235c:	071a      	lsls	r2, r3, #28
 801235e:	d52f      	bpl.n	80123c0 <__swbuf_r+0x84>
 8012360:	6923      	ldr	r3, [r4, #16]
 8012362:	b36b      	cbz	r3, 80123c0 <__swbuf_r+0x84>
 8012364:	6923      	ldr	r3, [r4, #16]
 8012366:	6820      	ldr	r0, [r4, #0]
 8012368:	1ac0      	subs	r0, r0, r3
 801236a:	6963      	ldr	r3, [r4, #20]
 801236c:	b2f6      	uxtb	r6, r6
 801236e:	4283      	cmp	r3, r0
 8012370:	4637      	mov	r7, r6
 8012372:	dc04      	bgt.n	801237e <__swbuf_r+0x42>
 8012374:	4621      	mov	r1, r4
 8012376:	4628      	mov	r0, r5
 8012378:	f7fe fb7c 	bl	8010a74 <_fflush_r>
 801237c:	bb30      	cbnz	r0, 80123cc <__swbuf_r+0x90>
 801237e:	68a3      	ldr	r3, [r4, #8]
 8012380:	3b01      	subs	r3, #1
 8012382:	60a3      	str	r3, [r4, #8]
 8012384:	6823      	ldr	r3, [r4, #0]
 8012386:	1c5a      	adds	r2, r3, #1
 8012388:	6022      	str	r2, [r4, #0]
 801238a:	701e      	strb	r6, [r3, #0]
 801238c:	6963      	ldr	r3, [r4, #20]
 801238e:	3001      	adds	r0, #1
 8012390:	4283      	cmp	r3, r0
 8012392:	d004      	beq.n	801239e <__swbuf_r+0x62>
 8012394:	89a3      	ldrh	r3, [r4, #12]
 8012396:	07db      	lsls	r3, r3, #31
 8012398:	d506      	bpl.n	80123a8 <__swbuf_r+0x6c>
 801239a:	2e0a      	cmp	r6, #10
 801239c:	d104      	bne.n	80123a8 <__swbuf_r+0x6c>
 801239e:	4621      	mov	r1, r4
 80123a0:	4628      	mov	r0, r5
 80123a2:	f7fe fb67 	bl	8010a74 <_fflush_r>
 80123a6:	b988      	cbnz	r0, 80123cc <__swbuf_r+0x90>
 80123a8:	4638      	mov	r0, r7
 80123aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123ac:	4b0a      	ldr	r3, [pc, #40]	; (80123d8 <__swbuf_r+0x9c>)
 80123ae:	429c      	cmp	r4, r3
 80123b0:	d101      	bne.n	80123b6 <__swbuf_r+0x7a>
 80123b2:	68ac      	ldr	r4, [r5, #8]
 80123b4:	e7cf      	b.n	8012356 <__swbuf_r+0x1a>
 80123b6:	4b09      	ldr	r3, [pc, #36]	; (80123dc <__swbuf_r+0xa0>)
 80123b8:	429c      	cmp	r4, r3
 80123ba:	bf08      	it	eq
 80123bc:	68ec      	ldreq	r4, [r5, #12]
 80123be:	e7ca      	b.n	8012356 <__swbuf_r+0x1a>
 80123c0:	4621      	mov	r1, r4
 80123c2:	4628      	mov	r0, r5
 80123c4:	f000 f80c 	bl	80123e0 <__swsetup_r>
 80123c8:	2800      	cmp	r0, #0
 80123ca:	d0cb      	beq.n	8012364 <__swbuf_r+0x28>
 80123cc:	f04f 37ff 	mov.w	r7, #4294967295
 80123d0:	e7ea      	b.n	80123a8 <__swbuf_r+0x6c>
 80123d2:	bf00      	nop
 80123d4:	080142c8 	.word	0x080142c8
 80123d8:	080142e8 	.word	0x080142e8
 80123dc:	080142a8 	.word	0x080142a8

080123e0 <__swsetup_r>:
 80123e0:	4b32      	ldr	r3, [pc, #200]	; (80124ac <__swsetup_r+0xcc>)
 80123e2:	b570      	push	{r4, r5, r6, lr}
 80123e4:	681d      	ldr	r5, [r3, #0]
 80123e6:	4606      	mov	r6, r0
 80123e8:	460c      	mov	r4, r1
 80123ea:	b125      	cbz	r5, 80123f6 <__swsetup_r+0x16>
 80123ec:	69ab      	ldr	r3, [r5, #24]
 80123ee:	b913      	cbnz	r3, 80123f6 <__swsetup_r+0x16>
 80123f0:	4628      	mov	r0, r5
 80123f2:	f7fb fcd9 	bl	800dda8 <__sinit>
 80123f6:	4b2e      	ldr	r3, [pc, #184]	; (80124b0 <__swsetup_r+0xd0>)
 80123f8:	429c      	cmp	r4, r3
 80123fa:	d10f      	bne.n	801241c <__swsetup_r+0x3c>
 80123fc:	686c      	ldr	r4, [r5, #4]
 80123fe:	89a3      	ldrh	r3, [r4, #12]
 8012400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012404:	0719      	lsls	r1, r3, #28
 8012406:	d42c      	bmi.n	8012462 <__swsetup_r+0x82>
 8012408:	06dd      	lsls	r5, r3, #27
 801240a:	d411      	bmi.n	8012430 <__swsetup_r+0x50>
 801240c:	2309      	movs	r3, #9
 801240e:	6033      	str	r3, [r6, #0]
 8012410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012414:	81a3      	strh	r3, [r4, #12]
 8012416:	f04f 30ff 	mov.w	r0, #4294967295
 801241a:	e03e      	b.n	801249a <__swsetup_r+0xba>
 801241c:	4b25      	ldr	r3, [pc, #148]	; (80124b4 <__swsetup_r+0xd4>)
 801241e:	429c      	cmp	r4, r3
 8012420:	d101      	bne.n	8012426 <__swsetup_r+0x46>
 8012422:	68ac      	ldr	r4, [r5, #8]
 8012424:	e7eb      	b.n	80123fe <__swsetup_r+0x1e>
 8012426:	4b24      	ldr	r3, [pc, #144]	; (80124b8 <__swsetup_r+0xd8>)
 8012428:	429c      	cmp	r4, r3
 801242a:	bf08      	it	eq
 801242c:	68ec      	ldreq	r4, [r5, #12]
 801242e:	e7e6      	b.n	80123fe <__swsetup_r+0x1e>
 8012430:	0758      	lsls	r0, r3, #29
 8012432:	d512      	bpl.n	801245a <__swsetup_r+0x7a>
 8012434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012436:	b141      	cbz	r1, 801244a <__swsetup_r+0x6a>
 8012438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801243c:	4299      	cmp	r1, r3
 801243e:	d002      	beq.n	8012446 <__swsetup_r+0x66>
 8012440:	4630      	mov	r0, r6
 8012442:	f7ff fbc9 	bl	8011bd8 <_free_r>
 8012446:	2300      	movs	r3, #0
 8012448:	6363      	str	r3, [r4, #52]	; 0x34
 801244a:	89a3      	ldrh	r3, [r4, #12]
 801244c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012450:	81a3      	strh	r3, [r4, #12]
 8012452:	2300      	movs	r3, #0
 8012454:	6063      	str	r3, [r4, #4]
 8012456:	6923      	ldr	r3, [r4, #16]
 8012458:	6023      	str	r3, [r4, #0]
 801245a:	89a3      	ldrh	r3, [r4, #12]
 801245c:	f043 0308 	orr.w	r3, r3, #8
 8012460:	81a3      	strh	r3, [r4, #12]
 8012462:	6923      	ldr	r3, [r4, #16]
 8012464:	b94b      	cbnz	r3, 801247a <__swsetup_r+0x9a>
 8012466:	89a3      	ldrh	r3, [r4, #12]
 8012468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801246c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012470:	d003      	beq.n	801247a <__swsetup_r+0x9a>
 8012472:	4621      	mov	r1, r4
 8012474:	4630      	mov	r0, r6
 8012476:	f000 f84d 	bl	8012514 <__smakebuf_r>
 801247a:	89a0      	ldrh	r0, [r4, #12]
 801247c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012480:	f010 0301 	ands.w	r3, r0, #1
 8012484:	d00a      	beq.n	801249c <__swsetup_r+0xbc>
 8012486:	2300      	movs	r3, #0
 8012488:	60a3      	str	r3, [r4, #8]
 801248a:	6963      	ldr	r3, [r4, #20]
 801248c:	425b      	negs	r3, r3
 801248e:	61a3      	str	r3, [r4, #24]
 8012490:	6923      	ldr	r3, [r4, #16]
 8012492:	b943      	cbnz	r3, 80124a6 <__swsetup_r+0xc6>
 8012494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012498:	d1ba      	bne.n	8012410 <__swsetup_r+0x30>
 801249a:	bd70      	pop	{r4, r5, r6, pc}
 801249c:	0781      	lsls	r1, r0, #30
 801249e:	bf58      	it	pl
 80124a0:	6963      	ldrpl	r3, [r4, #20]
 80124a2:	60a3      	str	r3, [r4, #8]
 80124a4:	e7f4      	b.n	8012490 <__swsetup_r+0xb0>
 80124a6:	2000      	movs	r0, #0
 80124a8:	e7f7      	b.n	801249a <__swsetup_r+0xba>
 80124aa:	bf00      	nop
 80124ac:	20000048 	.word	0x20000048
 80124b0:	080142c8 	.word	0x080142c8
 80124b4:	080142e8 	.word	0x080142e8
 80124b8:	080142a8 	.word	0x080142a8

080124bc <abort>:
 80124bc:	b508      	push	{r3, lr}
 80124be:	2006      	movs	r0, #6
 80124c0:	f000 f898 	bl	80125f4 <raise>
 80124c4:	2001      	movs	r0, #1
 80124c6:	f7f2 fb2d 	bl	8004b24 <_exit>

080124ca <__swhatbuf_r>:
 80124ca:	b570      	push	{r4, r5, r6, lr}
 80124cc:	460e      	mov	r6, r1
 80124ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124d2:	2900      	cmp	r1, #0
 80124d4:	b096      	sub	sp, #88	; 0x58
 80124d6:	4614      	mov	r4, r2
 80124d8:	461d      	mov	r5, r3
 80124da:	da07      	bge.n	80124ec <__swhatbuf_r+0x22>
 80124dc:	2300      	movs	r3, #0
 80124de:	602b      	str	r3, [r5, #0]
 80124e0:	89b3      	ldrh	r3, [r6, #12]
 80124e2:	061a      	lsls	r2, r3, #24
 80124e4:	d410      	bmi.n	8012508 <__swhatbuf_r+0x3e>
 80124e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124ea:	e00e      	b.n	801250a <__swhatbuf_r+0x40>
 80124ec:	466a      	mov	r2, sp
 80124ee:	f000 f89d 	bl	801262c <_fstat_r>
 80124f2:	2800      	cmp	r0, #0
 80124f4:	dbf2      	blt.n	80124dc <__swhatbuf_r+0x12>
 80124f6:	9a01      	ldr	r2, [sp, #4]
 80124f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80124fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012500:	425a      	negs	r2, r3
 8012502:	415a      	adcs	r2, r3
 8012504:	602a      	str	r2, [r5, #0]
 8012506:	e7ee      	b.n	80124e6 <__swhatbuf_r+0x1c>
 8012508:	2340      	movs	r3, #64	; 0x40
 801250a:	2000      	movs	r0, #0
 801250c:	6023      	str	r3, [r4, #0]
 801250e:	b016      	add	sp, #88	; 0x58
 8012510:	bd70      	pop	{r4, r5, r6, pc}
	...

08012514 <__smakebuf_r>:
 8012514:	898b      	ldrh	r3, [r1, #12]
 8012516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012518:	079d      	lsls	r5, r3, #30
 801251a:	4606      	mov	r6, r0
 801251c:	460c      	mov	r4, r1
 801251e:	d507      	bpl.n	8012530 <__smakebuf_r+0x1c>
 8012520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012524:	6023      	str	r3, [r4, #0]
 8012526:	6123      	str	r3, [r4, #16]
 8012528:	2301      	movs	r3, #1
 801252a:	6163      	str	r3, [r4, #20]
 801252c:	b002      	add	sp, #8
 801252e:	bd70      	pop	{r4, r5, r6, pc}
 8012530:	ab01      	add	r3, sp, #4
 8012532:	466a      	mov	r2, sp
 8012534:	f7ff ffc9 	bl	80124ca <__swhatbuf_r>
 8012538:	9900      	ldr	r1, [sp, #0]
 801253a:	4605      	mov	r5, r0
 801253c:	4630      	mov	r0, r6
 801253e:	f7fb fd0f 	bl	800df60 <_malloc_r>
 8012542:	b948      	cbnz	r0, 8012558 <__smakebuf_r+0x44>
 8012544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012548:	059a      	lsls	r2, r3, #22
 801254a:	d4ef      	bmi.n	801252c <__smakebuf_r+0x18>
 801254c:	f023 0303 	bic.w	r3, r3, #3
 8012550:	f043 0302 	orr.w	r3, r3, #2
 8012554:	81a3      	strh	r3, [r4, #12]
 8012556:	e7e3      	b.n	8012520 <__smakebuf_r+0xc>
 8012558:	4b0d      	ldr	r3, [pc, #52]	; (8012590 <__smakebuf_r+0x7c>)
 801255a:	62b3      	str	r3, [r6, #40]	; 0x28
 801255c:	89a3      	ldrh	r3, [r4, #12]
 801255e:	6020      	str	r0, [r4, #0]
 8012560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012564:	81a3      	strh	r3, [r4, #12]
 8012566:	9b00      	ldr	r3, [sp, #0]
 8012568:	6163      	str	r3, [r4, #20]
 801256a:	9b01      	ldr	r3, [sp, #4]
 801256c:	6120      	str	r0, [r4, #16]
 801256e:	b15b      	cbz	r3, 8012588 <__smakebuf_r+0x74>
 8012570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012574:	4630      	mov	r0, r6
 8012576:	f000 f86b 	bl	8012650 <_isatty_r>
 801257a:	b128      	cbz	r0, 8012588 <__smakebuf_r+0x74>
 801257c:	89a3      	ldrh	r3, [r4, #12]
 801257e:	f023 0303 	bic.w	r3, r3, #3
 8012582:	f043 0301 	orr.w	r3, r3, #1
 8012586:	81a3      	strh	r3, [r4, #12]
 8012588:	89a0      	ldrh	r0, [r4, #12]
 801258a:	4305      	orrs	r5, r0
 801258c:	81a5      	strh	r5, [r4, #12]
 801258e:	e7cd      	b.n	801252c <__smakebuf_r+0x18>
 8012590:	0800dd41 	.word	0x0800dd41

08012594 <_malloc_usable_size_r>:
 8012594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012598:	1f18      	subs	r0, r3, #4
 801259a:	2b00      	cmp	r3, #0
 801259c:	bfbc      	itt	lt
 801259e:	580b      	ldrlt	r3, [r1, r0]
 80125a0:	18c0      	addlt	r0, r0, r3
 80125a2:	4770      	bx	lr

080125a4 <_raise_r>:
 80125a4:	291f      	cmp	r1, #31
 80125a6:	b538      	push	{r3, r4, r5, lr}
 80125a8:	4604      	mov	r4, r0
 80125aa:	460d      	mov	r5, r1
 80125ac:	d904      	bls.n	80125b8 <_raise_r+0x14>
 80125ae:	2316      	movs	r3, #22
 80125b0:	6003      	str	r3, [r0, #0]
 80125b2:	f04f 30ff 	mov.w	r0, #4294967295
 80125b6:	bd38      	pop	{r3, r4, r5, pc}
 80125b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80125ba:	b112      	cbz	r2, 80125c2 <_raise_r+0x1e>
 80125bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80125c0:	b94b      	cbnz	r3, 80125d6 <_raise_r+0x32>
 80125c2:	4620      	mov	r0, r4
 80125c4:	f000 f830 	bl	8012628 <_getpid_r>
 80125c8:	462a      	mov	r2, r5
 80125ca:	4601      	mov	r1, r0
 80125cc:	4620      	mov	r0, r4
 80125ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125d2:	f000 b817 	b.w	8012604 <_kill_r>
 80125d6:	2b01      	cmp	r3, #1
 80125d8:	d00a      	beq.n	80125f0 <_raise_r+0x4c>
 80125da:	1c59      	adds	r1, r3, #1
 80125dc:	d103      	bne.n	80125e6 <_raise_r+0x42>
 80125de:	2316      	movs	r3, #22
 80125e0:	6003      	str	r3, [r0, #0]
 80125e2:	2001      	movs	r0, #1
 80125e4:	e7e7      	b.n	80125b6 <_raise_r+0x12>
 80125e6:	2400      	movs	r4, #0
 80125e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80125ec:	4628      	mov	r0, r5
 80125ee:	4798      	blx	r3
 80125f0:	2000      	movs	r0, #0
 80125f2:	e7e0      	b.n	80125b6 <_raise_r+0x12>

080125f4 <raise>:
 80125f4:	4b02      	ldr	r3, [pc, #8]	; (8012600 <raise+0xc>)
 80125f6:	4601      	mov	r1, r0
 80125f8:	6818      	ldr	r0, [r3, #0]
 80125fa:	f7ff bfd3 	b.w	80125a4 <_raise_r>
 80125fe:	bf00      	nop
 8012600:	20000048 	.word	0x20000048

08012604 <_kill_r>:
 8012604:	b538      	push	{r3, r4, r5, lr}
 8012606:	4d07      	ldr	r5, [pc, #28]	; (8012624 <_kill_r+0x20>)
 8012608:	2300      	movs	r3, #0
 801260a:	4604      	mov	r4, r0
 801260c:	4608      	mov	r0, r1
 801260e:	4611      	mov	r1, r2
 8012610:	602b      	str	r3, [r5, #0]
 8012612:	f7f2 fa77 	bl	8004b04 <_kill>
 8012616:	1c43      	adds	r3, r0, #1
 8012618:	d102      	bne.n	8012620 <_kill_r+0x1c>
 801261a:	682b      	ldr	r3, [r5, #0]
 801261c:	b103      	cbz	r3, 8012620 <_kill_r+0x1c>
 801261e:	6023      	str	r3, [r4, #0]
 8012620:	bd38      	pop	{r3, r4, r5, pc}
 8012622:	bf00      	nop
 8012624:	200063e4 	.word	0x200063e4

08012628 <_getpid_r>:
 8012628:	f7f2 ba64 	b.w	8004af4 <_getpid>

0801262c <_fstat_r>:
 801262c:	b538      	push	{r3, r4, r5, lr}
 801262e:	4d07      	ldr	r5, [pc, #28]	; (801264c <_fstat_r+0x20>)
 8012630:	2300      	movs	r3, #0
 8012632:	4604      	mov	r4, r0
 8012634:	4608      	mov	r0, r1
 8012636:	4611      	mov	r1, r2
 8012638:	602b      	str	r3, [r5, #0]
 801263a:	f7f2 fac2 	bl	8004bc2 <_fstat>
 801263e:	1c43      	adds	r3, r0, #1
 8012640:	d102      	bne.n	8012648 <_fstat_r+0x1c>
 8012642:	682b      	ldr	r3, [r5, #0]
 8012644:	b103      	cbz	r3, 8012648 <_fstat_r+0x1c>
 8012646:	6023      	str	r3, [r4, #0]
 8012648:	bd38      	pop	{r3, r4, r5, pc}
 801264a:	bf00      	nop
 801264c:	200063e4 	.word	0x200063e4

08012650 <_isatty_r>:
 8012650:	b538      	push	{r3, r4, r5, lr}
 8012652:	4d06      	ldr	r5, [pc, #24]	; (801266c <_isatty_r+0x1c>)
 8012654:	2300      	movs	r3, #0
 8012656:	4604      	mov	r4, r0
 8012658:	4608      	mov	r0, r1
 801265a:	602b      	str	r3, [r5, #0]
 801265c:	f7f2 fac1 	bl	8004be2 <_isatty>
 8012660:	1c43      	adds	r3, r0, #1
 8012662:	d102      	bne.n	801266a <_isatty_r+0x1a>
 8012664:	682b      	ldr	r3, [r5, #0]
 8012666:	b103      	cbz	r3, 801266a <_isatty_r+0x1a>
 8012668:	6023      	str	r3, [r4, #0]
 801266a:	bd38      	pop	{r3, r4, r5, pc}
 801266c:	200063e4 	.word	0x200063e4

08012670 <pow>:
 8012670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012674:	ec59 8b10 	vmov	r8, r9, d0
 8012678:	ec57 6b11 	vmov	r6, r7, d1
 801267c:	f000 f8a8 	bl	80127d0 <__ieee754_pow>
 8012680:	4b4e      	ldr	r3, [pc, #312]	; (80127bc <pow+0x14c>)
 8012682:	f993 3000 	ldrsb.w	r3, [r3]
 8012686:	3301      	adds	r3, #1
 8012688:	ec55 4b10 	vmov	r4, r5, d0
 801268c:	d015      	beq.n	80126ba <pow+0x4a>
 801268e:	4632      	mov	r2, r6
 8012690:	463b      	mov	r3, r7
 8012692:	4630      	mov	r0, r6
 8012694:	4639      	mov	r1, r7
 8012696:	f7ee fa49 	bl	8000b2c <__aeabi_dcmpun>
 801269a:	b970      	cbnz	r0, 80126ba <pow+0x4a>
 801269c:	4642      	mov	r2, r8
 801269e:	464b      	mov	r3, r9
 80126a0:	4640      	mov	r0, r8
 80126a2:	4649      	mov	r1, r9
 80126a4:	f7ee fa42 	bl	8000b2c <__aeabi_dcmpun>
 80126a8:	2200      	movs	r2, #0
 80126aa:	2300      	movs	r3, #0
 80126ac:	b148      	cbz	r0, 80126c2 <pow+0x52>
 80126ae:	4630      	mov	r0, r6
 80126b0:	4639      	mov	r1, r7
 80126b2:	f7ee fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 80126b6:	2800      	cmp	r0, #0
 80126b8:	d17d      	bne.n	80127b6 <pow+0x146>
 80126ba:	ec45 4b10 	vmov	d0, r4, r5
 80126be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126c2:	4640      	mov	r0, r8
 80126c4:	4649      	mov	r1, r9
 80126c6:	f7ee f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80126ca:	b1e0      	cbz	r0, 8012706 <pow+0x96>
 80126cc:	2200      	movs	r2, #0
 80126ce:	2300      	movs	r3, #0
 80126d0:	4630      	mov	r0, r6
 80126d2:	4639      	mov	r1, r7
 80126d4:	f7ee f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80126d8:	2800      	cmp	r0, #0
 80126da:	d16c      	bne.n	80127b6 <pow+0x146>
 80126dc:	ec47 6b10 	vmov	d0, r6, r7
 80126e0:	f000 fe55 	bl	801338e <finite>
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d0e8      	beq.n	80126ba <pow+0x4a>
 80126e8:	2200      	movs	r2, #0
 80126ea:	2300      	movs	r3, #0
 80126ec:	4630      	mov	r0, r6
 80126ee:	4639      	mov	r1, r7
 80126f0:	f7ee f9f4 	bl	8000adc <__aeabi_dcmplt>
 80126f4:	2800      	cmp	r0, #0
 80126f6:	d0e0      	beq.n	80126ba <pow+0x4a>
 80126f8:	f7fb faf8 	bl	800dcec <__errno>
 80126fc:	2321      	movs	r3, #33	; 0x21
 80126fe:	6003      	str	r3, [r0, #0]
 8012700:	2400      	movs	r4, #0
 8012702:	4d2f      	ldr	r5, [pc, #188]	; (80127c0 <pow+0x150>)
 8012704:	e7d9      	b.n	80126ba <pow+0x4a>
 8012706:	ec45 4b10 	vmov	d0, r4, r5
 801270a:	f000 fe40 	bl	801338e <finite>
 801270e:	bbb8      	cbnz	r0, 8012780 <pow+0x110>
 8012710:	ec49 8b10 	vmov	d0, r8, r9
 8012714:	f000 fe3b 	bl	801338e <finite>
 8012718:	b390      	cbz	r0, 8012780 <pow+0x110>
 801271a:	ec47 6b10 	vmov	d0, r6, r7
 801271e:	f000 fe36 	bl	801338e <finite>
 8012722:	b368      	cbz	r0, 8012780 <pow+0x110>
 8012724:	4622      	mov	r2, r4
 8012726:	462b      	mov	r3, r5
 8012728:	4620      	mov	r0, r4
 801272a:	4629      	mov	r1, r5
 801272c:	f7ee f9fe 	bl	8000b2c <__aeabi_dcmpun>
 8012730:	b160      	cbz	r0, 801274c <pow+0xdc>
 8012732:	f7fb fadb 	bl	800dcec <__errno>
 8012736:	2321      	movs	r3, #33	; 0x21
 8012738:	6003      	str	r3, [r0, #0]
 801273a:	2200      	movs	r2, #0
 801273c:	2300      	movs	r3, #0
 801273e:	4610      	mov	r0, r2
 8012740:	4619      	mov	r1, r3
 8012742:	f7ee f883 	bl	800084c <__aeabi_ddiv>
 8012746:	4604      	mov	r4, r0
 8012748:	460d      	mov	r5, r1
 801274a:	e7b6      	b.n	80126ba <pow+0x4a>
 801274c:	f7fb face 	bl	800dcec <__errno>
 8012750:	2322      	movs	r3, #34	; 0x22
 8012752:	6003      	str	r3, [r0, #0]
 8012754:	2200      	movs	r2, #0
 8012756:	2300      	movs	r3, #0
 8012758:	4640      	mov	r0, r8
 801275a:	4649      	mov	r1, r9
 801275c:	f7ee f9be 	bl	8000adc <__aeabi_dcmplt>
 8012760:	2400      	movs	r4, #0
 8012762:	b158      	cbz	r0, 801277c <pow+0x10c>
 8012764:	ec47 6b10 	vmov	d0, r6, r7
 8012768:	f000 fe1c 	bl	80133a4 <rint>
 801276c:	4632      	mov	r2, r6
 801276e:	ec51 0b10 	vmov	r0, r1, d0
 8012772:	463b      	mov	r3, r7
 8012774:	f7ee f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8012778:	2800      	cmp	r0, #0
 801277a:	d0c2      	beq.n	8012702 <pow+0x92>
 801277c:	4d11      	ldr	r5, [pc, #68]	; (80127c4 <pow+0x154>)
 801277e:	e79c      	b.n	80126ba <pow+0x4a>
 8012780:	2200      	movs	r2, #0
 8012782:	2300      	movs	r3, #0
 8012784:	4620      	mov	r0, r4
 8012786:	4629      	mov	r1, r5
 8012788:	f7ee f99e 	bl	8000ac8 <__aeabi_dcmpeq>
 801278c:	2800      	cmp	r0, #0
 801278e:	d094      	beq.n	80126ba <pow+0x4a>
 8012790:	ec49 8b10 	vmov	d0, r8, r9
 8012794:	f000 fdfb 	bl	801338e <finite>
 8012798:	2800      	cmp	r0, #0
 801279a:	d08e      	beq.n	80126ba <pow+0x4a>
 801279c:	ec47 6b10 	vmov	d0, r6, r7
 80127a0:	f000 fdf5 	bl	801338e <finite>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	d088      	beq.n	80126ba <pow+0x4a>
 80127a8:	f7fb faa0 	bl	800dcec <__errno>
 80127ac:	2322      	movs	r3, #34	; 0x22
 80127ae:	6003      	str	r3, [r0, #0]
 80127b0:	2400      	movs	r4, #0
 80127b2:	2500      	movs	r5, #0
 80127b4:	e781      	b.n	80126ba <pow+0x4a>
 80127b6:	4d04      	ldr	r5, [pc, #16]	; (80127c8 <pow+0x158>)
 80127b8:	2400      	movs	r4, #0
 80127ba:	e77e      	b.n	80126ba <pow+0x4a>
 80127bc:	2000021c 	.word	0x2000021c
 80127c0:	fff00000 	.word	0xfff00000
 80127c4:	7ff00000 	.word	0x7ff00000
 80127c8:	3ff00000 	.word	0x3ff00000
 80127cc:	00000000 	.word	0x00000000

080127d0 <__ieee754_pow>:
 80127d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d4:	ed2d 8b06 	vpush	{d8-d10}
 80127d8:	b08d      	sub	sp, #52	; 0x34
 80127da:	ed8d 1b02 	vstr	d1, [sp, #8]
 80127de:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80127e2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80127e6:	ea56 0100 	orrs.w	r1, r6, r0
 80127ea:	ec53 2b10 	vmov	r2, r3, d0
 80127ee:	f000 84d1 	beq.w	8013194 <__ieee754_pow+0x9c4>
 80127f2:	497f      	ldr	r1, [pc, #508]	; (80129f0 <__ieee754_pow+0x220>)
 80127f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80127f8:	428c      	cmp	r4, r1
 80127fa:	ee10 8a10 	vmov	r8, s0
 80127fe:	4699      	mov	r9, r3
 8012800:	dc09      	bgt.n	8012816 <__ieee754_pow+0x46>
 8012802:	d103      	bne.n	801280c <__ieee754_pow+0x3c>
 8012804:	b97a      	cbnz	r2, 8012826 <__ieee754_pow+0x56>
 8012806:	42a6      	cmp	r6, r4
 8012808:	dd02      	ble.n	8012810 <__ieee754_pow+0x40>
 801280a:	e00c      	b.n	8012826 <__ieee754_pow+0x56>
 801280c:	428e      	cmp	r6, r1
 801280e:	dc02      	bgt.n	8012816 <__ieee754_pow+0x46>
 8012810:	428e      	cmp	r6, r1
 8012812:	d110      	bne.n	8012836 <__ieee754_pow+0x66>
 8012814:	b178      	cbz	r0, 8012836 <__ieee754_pow+0x66>
 8012816:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801281a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801281e:	ea54 0308 	orrs.w	r3, r4, r8
 8012822:	f000 84b7 	beq.w	8013194 <__ieee754_pow+0x9c4>
 8012826:	4873      	ldr	r0, [pc, #460]	; (80129f4 <__ieee754_pow+0x224>)
 8012828:	b00d      	add	sp, #52	; 0x34
 801282a:	ecbd 8b06 	vpop	{d8-d10}
 801282e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012832:	f7ff bb91 	b.w	8011f58 <nan>
 8012836:	f1b9 0f00 	cmp.w	r9, #0
 801283a:	da36      	bge.n	80128aa <__ieee754_pow+0xda>
 801283c:	496e      	ldr	r1, [pc, #440]	; (80129f8 <__ieee754_pow+0x228>)
 801283e:	428e      	cmp	r6, r1
 8012840:	dc51      	bgt.n	80128e6 <__ieee754_pow+0x116>
 8012842:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8012846:	428e      	cmp	r6, r1
 8012848:	f340 84af 	ble.w	80131aa <__ieee754_pow+0x9da>
 801284c:	1531      	asrs	r1, r6, #20
 801284e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012852:	2914      	cmp	r1, #20
 8012854:	dd0f      	ble.n	8012876 <__ieee754_pow+0xa6>
 8012856:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801285a:	fa20 fc01 	lsr.w	ip, r0, r1
 801285e:	fa0c f101 	lsl.w	r1, ip, r1
 8012862:	4281      	cmp	r1, r0
 8012864:	f040 84a1 	bne.w	80131aa <__ieee754_pow+0x9da>
 8012868:	f00c 0c01 	and.w	ip, ip, #1
 801286c:	f1cc 0102 	rsb	r1, ip, #2
 8012870:	9100      	str	r1, [sp, #0]
 8012872:	b180      	cbz	r0, 8012896 <__ieee754_pow+0xc6>
 8012874:	e059      	b.n	801292a <__ieee754_pow+0x15a>
 8012876:	2800      	cmp	r0, #0
 8012878:	d155      	bne.n	8012926 <__ieee754_pow+0x156>
 801287a:	f1c1 0114 	rsb	r1, r1, #20
 801287e:	fa46 fc01 	asr.w	ip, r6, r1
 8012882:	fa0c f101 	lsl.w	r1, ip, r1
 8012886:	42b1      	cmp	r1, r6
 8012888:	f040 848c 	bne.w	80131a4 <__ieee754_pow+0x9d4>
 801288c:	f00c 0c01 	and.w	ip, ip, #1
 8012890:	f1cc 0102 	rsb	r1, ip, #2
 8012894:	9100      	str	r1, [sp, #0]
 8012896:	4959      	ldr	r1, [pc, #356]	; (80129fc <__ieee754_pow+0x22c>)
 8012898:	428e      	cmp	r6, r1
 801289a:	d12d      	bne.n	80128f8 <__ieee754_pow+0x128>
 801289c:	2f00      	cmp	r7, #0
 801289e:	da79      	bge.n	8012994 <__ieee754_pow+0x1c4>
 80128a0:	4956      	ldr	r1, [pc, #344]	; (80129fc <__ieee754_pow+0x22c>)
 80128a2:	2000      	movs	r0, #0
 80128a4:	f7ed ffd2 	bl	800084c <__aeabi_ddiv>
 80128a8:	e016      	b.n	80128d8 <__ieee754_pow+0x108>
 80128aa:	2100      	movs	r1, #0
 80128ac:	9100      	str	r1, [sp, #0]
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d13b      	bne.n	801292a <__ieee754_pow+0x15a>
 80128b2:	494f      	ldr	r1, [pc, #316]	; (80129f0 <__ieee754_pow+0x220>)
 80128b4:	428e      	cmp	r6, r1
 80128b6:	d1ee      	bne.n	8012896 <__ieee754_pow+0xc6>
 80128b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80128bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80128c0:	ea53 0308 	orrs.w	r3, r3, r8
 80128c4:	f000 8466 	beq.w	8013194 <__ieee754_pow+0x9c4>
 80128c8:	4b4d      	ldr	r3, [pc, #308]	; (8012a00 <__ieee754_pow+0x230>)
 80128ca:	429c      	cmp	r4, r3
 80128cc:	dd0d      	ble.n	80128ea <__ieee754_pow+0x11a>
 80128ce:	2f00      	cmp	r7, #0
 80128d0:	f280 8464 	bge.w	801319c <__ieee754_pow+0x9cc>
 80128d4:	2000      	movs	r0, #0
 80128d6:	2100      	movs	r1, #0
 80128d8:	ec41 0b10 	vmov	d0, r0, r1
 80128dc:	b00d      	add	sp, #52	; 0x34
 80128de:	ecbd 8b06 	vpop	{d8-d10}
 80128e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e6:	2102      	movs	r1, #2
 80128e8:	e7e0      	b.n	80128ac <__ieee754_pow+0xdc>
 80128ea:	2f00      	cmp	r7, #0
 80128ec:	daf2      	bge.n	80128d4 <__ieee754_pow+0x104>
 80128ee:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80128f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80128f6:	e7ef      	b.n	80128d8 <__ieee754_pow+0x108>
 80128f8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80128fc:	d104      	bne.n	8012908 <__ieee754_pow+0x138>
 80128fe:	4610      	mov	r0, r2
 8012900:	4619      	mov	r1, r3
 8012902:	f7ed fe79 	bl	80005f8 <__aeabi_dmul>
 8012906:	e7e7      	b.n	80128d8 <__ieee754_pow+0x108>
 8012908:	493e      	ldr	r1, [pc, #248]	; (8012a04 <__ieee754_pow+0x234>)
 801290a:	428f      	cmp	r7, r1
 801290c:	d10d      	bne.n	801292a <__ieee754_pow+0x15a>
 801290e:	f1b9 0f00 	cmp.w	r9, #0
 8012912:	db0a      	blt.n	801292a <__ieee754_pow+0x15a>
 8012914:	ec43 2b10 	vmov	d0, r2, r3
 8012918:	b00d      	add	sp, #52	; 0x34
 801291a:	ecbd 8b06 	vpop	{d8-d10}
 801291e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012922:	f000 bc77 	b.w	8013214 <__ieee754_sqrt>
 8012926:	2100      	movs	r1, #0
 8012928:	9100      	str	r1, [sp, #0]
 801292a:	ec43 2b10 	vmov	d0, r2, r3
 801292e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012932:	f000 fd23 	bl	801337c <fabs>
 8012936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801293a:	ec51 0b10 	vmov	r0, r1, d0
 801293e:	f1b8 0f00 	cmp.w	r8, #0
 8012942:	d12a      	bne.n	801299a <__ieee754_pow+0x1ca>
 8012944:	b12c      	cbz	r4, 8012952 <__ieee754_pow+0x182>
 8012946:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80129fc <__ieee754_pow+0x22c>
 801294a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801294e:	45e6      	cmp	lr, ip
 8012950:	d123      	bne.n	801299a <__ieee754_pow+0x1ca>
 8012952:	2f00      	cmp	r7, #0
 8012954:	da05      	bge.n	8012962 <__ieee754_pow+0x192>
 8012956:	4602      	mov	r2, r0
 8012958:	460b      	mov	r3, r1
 801295a:	2000      	movs	r0, #0
 801295c:	4927      	ldr	r1, [pc, #156]	; (80129fc <__ieee754_pow+0x22c>)
 801295e:	f7ed ff75 	bl	800084c <__aeabi_ddiv>
 8012962:	f1b9 0f00 	cmp.w	r9, #0
 8012966:	dab7      	bge.n	80128d8 <__ieee754_pow+0x108>
 8012968:	9b00      	ldr	r3, [sp, #0]
 801296a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801296e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012972:	4323      	orrs	r3, r4
 8012974:	d108      	bne.n	8012988 <__ieee754_pow+0x1b8>
 8012976:	4602      	mov	r2, r0
 8012978:	460b      	mov	r3, r1
 801297a:	4610      	mov	r0, r2
 801297c:	4619      	mov	r1, r3
 801297e:	f7ed fc83 	bl	8000288 <__aeabi_dsub>
 8012982:	4602      	mov	r2, r0
 8012984:	460b      	mov	r3, r1
 8012986:	e78d      	b.n	80128a4 <__ieee754_pow+0xd4>
 8012988:	9b00      	ldr	r3, [sp, #0]
 801298a:	2b01      	cmp	r3, #1
 801298c:	d1a4      	bne.n	80128d8 <__ieee754_pow+0x108>
 801298e:	4602      	mov	r2, r0
 8012990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012994:	4610      	mov	r0, r2
 8012996:	4619      	mov	r1, r3
 8012998:	e79e      	b.n	80128d8 <__ieee754_pow+0x108>
 801299a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801299e:	f10c 35ff 	add.w	r5, ip, #4294967295
 80129a2:	950a      	str	r5, [sp, #40]	; 0x28
 80129a4:	9d00      	ldr	r5, [sp, #0]
 80129a6:	46ac      	mov	ip, r5
 80129a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80129aa:	ea5c 0505 	orrs.w	r5, ip, r5
 80129ae:	d0e4      	beq.n	801297a <__ieee754_pow+0x1aa>
 80129b0:	4b15      	ldr	r3, [pc, #84]	; (8012a08 <__ieee754_pow+0x238>)
 80129b2:	429e      	cmp	r6, r3
 80129b4:	f340 80fc 	ble.w	8012bb0 <__ieee754_pow+0x3e0>
 80129b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80129bc:	429e      	cmp	r6, r3
 80129be:	4b10      	ldr	r3, [pc, #64]	; (8012a00 <__ieee754_pow+0x230>)
 80129c0:	dd07      	ble.n	80129d2 <__ieee754_pow+0x202>
 80129c2:	429c      	cmp	r4, r3
 80129c4:	dc0a      	bgt.n	80129dc <__ieee754_pow+0x20c>
 80129c6:	2f00      	cmp	r7, #0
 80129c8:	da84      	bge.n	80128d4 <__ieee754_pow+0x104>
 80129ca:	a307      	add	r3, pc, #28	; (adr r3, 80129e8 <__ieee754_pow+0x218>)
 80129cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d0:	e795      	b.n	80128fe <__ieee754_pow+0x12e>
 80129d2:	429c      	cmp	r4, r3
 80129d4:	dbf7      	blt.n	80129c6 <__ieee754_pow+0x1f6>
 80129d6:	4b09      	ldr	r3, [pc, #36]	; (80129fc <__ieee754_pow+0x22c>)
 80129d8:	429c      	cmp	r4, r3
 80129da:	dd17      	ble.n	8012a0c <__ieee754_pow+0x23c>
 80129dc:	2f00      	cmp	r7, #0
 80129de:	dcf4      	bgt.n	80129ca <__ieee754_pow+0x1fa>
 80129e0:	e778      	b.n	80128d4 <__ieee754_pow+0x104>
 80129e2:	bf00      	nop
 80129e4:	f3af 8000 	nop.w
 80129e8:	8800759c 	.word	0x8800759c
 80129ec:	7e37e43c 	.word	0x7e37e43c
 80129f0:	7ff00000 	.word	0x7ff00000
 80129f4:	08014758 	.word	0x08014758
 80129f8:	433fffff 	.word	0x433fffff
 80129fc:	3ff00000 	.word	0x3ff00000
 8012a00:	3fefffff 	.word	0x3fefffff
 8012a04:	3fe00000 	.word	0x3fe00000
 8012a08:	41e00000 	.word	0x41e00000
 8012a0c:	4b64      	ldr	r3, [pc, #400]	; (8012ba0 <__ieee754_pow+0x3d0>)
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f7ed fc3a 	bl	8000288 <__aeabi_dsub>
 8012a14:	a356      	add	r3, pc, #344	; (adr r3, 8012b70 <__ieee754_pow+0x3a0>)
 8012a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	460d      	mov	r5, r1
 8012a1e:	f7ed fdeb 	bl	80005f8 <__aeabi_dmul>
 8012a22:	a355      	add	r3, pc, #340	; (adr r3, 8012b78 <__ieee754_pow+0x3a8>)
 8012a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a28:	4606      	mov	r6, r0
 8012a2a:	460f      	mov	r7, r1
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	4629      	mov	r1, r5
 8012a30:	f7ed fde2 	bl	80005f8 <__aeabi_dmul>
 8012a34:	4b5b      	ldr	r3, [pc, #364]	; (8012ba4 <__ieee754_pow+0x3d4>)
 8012a36:	4682      	mov	sl, r0
 8012a38:	468b      	mov	fp, r1
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	4629      	mov	r1, r5
 8012a40:	f7ed fdda 	bl	80005f8 <__aeabi_dmul>
 8012a44:	4602      	mov	r2, r0
 8012a46:	460b      	mov	r3, r1
 8012a48:	a14d      	add	r1, pc, #308	; (adr r1, 8012b80 <__ieee754_pow+0x3b0>)
 8012a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a4e:	f7ed fc1b 	bl	8000288 <__aeabi_dsub>
 8012a52:	4622      	mov	r2, r4
 8012a54:	462b      	mov	r3, r5
 8012a56:	f7ed fdcf 	bl	80005f8 <__aeabi_dmul>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	2000      	movs	r0, #0
 8012a60:	4951      	ldr	r1, [pc, #324]	; (8012ba8 <__ieee754_pow+0x3d8>)
 8012a62:	f7ed fc11 	bl	8000288 <__aeabi_dsub>
 8012a66:	4622      	mov	r2, r4
 8012a68:	4680      	mov	r8, r0
 8012a6a:	4689      	mov	r9, r1
 8012a6c:	462b      	mov	r3, r5
 8012a6e:	4620      	mov	r0, r4
 8012a70:	4629      	mov	r1, r5
 8012a72:	f7ed fdc1 	bl	80005f8 <__aeabi_dmul>
 8012a76:	4602      	mov	r2, r0
 8012a78:	460b      	mov	r3, r1
 8012a7a:	4640      	mov	r0, r8
 8012a7c:	4649      	mov	r1, r9
 8012a7e:	f7ed fdbb 	bl	80005f8 <__aeabi_dmul>
 8012a82:	a341      	add	r3, pc, #260	; (adr r3, 8012b88 <__ieee754_pow+0x3b8>)
 8012a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a88:	f7ed fdb6 	bl	80005f8 <__aeabi_dmul>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	460b      	mov	r3, r1
 8012a90:	4650      	mov	r0, sl
 8012a92:	4659      	mov	r1, fp
 8012a94:	f7ed fbf8 	bl	8000288 <__aeabi_dsub>
 8012a98:	4602      	mov	r2, r0
 8012a9a:	460b      	mov	r3, r1
 8012a9c:	4680      	mov	r8, r0
 8012a9e:	4689      	mov	r9, r1
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	4639      	mov	r1, r7
 8012aa4:	f7ed fbf2 	bl	800028c <__adddf3>
 8012aa8:	2400      	movs	r4, #0
 8012aaa:	4632      	mov	r2, r6
 8012aac:	463b      	mov	r3, r7
 8012aae:	4620      	mov	r0, r4
 8012ab0:	460d      	mov	r5, r1
 8012ab2:	f7ed fbe9 	bl	8000288 <__aeabi_dsub>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	460b      	mov	r3, r1
 8012aba:	4640      	mov	r0, r8
 8012abc:	4649      	mov	r1, r9
 8012abe:	f7ed fbe3 	bl	8000288 <__aeabi_dsub>
 8012ac2:	9b00      	ldr	r3, [sp, #0]
 8012ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ac6:	3b01      	subs	r3, #1
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	4682      	mov	sl, r0
 8012acc:	468b      	mov	fp, r1
 8012ace:	f040 81f1 	bne.w	8012eb4 <__ieee754_pow+0x6e4>
 8012ad2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012b90 <__ieee754_pow+0x3c0>
 8012ad6:	eeb0 8a47 	vmov.f32	s16, s14
 8012ada:	eef0 8a67 	vmov.f32	s17, s15
 8012ade:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012ae2:	2600      	movs	r6, #0
 8012ae4:	4632      	mov	r2, r6
 8012ae6:	463b      	mov	r3, r7
 8012ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012aec:	f7ed fbcc 	bl	8000288 <__aeabi_dsub>
 8012af0:	4622      	mov	r2, r4
 8012af2:	462b      	mov	r3, r5
 8012af4:	f7ed fd80 	bl	80005f8 <__aeabi_dmul>
 8012af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012afc:	4680      	mov	r8, r0
 8012afe:	4689      	mov	r9, r1
 8012b00:	4650      	mov	r0, sl
 8012b02:	4659      	mov	r1, fp
 8012b04:	f7ed fd78 	bl	80005f8 <__aeabi_dmul>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	4640      	mov	r0, r8
 8012b0e:	4649      	mov	r1, r9
 8012b10:	f7ed fbbc 	bl	800028c <__adddf3>
 8012b14:	4632      	mov	r2, r6
 8012b16:	463b      	mov	r3, r7
 8012b18:	4680      	mov	r8, r0
 8012b1a:	4689      	mov	r9, r1
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	4629      	mov	r1, r5
 8012b20:	f7ed fd6a 	bl	80005f8 <__aeabi_dmul>
 8012b24:	460b      	mov	r3, r1
 8012b26:	4604      	mov	r4, r0
 8012b28:	460d      	mov	r5, r1
 8012b2a:	4602      	mov	r2, r0
 8012b2c:	4649      	mov	r1, r9
 8012b2e:	4640      	mov	r0, r8
 8012b30:	f7ed fbac 	bl	800028c <__adddf3>
 8012b34:	4b1d      	ldr	r3, [pc, #116]	; (8012bac <__ieee754_pow+0x3dc>)
 8012b36:	4299      	cmp	r1, r3
 8012b38:	ec45 4b19 	vmov	d9, r4, r5
 8012b3c:	4606      	mov	r6, r0
 8012b3e:	460f      	mov	r7, r1
 8012b40:	468b      	mov	fp, r1
 8012b42:	f340 82fe 	ble.w	8013142 <__ieee754_pow+0x972>
 8012b46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012b4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012b4e:	4303      	orrs	r3, r0
 8012b50:	f000 81f0 	beq.w	8012f34 <__ieee754_pow+0x764>
 8012b54:	a310      	add	r3, pc, #64	; (adr r3, 8012b98 <__ieee754_pow+0x3c8>)
 8012b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5a:	ec51 0b18 	vmov	r0, r1, d8
 8012b5e:	f7ed fd4b 	bl	80005f8 <__aeabi_dmul>
 8012b62:	a30d      	add	r3, pc, #52	; (adr r3, 8012b98 <__ieee754_pow+0x3c8>)
 8012b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b68:	e6cb      	b.n	8012902 <__ieee754_pow+0x132>
 8012b6a:	bf00      	nop
 8012b6c:	f3af 8000 	nop.w
 8012b70:	60000000 	.word	0x60000000
 8012b74:	3ff71547 	.word	0x3ff71547
 8012b78:	f85ddf44 	.word	0xf85ddf44
 8012b7c:	3e54ae0b 	.word	0x3e54ae0b
 8012b80:	55555555 	.word	0x55555555
 8012b84:	3fd55555 	.word	0x3fd55555
 8012b88:	652b82fe 	.word	0x652b82fe
 8012b8c:	3ff71547 	.word	0x3ff71547
 8012b90:	00000000 	.word	0x00000000
 8012b94:	bff00000 	.word	0xbff00000
 8012b98:	8800759c 	.word	0x8800759c
 8012b9c:	7e37e43c 	.word	0x7e37e43c
 8012ba0:	3ff00000 	.word	0x3ff00000
 8012ba4:	3fd00000 	.word	0x3fd00000
 8012ba8:	3fe00000 	.word	0x3fe00000
 8012bac:	408fffff 	.word	0x408fffff
 8012bb0:	4bd7      	ldr	r3, [pc, #860]	; (8012f10 <__ieee754_pow+0x740>)
 8012bb2:	ea03 0309 	and.w	r3, r3, r9
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	b92b      	cbnz	r3, 8012bc6 <__ieee754_pow+0x3f6>
 8012bba:	4bd6      	ldr	r3, [pc, #856]	; (8012f14 <__ieee754_pow+0x744>)
 8012bbc:	f7ed fd1c 	bl	80005f8 <__aeabi_dmul>
 8012bc0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012bc4:	460c      	mov	r4, r1
 8012bc6:	1523      	asrs	r3, r4, #20
 8012bc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012bcc:	4413      	add	r3, r2
 8012bce:	9309      	str	r3, [sp, #36]	; 0x24
 8012bd0:	4bd1      	ldr	r3, [pc, #836]	; (8012f18 <__ieee754_pow+0x748>)
 8012bd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012bd6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012bda:	429c      	cmp	r4, r3
 8012bdc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012be0:	dd08      	ble.n	8012bf4 <__ieee754_pow+0x424>
 8012be2:	4bce      	ldr	r3, [pc, #824]	; (8012f1c <__ieee754_pow+0x74c>)
 8012be4:	429c      	cmp	r4, r3
 8012be6:	f340 8163 	ble.w	8012eb0 <__ieee754_pow+0x6e0>
 8012bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bec:	3301      	adds	r3, #1
 8012bee:	9309      	str	r3, [sp, #36]	; 0x24
 8012bf0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012bf4:	2400      	movs	r4, #0
 8012bf6:	00e3      	lsls	r3, r4, #3
 8012bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012bfa:	4bc9      	ldr	r3, [pc, #804]	; (8012f20 <__ieee754_pow+0x750>)
 8012bfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c00:	ed93 7b00 	vldr	d7, [r3]
 8012c04:	4629      	mov	r1, r5
 8012c06:	ec53 2b17 	vmov	r2, r3, d7
 8012c0a:	eeb0 8a47 	vmov.f32	s16, s14
 8012c0e:	eef0 8a67 	vmov.f32	s17, s15
 8012c12:	4682      	mov	sl, r0
 8012c14:	f7ed fb38 	bl	8000288 <__aeabi_dsub>
 8012c18:	4652      	mov	r2, sl
 8012c1a:	4606      	mov	r6, r0
 8012c1c:	460f      	mov	r7, r1
 8012c1e:	462b      	mov	r3, r5
 8012c20:	ec51 0b18 	vmov	r0, r1, d8
 8012c24:	f7ed fb32 	bl	800028c <__adddf3>
 8012c28:	4602      	mov	r2, r0
 8012c2a:	460b      	mov	r3, r1
 8012c2c:	2000      	movs	r0, #0
 8012c2e:	49bd      	ldr	r1, [pc, #756]	; (8012f24 <__ieee754_pow+0x754>)
 8012c30:	f7ed fe0c 	bl	800084c <__aeabi_ddiv>
 8012c34:	ec41 0b19 	vmov	d9, r0, r1
 8012c38:	4602      	mov	r2, r0
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	4639      	mov	r1, r7
 8012c40:	f7ed fcda 	bl	80005f8 <__aeabi_dmul>
 8012c44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012c48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012c4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012c50:	2300      	movs	r3, #0
 8012c52:	9304      	str	r3, [sp, #16]
 8012c54:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012c58:	46ab      	mov	fp, r5
 8012c5a:	106d      	asrs	r5, r5, #1
 8012c5c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012c60:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012c64:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012c68:	2200      	movs	r2, #0
 8012c6a:	4640      	mov	r0, r8
 8012c6c:	4649      	mov	r1, r9
 8012c6e:	4614      	mov	r4, r2
 8012c70:	461d      	mov	r5, r3
 8012c72:	f7ed fcc1 	bl	80005f8 <__aeabi_dmul>
 8012c76:	4602      	mov	r2, r0
 8012c78:	460b      	mov	r3, r1
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	4639      	mov	r1, r7
 8012c7e:	f7ed fb03 	bl	8000288 <__aeabi_dsub>
 8012c82:	ec53 2b18 	vmov	r2, r3, d8
 8012c86:	4606      	mov	r6, r0
 8012c88:	460f      	mov	r7, r1
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	4629      	mov	r1, r5
 8012c8e:	f7ed fafb 	bl	8000288 <__aeabi_dsub>
 8012c92:	4602      	mov	r2, r0
 8012c94:	460b      	mov	r3, r1
 8012c96:	4650      	mov	r0, sl
 8012c98:	4659      	mov	r1, fp
 8012c9a:	f7ed faf5 	bl	8000288 <__aeabi_dsub>
 8012c9e:	4642      	mov	r2, r8
 8012ca0:	464b      	mov	r3, r9
 8012ca2:	f7ed fca9 	bl	80005f8 <__aeabi_dmul>
 8012ca6:	4602      	mov	r2, r0
 8012ca8:	460b      	mov	r3, r1
 8012caa:	4630      	mov	r0, r6
 8012cac:	4639      	mov	r1, r7
 8012cae:	f7ed faeb 	bl	8000288 <__aeabi_dsub>
 8012cb2:	ec53 2b19 	vmov	r2, r3, d9
 8012cb6:	f7ed fc9f 	bl	80005f8 <__aeabi_dmul>
 8012cba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cbe:	ec41 0b18 	vmov	d8, r0, r1
 8012cc2:	4610      	mov	r0, r2
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	f7ed fc97 	bl	80005f8 <__aeabi_dmul>
 8012cca:	a37d      	add	r3, pc, #500	; (adr r3, 8012ec0 <__ieee754_pow+0x6f0>)
 8012ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	460d      	mov	r5, r1
 8012cd4:	f7ed fc90 	bl	80005f8 <__aeabi_dmul>
 8012cd8:	a37b      	add	r3, pc, #492	; (adr r3, 8012ec8 <__ieee754_pow+0x6f8>)
 8012cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cde:	f7ed fad5 	bl	800028c <__adddf3>
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	462b      	mov	r3, r5
 8012ce6:	f7ed fc87 	bl	80005f8 <__aeabi_dmul>
 8012cea:	a379      	add	r3, pc, #484	; (adr r3, 8012ed0 <__ieee754_pow+0x700>)
 8012cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf0:	f7ed facc 	bl	800028c <__adddf3>
 8012cf4:	4622      	mov	r2, r4
 8012cf6:	462b      	mov	r3, r5
 8012cf8:	f7ed fc7e 	bl	80005f8 <__aeabi_dmul>
 8012cfc:	a376      	add	r3, pc, #472	; (adr r3, 8012ed8 <__ieee754_pow+0x708>)
 8012cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d02:	f7ed fac3 	bl	800028c <__adddf3>
 8012d06:	4622      	mov	r2, r4
 8012d08:	462b      	mov	r3, r5
 8012d0a:	f7ed fc75 	bl	80005f8 <__aeabi_dmul>
 8012d0e:	a374      	add	r3, pc, #464	; (adr r3, 8012ee0 <__ieee754_pow+0x710>)
 8012d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d14:	f7ed faba 	bl	800028c <__adddf3>
 8012d18:	4622      	mov	r2, r4
 8012d1a:	462b      	mov	r3, r5
 8012d1c:	f7ed fc6c 	bl	80005f8 <__aeabi_dmul>
 8012d20:	a371      	add	r3, pc, #452	; (adr r3, 8012ee8 <__ieee754_pow+0x718>)
 8012d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d26:	f7ed fab1 	bl	800028c <__adddf3>
 8012d2a:	4622      	mov	r2, r4
 8012d2c:	4606      	mov	r6, r0
 8012d2e:	460f      	mov	r7, r1
 8012d30:	462b      	mov	r3, r5
 8012d32:	4620      	mov	r0, r4
 8012d34:	4629      	mov	r1, r5
 8012d36:	f7ed fc5f 	bl	80005f8 <__aeabi_dmul>
 8012d3a:	4602      	mov	r2, r0
 8012d3c:	460b      	mov	r3, r1
 8012d3e:	4630      	mov	r0, r6
 8012d40:	4639      	mov	r1, r7
 8012d42:	f7ed fc59 	bl	80005f8 <__aeabi_dmul>
 8012d46:	4642      	mov	r2, r8
 8012d48:	4604      	mov	r4, r0
 8012d4a:	460d      	mov	r5, r1
 8012d4c:	464b      	mov	r3, r9
 8012d4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d52:	f7ed fa9b 	bl	800028c <__adddf3>
 8012d56:	ec53 2b18 	vmov	r2, r3, d8
 8012d5a:	f7ed fc4d 	bl	80005f8 <__aeabi_dmul>
 8012d5e:	4622      	mov	r2, r4
 8012d60:	462b      	mov	r3, r5
 8012d62:	f7ed fa93 	bl	800028c <__adddf3>
 8012d66:	4642      	mov	r2, r8
 8012d68:	4682      	mov	sl, r0
 8012d6a:	468b      	mov	fp, r1
 8012d6c:	464b      	mov	r3, r9
 8012d6e:	4640      	mov	r0, r8
 8012d70:	4649      	mov	r1, r9
 8012d72:	f7ed fc41 	bl	80005f8 <__aeabi_dmul>
 8012d76:	4b6c      	ldr	r3, [pc, #432]	; (8012f28 <__ieee754_pow+0x758>)
 8012d78:	2200      	movs	r2, #0
 8012d7a:	4606      	mov	r6, r0
 8012d7c:	460f      	mov	r7, r1
 8012d7e:	f7ed fa85 	bl	800028c <__adddf3>
 8012d82:	4652      	mov	r2, sl
 8012d84:	465b      	mov	r3, fp
 8012d86:	f7ed fa81 	bl	800028c <__adddf3>
 8012d8a:	9c04      	ldr	r4, [sp, #16]
 8012d8c:	460d      	mov	r5, r1
 8012d8e:	4622      	mov	r2, r4
 8012d90:	460b      	mov	r3, r1
 8012d92:	4640      	mov	r0, r8
 8012d94:	4649      	mov	r1, r9
 8012d96:	f7ed fc2f 	bl	80005f8 <__aeabi_dmul>
 8012d9a:	4b63      	ldr	r3, [pc, #396]	; (8012f28 <__ieee754_pow+0x758>)
 8012d9c:	4680      	mov	r8, r0
 8012d9e:	4689      	mov	r9, r1
 8012da0:	2200      	movs	r2, #0
 8012da2:	4620      	mov	r0, r4
 8012da4:	4629      	mov	r1, r5
 8012da6:	f7ed fa6f 	bl	8000288 <__aeabi_dsub>
 8012daa:	4632      	mov	r2, r6
 8012dac:	463b      	mov	r3, r7
 8012dae:	f7ed fa6b 	bl	8000288 <__aeabi_dsub>
 8012db2:	4602      	mov	r2, r0
 8012db4:	460b      	mov	r3, r1
 8012db6:	4650      	mov	r0, sl
 8012db8:	4659      	mov	r1, fp
 8012dba:	f7ed fa65 	bl	8000288 <__aeabi_dsub>
 8012dbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012dc2:	f7ed fc19 	bl	80005f8 <__aeabi_dmul>
 8012dc6:	4622      	mov	r2, r4
 8012dc8:	4606      	mov	r6, r0
 8012dca:	460f      	mov	r7, r1
 8012dcc:	462b      	mov	r3, r5
 8012dce:	ec51 0b18 	vmov	r0, r1, d8
 8012dd2:	f7ed fc11 	bl	80005f8 <__aeabi_dmul>
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	460b      	mov	r3, r1
 8012dda:	4630      	mov	r0, r6
 8012ddc:	4639      	mov	r1, r7
 8012dde:	f7ed fa55 	bl	800028c <__adddf3>
 8012de2:	4606      	mov	r6, r0
 8012de4:	460f      	mov	r7, r1
 8012de6:	4602      	mov	r2, r0
 8012de8:	460b      	mov	r3, r1
 8012dea:	4640      	mov	r0, r8
 8012dec:	4649      	mov	r1, r9
 8012dee:	f7ed fa4d 	bl	800028c <__adddf3>
 8012df2:	9c04      	ldr	r4, [sp, #16]
 8012df4:	a33e      	add	r3, pc, #248	; (adr r3, 8012ef0 <__ieee754_pow+0x720>)
 8012df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	460d      	mov	r5, r1
 8012dfe:	f7ed fbfb 	bl	80005f8 <__aeabi_dmul>
 8012e02:	4642      	mov	r2, r8
 8012e04:	ec41 0b18 	vmov	d8, r0, r1
 8012e08:	464b      	mov	r3, r9
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	4629      	mov	r1, r5
 8012e0e:	f7ed fa3b 	bl	8000288 <__aeabi_dsub>
 8012e12:	4602      	mov	r2, r0
 8012e14:	460b      	mov	r3, r1
 8012e16:	4630      	mov	r0, r6
 8012e18:	4639      	mov	r1, r7
 8012e1a:	f7ed fa35 	bl	8000288 <__aeabi_dsub>
 8012e1e:	a336      	add	r3, pc, #216	; (adr r3, 8012ef8 <__ieee754_pow+0x728>)
 8012e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e24:	f7ed fbe8 	bl	80005f8 <__aeabi_dmul>
 8012e28:	a335      	add	r3, pc, #212	; (adr r3, 8012f00 <__ieee754_pow+0x730>)
 8012e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2e:	4606      	mov	r6, r0
 8012e30:	460f      	mov	r7, r1
 8012e32:	4620      	mov	r0, r4
 8012e34:	4629      	mov	r1, r5
 8012e36:	f7ed fbdf 	bl	80005f8 <__aeabi_dmul>
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	4630      	mov	r0, r6
 8012e40:	4639      	mov	r1, r7
 8012e42:	f7ed fa23 	bl	800028c <__adddf3>
 8012e46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e48:	4b38      	ldr	r3, [pc, #224]	; (8012f2c <__ieee754_pow+0x75c>)
 8012e4a:	4413      	add	r3, r2
 8012e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e50:	f7ed fa1c 	bl	800028c <__adddf3>
 8012e54:	4682      	mov	sl, r0
 8012e56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e58:	468b      	mov	fp, r1
 8012e5a:	f7ed fb63 	bl	8000524 <__aeabi_i2d>
 8012e5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e60:	4b33      	ldr	r3, [pc, #204]	; (8012f30 <__ieee754_pow+0x760>)
 8012e62:	4413      	add	r3, r2
 8012e64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e68:	4606      	mov	r6, r0
 8012e6a:	460f      	mov	r7, r1
 8012e6c:	4652      	mov	r2, sl
 8012e6e:	465b      	mov	r3, fp
 8012e70:	ec51 0b18 	vmov	r0, r1, d8
 8012e74:	f7ed fa0a 	bl	800028c <__adddf3>
 8012e78:	4642      	mov	r2, r8
 8012e7a:	464b      	mov	r3, r9
 8012e7c:	f7ed fa06 	bl	800028c <__adddf3>
 8012e80:	4632      	mov	r2, r6
 8012e82:	463b      	mov	r3, r7
 8012e84:	f7ed fa02 	bl	800028c <__adddf3>
 8012e88:	9c04      	ldr	r4, [sp, #16]
 8012e8a:	4632      	mov	r2, r6
 8012e8c:	463b      	mov	r3, r7
 8012e8e:	4620      	mov	r0, r4
 8012e90:	460d      	mov	r5, r1
 8012e92:	f7ed f9f9 	bl	8000288 <__aeabi_dsub>
 8012e96:	4642      	mov	r2, r8
 8012e98:	464b      	mov	r3, r9
 8012e9a:	f7ed f9f5 	bl	8000288 <__aeabi_dsub>
 8012e9e:	ec53 2b18 	vmov	r2, r3, d8
 8012ea2:	f7ed f9f1 	bl	8000288 <__aeabi_dsub>
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	460b      	mov	r3, r1
 8012eaa:	4650      	mov	r0, sl
 8012eac:	4659      	mov	r1, fp
 8012eae:	e606      	b.n	8012abe <__ieee754_pow+0x2ee>
 8012eb0:	2401      	movs	r4, #1
 8012eb2:	e6a0      	b.n	8012bf6 <__ieee754_pow+0x426>
 8012eb4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012f08 <__ieee754_pow+0x738>
 8012eb8:	e60d      	b.n	8012ad6 <__ieee754_pow+0x306>
 8012eba:	bf00      	nop
 8012ebc:	f3af 8000 	nop.w
 8012ec0:	4a454eef 	.word	0x4a454eef
 8012ec4:	3fca7e28 	.word	0x3fca7e28
 8012ec8:	93c9db65 	.word	0x93c9db65
 8012ecc:	3fcd864a 	.word	0x3fcd864a
 8012ed0:	a91d4101 	.word	0xa91d4101
 8012ed4:	3fd17460 	.word	0x3fd17460
 8012ed8:	518f264d 	.word	0x518f264d
 8012edc:	3fd55555 	.word	0x3fd55555
 8012ee0:	db6fabff 	.word	0xdb6fabff
 8012ee4:	3fdb6db6 	.word	0x3fdb6db6
 8012ee8:	33333303 	.word	0x33333303
 8012eec:	3fe33333 	.word	0x3fe33333
 8012ef0:	e0000000 	.word	0xe0000000
 8012ef4:	3feec709 	.word	0x3feec709
 8012ef8:	dc3a03fd 	.word	0xdc3a03fd
 8012efc:	3feec709 	.word	0x3feec709
 8012f00:	145b01f5 	.word	0x145b01f5
 8012f04:	be3e2fe0 	.word	0xbe3e2fe0
 8012f08:	00000000 	.word	0x00000000
 8012f0c:	3ff00000 	.word	0x3ff00000
 8012f10:	7ff00000 	.word	0x7ff00000
 8012f14:	43400000 	.word	0x43400000
 8012f18:	0003988e 	.word	0x0003988e
 8012f1c:	000bb679 	.word	0x000bb679
 8012f20:	08014760 	.word	0x08014760
 8012f24:	3ff00000 	.word	0x3ff00000
 8012f28:	40080000 	.word	0x40080000
 8012f2c:	08014780 	.word	0x08014780
 8012f30:	08014770 	.word	0x08014770
 8012f34:	a3b5      	add	r3, pc, #724	; (adr r3, 801320c <__ieee754_pow+0xa3c>)
 8012f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3a:	4640      	mov	r0, r8
 8012f3c:	4649      	mov	r1, r9
 8012f3e:	f7ed f9a5 	bl	800028c <__adddf3>
 8012f42:	4622      	mov	r2, r4
 8012f44:	ec41 0b1a 	vmov	d10, r0, r1
 8012f48:	462b      	mov	r3, r5
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	4639      	mov	r1, r7
 8012f4e:	f7ed f99b 	bl	8000288 <__aeabi_dsub>
 8012f52:	4602      	mov	r2, r0
 8012f54:	460b      	mov	r3, r1
 8012f56:	ec51 0b1a 	vmov	r0, r1, d10
 8012f5a:	f7ed fddd 	bl	8000b18 <__aeabi_dcmpgt>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	f47f adf8 	bne.w	8012b54 <__ieee754_pow+0x384>
 8012f64:	4aa4      	ldr	r2, [pc, #656]	; (80131f8 <__ieee754_pow+0xa28>)
 8012f66:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	f340 810b 	ble.w	8013186 <__ieee754_pow+0x9b6>
 8012f70:	151b      	asrs	r3, r3, #20
 8012f72:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012f76:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012f7a:	fa4a f303 	asr.w	r3, sl, r3
 8012f7e:	445b      	add	r3, fp
 8012f80:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012f84:	4e9d      	ldr	r6, [pc, #628]	; (80131fc <__ieee754_pow+0xa2c>)
 8012f86:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012f8a:	4116      	asrs	r6, r2
 8012f8c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012f90:	2000      	movs	r0, #0
 8012f92:	ea23 0106 	bic.w	r1, r3, r6
 8012f96:	f1c2 0214 	rsb	r2, r2, #20
 8012f9a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012f9e:	fa4a fa02 	asr.w	sl, sl, r2
 8012fa2:	f1bb 0f00 	cmp.w	fp, #0
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	460b      	mov	r3, r1
 8012faa:	4620      	mov	r0, r4
 8012fac:	4629      	mov	r1, r5
 8012fae:	bfb8      	it	lt
 8012fb0:	f1ca 0a00 	rsblt	sl, sl, #0
 8012fb4:	f7ed f968 	bl	8000288 <__aeabi_dsub>
 8012fb8:	ec41 0b19 	vmov	d9, r0, r1
 8012fbc:	4642      	mov	r2, r8
 8012fbe:	464b      	mov	r3, r9
 8012fc0:	ec51 0b19 	vmov	r0, r1, d9
 8012fc4:	f7ed f962 	bl	800028c <__adddf3>
 8012fc8:	2400      	movs	r4, #0
 8012fca:	a379      	add	r3, pc, #484	; (adr r3, 80131b0 <__ieee754_pow+0x9e0>)
 8012fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	460d      	mov	r5, r1
 8012fd4:	f7ed fb10 	bl	80005f8 <__aeabi_dmul>
 8012fd8:	ec53 2b19 	vmov	r2, r3, d9
 8012fdc:	4606      	mov	r6, r0
 8012fde:	460f      	mov	r7, r1
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	4629      	mov	r1, r5
 8012fe4:	f7ed f950 	bl	8000288 <__aeabi_dsub>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	460b      	mov	r3, r1
 8012fec:	4640      	mov	r0, r8
 8012fee:	4649      	mov	r1, r9
 8012ff0:	f7ed f94a 	bl	8000288 <__aeabi_dsub>
 8012ff4:	a370      	add	r3, pc, #448	; (adr r3, 80131b8 <__ieee754_pow+0x9e8>)
 8012ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffa:	f7ed fafd 	bl	80005f8 <__aeabi_dmul>
 8012ffe:	a370      	add	r3, pc, #448	; (adr r3, 80131c0 <__ieee754_pow+0x9f0>)
 8013000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013004:	4680      	mov	r8, r0
 8013006:	4689      	mov	r9, r1
 8013008:	4620      	mov	r0, r4
 801300a:	4629      	mov	r1, r5
 801300c:	f7ed faf4 	bl	80005f8 <__aeabi_dmul>
 8013010:	4602      	mov	r2, r0
 8013012:	460b      	mov	r3, r1
 8013014:	4640      	mov	r0, r8
 8013016:	4649      	mov	r1, r9
 8013018:	f7ed f938 	bl	800028c <__adddf3>
 801301c:	4604      	mov	r4, r0
 801301e:	460d      	mov	r5, r1
 8013020:	4602      	mov	r2, r0
 8013022:	460b      	mov	r3, r1
 8013024:	4630      	mov	r0, r6
 8013026:	4639      	mov	r1, r7
 8013028:	f7ed f930 	bl	800028c <__adddf3>
 801302c:	4632      	mov	r2, r6
 801302e:	463b      	mov	r3, r7
 8013030:	4680      	mov	r8, r0
 8013032:	4689      	mov	r9, r1
 8013034:	f7ed f928 	bl	8000288 <__aeabi_dsub>
 8013038:	4602      	mov	r2, r0
 801303a:	460b      	mov	r3, r1
 801303c:	4620      	mov	r0, r4
 801303e:	4629      	mov	r1, r5
 8013040:	f7ed f922 	bl	8000288 <__aeabi_dsub>
 8013044:	4642      	mov	r2, r8
 8013046:	4606      	mov	r6, r0
 8013048:	460f      	mov	r7, r1
 801304a:	464b      	mov	r3, r9
 801304c:	4640      	mov	r0, r8
 801304e:	4649      	mov	r1, r9
 8013050:	f7ed fad2 	bl	80005f8 <__aeabi_dmul>
 8013054:	a35c      	add	r3, pc, #368	; (adr r3, 80131c8 <__ieee754_pow+0x9f8>)
 8013056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305a:	4604      	mov	r4, r0
 801305c:	460d      	mov	r5, r1
 801305e:	f7ed facb 	bl	80005f8 <__aeabi_dmul>
 8013062:	a35b      	add	r3, pc, #364	; (adr r3, 80131d0 <__ieee754_pow+0xa00>)
 8013064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013068:	f7ed f90e 	bl	8000288 <__aeabi_dsub>
 801306c:	4622      	mov	r2, r4
 801306e:	462b      	mov	r3, r5
 8013070:	f7ed fac2 	bl	80005f8 <__aeabi_dmul>
 8013074:	a358      	add	r3, pc, #352	; (adr r3, 80131d8 <__ieee754_pow+0xa08>)
 8013076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307a:	f7ed f907 	bl	800028c <__adddf3>
 801307e:	4622      	mov	r2, r4
 8013080:	462b      	mov	r3, r5
 8013082:	f7ed fab9 	bl	80005f8 <__aeabi_dmul>
 8013086:	a356      	add	r3, pc, #344	; (adr r3, 80131e0 <__ieee754_pow+0xa10>)
 8013088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308c:	f7ed f8fc 	bl	8000288 <__aeabi_dsub>
 8013090:	4622      	mov	r2, r4
 8013092:	462b      	mov	r3, r5
 8013094:	f7ed fab0 	bl	80005f8 <__aeabi_dmul>
 8013098:	a353      	add	r3, pc, #332	; (adr r3, 80131e8 <__ieee754_pow+0xa18>)
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	f7ed f8f5 	bl	800028c <__adddf3>
 80130a2:	4622      	mov	r2, r4
 80130a4:	462b      	mov	r3, r5
 80130a6:	f7ed faa7 	bl	80005f8 <__aeabi_dmul>
 80130aa:	4602      	mov	r2, r0
 80130ac:	460b      	mov	r3, r1
 80130ae:	4640      	mov	r0, r8
 80130b0:	4649      	mov	r1, r9
 80130b2:	f7ed f8e9 	bl	8000288 <__aeabi_dsub>
 80130b6:	4604      	mov	r4, r0
 80130b8:	460d      	mov	r5, r1
 80130ba:	4602      	mov	r2, r0
 80130bc:	460b      	mov	r3, r1
 80130be:	4640      	mov	r0, r8
 80130c0:	4649      	mov	r1, r9
 80130c2:	f7ed fa99 	bl	80005f8 <__aeabi_dmul>
 80130c6:	2200      	movs	r2, #0
 80130c8:	ec41 0b19 	vmov	d9, r0, r1
 80130cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130d0:	4620      	mov	r0, r4
 80130d2:	4629      	mov	r1, r5
 80130d4:	f7ed f8d8 	bl	8000288 <__aeabi_dsub>
 80130d8:	4602      	mov	r2, r0
 80130da:	460b      	mov	r3, r1
 80130dc:	ec51 0b19 	vmov	r0, r1, d9
 80130e0:	f7ed fbb4 	bl	800084c <__aeabi_ddiv>
 80130e4:	4632      	mov	r2, r6
 80130e6:	4604      	mov	r4, r0
 80130e8:	460d      	mov	r5, r1
 80130ea:	463b      	mov	r3, r7
 80130ec:	4640      	mov	r0, r8
 80130ee:	4649      	mov	r1, r9
 80130f0:	f7ed fa82 	bl	80005f8 <__aeabi_dmul>
 80130f4:	4632      	mov	r2, r6
 80130f6:	463b      	mov	r3, r7
 80130f8:	f7ed f8c8 	bl	800028c <__adddf3>
 80130fc:	4602      	mov	r2, r0
 80130fe:	460b      	mov	r3, r1
 8013100:	4620      	mov	r0, r4
 8013102:	4629      	mov	r1, r5
 8013104:	f7ed f8c0 	bl	8000288 <__aeabi_dsub>
 8013108:	4642      	mov	r2, r8
 801310a:	464b      	mov	r3, r9
 801310c:	f7ed f8bc 	bl	8000288 <__aeabi_dsub>
 8013110:	460b      	mov	r3, r1
 8013112:	4602      	mov	r2, r0
 8013114:	493a      	ldr	r1, [pc, #232]	; (8013200 <__ieee754_pow+0xa30>)
 8013116:	2000      	movs	r0, #0
 8013118:	f7ed f8b6 	bl	8000288 <__aeabi_dsub>
 801311c:	e9cd 0100 	strd	r0, r1, [sp]
 8013120:	9b01      	ldr	r3, [sp, #4]
 8013122:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801312a:	da2f      	bge.n	801318c <__ieee754_pow+0x9bc>
 801312c:	4650      	mov	r0, sl
 801312e:	ed9d 0b00 	vldr	d0, [sp]
 8013132:	f000 f9c1 	bl	80134b8 <scalbn>
 8013136:	ec51 0b10 	vmov	r0, r1, d0
 801313a:	ec53 2b18 	vmov	r2, r3, d8
 801313e:	f7ff bbe0 	b.w	8012902 <__ieee754_pow+0x132>
 8013142:	4b30      	ldr	r3, [pc, #192]	; (8013204 <__ieee754_pow+0xa34>)
 8013144:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013148:	429e      	cmp	r6, r3
 801314a:	f77f af0b 	ble.w	8012f64 <__ieee754_pow+0x794>
 801314e:	4b2e      	ldr	r3, [pc, #184]	; (8013208 <__ieee754_pow+0xa38>)
 8013150:	440b      	add	r3, r1
 8013152:	4303      	orrs	r3, r0
 8013154:	d00b      	beq.n	801316e <__ieee754_pow+0x99e>
 8013156:	a326      	add	r3, pc, #152	; (adr r3, 80131f0 <__ieee754_pow+0xa20>)
 8013158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315c:	ec51 0b18 	vmov	r0, r1, d8
 8013160:	f7ed fa4a 	bl	80005f8 <__aeabi_dmul>
 8013164:	a322      	add	r3, pc, #136	; (adr r3, 80131f0 <__ieee754_pow+0xa20>)
 8013166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316a:	f7ff bbca 	b.w	8012902 <__ieee754_pow+0x132>
 801316e:	4622      	mov	r2, r4
 8013170:	462b      	mov	r3, r5
 8013172:	f7ed f889 	bl	8000288 <__aeabi_dsub>
 8013176:	4642      	mov	r2, r8
 8013178:	464b      	mov	r3, r9
 801317a:	f7ed fcc3 	bl	8000b04 <__aeabi_dcmpge>
 801317e:	2800      	cmp	r0, #0
 8013180:	f43f aef0 	beq.w	8012f64 <__ieee754_pow+0x794>
 8013184:	e7e7      	b.n	8013156 <__ieee754_pow+0x986>
 8013186:	f04f 0a00 	mov.w	sl, #0
 801318a:	e717      	b.n	8012fbc <__ieee754_pow+0x7ec>
 801318c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013190:	4619      	mov	r1, r3
 8013192:	e7d2      	b.n	801313a <__ieee754_pow+0x96a>
 8013194:	491a      	ldr	r1, [pc, #104]	; (8013200 <__ieee754_pow+0xa30>)
 8013196:	2000      	movs	r0, #0
 8013198:	f7ff bb9e 	b.w	80128d8 <__ieee754_pow+0x108>
 801319c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131a0:	f7ff bb9a 	b.w	80128d8 <__ieee754_pow+0x108>
 80131a4:	9000      	str	r0, [sp, #0]
 80131a6:	f7ff bb76 	b.w	8012896 <__ieee754_pow+0xc6>
 80131aa:	2100      	movs	r1, #0
 80131ac:	f7ff bb60 	b.w	8012870 <__ieee754_pow+0xa0>
 80131b0:	00000000 	.word	0x00000000
 80131b4:	3fe62e43 	.word	0x3fe62e43
 80131b8:	fefa39ef 	.word	0xfefa39ef
 80131bc:	3fe62e42 	.word	0x3fe62e42
 80131c0:	0ca86c39 	.word	0x0ca86c39
 80131c4:	be205c61 	.word	0xbe205c61
 80131c8:	72bea4d0 	.word	0x72bea4d0
 80131cc:	3e663769 	.word	0x3e663769
 80131d0:	c5d26bf1 	.word	0xc5d26bf1
 80131d4:	3ebbbd41 	.word	0x3ebbbd41
 80131d8:	af25de2c 	.word	0xaf25de2c
 80131dc:	3f11566a 	.word	0x3f11566a
 80131e0:	16bebd93 	.word	0x16bebd93
 80131e4:	3f66c16c 	.word	0x3f66c16c
 80131e8:	5555553e 	.word	0x5555553e
 80131ec:	3fc55555 	.word	0x3fc55555
 80131f0:	c2f8f359 	.word	0xc2f8f359
 80131f4:	01a56e1f 	.word	0x01a56e1f
 80131f8:	3fe00000 	.word	0x3fe00000
 80131fc:	000fffff 	.word	0x000fffff
 8013200:	3ff00000 	.word	0x3ff00000
 8013204:	4090cbff 	.word	0x4090cbff
 8013208:	3f6f3400 	.word	0x3f6f3400
 801320c:	652b82fe 	.word	0x652b82fe
 8013210:	3c971547 	.word	0x3c971547

08013214 <__ieee754_sqrt>:
 8013214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013218:	ec55 4b10 	vmov	r4, r5, d0
 801321c:	4e56      	ldr	r6, [pc, #344]	; (8013378 <__ieee754_sqrt+0x164>)
 801321e:	43ae      	bics	r6, r5
 8013220:	ee10 0a10 	vmov	r0, s0
 8013224:	ee10 3a10 	vmov	r3, s0
 8013228:	4629      	mov	r1, r5
 801322a:	462a      	mov	r2, r5
 801322c:	d110      	bne.n	8013250 <__ieee754_sqrt+0x3c>
 801322e:	ee10 2a10 	vmov	r2, s0
 8013232:	462b      	mov	r3, r5
 8013234:	f7ed f9e0 	bl	80005f8 <__aeabi_dmul>
 8013238:	4602      	mov	r2, r0
 801323a:	460b      	mov	r3, r1
 801323c:	4620      	mov	r0, r4
 801323e:	4629      	mov	r1, r5
 8013240:	f7ed f824 	bl	800028c <__adddf3>
 8013244:	4604      	mov	r4, r0
 8013246:	460d      	mov	r5, r1
 8013248:	ec45 4b10 	vmov	d0, r4, r5
 801324c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013250:	2d00      	cmp	r5, #0
 8013252:	dc10      	bgt.n	8013276 <__ieee754_sqrt+0x62>
 8013254:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013258:	4330      	orrs	r0, r6
 801325a:	d0f5      	beq.n	8013248 <__ieee754_sqrt+0x34>
 801325c:	b15d      	cbz	r5, 8013276 <__ieee754_sqrt+0x62>
 801325e:	ee10 2a10 	vmov	r2, s0
 8013262:	462b      	mov	r3, r5
 8013264:	ee10 0a10 	vmov	r0, s0
 8013268:	f7ed f80e 	bl	8000288 <__aeabi_dsub>
 801326c:	4602      	mov	r2, r0
 801326e:	460b      	mov	r3, r1
 8013270:	f7ed faec 	bl	800084c <__aeabi_ddiv>
 8013274:	e7e6      	b.n	8013244 <__ieee754_sqrt+0x30>
 8013276:	1509      	asrs	r1, r1, #20
 8013278:	d076      	beq.n	8013368 <__ieee754_sqrt+0x154>
 801327a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801327e:	07ce      	lsls	r6, r1, #31
 8013280:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8013284:	bf5e      	ittt	pl
 8013286:	0fda      	lsrpl	r2, r3, #31
 8013288:	005b      	lslpl	r3, r3, #1
 801328a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801328e:	0fda      	lsrs	r2, r3, #31
 8013290:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8013294:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8013298:	2000      	movs	r0, #0
 801329a:	106d      	asrs	r5, r5, #1
 801329c:	005b      	lsls	r3, r3, #1
 801329e:	f04f 0e16 	mov.w	lr, #22
 80132a2:	4684      	mov	ip, r0
 80132a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80132a8:	eb0c 0401 	add.w	r4, ip, r1
 80132ac:	4294      	cmp	r4, r2
 80132ae:	bfde      	ittt	le
 80132b0:	1b12      	suble	r2, r2, r4
 80132b2:	eb04 0c01 	addle.w	ip, r4, r1
 80132b6:	1840      	addle	r0, r0, r1
 80132b8:	0052      	lsls	r2, r2, #1
 80132ba:	f1be 0e01 	subs.w	lr, lr, #1
 80132be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80132c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80132c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80132ca:	d1ed      	bne.n	80132a8 <__ieee754_sqrt+0x94>
 80132cc:	4671      	mov	r1, lr
 80132ce:	2720      	movs	r7, #32
 80132d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80132d4:	4562      	cmp	r2, ip
 80132d6:	eb04 060e 	add.w	r6, r4, lr
 80132da:	dc02      	bgt.n	80132e2 <__ieee754_sqrt+0xce>
 80132dc:	d113      	bne.n	8013306 <__ieee754_sqrt+0xf2>
 80132de:	429e      	cmp	r6, r3
 80132e0:	d811      	bhi.n	8013306 <__ieee754_sqrt+0xf2>
 80132e2:	2e00      	cmp	r6, #0
 80132e4:	eb06 0e04 	add.w	lr, r6, r4
 80132e8:	da43      	bge.n	8013372 <__ieee754_sqrt+0x15e>
 80132ea:	f1be 0f00 	cmp.w	lr, #0
 80132ee:	db40      	blt.n	8013372 <__ieee754_sqrt+0x15e>
 80132f0:	f10c 0801 	add.w	r8, ip, #1
 80132f4:	eba2 020c 	sub.w	r2, r2, ip
 80132f8:	429e      	cmp	r6, r3
 80132fa:	bf88      	it	hi
 80132fc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013300:	1b9b      	subs	r3, r3, r6
 8013302:	4421      	add	r1, r4
 8013304:	46c4      	mov	ip, r8
 8013306:	0052      	lsls	r2, r2, #1
 8013308:	3f01      	subs	r7, #1
 801330a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801330e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013312:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013316:	d1dd      	bne.n	80132d4 <__ieee754_sqrt+0xc0>
 8013318:	4313      	orrs	r3, r2
 801331a:	d006      	beq.n	801332a <__ieee754_sqrt+0x116>
 801331c:	1c4c      	adds	r4, r1, #1
 801331e:	bf13      	iteet	ne
 8013320:	3101      	addne	r1, #1
 8013322:	3001      	addeq	r0, #1
 8013324:	4639      	moveq	r1, r7
 8013326:	f021 0101 	bicne.w	r1, r1, #1
 801332a:	1043      	asrs	r3, r0, #1
 801332c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013330:	0849      	lsrs	r1, r1, #1
 8013332:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013336:	07c2      	lsls	r2, r0, #31
 8013338:	bf48      	it	mi
 801333a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801333e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8013342:	460c      	mov	r4, r1
 8013344:	463d      	mov	r5, r7
 8013346:	e77f      	b.n	8013248 <__ieee754_sqrt+0x34>
 8013348:	0ada      	lsrs	r2, r3, #11
 801334a:	3815      	subs	r0, #21
 801334c:	055b      	lsls	r3, r3, #21
 801334e:	2a00      	cmp	r2, #0
 8013350:	d0fa      	beq.n	8013348 <__ieee754_sqrt+0x134>
 8013352:	02d7      	lsls	r7, r2, #11
 8013354:	d50a      	bpl.n	801336c <__ieee754_sqrt+0x158>
 8013356:	f1c1 0420 	rsb	r4, r1, #32
 801335a:	fa23 f404 	lsr.w	r4, r3, r4
 801335e:	1e4d      	subs	r5, r1, #1
 8013360:	408b      	lsls	r3, r1
 8013362:	4322      	orrs	r2, r4
 8013364:	1b41      	subs	r1, r0, r5
 8013366:	e788      	b.n	801327a <__ieee754_sqrt+0x66>
 8013368:	4608      	mov	r0, r1
 801336a:	e7f0      	b.n	801334e <__ieee754_sqrt+0x13a>
 801336c:	0052      	lsls	r2, r2, #1
 801336e:	3101      	adds	r1, #1
 8013370:	e7ef      	b.n	8013352 <__ieee754_sqrt+0x13e>
 8013372:	46e0      	mov	r8, ip
 8013374:	e7be      	b.n	80132f4 <__ieee754_sqrt+0xe0>
 8013376:	bf00      	nop
 8013378:	7ff00000 	.word	0x7ff00000

0801337c <fabs>:
 801337c:	ec51 0b10 	vmov	r0, r1, d0
 8013380:	ee10 2a10 	vmov	r2, s0
 8013384:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013388:	ec43 2b10 	vmov	d0, r2, r3
 801338c:	4770      	bx	lr

0801338e <finite>:
 801338e:	b082      	sub	sp, #8
 8013390:	ed8d 0b00 	vstr	d0, [sp]
 8013394:	9801      	ldr	r0, [sp, #4]
 8013396:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801339a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801339e:	0fc0      	lsrs	r0, r0, #31
 80133a0:	b002      	add	sp, #8
 80133a2:	4770      	bx	lr

080133a4 <rint>:
 80133a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133a6:	ec51 0b10 	vmov	r0, r1, d0
 80133aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80133ae:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80133b2:	2e13      	cmp	r6, #19
 80133b4:	ee10 4a10 	vmov	r4, s0
 80133b8:	460b      	mov	r3, r1
 80133ba:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80133be:	dc58      	bgt.n	8013472 <rint+0xce>
 80133c0:	2e00      	cmp	r6, #0
 80133c2:	da2b      	bge.n	801341c <rint+0x78>
 80133c4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80133c8:	4302      	orrs	r2, r0
 80133ca:	d023      	beq.n	8013414 <rint+0x70>
 80133cc:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80133d0:	4302      	orrs	r2, r0
 80133d2:	4254      	negs	r4, r2
 80133d4:	4314      	orrs	r4, r2
 80133d6:	0c4b      	lsrs	r3, r1, #17
 80133d8:	0b24      	lsrs	r4, r4, #12
 80133da:	045b      	lsls	r3, r3, #17
 80133dc:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80133e0:	ea44 0103 	orr.w	r1, r4, r3
 80133e4:	4b32      	ldr	r3, [pc, #200]	; (80134b0 <rint+0x10c>)
 80133e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80133ea:	e9d3 6700 	ldrd	r6, r7, [r3]
 80133ee:	4602      	mov	r2, r0
 80133f0:	460b      	mov	r3, r1
 80133f2:	4630      	mov	r0, r6
 80133f4:	4639      	mov	r1, r7
 80133f6:	f7ec ff49 	bl	800028c <__adddf3>
 80133fa:	e9cd 0100 	strd	r0, r1, [sp]
 80133fe:	463b      	mov	r3, r7
 8013400:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013404:	4632      	mov	r2, r6
 8013406:	f7ec ff3f 	bl	8000288 <__aeabi_dsub>
 801340a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801340e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8013412:	4639      	mov	r1, r7
 8013414:	ec41 0b10 	vmov	d0, r0, r1
 8013418:	b003      	add	sp, #12
 801341a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801341c:	4a25      	ldr	r2, [pc, #148]	; (80134b4 <rint+0x110>)
 801341e:	4132      	asrs	r2, r6
 8013420:	ea01 0702 	and.w	r7, r1, r2
 8013424:	4307      	orrs	r7, r0
 8013426:	d0f5      	beq.n	8013414 <rint+0x70>
 8013428:	0851      	lsrs	r1, r2, #1
 801342a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801342e:	4314      	orrs	r4, r2
 8013430:	d00c      	beq.n	801344c <rint+0xa8>
 8013432:	ea23 0201 	bic.w	r2, r3, r1
 8013436:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801343a:	2e13      	cmp	r6, #19
 801343c:	fa43 f606 	asr.w	r6, r3, r6
 8013440:	bf0c      	ite	eq
 8013442:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8013446:	2400      	movne	r4, #0
 8013448:	ea42 0306 	orr.w	r3, r2, r6
 801344c:	4918      	ldr	r1, [pc, #96]	; (80134b0 <rint+0x10c>)
 801344e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8013452:	4622      	mov	r2, r4
 8013454:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013458:	4620      	mov	r0, r4
 801345a:	4629      	mov	r1, r5
 801345c:	f7ec ff16 	bl	800028c <__adddf3>
 8013460:	e9cd 0100 	strd	r0, r1, [sp]
 8013464:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013468:	4622      	mov	r2, r4
 801346a:	462b      	mov	r3, r5
 801346c:	f7ec ff0c 	bl	8000288 <__aeabi_dsub>
 8013470:	e7d0      	b.n	8013414 <rint+0x70>
 8013472:	2e33      	cmp	r6, #51	; 0x33
 8013474:	dd07      	ble.n	8013486 <rint+0xe2>
 8013476:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801347a:	d1cb      	bne.n	8013414 <rint+0x70>
 801347c:	ee10 2a10 	vmov	r2, s0
 8013480:	f7ec ff04 	bl	800028c <__adddf3>
 8013484:	e7c6      	b.n	8013414 <rint+0x70>
 8013486:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801348a:	f04f 36ff 	mov.w	r6, #4294967295
 801348e:	40d6      	lsrs	r6, r2
 8013490:	4230      	tst	r0, r6
 8013492:	d0bf      	beq.n	8013414 <rint+0x70>
 8013494:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8013498:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801349c:	bf1f      	itttt	ne
 801349e:	ea24 0101 	bicne.w	r1, r4, r1
 80134a2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80134a6:	fa44 f202 	asrne.w	r2, r4, r2
 80134aa:	ea41 0402 	orrne.w	r4, r1, r2
 80134ae:	e7cd      	b.n	801344c <rint+0xa8>
 80134b0:	08014790 	.word	0x08014790
 80134b4:	000fffff 	.word	0x000fffff

080134b8 <scalbn>:
 80134b8:	b570      	push	{r4, r5, r6, lr}
 80134ba:	ec55 4b10 	vmov	r4, r5, d0
 80134be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80134c2:	4606      	mov	r6, r0
 80134c4:	462b      	mov	r3, r5
 80134c6:	b99a      	cbnz	r2, 80134f0 <scalbn+0x38>
 80134c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80134cc:	4323      	orrs	r3, r4
 80134ce:	d036      	beq.n	801353e <scalbn+0x86>
 80134d0:	4b39      	ldr	r3, [pc, #228]	; (80135b8 <scalbn+0x100>)
 80134d2:	4629      	mov	r1, r5
 80134d4:	ee10 0a10 	vmov	r0, s0
 80134d8:	2200      	movs	r2, #0
 80134da:	f7ed f88d 	bl	80005f8 <__aeabi_dmul>
 80134de:	4b37      	ldr	r3, [pc, #220]	; (80135bc <scalbn+0x104>)
 80134e0:	429e      	cmp	r6, r3
 80134e2:	4604      	mov	r4, r0
 80134e4:	460d      	mov	r5, r1
 80134e6:	da10      	bge.n	801350a <scalbn+0x52>
 80134e8:	a32b      	add	r3, pc, #172	; (adr r3, 8013598 <scalbn+0xe0>)
 80134ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ee:	e03a      	b.n	8013566 <scalbn+0xae>
 80134f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80134f4:	428a      	cmp	r2, r1
 80134f6:	d10c      	bne.n	8013512 <scalbn+0x5a>
 80134f8:	ee10 2a10 	vmov	r2, s0
 80134fc:	4620      	mov	r0, r4
 80134fe:	4629      	mov	r1, r5
 8013500:	f7ec fec4 	bl	800028c <__adddf3>
 8013504:	4604      	mov	r4, r0
 8013506:	460d      	mov	r5, r1
 8013508:	e019      	b.n	801353e <scalbn+0x86>
 801350a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801350e:	460b      	mov	r3, r1
 8013510:	3a36      	subs	r2, #54	; 0x36
 8013512:	4432      	add	r2, r6
 8013514:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013518:	428a      	cmp	r2, r1
 801351a:	dd08      	ble.n	801352e <scalbn+0x76>
 801351c:	2d00      	cmp	r5, #0
 801351e:	a120      	add	r1, pc, #128	; (adr r1, 80135a0 <scalbn+0xe8>)
 8013520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013524:	da1c      	bge.n	8013560 <scalbn+0xa8>
 8013526:	a120      	add	r1, pc, #128	; (adr r1, 80135a8 <scalbn+0xf0>)
 8013528:	e9d1 0100 	ldrd	r0, r1, [r1]
 801352c:	e018      	b.n	8013560 <scalbn+0xa8>
 801352e:	2a00      	cmp	r2, #0
 8013530:	dd08      	ble.n	8013544 <scalbn+0x8c>
 8013532:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013536:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801353a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801353e:	ec45 4b10 	vmov	d0, r4, r5
 8013542:	bd70      	pop	{r4, r5, r6, pc}
 8013544:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013548:	da19      	bge.n	801357e <scalbn+0xc6>
 801354a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801354e:	429e      	cmp	r6, r3
 8013550:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013554:	dd0a      	ble.n	801356c <scalbn+0xb4>
 8013556:	a112      	add	r1, pc, #72	; (adr r1, 80135a0 <scalbn+0xe8>)
 8013558:	e9d1 0100 	ldrd	r0, r1, [r1]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d1e2      	bne.n	8013526 <scalbn+0x6e>
 8013560:	a30f      	add	r3, pc, #60	; (adr r3, 80135a0 <scalbn+0xe8>)
 8013562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013566:	f7ed f847 	bl	80005f8 <__aeabi_dmul>
 801356a:	e7cb      	b.n	8013504 <scalbn+0x4c>
 801356c:	a10a      	add	r1, pc, #40	; (adr r1, 8013598 <scalbn+0xe0>)
 801356e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d0b8      	beq.n	80134e8 <scalbn+0x30>
 8013576:	a10e      	add	r1, pc, #56	; (adr r1, 80135b0 <scalbn+0xf8>)
 8013578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801357c:	e7b4      	b.n	80134e8 <scalbn+0x30>
 801357e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013582:	3236      	adds	r2, #54	; 0x36
 8013584:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013588:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801358c:	4620      	mov	r0, r4
 801358e:	4b0c      	ldr	r3, [pc, #48]	; (80135c0 <scalbn+0x108>)
 8013590:	2200      	movs	r2, #0
 8013592:	e7e8      	b.n	8013566 <scalbn+0xae>
 8013594:	f3af 8000 	nop.w
 8013598:	c2f8f359 	.word	0xc2f8f359
 801359c:	01a56e1f 	.word	0x01a56e1f
 80135a0:	8800759c 	.word	0x8800759c
 80135a4:	7e37e43c 	.word	0x7e37e43c
 80135a8:	8800759c 	.word	0x8800759c
 80135ac:	fe37e43c 	.word	0xfe37e43c
 80135b0:	c2f8f359 	.word	0xc2f8f359
 80135b4:	81a56e1f 	.word	0x81a56e1f
 80135b8:	43500000 	.word	0x43500000
 80135bc:	ffff3cb0 	.word	0xffff3cb0
 80135c0:	3c900000 	.word	0x3c900000

080135c4 <_init>:
 80135c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135c6:	bf00      	nop
 80135c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135ca:	bc08      	pop	{r3}
 80135cc:	469e      	mov	lr, r3
 80135ce:	4770      	bx	lr

080135d0 <_fini>:
 80135d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135d2:	bf00      	nop
 80135d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135d6:	bc08      	pop	{r3}
 80135d8:	469e      	mov	lr, r3
 80135da:	4770      	bx	lr
