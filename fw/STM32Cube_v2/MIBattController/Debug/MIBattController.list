
MIBattController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00018000  08020000  08020000  00040000  2**2
                  ALLOC, READONLY
  1 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0001211c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c38  080122b0  080122b0  000222b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08012ee8  08012ee8  00030218  2**0
                  CONTENTS
  5 .ARM          00000008  08012ee8  08012ee8  00022ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08012ef0  08012ef0  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08012ef0  08012ef0  00022ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08012ef4  08012ef4  00022ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000218  20000000  08012ef8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000060c0  20000218  08013110  00030218  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200062d8  08013110  000362d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028436  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000492d  00000000  00000000  0005867e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c98  00000000  00000000  0005cfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001af0  00000000  00000000  0005ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275b4  00000000  00000000  00060738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe36  00000000  00000000  00087cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee221  00000000  00000000  000a7b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00195d43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009034  00000000  00000000  00195d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012294 	.word	0x08012294

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08012294 	.word	0x08012294

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DelayedInvMosOn>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*function switches on inverter mosfet, according to actual config in an instant or with delay*/
void DelayedInvMosOn(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	switch (ConfigReg)
 8001024:	4b76      	ldr	r3, [pc, #472]	; (8001200 <DelayedInvMosOn+0x1e0>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b0d      	cmp	r3, #13
 800102a:	f200 80e3 	bhi.w	80011f4 <DelayedInvMosOn+0x1d4>
 800102e:	a201      	add	r2, pc, #4	; (adr r2, 8001034 <DelayedInvMosOn+0x14>)
 8001030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001034:	0800106d 	.word	0x0800106d
 8001038:	08001077 	.word	0x08001077
 800103c:	08001095 	.word	0x08001095
 8001040:	080010b3 	.word	0x080010b3
 8001044:	080010d3 	.word	0x080010d3
 8001048:	080010f1 	.word	0x080010f1
 800104c:	08001111 	.word	0x08001111
 8001050:	08001131 	.word	0x08001131
 8001054:	0800113b 	.word	0x0800113b
 8001058:	08001159 	.word	0x08001159
 800105c:	08001177 	.word	0x08001177
 8001060:	08001197 	.word	0x08001197
 8001064:	080011b5 	.word	0x080011b5
 8001068:	080011d5 	.word	0x080011d5
	{
	case CONFIG_MAINS_0DELAY:
		InverterMOS_ON();
 800106c:	f000 ff8a 	bl	8001f84 <InverterMOS_ON>
		BatteryMOS_ON();
 8001070:	f000 ff18 	bl	8001ea4 <BatteryMOS_ON>
		break;
 8001074:	e0c1      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_MAINS_1DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME1)
 8001076:	4b63      	ldr	r3, [pc, #396]	; (8001204 <DelayedInvMosOn+0x1e4>)
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800107e:	d904      	bls.n	800108a <DelayedInvMosOn+0x6a>
		{
			InverterMOS_ON();
 8001080:	f000 ff80 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 8001084:	f000 ff0e 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 8001088:	e0b7      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 800108a:	f000 ff4b 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 800108e:	f000 ff79 	bl	8001f84 <InverterMOS_ON>
		break;
 8001092:	e0b2      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_MAINS_2DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME2)
 8001094:	4b5b      	ldr	r3, [pc, #364]	; (8001204 <DelayedInvMosOn+0x1e4>)
 8001096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001098:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800109c:	d904      	bls.n	80010a8 <DelayedInvMosOn+0x88>
		{
			InverterMOS_ON();
 800109e:	f000 ff71 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 80010a2:	f000 feff 	bl	8001ea4 <BatteryMOS_ON>
#else
				InverterMOS_OFF();
				BatteryMOS_ON();
#endif
		}
		break;
 80010a6:	e0a8      	b.n	80011fa <DelayedInvMosOn+0x1da>
				BatteryMOS_OFF();
 80010a8:	f000 ff3c 	bl	8001f24 <BatteryMOS_OFF>
				InverterMOS_ON();
 80010ac:	f000 ff6a 	bl	8001f84 <InverterMOS_ON>
		break;
 80010b0:	e0a3      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_MAINS_3DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME3)
 80010b2:	4b54      	ldr	r3, [pc, #336]	; (8001204 <DelayedInvMosOn+0x1e4>)
 80010b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b6:	f642 2230 	movw	r2, #10800	; 0x2a30
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d904      	bls.n	80010c8 <DelayedInvMosOn+0xa8>
		{
			InverterMOS_ON();
 80010be:	f000 ff61 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 80010c2:	f000 feef 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 80010c6:	e098      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 80010c8:	f000 ff2c 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 80010cc:	f000 ff5a 	bl	8001f84 <InverterMOS_ON>
		break;
 80010d0:	e093      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_MAINS_4DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME4)
 80010d2:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <DelayedInvMosOn+0x1e4>)
 80010d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 80010da:	d904      	bls.n	80010e6 <DelayedInvMosOn+0xc6>
		{
			InverterMOS_ON();
 80010dc:	f000 ff52 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 80010e0:	f000 fee0 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 80010e4:	e089      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 80010e6:	f000 ff1d 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 80010ea:	f000 ff4b 	bl	8001f84 <InverterMOS_ON>
		break;
 80010ee:	e084      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_MAINS_5DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME5)
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <DelayedInvMosOn+0x1e4>)
 80010f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f4:	f244 6250 	movw	r2, #18000	; 0x4650
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d904      	bls.n	8001106 <DelayedInvMosOn+0xe6>
		{
			InverterMOS_ON();
 80010fc:	f000 ff42 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 8001100:	f000 fed0 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 8001104:	e079      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 8001106:	f000 ff0d 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 800110a:	f000 ff3b 	bl	8001f84 <InverterMOS_ON>
		break;
 800110e:	e074      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_MAINS_6DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME6)
 8001110:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <DelayedInvMosOn+0x1e4>)
 8001112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001114:	f245 4260 	movw	r2, #21600	; 0x5460
 8001118:	4293      	cmp	r3, r2
 800111a:	d904      	bls.n	8001126 <DelayedInvMosOn+0x106>
		{
			InverterMOS_ON();
 800111c:	f000 ff32 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 8001120:	f000 fec0 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 8001124:	e069      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 8001126:	f000 fefd 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 800112a:	f000 ff2b 	bl	8001f84 <InverterMOS_ON>
		break;
 800112e:	e064      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_BATT_0DELAY:
		InverterMOS_ON();
 8001130:	f000 ff28 	bl	8001f84 <InverterMOS_ON>
		BatteryMOS_ON();
 8001134:	f000 feb6 	bl	8001ea4 <BatteryMOS_ON>
		break;
 8001138:	e05f      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_BATT_1DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME1)
 800113a:	4b32      	ldr	r3, [pc, #200]	; (8001204 <DelayedInvMosOn+0x1e4>)
 800113c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001142:	d904      	bls.n	800114e <DelayedInvMosOn+0x12e>
		{
			InverterMOS_ON();
 8001144:	f000 ff1e 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 8001148:	f000 feac 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 800114c:	e055      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 800114e:	f000 fee9 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 8001152:	f000 ff17 	bl	8001f84 <InverterMOS_ON>
		break;
 8001156:	e050      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_BATT_2DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME2)
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <DelayedInvMosOn+0x1e4>)
 800115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001160:	d904      	bls.n	800116c <DelayedInvMosOn+0x14c>
		{
			InverterMOS_ON();
 8001162:	f000 ff0f 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 8001166:	f000 fe9d 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 800116a:	e046      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 800116c:	f000 feda 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 8001170:	f000 ff08 	bl	8001f84 <InverterMOS_ON>
		break;
 8001174:	e041      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_BATT_3DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME3)
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <DelayedInvMosOn+0x1e4>)
 8001178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117a:	f642 2230 	movw	r2, #10800	; 0x2a30
 800117e:	4293      	cmp	r3, r2
 8001180:	d904      	bls.n	800118c <DelayedInvMosOn+0x16c>
		{
			InverterMOS_ON();
 8001182:	f000 feff 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 8001186:	f000 fe8d 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 800118a:	e036      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 800118c:	f000 feca 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 8001190:	f000 fef8 	bl	8001f84 <InverterMOS_ON>
		break;
 8001194:	e031      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_BATT_4DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME4)
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <DelayedInvMosOn+0x1e4>)
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 800119e:	d904      	bls.n	80011aa <DelayedInvMosOn+0x18a>
		{
			InverterMOS_ON();
 80011a0:	f000 fef0 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 80011a4:	f000 fe7e 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 80011a8:	e027      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 80011aa:	f000 febb 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 80011ae:	f000 fee9 	bl	8001f84 <InverterMOS_ON>
		break;
 80011b2:	e022      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_BATT_5DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME5)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <DelayedInvMosOn+0x1e4>)
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	f244 6250 	movw	r2, #18000	; 0x4650
 80011bc:	4293      	cmp	r3, r2
 80011be:	d904      	bls.n	80011ca <DelayedInvMosOn+0x1aa>
		{
			InverterMOS_ON();
 80011c0:	f000 fee0 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 80011c4:	f000 fe6e 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 80011c8:	e017      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 80011ca:	f000 feab 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 80011ce:	f000 fed9 	bl	8001f84 <InverterMOS_ON>
		break;
 80011d2:	e012      	b.n	80011fa <DelayedInvMosOn+0x1da>
	case CONFIG_BATT_6DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME6)
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <DelayedInvMosOn+0x1e4>)
 80011d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d8:	f245 4260 	movw	r2, #21600	; 0x5460
 80011dc:	4293      	cmp	r3, r2
 80011de:	d904      	bls.n	80011ea <DelayedInvMosOn+0x1ca>
		{
			InverterMOS_ON();
 80011e0:	f000 fed0 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_ON();
 80011e4:	f000 fe5e 	bl	8001ea4 <BatteryMOS_ON>
#else
			InverterMOS_OFF();
			BatteryMOS_ON();
#endif
		}
		break;
 80011e8:	e007      	b.n	80011fa <DelayedInvMosOn+0x1da>
			BatteryMOS_OFF();
 80011ea:	f000 fe9b 	bl	8001f24 <BatteryMOS_OFF>
			InverterMOS_ON();
 80011ee:	f000 fec9 	bl	8001f84 <InverterMOS_ON>
		break;
 80011f2:	e002      	b.n	80011fa <DelayedInvMosOn+0x1da>
	default:
		InverterMOS_ON();
 80011f4:	f000 fec6 	bl	8001f84 <InverterMOS_ON>
		break;
 80011f8:	bf00      	nop
	}
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20005994 	.word	0x20005994
 8001204:	20005bf8 	.word	0x20005bf8

08001208 <ResetInverterDay>:
 * reset is needed due to issue with starting Inverter from low voltage at dawn (e.g. when battery is charging)
 * to reset MPPT algorithm at least few second long voltage spike (OCV) is needed
 * to do that procedure will disconnect INV, Battery, wait few seconds and start Inverter again
 */
void ResetInverterDay(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	switch (StateResetInv)
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <ResetInverterDay+0x148>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b1b      	cmp	r3, #27
 8001212:	f200 8093 	bhi.w	800133c <ResetInverterDay+0x134>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <ResetInverterDay+0x14>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	0800128d 	.word	0x0800128d
 8001220:	080012e3 	.word	0x080012e3
 8001224:	08001307 	.word	0x08001307
 8001228:	08001307 	.word	0x08001307
 800122c:	08001307 	.word	0x08001307
 8001230:	08001307 	.word	0x08001307
 8001234:	08001307 	.word	0x08001307
 8001238:	08001307 	.word	0x08001307
 800123c:	08001307 	.word	0x08001307
 8001240:	08001307 	.word	0x08001307
 8001244:	08001307 	.word	0x08001307
 8001248:	08001307 	.word	0x08001307
 800124c:	08001307 	.word	0x08001307
 8001250:	08001307 	.word	0x08001307
 8001254:	08001307 	.word	0x08001307
 8001258:	08001307 	.word	0x08001307
 800125c:	08001307 	.word	0x08001307
 8001260:	08001313 	.word	0x08001313
 8001264:	08001313 	.word	0x08001313
 8001268:	08001313 	.word	0x08001313
 800126c:	08001313 	.word	0x08001313
 8001270:	08001313 	.word	0x08001313
 8001274:	08001313 	.word	0x08001313
 8001278:	08001313 	.word	0x08001313
 800127c:	08001313 	.word	0x08001313
 8001280:	08001313 	.word	0x08001313
 8001284:	08001313 	.word	0x08001313
 8001288:	08001327 	.word	0x08001327
	{
	case 0:
#if HW_VER > 01
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN && FlagExt_I == 0)
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <ResetInverterDay+0x14c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001294:	d908      	bls.n	80012a8 <ResetInverterDay+0xa0>
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <ResetInverterDay+0x150>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <ResetInverterDay+0xa0>
#else
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN )
#endif
		{
			TimeToResetInv = TIME2RESET_INV;	//reset time to 30 minutes if inv is working
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <ResetInverterDay+0x154>)
 80012a0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e00b      	b.n	80012c0 <ResetInverterDay+0xb8>
		}
#if HW_VER > 01
		else if (FlagExt_I == 1)
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <ResetInverterDay+0x150>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d107      	bne.n	80012c0 <ResetInverterDay+0xb8>
		{
			TimeToResetInv = 1;
 80012b0:	4b2a      	ldr	r3, [pc, #168]	; (800135c <ResetInverterDay+0x154>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
			StatCurrentWh.InvExtResetCnt++;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <ResetInverterDay+0x158>)
 80012b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a28      	ldr	r2, [pc, #160]	; (8001360 <ResetInverterDay+0x158>)
 80012be:	6513      	str	r3, [r2, #80]	; 0x50
		}
#endif
		if (TimeToResetInv)	TimeToResetInv--;
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <ResetInverterDay+0x154>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d004      	beq.n	80012d2 <ResetInverterDay+0xca>
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <ResetInverterDay+0x154>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <ResetInverterDay+0x154>)
 80012d0:	6013      	str	r3, [r2, #0]
		if (!TimeToResetInv) StateResetInv=1;	//start Inv Reset procedure
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <ResetInverterDay+0x154>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d137      	bne.n	800134a <ResetInverterDay+0x142>
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <ResetInverterDay+0x148>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]
		break;
 80012e0:	e033      	b.n	800134a <ResetInverterDay+0x142>
	case 1:	//30 minutes without inv currrent. set flag that procedure is ON,
		FlagResetInverter = 1;	//procedure is on
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <ResetInverterDay+0x15c>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
		BatteryMOS_OFF();		//switch off all loads causing OCV
 80012e8:	f000 fe1c 	bl	8001f24 <BatteryMOS_OFF>
		InverterMOS_OFF();
 80012ec:	f000 fe62 	bl	8001fb4 <InverterMOS_OFF>
		StateResetInv = 2;
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <ResetInverterDay+0x148>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	601a      	str	r2, [r3, #0]
		StatCurrentWh.InvResetCntr++;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <ResetInverterDay+0x158>)
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <ResetInverterDay+0x158>)
 80012fe:	62d3      	str	r3, [r2, #44]	; 0x2c
		ExtOut_InvResetStart();
 8001300:	f000 fd60 	bl	8001dc4 <ExtOut_InvResetStart>
		break;
 8001304:	e022      	b.n	800134c <ResetInverterDay+0x144>
	case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10:
	case 11: case 12: case 13: case 14: case 15: case 16:
		//wait 15 seconds
		StateResetInv++;
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <ResetInverterDay+0x148>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	4a10      	ldr	r2, [pc, #64]	; (8001350 <ResetInverterDay+0x148>)
 800130e:	6013      	str	r3, [r2, #0]
		break;
 8001310:	e01c      	b.n	800134c <ResetInverterDay+0x144>
	case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26:
		//ON inverter MOS and wait 10 seconds
		InverterMOS_ON();
 8001312:	f000 fe37 	bl	8001f84 <InverterMOS_ON>
		StateResetInv++;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <ResetInverterDay+0x148>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <ResetInverterDay+0x148>)
 800131e:	6013      	str	r3, [r2, #0]
		ExtOut_InvResetStop();
 8001320:	f000 fd88 	bl	8001e34 <ExtOut_InvResetStop>
		break;
 8001324:	e012      	b.n	800134c <ResetInverterDay+0x144>
	case 27:	//now return to regular operation of controller
		StateResetInv=0;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <ResetInverterDay+0x148>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <ResetInverterDay+0x15c>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
		TimeToResetInv = TIME2RESET_INV;	//reset timer for 30 minutes
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <ResetInverterDay+0x154>)
 8001334:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001338:	601a      	str	r2, [r3, #0]
		break;
 800133a:	e007      	b.n	800134c <ResetInverterDay+0x144>
	default:
		StateResetInv=0;
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <ResetInverterDay+0x148>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <ResetInverterDay+0x15c>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
		break;
 8001348:	e000      	b.n	800134c <ResetInverterDay+0x144>
		break;
 800134a:	bf00      	nop
	}
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20006234 	.word	0x20006234
 8001354:	20005998 	.word	0x20005998
 8001358:	2000024c 	.word	0x2000024c
 800135c:	2000000c 	.word	0x2000000c
 8001360:	20005a0c 	.word	0x20005a0c
 8001364:	2000610c 	.word	0x2000610c

08001368 <ResetInverterNight>:
 * reset is needed due to excessive current consumption (when batt voltage < MPP but battery can supply higher current than PV)
 * its due to mppt alg in inverter. Not needed when battery has operating voltage higher than MPP of inverter or PV panel
 * procedure will disconnect INV, wait few seconds and start Inverter again
 */
void ResetInverterNight(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	switch (StateResetInv)
 800136c:	4b53      	ldr	r3, [pc, #332]	; (80014bc <ResetInverterNight+0x154>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b1b      	cmp	r3, #27
 8001372:	f200 8099 	bhi.w	80014a8 <ResetInverterNight+0x140>
 8001376:	a201      	add	r2, pc, #4	; (adr r2, 800137c <ResetInverterNight+0x14>)
 8001378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137c:	080013ed 	.word	0x080013ed
 8001380:	0800144d 	.word	0x0800144d
 8001384:	08001471 	.word	0x08001471
 8001388:	08001471 	.word	0x08001471
 800138c:	08001471 	.word	0x08001471
 8001390:	08001471 	.word	0x08001471
 8001394:	08001471 	.word	0x08001471
 8001398:	08001471 	.word	0x08001471
 800139c:	08001471 	.word	0x08001471
 80013a0:	08001471 	.word	0x08001471
 80013a4:	08001471 	.word	0x08001471
 80013a8:	08001471 	.word	0x08001471
 80013ac:	08001471 	.word	0x08001471
 80013b0:	08001471 	.word	0x08001471
 80013b4:	08001471 	.word	0x08001471
 80013b8:	08001471 	.word	0x08001471
 80013bc:	08001471 	.word	0x08001471
 80013c0:	0800147d 	.word	0x0800147d
 80013c4:	0800147d 	.word	0x0800147d
 80013c8:	0800147d 	.word	0x0800147d
 80013cc:	0800147d 	.word	0x0800147d
 80013d0:	0800147d 	.word	0x0800147d
 80013d4:	0800147d 	.word	0x0800147d
 80013d8:	0800147d 	.word	0x0800147d
 80013dc:	0800147d 	.word	0x0800147d
 80013e0:	0800147d 	.word	0x0800147d
 80013e4:	0800147d 	.word	0x0800147d
 80013e8:	08001495 	.word	0x08001495
	{
	case 0:
		//if (Adc1Measurements.Inv_current > INV_CURRENT_MIN &&
		if ( Adc1Measurements.Inv_current < INV_CURRENT_MAX)
 80013ec:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <ResetInverterNight+0x158>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f243 22c7 	movw	r2, #12999	; 0x32c7
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d803      	bhi.n	8001400 <ResetInverterNight+0x98>
		{
			TimeToResetInv = TIME2OVLD_INV;	//set overload timer for x seconds
 80013f8:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <ResetInverterNight+0x15c>)
 80013fa:	222d      	movs	r2, #45	; 0x2d
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e008      	b.n	8001412 <ResetInverterNight+0xaa>
		}
		else if (Adc1Measurements.Inv_current > INV_CURR_SC)	//considered as short-circuit
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <ResetInverterNight+0x158>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f244 6250 	movw	r2, #18000	; 0x4650
 8001408:	4293      	cmp	r3, r2
 800140a:	d902      	bls.n	8001412 <ResetInverterNight+0xaa>
		{
			TimeToResetInv = 0;
 800140c:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <ResetInverterNight+0x15c>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
		}
#if HW_VER > 01
		if (FlagExt_I == 1)
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <ResetInverterNight+0x160>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d107      	bne.n	800142a <ResetInverterNight+0xc2>
		{
			TimeToResetInv = 1;
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <ResetInverterNight+0x15c>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
			StatCurrentWh.InvExtResetCnt++;
 8001420:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <ResetInverterNight+0x164>)
 8001422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001424:	3301      	adds	r3, #1
 8001426:	4a29      	ldr	r2, [pc, #164]	; (80014cc <ResetInverterNight+0x164>)
 8001428:	6513      	str	r3, [r2, #80]	; 0x50
		}
#endif
		if (TimeToResetInv)	TimeToResetInv--;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <ResetInverterNight+0x15c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <ResetInverterNight+0xd4>
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <ResetInverterNight+0x15c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3b01      	subs	r3, #1
 8001438:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <ResetInverterNight+0x15c>)
 800143a:	6013      	str	r3, [r2, #0]
		if (!TimeToResetInv) StateResetInv=1;	//start Inv Reset procedure
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <ResetInverterNight+0x15c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d138      	bne.n	80014b6 <ResetInverterNight+0x14e>
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <ResetInverterNight+0x154>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
		break;
 800144a:	e034      	b.n	80014b6 <ResetInverterNight+0x14e>
	case 1:	//10 sec ovld (or no current) inv currrent. set flag that procedure is ON,
		FlagResetInverter = 1;	//procedure is on
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <ResetInverterNight+0x168>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

#if HW_VER > 01
		BatteryMOS_OFF();			//disconnect load (HW02>)and..
 8001452:	f000 fd67 	bl	8001f24 <BatteryMOS_OFF>
#endif
		InverterMOS_OFF();			//disconnect load
 8001456:	f000 fdad 	bl	8001fb4 <InverterMOS_OFF>
		StateResetInv = 2;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <ResetInverterNight+0x154>)
 800145c:	2202      	movs	r2, #2
 800145e:	601a      	str	r2, [r3, #0]
		//StatCurrentWh.InvResetCntr++;
		StatCurrentWh.InvOvcCounter++;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <ResetInverterNight+0x164>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	3301      	adds	r3, #1
 8001466:	4a19      	ldr	r2, [pc, #100]	; (80014cc <ResetInverterNight+0x164>)
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
		ExtOut_InvResetStart();
 800146a:	f000 fcab 	bl	8001dc4 <ExtOut_InvResetStart>
		break;
 800146e:	e023      	b.n	80014b8 <ResetInverterNight+0x150>
	case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10:
	case 11: case 12: case 13: case 14: case 15: case 16:
		//wait 15 seconds
		StateResetInv++;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <ResetInverterNight+0x154>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <ResetInverterNight+0x154>)
 8001478:	6013      	str	r3, [r2, #0]
		break;
 800147a:	e01d      	b.n	80014b8 <ResetInverterNight+0x150>
	case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26:
		//ON inverter MOS and wait 10 seconds
		InverterMOS_ON();
 800147c:	f000 fd82 	bl	8001f84 <InverterMOS_ON>
		BatteryMOS_ON();
 8001480:	f000 fd10 	bl	8001ea4 <BatteryMOS_ON>
		StateResetInv++;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <ResetInverterNight+0x154>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <ResetInverterNight+0x154>)
 800148c:	6013      	str	r3, [r2, #0]
		ExtOut_InvResetStop();
 800148e:	f000 fcd1 	bl	8001e34 <ExtOut_InvResetStop>
		break;
 8001492:	e011      	b.n	80014b8 <ResetInverterNight+0x150>
	case 27:	//now return to regular operation of controller
		StateResetInv=0;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <ResetInverterNight+0x154>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <ResetInverterNight+0x168>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
		TimeToResetInv = TIME2OVLD_INV;	//reset timer for 30 minutes
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <ResetInverterNight+0x15c>)
 80014a2:	222d      	movs	r2, #45	; 0x2d
 80014a4:	601a      	str	r2, [r3, #0]
		break;
 80014a6:	e007      	b.n	80014b8 <ResetInverterNight+0x150>
	default:
		StateResetInv=0;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <ResetInverterNight+0x154>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <ResetInverterNight+0x168>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
		break;
 80014b4:	e000      	b.n	80014b8 <ResetInverterNight+0x150>
		break;
 80014b6:	bf00      	nop
	}
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20006234 	.word	0x20006234
 80014c0:	20005998 	.word	0x20005998
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	2000024c 	.word	0x2000024c
 80014cc:	20005a0c 	.word	0x20005a0c
 80014d0:	2000610c 	.word	0x2000610c

080014d4 <setPWM_TIM2>:

void setPWM_TIM2(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 80014d4:	b084      	sub	sp, #16
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b088      	sub	sp, #32
 80014da:	af00      	add	r7, sp, #0
 80014dc:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80014e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 //HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 TIM_OC_InitTypeDef sConfigOC;
 //timer.Init.Period = period; // set the period duration
 //HAL_TIM_PWM_Init(&timer); // re-inititialise with new period value
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e4:	2360      	movs	r3, #96	; 0x60
 80014e6:	607b      	str	r3, [r7, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 80014e8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80014ec:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80014f2:	2308      	movs	r3, #8
 80014f4:	613b      	str	r3, [r7, #16]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80014fe:	4619      	mov	r1, r3
 8001500:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001504:	f006 fa6c 	bl	80079e0 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001508:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800150a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800150e:	f005 ffe1 	bl	80074d4 <HAL_TIM_PWM_Start>
}
 8001512:	bf00      	nop
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800151c:	b004      	add	sp, #16
 800151e:	4770      	bx	lr

08001520 <setPWM_TIM16>:

void setPWM_TIM16(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse)
{
 8001520:	b084      	sub	sp, #16
 8001522:	b580      	push	{r7, lr}
 8001524:	b088      	sub	sp, #32
 8001526:	af00      	add	r7, sp, #0
 8001528:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800152c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 TIM_OC_InitTypeDef sConfigOC;
 sConfigOC.Pulse = pulse; // set the pulse duration
 8001530:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001534:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001536:	2360      	movs	r3, #96	; 0x60
 8001538:	607b      	str	r3, [r7, #4]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
 sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001552:	4619      	mov	r1, r3
 8001554:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001558:	f006 fa42 	bl	80079e0 <HAL_TIM_PWM_ConfigChannel>
 /* Set the Capture Compare Register value */
 //*timer->CCR1 = pulse;
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 800155c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800155e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001562:	f005 ffb7 	bl	80074d4 <HAL_TIM_PWM_Start>
}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001570:	b004      	add	sp, #16
 8001572:	4770      	bx	lr

08001574 <LedStatusShow>:

/*function called once a 1 second to show mashine-state status thru LEDs*/
void LedStatusShow(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	if (LedStatusTimer)
 8001578:	4b61      	ldr	r3, [pc, #388]	; (8001700 <LedStatusShow+0x18c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01d      	beq.n	80015bc <LedStatusShow+0x48>
	{
		LedStatusTimer--;
 8001580:	4b5f      	ldr	r3, [pc, #380]	; (8001700 <LedStatusShow+0x18c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a5e      	ldr	r2, [pc, #376]	; (8001700 <LedStatusShow+0x18c>)
 8001588:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001590:	485c      	ldr	r0, [pc, #368]	; (8001704 <LedStatusShow+0x190>)
 8001592:	f004 fc93 	bl	8005ebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159c:	4859      	ldr	r0, [pc, #356]	; (8001704 <LedStatusShow+0x190>)
 800159e:	f004 fc8d 	bl	8005ebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a8:	4856      	ldr	r0, [pc, #344]	; (8001704 <LedStatusShow+0x190>)
 80015aa:	f004 fc87 	bl	8005ebc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b4:	4853      	ldr	r0, [pc, #332]	; (8001704 <LedStatusShow+0x190>)
 80015b6:	f004 fc81 	bl	8005ebc <HAL_GPIO_WritePin>
		{//lowest priority to show
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
		}
	}
}
 80015ba:	e09f      	b.n	80016fc <LedStatusShow+0x188>
		if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP || Adc1Measurements.NTC2_Inverter_mos>MOSFET_MAX_TEMP)	//powerMOSFET OVT 0
 80015bc:	4b52      	ldr	r3, [pc, #328]	; (8001708 <LedStatusShow+0x194>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b50      	cmp	r3, #80	; 0x50
 80015c2:	d803      	bhi.n	80015cc <LedStatusShow+0x58>
 80015c4:	4b50      	ldr	r3, [pc, #320]	; (8001708 <LedStatusShow+0x194>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	2b50      	cmp	r3, #80	; 0x50
 80015ca:	d91d      	bls.n	8001608 <LedStatusShow+0x94>
			if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80015cc:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <LedStatusShow+0x194>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b50      	cmp	r3, #80	; 0x50
 80015d2:	d905      	bls.n	80015e0 <LedStatusShow+0x6c>
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015da:	484a      	ldr	r0, [pc, #296]	; (8001704 <LedStatusShow+0x190>)
 80015dc:	f004 fc6e 	bl	8005ebc <HAL_GPIO_WritePin>
			if (Adc1Measurements.NTC2_Inverter_mos>MOSFET_MAX_TEMP) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80015e0:	4b49      	ldr	r3, [pc, #292]	; (8001708 <LedStatusShow+0x194>)
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	2b50      	cmp	r3, #80	; 0x50
 80015e6:	d905      	bls.n	80015f4 <LedStatusShow+0x80>
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ee:	4845      	ldr	r0, [pc, #276]	; (8001704 <LedStatusShow+0x190>)
 80015f0:	f004 fc64 	bl	8005ebc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80015f4:	2201      	movs	r2, #1
 80015f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fa:	4842      	ldr	r0, [pc, #264]	; (8001704 <LedStatusShow+0x190>)
 80015fc:	f004 fc5e 	bl	8005ebc <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001600:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <LedStatusShow+0x18c>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e079      	b.n	80016fc <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Time_NoBattery2Chg)	//cant charge battery (its full) 1 high priority
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <LedStatusShow+0x198>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00f      	beq.n	8001630 <LedStatusShow+0xbc>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001616:	483b      	ldr	r0, [pc, #236]	; (8001704 <LedStatusShow+0x190>)
 8001618:	f004 fc50 	bl	8005ebc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001622:	4838      	ldr	r0, [pc, #224]	; (8001704 <LedStatusShow+0x190>)
 8001624:	f004 fc4a 	bl	8005ebc <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <LedStatusShow+0x18c>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
}
 800162e:	e065      	b.n	80016fc <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattRecharge)	//battery charging (mains mode) 2
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <LedStatusShow+0x198>)
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <LedStatusShow+0xd8>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800163e:	4831      	ldr	r0, [pc, #196]	; (8001704 <LedStatusShow+0x190>)
 8001640:	f004 fc3c 	bl	8005ebc <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001644:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <LedStatusShow+0x18c>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
}
 800164a:	e057      	b.n	80016fc <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattOut)	//battery discharging 3
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <LedStatusShow+0x198>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d01b      	beq.n	800168c <LedStatusShow+0x118>
			if (FlagInverterMOS && FlagBatteryMOS)
 8001654:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <LedStatusShow+0x19c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00d      	beq.n	8001678 <LedStatusShow+0x104>
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <LedStatusShow+0x1a0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d009      	beq.n	8001678 <LedStatusShow+0x104>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800166a:	4826      	ldr	r0, [pc, #152]	; (8001704 <LedStatusShow+0x190>)
 800166c:	f004 fc26 	bl	8005ebc <HAL_GPIO_WritePin>
				LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <LedStatusShow+0x18c>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e041      	b.n	80016fc <LedStatusShow+0x188>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800167e:	4821      	ldr	r0, [pc, #132]	; (8001704 <LedStatusShow+0x190>)
 8001680:	f004 fc1c 	bl	8005ebc <HAL_GPIO_WritePin>
				LedStatusTimer = LEDSTATUS_TIMER_MED;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <LedStatusShow+0x18c>)
 8001686:	2203      	movs	r2, #3
 8001688:	601a      	str	r2, [r3, #0]
}
 800168a:	e037      	b.n	80016fc <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_Inverter)	//inverter operational (mains mode) 3
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <LedStatusShow+0x198>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <LedStatusShow+0x134>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169a:	481a      	ldr	r0, [pc, #104]	; (8001704 <LedStatusShow+0x190>)
 800169c:	f004 fc0e 	bl	8005ebc <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <LedStatusShow+0x18c>)
 80016a2:	2209      	movs	r2, #9
 80016a4:	601a      	str	r2, [r3, #0]
}
 80016a6:	e029      	b.n	80016fc <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattNoInv)	//battery charging, no inverter (mains mode) 4
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <LedStatusShow+0x198>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d009      	beq.n	80016c4 <LedStatusShow+0x150>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b6:	4813      	ldr	r0, [pc, #76]	; (8001704 <LedStatusShow+0x190>)
 80016b8:	f004 fc00 	bl	8005ebc <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <LedStatusShow+0x18c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
}
 80016c2:	e01b      	b.n	80016fc <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattIn)	//battery charging (battery mode) 5
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <LedStatusShow+0x198>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <LedStatusShow+0x16c>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <LedStatusShow+0x190>)
 80016d4:	f004 fbf2 	bl	8005ebc <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <LedStatusShow+0x18c>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
}
 80016de:	e00d      	b.n	80016fc <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Time_NightTime)	//night time, lowest priority to show 6
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <LedStatusShow+0x198>)
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d009      	beq.n	80016fc <LedStatusShow+0x188>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <LedStatusShow+0x190>)
 80016f0:	f004 fbe4 	bl	8005ebc <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <LedStatusShow+0x18c>)
 80016f6:	2209      	movs	r2, #9
 80016f8:	601a      	str	r2, [r3, #0]
}
 80016fa:	e7ff      	b.n	80016fc <LedStatusShow+0x188>
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200059b4 	.word	0x200059b4
 8001704:	48000400 	.word	0x48000400
 8001708:	20005998 	.word	0x20005998
 800170c:	200059b8 	.word	0x200059b8
 8001710:	20000244 	.word	0x20000244
 8001714:	20000240 	.word	0x20000240

08001718 <RestoreStatisticsFromFLASH>:

/*Function restoring last saved statistics from FLASH memory */
void RestoreStatisticsFromFLASH(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
	uint32_t i, curr_val=0, Highest_val=0;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
	//Stats_savedInFLASH[NO_FLASH_PAGES][FLASH_PAGE_SIZE]
	RecentPage_pointer = 0;
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <RestoreStatisticsFromFLASH+0x10c>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (NO_FLASH_PAGES); i++)
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e02f      	b.n	8001792 <RestoreStatisticsFromFLASH+0x7a>
		{
			for(uint32_t j=4;j>0;)
 8001732:	2304      	movs	r3, #4
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	e00d      	b.n	8001754 <RestoreStatisticsFromFLASH+0x3c>
			{
				j--;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	3b01      	subs	r3, #1
 800173c:	603b      	str	r3, [r7, #0]
				curr_val = (curr_val<<8) | Stats_savedInFLASH[i][j];
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	4939      	ldr	r1, [pc, #228]	; (8001828 <RestoreStatisticsFromFLASH+0x110>)
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	02d2      	lsls	r2, r2, #11
 8001748:	4411      	add	r1, r2
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	440a      	add	r2, r1
 800174e:	7812      	ldrb	r2, [r2, #0]
 8001750:	4313      	orrs	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
			for(uint32_t j=4;j>0;)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ee      	bne.n	8001738 <RestoreStatisticsFromFLASH+0x20>
			}
			if (curr_val == 0xffffffff)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d101      	bne.n	8001766 <RestoreStatisticsFromFLASH+0x4e>
			{
				curr_val = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
			}
			if (curr_val > Highest_val)
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	d909      	bls.n	8001782 <RestoreStatisticsFromFLASH+0x6a>
			{
				RecentPage_pointer = i;
 800176e:	4a2d      	ldr	r2, [pc, #180]	; (8001824 <RestoreStatisticsFromFLASH+0x10c>)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6013      	str	r3, [r2, #0]
				Highest_val = curr_val;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	607b      	str	r3, [r7, #4]
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177c:	482b      	ldr	r0, [pc, #172]	; (800182c <RestoreStatisticsFromFLASH+0x114>)
 800177e:	f004 fbb5 	bl	8005eec <HAL_GPIO_TogglePin>
			}
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001786:	4829      	ldr	r0, [pc, #164]	; (800182c <RestoreStatisticsFromFLASH+0x114>)
 8001788:	f004 fbb0 	bl	8005eec <HAL_GPIO_TogglePin>
	for (i = 0; i < (NO_FLASH_PAGES); i++)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b2f      	cmp	r3, #47	; 0x2f
 8001796:	d9cc      	bls.n	8001732 <RestoreStatisticsFromFLASH+0x1a>
		}

	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800179e:	4823      	ldr	r0, [pc, #140]	; (800182c <RestoreStatisticsFromFLASH+0x114>)
 80017a0:	f004 fb8c 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017aa:	4820      	ldr	r0, [pc, #128]	; (800182c <RestoreStatisticsFromFLASH+0x114>)
 80017ac:	f004 fb86 	bl	8005ebc <HAL_GPIO_WritePin>

	for(i = 0; i < sizeof(Stat_Flash); i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e00e      	b.n	80017d4 <RestoreStatisticsFromFLASH+0xbc>
	{
		((uint8_t *) &Stat_Flash)[i] = Stats_savedInFLASH[RecentPage_pointer][i];
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <RestoreStatisticsFromFLASH+0x10c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	491c      	ldr	r1, [pc, #112]	; (8001830 <RestoreStatisticsFromFLASH+0x118>)
 80017be:	440b      	add	r3, r1
 80017c0:	4919      	ldr	r1, [pc, #100]	; (8001828 <RestoreStatisticsFromFLASH+0x110>)
 80017c2:	02d2      	lsls	r2, r2, #11
 80017c4:	4411      	add	r1, r2
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	440a      	add	r2, r1
 80017ca:	7812      	ldrb	r2, [r2, #0]
 80017cc:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(Stat_Flash); i++)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3301      	adds	r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b6f      	cmp	r3, #111	; 0x6f
 80017d8:	d9ed      	bls.n	80017b6 <RestoreStatisticsFromFLASH+0x9e>
	}
	if (Stat_Flash.Time_NightTime == 0xffffffff)
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <RestoreStatisticsFromFLASH+0x118>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e2:	d113      	bne.n	800180c <RestoreStatisticsFromFLASH+0xf4>
	{
		for(i = 0; i < sizeof(Stat_Flash); i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e00c      	b.n	8001804 <RestoreStatisticsFromFLASH+0xec>
			    ((uint8_t *) &StatCurrentWh)[i] = 0;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4a11      	ldr	r2, [pc, #68]	; (8001834 <RestoreStatisticsFromFLASH+0x11c>)
 80017ee:	4413      	add	r3, r2
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
			    ((uint8_t *) &Stat_Flash)[i] = 0;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <RestoreStatisticsFromFLASH+0x118>)
 80017f8:	4413      	add	r3, r2
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < sizeof(Stat_Flash); i++) {
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b6f      	cmp	r3, #111	; 0x6f
 8001808:	d9ef      	bls.n	80017ea <RestoreStatisticsFromFLASH+0xd2>
			}
	}
	else StatCurrentWh = Stat_Flash;
}
 800180a:	e007      	b.n	800181c <RestoreStatisticsFromFLASH+0x104>
	else StatCurrentWh = Stat_Flash;
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <RestoreStatisticsFromFLASH+0x11c>)
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <RestoreStatisticsFromFLASH+0x118>)
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	2370      	movs	r3, #112	; 0x70
 8001816:	461a      	mov	r2, r3
 8001818:	f00b f9f3 	bl	800cc02 <memcpy>
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20006108 	.word	0x20006108
 8001828:	08020000 	.word	0x08020000
 800182c:	48000400 	.word	0x48000400
 8001830:	20006178 	.word	0x20006178
 8001834:	20005a0c 	.word	0x20005a0c

08001838 <StoreStatistics2FLASH>:

/*Function storing last  statistics to FLASH memory */
void StoreStatistics2FLASH(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
	uint32_t temp, sofar=0, StartPageAddress=0;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef flash_conf;

	osTimerStop(myTimer01Handle);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <StoreStatistics2FLASH+0xec>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f008 fae8 	bl	8009e20 <osTimerStop>
	Stat_Flash = StatCurrentWh;
 8001850:	4a35      	ldr	r2, [pc, #212]	; (8001928 <StoreStatistics2FLASH+0xf0>)
 8001852:	4b36      	ldr	r3, [pc, #216]	; (800192c <StoreStatistics2FLASH+0xf4>)
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	2370      	movs	r3, #112	; 0x70
 800185a:	461a      	mov	r2, r3
 800185c:	f00b f9d1 	bl	800cc02 <memcpy>
	if (RecentPage_pointer < NO_FLASH_PAGES-1) RecentPage_pointer++;
 8001860:	4b33      	ldr	r3, [pc, #204]	; (8001930 <StoreStatistics2FLASH+0xf8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b2e      	cmp	r3, #46	; 0x2e
 8001866:	d805      	bhi.n	8001874 <StoreStatistics2FLASH+0x3c>
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <StoreStatistics2FLASH+0xf8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a30      	ldr	r2, [pc, #192]	; (8001930 <StoreStatistics2FLASH+0xf8>)
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e002      	b.n	800187a <StoreStatistics2FLASH+0x42>
	else RecentPage_pointer = 0;
 8001874:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <StoreStatistics2FLASH+0xf8>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
	StatCurrentWh.FlashPageCounter++;
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <StoreStatistics2FLASH+0xf4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a2a      	ldr	r2, [pc, #168]	; (800192c <StoreStatistics2FLASH+0xf4>)
 8001882:	6013      	str	r3, [r2, #0]
//	return;
	flash_conf.TypeErase = FLASH_TYPEERASE_PAGES;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
	flash_conf.NbPages = 1;
 8001888:	2301      	movs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
	flash_conf.Page = RecentPage_pointer + 64;
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <StoreStatistics2FLASH+0xf8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3340      	adds	r3, #64	; 0x40
 8001892:	60fb      	str	r3, [r7, #12]
	//flash_conf.Page = (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0];
	flash_conf.Banks = FLASH_BANK_1;
 8001894:	2301      	movs	r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
#ifndef DEBUG_EN
	HAL_FLASH_Unlock();
 8001898:	f003 ff66 	bl	8005768 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <StoreStatistics2FLASH+0xfc>)
 800189e:	22b3      	movs	r2, #179	; 0xb3
 80018a0:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&flash_conf, &temp);// FLASH_Erase_Sector(&Stats_savedInFLASH+RecentPage_pointer, VOLTAGE_RANGE_3);
 80018a2:	f107 0214 	add.w	r2, r7, #20
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 f84e 	bl	800594c <HAL_FLASHEx_Erase>
	//HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0], ((uint8_t *) &Stat_Flash)[i]);
	HAL_FLASH_Lock();
 80018b0:	f003 ff7c 	bl	80057ac <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 80018b4:	f003 ff58 	bl	8005768 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <StoreStatistics2FLASH+0xfc>)
 80018ba:	22b3      	movs	r2, #179	; 0xb3
 80018bc:	611a      	str	r2, [r3, #16]

	 while (sofar<((sizeof(Stat_Flash)/(4*2))))	//should divided by number of bytes@word wrote at once
 80018be:	e023      	b.n	8001908 <StoreStatistics2FLASH+0xd0>
		   {
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][StartPageAddress], ((uint64_t *) &Stat_Flash)[sofar]) == HAL_OK)
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <StoreStatistics2FLASH+0xf8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	02da      	lsls	r2, r3, #11
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <StoreStatistics2FLASH+0x100>)
 80018cc:	4413      	add	r3, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <StoreStatistics2FLASH+0xf0>)
 80018d6:	4413      	add	r3, r2
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	2000      	movs	r0, #0
 80018de:	f003 fed7 	bl	8005690 <HAL_FLASH_Program>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d106      	bne.n	80018f6 <StoreStatistics2FLASH+0xbe>
		     {
		    	 StartPageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	3308      	adds	r3, #8
 80018ec:	61bb      	str	r3, [r7, #24]
		    	 sofar++;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	e008      	b.n	8001908 <StoreStatistics2FLASH+0xd0>
		     }
		     else
		     {
		       /* Error occurred while writing data in Flash memory*/
		    	 osTimerStart(myTimer01Handle, 100);
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <StoreStatistics2FLASH+0xec>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2164      	movs	r1, #100	; 0x64
 80018fc:	4618      	mov	r0, r3
 80018fe:	f008 fa61 	bl	8009dc4 <osTimerStart>
		    	 return HAL_FLASH_GetError ();
 8001902:	f003 ff63 	bl	80057cc <HAL_FLASH_GetError>
 8001906:	e00a      	b.n	800191e <StoreStatistics2FLASH+0xe6>
	 while (sofar<((sizeof(Stat_Flash)/(4*2))))	//should divided by number of bytes@word wrote at once
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b0d      	cmp	r3, #13
 800190c:	d9d8      	bls.n	80018c0 <StoreStatistics2FLASH+0x88>
		     }
		   }
#endif
	HAL_FLASH_Lock();
 800190e:	f003 ff4d 	bl	80057ac <HAL_FLASH_Lock>
	osTimerStart(myTimer01Handle, 100);
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <StoreStatistics2FLASH+0xec>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2164      	movs	r1, #100	; 0x64
 8001918:	4618      	mov	r0, r3
 800191a:	f008 fa53 	bl	8009dc4 <osTimerStart>
}
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20005d04 	.word	0x20005d04
 8001928:	20006178 	.word	0x20006178
 800192c:	20005a0c 	.word	0x20005a0c
 8001930:	20006108 	.word	0x20006108
 8001934:	40022000 	.word	0x40022000
 8001938:	08020000 	.word	0x08020000

0800193c <Calculate_WattSeconds>:
/*function launched every second to calculate Watt-seconds for given machine state on basis of flags */
void Calculate_WattSeconds(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
#ifndef TESTING_VALUES
	if (StatCountFlagsWs.Ws_BattIn)		//Watt-seconds when battery is charging
 8001940:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d011      	beq.n	800196c <Calculate_WattSeconds+0x30>
	{
		StatCountFlagsWs.Ws_BattIn = 0;
 8001948:	4b81      	ldr	r3, [pc, #516]	; (8001b50 <Calculate_WattSeconds+0x214>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
		StatCurrentWs.Ws_BattIn += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 800194e:	4b81      	ldr	r3, [pc, #516]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	4980      	ldr	r1, [pc, #512]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001958:	6849      	ldr	r1, [r1, #4]
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	497f      	ldr	r1, [pc, #508]	; (8001b5c <Calculate_WattSeconds+0x220>)
 8001960:	fba1 1303 	umull	r1, r3, r1, r3
 8001964:	0b5b      	lsrs	r3, r3, #13
 8001966:	4413      	add	r3, r2
 8001968:	4a7a      	ldr	r2, [pc, #488]	; (8001b54 <Calculate_WattSeconds+0x218>)
 800196a:	6013      	str	r3, [r2, #0]
	}
	if (StatCountFlagsWs.Ws_BattNoInv)		//Watt-seconds when battery is charging but energy should go into mains (but cant)
 800196c:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <Calculate_WattSeconds+0x214>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d011      	beq.n	8001998 <Calculate_WattSeconds+0x5c>
	{
		StatCountFlagsWs.Ws_BattNoInv = 0;
 8001974:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
		StatCurrentWs.Ws_BattNoInv += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 800197a:	4b76      	ldr	r3, [pc, #472]	; (8001b54 <Calculate_WattSeconds+0x218>)
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	4975      	ldr	r1, [pc, #468]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001984:	6849      	ldr	r1, [r1, #4]
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4974      	ldr	r1, [pc, #464]	; (8001b5c <Calculate_WattSeconds+0x220>)
 800198c:	fba1 1303 	umull	r1, r3, r1, r3
 8001990:	0b5b      	lsrs	r3, r3, #13
 8001992:	4413      	add	r3, r2
 8001994:	4a6f      	ldr	r2, [pc, #444]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001996:	6053      	str	r3, [r2, #4]
		//StatCurrentWs.Time_NoInv++;	//double count
	}
	if (StatCountFlagsWs.Ws_Inverter)		//Watt-seconds for inverter
 8001998:	4b6d      	ldr	r3, [pc, #436]	; (8001b50 <Calculate_WattSeconds+0x214>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d011      	beq.n	80019c4 <Calculate_WattSeconds+0x88>
	{
		StatCountFlagsWs.Ws_Inverter = 0;
 80019a0:	4b6b      	ldr	r3, [pc, #428]	; (8001b50 <Calculate_WattSeconds+0x214>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
		StatCurrentWs.Ws_Inverter += (Adc1Measurements.PV_voltage*Adc1Measurements.Inv_current)/10000;
 80019a6:	4b6b      	ldr	r3, [pc, #428]	; (8001b54 <Calculate_WattSeconds+0x218>)
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	496a      	ldr	r1, [pc, #424]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 80019b0:	6809      	ldr	r1, [r1, #0]
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4969      	ldr	r1, [pc, #420]	; (8001b5c <Calculate_WattSeconds+0x220>)
 80019b8:	fba1 1303 	umull	r1, r3, r1, r3
 80019bc:	0b5b      	lsrs	r3, r3, #13
 80019be:	4413      	add	r3, r2
 80019c0:	4a64      	ldr	r2, [pc, #400]	; (8001b54 <Calculate_WattSeconds+0x218>)
 80019c2:	6093      	str	r3, [r2, #8]
	}
	if (StatCountFlagsWs.Ws_BattOut)		//Watt-seconds when battery is discharging
 80019c4:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <Calculate_WattSeconds+0x214>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d011      	beq.n	80019f0 <Calculate_WattSeconds+0xb4>
	{
		StatCountFlagsWs.Ws_BattOut = 0;
 80019cc:	4b60      	ldr	r3, [pc, #384]	; (8001b50 <Calculate_WattSeconds+0x214>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
		StatCurrentWs.Ws_BattOut += (Adc1Measurements.Batt_voltage*Adc1Measurements.Inv_current)/10000;
 80019d2:	4b60      	ldr	r3, [pc, #384]	; (8001b54 <Calculate_WattSeconds+0x218>)
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	4b60      	ldr	r3, [pc, #384]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	495f      	ldr	r1, [pc, #380]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 80019dc:	6809      	ldr	r1, [r1, #0]
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	495e      	ldr	r1, [pc, #376]	; (8001b5c <Calculate_WattSeconds+0x220>)
 80019e4:	fba1 1303 	umull	r1, r3, r1, r3
 80019e8:	0b5b      	lsrs	r3, r3, #13
 80019ea:	4413      	add	r3, r2
 80019ec:	4a59      	ldr	r2, [pc, #356]	; (8001b54 <Calculate_WattSeconds+0x218>)
 80019ee:	60d3      	str	r3, [r2, #12]
	}
	if (StatCountFlagsWs.Ws_BattRecharge)		//Watt-seconds when battery is recharging
 80019f0:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <Calculate_WattSeconds+0x214>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d011      	beq.n	8001a1c <Calculate_WattSeconds+0xe0>
	{
		StatCountFlagsWs.Ws_BattRecharge = 0;
 80019f8:	4b55      	ldr	r3, [pc, #340]	; (8001b50 <Calculate_WattSeconds+0x214>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
		StatCurrentWs.Ws_BattRecharge += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 80019fe:	4b55      	ldr	r3, [pc, #340]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	4954      	ldr	r1, [pc, #336]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001a08:	6849      	ldr	r1, [r1, #4]
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4953      	ldr	r1, [pc, #332]	; (8001b5c <Calculate_WattSeconds+0x220>)
 8001a10:	fba1 1303 	umull	r1, r3, r1, r3
 8001a14:	0b5b      	lsrs	r3, r3, #13
 8001a16:	4413      	add	r3, r2
 8001a18:	4a4e      	ldr	r2, [pc, #312]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a1a:	6113      	str	r3, [r2, #16]
	}
	if (StatCountFlagsWs.Time_NightTime)		//darkness time
 8001a1c:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <Calculate_WattSeconds+0xf8>
	{
		StatCountFlagsWs.Time_NightTime = 0;
 8001a24:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
		StatCurrentWs.Time_NightTime++;
 8001a2a:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a48      	ldr	r2, [pc, #288]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a32:	61d3      	str	r3, [r2, #28]
	}
	if (StatCountFlagsWs.Time_NoBattery2Chg)		//time when battery is not ready to be charged
 8001a34:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <Calculate_WattSeconds+0x110>
	{
		StatCountFlagsWs.Time_NoBattery2Chg = 0;
 8001a3c:	4b44      	ldr	r3, [pc, #272]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
		StatCurrentWs.Time_NoBattery2Chg++;
 8001a42:	4b44      	ldr	r3, [pc, #272]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	3301      	adds	r3, #1
 8001a48:	4a42      	ldr	r2, [pc, #264]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a4a:	6213      	str	r3, [r2, #32]
	}
	if (StatCountFlagsWs.Time_NoInv)		//time when INV is not working
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <Calculate_WattSeconds+0x128>
	{
		StatCountFlagsWs.Time_NoInv = 0;
 8001a54:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
		StatCurrentWs.Time_NoInv++;
 8001a5a:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a3c      	ldr	r2, [pc, #240]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a62:	6193      	str	r3, [r2, #24]
	}
	if (StatCountFlagsWs.Time_DuskTime)		//time after dusk
 8001a64:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <Calculate_WattSeconds+0x140>
	{
		StatCountFlagsWs.Time_DuskTime = 0;
 8001a6c:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
		StatCurrentWs.Time_DuskTime++;
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	3301      	adds	r3, #1
 8001a78:	4a36      	ldr	r2, [pc, #216]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a7a:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (StatCountFlagsWs.ChgAs)		//count mAs
 8001a7c:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d009      	beq.n	8001a98 <Calculate_WattSeconds+0x15c>
	{
		StatCountFlagsWs.ChgAs = 0;
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	63da      	str	r2, [r3, #60]	; 0x3c
		StatCurrentWs.ChgAs += (Adc1Measurements.PV_current);
 8001a8a:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001a96:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
	if (StatCountFlagsWs.DschgAs)		//count mAs
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d009      	beq.n	8001ab4 <Calculate_WattSeconds+0x178>
	{
		StatCountFlagsWs.DschgAs = 0;
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <Calculate_WattSeconds+0x214>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
		StatCurrentWs.DschgAs += (Adc1Measurements.Inv_current);
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a28      	ldr	r2, [pc, #160]	; (8001b54 <Calculate_WattSeconds+0x218>)
 8001ab2:	6413      	str	r3, [r2, #64]	; 0x40
	{
		StatCountFlagsWs.DschgAs = 0;
		StatCurrentWs.DschgAs += (Adc1Measurements.PV_current)
	}
#endif
	if (Adc1Measurements.NTC2_Inverter_mos > StatCurrentWh.MaxTempInvMos) StatCurrentWh.MaxTempInvMos = Adc1Measurements.NTC2_Inverter_mos;
 8001ab4:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d903      	bls.n	8001ac8 <Calculate_WattSeconds+0x18c>
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001ac6:	6353      	str	r3, [r2, #52]	; 0x34
	if (Adc1Measurements.NTC3_Battery_mos > StatCurrentWh.MaxTempBatMos) StatCurrentWh.MaxTempBatMos = Adc1Measurements.NTC3_Battery_mos;
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d903      	bls.n	8001adc <Calculate_WattSeconds+0x1a0>
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001ada:	6393      	str	r3, [r2, #56]	; 0x38
	if (Adc1Measurements.Inv_current > StatCurrentWh.MaxInvCurrent) StatCurrentWh.MaxInvCurrent = Adc1Measurements.Inv_current;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d903      	bls.n	8001af0 <Calculate_WattSeconds+0x1b4>
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001aee:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (Adc1Measurements.PV_current > StatCurrentWh.MaxPVCurrent) StatCurrentWh.MaxPVCurrent = Adc1Measurements.PV_current;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d903      	bls.n	8001b04 <Calculate_WattSeconds+0x1c8>
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001b02:	6413      	str	r3, [r2, #64]	; 0x40
	if (Adc1Measurements.Batt_voltage > StatCurrentWh.MaxBatVoltage) StatCurrentWh.MaxBatVoltage = Adc1Measurements.Batt_voltage;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d903      	bls.n	8001b18 <Calculate_WattSeconds+0x1dc>
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001b16:	6453      	str	r3, [r2, #68]	; 0x44
	if (Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2bf0      	cmp	r3, #240	; 0xf0
 8001b1e:	d912      	bls.n	8001b46 <Calculate_WattSeconds+0x20a>
		{
		if (StatCurrentWh.MinBatVoltage < BATT_CRITICAL_MIN_VOLTAGE) StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b24:	2bef      	cmp	r3, #239	; 0xef
 8001b26:	d804      	bhi.n	8001b32 <Calculate_WattSeconds+0x1f6>
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001b2e:	6493      	str	r3, [r2, #72]	; 0x48
		else if (Adc1Measurements.Batt_voltage < StatCurrentWh.MinBatVoltage) StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
		}
}
 8001b30:	e009      	b.n	8001b46 <Calculate_WattSeconds+0x20a>
		else if (Adc1Measurements.Batt_voltage < StatCurrentWh.MinBatVoltage) StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d203      	bcs.n	8001b46 <Calculate_WattSeconds+0x20a>
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <Calculate_WattSeconds+0x21c>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <Calculate_WattSeconds+0x224>)
 8001b44:	6493      	str	r3, [r2, #72]	; 0x48
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	200059b8 	.word	0x200059b8
 8001b54:	20005bf8 	.word	0x20005bf8
 8001b58:	20005998 	.word	0x20005998
 8001b5c:	d1b71759 	.word	0xd1b71759
 8001b60:	20005a0c 	.word	0x20005a0c

08001b64 <Calculate_WattHours>:

/*function launched every hour to calculate Watt-hours watt-seconds hourly statistics */
void Calculate_WattHours(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	StatCurrentWh.Wh_BattIn=+StatCurrentWs.Ws_BattIn/SECONDS_HOUR;
 8001b68:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <Calculate_WattHours+0x108>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <Calculate_WattHours+0x10c>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0adb      	lsrs	r3, r3, #11
 8001b74:	4a3f      	ldr	r2, [pc, #252]	; (8001c74 <Calculate_WattHours+0x110>)
 8001b76:	6053      	str	r3, [r2, #4]
	StatCurrentWh.Wh_BattNoInv+=StatCurrentWs.Ws_BattNoInv/SECONDS_HOUR;
 8001b78:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <Calculate_WattHours+0x110>)
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <Calculate_WattHours+0x108>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	493b      	ldr	r1, [pc, #236]	; (8001c70 <Calculate_WattHours+0x10c>)
 8001b82:	fba1 1303 	umull	r1, r3, r1, r3
 8001b86:	0adb      	lsrs	r3, r3, #11
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a3a      	ldr	r2, [pc, #232]	; (8001c74 <Calculate_WattHours+0x110>)
 8001b8c:	6093      	str	r3, [r2, #8]
	StatCurrentWh.Time_NoInv+=StatCurrentWs.Time_NoInv;
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <Calculate_WattHours+0x110>)
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <Calculate_WattHours+0x108>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a36      	ldr	r2, [pc, #216]	; (8001c74 <Calculate_WattHours+0x110>)
 8001b9a:	6193      	str	r3, [r2, #24]
	StatCurrentWh.Wh_Inverter+=StatCurrentWs.Ws_Inverter/SECONDS_HOUR;
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <Calculate_WattHours+0x110>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <Calculate_WattHours+0x108>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4932      	ldr	r1, [pc, #200]	; (8001c70 <Calculate_WattHours+0x10c>)
 8001ba6:	fba1 1303 	umull	r1, r3, r1, r3
 8001baa:	0adb      	lsrs	r3, r3, #11
 8001bac:	4413      	add	r3, r2
 8001bae:	4a31      	ldr	r2, [pc, #196]	; (8001c74 <Calculate_WattHours+0x110>)
 8001bb0:	60d3      	str	r3, [r2, #12]
	StatCurrentWh.Wh_BattOut+=StatCurrentWs.Ws_BattOut/SECONDS_HOUR;
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <Calculate_WattHours+0x110>)
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <Calculate_WattHours+0x108>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	492d      	ldr	r1, [pc, #180]	; (8001c70 <Calculate_WattHours+0x10c>)
 8001bbc:	fba1 1303 	umull	r1, r3, r1, r3
 8001bc0:	0adb      	lsrs	r3, r3, #11
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <Calculate_WattHours+0x110>)
 8001bc6:	6113      	str	r3, [r2, #16]
	StatCurrentWh.Wh_BattRecharge+=StatCurrentWs.Ws_BattRecharge/SECONDS_HOUR;
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <Calculate_WattHours+0x110>)
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <Calculate_WattHours+0x108>)
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	4927      	ldr	r1, [pc, #156]	; (8001c70 <Calculate_WattHours+0x10c>)
 8001bd2:	fba1 1303 	umull	r1, r3, r1, r3
 8001bd6:	0adb      	lsrs	r3, r3, #11
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <Calculate_WattHours+0x110>)
 8001bdc:	6153      	str	r3, [r2, #20]
	StatCurrentWh.Chg_Ah_current+=StatCurrentWs.ChgAs/SECONDS_HOUR;
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <Calculate_WattHours+0x110>)
 8001be0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <Calculate_WattHours+0x108>)
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be6:	4922      	ldr	r1, [pc, #136]	; (8001c70 <Calculate_WattHours+0x10c>)
 8001be8:	fba1 1303 	umull	r1, r3, r1, r3
 8001bec:	0adb      	lsrs	r3, r3, #11
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a20      	ldr	r2, [pc, #128]	; (8001c74 <Calculate_WattHours+0x110>)
 8001bf2:	6653      	str	r3, [r2, #100]	; 0x64
	//StatCurrentWh.Chg_Ah_current=StatCurrentWh.Chg_Ah_current/1000;	//because current is stored in 0,001A
	StatCurrentWh.Dschg_Ah_current+=StatCurrentWs.DschgAs/SECONDS_HOUR;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <Calculate_WattHours+0x110>)
 8001bf6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <Calculate_WattHours+0x108>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	491c      	ldr	r1, [pc, #112]	; (8001c70 <Calculate_WattHours+0x10c>)
 8001bfe:	fba1 1303 	umull	r1, r3, r1, r3
 8001c02:	0adb      	lsrs	r3, r3, #11
 8001c04:	4413      	add	r3, r2
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <Calculate_WattHours+0x110>)
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
	//StatCurrentWh.Dschg_Ah_current=StatCurrentWh.Dschg_Ah_current/1000;	//because current is stored in 0,001A
	StatCurrentWh.Time_NightTime+=StatCurrentWs.Time_NightTime;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <Calculate_WattHours+0x110>)
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <Calculate_WattHours+0x110>)
 8001c16:	61d3      	str	r3, [r2, #28]
	StatCurrentWh.Time_NoBattery2Chg+=StatCurrentWs.Time_NoBattery2Chg;
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <Calculate_WattHours+0x110>)
 8001c1a:	6a1a      	ldr	r2, [r3, #32]
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <Calculate_WattHours+0x110>)
 8001c24:	6213      	str	r3, [r2, #32]
	StatCurrentWs.ChgAs=0;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c
	StatCurrentWs.DschgAs=0;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
	StatCurrentWs.Ws_BattIn=0;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
	StatCurrentWs.Ws_BattNoInv=0;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
	StatCurrentWs.Time_NoInv=0;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
	StatCurrentWs.Ws_Inverter=0;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
	StatCurrentWs.Ws_BattOut=0;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
	StatCurrentWs.Ws_BattRecharge=0;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
	StatCurrentWs.Time_NightTime=0;
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
	StatCurrentWs.Time_NoBattery2Chg=0;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <Calculate_WattHours+0x108>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20005bf8 	.word	0x20005bf8
 8001c70:	91a2b3c5 	.word	0x91a2b3c5
 8001c74:	20005a0c 	.word	0x20005a0c

08001c78 <ReadConfig>:
void ReadConfig(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
#if HW_VER > 01
	ConfigReg = HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)<<0;	//LSB, config for EECO TDR-16
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	481e      	ldr	r0, [pc, #120]	; (8001cf8 <ReadConfig+0x80>)
 8001c80:	f004 f904 	bl	8005e8c <HAL_GPIO_ReadPin>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <ReadConfig+0x84>)
 8001c8a:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)<<1;
 8001c8c:	2110      	movs	r1, #16
 8001c8e:	481c      	ldr	r0, [pc, #112]	; (8001d00 <ReadConfig+0x88>)
 8001c90:	f004 f8fc 	bl	8005e8c <HAL_GPIO_ReadPin>
 8001c94:	4603      	mov	r3, r0
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <ReadConfig+0x84>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <ReadConfig+0x84>)
 8001ca4:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)<<2;
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4813      	ldr	r0, [pc, #76]	; (8001cf8 <ReadConfig+0x80>)
 8001caa:	f004 f8ef 	bl	8005e8c <HAL_GPIO_ReadPin>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <ReadConfig+0x84>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <ReadConfig+0x84>)
 8001cbe:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)<<3;	//MSB
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	480f      	ldr	r0, [pc, #60]	; (8001d00 <ReadConfig+0x88>)
 8001cc4:	f004 f8e2 	bl	8005e8c <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <ReadConfig+0x84>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <ReadConfig+0x84>)
 8001cd8:	701a      	strb	r2, [r3, #0]
	ConfigReg = ~ConfigReg;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <ReadConfig+0x84>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <ReadConfig+0x84>)
 8001ce4:	701a      	strb	r2, [r3, #0]
	ConfigReg = ConfigReg &0x0f;
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <ReadConfig+0x84>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <ReadConfig+0x84>)
 8001cf2:	701a      	strb	r2, [r3, #0]
	ConfigReg = HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)<<0;	//LSB, config for EECO 330041GS
	ConfigReg += HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)<<1;
	ConfigReg += HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)<<2;
	ConfigReg += HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)<<3;	//MSB
#endif
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	20005994 	.word	0x20005994
 8001d00:	48000800 	.word	0x48000800

08001d04 <BackupPowerON>:
#if HW_VER > 01
void BackupPowerON(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
uint32_t TxSize;
	if (FlagBackupMOS) return;
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <BackupPowerON+0x50>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d11b      	bne.n	8001d4a <BackupPowerON+0x46>
	FlagBackupMOS = 1;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <BackupPowerON+0x50>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(BATT_BCKP_DRV_GPIO_Port, BATT_BCKP_DRV_Pin, 1);	//turn on battery backup power: mosfet ON
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2110      	movs	r1, #16
 8001d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d20:	f004 f8cc 	bl	8005ebc <HAL_GPIO_WritePin>
    sprintf(TxBuffer, "BackupPwrON\r\n");
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <BackupPowerON+0x54>)
 8001d26:	480d      	ldr	r0, [pc, #52]	; (8001d5c <BackupPowerON+0x58>)
 8001d28:	f00b fed6 	bl	800dad8 <siprintf>
    TxSize = strlen(TxBuffer);
 8001d2c:	480b      	ldr	r0, [pc, #44]	; (8001d5c <BackupPowerON+0x58>)
 8001d2e:	f7fe fa4f 	bl	80001d0 <strlen>
 8001d32:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <BackupPowerON+0x58>)
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <BackupPowerON+0x5c>)
 8001d3e:	f006 fbdd 	bl	80084fc <HAL_UART_Transmit_DMA>
    osDelay(10);	//just to empty usart buffer
 8001d42:	200a      	movs	r0, #10
 8001d44:	f007 ff91 	bl	8009c6a <osDelay>
 8001d48:	e000      	b.n	8001d4c <BackupPowerON+0x48>
	if (FlagBackupMOS) return;
 8001d4a:	bf00      	nop
}
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000248 	.word	0x20000248
 8001d58:	080122c8 	.word	0x080122c8
 8001d5c:	20005d08 	.word	0x20005d08
 8001d60:	20005b74 	.word	0x20005b74

08001d64 <BackupPowerOFF>:
void BackupPowerOFF(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
uint32_t TxSize;
	if (!FlagBackupMOS) return;
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <BackupPowerOFF+0x50>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01b      	beq.n	8001daa <BackupPowerOFF+0x46>
    FlagBackupMOS = 0;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <BackupPowerOFF+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(BATT_BCKP_DRV_GPIO_Port, BATT_BCKP_DRV_Pin, 0);	//turn off battery backup power: mosfet ON
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d80:	f004 f89c 	bl	8005ebc <HAL_GPIO_WritePin>
    sprintf(TxBuffer, "*** BackupPwrOFF ***\r\n");
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <BackupPowerOFF+0x54>)
 8001d86:	480d      	ldr	r0, [pc, #52]	; (8001dbc <BackupPowerOFF+0x58>)
 8001d88:	f00b fea6 	bl	800dad8 <siprintf>
	TxSize = strlen(TxBuffer);
 8001d8c:	480b      	ldr	r0, [pc, #44]	; (8001dbc <BackupPowerOFF+0x58>)
 8001d8e:	f7fe fa1f 	bl	80001d0 <strlen>
 8001d92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <BackupPowerOFF+0x58>)
 8001d9c:	4808      	ldr	r0, [pc, #32]	; (8001dc0 <BackupPowerOFF+0x5c>)
 8001d9e:	f006 fbad 	bl	80084fc <HAL_UART_Transmit_DMA>
	osDelay(100);
 8001da2:	2064      	movs	r0, #100	; 0x64
 8001da4:	f007 ff61 	bl	8009c6a <osDelay>
 8001da8:	e000      	b.n	8001dac <BackupPowerOFF+0x48>
	if (!FlagBackupMOS) return;
 8001daa:	bf00      	nop
}
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000248 	.word	0x20000248
 8001db8:	080122d8 	.word	0x080122d8
 8001dbc:	20005d08 	.word	0x20005d08
 8001dc0:	20005b74 	.word	0x20005b74

08001dc4 <ExtOut_InvResetStart>:
#endif
//generate signal to inform other controllers: "INV reset procedure is in progress"
void ExtOut_InvResetStart(void)
{
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	b099      	sub	sp, #100	; 0x64
 8001dc8:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM16(htim16, TIM_CHANNEL_1, 200);		//500 ->50% @ 4kHz, 50 @ 33khz, 100 @ 16khz, 200 @ 8khz
 8001dca:	4e18      	ldr	r6, [pc, #96]	; (8001e2c <ExtOut_InvResetStart+0x68>)
 8001dcc:	23c8      	movs	r3, #200	; 0xc8
 8001dce:	9310      	str	r3, [sp, #64]	; 0x40
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8001dd4:	466d      	mov	r5, sp
 8001dd6:	f106 0410 	add.w	r4, r6, #16
 8001dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001dea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001dee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001df2:	f7ff fb95 	bl	8001520 <setPWM_TIM16>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001df6:	2100      	movs	r1, #0
 8001df8:	480c      	ldr	r0, [pc, #48]	; (8001e2c <ExtOut_InvResetStart+0x68>)
 8001dfa:	f005 fb6b 	bl	80074d4 <HAL_TIM_PWM_Start>
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = EXT_I_Pin;
 8001e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e10:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//prevent excessive voltage on EXT_I byt pulldown
 8001e16:	2302      	movs	r3, #2
 8001e18:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4804      	ldr	r0, [pc, #16]	; (8001e30 <ExtOut_InvResetStart+0x6c>)
 8001e20:	f003 feba 	bl	8005b98 <HAL_GPIO_Init>
}
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2c:	200061e8 	.word	0x200061e8
 8001e30:	48000400 	.word	0x48000400

08001e34 <ExtOut_InvResetStop>:

void ExtOut_InvResetStop(void)
{
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	b099      	sub	sp, #100	; 0x64
 8001e38:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM16(htim16, TIM_CHANNEL_1, 0);		//0% @ 4kHz
 8001e3a:	4e18      	ldr	r6, [pc, #96]	; (8001e9c <ExtOut_InvResetStop+0x68>)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9310      	str	r3, [sp, #64]	; 0x40
 8001e40:	2300      	movs	r3, #0
 8001e42:	930f      	str	r3, [sp, #60]	; 0x3c
 8001e44:	466d      	mov	r5, sp
 8001e46:	f106 0410 	add.w	r4, r6, #16
 8001e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e56:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e5a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e5e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e62:	f7ff fb5d 	bl	8001520 <setPWM_TIM16>
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8001e66:	2100      	movs	r1, #0
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <ExtOut_InvResetStop+0x68>)
 8001e6a:	f005 fc11 	bl	8007690 <HAL_TIM_PWM_Stop>
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = EXT_I_Pin;
 8001e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e80:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
#if HW_VER > 01
	  GPIO_InitStruct.Pull = GPIO_NOPULL;			//disable pulldown
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
#else
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//prevent excessive voltage on EXT_I byt pulldown
#endif
	  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <ExtOut_InvResetStop+0x6c>)
 8001e90:	f003 fe82 	bl	8005b98 <HAL_GPIO_Init>
}
 8001e94:	bf00      	nop
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9c:	200061e8 	.word	0x200061e8
 8001ea0:	48000400 	.word	0x48000400

08001ea4 <BatteryMOS_ON>:

void BatteryMOS_ON(void)
{
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	b093      	sub	sp, #76	; 0x4c
 8001ea8:	af12      	add	r7, sp, #72	; 0x48

	if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP)
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <BatteryMOS_ON+0x74>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b50      	cmp	r3, #80	; 0x50
 8001eb0:	d902      	bls.n	8001eb8 <BatteryMOS_ON+0x14>
	{
		BatteryMOS_OFF();
 8001eb2:	f000 f837 	bl	8001f24 <BatteryMOS_OFF>
 8001eb6:	e02b      	b.n	8001f10 <BatteryMOS_ON+0x6c>
	}
	else
	{
		if (FlagBatteryMOS) return;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <BatteryMOS_ON+0x78>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d126      	bne.n	8001f0e <BatteryMOS_ON+0x6a>
		HAL_GPIO_WritePin(BAT_SWITCH_OFF_GPIO_Port, BAT_SWITCH_OFF_Pin, 0);	//disable powerMosfet pulldown
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2140      	movs	r1, #64	; 0x40
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec8:	f003 fff8 	bl	8005ebc <HAL_GPIO_WritePin>
		setPWM_TIM2(htim2, TIM_CHANNEL_1, 254, 500);		//500->50% @ 4kHz
 8001ecc:	4e14      	ldr	r6, [pc, #80]	; (8001f20 <BatteryMOS_ON+0x7c>)
 8001ece:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ed2:	9311      	str	r3, [sp, #68]	; 0x44
 8001ed4:	23fe      	movs	r3, #254	; 0xfe
 8001ed6:	9310      	str	r3, [sp, #64]	; 0x40
 8001ed8:	2300      	movs	r3, #0
 8001eda:	930f      	str	r3, [sp, #60]	; 0x3c
 8001edc:	466d      	mov	r5, sp
 8001ede:	f106 0410 	add.w	r4, r6, #16
 8001ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ef2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ef6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001efa:	f7ff faeb 	bl	80014d4 <setPWM_TIM2>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001efe:	2100      	movs	r1, #0
 8001f00:	4807      	ldr	r0, [pc, #28]	; (8001f20 <BatteryMOS_ON+0x7c>)
 8001f02:	f005 fae7 	bl	80074d4 <HAL_TIM_PWM_Start>
		FlagBatteryMOS = 1;
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <BatteryMOS_ON+0x78>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e000      	b.n	8001f10 <BatteryMOS_ON+0x6c>
		if (FlagBatteryMOS) return;
 8001f0e:	bf00      	nop
	}
}
 8001f10:	3704      	adds	r7, #4
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20005998 	.word	0x20005998
 8001f1c:	20000240 	.word	0x20000240
 8001f20:	2000612c 	.word	0x2000612c

08001f24 <BatteryMOS_OFF>:

void BatteryMOS_OFF(void)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b093      	sub	sp, #76	; 0x4c
 8001f28:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM2(htim2, TIM_CHANNEL_1, 254, 0);
 8001f2a:	4e14      	ldr	r6, [pc, #80]	; (8001f7c <BatteryMOS_OFF+0x58>)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9311      	str	r3, [sp, #68]	; 0x44
 8001f30:	23fe      	movs	r3, #254	; 0xfe
 8001f32:	9310      	str	r3, [sp, #64]	; 0x40
 8001f34:	2300      	movs	r3, #0
 8001f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8001f38:	466d      	mov	r5, sp
 8001f3a:	f106 0410 	add.w	r4, r6, #16
 8001f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f4e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001f52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f56:	f7ff fabd 	bl	80014d4 <setPWM_TIM2>
	HAL_GPIO_WritePin(BAT_SWITCH_OFF_GPIO_Port, BAT_SWITCH_OFF_Pin, 1);	//enable powerMosfet pulldown
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2140      	movs	r1, #64	; 0x40
 8001f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f62:	f003 ffab 	bl	8005ebc <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001f66:	2100      	movs	r1, #0
 8001f68:	4804      	ldr	r0, [pc, #16]	; (8001f7c <BatteryMOS_OFF+0x58>)
 8001f6a:	f005 fb91 	bl	8007690 <HAL_TIM_PWM_Stop>
	FlagBatteryMOS = 0;
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <BatteryMOS_OFF+0x5c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3704      	adds	r7, #4
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7c:	2000612c 	.word	0x2000612c
 8001f80:	20000240 	.word	0x20000240

08001f84 <InverterMOS_ON>:

void InverterMOS_ON(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <InverterMOS_ON+0x28>)
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	2b50      	cmp	r3, #80	; 0x50
 8001f8e:	d902      	bls.n	8001f96 <InverterMOS_ON+0x12>
	{
		InverterMOS_OFF();
 8001f90:	f000 f810 	bl	8001fb4 <InverterMOS_OFF>
	else
	{
		HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 0);	//disable powerMosfet pulldown
		FlagInverterMOS = 1;
	}
}
 8001f94:	e008      	b.n	8001fa8 <InverterMOS_ON+0x24>
		HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 0);	//disable powerMosfet pulldown
 8001f96:	2200      	movs	r2, #0
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9e:	f003 ff8d 	bl	8005ebc <HAL_GPIO_WritePin>
		FlagInverterMOS = 1;
 8001fa2:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <InverterMOS_ON+0x2c>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20005998 	.word	0x20005998
 8001fb0:	20000244 	.word	0x20000244

08001fb4 <InverterMOS_OFF>:

void InverterMOS_OFF(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 1);	//enable powerMosfet pulldown
 8001fb8:	2201      	movs	r2, #1
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc0:	f003 ff7c 	bl	8005ebc <HAL_GPIO_WritePin>
	FlagInverterMOS = 0;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <InverterMOS_OFF+0x1c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000244 	.word	0x20000244
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <ConvertNTCvalue>:

uint32_t ConvertNTCvalue(uint32_t RawReading)
{
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
double i, y;
uint32_t t;
	      i = (double) RawReading;	//
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7fe fa8f 	bl	8000504 <__aeabi_ui2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	e9c7 2306 	strd	r2, r3, [r7, #24]
	      //y = -3*pow(10,-15)*pow(i,5) + 3*pow(10,-11)*pow(i,4)-pow(10,-7)*pow(i,3)+0.0002*pow(i,2)-0.2204*i+138.71;
	      y = -7*pow(10,-9)*pow(i,3) + 5*pow(10,-5)*pow(i,2)-0.1154*i+123.68;
 8001fee:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8002090 <ConvertNTCvalue+0xb8>
 8001ff2:	ed97 0b06 	vldr	d0, [r7, #24]
 8001ff6:	f00f f9a3 	bl	8011340 <pow>
 8001ffa:	ec51 0b10 	vmov	r0, r1, d0
 8001ffe:	a328      	add	r3, pc, #160	; (adr r3, 80020a0 <ConvertNTCvalue+0xc8>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe faf8 	bl	80005f8 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4614      	mov	r4, r2
 800200e:	461d      	mov	r5, r3
 8002010:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002098 <ConvertNTCvalue+0xc0>
 8002014:	ed97 0b06 	vldr	d0, [r7, #24]
 8002018:	f00f f992 	bl	8011340 <pow>
 800201c:	ec51 0b10 	vmov	r0, r1, d0
 8002020:	a321      	add	r3, pc, #132	; (adr r3, 80020a8 <ConvertNTCvalue+0xd0>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe fae7 	bl	80005f8 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4620      	mov	r0, r4
 8002030:	4629      	mov	r1, r5
 8002032:	f7fe f92b 	bl	800028c <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4614      	mov	r4, r2
 800203c:	461d      	mov	r5, r3
 800203e:	a31c      	add	r3, pc, #112	; (adr r3, 80020b0 <ConvertNTCvalue+0xd8>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002048:	f7fe fad6 	bl	80005f8 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f7fe f918 	bl	8000288 <__aeabi_dsub>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	a315      	add	r3, pc, #84	; (adr r3, 80020b8 <ConvertNTCvalue+0xe0>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe f911 	bl	800028c <__adddf3>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	      t = (uint32_t) y;
 8002072:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002076:	f7fe fd97 	bl	8000ba8 <__aeabi_d2uiz>
 800207a:	4603      	mov	r3, r0
 800207c:	60fb      	str	r3, [r7, #12]
	      t = (t - 13);				// some offset removal
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3b0d      	subs	r3, #13
 8002082:	60fb      	str	r3, [r7, #12]
	      return t;	//result in *C
 8002084:	68fb      	ldr	r3, [r7, #12]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3720      	adds	r7, #32
 800208a:	46bd      	mov	sp, r7
 800208c:	bdb0      	pop	{r4, r5, r7, pc}
 800208e:	bf00      	nop
 8002090:	00000000 	.word	0x00000000
 8002094:	40080000 	.word	0x40080000
 8002098:	00000000 	.word	0x00000000
 800209c:	40000000 	.word	0x40000000
 80020a0:	d643f785 	.word	0xd643f785
 80020a4:	be3e1094 	.word	0xbe3e1094
 80020a8:	eb1c432d 	.word	0xeb1c432d
 80020ac:	3f0a36e2 	.word	0x3f0a36e2
 80020b0:	b9f559b4 	.word	0xb9f559b4
 80020b4:	3fbd8ada 	.word	0x3fbd8ada
 80020b8:	1eb851ec 	.word	0x1eb851ec
 80020bc:	405eeb85 	.word	0x405eeb85

080020c0 <ConvertVValue>:

uint32_t ConvertVValue(uint32_t RawReading)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    double i;
    i = (((float)RawReading))*100/4095;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002170 <ConvertVValue+0xb0>
 80020d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020da:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002174 <ConvertVValue+0xb4>
 80020de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020e2:	ee16 0a90 	vmov	r0, s13
 80020e6:	f7fe fa2f 	bl	8000548 <__aeabi_f2d>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i*(float)3.29;					//ref voltage value
 80020f2:	a319      	add	r3, pc, #100	; (adr r3, 8002158 <ConvertVValue+0x98>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020fc:	f7fe fa7c 	bl	80005f8 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i*(float)(470+16)/(float)16; //resistor divider R1+R2/R1
 8002108:	a315      	add	r3, pc, #84	; (adr r3, 8002160 <ConvertVValue+0xa0>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002112:	f7fe fa71 	bl	80005f8 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <ConvertVValue+0xb8>)
 8002124:	f7fe fb92 	bl	800084c <__aeabi_ddiv>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i *= (10.5/10.0)/10;					//coefficient due to tolerances
 8002130:	a30d      	add	r3, pc, #52	; (adr r3, 8002168 <ConvertVValue+0xa8>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800213a:	f7fe fa5d 	bl	80005f8 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (uint32_t) i;			//result in 100mV
 8002146:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800214a:	f7fe fd2d 	bl	8000ba8 <__aeabi_d2uiz>
 800214e:	4603      	mov	r3, r0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	80000000 	.word	0x80000000
 800215c:	400a51eb 	.word	0x400a51eb
 8002160:	00000000 	.word	0x00000000
 8002164:	407e6000 	.word	0x407e6000
 8002168:	ae147ae2 	.word	0xae147ae2
 800216c:	3fbae147 	.word	0x3fbae147
 8002170:	42c80000 	.word	0x42c80000
 8002174:	457ff000 	.word	0x457ff000
 8002178:	40300000 	.word	0x40300000
 800217c:	00000000 	.word	0x00000000

08002180 <ConvertIValue>:

uint32_t ConvertIValue(uint32_t RawReading)
{	//xls equation from 120 gain and 2mR shunt: y = 0,2954x - 36,931 -> x=10000/2954*y + 36.931
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    //simple way
//    i = (((float)RawReading));
//    i *= (43/87.0)*10;			//43 is 430mA current, 87 is ADC value
#if HW_VER > 01
    //from test, 2,6A over ADC reading
    i = ((2650/654)*(float)RawReading);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002192:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219a:	ee17 0a90 	vmov	r0, s15
 800219e:	f7fe f9d3 	bl	8000548 <__aeabi_f2d>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i + 50.1;
 80021aa:	a313      	add	r3, pc, #76	; (adr r3, 80021f8 <ConvertIValue+0x78>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021b4:	f7fe f86a 	bl	800028c <__adddf3>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
#else
    //from XLS trendline
    i = ((10000/2510)*(float)RawReading);
    i = i + 38.1;
#endif
    if (i<0) i=0;
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021cc:	f7fe fc86 	bl	8000adc <__aeabi_dcmplt>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <ConvertIValue+0x62>
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (uint32_t) i;	//result in 100mA
 80021e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021e6:	f7fe fcdf 	bl	8000ba8 <__aeabi_d2uiz>
 80021ea:	4603      	mov	r3, r0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	f3af 8000 	nop.w
 80021f8:	cccccccd 	.word	0xcccccccd
 80021fc:	40490ccc 	.word	0x40490ccc

08002200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002206:	f001 fda2 	bl	8003d4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800220a:	f000 f843 	bl	8002294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800220e:	f000 fa8b 	bl	8002728 <MX_GPIO_Init>
  MX_DMA_Init();
 8002212:	f000 fa4f 	bl	80026b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002216:	f000 f881 	bl	800231c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800221a:	f000 fa1b 	bl	8002654 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800221e:	f000 f947 	bl	80024b0 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002222:	f000 f99f 	bl	8002564 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
#if HW_VER > 01
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = EXT_I_Pin;
 8002234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002238:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	4619      	mov	r1, r3
 8002246:	480c      	ldr	r0, [pc, #48]	; (8002278 <main+0x78>)
 8002248:	f003 fca6 	bl	8005b98 <HAL_GPIO_Init>
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800224c:	f007 fc30 	bl	8009ab0 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <main+0x7c>)
 8002252:	2200      	movs	r2, #0
 8002254:	2101      	movs	r1, #1
 8002256:	480a      	ldr	r0, [pc, #40]	; (8002280 <main+0x80>)
 8002258:	f007 fd38 	bl	8009ccc <osTimerNew>
 800225c:	4603      	mov	r3, r0
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <main+0x84>)
 8002260:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <main+0x88>)
 8002264:	2100      	movs	r1, #0
 8002266:	4809      	ldr	r0, [pc, #36]	; (800228c <main+0x8c>)
 8002268:	f007 fc6c 	bl	8009b44 <osThreadNew>
 800226c:	4603      	mov	r3, r0
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <main+0x90>)
 8002270:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002272:	f007 fc41 	bl	8009af8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002276:	e7fe      	b.n	8002276 <main+0x76>
 8002278:	48000400 	.word	0x48000400
 800227c:	08012998 	.word	0x08012998
 8002280:	080033fd 	.word	0x080033fd
 8002284:	20005d04 	.word	0x20005d04
 8002288:	08012974 	.word	0x08012974
 800228c:	08002ee9 	.word	0x08002ee9
 8002290:	20005990 	.word	0x20005990

08002294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b096      	sub	sp, #88	; 0x58
 8002298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	2244      	movs	r2, #68	; 0x44
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f00a fcbb 	bl	800cc1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a8:	463b      	mov	r3, r7
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022ba:	f003 fe3f 	bl	8005f3c <HAL_PWREx_ControlVoltageScaling>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022c4:	f001 f978 	bl	80035b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022c8:	2301      	movs	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fe84 	bl	8005fe8 <HAL_RCC_OscConfig>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <SystemClock_Config+0x56>
  {
    Error_Handler();
 80022e6:	f001 f967 	bl	80035b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ea:	230f      	movs	r3, #15
 80022ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80022ee:	2302      	movs	r3, #2
 80022f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022fe:	463b      	mov	r3, r7
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f004 fa82 	bl	800680c <HAL_RCC_ClockConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800230e:	f001 f953 	bl	80035b8 <Error_Handler>
  }
}
 8002312:	bf00      	nop
 8002314:	3758      	adds	r7, #88	; 0x58
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002322:	463b      	mov	r3, r7
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002332:	4b56      	ldr	r3, [pc, #344]	; (800248c <MX_ADC1_Init+0x170>)
 8002334:	4a56      	ldr	r2, [pc, #344]	; (8002490 <MX_ADC1_Init+0x174>)
 8002336:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002338:	4b54      	ldr	r3, [pc, #336]	; (800248c <MX_ADC1_Init+0x170>)
 800233a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800233e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002340:	4b52      	ldr	r3, [pc, #328]	; (800248c <MX_ADC1_Init+0x170>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002346:	4b51      	ldr	r3, [pc, #324]	; (800248c <MX_ADC1_Init+0x170>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800234c:	4b4f      	ldr	r3, [pc, #316]	; (800248c <MX_ADC1_Init+0x170>)
 800234e:	2201      	movs	r2, #1
 8002350:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002352:	4b4e      	ldr	r3, [pc, #312]	; (800248c <MX_ADC1_Init+0x170>)
 8002354:	2204      	movs	r2, #4
 8002356:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002358:	4b4c      	ldr	r3, [pc, #304]	; (800248c <MX_ADC1_Init+0x170>)
 800235a:	2200      	movs	r2, #0
 800235c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800235e:	4b4b      	ldr	r3, [pc, #300]	; (800248c <MX_ADC1_Init+0x170>)
 8002360:	2200      	movs	r2, #0
 8002362:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 7;
 8002364:	4b49      	ldr	r3, [pc, #292]	; (800248c <MX_ADC1_Init+0x170>)
 8002366:	2207      	movs	r2, #7
 8002368:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800236a:	4b48      	ldr	r3, [pc, #288]	; (800248c <MX_ADC1_Init+0x170>)
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002372:	4b46      	ldr	r3, [pc, #280]	; (800248c <MX_ADC1_Init+0x170>)
 8002374:	2200      	movs	r2, #0
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002378:	4b44      	ldr	r3, [pc, #272]	; (800248c <MX_ADC1_Init+0x170>)
 800237a:	2200      	movs	r2, #0
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800237e:	4b43      	ldr	r3, [pc, #268]	; (800248c <MX_ADC1_Init+0x170>)
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <MX_ADC1_Init+0x170>)
 8002388:	2200      	movs	r2, #0
 800238a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800238c:	4b3f      	ldr	r3, [pc, #252]	; (800248c <MX_ADC1_Init+0x170>)
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002394:	483d      	ldr	r0, [pc, #244]	; (800248c <MX_ADC1_Init+0x170>)
 8002396:	f001 fedb 	bl	8004150 <HAL_ADC_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80023a0:	f001 f90a 	bl	80035b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023a4:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <MX_ADC1_Init+0x178>)
 80023a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023a8:	2306      	movs	r3, #6
 80023aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80023ac:	2301      	movs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023b0:	237f      	movs	r3, #127	; 0x7f
 80023b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023b4:	2304      	movs	r3, #4
 80023b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023bc:	463b      	mov	r3, r7
 80023be:	4619      	mov	r1, r3
 80023c0:	4832      	ldr	r0, [pc, #200]	; (800248c <MX_ADC1_Init+0x170>)
 80023c2:	f002 f913 	bl	80045ec <HAL_ADC_ConfigChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80023cc:	f001 f8f4 	bl	80035b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <MX_ADC1_Init+0x17c>)
 80023d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80023d4:	230c      	movs	r3, #12
 80023d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d8:	463b      	mov	r3, r7
 80023da:	4619      	mov	r1, r3
 80023dc:	482b      	ldr	r0, [pc, #172]	; (800248c <MX_ADC1_Init+0x170>)
 80023de:	f002 f905 	bl	80045ec <HAL_ADC_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80023e8:	f001 f8e6 	bl	80035b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <MX_ADC1_Init+0x180>)
 80023ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80023f0:	2312      	movs	r3, #18
 80023f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023f8:	463b      	mov	r3, r7
 80023fa:	4619      	mov	r1, r3
 80023fc:	4823      	ldr	r0, [pc, #140]	; (800248c <MX_ADC1_Init+0x170>)
 80023fe:	f002 f8f5 	bl	80045ec <HAL_ADC_ConfigChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8002408:	f001 f8d6 	bl	80035b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <MX_ADC1_Init+0x184>)
 800240e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002410:	2318      	movs	r3, #24
 8002412:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002414:	463b      	mov	r3, r7
 8002416:	4619      	mov	r1, r3
 8002418:	481c      	ldr	r0, [pc, #112]	; (800248c <MX_ADC1_Init+0x170>)
 800241a:	f002 f8e7 	bl	80045ec <HAL_ADC_ConfigChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8002424:	f001 f8c8 	bl	80035b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <MX_ADC1_Init+0x188>)
 800242a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800242c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002430:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002432:	463b      	mov	r3, r7
 8002434:	4619      	mov	r1, r3
 8002436:	4815      	ldr	r0, [pc, #84]	; (800248c <MX_ADC1_Init+0x170>)
 8002438:	f002 f8d8 	bl	80045ec <HAL_ADC_ConfigChannel>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8002442:	f001 f8b9 	bl	80035b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <MX_ADC1_Init+0x18c>)
 8002448:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800244a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800244e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002450:	463b      	mov	r3, r7
 8002452:	4619      	mov	r1, r3
 8002454:	480d      	ldr	r0, [pc, #52]	; (800248c <MX_ADC1_Init+0x170>)
 8002456:	f002 f8c9 	bl	80045ec <HAL_ADC_ConfigChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8002460:	f001 f8aa 	bl	80035b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_ADC1_Init+0x190>)
 8002466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002468:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800246c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800246e:	463b      	mov	r3, r7
 8002470:	4619      	mov	r1, r3
 8002472:	4806      	ldr	r0, [pc, #24]	; (800248c <MX_ADC1_Init+0x170>)
 8002474:	f002 f8ba 	bl	80045ec <HAL_ADC_ConfigChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 800247e:	f001 f89b 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20005ac8 	.word	0x20005ac8
 8002490:	50040000 	.word	0x50040000
 8002494:	04300002 	.word	0x04300002
 8002498:	08600004 	.word	0x08600004
 800249c:	0c900008 	.word	0x0c900008
 80024a0:	10c00010 	.word	0x10c00010
 80024a4:	14f00020 	.word	0x14f00020
 80024a8:	19200040 	.word	0x19200040
 80024ac:	1d500080 	.word	0x1d500080

080024b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c2:	463b      	mov	r3, r7
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
 80024d0:	615a      	str	r2, [r3, #20]
 80024d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <MX_TIM2_Init+0xb0>)
 80024d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80024dc:	4b20      	ldr	r3, [pc, #128]	; (8002560 <MX_TIM2_Init+0xb0>)
 80024de:	2201      	movs	r2, #1
 80024e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <MX_TIM2_Init+0xb0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <MX_TIM2_Init+0xb0>)
 80024ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <MX_TIM2_Init+0xb0>)
 80024f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <MX_TIM2_Init+0xb0>)
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024fe:	4818      	ldr	r0, [pc, #96]	; (8002560 <MX_TIM2_Init+0xb0>)
 8002500:	f004 ff90 	bl	8007424 <HAL_TIM_PWM_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800250a:	f001 f855 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	4619      	mov	r1, r3
 800251c:	4810      	ldr	r0, [pc, #64]	; (8002560 <MX_TIM2_Init+0xb0>)
 800251e:	f005 fea3 	bl	8008268 <HAL_TIMEx_MasterConfigSynchronization>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002528:	f001 f846 	bl	80035b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800252c:	2360      	movs	r3, #96	; 0x60
 800252e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	2200      	movs	r2, #0
 8002540:	4619      	mov	r1, r3
 8002542:	4807      	ldr	r0, [pc, #28]	; (8002560 <MX_TIM2_Init+0xb0>)
 8002544:	f005 fa4c 	bl	80079e0 <HAL_TIM_PWM_ConfigChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800254e:	f001 f833 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <MX_TIM2_Init+0xb0>)
 8002554:	f001 f93a 	bl	80037cc <HAL_TIM_MspPostInit>

}
 8002558:	bf00      	nop
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000612c 	.word	0x2000612c

08002564 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b092      	sub	sp, #72	; 0x48
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800256a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]
 800257a:	615a      	str	r2, [r3, #20]
 800257c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800257e:	463b      	mov	r3, r7
 8002580:	222c      	movs	r2, #44	; 0x2c
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f00a fb4a 	bl	800cc1e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800258a:	4b30      	ldr	r3, [pc, #192]	; (800264c <MX_TIM16_Init+0xe8>)
 800258c:	4a30      	ldr	r2, [pc, #192]	; (8002650 <MX_TIM16_Init+0xec>)
 800258e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 8002590:	4b2e      	ldr	r3, [pc, #184]	; (800264c <MX_TIM16_Init+0xe8>)
 8002592:	2201      	movs	r2, #1
 8002594:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b2d      	ldr	r3, [pc, #180]	; (800264c <MX_TIM16_Init+0xe8>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 500;
 800259c:	4b2b      	ldr	r3, [pc, #172]	; (800264c <MX_TIM16_Init+0xe8>)
 800259e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025a2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <MX_TIM16_Init+0xe8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <MX_TIM16_Init+0xe8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <MX_TIM16_Init+0xe8>)
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025b6:	4825      	ldr	r0, [pc, #148]	; (800264c <MX_TIM16_Init+0xe8>)
 80025b8:	f004 fe88 	bl	80072cc <HAL_TIM_Base_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80025c2:	f000 fff9 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80025c6:	4821      	ldr	r0, [pc, #132]	; (800264c <MX_TIM16_Init+0xe8>)
 80025c8:	f004 ff2c 	bl	8007424 <HAL_TIM_PWM_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80025d2:	f000 fff1 	bl	80035b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d6:	2360      	movs	r3, #96	; 0x60
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 254;
 80025da:	23fe      	movs	r3, #254	; 0xfe
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025e2:	2300      	movs	r3, #0
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f6:	2200      	movs	r2, #0
 80025f8:	4619      	mov	r1, r3
 80025fa:	4814      	ldr	r0, [pc, #80]	; (800264c <MX_TIM16_Init+0xe8>)
 80025fc:	f005 f9f0 	bl	80079e0 <HAL_TIM_PWM_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002606:	f000 ffd7 	bl	80035b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800261e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002622:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	4619      	mov	r1, r3
 800262c:	4807      	ldr	r0, [pc, #28]	; (800264c <MX_TIM16_Init+0xe8>)
 800262e:	f005 fe81 	bl	8008334 <HAL_TIMEx_ConfigBreakDeadTime>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8002638:	f000 ffbe 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <MX_TIM16_Init+0xe8>)
 800263e:	f001 f8c5 	bl	80037cc <HAL_TIM_MspPostInit>

}
 8002642:	bf00      	nop
 8002644:	3748      	adds	r7, #72	; 0x48
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200061e8 	.word	0x200061e8
 8002650:	40014400 	.word	0x40014400

08002654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <MX_USART1_UART_Init+0x58>)
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <MX_USART1_UART_Init+0x5c>)
 800265c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <MX_USART1_UART_Init+0x58>)
 8002660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <MX_USART1_UART_Init+0x58>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <MX_USART1_UART_Init+0x58>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <MX_USART1_UART_Init+0x58>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <MX_USART1_UART_Init+0x58>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <MX_USART1_UART_Init+0x58>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <MX_USART1_UART_Init+0x58>)
 8002686:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800268a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <MX_USART1_UART_Init+0x58>)
 800268e:	2200      	movs	r2, #0
 8002690:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <MX_USART1_UART_Init+0x58>)
 8002694:	2200      	movs	r2, #0
 8002696:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002698:	4804      	ldr	r0, [pc, #16]	; (80026ac <MX_USART1_UART_Init+0x58>)
 800269a:	f005 fee1 	bl	8008460 <HAL_UART_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80026a4:	f000 ff88 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20005b74 	.word	0x20005b74
 80026b0:	40013800 	.word	0x40013800

080026b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <MX_DMA_Init+0x70>)
 80026bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026be:	4a19      	ldr	r2, [pc, #100]	; (8002724 <MX_DMA_Init+0x70>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6493      	str	r3, [r2, #72]	; 0x48
 80026c6:	4b17      	ldr	r3, [pc, #92]	; (8002724 <MX_DMA_Init+0x70>)
 80026c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <MX_DMA_Init+0x70>)
 80026d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <MX_DMA_Init+0x70>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	6493      	str	r3, [r2, #72]	; 0x48
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_DMA_Init+0x70>)
 80026e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2105      	movs	r1, #5
 80026ee:	200b      	movs	r0, #11
 80026f0:	f002 fd2e 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026f4:	200b      	movs	r0, #11
 80026f6:	f002 fd47 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2105      	movs	r1, #5
 80026fe:	2044      	movs	r0, #68	; 0x44
 8002700:	f002 fd26 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8002704:	2044      	movs	r0, #68	; 0x44
 8002706:	f002 fd3f 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2105      	movs	r1, #5
 800270e:	2045      	movs	r0, #69	; 0x45
 8002710:	f002 fd1e 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8002714:	2045      	movs	r0, #69	; 0x45
 8002716:	f002 fd37 	bl	8005188 <HAL_NVIC_EnableIRQ>

}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000

08002728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800273e:	4b42      	ldr	r3, [pc, #264]	; (8002848 <MX_GPIO_Init+0x120>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	4a41      	ldr	r2, [pc, #260]	; (8002848 <MX_GPIO_Init+0x120>)
 8002744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274a:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <MX_GPIO_Init+0x120>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002756:	4b3c      	ldr	r3, [pc, #240]	; (8002848 <MX_GPIO_Init+0x120>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <MX_GPIO_Init+0x120>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002762:	4b39      	ldr	r3, [pc, #228]	; (8002848 <MX_GPIO_Init+0x120>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	4b36      	ldr	r3, [pc, #216]	; (8002848 <MX_GPIO_Init+0x120>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	4a35      	ldr	r2, [pc, #212]	; (8002848 <MX_GPIO_Init+0x120>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277a:	4b33      	ldr	r3, [pc, #204]	; (8002848 <MX_GPIO_Init+0x120>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <MX_GPIO_Init+0x120>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	4a2f      	ldr	r2, [pc, #188]	; (8002848 <MX_GPIO_Init+0x120>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002792:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <MX_GPIO_Init+0x120>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BATT_BCKP_DRV_Pin|BAT_SWITCH_OFF_Pin|INV_SWITCH_DRV_Pin|MEAS_PWR_Pin, GPIO_PIN_RESET);
 800279e:	2200      	movs	r2, #0
 80027a0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80027a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a8:	f003 fb88 	bl	8005ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80027b2:	4826      	ldr	r0, [pc, #152]	; (800284c <MX_GPIO_Init+0x124>)
 80027b4:	f003 fb82 	bl	8005ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BATT_BCKP_DRV_Pin BAT_SWITCH_OFF_Pin INV_SWITCH_DRV_Pin MEAS_PWR_Pin */
  GPIO_InitStruct.Pin = BATT_BCKP_DRV_Pin|BAT_SWITCH_OFF_Pin|INV_SWITCH_DRV_Pin|MEAS_PWR_Pin;
 80027b8:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80027bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027be:	2301      	movs	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d4:	f003 f9e0 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C1_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C1_Pin;
 80027d8:	2330      	movs	r3, #48	; 0x30
 80027da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	4819      	ldr	r0, [pc, #100]	; (8002850 <MX_GPIO_Init+0x128>)
 80027ec:	f003 f9d4 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C2_Pin CD_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C2_Pin|CD_Pin;
 80027f0:	2307      	movs	r3, #7
 80027f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	4619      	mov	r1, r3
 8002802:	4812      	ldr	r0, [pc, #72]	; (800284c <MX_GPIO_Init+0x124>)
 8002804:	f003 f9c8 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8002808:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800280c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280e:	2301      	movs	r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	480a      	ldr	r0, [pc, #40]	; (800284c <MX_GPIO_Init+0x124>)
 8002822:	f003 f9b9 	bl	8005b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_I_Pin */
  GPIO_InitStruct.Pin = EXT_I_Pin;
 8002826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800282a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002830:	2302      	movs	r3, #2
 8002832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4804      	ldr	r0, [pc, #16]	; (800284c <MX_GPIO_Init+0x124>)
 800283c:	f003 f9ac 	bl	8005b98 <HAL_GPIO_Init>

}
 8002840:	bf00      	nop
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000
 800284c:	48000400 	.word	0x48000400
 8002850:	48000800 	.word	0x48000800

08002854 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	// idle detection needs at least one UART clock to detect the bus is idle. So
	// in the case, that the transmission length is one full buffer length
	// and the start buffer pointer is at 0, it will be also 0 at the end of the
	// transmission. In this case the DMA rollover will increment the RxRollover
	// variable first and len will not be zero.
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {									// Check if it is an "Idle Interrupt"
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b10      	cmp	r3, #16
 8002868:	f040 80a2 	bne.w	80029b0 <HAL_UART_RxCpltCallback+0x15c>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);												// clear the interrupt
 800286c:	4b55      	ldr	r3, [pc, #340]	; (80029c4 <HAL_UART_RxCpltCallback+0x170>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2210      	movs	r2, #16
 8002872:	621a      	str	r2, [r3, #32]
		RxCounter++;																	// increment the Rx Counter
 8002874:	4b54      	ldr	r3, [pc, #336]	; (80029c8 <HAL_UART_RxCpltCallback+0x174>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b52      	ldr	r3, [pc, #328]	; (80029c8 <HAL_UART_RxCpltCallback+0x174>)
 800287e:	701a      	strb	r2, [r3, #0]

		uint8_t TxSize = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
		uint16_t start = RxBfrPos;														// Rx bytes start position (=last buffer position)
 8002884:	4b51      	ldr	r3, [pc, #324]	; (80029cc <HAL_UART_RxCpltCallback+0x178>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	81bb      	strh	r3, [r7, #12]
		RxBfrPos = RX_BFR_SIZE - (uint16_t)huart->hdmarx->Instance->CNDTR;				// determine actual buffer position
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <HAL_UART_RxCpltCallback+0x178>)
 800289c:	801a      	strh	r2, [r3, #0]
		uint16_t len = RX_BFR_SIZE;														// init len with max. size
 800289e:	237f      	movs	r3, #127	; 0x7f
 80028a0:	82fb      	strh	r3, [r7, #22]

		if(RxRollover < 2)  {
 80028a2:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_UART_RxCpltCallback+0x17c>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d819      	bhi.n	80028de <HAL_UART_RxCpltCallback+0x8a>
			if(RxRollover) {															// rolled over once
 80028aa:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <HAL_UART_RxCpltCallback+0x17c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00f      	beq.n	80028d2 <HAL_UART_RxCpltCallback+0x7e>
				if(RxBfrPos <= start) len = RxBfrPos + RX_BFR_SIZE - start;				// no bytes overwritten
 80028b2:	4b46      	ldr	r3, [pc, #280]	; (80029cc <HAL_UART_RxCpltCallback+0x178>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	89ba      	ldrh	r2, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d307      	bcc.n	80028cc <HAL_UART_RxCpltCallback+0x78>
 80028bc:	4b43      	ldr	r3, [pc, #268]	; (80029cc <HAL_UART_RxCpltCallback+0x178>)
 80028be:	881a      	ldrh	r2, [r3, #0]
 80028c0:	89bb      	ldrh	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	337f      	adds	r3, #127	; 0x7f
 80028c8:	82fb      	strh	r3, [r7, #22]
 80028ca:	e00a      	b.n	80028e2 <HAL_UART_RxCpltCallback+0x8e>
				else len = RX_BFR_SIZE + 1;												// bytes overwritten error
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	82fb      	strh	r3, [r7, #22]
 80028d0:	e007      	b.n	80028e2 <HAL_UART_RxCpltCallback+0x8e>
			} else {
				len = RxBfrPos - start;													// no bytes overwritten
 80028d2:	4b3e      	ldr	r3, [pc, #248]	; (80029cc <HAL_UART_RxCpltCallback+0x178>)
 80028d4:	881a      	ldrh	r2, [r3, #0]
 80028d6:	89bb      	ldrh	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	82fb      	strh	r3, [r7, #22]
 80028dc:	e001      	b.n	80028e2 <HAL_UART_RxCpltCallback+0x8e>
			}
		} else {
			len = RX_BFR_SIZE + 2;														// dual rollover error
 80028de:	2381      	movs	r3, #129	; 0x81
 80028e0:	82fb      	strh	r3, [r7, #22]
		}

		if(len && (len <= RX_BFR_SIZE)) {
 80028e2:	8afb      	ldrh	r3, [r7, #22]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05f      	beq.n	80029a8 <HAL_UART_RxCpltCallback+0x154>
 80028e8:	8afb      	ldrh	r3, [r7, #22]
 80028ea:	2b7f      	cmp	r3, #127	; 0x7f
 80028ec:	d85c      	bhi.n	80029a8 <HAL_UART_RxCpltCallback+0x154>
//			TxSize = strlen(TxBuffer);
			// add received bytes to TxBuffer
//			uint8_t i;
//			for(i = 0; i < len; i++) *(TxBuffer + TxSize + i) = *(RxBuffer + ((start + i) % RX_BFR_SIZE));
//			TxSize += i;
			if (RxBuffer[start] == 'f' || RxBuffer[start] == 'F') Flag_ShowStats = 4;	//show statistics from Flash
 80028ee:	89bb      	ldrh	r3, [r7, #12]
 80028f0:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	2b66      	cmp	r3, #102	; 0x66
 80028f6:	d004      	beq.n	8002902 <HAL_UART_RxCpltCallback+0xae>
 80028f8:	89bb      	ldrh	r3, [r7, #12]
 80028fa:	4a36      	ldr	r2, [pc, #216]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	2b46      	cmp	r3, #70	; 0x46
 8002900:	d102      	bne.n	8002908 <HAL_UART_RxCpltCallback+0xb4>
 8002902:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <HAL_UART_RxCpltCallback+0x184>)
 8002904:	2204      	movs	r2, #4
 8002906:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'c' || RxBuffer[start] == 'C') Flag_ShowStats = 5;	//show current statistics
 8002908:	89bb      	ldrh	r3, [r7, #12]
 800290a:	4a32      	ldr	r2, [pc, #200]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 800290c:	5cd3      	ldrb	r3, [r2, r3]
 800290e:	2b63      	cmp	r3, #99	; 0x63
 8002910:	d004      	beq.n	800291c <HAL_UART_RxCpltCallback+0xc8>
 8002912:	89bb      	ldrh	r3, [r7, #12]
 8002914:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	2b43      	cmp	r3, #67	; 0x43
 800291a:	d102      	bne.n	8002922 <HAL_UART_RxCpltCallback+0xce>
 800291c:	4b2e      	ldr	r3, [pc, #184]	; (80029d8 <HAL_UART_RxCpltCallback+0x184>)
 800291e:	2205      	movs	r2, #5
 8002920:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'w' || RxBuffer[start] == 'W') Flag_ShowStats = 3;	//show WattHours statistics
 8002922:	89bb      	ldrh	r3, [r7, #12]
 8002924:	4a2b      	ldr	r2, [pc, #172]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	2b77      	cmp	r3, #119	; 0x77
 800292a:	d004      	beq.n	8002936 <HAL_UART_RxCpltCallback+0xe2>
 800292c:	89bb      	ldrh	r3, [r7, #12]
 800292e:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	2b57      	cmp	r3, #87	; 0x57
 8002934:	d102      	bne.n	800293c <HAL_UART_RxCpltCallback+0xe8>
 8002936:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <HAL_UART_RxCpltCallback+0x184>)
 8002938:	2203      	movs	r2, #3
 800293a:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'e' || RxBuffer[start] == 'E')						//erase statistics in flash
 800293c:	89bb      	ldrh	r3, [r7, #12]
 800293e:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	2b65      	cmp	r3, #101	; 0x65
 8002944:	d004      	beq.n	8002950 <HAL_UART_RxCpltCallback+0xfc>
 8002946:	89bb      	ldrh	r3, [r7, #12]
 8002948:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	2b45      	cmp	r3, #69	; 0x45
 800294e:	d115      	bne.n	800297c <HAL_UART_RxCpltCallback+0x128>
			{
				int i;
				for(i = 0; i < sizeof(Stat_Flash); i++)		//clear statistics that will be stored in flash at top of the hour
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	e00c      	b.n	8002970 <HAL_UART_RxCpltCallback+0x11c>
				{
					((uint8_t *) &StatCurrentWh)[i] = 0;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4a20      	ldr	r2, [pc, #128]	; (80029dc <HAL_UART_RxCpltCallback+0x188>)
 800295a:	4413      	add	r3, r2
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
					((uint8_t *) &Stat_Flash)[i] = 0;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <HAL_UART_RxCpltCallback+0x18c>)
 8002964:	4413      	add	r3, r2
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
				for(i = 0; i < sizeof(Stat_Flash); i++)		//clear statistics that will be stored in flash at top of the hour
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	3301      	adds	r3, #1
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b6f      	cmp	r3, #111	; 0x6f
 8002974:	d9ef      	bls.n	8002956 <HAL_UART_RxCpltCallback+0x102>
				}
				Flag_ShowStats = 4;
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_UART_RxCpltCallback+0x184>)
 8002978:	2204      	movs	r2, #4
 800297a:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'h' || RxBuffer[start] == 'H' || RxBuffer[start] == '?')
 800297c:	89bb      	ldrh	r3, [r7, #12]
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	2b68      	cmp	r3, #104	; 0x68
 8002984:	d009      	beq.n	800299a <HAL_UART_RxCpltCallback+0x146>
 8002986:	89bb      	ldrh	r3, [r7, #12]
 8002988:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	2b48      	cmp	r3, #72	; 0x48
 800298e:	d004      	beq.n	800299a <HAL_UART_RxCpltCallback+0x146>
 8002990:	89bb      	ldrh	r3, [r7, #12]
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_UART_RxCpltCallback+0x180>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	2b3f      	cmp	r3, #63	; 0x3f
 8002998:	d106      	bne.n	80029a8 <HAL_UART_RxCpltCallback+0x154>
			{
				Flag_ShowStats = 10;
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_UART_RxCpltCallback+0x184>)
 800299c:	220a      	movs	r2, #10
 800299e:	601a      	str	r2, [r3, #0]
				sprintf(TxBuffer, "help: \r\n"
 80029a0:	4910      	ldr	r1, [pc, #64]	; (80029e4 <HAL_UART_RxCpltCallback+0x190>)
 80029a2:	4811      	ldr	r0, [pc, #68]	; (80029e8 <HAL_UART_RxCpltCallback+0x194>)
 80029a4:	f00b f898 	bl	800dad8 <siprintf>
//			TxSize = strlen(TxBuffer);
		}

//		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);						// send a response

		RxRollover = 0;																	// reset the Rollover variable
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_UART_RxCpltCallback+0x17c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
	} else {
		// no idle flag? --> DMA rollover occurred
		RxRollover++;		// increment Rollover Counter
	}
}
 80029ae:	e005      	b.n	80029bc <HAL_UART_RxCpltCallback+0x168>
		RxRollover++;		// increment Rollover Counter
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_UART_RxCpltCallback+0x17c>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_UART_RxCpltCallback+0x17c>)
 80029ba:	701a      	strb	r2, [r3, #0]
}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20005b74 	.word	0x20005b74
 80029c8:	20000235 	.word	0x20000235
 80029cc:	20000236 	.word	0x20000236
 80029d0:	20000234 	.word	0x20000234
 80029d4:	20005c84 	.word	0x20005c84
 80029d8:	2000025c 	.word	0x2000025c
 80029dc:	20005a0c 	.word	0x20005a0c
 80029e0:	20006178 	.word	0x20006178
 80029e4:	080122f0 	.word	0x080122f0
 80029e8:	20005d08 	.word	0x20005d08

080029ec <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	// UART Tx Complete Callback;
	TxCounter++;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_UART_TxCpltCallback+0x20>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_UART_TxCpltCallback+0x20>)
 80029fe:	701a      	strb	r2, [r3, #0]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	20000238 	.word	0x20000238

08002a10 <InverterOn_batteryAsBackup>:

void InverterOn_batteryAsBackup(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
	StatCurrentWs.Time_DuskTime = 0;		//clear "after dusk timer" - it's day
 8002a14:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <InverterOn_batteryAsBackup+0x154>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
					//charge battery slightly?
					if (((Adc1Measurements.Batt_voltage) < (BATT_MIN_VOLTAGE+VoltHysteresisDsChg))  &&
 8002a1a:	4b53      	ldr	r3, [pc, #332]	; (8002b68 <InverterOn_batteryAsBackup+0x158>)
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <InverterOn_batteryAsBackup+0x15c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f203 1359 	addw	r3, r3, #345	; 0x159
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d219      	bcs.n	8002a5e <InverterOn_batteryAsBackup+0x4e>
							((Adc1Measurements.Batt_voltage) > BATT_CRITICAL_MIN_VOLTAGE) &&
 8002a2a:	4b4f      	ldr	r3, [pc, #316]	; (8002b68 <InverterOn_batteryAsBackup+0x158>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
					if (((Adc1Measurements.Batt_voltage) < (BATT_MIN_VOLTAGE+VoltHysteresisDsChg))  &&
 8002a2e:	2bf0      	cmp	r3, #240	; 0xf0
 8002a30:	d915      	bls.n	8002a5e <InverterOn_batteryAsBackup+0x4e>
							StatCurrentWs.Ws_BattRecharge < TOUT_BATTRECHARGE)	//prevent too long recharging (be carefoul, cleared every hour)
 8002a32:	4b4c      	ldr	r3, [pc, #304]	; (8002b64 <InverterOn_batteryAsBackup+0x154>)
 8002a34:	691b      	ldr	r3, [r3, #16]
							((Adc1Measurements.Batt_voltage) > BATT_CRITICAL_MIN_VOLTAGE) &&
 8002a36:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002a3a:	d210      	bcs.n	8002a5e <InverterOn_batteryAsBackup+0x4e>
					{//yes, re-charge battery
						BatteryMOS_ON();
 8002a3c:	f7ff fa32 	bl	8001ea4 <BatteryMOS_ON>
						VoltHysteresisDsChg = BATT_VOLTAGE_MINHYSTERESIS;	//hysteresis for min operation batery voltage
 8002a40:	4b4a      	ldr	r3, [pc, #296]	; (8002b6c <InverterOn_batteryAsBackup+0x15c>)
 8002a42:	2213      	movs	r2, #19
 8002a44:	601a      	str	r2, [r3, #0]
						InverterMOS_OFF();	//tbd
 8002a46:	f7ff fab5 	bl	8001fb4 <InverterMOS_OFF>
						StatCountFlagsWs.Ws_BattRecharge=1;	//enable to count energy supplied for recharging, in 1Sectimer; will be cleared automatically
 8002a4a:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	611a      	str	r2, [r3, #16]
						StatCountFlagsWs.Time_BattRecharge=1;	//set flag to prevent INV mos ON
 8002a50:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	615a      	str	r2, [r3, #20]
						StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 8002a56:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a5c:	e07f      	b.n	8002b5e <InverterOn_batteryAsBackup+0x14e>
					}
					else
					{//no need to recharge battery, check what else you can do
						//prevent BatMosOff when no inv operation; MosOff only once when exiting from batt recharge
						if (StatCountFlagsWs.Time_BattRecharge) BatteryMOS_OFF();
 8002a5e:	4b44      	ldr	r3, [pc, #272]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <InverterOn_batteryAsBackup+0x5a>
 8002a66:	f7ff fa5d 	bl	8001f24 <BatteryMOS_OFF>
						VoltHysteresisDsChg = 0;
 8002a6a:	4b40      	ldr	r3, [pc, #256]	; (8002b6c <InverterOn_batteryAsBackup+0x15c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
						StatCountFlagsWs.Time_BattRecharge=0;	//reset flag to enable INV mos ON and disable counting time recharge
 8002a70:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	615a      	str	r2, [r3, #20]

						//switch INV ON only if not battery recharge AND Inverter reset procedure isnt in progress
						//if (!StatCountFlagsWs.Time_BattRecharge
						//		&& !FlagResetInverter) InverterMOS_ON();
						InverterMOS_ON();
 8002a76:	f7ff fa85 	bl	8001f84 <InverterMOS_ON>
						//is inverter working?
						if (Adc1Measurements.Inv_current > INV_CURRENT_MIN)
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <InverterOn_batteryAsBackup+0x158>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002a82:	d908      	bls.n	8002a96 <InverterOn_batteryAsBackup+0x86>
						{//yes, inverter working
							StatCountFlagsWs.Ws_Inverter=1;	//inverter working, enable to count energy, in 1Sectimer
 8002a84:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	609a      	str	r2, [r3, #8]
							BatteryMOS_OFF();		//it's day, inv working-> switch off battery mos
 8002a8a:	f7ff fa4b 	bl	8001f24 <BatteryMOS_OFF>
							StatCountFlagsWs.InvFault = 0;	//flag to clear invfault occurence
 8002a8e:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	635a      	str	r2, [r3, #52]	; 0x34
									}//end of battery fully charged
								}//end of batt not OK to charge
							}//end of inv reset  procedure not launched
						}//end of its day, inv not working
					}//end of no need to recharge battery
}
 8002a94:	e063      	b.n	8002b5e <InverterOn_batteryAsBackup+0x14e>
							if (!StatCountFlagsWs.InvFault)
 8002a96:	4b36      	ldr	r3, [pc, #216]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d107      	bne.n	8002aae <InverterOn_batteryAsBackup+0x9e>
									StatCurrentWh.InvFaultCntr++;
 8002a9e:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <InverterOn_batteryAsBackup+0x164>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <InverterOn_batteryAsBackup+0x164>)
 8002aa6:	6313      	str	r3, [r2, #48]	; 0x30
									StatCountFlagsWs.InvFault = 1;
 8002aa8:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34
							StatCountFlagsWs.Time_NoInv=1;	//enable to count time when inv is not working, in 1Sectimer
 8002aae:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	619a      	str	r2, [r3, #24]
							ResetInverterDay();	//try reset inv
 8002ab4:	f7fe fba8 	bl	8001208 <ResetInverterDay>
							if (!FlagResetInverter ) 			//if INV Reset procedure is not launched
 8002ab8:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <InverterOn_batteryAsBackup+0x168>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d14e      	bne.n	8002b5e <InverterOn_batteryAsBackup+0x14e>
								if ((Adc1Measurements.Batt_voltage) < (BATT_MAX_VOLTAGE+VoltHysteresisChg)
 8002ac0:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <InverterOn_batteryAsBackup+0x158>)
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <InverterOn_batteryAsBackup+0x16c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f203 1391 	addw	r3, r3, #401	; 0x191
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d212      	bcs.n	8002af6 <InverterOn_batteryAsBackup+0xe6>
										&& Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <InverterOn_batteryAsBackup+0x158>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2bf0      	cmp	r3, #240	; 0xf0
 8002ad6:	d90e      	bls.n	8002af6 <InverterOn_batteryAsBackup+0xe6>
									BatteryMOS_ON();
 8002ad8:	f7ff f9e4 	bl	8001ea4 <BatteryMOS_ON>
									StatCountFlagsWs.Ws_BattNoInv=1;	//enable to count energy to battery when INV isnt working, in 1Sectimer
 8002adc:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	605a      	str	r2, [r3, #4]
									StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 8002ae2:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	63da      	str	r2, [r3, #60]	; 0x3c
									VoltHysteresisChg = BATT_VOLTAGE_MAXHYSTERESIS;
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <InverterOn_batteryAsBackup+0x16c>)
 8002aea:	2213      	movs	r2, #19
 8002aec:	601a      	str	r2, [r3, #0]
									StatCountFlagsWs.Chg_cycle_count = 0;	//when battery charging unlock flag enabling counting dschg cycles
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
 8002af4:	e033      	b.n	8002b5e <InverterOn_batteryAsBackup+0x14e>
									BatteryMOS_OFF();
 8002af6:	f7ff fa15 	bl	8001f24 <BatteryMOS_OFF>
									StatCountFlagsWs.Time_NoBattery2Chg=1;	//enable to count time without possibility to charge battery, in 1Sectimer
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	621a      	str	r2, [r3, #32]
									VoltHysteresisChg = 0;
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <InverterOn_batteryAsBackup+0x16c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
									if ((Adc1Measurements.Batt_voltage) > (BATT_MAX_VOLTAGE+VoltHysteresisChg))
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <InverterOn_batteryAsBackup+0x158>)
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <InverterOn_batteryAsBackup+0x16c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f203 1391 	addw	r3, r3, #401	; 0x191
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d923      	bls.n	8002b5e <InverterOn_batteryAsBackup+0x14e>
										StatCurrentWh.Chg_Ah_lastFull=StatCurrentWh.Chg_Ah_current;	//store fully chg Ah
 8002b16:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <InverterOn_batteryAsBackup+0x164>)
 8002b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <InverterOn_batteryAsBackup+0x164>)
 8002b1c:	65d3      	str	r3, [r2, #92]	; 0x5c
										if (!StatCountFlagsWs.Chg_cycle_c2 && StatCountFlagsWs.Chg_cycle_count)
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <InverterOn_batteryAsBackup+0x132>
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <InverterOn_batteryAsBackup+0x132>
											StatCurrentWh.Chg_Volt_lastFull = Adc1Measurements.Batt_voltage;	//store lastvoltage
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <InverterOn_batteryAsBackup+0x158>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <InverterOn_batteryAsBackup+0x164>)
 8002b34:	66d3      	str	r3, [r2, #108]	; 0x6c
											StatCountFlagsWs.Chg_cycle_c2 = 1;
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
											StatCountFlagsWs.Dschg_cycle_c2 = 0;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	62da      	str	r2, [r3, #44]	; 0x2c
										if (!StatCountFlagsWs.Chg_cycle_count)
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <InverterOn_batteryAsBackup+0x14e>
											StatCountFlagsWs.Chg_cycle_count = 1; //if not, set flag 'fully charged' to count/set only once
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
											StatCountFlagsWs.Dschg_cycle_count = 0;	//clear flag to enable dschg counter when batt empty
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <InverterOn_batteryAsBackup+0x160>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
											StatCurrentWh.Dschg_Ah_current=0;	//clear discharge Ah
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <InverterOn_batteryAsBackup+0x164>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002b5c:	e7ff      	b.n	8002b5e <InverterOn_batteryAsBackup+0x14e>
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20005bf8 	.word	0x20005bf8
 8002b68:	20005998 	.word	0x20005998
 8002b6c:	20000254 	.word	0x20000254
 8002b70:	200059b8 	.word	0x200059b8
 8002b74:	20005a0c 	.word	0x20005a0c
 8002b78:	2000610c 	.word	0x2000610c
 8002b7c:	20000250 	.word	0x20000250

08002b80 <DischargeProcedure>:

void DischargeProcedure(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
	//VoltHysteresisChg = 0;		//leave Chg hysteresis elevated for transition period during dusk
	StatCountFlagsWs.Time_BattRecharge=0;	//you cant recharge during night, reset procedure
 8002b84:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <DischargeProcedure+0x120>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	615a      	str	r2, [r3, #20]
	StatCountFlagsWs.Time_NightTime=1;	//its nighttime, enable to count nightime in 1Sectimer
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <DischargeProcedure+0x120>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	61da      	str	r2, [r3, #28]
	StatCountFlagsWs.Time_DuskTime=1;	//its nightitme, enable flag to count time passed from recent dusk;
 8002b90:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <DischargeProcedure+0x120>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
	if (StatCurrentWs.Time_DuskTime == 900)	//15 minutes in the night/after dusk store Chg_Ah_last
 8002b96:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <DischargeProcedure+0x124>)
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002b9e:	d103      	bne.n	8002ba8 <DischargeProcedure+0x28>
	{
		StatCurrentWh.Chg_Ah_last = StatCurrentWh.Chg_Ah_current;
 8002ba0:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <DischargeProcedure+0x128>)
 8002ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba4:	4a40      	ldr	r2, [pc, #256]	; (8002ca8 <DischargeProcedure+0x128>)
 8002ba6:	6613      	str	r3, [r2, #96]	; 0x60
	}
	//batt OK to discharge?
	if (Adc1Measurements.Batt_voltage > (BATT_MIN_VOLTAGE-VoltHysteresisDsChg))
 8002ba8:	4b40      	ldr	r3, [pc, #256]	; (8002cac <DischargeProcedure+0x12c>)
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <DischargeProcedure+0x130>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f5c3 73ac 	rsb	r3, r3, #344	; 0x158
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d929      	bls.n	8002c0e <DischargeProcedure+0x8e>
	{//yes, OK to discharge
		if (!FlagResetInverter)
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <DischargeProcedure+0x134>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <DischargeProcedure+0x46>
		{//if reset procedure isn't in progress, turn on batt mos and inv mos
			//BatteryMOS_ON();
			DelayedInvMosOn();
 8002bc2:	f7fe fa2d 	bl	8001020 <DelayedInvMosOn>
		}
		ResetInverterNight();
 8002bc6:	f7fe fbcf 	bl	8001368 <ResetInverterNight>
		VoltHysteresisDsChg = BATT_VOLTAGE_MINHYSTERESIS;	//hysteresis for discharge
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <DischargeProcedure+0x130>)
 8002bcc:	2213      	movs	r2, #19
 8002bce:	601a      	str	r2, [r3, #0]
		if (FlagInverterMOS)
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <DischargeProcedure+0x138>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <DischargeProcedure+0x64>
		{
			StatCountFlagsWs.Ws_BattOut=1;	//enable to count energy taken from battery in 1Sectimer
 8002bd8:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <DischargeProcedure+0x120>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	60da      	str	r2, [r3, #12]
			StatCountFlagsWs.DschgAs=1;		//enable counting ampere-seconds
 8002bde:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <DischargeProcedure+0x120>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN)
 8002be4:	4b31      	ldr	r3, [pc, #196]	; (8002cac <DischargeProcedure+0x12c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002bec:	d955      	bls.n	8002c9a <DischargeProcedure+0x11a>
			if (StatCountFlagsWs.Chg_cycle_count)
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <DischargeProcedure+0x120>)
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d051      	beq.n	8002c9a <DischargeProcedure+0x11a>
			{	//if battery was fully charged before night, increment counter of charge cycles as night starts
				StatCountFlagsWs.Chg_cycle_count=0;
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <DischargeProcedure+0x120>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
				StatCountFlagsWs.Chg_cycle_c2=0;
 8002bfc:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <DischargeProcedure+0x120>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
				StatCurrentWh.Chg_cycle_count++;
 8002c02:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <DischargeProcedure+0x128>)
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <DischargeProcedure+0x128>)
 8002c0a:	6293      	str	r3, [r2, #40]	; 0x28
			InverterMOS_ON();		//can be left on, just in any case
			BatteryMOS_OFF();		//shut off controller completely
			}
		}
	}
}
 8002c0c:	e045      	b.n	8002c9a <DischargeProcedure+0x11a>
		BatteryMOS_OFF();		//disconnect battery from load (HW02>)and..
 8002c0e:	f7ff f989 	bl	8001f24 <BatteryMOS_OFF>
		VoltHysteresisDsChg = 0;
 8002c12:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <DischargeProcedure+0x130>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
		VoltHysteresisChg = 0;		//most likely will be cleared by uP reset anyway
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <DischargeProcedure+0x13c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
		StatCurrentWh.Dschg_Ah_lastFull=StatCurrentWh.Dschg_Ah_current;	//store fully dschg Ah
 8002c1e:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <DischargeProcedure+0x128>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <DischargeProcedure+0x128>)
 8002c24:	6553      	str	r3, [r2, #84]	; 0x54
		if (!StatCountFlagsWs.Dschg_cycle_c2 && StatCountFlagsWs.Dschg_cycle_count)
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <DischargeProcedure+0x120>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <DischargeProcedure+0xca>
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <DischargeProcedure+0x120>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <DischargeProcedure+0xca>
			StatCurrentWh.Dschg_Volt_lastFull = Adc1Measurements.Batt_voltage;
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <DischargeProcedure+0x12c>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <DischargeProcedure+0x128>)
 8002c3c:	6693      	str	r3, [r2, #104]	; 0x68
			StatCountFlagsWs.Dschg_cycle_c2 = 1;
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <DischargeProcedure+0x120>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
			StatCountFlagsWs.Chg_cycle_c2 = 0;
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <DischargeProcedure+0x120>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
		if (!StatCountFlagsWs.Dschg_cycle_count)	//if battery wasn't fully discharged before, but now it is
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <DischargeProcedure+0x120>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <DischargeProcedure+0xee>
			StatCountFlagsWs.Dschg_cycle_count = 1;	//to count only once
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <DischargeProcedure+0x120>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24
			StatCurrentWh.Dschg_cycle_count++;	//count only once
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <DischargeProcedure+0x128>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <DischargeProcedure+0x128>)
 8002c60:	6253      	str	r3, [r2, #36]	; 0x24
			StatCountFlagsWs.Chg_cycle_count = 0;	//most likely will be cleared by system reset
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <DischargeProcedure+0x120>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
			StatCurrentWh.Chg_Ah_current=0;	//clear charge Ah, likely ill be cleared by reset
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <DischargeProcedure+0x128>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	665a      	str	r2, [r3, #100]	; 0x64
		if (StatCountFlagsWs.Dschg_cycle_count && StatCountFlagsWs.Dschg_cycle_c2)
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <DischargeProcedure+0x120>)
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d011      	beq.n	8002c9a <DischargeProcedure+0x11a>
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <DischargeProcedure+0x120>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <DischargeProcedure+0x11a>
			if (Uptime.minutes == 0	//and wait for statistics to be saved and then...
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <DischargeProcedure+0x140>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <DischargeProcedure+0x11a>
					&& Uptime.seconds == 2)
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <DischargeProcedure+0x140>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d105      	bne.n	8002c9a <DischargeProcedure+0x11a>
			BackupPowerOFF();		//shut off controller completely
 8002c8e:	f7ff f869 	bl	8001d64 <BackupPowerOFF>
			InverterMOS_ON();		//can be left on, just in any case
 8002c92:	f7ff f977 	bl	8001f84 <InverterMOS_ON>
			BatteryMOS_OFF();		//shut off controller completely
 8002c96:	f7ff f945 	bl	8001f24 <BatteryMOS_OFF>
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200059b8 	.word	0x200059b8
 8002ca4:	20005bf8 	.word	0x20005bf8
 8002ca8:	20005a0c 	.word	0x20005a0c
 8002cac:	20005998 	.word	0x20005998
 8002cb0:	20000254 	.word	0x20000254
 8002cb4:	2000610c 	.word	0x2000610c
 8002cb8:	20000244 	.word	0x20000244
 8002cbc:	20000250 	.word	0x20000250
 8002cc0:	200059fc 	.word	0x200059fc

08002cc4 <PrintConfig2TxBuffer>:

void PrintConfig2TxBuffer(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	; 0x38
 8002cc8:	af0e      	add	r7, sp, #56	; 0x38
	sprintf(TxBuffer,  "\r\nBattery controller for On-Grid PV microinverter\r\n"
 8002cca:	f244 6350 	movw	r3, #18000	; 0x4650
 8002cce:	930c      	str	r3, [sp, #48]	; 0x30
 8002cd0:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8002cd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cd6:	232d      	movs	r3, #45	; 0x2d
 8002cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8002cda:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002cde:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce0:	2313      	movs	r3, #19
 8002ce2:	9308      	str	r3, [sp, #32]
 8002ce4:	2313      	movs	r3, #19
 8002ce6:	9307      	str	r3, [sp, #28]
 8002ce8:	f240 1391 	movw	r3, #401	; 0x191
 8002cec:	9306      	str	r3, [sp, #24]
 8002cee:	23f0      	movs	r3, #240	; 0xf0
 8002cf0:	9305      	str	r3, [sp, #20]
 8002cf2:	f240 1359 	movw	r3, #345	; 0x159
 8002cf6:	9304      	str	r3, [sp, #16]
 8002cf8:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8002cfc:	9303      	str	r3, [sp, #12]
 8002cfe:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002d02:	9302      	str	r3, [sp, #8]
 8002d04:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	2350      	movs	r3, #80	; 0x50
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2330      	movs	r3, #48	; 0x30
 8002d10:	2202      	movs	r2, #2
 8002d12:	4903      	ldr	r1, [pc, #12]	; (8002d20 <PrintConfig2TxBuffer+0x5c>)
 8002d14:	4803      	ldr	r0, [pc, #12]	; (8002d24 <PrintConfig2TxBuffer+0x60>)
 8002d16:	f00a fedf 	bl	800dad8 <siprintf>
				"\r\nStart\n\r"
				,HW_VER,NO_FLASH_PAGES,MOSFET_MAX_TEMP,PV_CURRENT_MIN,INV_CURRENT_MIN,PV_OCV_VOLGATE
				,BATT_MIN_VOLTAGE,BATT_CRITICAL_MIN_VOLTAGE,BATT_MAX_VOLTAGE,BATT_VOLTAGE_MAXHYSTERESIS
				,BATT_VOLTAGE_MINHYSTERESIS,TIME2RESET_INV, TIME2OVLD_INV, INV_CURRENT_MAX, INV_CURR_SC
				);
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	080123c8 	.word	0x080123c8
 8002d24:	20005d08 	.word	0x20005d08

08002d28 <PrintFlashStats2TxBuffer>:
void PrintFlashStats2TxBuffer(void)
{
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	b0ad      	sub	sp, #180	; 0xb4
 8002d2c:	af18      	add	r7, sp, #96	; 0x60
	    	    		"InvOvcCntr %u, InvExtRstCnt %u, "
	    	    		"ChmAhLastF %u, DchmAhLastF %u, "
	    	    		"DschVlastF %u, ChVlastF %u, "
	    	    		"ChgAhlast %u, "
	    	    		"\r\n"
	    	    ,(unsigned int)StatCurrentWh.FlashPageCounter, (unsigned int )StatCurrentWh.Time_NightTime, (unsigned int )StatCurrentWh.Time_NoBattery2Chg, (unsigned int )StatCurrentWh.Time_NoInv
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d34:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d36:	69d9      	ldr	r1, [r3, #28]
 8002d38:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d3c:	6a18      	ldr	r0, [r3, #32]
 8002d3e:	6478      	str	r0, [r7, #68]	; 0x44
 8002d40:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d42:	699c      	ldr	r4, [r3, #24]
 8002d44:	643c      	str	r4, [r7, #64]	; 0x40
	    		,(unsigned int)StatCurrentWh.Wh_BattIn
 8002d46:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d48:	685d      	ldr	r5, [r3, #4]
 8002d4a:	63fd      	str	r5, [r7, #60]	; 0x3c
	    	    ,(unsigned int)StatCurrentWh.Wh_BattNoInv, (unsigned int )StatCurrentWh.Wh_BattOut
 8002d4c:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d4e:	689e      	ldr	r6, [r3, #8]
 8002d50:	63be      	str	r6, [r7, #56]	; 0x38
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	637a      	str	r2, [r7, #52]	; 0x34
	    		,(unsigned int)StatCurrentWh.Wh_BattRecharge, (unsigned int )StatCurrentWh.Wh_Inverter
 8002d58:	4b32      	ldr	r3, [pc, #200]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d5a:	6959      	ldr	r1, [r3, #20]
 8002d5c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
	    		,(unsigned int)StatCurrentWh.Dschg_cycle_count, (unsigned int )StatCurrentWh.Chg_cycle_count
 8002d64:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002d68:	62b8      	str	r0, [r7, #40]	; 0x28
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d6c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002d6e:	627c      	str	r4, [r7, #36]	; 0x24
	    		,(unsigned int)StatCurrentWh.InvFaultCntr, (unsigned int)StatCurrentWh.InvResetCntr
 8002d70:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d72:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8002d74:	623d      	str	r5, [r7, #32]
 8002d76:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d78:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8002d7a:	61fe      	str	r6, [r7, #28]
	    		,(unsigned int)StatCurrentWh.MaxTempBatMos, (unsigned int)StatCurrentWh.MaxTempInvMos
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d80:	61ba      	str	r2, [r7, #24]
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d86:	6179      	str	r1, [r7, #20]
	    		,(unsigned int)StatCurrentWh.MaxInvCurrent, (unsigned int)StatCurrentWh.MaxPVCurrent
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d90:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002d92:	60f8      	str	r0, [r7, #12]
	    		,(unsigned int)StatCurrentWh.MaxBatVoltage, (unsigned int)StatCurrentWh.MinBatVoltage
 8002d94:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d96:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8002d98:	60bc      	str	r4, [r7, #8]
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002d9c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8002d9e:	607d      	str	r5, [r7, #4]
	    		,(unsigned int)StatCurrentWh.InvOvcCounter, (unsigned int)StatCurrentWh.InvExtResetCnt
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002da2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002da6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
	    		,(unsigned int)StatCurrentWh.Chg_Ah_lastFull, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull
 8002da8:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002daa:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002dae:	6d58      	ldr	r0, [r3, #84]	; 0x54
	    		,(unsigned int)StatCurrentWh.Dschg_Volt_lastFull, (unsigned int)StatCurrentWh.Chg_Volt_lastFull
 8002db0:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002db2:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002db6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
	    		,(unsigned int)StatCurrentWh.Chg_Ah_last
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <PrintFlashStats2TxBuffer+0xfc>)
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	sprintf(TxBuffer, "Stat_Flash:FlashPCount %u, TNightTime %u,TNoBat2Chg %u,TNoInv %u, "
 8002dbc:	9317      	str	r3, [sp, #92]	; 0x5c
 8002dbe:	9216      	str	r2, [sp, #88]	; 0x58
 8002dc0:	9115      	str	r1, [sp, #84]	; 0x54
 8002dc2:	9014      	str	r0, [sp, #80]	; 0x50
 8002dc4:	9413      	str	r4, [sp, #76]	; 0x4c
 8002dc6:	9512      	str	r5, [sp, #72]	; 0x48
 8002dc8:	9611      	str	r6, [sp, #68]	; 0x44
 8002dca:	687d      	ldr	r5, [r7, #4]
 8002dcc:	9510      	str	r5, [sp, #64]	; 0x40
 8002dce:	68bc      	ldr	r4, [r7, #8]
 8002dd0:	940f      	str	r4, [sp, #60]	; 0x3c
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	900e      	str	r0, [sp, #56]	; 0x38
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	930d      	str	r3, [sp, #52]	; 0x34
 8002dda:	6979      	ldr	r1, [r7, #20]
 8002ddc:	910c      	str	r1, [sp, #48]	; 0x30
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	920b      	str	r2, [sp, #44]	; 0x2c
 8002de2:	69fe      	ldr	r6, [r7, #28]
 8002de4:	960a      	str	r6, [sp, #40]	; 0x28
 8002de6:	6a3d      	ldr	r5, [r7, #32]
 8002de8:	9509      	str	r5, [sp, #36]	; 0x24
 8002dea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002dec:	9408      	str	r4, [sp, #32]
 8002dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df0:	9007      	str	r0, [sp, #28]
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	9306      	str	r3, [sp, #24]
 8002df6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002df8:	9105      	str	r1, [sp, #20]
 8002dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dfc:	9204      	str	r2, [sp, #16]
 8002dfe:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8002e00:	9603      	str	r6, [sp, #12]
 8002e02:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8002e04:	9502      	str	r5, [sp, #8]
 8002e06:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8002e08:	9401      	str	r4, [sp, #4]
 8002e0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e0c:	9000      	str	r0, [sp, #0]
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e12:	4905      	ldr	r1, [pc, #20]	; (8002e28 <PrintFlashStats2TxBuffer+0x100>)
 8002e14:	4805      	ldr	r0, [pc, #20]	; (8002e2c <PrintFlashStats2TxBuffer+0x104>)
 8002e16:	f00a fe5f 	bl	800dad8 <siprintf>
	    	    );
}
 8002e1a:	bf00      	nop
 8002e1c:	3754      	adds	r7, #84	; 0x54
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20005a0c 	.word	0x20005a0c
 8002e28:	080125a0 	.word	0x080125a0
 8002e2c:	20005d08 	.word	0x20005d08

08002e30 <ShowWhStats>:

void ShowWhStats(void)
{
 8002e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e32:	b09d      	sub	sp, #116	; 0x74
 8002e34:	af10      	add	r7, sp, #64	; 0x40
			"InvFaultCntr %u; InvResetCntr %u, "
			"ChmAhcur %u, DchmAhCur %u, "
			"ChmAhLF %u, DchmAhLF %u, "
			"ChgAhL %u, "
    		"\r\n"
    ,(unsigned int )StatCurrentWh.FlashPageCounter, (unsigned int )StatCurrentWh.Time_NightTime, (unsigned int )StatCurrentWh.Time_NoBattery2Chg, (unsigned int )StatCurrentWh.Time_NoInv
 8002e36:	4b29      	ldr	r3, [pc, #164]	; (8002edc <ShowWhStats+0xac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e3c:	4b27      	ldr	r3, [pc, #156]	; (8002edc <ShowWhStats+0xac>)
 8002e3e:	69d9      	ldr	r1, [r3, #28]
 8002e40:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e42:	4b26      	ldr	r3, [pc, #152]	; (8002edc <ShowWhStats+0xac>)
 8002e44:	6a1d      	ldr	r5, [r3, #32]
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <ShowWhStats+0xac>)
 8002e48:	699e      	ldr	r6, [r3, #24]
	,(unsigned int )StatCurrentWh.Wh_BattIn
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <ShowWhStats+0xac>)
 8002e4c:	6858      	ldr	r0, [r3, #4]
 8002e4e:	6278      	str	r0, [r7, #36]	; 0x24
    ,(unsigned int )StatCurrentWh.Wh_BattNoInv, (unsigned int )StatCurrentWh.Wh_BattOut
 8002e50:	4b22      	ldr	r3, [pc, #136]	; (8002edc <ShowWhStats+0xac>)
 8002e52:	689c      	ldr	r4, [r3, #8]
 8002e54:	623c      	str	r4, [r7, #32]
 8002e56:	4b21      	ldr	r3, [pc, #132]	; (8002edc <ShowWhStats+0xac>)
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	61fa      	str	r2, [r7, #28]
	,(unsigned int )StatCurrentWh.Wh_BattRecharge, (unsigned int )StatCurrentWh.Wh_Inverter
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <ShowWhStats+0xac>)
 8002e5e:	6959      	ldr	r1, [r3, #20]
 8002e60:	61b9      	str	r1, [r7, #24]
 8002e62:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <ShowWhStats+0xac>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	617b      	str	r3, [r7, #20]
	,(unsigned int )StatCurrentWh.Dschg_cycle_count, (unsigned int )StatCurrentWh.Chg_cycle_count
 8002e68:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <ShowWhStats+0xac>)
 8002e6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002e6c:	6138      	str	r0, [r7, #16]
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <ShowWhStats+0xac>)
 8002e70:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002e72:	60fc      	str	r4, [r7, #12]
	,(unsigned int)StatCurrentWh.InvFaultCntr, (unsigned int)StatCurrentWh.InvResetCntr
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <ShowWhStats+0xac>)
 8002e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e78:	60ba      	str	r2, [r7, #8]
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <ShowWhStats+0xac>)
 8002e7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e7e:	6079      	str	r1, [r7, #4]
	,(unsigned int)StatCurrentWh.Chg_Ah_current, (unsigned int)StatCurrentWh.Dschg_Ah_current
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <ShowWhStats+0xac>)
 8002e82:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <ShowWhStats+0xac>)
 8002e86:	6d98      	ldr	r0, [r3, #88]	; 0x58
	,(unsigned int)StatCurrentWh.Chg_Ah_lastFull, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <ShowWhStats+0xac>)
 8002e8a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <ShowWhStats+0xac>)
 8002e8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	,(unsigned int)StatCurrentWh.Chg_Ah_current
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <ShowWhStats+0xac>)
 8002e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	sprintf(TxBuffer, "Wh.FlashPage: %u, TNightTime %u,TNoBatt2Chg %u,TNoInv %u, "
 8002e94:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e96:	920e      	str	r2, [sp, #56]	; 0x38
 8002e98:	910d      	str	r1, [sp, #52]	; 0x34
 8002e9a:	900c      	str	r0, [sp, #48]	; 0x30
 8002e9c:	940b      	str	r4, [sp, #44]	; 0x2c
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	910a      	str	r1, [sp, #40]	; 0x28
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8002ea6:	68fc      	ldr	r4, [r7, #12]
 8002ea8:	9408      	str	r4, [sp, #32]
 8002eaa:	6938      	ldr	r0, [r7, #16]
 8002eac:	9007      	str	r0, [sp, #28]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	9306      	str	r3, [sp, #24]
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	9105      	str	r1, [sp, #20]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	9204      	str	r2, [sp, #16]
 8002eba:	6a3c      	ldr	r4, [r7, #32]
 8002ebc:	9403      	str	r4, [sp, #12]
 8002ebe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ec0:	9002      	str	r0, [sp, #8]
 8002ec2:	9601      	str	r6, [sp, #4]
 8002ec4:	9500      	str	r5, [sp, #0]
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eca:	4905      	ldr	r1, [pc, #20]	; (8002ee0 <ShowWhStats+0xb0>)
 8002ecc:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <ShowWhStats+0xb4>)
 8002ece:	f00a fe03 	bl	800dad8 <siprintf>
    );
}
 8002ed2:	bf00      	nop
 8002ed4:	3734      	adds	r7, #52	; 0x34
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20005a0c 	.word	0x20005a0c
 8002ee0:	08012730 	.word	0x08012730
 8002ee4:	20005d08 	.word	0x20005d08

08002ee8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b09b      	sub	sp, #108	; 0x6c
 8002eec:	af0e      	add	r7, sp, #56	; 0x38
 8002eee:	6278      	str	r0, [r7, #36]	; 0x24
  /* USER CODE BEGIN 5 */
	uint16_t TxSize = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	85fb      	strh	r3, [r7, #46]	; 0x2e

	InverterMOS_ON();
 8002ef4:	f7ff f846 	bl	8001f84 <InverterMOS_ON>
	HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 0);		//turn ON power for op amp and other stuff
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f02:	f002 ffdb 	bl	8005ebc <HAL_GPIO_WritePin>
	RestoreStatisticsFromFLASH();
 8002f06:	f7fe fc07 	bl	8001718 <RestoreStatisticsFromFLASH>
	HAL_UART_MspInit(&huart1);
 8002f0a:	4890      	ldr	r0, [pc, #576]	; (800314c <StartDefaultTask+0x264>)
 8002f0c:	f000 fcba 	bl	8003884 <HAL_UART_MspInit>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002f10:	4b8e      	ldr	r3, [pc, #568]	; (800314c <StartDefaultTask+0x264>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b8d      	ldr	r3, [pc, #564]	; (800314c <StartDefaultTask+0x264>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0210 	orr.w	r2, r2, #16
 8002f1e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, RxBuffer, RX_BFR_SIZE);
 8002f20:	227f      	movs	r2, #127	; 0x7f
 8002f22:	498b      	ldr	r1, [pc, #556]	; (8003150 <StartDefaultTask+0x268>)
 8002f24:	4889      	ldr	r0, [pc, #548]	; (800314c <StartDefaultTask+0x264>)
 8002f26:	f005 fb79 	bl	800861c <HAL_UART_Receive_DMA>
	  //HAL_UART_MspDeInit();
#if HW_VER > 01
	BackupPowerON();
 8002f2a:	f7fe feeb 	bl	8001d04 <BackupPowerON>
#endif
	if (HAL_ADC_Start_DMA(&hadc1, &Adc1RawReadings.Inv_current , sizeof(Adc1RawReadings)/sizeof(uint32_t)) != HAL_OK) return 0;
 8002f2e:	2207      	movs	r2, #7
 8002f30:	4988      	ldr	r1, [pc, #544]	; (8003154 <StartDefaultTask+0x26c>)
 8002f32:	4889      	ldr	r0, [pc, #548]	; (8003158 <StartDefaultTask+0x270>)
 8002f34:	f001 fab8 	bl	80044a8 <HAL_ADC_Start_DMA>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 823b 	bne.w	80033b6 <StartDefaultTask+0x4ce>

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8002f40:	2201      	movs	r2, #1
 8002f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f46:	4885      	ldr	r0, [pc, #532]	; (800315c <StartDefaultTask+0x274>)
 8002f48:	f002 ffb8 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f52:	4882      	ldr	r0, [pc, #520]	; (800315c <StartDefaultTask+0x274>)
 8002f54:	f002 ffb2 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f5e:	487f      	ldr	r0, [pc, #508]	; (800315c <StartDefaultTask+0x274>)
 8002f60:	f002 ffac 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8002f64:	2201      	movs	r2, #1
 8002f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f6a:	487c      	ldr	r0, [pc, #496]	; (800315c <StartDefaultTask+0x274>)
 8002f6c:	f002 ffa6 	bl	8005ebc <HAL_GPIO_WritePin>
	PrintConfig2TxBuffer();
 8002f70:	f7ff fea8 	bl	8002cc4 <PrintConfig2TxBuffer>
	TxSize = strlen(TxBuffer);
 8002f74:	487a      	ldr	r0, [pc, #488]	; (8003160 <StartDefaultTask+0x278>)
 8002f76:	f7fd f92b 	bl	80001d0 <strlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8002f7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f80:	461a      	mov	r2, r3
 8002f82:	4977      	ldr	r1, [pc, #476]	; (8003160 <StartDefaultTask+0x278>)
 8002f84:	4871      	ldr	r0, [pc, #452]	; (800314c <StartDefaultTask+0x264>)
 8002f86:	f005 fab9 	bl	80084fc <HAL_UART_Transmit_DMA>
	//BatteryMOS_ON();
	//BatteryMOS_OFF();
	//InverterMOS_OFF();
    //InverterMOS_ON();
	osDelay(5);
 8002f8a:	2005      	movs	r0, #5
 8002f8c:	f006 fe6d 	bl	8009c6a <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8002f90:	2200      	movs	r2, #0
 8002f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f96:	4871      	ldr	r0, [pc, #452]	; (800315c <StartDefaultTask+0x274>)
 8002f98:	f002 ff90 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fa2:	486e      	ldr	r0, [pc, #440]	; (800315c <StartDefaultTask+0x274>)
 8002fa4:	f002 ff8a 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fae:	486b      	ldr	r0, [pc, #428]	; (800315c <StartDefaultTask+0x274>)
 8002fb0:	f002 ff84 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fba:	4868      	ldr	r0, [pc, #416]	; (800315c <StartDefaultTask+0x274>)
 8002fbc:	f002 ff7e 	bl	8005ebc <HAL_GPIO_WritePin>
	ReadConfig();
 8002fc0:	f7fe fe5a 	bl	8001c78 <ReadConfig>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ConfigReg & 0b00000001);
 8002fc4:	4b67      	ldr	r3, [pc, #412]	; (8003164 <StartDefaultTask+0x27c>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd4:	4861      	ldr	r0, [pc, #388]	; (800315c <StartDefaultTask+0x274>)
 8002fd6:	f002 ff71 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ConfigReg & 0b00000010);
 8002fda:	4b62      	ldr	r3, [pc, #392]	; (8003164 <StartDefaultTask+0x27c>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fea:	485c      	ldr	r0, [pc, #368]	; (800315c <StartDefaultTask+0x274>)
 8002fec:	f002 ff66 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ConfigReg & 0b00000100);
 8002ff0:	4b5c      	ldr	r3, [pc, #368]	; (8003164 <StartDefaultTask+0x27c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003000:	4856      	ldr	r0, [pc, #344]	; (800315c <StartDefaultTask+0x274>)
 8003002:	f002 ff5b 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ConfigReg & 0b00001000);
 8003006:	4b57      	ldr	r3, [pc, #348]	; (8003164 <StartDefaultTask+0x27c>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003016:	4851      	ldr	r0, [pc, #324]	; (800315c <StartDefaultTask+0x274>)
 8003018:	f002 ff50 	bl	8005ebc <HAL_GPIO_WritePin>
	osDelay(50);
 800301c:	2032      	movs	r0, #50	; 0x32
 800301e:	f006 fe24 	bl	8009c6a <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003028:	484c      	ldr	r0, [pc, #304]	; (800315c <StartDefaultTask+0x274>)
 800302a:	f002 ff47 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003034:	4849      	ldr	r0, [pc, #292]	; (800315c <StartDefaultTask+0x274>)
 8003036:	f002 ff41 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003040:	4846      	ldr	r0, [pc, #280]	; (800315c <StartDefaultTask+0x274>)
 8003042:	f002 ff3b 	bl	8005ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800304c:	4843      	ldr	r0, [pc, #268]	; (800315c <StartDefaultTask+0x274>)
 800304e:	f002 ff35 	bl	8005ebc <HAL_GPIO_WritePin>
    PrintFlashStats2TxBuffer();
 8003052:	f7ff fe69 	bl	8002d28 <PrintFlashStats2TxBuffer>
    TxSize = strlen(TxBuffer);
 8003056:	4842      	ldr	r0, [pc, #264]	; (8003160 <StartDefaultTask+0x278>)
 8003058:	f7fd f8ba 	bl	80001d0 <strlen>
 800305c:	4603      	mov	r3, r0
 800305e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8003060:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003062:	461a      	mov	r2, r3
 8003064:	493e      	ldr	r1, [pc, #248]	; (8003160 <StartDefaultTask+0x278>)
 8003066:	4839      	ldr	r0, [pc, #228]	; (800314c <StartDefaultTask+0x264>)
 8003068:	f005 fa48 	bl	80084fc <HAL_UART_Transmit_DMA>
    osTimerStart(myTimer01Handle, 100);		//start timer
 800306c:	4b3e      	ldr	r3, [pc, #248]	; (8003168 <StartDefaultTask+0x280>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2164      	movs	r1, #100	; 0x64
 8003072:	4618      	mov	r0, r3
 8003074:	f006 fea6 	bl	8009dc4 <osTimerStart>
    StatCurrentWh.Chg_Ah_current=0;
 8003078:	4b3c      	ldr	r3, [pc, #240]	; (800316c <StartDefaultTask+0x284>)
 800307a:	2200      	movs	r2, #0
 800307c:	665a      	str	r2, [r3, #100]	; 0x64
    StatCurrentWh.Dschg_Ah_current=0;
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <StartDefaultTask+0x284>)
 8003080:	2200      	movs	r2, #0
 8003082:	659a      	str	r2, [r3, #88]	; 0x58
  /* Infinite loop */
  for(;;)
  {

	osDelay(90);		//one second delay
 8003084:	205a      	movs	r0, #90	; 0x5a
 8003086:	f006 fdf0 	bl	8009c6a <osDelay>
    HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 0);		//turn ON power for op amp and other stuff; just before soft timer starts
 800308a:	2200      	movs	r2, #0
 800308c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003094:	f002 ff12 	bl	8005ebc <HAL_GPIO_WritePin>
    while (!FlagRunMainLoop) {osDelay(2);};		//synchronizing timer with main loop
 8003098:	e002      	b.n	80030a0 <StartDefaultTask+0x1b8>
 800309a:	2002      	movs	r0, #2
 800309c:	f006 fde5 	bl	8009c6a <osDelay>
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <StartDefaultTask+0x288>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f8      	beq.n	800309a <StartDefaultTask+0x1b2>
    //diabling pwr for op amp must be synchronized with ADC. for now permanently ON.
    //HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 1);		//turn OFF power for op amp and other stuff; when procedure is complete
    if (Flag_ShowStats == 3)
 80030a8:	4b32      	ldr	r3, [pc, #200]	; (8003174 <StartDefaultTask+0x28c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d105      	bne.n	80030bc <StartDefaultTask+0x1d4>
    {
        Flag_ShowStats = 2;
 80030b0:	4b30      	ldr	r3, [pc, #192]	; (8003174 <StartDefaultTask+0x28c>)
 80030b2:	2202      	movs	r2, #2
 80030b4:	601a      	str	r2, [r3, #0]
        ShowWhStats();
 80030b6:	f7ff febb 	bl	8002e30 <ShowWhStats>
 80030ba:	e0bf      	b.n	800323c <StartDefaultTask+0x354>
    }
    else if (Flag_ShowStats == 2)
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <StartDefaultTask+0x28c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d12e      	bne.n	8003122 <StartDefaultTask+0x23a>
    {
    	Flag_ShowStats = 1;
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <StartDefaultTask+0x28c>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
        		"WsBattNoInv %u; Ws_BattOut %u, "
        		"WsBattRech %u; Ws_Inv %u, "
    			"DuskTime %u, "
    			"ChgmAs %u, DchgmAs %u, "
        		"\r\n"
        ,(unsigned int )StatCurrentWs.Time_NightTime, (unsigned int )StatCurrentWs.Time_NoBattery2Chg, (unsigned int )StatCurrentWs.Time_NoInv
 80030ca:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <StartDefaultTask+0x290>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	623b      	str	r3, [r7, #32]
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <StartDefaultTask+0x290>)
 80030d2:	6a19      	ldr	r1, [r3, #32]
 80030d4:	61f9      	str	r1, [r7, #28]
 80030d6:	4b28      	ldr	r3, [pc, #160]	; (8003178 <StartDefaultTask+0x290>)
 80030d8:	699b      	ldr	r3, [r3, #24]
    	,(unsigned int )StatCurrentWs.Ws_BattIn
 80030da:	4a27      	ldr	r2, [pc, #156]	; (8003178 <StartDefaultTask+0x290>)
 80030dc:	6812      	ldr	r2, [r2, #0]
        ,(unsigned int )StatCurrentWs.Ws_BattNoInv, (unsigned int )StatCurrentWs.Ws_BattOut
 80030de:	4926      	ldr	r1, [pc, #152]	; (8003178 <StartDefaultTask+0x290>)
 80030e0:	6849      	ldr	r1, [r1, #4]
 80030e2:	4825      	ldr	r0, [pc, #148]	; (8003178 <StartDefaultTask+0x290>)
 80030e4:	68c0      	ldr	r0, [r0, #12]
 80030e6:	61b8      	str	r0, [r7, #24]
    	,(unsigned int )StatCurrentWs.Ws_BattRecharge, (unsigned int )StatCurrentWs.Ws_Inverter
 80030e8:	4c23      	ldr	r4, [pc, #140]	; (8003178 <StartDefaultTask+0x290>)
 80030ea:	6924      	ldr	r4, [r4, #16]
 80030ec:	4d22      	ldr	r5, [pc, #136]	; (8003178 <StartDefaultTask+0x290>)
 80030ee:	68ad      	ldr	r5, [r5, #8]
		,(unsigned int)StatCurrentWs.Time_DuskTime
 80030f0:	4e21      	ldr	r6, [pc, #132]	; (8003178 <StartDefaultTask+0x290>)
 80030f2:	6bb6      	ldr	r6, [r6, #56]	; 0x38
		,(unsigned int)StatCurrentWs.ChgAs, (unsigned int)StatCurrentWs.DschgAs
 80030f4:	4820      	ldr	r0, [pc, #128]	; (8003178 <StartDefaultTask+0x290>)
 80030f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80030f8:	6178      	str	r0, [r7, #20]
 80030fa:	481f      	ldr	r0, [pc, #124]	; (8003178 <StartDefaultTask+0x290>)
 80030fc:	6c00      	ldr	r0, [r0, #64]	; 0x40
    	sprintf(TxBuffer, "Ws.TNightTime %u,TNoBat2Chg %u,TNoInv %u, "
 80030fe:	9008      	str	r0, [sp, #32]
 8003100:	6978      	ldr	r0, [r7, #20]
 8003102:	9007      	str	r0, [sp, #28]
 8003104:	9606      	str	r6, [sp, #24]
 8003106:	9505      	str	r5, [sp, #20]
 8003108:	9404      	str	r4, [sp, #16]
 800310a:	69b8      	ldr	r0, [r7, #24]
 800310c:	9003      	str	r0, [sp, #12]
 800310e:	9102      	str	r1, [sp, #8]
 8003110:	9201      	str	r2, [sp, #4]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	6a3a      	ldr	r2, [r7, #32]
 8003118:	4918      	ldr	r1, [pc, #96]	; (800317c <StartDefaultTask+0x294>)
 800311a:	4811      	ldr	r0, [pc, #68]	; (8003160 <StartDefaultTask+0x278>)
 800311c:	f00a fcdc 	bl	800dad8 <siprintf>
 8003120:	e08c      	b.n	800323c <StartDefaultTask+0x354>
        );
    }
    else if (Flag_ShowStats == 4)	//show flash stats
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <StartDefaultTask+0x28c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d105      	bne.n	8003136 <StartDefaultTask+0x24e>
    {
    	PrintFlashStats2TxBuffer();
 800312a:	f7ff fdfd 	bl	8002d28 <PrintFlashStats2TxBuffer>
    	Flag_ShowStats = 0;
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <StartDefaultTask+0x28c>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e082      	b.n	800323c <StartDefaultTask+0x354>
    }
    else if (Flag_ShowStats == 5)		//show config
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <StartDefaultTask+0x28c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b05      	cmp	r3, #5
 800313c:	d120      	bne.n	8003180 <StartDefaultTask+0x298>
    {
    	PrintConfig2TxBuffer();
 800313e:	f7ff fdc1 	bl	8002cc4 <PrintConfig2TxBuffer>
    	Flag_ShowStats = 0;
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <StartDefaultTask+0x28c>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e078      	b.n	800323c <StartDefaultTask+0x354>
 800314a:	bf00      	nop
 800314c:	20005b74 	.word	0x20005b74
 8003150:	20005c84 	.word	0x20005c84
 8003154:	20006110 	.word	0x20006110
 8003158:	20005ac8 	.word	0x20005ac8
 800315c:	48000400 	.word	0x48000400
 8003160:	20005d08 	.word	0x20005d08
 8003164:	20005994 	.word	0x20005994
 8003168:	20005d04 	.word	0x20005d04
 800316c:	20005a0c 	.word	0x20005a0c
 8003170:	20000260 	.word	0x20000260
 8003174:	2000025c 	.word	0x2000025c
 8003178:	20005bf8 	.word	0x20005bf8
 800317c:	08012828 	.word	0x08012828
    }
    else if (Flag_ShowStats == 1)		//show current Values
 8003180:	4b8f      	ldr	r3, [pc, #572]	; (80033c0 <StartDefaultTask+0x4d8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d147      	bne.n	8003218 <StartDefaultTask+0x330>
	{
    	Flag_ShowStats = 0;
 8003188:	4b8d      	ldr	r3, [pc, #564]	; (80033c0 <StartDefaultTask+0x4d8>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
				"temp PCB %u; invMOS %u; batMOS %u, "
				" mAInv %u; mAPV %u; "
				"VPV %u; VBat %u; "
				"Ext_I %u, "
				"\r\n"
		,(unsigned int )Uptime.days, (unsigned int )Uptime.hours, (unsigned int )Uptime.minutes, (unsigned int )Uptime.seconds
 800318e:	4b8d      	ldr	r3, [pc, #564]	; (80033c4 <StartDefaultTask+0x4dc>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	4b8b      	ldr	r3, [pc, #556]	; (80033c4 <StartDefaultTask+0x4dc>)
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	61f9      	str	r1, [r7, #28]
 800319a:	4b8a      	ldr	r3, [pc, #552]	; (80033c4 <StartDefaultTask+0x4dc>)
 800319c:	6858      	ldr	r0, [r3, #4]
 800319e:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <StartDefaultTask+0x4dc>)
 80031a0:	681c      	ldr	r4, [r3, #0]
		sprintf(TxBuffer, "%u d %u h %u m %u s "
 80031a2:	4b89      	ldr	r3, [pc, #548]	; (80033c8 <StartDefaultTask+0x4e0>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	4b88      	ldr	r3, [pc, #544]	; (80033cc <StartDefaultTask+0x4e4>)
 80031aa:	681d      	ldr	r5, [r3, #0]
 80031ac:	4b88      	ldr	r3, [pc, #544]	; (80033d0 <StartDefaultTask+0x4e8>)
 80031ae:	681e      	ldr	r6, [r3, #0]
 80031b0:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <StartDefaultTask+0x4ec>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	617a      	str	r2, [r7, #20]
		,(unsigned int )ConfigReg
		,(unsigned int )FlagInverterMOS, (unsigned int )FlagBatteryMOS, (unsigned int)FlagBackupMOS
		,(unsigned int )Adc1Measurements.NTC1_PCB, (unsigned int )Adc1Measurements.NTC2_Inverter_mos, (unsigned int )Adc1Measurements.NTC3_Battery_mos
 80031b6:	4b88      	ldr	r3, [pc, #544]	; (80033d8 <StartDefaultTask+0x4f0>)
 80031b8:	6919      	ldr	r1, [r3, #16]
 80031ba:	6139      	str	r1, [r7, #16]
 80031bc:	4b86      	ldr	r3, [pc, #536]	; (80033d8 <StartDefaultTask+0x4f0>)
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b85      	ldr	r3, [pc, #532]	; (80033d8 <StartDefaultTask+0x4f0>)
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	60ba      	str	r2, [r7, #8]
		,(unsigned int)Adc1Measurements.Inv_current
 80031c8:	4b83      	ldr	r3, [pc, #524]	; (80033d8 <StartDefaultTask+0x4f0>)
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	6079      	str	r1, [r7, #4]
		,(unsigned int)Adc1Measurements.PV_current
 80031ce:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <StartDefaultTask+0x4f0>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	603b      	str	r3, [r7, #0]
		,(unsigned int)Adc1Measurements.PV_voltage
 80031d4:	4b80      	ldr	r3, [pc, #512]	; (80033d8 <StartDefaultTask+0x4f0>)
 80031d6:	6899      	ldr	r1, [r3, #8]
		,(unsigned int)Adc1Measurements.Batt_voltage	// (unsigned int)Adc1Measurements.Batt_voltage%100
 80031d8:	4b7f      	ldr	r3, [pc, #508]	; (80033d8 <StartDefaultTask+0x4f0>)
 80031da:	68da      	ldr	r2, [r3, #12]
		sprintf(TxBuffer, "%u d %u h %u m %u s "
 80031dc:	4b7f      	ldr	r3, [pc, #508]	; (80033dc <StartDefaultTask+0x4f4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	930d      	str	r3, [sp, #52]	; 0x34
 80031e2:	920c      	str	r2, [sp, #48]	; 0x30
 80031e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	930a      	str	r3, [sp, #40]	; 0x28
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	9109      	str	r1, [sp, #36]	; 0x24
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	9208      	str	r2, [sp, #32]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	9307      	str	r3, [sp, #28]
 80031f6:	6939      	ldr	r1, [r7, #16]
 80031f8:	9106      	str	r1, [sp, #24]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	9205      	str	r2, [sp, #20]
 80031fe:	9604      	str	r6, [sp, #16]
 8003200:	9503      	str	r5, [sp, #12]
 8003202:	69bd      	ldr	r5, [r7, #24]
 8003204:	9502      	str	r5, [sp, #8]
 8003206:	9401      	str	r4, [sp, #4]
 8003208:	9000      	str	r0, [sp, #0]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	4974      	ldr	r1, [pc, #464]	; (80033e0 <StartDefaultTask+0x4f8>)
 8003210:	4874      	ldr	r0, [pc, #464]	; (80033e4 <StartDefaultTask+0x4fc>)
 8003212:	f00a fc61 	bl	800dad8 <siprintf>
 8003216:	e011      	b.n	800323c <StartDefaultTask+0x354>
		,(unsigned int)FlagExt_I
		);
	}
    else if (Flag_ShowStats == 10)		//show help
 8003218:	4b69      	ldr	r3, [pc, #420]	; (80033c0 <StartDefaultTask+0x4d8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b0a      	cmp	r3, #10
 800321e:	d105      	bne.n	800322c <StartDefaultTask+0x344>
    {
    	Flag_ShowStats--;
 8003220:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <StartDefaultTask+0x4d8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3b01      	subs	r3, #1
 8003226:	4a66      	ldr	r2, [pc, #408]	; (80033c0 <StartDefaultTask+0x4d8>)
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e007      	b.n	800323c <StartDefaultTask+0x354>
    }
    else
    {
    	Flag_ShowStats--;
 800322c:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <StartDefaultTask+0x4d8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3b01      	subs	r3, #1
 8003232:	4a63      	ldr	r2, [pc, #396]	; (80033c0 <StartDefaultTask+0x4d8>)
 8003234:	6013      	str	r3, [r2, #0]
    	TxBuffer[0]=0;
 8003236:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <StartDefaultTask+0x4fc>)
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
    }
    TxSize = strlen(TxBuffer);
 800323c:	4869      	ldr	r0, [pc, #420]	; (80033e4 <StartDefaultTask+0x4fc>)
 800323e:	f7fc ffc7 	bl	80001d0 <strlen>
 8003242:	4603      	mov	r3, r0
 8003244:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (TxSize>TX_BFR_SIZE) TxSize=TX_BFR_SIZE;
 8003246:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324c:	d302      	bcc.n	8003254 <StartDefaultTask+0x36c>
 800324e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003252:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8003254:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003256:	461a      	mov	r2, r3
 8003258:	4962      	ldr	r1, [pc, #392]	; (80033e4 <StartDefaultTask+0x4fc>)
 800325a:	4863      	ldr	r0, [pc, #396]	; (80033e8 <StartDefaultTask+0x500>)
 800325c:	f005 f94e 	bl	80084fc <HAL_UART_Transmit_DMA>

    if (Flag_StoreStatistics)
 8003260:	4b62      	ldr	r3, [pc, #392]	; (80033ec <StartDefaultTask+0x504>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <StartDefaultTask+0x38a>
    	{
    		StoreStatistics2FLASH();
 8003268:	f7fe fae6 	bl	8001838 <StoreStatistics2FLASH>
    		Flag_StoreStatistics=0;
 800326c:	4b5f      	ldr	r3, [pc, #380]	; (80033ec <StartDefaultTask+0x504>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
    	}

    /*main algorithm*/
    //**************************************CONFIG ENERGY TO MAINS************************************
    if (ConfigReg < CONFIG_BATT_0DELAY)
 8003272:	4b55      	ldr	r3, [pc, #340]	; (80033c8 <StartDefaultTask+0x4e0>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b06      	cmp	r3, #6
 8003278:	d819      	bhi.n	80032ae <StartDefaultTask+0x3c6>
    {
    	//is OK to switch on INV mosfet?
    	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 800327a:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <StartDefaultTask+0x4f0>)
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	2b50      	cmp	r3, #80	; 0x50
 8003280:	d905      	bls.n	800328e <StartDefaultTask+0x3a6>
    	{//no, its too hot
    		ConfigReg = CONFIG_BATT_0DELAY;	//config changed 'energy to battery'
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <StartDefaultTask+0x4e0>)
 8003284:	2207      	movs	r2, #7
 8003286:	701a      	strb	r2, [r3, #0]
			InverterMOS_OFF();		//OVT for InvMosfet usually happens during battery discharge
 8003288:	f7fe fe94 	bl	8001fb4 <InverterMOS_OFF>
 800328c:	e6fa      	b.n	8003084 <StartDefaultTask+0x19c>
    	else
    	{//yes, you can switch on INV mosfet
    		//is it day?
    		//caution: too high PV_CURRENT_MIN causes troublesome starting at dawn, controllers disables BATMOSON (batt discharged) but PV current is too weak to keep INVerter operational
    		//too low PV_CURRENT_MIN causes troublesome change operation mode at dusk - inverter causes restarts of controller overloading weak PV current source
			if (Adc1Measurements.PV_current > PV_CURRENT_MIN ||
 800328e:	4b52      	ldr	r3, [pc, #328]	; (80033d8 <StartDefaultTask+0x4f0>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8003296:	d804      	bhi.n	80032a2 <StartDefaultTask+0x3ba>
					Adc1Measurements.PV_voltage > PV_OCV_VOLGATE)
 8003298:	4b4f      	ldr	r3, [pc, #316]	; (80033d8 <StartDefaultTask+0x4f0>)
 800329a:	689b      	ldr	r3, [r3, #8]
			if (Adc1Measurements.PV_current > PV_CURRENT_MIN ||
 800329c:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80032a0:	d902      	bls.n	80032a8 <StartDefaultTask+0x3c0>
			{//yes, its day
				InverterOn_batteryAsBackup();
 80032a2:	f7ff fbb5 	bl	8002a10 <InverterOn_batteryAsBackup>
 80032a6:	e085      	b.n	80033b4 <StartDefaultTask+0x4cc>
			}//end of its day
    		else
    		{//no, its night
    			DischargeProcedure();
 80032a8:	f7ff fc6a 	bl	8002b80 <DischargeProcedure>
 80032ac:	e6ea      	b.n	8003084 <StartDefaultTask+0x19c>
    		}//closing "its night"
    	}//closing "can switch INV ON"
    }//closing MAINS config
    //************************************CONFIG ENERGY TO BATTERY*********************************
    else if (ConfigReg > CONFIG_MAINS_6DELAY &&
 80032ae:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <StartDefaultTask+0x4e0>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d96d      	bls.n	8003392 <StartDefaultTask+0x4aa>
    		ConfigReg < CONFIG_MAINS_NOBATTDSCHG)
 80032b6:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <StartDefaultTask+0x4e0>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
    else if (ConfigReg > CONFIG_MAINS_6DELAY &&
 80032ba:	2b0d      	cmp	r3, #13
 80032bc:	d869      	bhi.n	8003392 <StartDefaultTask+0x4aa>
    {
		//is OK to switch on battery mosfet?
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <StartDefaultTask+0x4f0>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b50      	cmp	r3, #80	; 0x50
 80032c4:	d903      	bls.n	80032ce <StartDefaultTask+0x3e6>
		{//no, mosfet's too hot
			ConfigReg = CONFIG_MAINS_0DELAY;	//change config energy to mains
 80032c6:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <StartDefaultTask+0x4e0>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 80032cc:	e072      	b.n	80033b4 <StartDefaultTask+0x4cc>
		}
		else
		{//yes, you can switch on battery mosfet
			//is it a day?
			if (Adc1Measurements.PV_current > PV_CURRENT_MIN || Adc1Measurements.PV_voltage > PV_OCV_VOLGATE)
 80032ce:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <StartDefaultTask+0x4f0>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80032d6:	d804      	bhi.n	80032e2 <StartDefaultTask+0x3fa>
 80032d8:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <StartDefaultTask+0x4f0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80032e0:	d952      	bls.n	8003388 <StartDefaultTask+0x4a0>
			{//yes, its day
				//is batt OK to charge
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <StartDefaultTask+0x4f0>)
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <StartDefaultTask+0x508>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f203 1391 	addw	r3, r3, #401	; 0x191
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d214      	bcs.n	800331c <StartDefaultTask+0x434>
						Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 80032f2:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <StartDefaultTask+0x4f0>)
 80032f4:	68db      	ldr	r3, [r3, #12]
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 80032f6:	2bf0      	cmp	r3, #240	; 0xf0
 80032f8:	d910      	bls.n	800331c <StartDefaultTask+0x434>
				{//yes, ok to charge
					BatteryMOS_ON();
 80032fa:	f7fe fdd3 	bl	8001ea4 <BatteryMOS_ON>
					InverterMOS_OFF();
 80032fe:	f7fe fe59 	bl	8001fb4 <InverterMOS_OFF>
					VoltHysteresisChg = BATT_VOLTAGE_MAXHYSTERESIS;
 8003302:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <StartDefaultTask+0x508>)
 8003304:	2213      	movs	r2, #19
 8003306:	601a      	str	r2, [r3, #0]
					StatCountFlagsWs.Ws_BattIn=1;	//enable to count energy stored in battery, in 1Sectimer
 8003308:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <StartDefaultTask+0x50c>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]
					StatCountFlagsWs.Chg_cycle_count = 0;	//when battery charging unlock flag enabling counting dschg cycles
 800330e:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <StartDefaultTask+0x50c>)
 8003310:	2200      	movs	r2, #0
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
					StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 8003314:	4b37      	ldr	r3, [pc, #220]	; (80033f4 <StartDefaultTask+0x50c>)
 8003316:	2201      	movs	r2, #1
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 800331a:	e038      	b.n	800338e <StartDefaultTask+0x4a6>
				}
				else
				{//no, batt not OK to charge
					InverterMOS_ON();
 800331c:	f7fe fe32 	bl	8001f84 <InverterMOS_ON>
					BatteryMOS_OFF();
 8003320:	f7fe fe00 	bl	8001f24 <BatteryMOS_OFF>
					StatCountFlagsWs.Time_NoBattery2Chg=1;	//enable to count time without possibility to charge battery, in 1Sectimer
 8003324:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <StartDefaultTask+0x50c>)
 8003326:	2201      	movs	r2, #1
 8003328:	621a      	str	r2, [r3, #32]
					VoltHysteresisChg = 0;
 800332a:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <StartDefaultTask+0x508>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
					if ((Adc1Measurements.Batt_voltage) > (BATT_MAX_VOLTAGE+VoltHysteresisChg))
 8003330:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <StartDefaultTask+0x4f0>)
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <StartDefaultTask+0x508>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f203 1391 	addw	r3, r3, #401	; 0x191
 800333c:	429a      	cmp	r2, r3
 800333e:	d926      	bls.n	800338e <StartDefaultTask+0x4a6>
					{//if battery fully charged, check if it was moment ago.
						StatCurrentWh.Chg_Ah_lastFull=StatCurrentWh.Chg_Ah_current;	//store fully chg Ah
 8003340:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <StartDefaultTask+0x510>)
 8003342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003344:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <StartDefaultTask+0x510>)
 8003346:	65d3      	str	r3, [r2, #92]	; 0x5c
						if (!StatCountFlagsWs.Chg_cycle_c2 && StatCountFlagsWs.Chg_cycle_count)
 8003348:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <StartDefaultTask+0x50c>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10d      	bne.n	800336c <StartDefaultTask+0x484>
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <StartDefaultTask+0x50c>)
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	d009      	beq.n	800336c <StartDefaultTask+0x484>
						{
							StatCurrentWh.Chg_Volt_lastFull = Adc1Measurements.Batt_voltage;	//store lastvoltage
 8003358:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <StartDefaultTask+0x4f0>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <StartDefaultTask+0x510>)
 800335e:	66d3      	str	r3, [r2, #108]	; 0x6c
							StatCountFlagsWs.Chg_cycle_c2 = 1;
 8003360:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <StartDefaultTask+0x50c>)
 8003362:	2201      	movs	r2, #1
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
							StatCountFlagsWs.Dschg_cycle_c2 = 0;
 8003366:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <StartDefaultTask+0x50c>)
 8003368:	2200      	movs	r2, #0
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
						}
						if (!StatCountFlagsWs.Chg_cycle_count)
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <StartDefaultTask+0x50c>)
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10c      	bne.n	800338e <StartDefaultTask+0x4a6>
						{
							StatCountFlagsWs.Chg_cycle_count = 1; //if not, set flag 'fully charged' to count/set only once
 8003374:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <StartDefaultTask+0x50c>)
 8003376:	2201      	movs	r2, #1
 8003378:	629a      	str	r2, [r3, #40]	; 0x28
							StatCountFlagsWs.Dschg_cycle_count = 0;	//clear flag to enable dschg counter when batt empty
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <StartDefaultTask+0x50c>)
 800337c:	2200      	movs	r2, #0
 800337e:	625a      	str	r2, [r3, #36]	; 0x24
							StatCurrentWh.Dschg_Ah_current=0;	//clear discharge Ah
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <StartDefaultTask+0x510>)
 8003382:	2200      	movs	r2, #0
 8003384:	659a      	str	r2, [r3, #88]	; 0x58
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 8003386:	e002      	b.n	800338e <StartDefaultTask+0x4a6>
					}
				}
			}
			else
			{//no, its night
				DischargeProcedure();
 8003388:	f7ff fbfa 	bl	8002b80 <DischargeProcedure>
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 800338c:	e012      	b.n	80033b4 <StartDefaultTask+0x4cc>
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 800338e:	bf00      	nop
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 8003390:	e010      	b.n	80033b4 <StartDefaultTask+0x4cc>
			}//closing "its night"
		}//closing "you can switch on batt mosfet"
    }//closing "config battery"
    //************************************CONFIG Spare ENERGY TO BATTERY, but no battery discharge*********************************
    else if (ConfigReg == CONFIG_MAINS_NOBATTDSCHG)
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <StartDefaultTask+0x4e0>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b0e      	cmp	r3, #14
 8003398:	f47f ae74 	bne.w	8003084 <StartDefaultTask+0x19c>
    {//is OK to switch on INV mosfet?
    	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <StartDefaultTask+0x4f0>)
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	2b50      	cmp	r3, #80	; 0x50
 80033a2:	d905      	bls.n	80033b0 <StartDefaultTask+0x4c8>
    	{//no, its too hot
    		ConfigReg = CONFIG_BATT_0DELAY;	//config changed 'energy to battery'
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <StartDefaultTask+0x4e0>)
 80033a6:	2207      	movs	r2, #7
 80033a8:	701a      	strb	r2, [r3, #0]
			InverterMOS_OFF();		//OVT for InvMosfet usually happens during battery discharge
 80033aa:	f7fe fe03 	bl	8001fb4 <InverterMOS_OFF>
 80033ae:	e669      	b.n	8003084 <StartDefaultTask+0x19c>
    	}
    	else
    	{//yes, you can switch on INV mosfet
    		InverterOn_batteryAsBackup();
 80033b0:	f7ff fb2e 	bl	8002a10 <InverterOn_batteryAsBackup>
	osDelay(90);		//one second delay
 80033b4:	e666      	b.n	8003084 <StartDefaultTask+0x19c>
	if (HAL_ADC_Start_DMA(&hadc1, &Adc1RawReadings.Inv_current , sizeof(Adc1RawReadings)/sizeof(uint32_t)) != HAL_OK) return 0;
 80033b6:	bf00      	nop
    	}//closing "ok to switch ON INV mosfet"
    }//closing config "spare energy to battery"
  }//closing main loop
  /* USER CODE END 5 */
}
 80033b8:	3734      	adds	r7, #52	; 0x34
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000025c 	.word	0x2000025c
 80033c4:	200059fc 	.word	0x200059fc
 80033c8:	20005994 	.word	0x20005994
 80033cc:	20000244 	.word	0x20000244
 80033d0:	20000240 	.word	0x20000240
 80033d4:	20000248 	.word	0x20000248
 80033d8:	20005998 	.word	0x20005998
 80033dc:	2000024c 	.word	0x2000024c
 80033e0:	080128c0 	.word	0x080128c0
 80033e4:	20005d08 	.word	0x20005d08
 80033e8:	20005b74 	.word	0x20005b74
 80033ec:	20000258 	.word	0x20000258
 80033f0:	20000250 	.word	0x20000250
 80033f4:	200059b8 	.word	0x200059b8
 80033f8:	20005a0c 	.word	0x20005a0c

080033fc <Callback01>:

/* Callback01 function */
void Callback01(void *argument)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	if (count_second) count_second--;
 8003404:	4b56      	ldr	r3, [pc, #344]	; (8003560 <Callback01+0x164>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <Callback01+0x1c>
 800340c:	4b54      	ldr	r3, [pc, #336]	; (8003560 <Callback01+0x164>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3b01      	subs	r3, #1
 8003412:	4a53      	ldr	r2, [pc, #332]	; (8003560 <Callback01+0x164>)
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e056      	b.n	80034c6 <Callback01+0xca>
					else
					{
						count_second = TICKS_ONESECOND;	//1 for 1sec
 8003418:	4b51      	ldr	r3, [pc, #324]	; (8003560 <Callback01+0x164>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
						Uptime.seconds++;
 800341e:	4b51      	ldr	r3, [pc, #324]	; (8003564 <Callback01+0x168>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	4a4f      	ldr	r2, [pc, #316]	; (8003564 <Callback01+0x168>)
 8003426:	6013      	str	r3, [r2, #0]
						LedStatusShow();
 8003428:	f7fe f8a4 	bl	8001574 <LedStatusShow>
						if (!Flag_ShowStats) Flag_ShowStats=2;				//once a second show secondy stat alternatively with measurements
 800342c:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <Callback01+0x16c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <Callback01+0x3e>
 8003434:	4b4c      	ldr	r3, [pc, #304]	; (8003568 <Callback01+0x16c>)
 8003436:	2202      	movs	r2, #2
 8003438:	601a      	str	r2, [r3, #0]
						if (count_minutes) count_minutes--;
 800343a:	4b4c      	ldr	r3, [pc, #304]	; (800356c <Callback01+0x170>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <Callback01+0x52>
 8003442:	4b4a      	ldr	r3, [pc, #296]	; (800356c <Callback01+0x170>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3b01      	subs	r3, #1
 8003448:	4a48      	ldr	r2, [pc, #288]	; (800356c <Callback01+0x170>)
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	e03b      	b.n	80034c6 <Callback01+0xca>
						else
						{
							count_minutes = TICKS_ONEMINUTE;	//59 for 1 minute
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <Callback01+0x170>)
 8003450:	223b      	movs	r2, #59	; 0x3b
 8003452:	601a      	str	r2, [r3, #0]
							Uptime.minutes++;
 8003454:	4b43      	ldr	r3, [pc, #268]	; (8003564 <Callback01+0x168>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	3301      	adds	r3, #1
 800345a:	4a42      	ldr	r2, [pc, #264]	; (8003564 <Callback01+0x168>)
 800345c:	6053      	str	r3, [r2, #4]
							Uptime.seconds=0;
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <Callback01+0x168>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
							ReadConfig();
 8003464:	f7fe fc08 	bl	8001c78 <ReadConfig>
							Flag_ShowStats=3;				//once a minute show hourly stat
 8003468:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <Callback01+0x16c>)
 800346a:	2203      	movs	r2, #3
 800346c:	601a      	str	r2, [r3, #0]
							if (count_hours) count_hours--;	//60 minutes for one hour
 800346e:	4b40      	ldr	r3, [pc, #256]	; (8003570 <Callback01+0x174>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <Callback01+0x86>
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <Callback01+0x174>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3b01      	subs	r3, #1
 800347c:	4a3c      	ldr	r2, [pc, #240]	; (8003570 <Callback01+0x174>)
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e021      	b.n	80034c6 <Callback01+0xca>
							else
							{
								Calculate_WattHours();
 8003482:	f7fe fb6f 	bl	8001b64 <Calculate_WattHours>
								count_hours = TICKS_ONEHOUR;
 8003486:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <Callback01+0x174>)
 8003488:	223b      	movs	r2, #59	; 0x3b
 800348a:	601a      	str	r2, [r3, #0]
								Uptime.hours++;
 800348c:	4b35      	ldr	r3, [pc, #212]	; (8003564 <Callback01+0x168>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	3301      	adds	r3, #1
 8003492:	4a34      	ldr	r2, [pc, #208]	; (8003564 <Callback01+0x168>)
 8003494:	6093      	str	r3, [r2, #8]
								Uptime.minutes=0;
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <Callback01+0x168>)
 8003498:	2200      	movs	r2, #0
 800349a:	605a      	str	r2, [r3, #4]
#if FLASHSTATSAVE_PERIOD == 0	//FLASHSTATSAVE_PERIOD 0-every hour,
								Flag_StoreStatistics = 1;
 800349c:	4b35      	ldr	r3, [pc, #212]	; (8003574 <Callback01+0x178>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
#endif
								if (count_days) count_days--;
 80034a2:	4b35      	ldr	r3, [pc, #212]	; (8003578 <Callback01+0x17c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <Callback01+0xba>
 80034aa:	4b33      	ldr	r3, [pc, #204]	; (8003578 <Callback01+0x17c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	4a31      	ldr	r2, [pc, #196]	; (8003578 <Callback01+0x17c>)
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	e007      	b.n	80034c6 <Callback01+0xca>
								else
								{
									count_days = TICKS_ONEDAY;
 80034b6:	4b30      	ldr	r3, [pc, #192]	; (8003578 <Callback01+0x17c>)
 80034b8:	2217      	movs	r2, #23
 80034ba:	601a      	str	r2, [r3, #0]
									Uptime.days++;
 80034bc:	4b29      	ldr	r3, [pc, #164]	; (8003564 <Callback01+0x168>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4a28      	ldr	r2, [pc, #160]	; (8003564 <Callback01+0x168>)
 80034c4:	60d3      	str	r3, [r2, #12]
								}
							}
						}
					}
		Calculate_WattSeconds();
 80034c6:	f7fe fa39 	bl	800193c <Calculate_WattSeconds>
		HAL_ADC_Start(&hadc1);
 80034ca:	482c      	ldr	r0, [pc, #176]	; (800357c <Callback01+0x180>)
 80034cc:	f000 ff88 	bl	80043e0 <HAL_ADC_Start>
#ifdef DEBUG_EN
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
#endif
			Adc1Measurements.Inv_current = ConvertIValue(Adc1RawReadings.Inv_current);
 80034d0:	4b2b      	ldr	r3, [pc, #172]	; (8003580 <Callback01+0x184>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe fe53 	bl	8002180 <ConvertIValue>
 80034da:	4603      	mov	r3, r0
 80034dc:	4a29      	ldr	r2, [pc, #164]	; (8003584 <Callback01+0x188>)
 80034de:	6013      	str	r3, [r2, #0]
			Adc1Measurements.PV_current = ConvertIValue(Adc1RawReadings.PV_current) ;
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <Callback01+0x184>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fe4b 	bl	8002180 <ConvertIValue>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a25      	ldr	r2, [pc, #148]	; (8003584 <Callback01+0x188>)
 80034ee:	6053      	str	r3, [r2, #4]
			Adc1Measurements.PV_voltage = ConvertVValue(Adc1RawReadings.PV_voltage) ;
 80034f0:	4b23      	ldr	r3, [pc, #140]	; (8003580 <Callback01+0x184>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fde3 	bl	80020c0 <ConvertVValue>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4a21      	ldr	r2, [pc, #132]	; (8003584 <Callback01+0x188>)
 80034fe:	6093      	str	r3, [r2, #8]
			Adc1Measurements.Batt_voltage = ConvertVValue(Adc1RawReadings.Batt_voltage) ;
 8003500:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <Callback01+0x184>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4618      	mov	r0, r3
 8003506:	f7fe fddb 	bl	80020c0 <ConvertVValue>
 800350a:	4603      	mov	r3, r0
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <Callback01+0x188>)
 800350e:	60d3      	str	r3, [r2, #12]
			Adc1Measurements.NTC1_PCB = ConvertNTCvalue(Adc1RawReadings.NTC1_PCB) ;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <Callback01+0x184>)
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fd5f 	bl	8001fd8 <ConvertNTCvalue>
 800351a:	4603      	mov	r3, r0
 800351c:	4a19      	ldr	r2, [pc, #100]	; (8003584 <Callback01+0x188>)
 800351e:	6113      	str	r3, [r2, #16]
			Adc1Measurements.NTC2_Inverter_mos = ConvertNTCvalue(Adc1RawReadings.NTC2_Inverter_mos) ;
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <Callback01+0x184>)
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe fd57 	bl	8001fd8 <ConvertNTCvalue>
 800352a:	4603      	mov	r3, r0
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <Callback01+0x188>)
 800352e:	6153      	str	r3, [r2, #20]
			Adc1Measurements.NTC3_Battery_mos = ConvertNTCvalue(Adc1RawReadings.NTC3_Battery_mos) ;
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <Callback01+0x184>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fd4f 	bl	8001fd8 <ConvertNTCvalue>
 800353a:	4603      	mov	r3, r0
 800353c:	4a11      	ldr	r2, [pc, #68]	; (8003584 <Callback01+0x188>)
 800353e:	6193      	str	r3, [r2, #24]
			FlagExt_I = HAL_GPIO_ReadPin(EXT_I_GPIO_Port, EXT_I_Pin);
 8003540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003544:	4810      	ldr	r0, [pc, #64]	; (8003588 <Callback01+0x18c>)
 8003546:	f002 fca1 	bl	8005e8c <HAL_GPIO_ReadPin>
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	4b0f      	ldr	r3, [pc, #60]	; (800358c <Callback01+0x190>)
 8003550:	601a      	str	r2, [r3, #0]
		FlagRunMainLoop = 1;
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <Callback01+0x194>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]
  /* USER CODE END Callback01 */
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	2000023c 	.word	0x2000023c
 8003564:	200059fc 	.word	0x200059fc
 8003568:	2000025c 	.word	0x2000025c
 800356c:	20000000 	.word	0x20000000
 8003570:	20000004 	.word	0x20000004
 8003574:	20000258 	.word	0x20000258
 8003578:	20000008 	.word	0x20000008
 800357c:	20005ac8 	.word	0x20005ac8
 8003580:	20006110 	.word	0x20006110
 8003584:	20005998 	.word	0x20005998
 8003588:	48000400 	.word	0x48000400
 800358c:	2000024c 	.word	0x2000024c
 8003590:	20000260 	.word	0x20000260

08003594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035a6:	f000 fbeb 	bl	8003d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40001000 	.word	0x40001000

080035b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035bc:	b672      	cpsid	i
}
 80035be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035c0:	e7fe      	b.n	80035c0 <Error_Handler+0x8>
	...

080035c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ca:	4b11      	ldr	r3, [pc, #68]	; (8003610 <HAL_MspInit+0x4c>)
 80035cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ce:	4a10      	ldr	r2, [pc, #64]	; (8003610 <HAL_MspInit+0x4c>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6613      	str	r3, [r2, #96]	; 0x60
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_MspInit+0x4c>)
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_MspInit+0x4c>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_MspInit+0x4c>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6593      	str	r3, [r2, #88]	; 0x58
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <HAL_MspInit+0x4c>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	210f      	movs	r1, #15
 80035fe:	f06f 0001 	mvn.w	r0, #1
 8003602:	f001 fda5 	bl	8005150 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000

08003614 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b0a2      	sub	sp, #136	; 0x88
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800362c:	f107 0318 	add.w	r3, r7, #24
 8003630:	225c      	movs	r2, #92	; 0x5c
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f009 faf2 	bl	800cc1e <memset>
  if(hadc->Instance==ADC1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a3f      	ldr	r2, [pc, #252]	; (800373c <HAL_ADC_MspInit+0x128>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d177      	bne.n	8003734 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003648:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800364a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800364e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003650:	f107 0318 	add.w	r3, r7, #24
 8003654:	4618      	mov	r0, r3
 8003656:	f003 fb2f 	bl	8006cb8 <HAL_RCCEx_PeriphCLKConfig>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003660:	f7ff ffaa 	bl	80035b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003664:	4b36      	ldr	r3, [pc, #216]	; (8003740 <HAL_ADC_MspInit+0x12c>)
 8003666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003668:	4a35      	ldr	r2, [pc, #212]	; (8003740 <HAL_ADC_MspInit+0x12c>)
 800366a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800366e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003670:	4b33      	ldr	r3, [pc, #204]	; (8003740 <HAL_ADC_MspInit+0x12c>)
 8003672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800367c:	4b30      	ldr	r3, [pc, #192]	; (8003740 <HAL_ADC_MspInit+0x12c>)
 800367e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003680:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <HAL_ADC_MspInit+0x12c>)
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_ADC_MspInit+0x12c>)
 800368a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_ADC_MspInit+0x12c>)
 8003696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003698:	4a29      	ldr	r2, [pc, #164]	; (8003740 <HAL_ADC_MspInit+0x12c>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a0:	4b27      	ldr	r3, [pc, #156]	; (8003740 <HAL_ADC_MspInit+0x12c>)
 80036a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80036ac:	230f      	movs	r3, #15
 80036ae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80036b0:	230b      	movs	r3, #11
 80036b2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036bc:	4619      	mov	r1, r3
 80036be:	4821      	ldr	r0, [pc, #132]	; (8003744 <HAL_ADC_MspInit+0x130>)
 80036c0:	f002 fa6a 	bl	8005b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80036c4:	2307      	movs	r3, #7
 80036c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80036c8:	230b      	movs	r3, #11
 80036ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036d4:	4619      	mov	r1, r3
 80036d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036da:	f002 fa5d 	bl	8005b98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_ADC_MspInit+0x134>)
 80036e0:	4a1a      	ldr	r2, [pc, #104]	; (800374c <HAL_ADC_MspInit+0x138>)
 80036e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80036e4:	4b18      	ldr	r3, [pc, #96]	; (8003748 <HAL_ADC_MspInit+0x134>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_ADC_MspInit+0x134>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_ADC_MspInit+0x134>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <HAL_ADC_MspInit+0x134>)
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_ADC_MspInit+0x134>)
 80036fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003702:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <HAL_ADC_MspInit+0x134>)
 8003706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800370a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_ADC_MspInit+0x134>)
 800370e:	2220      	movs	r2, #32
 8003710:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_ADC_MspInit+0x134>)
 8003714:	2200      	movs	r2, #0
 8003716:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003718:	480b      	ldr	r0, [pc, #44]	; (8003748 <HAL_ADC_MspInit+0x134>)
 800371a:	f001 fd43 	bl	80051a4 <HAL_DMA_Init>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8003724:	f7ff ff48 	bl	80035b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a07      	ldr	r2, [pc, #28]	; (8003748 <HAL_ADC_MspInit+0x134>)
 800372c:	64da      	str	r2, [r3, #76]	; 0x4c
 800372e:	4a06      	ldr	r2, [pc, #24]	; (8003748 <HAL_ADC_MspInit+0x134>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003734:	bf00      	nop
 8003736:	3788      	adds	r7, #136	; 0x88
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	50040000 	.word	0x50040000
 8003740:	40021000 	.word	0x40021000
 8003744:	48000800 	.word	0x48000800
 8003748:	20005c3c 	.word	0x20005c3c
 800374c:	40020008 	.word	0x40020008

08003750 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d10b      	bne.n	800377a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_TIM_PWM_MspInit+0x38>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	4a08      	ldr	r2, [pc, #32]	; (8003788 <HAL_TIM_PWM_MspInit+0x38>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6593      	str	r3, [r2, #88]	; 0x58
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_TIM_PWM_MspInit+0x38>)
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000

0800378c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <HAL_TIM_Base_MspInit+0x38>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10b      	bne.n	80037b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_TIM_Base_MspInit+0x3c>)
 80037a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_TIM_Base_MspInit+0x3c>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a8:	6613      	str	r3, [r2, #96]	; 0x60
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_TIM_Base_MspInit+0x3c>)
 80037ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40021000 	.word	0x40021000

080037cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ec:	d11d      	bne.n	800382a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <HAL_TIM_MspPostInit+0xac>)
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	4a21      	ldr	r2, [pc, #132]	; (8003878 <HAL_TIM_MspPostInit+0xac>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037fa:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <HAL_TIM_MspPostInit+0xac>)
 80037fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BAT_SWITCH_PWM_Pin;
 8003806:	2320      	movs	r3, #32
 8003808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380a:	2302      	movs	r3, #2
 800380c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003812:	2300      	movs	r3, #0
 8003814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003816:	2301      	movs	r3, #1
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SWITCH_PWM_GPIO_Port, &GPIO_InitStruct);
 800381a:	f107 0314 	add.w	r3, r7, #20
 800381e:	4619      	mov	r1, r3
 8003820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003824:	f002 f9b8 	bl	8005b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003828:	e021      	b.n	800386e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM16)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a13      	ldr	r2, [pc, #76]	; (800387c <HAL_TIM_MspPostInit+0xb0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d11c      	bne.n	800386e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_TIM_MspPostInit+0xac>)
 8003836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003838:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <HAL_TIM_MspPostInit+0xac>)
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <HAL_TIM_MspPostInit+0xac>)
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXT_O_Pin;
 800384c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800385e:	230e      	movs	r3, #14
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_O_GPIO_Port, &GPIO_InitStruct);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	4805      	ldr	r0, [pc, #20]	; (8003880 <HAL_TIM_MspPostInit+0xb4>)
 800386a:	f002 f995 	bl	8005b98 <HAL_GPIO_Init>
}
 800386e:	bf00      	nop
 8003870:	3728      	adds	r7, #40	; 0x28
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	40014400 	.word	0x40014400
 8003880:	48000400 	.word	0x48000400

08003884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b0a0      	sub	sp, #128	; 0x80
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800389c:	f107 0310 	add.w	r3, r7, #16
 80038a0:	225c      	movs	r2, #92	; 0x5c
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f009 f9ba 	bl	800cc1e <memset>
  if(huart->Instance==USART1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a4d      	ldr	r2, [pc, #308]	; (80039e4 <HAL_UART_MspInit+0x160>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	f040 8092 	bne.w	80039da <HAL_UART_MspInit+0x156>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038ba:	2300      	movs	r3, #0
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038be:	f107 0310 	add.w	r3, r7, #16
 80038c2:	4618      	mov	r0, r3
 80038c4:	f003 f9f8 	bl	8006cb8 <HAL_RCCEx_PeriphCLKConfig>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80038ce:	f7ff fe73 	bl	80035b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038d2:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <HAL_UART_MspInit+0x164>)
 80038d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d6:	4a44      	ldr	r2, [pc, #272]	; (80039e8 <HAL_UART_MspInit+0x164>)
 80038d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038dc:	6613      	str	r3, [r2, #96]	; 0x60
 80038de:	4b42      	ldr	r3, [pc, #264]	; (80039e8 <HAL_UART_MspInit+0x164>)
 80038e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ea:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <HAL_UART_MspInit+0x164>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	4a3e      	ldr	r2, [pc, #248]	; (80039e8 <HAL_UART_MspInit+0x164>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f6:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <HAL_UART_MspInit+0x164>)
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003902:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003906:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003910:	2303      	movs	r3, #3
 8003912:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003914:	2307      	movs	r3, #7
 8003916:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003918:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800391c:	4619      	mov	r1, r3
 800391e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003922:	f002 f939 	bl	8005b98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8003926:	4b31      	ldr	r3, [pc, #196]	; (80039ec <HAL_UART_MspInit+0x168>)
 8003928:	4a31      	ldr	r2, [pc, #196]	; (80039f0 <HAL_UART_MspInit+0x16c>)
 800392a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800392c:	4b2f      	ldr	r3, [pc, #188]	; (80039ec <HAL_UART_MspInit+0x168>)
 800392e:	2202      	movs	r2, #2
 8003930:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003932:	4b2e      	ldr	r3, [pc, #184]	; (80039ec <HAL_UART_MspInit+0x168>)
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003938:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_UART_MspInit+0x168>)
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_UART_MspInit+0x168>)
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003944:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_UART_MspInit+0x168>)
 8003946:	2200      	movs	r2, #0
 8003948:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800394a:	4b28      	ldr	r3, [pc, #160]	; (80039ec <HAL_UART_MspInit+0x168>)
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003950:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_UART_MspInit+0x168>)
 8003952:	2220      	movs	r2, #32
 8003954:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003956:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_UART_MspInit+0x168>)
 8003958:	2200      	movs	r2, #0
 800395a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800395c:	4823      	ldr	r0, [pc, #140]	; (80039ec <HAL_UART_MspInit+0x168>)
 800395e:	f001 fc21 	bl	80051a4 <HAL_DMA_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8003968:	f7ff fe26 	bl	80035b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <HAL_UART_MspInit+0x168>)
 8003970:	671a      	str	r2, [r3, #112]	; 0x70
 8003972:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <HAL_UART_MspInit+0x168>)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8003978:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <HAL_UART_MspInit+0x170>)
 800397a:	4a1f      	ldr	r2, [pc, #124]	; (80039f8 <HAL_UART_MspInit+0x174>)
 800397c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_UART_MspInit+0x170>)
 8003980:	2202      	movs	r2, #2
 8003982:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_UART_MspInit+0x170>)
 8003986:	2210      	movs	r2, #16
 8003988:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_UART_MspInit+0x170>)
 800398c:	2200      	movs	r2, #0
 800398e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003990:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_UART_MspInit+0x170>)
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003996:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_UART_MspInit+0x170>)
 8003998:	2200      	movs	r2, #0
 800399a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800399c:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_UART_MspInit+0x170>)
 800399e:	2200      	movs	r2, #0
 80039a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_UART_MspInit+0x170>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_UART_MspInit+0x170>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80039ae:	4811      	ldr	r0, [pc, #68]	; (80039f4 <HAL_UART_MspInit+0x170>)
 80039b0:	f001 fbf8 	bl	80051a4 <HAL_DMA_Init>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80039ba:	f7ff fdfd 	bl	80035b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a0c      	ldr	r2, [pc, #48]	; (80039f4 <HAL_UART_MspInit+0x170>)
 80039c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_UART_MspInit+0x170>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2105      	movs	r1, #5
 80039ce:	2025      	movs	r0, #37	; 0x25
 80039d0:	f001 fbbe 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039d4:	2025      	movs	r0, #37	; 0x25
 80039d6:	f001 fbd7 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039da:	bf00      	nop
 80039dc:	3780      	adds	r7, #128	; 0x80
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40021000 	.word	0x40021000
 80039ec:	20005b2c 	.word	0x20005b2c
 80039f0:	40020480 	.word	0x40020480
 80039f4:	20005a7c 	.word	0x20005a7c
 80039f8:	4002046c 	.word	0x4002046c

080039fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08c      	sub	sp, #48	; 0x30
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	2036      	movs	r0, #54	; 0x36
 8003a12:	f001 fb9d 	bl	8005150 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a16:	2036      	movs	r0, #54	; 0x36
 8003a18:	f001 fbb6 	bl	8005188 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a1c:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <HAL_InitTick+0x9c>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <HAL_InitTick+0x9c>)
 8003a22:	f043 0310 	orr.w	r3, r3, #16
 8003a26:	6593      	str	r3, [r2, #88]	; 0x58
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_InitTick+0x9c>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a34:	f107 0210 	add.w	r2, r7, #16
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f003 f8a8 	bl	8006b94 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a44:	f003 f87a 	bl	8006b3c <HAL_RCC_GetPCLK1Freq>
 8003a48:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <HAL_InitTick+0xa0>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0c9b      	lsrs	r3, r3, #18
 8003a54:	3b01      	subs	r3, #1
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a58:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_InitTick+0xa4>)
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <HAL_InitTick+0xa8>)
 8003a5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_InitTick+0xa4>)
 8003a60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a66:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <HAL_InitTick+0xa4>)
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_InitTick+0xa4>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_InitTick+0xa4>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003a78:	4809      	ldr	r0, [pc, #36]	; (8003aa0 <HAL_InitTick+0xa4>)
 8003a7a:	f003 fc27 	bl	80072cc <HAL_TIM_Base_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003a84:	4806      	ldr	r0, [pc, #24]	; (8003aa0 <HAL_InitTick+0xa4>)
 8003a86:	f003 fc79 	bl	800737c <HAL_TIM_Base_Start_IT>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	e000      	b.n	8003a90 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3730      	adds	r7, #48	; 0x30
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	431bde83 	.word	0x431bde83
 8003aa0:	20006238 	.word	0x20006238
 8003aa4:	40001000 	.word	0x40001000

08003aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003aac:	e7fe      	b.n	8003aac <NMI_Handler+0x4>

08003aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab2:	e7fe      	b.n	8003ab2 <HardFault_Handler+0x4>

08003ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ab8:	e7fe      	b.n	8003ab8 <MemManage_Handler+0x4>

08003aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003abe:	e7fe      	b.n	8003abe <BusFault_Handler+0x4>

08003ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ac4:	e7fe      	b.n	8003ac4 <UsageFault_Handler+0x4>

08003ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <DMA1_Channel1_IRQHandler+0x10>)
 8003ada:	f001 fcfa 	bl	80054d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20005c3c 	.word	0x20005c3c

08003ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003aec:	4807      	ldr	r0, [pc, #28]	; (8003b0c <USART1_IRQHandler+0x24>)
 8003aee:	f004 fdeb 	bl	80086c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <USART1_IRQHandler+0x24>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d102      	bne.n	8003b06 <USART1_IRQHandler+0x1e>
HAL_UART_RxCpltCallback(&huart1);}
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <USART1_IRQHandler+0x24>)
 8003b02:	f7fe fea7 	bl	8002854 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20005b74 	.word	0x20005b74

08003b10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <TIM6_DAC_IRQHandler+0x10>)
 8003b16:	f003 fe43 	bl	80077a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20006238 	.word	0x20006238

08003b24 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <DMA2_Channel6_IRQHandler+0x10>)
 8003b2a:	f001 fcd2 	bl	80054d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20005a7c 	.word	0x20005a7c

08003b38 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b3c:	4802      	ldr	r0, [pc, #8]	; (8003b48 <DMA2_Channel7_IRQHandler+0x10>)
 8003b3e:	f001 fcc8 	bl	80054d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20005b2c 	.word	0x20005b2c

08003b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
	return 1;
 8003b50:	2301      	movs	r3, #1
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <_kill>:

int _kill(int pid, int sig)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b66:	f008 ff29 	bl	800c9bc <__errno>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2216      	movs	r2, #22
 8003b6e:	601a      	str	r2, [r3, #0]
	return -1;
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <_exit>:

void _exit (int status)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b84:	f04f 31ff 	mov.w	r1, #4294967295
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ffe7 	bl	8003b5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b8e:	e7fe      	b.n	8003b8e <_exit+0x12>

08003b90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e00a      	b.n	8003bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ba2:	f3af 8000 	nop.w
 8003ba6:	4601      	mov	r1, r0
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	60ba      	str	r2, [r7, #8]
 8003bae:	b2ca      	uxtb	r2, r1
 8003bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	dbf0      	blt.n	8003ba2 <_read+0x12>
	}

return len;
 8003bc0:	687b      	ldr	r3, [r7, #4]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e009      	b.n	8003bf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	60ba      	str	r2, [r7, #8]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	3301      	adds	r3, #1
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	dbf1      	blt.n	8003bdc <_write+0x12>
	}
	return len;
 8003bf8:	687b      	ldr	r3, [r7, #4]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <_close>:

int _close(int file)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
	return -1;
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c2a:	605a      	str	r2, [r3, #4]
	return 0;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <_isatty>:

int _isatty(int file)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
	return 1;
 8003c42:	2301      	movs	r3, #1
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
	return 0;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c74:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <_sbrk+0x5c>)
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <_sbrk+0x60>)
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <_sbrk+0x64>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <_sbrk+0x64>)
 8003c8a:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <_sbrk+0x68>)
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <_sbrk+0x64>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d207      	bcs.n	8003cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c9c:	f008 fe8e 	bl	800c9bc <__errno>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	220c      	movs	r2, #12
 8003ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	e009      	b.n	8003cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cac:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <_sbrk+0x64>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <_sbrk+0x64>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <_sbrk+0x64>)
 8003cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20010000 	.word	0x20010000
 8003ccc:	00000400 	.word	0x00000400
 8003cd0:	20000264 	.word	0x20000264
 8003cd4:	200062d8 	.word	0x200062d8

08003cd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <SystemInit+0x20>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <SystemInit+0x20>)
 8003ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d00:	f7ff ffea 	bl	8003cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d04:	480c      	ldr	r0, [pc, #48]	; (8003d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d06:	490d      	ldr	r1, [pc, #52]	; (8003d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <LoopForever+0xe>)
  movs r3, #0
 8003d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d0c:	e002      	b.n	8003d14 <LoopCopyDataInit>

08003d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d12:	3304      	adds	r3, #4

08003d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d18:	d3f9      	bcc.n	8003d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d1a:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d1c:	4c0a      	ldr	r4, [pc, #40]	; (8003d48 <LoopForever+0x16>)
  movs r3, #0
 8003d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d20:	e001      	b.n	8003d26 <LoopFillZerobss>

08003d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d24:	3204      	adds	r2, #4

08003d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d28:	d3fb      	bcc.n	8003d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d2a:	f008 ff43 	bl	800cbb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d2e:	f7fe fa67 	bl	8002200 <main>

08003d32 <LoopForever>:

LoopForever:
    b LoopForever
 8003d32:	e7fe      	b.n	8003d32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d3c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003d40:	08012ef8 	.word	0x08012ef8
  ldr r2, =_sbss
 8003d44:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003d48:	200062d8 	.word	0x200062d8

08003d4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d4c:	e7fe      	b.n	8003d4c <ADC1_IRQHandler>

08003d4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d58:	2003      	movs	r0, #3
 8003d5a:	f001 f9ee 	bl	800513a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d5e:	200f      	movs	r0, #15
 8003d60:	f7ff fe4c 	bl	80039fc <HAL_InitTick>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	71fb      	strb	r3, [r7, #7]
 8003d6e:	e001      	b.n	8003d74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d70:	f7ff fc28 	bl	80035c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d74:	79fb      	ldrb	r3, [r7, #7]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_IncTick+0x20>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <HAL_IncTick+0x24>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <HAL_IncTick+0x24>)
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000018 	.word	0x20000018
 8003da4:	20006284 	.word	0x20006284

08003da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return uwTick;
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <HAL_GetTick+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20006284 	.word	0x20006284

08003dc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3360      	adds	r3, #96	; 0x60
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <LL_ADC_SetOffset+0x44>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	03fff000 	.word	0x03fff000

08003e70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3360      	adds	r3, #96	; 0x60
 8003e7e:	461a      	mov	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3360      	adds	r3, #96	; 0x60
 8003eac:	461a      	mov	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3330      	adds	r3, #48	; 0x30
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	4413      	add	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	211f      	movs	r1, #31
 8003f24:	fa01 f303 	lsl.w	r3, r1, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	0e9b      	lsrs	r3, r3, #26
 8003f30:	f003 011f 	and.w	r1, r3, #31
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3314      	adds	r3, #20
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	0e5b      	lsrs	r3, r3, #25
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	4413      	add	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	0d1b      	lsrs	r3, r3, #20
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2107      	movs	r1, #7
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	401a      	ands	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	0d1b      	lsrs	r3, r3, #20
 8003f8a:	f003 031f 	and.w	r3, r3, #31
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	fa01 f303 	lsl.w	r3, r1, r3
 8003f94:	431a      	orrs	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0318 	and.w	r3, r3, #24
 8003fca:	4908      	ldr	r1, [pc, #32]	; (8003fec <LL_ADC_SetChannelSingleDiff+0x44>)
 8003fcc:	40d9      	lsrs	r1, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	400b      	ands	r3, r1
 8003fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	0007ffff 	.word	0x0007ffff

08003ff0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004000:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6093      	str	r3, [r2, #8]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004028:	d101      	bne.n	800402e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800404c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004050:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004078:	d101      	bne.n	800407e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800409c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040a0:	f043 0201 	orr.w	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <LL_ADC_IsEnabled+0x18>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <LL_ADC_IsEnabled+0x1a>
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040ee:	f043 0204 	orr.w	r2, r3, #4
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b04      	cmp	r3, #4
 8004114:	d101      	bne.n	800411a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b08      	cmp	r3, #8
 800413a:	d101      	bne.n	8004140 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
	...

08004150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800415c:	2300      	movs	r3, #0
 800415e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e12c      	b.n	80043c4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fa4b 	bl	8003614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff3f 	bl	8004014 <LL_ADC_IsDeepPowerDownEnabled>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff ff25 	bl	8003ff0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ff5a 	bl	8004064 <LL_ADC_IsInternalRegulatorEnabled>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d115      	bne.n	80041e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff ff3e 	bl	800403c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041c0:	4b82      	ldr	r3, [pc, #520]	; (80043cc <HAL_ADC_Init+0x27c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	099b      	lsrs	r3, r3, #6
 80041c6:	4a82      	ldr	r2, [pc, #520]	; (80043d0 <HAL_ADC_Init+0x280>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	3301      	adds	r3, #1
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041d4:	e002      	b.n	80041dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	3b01      	subs	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f9      	bne.n	80041d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ff3c 	bl	8004064 <LL_ADC_IsInternalRegulatorEnabled>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	f043 0210 	orr.w	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ff75 	bl	8004102 <LL_ADC_REG_IsConversionOngoing>
 8004218:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 80c5 	bne.w	80043b2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f040 80c1 	bne.w	80043b2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004238:	f043 0202 	orr.w	r2, r3, #2
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff ff35 	bl	80040b4 <LL_ADC_IsEnabled>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004250:	4860      	ldr	r0, [pc, #384]	; (80043d4 <HAL_ADC_Init+0x284>)
 8004252:	f7ff ff2f 	bl	80040b4 <LL_ADC_IsEnabled>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4619      	mov	r1, r3
 8004262:	485d      	ldr	r0, [pc, #372]	; (80043d8 <HAL_ADC_Init+0x288>)
 8004264:	f7ff fdac 	bl	8003dc0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7e5b      	ldrb	r3, [r3, #25]
 800426c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004272:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004278:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800427e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004286:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d106      	bne.n	80042a4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	3b01      	subs	r3, #1
 800429c:	045b      	lsls	r3, r3, #17
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d009      	beq.n	80042c0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	4b45      	ldr	r3, [pc, #276]	; (80043dc <HAL_ADC_Init+0x28c>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	69b9      	ldr	r1, [r7, #24]
 80042d0:	430b      	orrs	r3, r1
 80042d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff12 	bl	8004102 <LL_ADC_REG_IsConversionOngoing>
 80042de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff1f 	bl	8004128 <LL_ADC_INJ_IsConversionOngoing>
 80042ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d13d      	bne.n	800436e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d13a      	bne.n	800436e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042fc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004304:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004314:	f023 0302 	bic.w	r3, r3, #2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	69b9      	ldr	r1, [r7, #24]
 800431e:	430b      	orrs	r3, r1
 8004320:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004328:	2b01      	cmp	r3, #1
 800432a:	d118      	bne.n	800435e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004336:	f023 0304 	bic.w	r3, r3, #4
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004342:	4311      	orrs	r1, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004348:	4311      	orrs	r1, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800434e:	430a      	orrs	r2, r1
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	611a      	str	r2, [r3, #16]
 800435c:	e007      	b.n	800436e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d10c      	bne.n	8004390 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	f023 010f 	bic.w	r1, r3, #15
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	1e5a      	subs	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
 800438e:	e007      	b.n	80043a0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 020f 	bic.w	r2, r2, #15
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	f023 0303 	bic.w	r3, r3, #3
 80043a8:	f043 0201 	orr.w	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54
 80043b0:	e007      	b.n	80043c2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	f043 0210 	orr.w	r2, r3, #16
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000010 	.word	0x20000010
 80043d0:	053e2d63 	.word	0x053e2d63
 80043d4:	50040000 	.word	0x50040000
 80043d8:	50040300 	.word	0x50040300
 80043dc:	fff0c007 	.word	0xfff0c007

080043e0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fe88 	bl	8004102 <LL_ADC_REG_IsConversionOngoing>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d14f      	bne.n	8004498 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_ADC_Start+0x26>
 8004402:	2302      	movs	r3, #2
 8004404:	e04b      	b.n	800449e <HAL_ADC_Start+0xbe>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fccc 	bl	8004dac <ADC_Enable>
 8004414:	4603      	mov	r3, r0
 8004416:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d137      	bne.n	800448e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800443a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443e:	d106      	bne.n	800444e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	f023 0206 	bic.w	r2, r3, #6
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	659a      	str	r2, [r3, #88]	; 0x58
 800444c:	e002      	b.n	8004454 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	221c      	movs	r2, #28
 800445a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800447a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fe27 	bl	80040da <LL_ADC_REG_StartConversion>
 800448c:	e006      	b.n	800449c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004496:	e001      	b.n	800449c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004498:	2302      	movs	r3, #2
 800449a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fe22 	bl	8004102 <LL_ADC_REG_IsConversionOngoing>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d167      	bne.n	8004594 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_ADC_Start_DMA+0x2a>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e063      	b.n	800459a <HAL_ADC_Start_DMA+0xf2>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fc66 	bl	8004dac <ADC_Enable>
 80044e0:	4603      	mov	r3, r0
 80044e2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d14f      	bne.n	800458a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	f023 0206 	bic.w	r2, r3, #6
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	659a      	str	r2, [r3, #88]	; 0x58
 8004516:	e002      	b.n	800451e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004522:	4a20      	ldr	r2, [pc, #128]	; (80045a4 <HAL_ADC_Start_DMA+0xfc>)
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452a:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <HAL_ADC_Start_DMA+0x100>)
 800452c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <HAL_ADC_Start_DMA+0x104>)
 8004534:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	221c      	movs	r2, #28
 800453c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0210 	orr.w	r2, r2, #16
 8004554:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3340      	adds	r3, #64	; 0x40
 8004570:	4619      	mov	r1, r3
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f000 fecd 	bl	8005314 <HAL_DMA_Start_IT>
 800457a:	4603      	mov	r3, r0
 800457c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fda9 	bl	80040da <LL_ADC_REG_StartConversion>
 8004588:	e006      	b.n	8004598 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004592:	e001      	b.n	8004598 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004594:	2302      	movs	r3, #2
 8004596:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	08004eb9 	.word	0x08004eb9
 80045a8:	08004f91 	.word	0x08004f91
 80045ac:	08004fad 	.word	0x08004fad

080045b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b0b6      	sub	sp, #216	; 0xd8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_ADC_ConfigChannel+0x22>
 800460a:	2302      	movs	r3, #2
 800460c:	e3b9      	b.n	8004d82 <HAL_ADC_ConfigChannel+0x796>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fd71 	bl	8004102 <LL_ADC_REG_IsConversionOngoing>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	f040 839e 	bne.w	8004d64 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b05      	cmp	r3, #5
 800462e:	d824      	bhi.n	800467a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	3b02      	subs	r3, #2
 8004636:	2b03      	cmp	r3, #3
 8004638:	d81b      	bhi.n	8004672 <HAL_ADC_ConfigChannel+0x86>
 800463a:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <HAL_ADC_ConfigChannel+0x54>)
 800463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004640:	08004651 	.word	0x08004651
 8004644:	08004659 	.word	0x08004659
 8004648:	08004661 	.word	0x08004661
 800464c:	08004669 	.word	0x08004669
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	220c      	movs	r2, #12
 8004654:	605a      	str	r2, [r3, #4]
          break;
 8004656:	e011      	b.n	800467c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2212      	movs	r2, #18
 800465c:	605a      	str	r2, [r3, #4]
          break;
 800465e:	e00d      	b.n	800467c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2218      	movs	r2, #24
 8004664:	605a      	str	r2, [r3, #4]
          break;
 8004666:	e009      	b.n	800467c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800466e:	605a      	str	r2, [r3, #4]
          break;
 8004670:	e004      	b.n	800467c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2206      	movs	r2, #6
 8004676:	605a      	str	r2, [r3, #4]
          break;
 8004678:	e000      	b.n	800467c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800467a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	f7ff fc35 	bl	8003ef8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fd35 	bl	8004102 <LL_ADC_REG_IsConversionOngoing>
 8004698:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fd41 	bl	8004128 <LL_ADC_INJ_IsConversionOngoing>
 80046a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f040 81a6 	bne.w	8004a00 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f040 81a1 	bne.w	8004a00 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f7ff fc40 	bl	8003f50 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	08db      	lsrs	r3, r3, #3
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d00a      	beq.n	8004708 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6919      	ldr	r1, [r3, #16]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004702:	f7ff fb91 	bl	8003e28 <LL_ADC_SetOffset>
 8004706:	e17b      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fbae 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 8004714:	4603      	mov	r3, r0
 8004716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x148>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fba3 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 800472a:	4603      	mov	r3, r0
 800472c:	0e9b      	lsrs	r3, r3, #26
 800472e:	f003 021f 	and.w	r2, r3, #31
 8004732:	e01e      	b.n	8004772 <HAL_ADC_ConfigChannel+0x186>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fb98 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 8004740:	4603      	mov	r3, r0
 8004742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004756:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800475a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004762:	2320      	movs	r3, #32
 8004764:	e004      	b.n	8004770 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004766:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <HAL_ADC_ConfigChannel+0x19e>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	0e9b      	lsrs	r3, r3, #26
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	e018      	b.n	80047bc <HAL_ADC_ConfigChannel+0x1d0>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800479e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80047a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80047ae:	2320      	movs	r3, #32
 80047b0:	e004      	b.n	80047bc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80047b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047b6:	fab3 f383 	clz	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047bc:	429a      	cmp	r2, r3
 80047be:	d106      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fb67 	bl	8003e9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2101      	movs	r1, #1
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fb4b 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 80047da:	4603      	mov	r3, r0
 80047dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x20e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2101      	movs	r1, #1
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fb40 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 80047f0:	4603      	mov	r3, r0
 80047f2:	0e9b      	lsrs	r3, r3, #26
 80047f4:	f003 021f 	and.w	r2, r3, #31
 80047f8:	e01e      	b.n	8004838 <HAL_ADC_ConfigChannel+0x24c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2101      	movs	r1, #1
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fb35 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 8004806:	4603      	mov	r3, r0
 8004808:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004810:	fa93 f3a3 	rbit	r3, r3
 8004814:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004818:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800481c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004828:	2320      	movs	r3, #32
 800482a:	e004      	b.n	8004836 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800482c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x264>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	e018      	b.n	8004882 <HAL_ADC_ConfigChannel+0x296>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004864:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800486c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004874:	2320      	movs	r3, #32
 8004876:	e004      	b.n	8004882 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800487c:	fab3 f383 	clz	r3, r3
 8004880:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004882:	429a      	cmp	r2, r3
 8004884:	d106      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2200      	movs	r2, #0
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fb04 	bl	8003e9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2102      	movs	r1, #2
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fae8 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x2d4>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2102      	movs	r1, #2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fadd 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 80048b6:	4603      	mov	r3, r0
 80048b8:	0e9b      	lsrs	r3, r3, #26
 80048ba:	f003 021f 	and.w	r2, r3, #31
 80048be:	e01e      	b.n	80048fe <HAL_ADC_ConfigChannel+0x312>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2102      	movs	r1, #2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fad2 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048d6:	fa93 f3a3 	rbit	r3, r3
 80048da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80048de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80048e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80048ee:	2320      	movs	r3, #32
 80048f0:	e004      	b.n	80048fc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80048f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048f6:	fab3 f383 	clz	r3, r3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x32a>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	0e9b      	lsrs	r3, r3, #26
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	e016      	b.n	8004944 <HAL_ADC_ConfigChannel+0x358>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004922:	fa93 f3a3 	rbit	r3, r3
 8004926:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800492a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800492e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004936:	2320      	movs	r3, #32
 8004938:	e004      	b.n	8004944 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800493a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800493e:	fab3 f383 	clz	r3, r3
 8004942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004944:	429a      	cmp	r2, r3
 8004946:	d106      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2200      	movs	r2, #0
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff faa3 	bl	8003e9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2103      	movs	r1, #3
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fa87 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x396>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2103      	movs	r1, #3
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fa7c 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 8004978:	4603      	mov	r3, r0
 800497a:	0e9b      	lsrs	r3, r3, #26
 800497c:	f003 021f 	and.w	r2, r3, #31
 8004980:	e017      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x3c6>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2103      	movs	r1, #3
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff fa71 	bl	8003e70 <LL_ADC_GetOffsetChannel>
 800498e:	4603      	mov	r3, r0
 8004990:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800499a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800499c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800499e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80049a4:	2320      	movs	r3, #32
 80049a6:	e003      	b.n	80049b0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80049a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049aa:	fab3 f383 	clz	r3, r3
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d105      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x3de>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	0e9b      	lsrs	r3, r3, #26
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	e011      	b.n	80049ee <HAL_ADC_ConfigChannel+0x402>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80049d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80049dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80049e2:	2320      	movs	r3, #32
 80049e4:	e003      	b.n	80049ee <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80049e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d106      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	2103      	movs	r1, #3
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fa4e 	bl	8003e9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fb55 	bl	80040b4 <LL_ADC_IsEnabled>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 813f 	bne.w	8004c90 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f7ff fac2 	bl	8003fa8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a8e      	ldr	r2, [pc, #568]	; (8004c64 <HAL_ADC_ConfigChannel+0x678>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	f040 8130 	bne.w	8004c90 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x46c>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	0e9b      	lsrs	r3, r3, #26
 8004a46:	3301      	adds	r3, #1
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2b09      	cmp	r3, #9
 8004a4e:	bf94      	ite	ls
 8004a50:	2301      	movls	r3, #1
 8004a52:	2300      	movhi	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e019      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x4a0>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004a70:	2320      	movs	r3, #32
 8004a72:	e003      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a76:	fab3 f383 	clz	r3, r3
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	2b09      	cmp	r3, #9
 8004a84:	bf94      	ite	ls
 8004a86:	2301      	movls	r3, #1
 8004a88:	2300      	movhi	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d079      	beq.n	8004b84 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d107      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x4c0>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0e9b      	lsrs	r3, r3, #26
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	069b      	lsls	r3, r3, #26
 8004aa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aaa:	e015      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x4ec>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004abc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	e003      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aca:	fab3 f383 	clz	r3, r3
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	069b      	lsls	r3, r3, #26
 8004ad4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x50c>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	0e9b      	lsrs	r3, r3, #26
 8004aea:	3301      	adds	r3, #1
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2101      	movs	r1, #1
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	e017      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x53c>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b00:	fa93 f3a3 	rbit	r3, r3
 8004b04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004b10:	2320      	movs	r3, #32
 8004b12:	e003      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f303 	lsl.w	r3, r1, r3
 8004b28:	ea42 0103 	orr.w	r1, r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x562>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	0e9b      	lsrs	r3, r3, #26
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f003 021f 	and.w	r2, r3, #31
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	051b      	lsls	r3, r3, #20
 8004b4c:	e018      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x594>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004b66:	2320      	movs	r3, #32
 8004b68:	e003      	b.n	8004b72 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b6c:	fab3 f383 	clz	r3, r3
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f003 021f 	and.w	r2, r3, #31
 8004b78:	4613      	mov	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b80:	430b      	orrs	r3, r1
 8004b82:	e080      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x5b4>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0e9b      	lsrs	r3, r3, #26
 8004b96:	3301      	adds	r3, #1
 8004b98:	069b      	lsls	r3, r3, #26
 8004b9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b9e:	e015      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x5e0>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004bb8:	2320      	movs	r3, #32
 8004bba:	e003      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	fab3 f383 	clz	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	069b      	lsls	r3, r3, #26
 8004bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x600>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	0e9b      	lsrs	r3, r3, #26
 8004bde:	3301      	adds	r3, #1
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	e017      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x630>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	61fb      	str	r3, [r7, #28]
  return result;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004c04:	2320      	movs	r3, #32
 8004c06:	e003      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	3301      	adds	r3, #1
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2101      	movs	r1, #1
 8004c18:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1c:	ea42 0103 	orr.w	r1, r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10d      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x65c>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	3301      	adds	r3, #1
 8004c34:	f003 021f 	and.w	r2, r3, #31
 8004c38:	4613      	mov	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3b1e      	subs	r3, #30
 8004c40:	051b      	lsls	r3, r3, #20
 8004c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c46:	e01d      	b.n	8004c84 <HAL_ADC_ConfigChannel+0x698>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	fa93 f3a3 	rbit	r3, r3
 8004c54:	613b      	str	r3, [r7, #16]
  return result;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d103      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004c60:	2320      	movs	r3, #32
 8004c62:	e005      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x684>
 8004c64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	3301      	adds	r3, #1
 8004c72:	f003 021f 	and.w	r2, r3, #31
 8004c76:	4613      	mov	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3b1e      	subs	r3, #30
 8004c7e:	051b      	lsls	r3, r3, #20
 8004c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c84:	430b      	orrs	r3, r1
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	6892      	ldr	r2, [r2, #8]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f7ff f960 	bl	8003f50 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4b3d      	ldr	r3, [pc, #244]	; (8004d8c <HAL_ADC_ConfigChannel+0x7a0>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d06c      	beq.n	8004d76 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c9c:	483c      	ldr	r0, [pc, #240]	; (8004d90 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c9e:	f7ff f8b5 	bl	8003e0c <LL_ADC_GetCommonPathInternalCh>
 8004ca2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a3a      	ldr	r2, [pc, #232]	; (8004d94 <HAL_ADC_ConfigChannel+0x7a8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d127      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d121      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a35      	ldr	r2, [pc, #212]	; (8004d98 <HAL_ADC_ConfigChannel+0x7ac>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d157      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cce:	4619      	mov	r1, r3
 8004cd0:	482f      	ldr	r0, [pc, #188]	; (8004d90 <HAL_ADC_ConfigChannel+0x7a4>)
 8004cd2:	f7ff f888 	bl	8003de6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cd6:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_ADC_ConfigChannel+0x7b0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	099b      	lsrs	r3, r3, #6
 8004cdc:	4a30      	ldr	r2, [pc, #192]	; (8004da0 <HAL_ADC_ConfigChannel+0x7b4>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	099b      	lsrs	r3, r3, #6
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004cf0:	e002      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f9      	bne.n	8004cf2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cfe:	e03a      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d113      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x746>
 8004d0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10d      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <HAL_ADC_ConfigChannel+0x7ac>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d12a      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4819      	ldr	r0, [pc, #100]	; (8004d90 <HAL_ADC_ConfigChannel+0x7a4>)
 8004d2c:	f7ff f85b 	bl	8003de6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d30:	e021      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a1c      	ldr	r2, [pc, #112]	; (8004da8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d11c      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d116      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <HAL_ADC_ConfigChannel+0x7ac>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d111      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	480c      	ldr	r0, [pc, #48]	; (8004d90 <HAL_ADC_ConfigChannel+0x7a4>)
 8004d5e:	f7ff f842 	bl	8003de6 <LL_ADC_SetCommonPathInternalCh>
 8004d62:	e008      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	f043 0220 	orr.w	r2, r3, #32
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	37d8      	adds	r7, #216	; 0xd8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	80080000 	.word	0x80080000
 8004d90:	50040300 	.word	0x50040300
 8004d94:	c7520000 	.word	0xc7520000
 8004d98:	50040000 	.word	0x50040000
 8004d9c:	20000010 	.word	0x20000010
 8004da0:	053e2d63 	.word	0x053e2d63
 8004da4:	cb840000 	.word	0xcb840000
 8004da8:	80000001 	.word	0x80000001

08004dac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff f979 	bl	80040b4 <LL_ADC_IsEnabled>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d169      	bne.n	8004e9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <ADC_Enable+0xfc>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00d      	beq.n	8004df2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	f043 0210 	orr.w	r2, r3, #16
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	f043 0201 	orr.w	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e055      	b.n	8004e9e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff f948 	bl	800408c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004dfc:	482b      	ldr	r0, [pc, #172]	; (8004eac <ADC_Enable+0x100>)
 8004dfe:	f7ff f805 	bl	8003e0c <LL_ADC_GetCommonPathInternalCh>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d013      	beq.n	8004e34 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e0c:	4b28      	ldr	r3, [pc, #160]	; (8004eb0 <ADC_Enable+0x104>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	099b      	lsrs	r3, r3, #6
 8004e12:	4a28      	ldr	r2, [pc, #160]	; (8004eb4 <ADC_Enable+0x108>)
 8004e14:	fba2 2303 	umull	r2, r3, r2, r3
 8004e18:	099b      	lsrs	r3, r3, #6
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004e26:	e002      	b.n	8004e2e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f9      	bne.n	8004e28 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e34:	f7fe ffb8 	bl	8003da8 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e3a:	e028      	b.n	8004e8e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff f937 	bl	80040b4 <LL_ADC_IsEnabled>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff f91b 	bl	800408c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e56:	f7fe ffa7 	bl	8003da8 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d914      	bls.n	8004e8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d00d      	beq.n	8004e8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	f043 0210 	orr.w	r2, r3, #16
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	f043 0201 	orr.w	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e007      	b.n	8004e9e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d1cf      	bne.n	8004e3c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	8000003f 	.word	0x8000003f
 8004eac:	50040300 	.word	0x50040300
 8004eb0:	20000010 	.word	0x20000010
 8004eb4:	053e2d63 	.word	0x053e2d63

08004eb8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d14b      	bne.n	8004f6a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d021      	beq.n	8004f30 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe ffee 	bl	8003ed2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d032      	beq.n	8004f62 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d12b      	bne.n	8004f62 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d11f      	bne.n	8004f62 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	f043 0201 	orr.w	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	655a      	str	r2, [r3, #84]	; 0x54
 8004f2e:	e018      	b.n	8004f62 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d111      	bne.n	8004f62 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d105      	bne.n	8004f62 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f043 0201 	orr.w	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7ff fb24 	bl	80045b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f68:	e00e      	b.n	8004f88 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7ff fb2e 	bl	80045d8 <HAL_ADC_ErrorCallback>
}
 8004f7c:	e004      	b.n	8004f88 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	4798      	blx	r3
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f7ff fb10 	bl	80045c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff fb00 	bl	80045d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <__NVIC_SetPriorityGrouping+0x44>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800500c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005012:	4a04      	ldr	r2, [pc, #16]	; (8005024 <__NVIC_SetPriorityGrouping+0x44>)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	60d3      	str	r3, [r2, #12]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	e000ed00 	.word	0xe000ed00

08005028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <__NVIC_GetPriorityGrouping+0x18>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	0a1b      	lsrs	r3, r3, #8
 8005032:	f003 0307 	and.w	r3, r3, #7
}
 8005036:	4618      	mov	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	e000ed00 	.word	0xe000ed00

08005044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800504e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005052:	2b00      	cmp	r3, #0
 8005054:	db0b      	blt.n	800506e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	f003 021f 	and.w	r2, r3, #31
 800505c:	4907      	ldr	r1, [pc, #28]	; (800507c <__NVIC_EnableIRQ+0x38>)
 800505e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2001      	movs	r0, #1
 8005066:	fa00 f202 	lsl.w	r2, r0, r2
 800506a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	e000e100 	.word	0xe000e100

08005080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	6039      	str	r1, [r7, #0]
 800508a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800508c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005090:	2b00      	cmp	r3, #0
 8005092:	db0a      	blt.n	80050aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	490c      	ldr	r1, [pc, #48]	; (80050cc <__NVIC_SetPriority+0x4c>)
 800509a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509e:	0112      	lsls	r2, r2, #4
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	440b      	add	r3, r1
 80050a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050a8:	e00a      	b.n	80050c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	4908      	ldr	r1, [pc, #32]	; (80050d0 <__NVIC_SetPriority+0x50>)
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3b04      	subs	r3, #4
 80050b8:	0112      	lsls	r2, r2, #4
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	440b      	add	r3, r1
 80050be:	761a      	strb	r2, [r3, #24]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	e000e100 	.word	0xe000e100
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f1c3 0307 	rsb	r3, r3, #7
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	bf28      	it	cs
 80050f2:	2304      	movcs	r3, #4
 80050f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3304      	adds	r3, #4
 80050fa:	2b06      	cmp	r3, #6
 80050fc:	d902      	bls.n	8005104 <NVIC_EncodePriority+0x30>
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	3b03      	subs	r3, #3
 8005102:	e000      	b.n	8005106 <NVIC_EncodePriority+0x32>
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005108:	f04f 32ff 	mov.w	r2, #4294967295
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43da      	mvns	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	401a      	ands	r2, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800511c:	f04f 31ff 	mov.w	r1, #4294967295
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	fa01 f303 	lsl.w	r3, r1, r3
 8005126:	43d9      	mvns	r1, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800512c:	4313      	orrs	r3, r2
         );
}
 800512e:	4618      	mov	r0, r3
 8005130:	3724      	adds	r7, #36	; 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ff4c 	bl	8004fe0 <__NVIC_SetPriorityGrouping>
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005162:	f7ff ff61 	bl	8005028 <__NVIC_GetPriorityGrouping>
 8005166:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	6978      	ldr	r0, [r7, #20]
 800516e:	f7ff ffb1 	bl	80050d4 <NVIC_EncodePriority>
 8005172:	4602      	mov	r2, r0
 8005174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ff80 	bl	8005080 <__NVIC_SetPriority>
}
 8005180:	bf00      	nop
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff ff54 	bl	8005044 <__NVIC_EnableIRQ>
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e098      	b.n	80052e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b4d      	ldr	r3, [pc, #308]	; (80052f4 <HAL_DMA_Init+0x150>)
 80051be:	429a      	cmp	r2, r3
 80051c0:	d80f      	bhi.n	80051e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	4b4b      	ldr	r3, [pc, #300]	; (80052f8 <HAL_DMA_Init+0x154>)
 80051ca:	4413      	add	r3, r2
 80051cc:	4a4b      	ldr	r2, [pc, #300]	; (80052fc <HAL_DMA_Init+0x158>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	009a      	lsls	r2, r3, #2
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a48      	ldr	r2, [pc, #288]	; (8005300 <HAL_DMA_Init+0x15c>)
 80051de:	641a      	str	r2, [r3, #64]	; 0x40
 80051e0:	e00e      	b.n	8005200 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	4b46      	ldr	r3, [pc, #280]	; (8005304 <HAL_DMA_Init+0x160>)
 80051ea:	4413      	add	r3, r2
 80051ec:	4a43      	ldr	r2, [pc, #268]	; (80052fc <HAL_DMA_Init+0x158>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	091b      	lsrs	r3, r3, #4
 80051f4:	009a      	lsls	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a42      	ldr	r2, [pc, #264]	; (8005308 <HAL_DMA_Init+0x164>)
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800523c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800525a:	d039      	beq.n	80052d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	4a27      	ldr	r2, [pc, #156]	; (8005300 <HAL_DMA_Init+0x15c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d11a      	bne.n	800529c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005266:	4b29      	ldr	r3, [pc, #164]	; (800530c <HAL_DMA_Init+0x168>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	f003 031c 	and.w	r3, r3, #28
 8005272:	210f      	movs	r1, #15
 8005274:	fa01 f303 	lsl.w	r3, r1, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	4924      	ldr	r1, [pc, #144]	; (800530c <HAL_DMA_Init+0x168>)
 800527c:	4013      	ands	r3, r2
 800527e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005280:	4b22      	ldr	r3, [pc, #136]	; (800530c <HAL_DMA_Init+0x168>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6859      	ldr	r1, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528c:	f003 031c 	and.w	r3, r3, #28
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	491d      	ldr	r1, [pc, #116]	; (800530c <HAL_DMA_Init+0x168>)
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]
 800529a:	e019      	b.n	80052d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800529c:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <HAL_DMA_Init+0x16c>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a4:	f003 031c 	and.w	r3, r3, #28
 80052a8:	210f      	movs	r1, #15
 80052aa:	fa01 f303 	lsl.w	r3, r1, r3
 80052ae:	43db      	mvns	r3, r3
 80052b0:	4917      	ldr	r1, [pc, #92]	; (8005310 <HAL_DMA_Init+0x16c>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80052b6:	4b16      	ldr	r3, [pc, #88]	; (8005310 <HAL_DMA_Init+0x16c>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6859      	ldr	r1, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f003 031c 	and.w	r3, r3, #28
 80052c6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ca:	4911      	ldr	r1, [pc, #68]	; (8005310 <HAL_DMA_Init+0x16c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	40020407 	.word	0x40020407
 80052f8:	bffdfff8 	.word	0xbffdfff8
 80052fc:	cccccccd 	.word	0xcccccccd
 8005300:	40020000 	.word	0x40020000
 8005304:	bffdfbf8 	.word	0xbffdfbf8
 8005308:	40020400 	.word	0x40020400
 800530c:	400200a8 	.word	0x400200a8
 8005310:	400204a8 	.word	0x400204a8

08005314 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_DMA_Start_IT+0x20>
 8005330:	2302      	movs	r3, #2
 8005332:	e04b      	b.n	80053cc <HAL_DMA_Start_IT+0xb8>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d13a      	bne.n	80053be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f95f 	bl	8005630 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 020e 	orr.w	r2, r2, #14
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e00f      	b.n	80053ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0204 	bic.w	r2, r2, #4
 800539a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 020a 	orr.w	r2, r2, #10
 80053aa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e005      	b.n	80053ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053c6:	2302      	movs	r3, #2
 80053c8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d008      	beq.n	80053fe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2204      	movs	r2, #4
 80053f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e022      	b.n	8005444 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 020e 	bic.w	r2, r2, #14
 800540c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f003 021c 	and.w	r2, r3, #28
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	2101      	movs	r1, #1
 800542c:	fa01 f202 	lsl.w	r2, r1, r2
 8005430:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d005      	beq.n	8005474 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2204      	movs	r2, #4
 800546c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
 8005472:	e029      	b.n	80054c8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 020e 	bic.w	r2, r2, #14
 8005482:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0201 	bic.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	f003 021c 	and.w	r2, r3, #28
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	2101      	movs	r1, #1
 80054a2:	fa01 f202 	lsl.w	r2, r1, r2
 80054a6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
    }
  }
  return status;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ee:	f003 031c 	and.w	r3, r3, #28
 80054f2:	2204      	movs	r2, #4
 80054f4:	409a      	lsls	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d026      	beq.n	800554c <HAL_DMA_IRQHandler+0x7a>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d021      	beq.n	800554c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b00      	cmp	r3, #0
 8005514:	d107      	bne.n	8005526 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0204 	bic.w	r2, r2, #4
 8005524:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	f003 021c 	and.w	r2, r3, #28
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2104      	movs	r1, #4
 8005534:	fa01 f202 	lsl.w	r2, r1, r2
 8005538:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	2b00      	cmp	r3, #0
 8005540:	d071      	beq.n	8005626 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800554a:	e06c      	b.n	8005626 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	f003 031c 	and.w	r3, r3, #28
 8005554:	2202      	movs	r2, #2
 8005556:	409a      	lsls	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d02e      	beq.n	80055be <HAL_DMA_IRQHandler+0xec>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d029      	beq.n	80055be <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10b      	bne.n	8005590 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 020a 	bic.w	r2, r2, #10
 8005586:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005594:	f003 021c 	and.w	r2, r3, #28
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	2102      	movs	r1, #2
 800559e:	fa01 f202 	lsl.w	r2, r1, r2
 80055a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d038      	beq.n	8005626 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80055bc:	e033      	b.n	8005626 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	f003 031c 	and.w	r3, r3, #28
 80055c6:	2208      	movs	r2, #8
 80055c8:	409a      	lsls	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d02a      	beq.n	8005628 <HAL_DMA_IRQHandler+0x156>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d025      	beq.n	8005628 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 020e 	bic.w	r2, r2, #14
 80055ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f0:	f003 021c 	and.w	r2, r3, #28
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	2101      	movs	r1, #1
 80055fa:	fa01 f202 	lsl.w	r2, r1, r2
 80055fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	2b00      	cmp	r3, #0
 800561c:	d004      	beq.n	8005628 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005626:	bf00      	nop
 8005628:	bf00      	nop
}
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005642:	f003 021c 	and.w	r2, r3, #28
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2101      	movs	r1, #1
 800564c:	fa01 f202 	lsl.w	r2, r1, r2
 8005650:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b10      	cmp	r3, #16
 8005660:	d108      	bne.n	8005674 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005672:	e007      	b.n	8005684 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80056a2:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <HAL_FLASH_Program+0xd0>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_FLASH_Program+0x1e>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e053      	b.n	8005756 <HAL_FLASH_Program+0xc6>
 80056ae:	4b2c      	ldr	r3, [pc, #176]	; (8005760 <HAL_FLASH_Program+0xd0>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80056b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80056b8:	f000 f894 	bl	80057e4 <FLASH_WaitForLastOperation>
 80056bc:	4603      	mov	r3, r0
 80056be:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d143      	bne.n	800574e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80056c6:	4b26      	ldr	r3, [pc, #152]	; (8005760 <HAL_FLASH_Program+0xd0>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80056cc:	4b25      	ldr	r3, [pc, #148]	; (8005764 <HAL_FLASH_Program+0xd4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d009      	beq.n	80056ec <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80056d8:	4b22      	ldr	r3, [pc, #136]	; (8005764 <HAL_FLASH_Program+0xd4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a21      	ldr	r2, [pc, #132]	; (8005764 <HAL_FLASH_Program+0xd4>)
 80056de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056e2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80056e4:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <HAL_FLASH_Program+0xd0>)
 80056e6:	2202      	movs	r2, #2
 80056e8:	771a      	strb	r2, [r3, #28]
 80056ea:	e002      	b.n	80056f2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80056ec:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <HAL_FLASH_Program+0xd0>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80056f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056fc:	68b8      	ldr	r0, [r7, #8]
 80056fe:	f000 f8c9 	bl	8005894 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005702:	2301      	movs	r3, #1
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	e010      	b.n	800572a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d002      	beq.n	8005714 <HAL_FLASH_Program+0x84>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d10a      	bne.n	800572a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	4619      	mov	r1, r3
 8005718:	68b8      	ldr	r0, [r7, #8]
 800571a:	f000 f8e1 	bl	80058e0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d102      	bne.n	800572a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005724:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005728:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800572a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800572e:	f000 f859 	bl	80057e4 <FLASH_WaitForLastOperation>
 8005732:	4603      	mov	r3, r0
 8005734:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d006      	beq.n	800574a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800573c:	4b09      	ldr	r3, [pc, #36]	; (8005764 <HAL_FLASH_Program+0xd4>)
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	43db      	mvns	r3, r3
 8005744:	4907      	ldr	r1, [pc, #28]	; (8005764 <HAL_FLASH_Program+0xd4>)
 8005746:	4013      	ands	r3, r2
 8005748:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800574a:	f000 f9db 	bl	8005b04 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800574e:	4b04      	ldr	r3, [pc, #16]	; (8005760 <HAL_FLASH_Program+0xd0>)
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]

  return status;
 8005754:	7dfb      	ldrb	r3, [r7, #23]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2000001c 	.word	0x2000001c
 8005764:	40022000 	.word	0x40022000

08005768 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005772:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <HAL_FLASH_Unlock+0x38>)
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	da0b      	bge.n	8005792 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_FLASH_Unlock+0x38>)
 800577c:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <HAL_FLASH_Unlock+0x3c>)
 800577e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005780:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <HAL_FLASH_Unlock+0x38>)
 8005782:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <HAL_FLASH_Unlock+0x40>)
 8005784:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <HAL_FLASH_Unlock+0x38>)
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	da01      	bge.n	8005792 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005792:	79fb      	ldrb	r3, [r7, #7]
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40022000 	.word	0x40022000
 80057a4:	45670123 	.word	0x45670123
 80057a8:	cdef89ab 	.word	0xcdef89ab

080057ac <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <HAL_FLASH_Lock+0x1c>)
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	4a04      	ldr	r2, [pc, #16]	; (80057c8 <HAL_FLASH_Lock+0x1c>)
 80057b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057ba:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40022000 	.word	0x40022000

080057cc <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80057d0:	4b03      	ldr	r3, [pc, #12]	; (80057e0 <HAL_FLASH_GetError+0x14>)
 80057d2:	685b      	ldr	r3, [r3, #4]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	2000001c 	.word	0x2000001c

080057e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80057ec:	f7fe fadc 	bl	8003da8 <HAL_GetTick>
 80057f0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80057f2:	e00d      	b.n	8005810 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d009      	beq.n	8005810 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80057fc:	f7fe fad4 	bl	8003da8 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	429a      	cmp	r2, r3
 800580a:	d801      	bhi.n	8005810 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e036      	b.n	800587e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005810:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <FLASH_WaitForLastOperation+0xa4>)
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1eb      	bne.n	80057f4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800581c:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <FLASH_WaitForLastOperation+0xa4>)
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	4b1a      	ldr	r3, [pc, #104]	; (800588c <FLASH_WaitForLastOperation+0xa8>)
 8005822:	4013      	ands	r3, r2
 8005824:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01e      	beq.n	800586a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800582c:	4b18      	ldr	r3, [pc, #96]	; (8005890 <FLASH_WaitForLastOperation+0xac>)
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4313      	orrs	r3, r2
 8005834:	4a16      	ldr	r2, [pc, #88]	; (8005890 <FLASH_WaitForLastOperation+0xac>)
 8005836:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <FLASH_WaitForLastOperation+0x6e>
 8005842:	4b11      	ldr	r3, [pc, #68]	; (8005888 <FLASH_WaitForLastOperation+0xa4>)
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800584c:	490e      	ldr	r1, [pc, #56]	; (8005888 <FLASH_WaitForLastOperation+0xa4>)
 800584e:	4313      	orrs	r3, r2
 8005850:	618b      	str	r3, [r1, #24]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <FLASH_WaitForLastOperation+0x82>
 800585c:	4a0a      	ldr	r2, [pc, #40]	; (8005888 <FLASH_WaitForLastOperation+0xa4>)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005864:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e009      	b.n	800587e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <FLASH_WaitForLastOperation+0xa4>)
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005876:	4b04      	ldr	r3, [pc, #16]	; (8005888 <FLASH_WaitForLastOperation+0xa4>)
 8005878:	2201      	movs	r2, #1
 800587a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40022000 	.word	0x40022000
 800588c:	0002c3fa 	.word	0x0002c3fa
 8005890:	2000001c 	.word	0x2000001c

08005894 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80058a0:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <FLASH_Program_DoubleWord+0x48>)
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	4a0d      	ldr	r2, [pc, #52]	; (80058dc <FLASH_Program_DoubleWord+0x48>)
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80058b2:	f3bf 8f6f 	isb	sy
}
 80058b6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80058b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	000a      	movs	r2, r1
 80058c6:	2300      	movs	r3, #0
 80058c8:	68f9      	ldr	r1, [r7, #12]
 80058ca:	3104      	adds	r1, #4
 80058cc:	4613      	mov	r3, r2
 80058ce:	600b      	str	r3, [r1, #0]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	40022000 	.word	0x40022000

080058e0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b089      	sub	sp, #36	; 0x24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80058ea:	2340      	movs	r3, #64	; 0x40
 80058ec:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <FLASH_Program_Fast+0x68>)
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	4a13      	ldr	r2, [pc, #76]	; (8005948 <FLASH_Program_Fast+0x68>)
 80058fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005900:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005902:	f3ef 8310 	mrs	r3, PRIMASK
 8005906:	60fb      	str	r3, [r7, #12]
  return(result);
 8005908:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800590a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800590c:	b672      	cpsid	i
}
 800590e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	3304      	adds	r3, #4
 800591c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	3304      	adds	r3, #4
 8005922:	617b      	str	r3, [r7, #20]
    row_index--;
 8005924:	7ffb      	ldrb	r3, [r7, #31]
 8005926:	3b01      	subs	r3, #1
 8005928:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800592a:	7ffb      	ldrb	r3, [r7, #31]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1ef      	bne.n	8005910 <FLASH_Program_Fast+0x30>
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f383 8810 	msr	PRIMASK, r3
}
 800593a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800593c:	bf00      	nop
 800593e:	3724      	adds	r7, #36	; 0x24
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	40022000 	.word	0x40022000

0800594c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005956:	4b48      	ldr	r3, [pc, #288]	; (8005a78 <HAL_FLASHEx_Erase+0x12c>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_FLASHEx_Erase+0x16>
 800595e:	2302      	movs	r3, #2
 8005960:	e085      	b.n	8005a6e <HAL_FLASHEx_Erase+0x122>
 8005962:	4b45      	ldr	r3, [pc, #276]	; (8005a78 <HAL_FLASHEx_Erase+0x12c>)
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005968:	f24c 3050 	movw	r0, #50000	; 0xc350
 800596c:	f7ff ff3a 	bl	80057e4 <FLASH_WaitForLastOperation>
 8005970:	4603      	mov	r3, r0
 8005972:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d175      	bne.n	8005a66 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800597a:	4b3f      	ldr	r3, [pc, #252]	; (8005a78 <HAL_FLASHEx_Erase+0x12c>)
 800597c:	2200      	movs	r2, #0
 800597e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005980:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005988:	2b00      	cmp	r3, #0
 800598a:	d013      	beq.n	80059b4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800598c:	4b3b      	ldr	r3, [pc, #236]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005998:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a37      	ldr	r2, [pc, #220]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 800599e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80059a4:	4b34      	ldr	r3, [pc, #208]	; (8005a78 <HAL_FLASHEx_Erase+0x12c>)
 80059a6:	2203      	movs	r2, #3
 80059a8:	771a      	strb	r2, [r3, #28]
 80059aa:	e016      	b.n	80059da <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80059ac:	4b32      	ldr	r3, [pc, #200]	; (8005a78 <HAL_FLASHEx_Erase+0x12c>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	771a      	strb	r2, [r3, #28]
 80059b2:	e012      	b.n	80059da <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80059b4:	4b31      	ldr	r3, [pc, #196]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80059c0:	4b2e      	ldr	r3, [pc, #184]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a2d      	ldr	r2, [pc, #180]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 80059c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ca:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80059cc:	4b2a      	ldr	r3, [pc, #168]	; (8005a78 <HAL_FLASHEx_Erase+0x12c>)
 80059ce:	2202      	movs	r2, #2
 80059d0:	771a      	strb	r2, [r3, #28]
 80059d2:	e002      	b.n	80059da <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80059d4:	4b28      	ldr	r3, [pc, #160]	; (8005a78 <HAL_FLASHEx_Erase+0x12c>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d111      	bne.n	8005a06 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f84a 	bl	8005a80 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059f0:	f7ff fef8 	bl	80057e4 <FLASH_WaitForLastOperation>
 80059f4:	4603      	mov	r3, r0
 80059f6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80059f8:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 80059fe:	f023 0304 	bic.w	r3, r3, #4
 8005a02:	6153      	str	r3, [r2, #20]
 8005a04:	e02d      	b.n	8005a62 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	e01d      	b.n	8005a52 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	68b8      	ldr	r0, [r7, #8]
 8005a1e:	f000 f84d 	bl	8005abc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a26:	f7ff fedd 	bl	80057e4 <FLASH_WaitForLastOperation>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	4a12      	ldr	r2, [pc, #72]	; (8005a7c <HAL_FLASHEx_Erase+0x130>)
 8005a34:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005a38:	f023 0302 	bic.w	r3, r3, #2
 8005a3c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	601a      	str	r2, [r3, #0]
          break;
 8005a4a:	e00a      	b.n	8005a62 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d3d9      	bcc.n	8005a16 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a62:	f000 f84f 	bl	8005b04 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a66:	4b04      	ldr	r3, [pc, #16]	; (8005a78 <HAL_FLASHEx_Erase+0x12c>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]

  return status;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	2000001c 	.word	0x2000001c
 8005a7c:	40022000 	.word	0x40022000

08005a80 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005a92:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <FLASH_MassErase+0x38>)
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <FLASH_MassErase+0x38>)
 8005a98:	f043 0304 	orr.w	r3, r3, #4
 8005a9c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <FLASH_MassErase+0x38>)
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4a05      	ldr	r2, [pc, #20]	; (8005ab8 <FLASH_MassErase+0x38>)
 8005aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa8:	6153      	str	r3, [r2, #20]
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40022000 	.word	0x40022000

08005abc <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005ac6:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <FLASH_PageErase+0x44>)
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005ad6:	490a      	ldr	r1, [pc, #40]	; (8005b00 <FLASH_PageErase+0x44>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <FLASH_PageErase+0x44>)
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	4a07      	ldr	r2, [pc, #28]	; (8005b00 <FLASH_PageErase+0x44>)
 8005ae2:	f043 0302 	orr.w	r3, r3, #2
 8005ae6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <FLASH_PageErase+0x44>)
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <FLASH_PageErase+0x44>)
 8005aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af2:	6153      	str	r3, [r2, #20]
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40022000 	.word	0x40022000

08005b04 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005b0a:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <FLASH_FlushCaches+0x8c>)
 8005b0c:	7f1b      	ldrb	r3, [r3, #28]
 8005b0e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d002      	beq.n	8005b1c <FLASH_FlushCaches+0x18>
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d117      	bne.n	8005b4c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b1c:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1c      	ldr	r2, [pc, #112]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b26:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b28:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b3e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b40:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a13      	ldr	r2, [pc, #76]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b4a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d002      	beq.n	8005b58 <FLASH_FlushCaches+0x54>
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d111      	bne.n	8005b7c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005b58:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a0d      	ldr	r2, [pc, #52]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a0a      	ldr	r2, [pc, #40]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b6e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b70:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a07      	ldr	r2, [pc, #28]	; (8005b94 <FLASH_FlushCaches+0x90>)
 8005b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b7a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005b7c:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <FLASH_FlushCaches+0x8c>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	771a      	strb	r2, [r3, #28]
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	2000001c 	.word	0x2000001c
 8005b94:	40022000 	.word	0x40022000

08005b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ba6:	e154      	b.n	8005e52 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	2101      	movs	r1, #1
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8146 	beq.w	8005e4c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d005      	beq.n	8005bd8 <HAL_GPIO_Init+0x40>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d130      	bne.n	8005c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	2203      	movs	r2, #3
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4013      	ands	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c0e:	2201      	movs	r2, #1
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	f003 0201 	and.w	r2, r3, #1
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d017      	beq.n	8005c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	2203      	movs	r2, #3
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d123      	bne.n	8005cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	08da      	lsrs	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3208      	adds	r2, #8
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	220f      	movs	r2, #15
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	08da      	lsrs	r2, r3, #3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3208      	adds	r2, #8
 8005cc4:	6939      	ldr	r1, [r7, #16]
 8005cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f003 0203 	and.w	r2, r3, #3
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80a0 	beq.w	8005e4c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0c:	4b58      	ldr	r3, [pc, #352]	; (8005e70 <HAL_GPIO_Init+0x2d8>)
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d10:	4a57      	ldr	r2, [pc, #348]	; (8005e70 <HAL_GPIO_Init+0x2d8>)
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	6613      	str	r3, [r2, #96]	; 0x60
 8005d18:	4b55      	ldr	r3, [pc, #340]	; (8005e70 <HAL_GPIO_Init+0x2d8>)
 8005d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005d24:	4a53      	ldr	r2, [pc, #332]	; (8005e74 <HAL_GPIO_Init+0x2dc>)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	089b      	lsrs	r3, r3, #2
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	220f      	movs	r2, #15
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	43db      	mvns	r3, r3
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4013      	ands	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d4e:	d019      	beq.n	8005d84 <HAL_GPIO_Init+0x1ec>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a49      	ldr	r2, [pc, #292]	; (8005e78 <HAL_GPIO_Init+0x2e0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d013      	beq.n	8005d80 <HAL_GPIO_Init+0x1e8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a48      	ldr	r2, [pc, #288]	; (8005e7c <HAL_GPIO_Init+0x2e4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00d      	beq.n	8005d7c <HAL_GPIO_Init+0x1e4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a47      	ldr	r2, [pc, #284]	; (8005e80 <HAL_GPIO_Init+0x2e8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d007      	beq.n	8005d78 <HAL_GPIO_Init+0x1e0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a46      	ldr	r2, [pc, #280]	; (8005e84 <HAL_GPIO_Init+0x2ec>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d101      	bne.n	8005d74 <HAL_GPIO_Init+0x1dc>
 8005d70:	2304      	movs	r3, #4
 8005d72:	e008      	b.n	8005d86 <HAL_GPIO_Init+0x1ee>
 8005d74:	2307      	movs	r3, #7
 8005d76:	e006      	b.n	8005d86 <HAL_GPIO_Init+0x1ee>
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e004      	b.n	8005d86 <HAL_GPIO_Init+0x1ee>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e002      	b.n	8005d86 <HAL_GPIO_Init+0x1ee>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <HAL_GPIO_Init+0x1ee>
 8005d84:	2300      	movs	r3, #0
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	f002 0203 	and.w	r2, r2, #3
 8005d8c:	0092      	lsls	r2, r2, #2
 8005d8e:	4093      	lsls	r3, r2
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d96:	4937      	ldr	r1, [pc, #220]	; (8005e74 <HAL_GPIO_Init+0x2dc>)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	089b      	lsrs	r3, r3, #2
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005da4:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <HAL_GPIO_Init+0x2f0>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4013      	ands	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005dc8:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <HAL_GPIO_Init+0x2f0>)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005dce:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <HAL_GPIO_Init+0x2f0>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005df2:	4a25      	ldr	r2, [pc, #148]	; (8005e88 <HAL_GPIO_Init+0x2f0>)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005df8:	4b23      	ldr	r3, [pc, #140]	; (8005e88 <HAL_GPIO_Init+0x2f0>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	43db      	mvns	r3, r3
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4013      	ands	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e1c:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_GPIO_Init+0x2f0>)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005e22:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <HAL_GPIO_Init+0x2f0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	43db      	mvns	r3, r3
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e46:	4a10      	ldr	r2, [pc, #64]	; (8005e88 <HAL_GPIO_Init+0x2f0>)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f47f aea3 	bne.w	8005ba8 <HAL_GPIO_Init+0x10>
  }
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40010000 	.word	0x40010000
 8005e78:	48000400 	.word	0x48000400
 8005e7c:	48000800 	.word	0x48000800
 8005e80:	48000c00 	.word	0x48000c00
 8005e84:	48001000 	.word	0x48001000
 8005e88:	40010400 	.word	0x40010400

08005e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	887b      	ldrh	r3, [r7, #2]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
 8005ea8:	e001      	b.n	8005eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	807b      	strh	r3, [r7, #2]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ecc:	787b      	ldrb	r3, [r7, #1]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ed2:	887a      	ldrh	r2, [r7, #2]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ed8:	e002      	b.n	8005ee0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005eda:	887a      	ldrh	r2, [r7, #2]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4013      	ands	r3, r2
 8005f04:	041a      	lsls	r2, r3, #16
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	43d9      	mvns	r1, r3
 8005f0a:	887b      	ldrh	r3, [r7, #2]
 8005f0c:	400b      	ands	r3, r1
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	619a      	str	r2, [r3, #24]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40007000 	.word	0x40007000

08005f3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4a:	d130      	bne.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f4c:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f58:	d038      	beq.n	8005fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f5a:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f62:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2232      	movs	r2, #50	; 0x32
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0c9b      	lsrs	r3, r3, #18
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f80:	e002      	b.n	8005f88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f94:	d102      	bne.n	8005f9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1f2      	bne.n	8005f82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa8:	d110      	bne.n	8005fcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e00f      	b.n	8005fce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fba:	d007      	beq.n	8005fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fbc:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fc4:	4a05      	ldr	r2, [pc, #20]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40007000 	.word	0x40007000
 8005fe0:	20000010 	.word	0x20000010
 8005fe4:	431bde83 	.word	0x431bde83

08005fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e3fe      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ffa:	4ba1      	ldr	r3, [pc, #644]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006004:	4b9e      	ldr	r3, [pc, #632]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0310 	and.w	r3, r3, #16
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80e4 	beq.w	80061e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <HAL_RCC_OscConfig+0x4a>
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b0c      	cmp	r3, #12
 8006026:	f040 808b 	bne.w	8006140 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b01      	cmp	r3, #1
 800602e:	f040 8087 	bne.w	8006140 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006032:	4b93      	ldr	r3, [pc, #588]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <HAL_RCC_OscConfig+0x62>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e3d6      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1a      	ldr	r2, [r3, #32]
 800604e:	4b8c      	ldr	r3, [pc, #560]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <HAL_RCC_OscConfig+0x7c>
 800605a:	4b89      	ldr	r3, [pc, #548]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006062:	e005      	b.n	8006070 <HAL_RCC_OscConfig+0x88>
 8006064:	4b86      	ldr	r3, [pc, #536]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006070:	4293      	cmp	r3, r2
 8006072:	d223      	bcs.n	80060bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fdbd 	bl	8006bf8 <RCC_SetFlashLatencyFromMSIRange>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e3b7      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006088:	4b7d      	ldr	r3, [pc, #500]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a7c      	ldr	r2, [pc, #496]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800608e:	f043 0308 	orr.w	r3, r3, #8
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	4b7a      	ldr	r3, [pc, #488]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	4977      	ldr	r1, [pc, #476]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060a6:	4b76      	ldr	r3, [pc, #472]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	4972      	ldr	r1, [pc, #456]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	604b      	str	r3, [r1, #4]
 80060ba:	e025      	b.n	8006108 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060bc:	4b70      	ldr	r3, [pc, #448]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a6f      	ldr	r2, [pc, #444]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80060c2:	f043 0308 	orr.w	r3, r3, #8
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	4b6d      	ldr	r3, [pc, #436]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	496a      	ldr	r1, [pc, #424]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060da:	4b69      	ldr	r3, [pc, #420]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	4965      	ldr	r1, [pc, #404]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fd7d 	bl	8006bf8 <RCC_SetFlashLatencyFromMSIRange>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e377      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006108:	f000 fc80 	bl	8006a0c <HAL_RCC_GetSysClockFreq>
 800610c:	4602      	mov	r2, r0
 800610e:	4b5c      	ldr	r3, [pc, #368]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	091b      	lsrs	r3, r3, #4
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	495a      	ldr	r1, [pc, #360]	; (8006284 <HAL_RCC_OscConfig+0x29c>)
 800611a:	5ccb      	ldrb	r3, [r1, r3]
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
 8006124:	4a58      	ldr	r2, [pc, #352]	; (8006288 <HAL_RCC_OscConfig+0x2a0>)
 8006126:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006128:	4b58      	ldr	r3, [pc, #352]	; (800628c <HAL_RCC_OscConfig+0x2a4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f7fd fc65 	bl	80039fc <HAL_InitTick>
 8006132:	4603      	mov	r3, r0
 8006134:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d052      	beq.n	80061e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	e35b      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d032      	beq.n	80061ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006148:	4b4d      	ldr	r3, [pc, #308]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a4c      	ldr	r2, [pc, #304]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800614e:	f043 0301 	orr.w	r3, r3, #1
 8006152:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006154:	f7fd fe28 	bl	8003da8 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800615c:	f7fd fe24 	bl	8003da8 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e344      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800616e:	4b44      	ldr	r3, [pc, #272]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0f0      	beq.n	800615c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800617a:	4b41      	ldr	r3, [pc, #260]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a40      	ldr	r2, [pc, #256]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006180:	f043 0308 	orr.w	r3, r3, #8
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	4b3e      	ldr	r3, [pc, #248]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	493b      	ldr	r1, [pc, #236]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006194:	4313      	orrs	r3, r2
 8006196:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006198:	4b39      	ldr	r3, [pc, #228]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	4936      	ldr	r1, [pc, #216]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	604b      	str	r3, [r1, #4]
 80061ac:	e01a      	b.n	80061e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061ae:	4b34      	ldr	r3, [pc, #208]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a33      	ldr	r2, [pc, #204]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061ba:	f7fd fdf5 	bl	8003da8 <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061c0:	e008      	b.n	80061d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061c2:	f7fd fdf1 	bl	8003da8 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e311      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061d4:	4b2a      	ldr	r3, [pc, #168]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f0      	bne.n	80061c2 <HAL_RCC_OscConfig+0x1da>
 80061e0:	e000      	b.n	80061e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d074      	beq.n	80062da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d005      	beq.n	8006202 <HAL_RCC_OscConfig+0x21a>
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b0c      	cmp	r3, #12
 80061fa:	d10e      	bne.n	800621a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d10b      	bne.n	800621a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006202:	4b1f      	ldr	r3, [pc, #124]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d064      	beq.n	80062d8 <HAL_RCC_OscConfig+0x2f0>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d160      	bne.n	80062d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e2ee      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006222:	d106      	bne.n	8006232 <HAL_RCC_OscConfig+0x24a>
 8006224:	4b16      	ldr	r3, [pc, #88]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a15      	ldr	r2, [pc, #84]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800622a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	e01d      	b.n	800626e <HAL_RCC_OscConfig+0x286>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800623a:	d10c      	bne.n	8006256 <HAL_RCC_OscConfig+0x26e>
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006242:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a0c      	ldr	r2, [pc, #48]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800624e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	e00b      	b.n	800626e <HAL_RCC_OscConfig+0x286>
 8006256:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a09      	ldr	r2, [pc, #36]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 800625c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a06      	ldr	r2, [pc, #24]	; (8006280 <HAL_RCC_OscConfig+0x298>)
 8006268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800626c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01c      	beq.n	80062b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006276:	f7fd fd97 	bl	8003da8 <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800627c:	e011      	b.n	80062a2 <HAL_RCC_OscConfig+0x2ba>
 800627e:	bf00      	nop
 8006280:	40021000 	.word	0x40021000
 8006284:	080129a8 	.word	0x080129a8
 8006288:	20000010 	.word	0x20000010
 800628c:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006290:	f7fd fd8a 	bl	8003da8 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b64      	cmp	r3, #100	; 0x64
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e2aa      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062a2:	4baf      	ldr	r3, [pc, #700]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f0      	beq.n	8006290 <HAL_RCC_OscConfig+0x2a8>
 80062ae:	e014      	b.n	80062da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b0:	f7fd fd7a 	bl	8003da8 <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b8:	f7fd fd76 	bl	8003da8 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b64      	cmp	r3, #100	; 0x64
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e296      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ca:	4ba5      	ldr	r3, [pc, #660]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f0      	bne.n	80062b8 <HAL_RCC_OscConfig+0x2d0>
 80062d6:	e000      	b.n	80062da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d060      	beq.n	80063a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d005      	beq.n	80062f8 <HAL_RCC_OscConfig+0x310>
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b0c      	cmp	r3, #12
 80062f0:	d119      	bne.n	8006326 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d116      	bne.n	8006326 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f8:	4b99      	ldr	r3, [pc, #612]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <HAL_RCC_OscConfig+0x328>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e273      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006310:	4b93      	ldr	r3, [pc, #588]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	061b      	lsls	r3, r3, #24
 800631e:	4990      	ldr	r1, [pc, #576]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006320:	4313      	orrs	r3, r2
 8006322:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006324:	e040      	b.n	80063a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d023      	beq.n	8006376 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800632e:	4b8c      	ldr	r3, [pc, #560]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a8b      	ldr	r2, [pc, #556]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633a:	f7fd fd35 	bl	8003da8 <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006340:	e008      	b.n	8006354 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006342:	f7fd fd31 	bl	8003da8 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e251      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006354:	4b82      	ldr	r3, [pc, #520]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f0      	beq.n	8006342 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006360:	4b7f      	ldr	r3, [pc, #508]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	061b      	lsls	r3, r3, #24
 800636e:	497c      	ldr	r1, [pc, #496]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006370:	4313      	orrs	r3, r2
 8006372:	604b      	str	r3, [r1, #4]
 8006374:	e018      	b.n	80063a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006376:	4b7a      	ldr	r3, [pc, #488]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a79      	ldr	r2, [pc, #484]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 800637c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006382:	f7fd fd11 	bl	8003da8 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800638a:	f7fd fd0d 	bl	8003da8 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e22d      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800639c:	4b70      	ldr	r3, [pc, #448]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1f0      	bne.n	800638a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d03c      	beq.n	800642e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01c      	beq.n	80063f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063bc:	4b68      	ldr	r3, [pc, #416]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80063be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c2:	4a67      	ldr	r2, [pc, #412]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80063c4:	f043 0301 	orr.w	r3, r3, #1
 80063c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063cc:	f7fd fcec 	bl	8003da8 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063d4:	f7fd fce8 	bl	8003da8 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e208      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063e6:	4b5e      	ldr	r3, [pc, #376]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80063e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0ef      	beq.n	80063d4 <HAL_RCC_OscConfig+0x3ec>
 80063f4:	e01b      	b.n	800642e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063f6:	4b5a      	ldr	r3, [pc, #360]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80063f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063fc:	4a58      	ldr	r2, [pc, #352]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006406:	f7fd fccf 	bl	8003da8 <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800640e:	f7fd fccb 	bl	8003da8 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e1eb      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006420:	4b4f      	ldr	r3, [pc, #316]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1ef      	bne.n	800640e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80a6 	beq.w	8006588 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800643c:	2300      	movs	r3, #0
 800643e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006440:	4b47      	ldr	r3, [pc, #284]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10d      	bne.n	8006468 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800644c:	4b44      	ldr	r3, [pc, #272]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 800644e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006450:	4a43      	ldr	r2, [pc, #268]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006456:	6593      	str	r3, [r2, #88]	; 0x58
 8006458:	4b41      	ldr	r3, [pc, #260]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 800645a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006464:	2301      	movs	r3, #1
 8006466:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006468:	4b3e      	ldr	r3, [pc, #248]	; (8006564 <HAL_RCC_OscConfig+0x57c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006470:	2b00      	cmp	r3, #0
 8006472:	d118      	bne.n	80064a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006474:	4b3b      	ldr	r3, [pc, #236]	; (8006564 <HAL_RCC_OscConfig+0x57c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a3a      	ldr	r2, [pc, #232]	; (8006564 <HAL_RCC_OscConfig+0x57c>)
 800647a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006480:	f7fd fc92 	bl	8003da8 <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006488:	f7fd fc8e 	bl	8003da8 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e1ae      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800649a:	4b32      	ldr	r3, [pc, #200]	; (8006564 <HAL_RCC_OscConfig+0x57c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f0      	beq.n	8006488 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d108      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4d8>
 80064ae:	4b2c      	ldr	r3, [pc, #176]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b4:	4a2a      	ldr	r2, [pc, #168]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064be:	e024      	b.n	800650a <HAL_RCC_OscConfig+0x522>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b05      	cmp	r3, #5
 80064c6:	d110      	bne.n	80064ea <HAL_RCC_OscConfig+0x502>
 80064c8:	4b25      	ldr	r3, [pc, #148]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ce:	4a24      	ldr	r2, [pc, #144]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80064d0:	f043 0304 	orr.w	r3, r3, #4
 80064d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064d8:	4b21      	ldr	r3, [pc, #132]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064de:	4a20      	ldr	r2, [pc, #128]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064e8:	e00f      	b.n	800650a <HAL_RCC_OscConfig+0x522>
 80064ea:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f0:	4a1b      	ldr	r2, [pc, #108]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064fa:	4b19      	ldr	r3, [pc, #100]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006500:	4a17      	ldr	r2, [pc, #92]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006502:	f023 0304 	bic.w	r3, r3, #4
 8006506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d016      	beq.n	8006540 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006512:	f7fd fc49 	bl	8003da8 <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006518:	e00a      	b.n	8006530 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800651a:	f7fd fc45 	bl	8003da8 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f241 3288 	movw	r2, #5000	; 0x1388
 8006528:	4293      	cmp	r3, r2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e163      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006530:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <HAL_RCC_OscConfig+0x578>)
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0ed      	beq.n	800651a <HAL_RCC_OscConfig+0x532>
 800653e:	e01a      	b.n	8006576 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006540:	f7fd fc32 	bl	8003da8 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006546:	e00f      	b.n	8006568 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006548:	f7fd fc2e 	bl	8003da8 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f241 3288 	movw	r2, #5000	; 0x1388
 8006556:	4293      	cmp	r3, r2
 8006558:	d906      	bls.n	8006568 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e14c      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
 800655e:	bf00      	nop
 8006560:	40021000 	.word	0x40021000
 8006564:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006568:	4ba5      	ldr	r3, [pc, #660]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e8      	bne.n	8006548 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006576:	7ffb      	ldrb	r3, [r7, #31]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d105      	bne.n	8006588 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800657c:	4ba0      	ldr	r3, [pc, #640]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 800657e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006580:	4a9f      	ldr	r2, [pc, #636]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 8006582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006586:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d03c      	beq.n	800660e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01c      	beq.n	80065d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800659c:	4b98      	ldr	r3, [pc, #608]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 800659e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065a2:	4a97      	ldr	r2, [pc, #604]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80065a4:	f043 0301 	orr.w	r3, r3, #1
 80065a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fd fbfc 	bl	8003da8 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065b4:	f7fd fbf8 	bl	8003da8 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e118      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065c6:	4b8e      	ldr	r3, [pc, #568]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80065c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0ef      	beq.n	80065b4 <HAL_RCC_OscConfig+0x5cc>
 80065d4:	e01b      	b.n	800660e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065d6:	4b8a      	ldr	r3, [pc, #552]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80065d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065dc:	4a88      	ldr	r2, [pc, #544]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80065de:	f023 0301 	bic.w	r3, r3, #1
 80065e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e6:	f7fd fbdf 	bl	8003da8 <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065ec:	e008      	b.n	8006600 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065ee:	f7fd fbdb 	bl	8003da8 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0fb      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006600:	4b7f      	ldr	r3, [pc, #508]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 8006602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1ef      	bne.n	80065ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80ef 	beq.w	80067f6 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	2b02      	cmp	r3, #2
 800661e:	f040 80c5 	bne.w	80067ac <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006622:	4b77      	ldr	r3, [pc, #476]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f003 0203 	and.w	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006632:	429a      	cmp	r2, r3
 8006634:	d12c      	bne.n	8006690 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	3b01      	subs	r3, #1
 8006642:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d123      	bne.n	8006690 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006654:	429a      	cmp	r2, r3
 8006656:	d11b      	bne.n	8006690 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006664:	429a      	cmp	r2, r3
 8006666:	d113      	bne.n	8006690 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	3b01      	subs	r3, #1
 8006676:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006678:	429a      	cmp	r2, r3
 800667a:	d109      	bne.n	8006690 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	3b01      	subs	r3, #1
 800668a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800668c:	429a      	cmp	r2, r3
 800668e:	d067      	beq.n	8006760 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b0c      	cmp	r3, #12
 8006694:	d062      	beq.n	800675c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006696:	4b5a      	ldr	r3, [pc, #360]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e0a8      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80066a6:	4b56      	ldr	r3, [pc, #344]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a55      	ldr	r2, [pc, #340]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80066ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066b2:	f7fd fb79 	bl	8003da8 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ba:	f7fd fb75 	bl	8003da8 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e095      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066cc:	4b4c      	ldr	r3, [pc, #304]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066d8:	4b49      	ldr	r3, [pc, #292]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	4b49      	ldr	r3, [pc, #292]	; (8006804 <HAL_RCC_OscConfig+0x81c>)
 80066de:	4013      	ands	r3, r2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066e8:	3a01      	subs	r2, #1
 80066ea:	0112      	lsls	r2, r2, #4
 80066ec:	4311      	orrs	r1, r2
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066f2:	0212      	lsls	r2, r2, #8
 80066f4:	4311      	orrs	r1, r2
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066fa:	0852      	lsrs	r2, r2, #1
 80066fc:	3a01      	subs	r2, #1
 80066fe:	0552      	lsls	r2, r2, #21
 8006700:	4311      	orrs	r1, r2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006706:	0852      	lsrs	r2, r2, #1
 8006708:	3a01      	subs	r2, #1
 800670a:	0652      	lsls	r2, r2, #25
 800670c:	4311      	orrs	r1, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006712:	06d2      	lsls	r2, r2, #27
 8006714:	430a      	orrs	r2, r1
 8006716:	493a      	ldr	r1, [pc, #232]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 8006718:	4313      	orrs	r3, r2
 800671a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800671c:	4b38      	ldr	r3, [pc, #224]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a37      	ldr	r2, [pc, #220]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 8006722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006726:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006728:	4b35      	ldr	r3, [pc, #212]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	4a34      	ldr	r2, [pc, #208]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 800672e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006732:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006734:	f7fd fb38 	bl	8003da8 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673c:	f7fd fb34 	bl	8003da8 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e054      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800674e:	4b2c      	ldr	r3, [pc, #176]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0f0      	beq.n	800673c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800675a:	e04c      	b.n	80067f6 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e04b      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006760:	4b27      	ldr	r3, [pc, #156]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d144      	bne.n	80067f6 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800676c:	4b24      	ldr	r3, [pc, #144]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a23      	ldr	r2, [pc, #140]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 8006772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006776:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006778:	4b21      	ldr	r3, [pc, #132]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4a20      	ldr	r2, [pc, #128]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 800677e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006782:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006784:	f7fd fb10 	bl	8003da8 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800678c:	f7fd fb0c 	bl	8003da8 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e02c      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800679e:	4b18      	ldr	r3, [pc, #96]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0x7a4>
 80067aa:	e024      	b.n	80067f6 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b0c      	cmp	r3, #12
 80067b0:	d01f      	beq.n	80067f2 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b2:	4b13      	ldr	r3, [pc, #76]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a12      	ldr	r2, [pc, #72]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80067b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067be:	f7fd faf3 	bl	8003da8 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c6:	f7fd faef 	bl	8003da8 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e00f      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067d8:	4b09      	ldr	r3, [pc, #36]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f0      	bne.n	80067c6 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	4905      	ldr	r1, [pc, #20]	; (8006800 <HAL_RCC_OscConfig+0x818>)
 80067ea:	4b07      	ldr	r3, [pc, #28]	; (8006808 <HAL_RCC_OscConfig+0x820>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	60cb      	str	r3, [r1, #12]
 80067f0:	e001      	b.n	80067f6 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40021000 	.word	0x40021000
 8006804:	019d808c 	.word	0x019d808c
 8006808:	feeefffc 	.word	0xfeeefffc

0800680c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0e7      	b.n	80069f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006820:	4b75      	ldr	r3, [pc, #468]	; (80069f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d910      	bls.n	8006850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682e:	4b72      	ldr	r3, [pc, #456]	; (80069f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f023 0207 	bic.w	r2, r3, #7
 8006836:	4970      	ldr	r1, [pc, #448]	; (80069f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	4313      	orrs	r3, r2
 800683c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800683e:	4b6e      	ldr	r3, [pc, #440]	; (80069f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d001      	beq.n	8006850 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0cf      	b.n	80069f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	4b66      	ldr	r3, [pc, #408]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006868:	429a      	cmp	r2, r3
 800686a:	d908      	bls.n	800687e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800686c:	4b63      	ldr	r3, [pc, #396]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	4960      	ldr	r1, [pc, #384]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 800687a:	4313      	orrs	r3, r2
 800687c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d04c      	beq.n	8006924 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b03      	cmp	r3, #3
 8006890:	d107      	bne.n	80068a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006892:	4b5a      	ldr	r3, [pc, #360]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d121      	bne.n	80068e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e0a6      	b.n	80069f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d107      	bne.n	80068ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068aa:	4b54      	ldr	r3, [pc, #336]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d115      	bne.n	80068e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e09a      	b.n	80069f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d107      	bne.n	80068d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068c2:	4b4e      	ldr	r3, [pc, #312]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e08e      	b.n	80069f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068d2:	4b4a      	ldr	r3, [pc, #296]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e086      	b.n	80069f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068e2:	4b46      	ldr	r3, [pc, #280]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f023 0203 	bic.w	r2, r3, #3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	4943      	ldr	r1, [pc, #268]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068f4:	f7fd fa58 	bl	8003da8 <HAL_GetTick>
 80068f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fa:	e00a      	b.n	8006912 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068fc:	f7fd fa54 	bl	8003da8 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	f241 3288 	movw	r2, #5000	; 0x1388
 800690a:	4293      	cmp	r3, r2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e06e      	b.n	80069f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006912:	4b3a      	ldr	r3, [pc, #232]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 020c 	and.w	r2, r3, #12
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	429a      	cmp	r2, r3
 8006922:	d1eb      	bne.n	80068fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d010      	beq.n	8006952 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	4b31      	ldr	r3, [pc, #196]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800693c:	429a      	cmp	r2, r3
 800693e:	d208      	bcs.n	8006952 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006940:	4b2e      	ldr	r3, [pc, #184]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	492b      	ldr	r1, [pc, #172]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 800694e:	4313      	orrs	r3, r2
 8006950:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006952:	4b29      	ldr	r3, [pc, #164]	; (80069f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d210      	bcs.n	8006982 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006960:	4b25      	ldr	r3, [pc, #148]	; (80069f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f023 0207 	bic.w	r2, r3, #7
 8006968:	4923      	ldr	r1, [pc, #140]	; (80069f8 <HAL_RCC_ClockConfig+0x1ec>)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	4313      	orrs	r3, r2
 800696e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006970:	4b21      	ldr	r3, [pc, #132]	; (80069f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d001      	beq.n	8006982 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e036      	b.n	80069f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800698e:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	4918      	ldr	r1, [pc, #96]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 800699c:	4313      	orrs	r3, r2
 800699e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ac:	4b13      	ldr	r3, [pc, #76]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	4910      	ldr	r1, [pc, #64]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069c0:	f000 f824 	bl	8006a0c <HAL_RCC_GetSysClockFreq>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <HAL_RCC_ClockConfig+0x1f0>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	091b      	lsrs	r3, r3, #4
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	490b      	ldr	r1, [pc, #44]	; (8006a00 <HAL_RCC_ClockConfig+0x1f4>)
 80069d2:	5ccb      	ldrb	r3, [r1, r3]
 80069d4:	f003 031f 	and.w	r3, r3, #31
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
 80069dc:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <HAL_RCC_ClockConfig+0x1f8>)
 80069de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80069e0:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <HAL_RCC_ClockConfig+0x1fc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fd f809 	bl	80039fc <HAL_InitTick>
 80069ea:	4603      	mov	r3, r0
 80069ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80069ee:	7afb      	ldrb	r3, [r7, #11]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40022000 	.word	0x40022000
 80069fc:	40021000 	.word	0x40021000
 8006a00:	080129a8 	.word	0x080129a8
 8006a04:	20000010 	.word	0x20000010
 8006a08:	20000014 	.word	0x20000014

08006a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b089      	sub	sp, #36	; 0x24
 8006a10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61fb      	str	r3, [r7, #28]
 8006a16:	2300      	movs	r3, #0
 8006a18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a1a:	4b3e      	ldr	r3, [pc, #248]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 030c 	and.w	r3, r3, #12
 8006a22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a24:	4b3b      	ldr	r3, [pc, #236]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d005      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0x34>
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b0c      	cmp	r3, #12
 8006a38:	d121      	bne.n	8006a7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d11e      	bne.n	8006a7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a40:	4b34      	ldr	r3, [pc, #208]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d107      	bne.n	8006a5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006a4c:	4b31      	ldr	r3, [pc, #196]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	61fb      	str	r3, [r7, #28]
 8006a5a:	e005      	b.n	8006a68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a5c:	4b2d      	ldr	r3, [pc, #180]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a68:	4a2b      	ldr	r2, [pc, #172]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10d      	bne.n	8006a94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a7c:	e00a      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d102      	bne.n	8006a8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x110>)
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	e004      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d101      	bne.n	8006a94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a90:	4b23      	ldr	r3, [pc, #140]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b0c      	cmp	r3, #12
 8006a98:	d134      	bne.n	8006b04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a9a:	4b1e      	ldr	r3, [pc, #120]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d003      	beq.n	8006ab2 <HAL_RCC_GetSysClockFreq+0xa6>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d003      	beq.n	8006ab8 <HAL_RCC_GetSysClockFreq+0xac>
 8006ab0:	e005      	b.n	8006abe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ab2:	4b1a      	ldr	r3, [pc, #104]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x110>)
 8006ab4:	617b      	str	r3, [r7, #20]
      break;
 8006ab6:	e005      	b.n	8006ac4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006ab8:	4b19      	ldr	r3, [pc, #100]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x114>)
 8006aba:	617b      	str	r3, [r7, #20]
      break;
 8006abc:	e002      	b.n	8006ac4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	617b      	str	r3, [r7, #20]
      break;
 8006ac2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	091b      	lsrs	r3, r3, #4
 8006aca:	f003 0307 	and.w	r3, r3, #7
 8006ace:	3301      	adds	r3, #1
 8006ad0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ad2:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	0a1b      	lsrs	r3, r3, #8
 8006ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	fb02 f203 	mul.w	r2, r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006aea:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	0e5b      	lsrs	r3, r3, #25
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	3301      	adds	r3, #1
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006b04:	69bb      	ldr	r3, [r7, #24]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3724      	adds	r7, #36	; 0x24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40021000 	.word	0x40021000
 8006b18:	080129c0 	.word	0x080129c0
 8006b1c:	00f42400 	.word	0x00f42400
 8006b20:	007a1200 	.word	0x007a1200

08006b24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b28:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	20000010 	.word	0x20000010

08006b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b40:	f7ff fff0 	bl	8006b24 <HAL_RCC_GetHCLKFreq>
 8006b44:	4602      	mov	r2, r0
 8006b46:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	0a1b      	lsrs	r3, r3, #8
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	4904      	ldr	r1, [pc, #16]	; (8006b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b52:	5ccb      	ldrb	r3, [r1, r3]
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40021000 	.word	0x40021000
 8006b64:	080129b8 	.word	0x080129b8

08006b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b6c:	f7ff ffda 	bl	8006b24 <HAL_RCC_GetHCLKFreq>
 8006b70:	4602      	mov	r2, r0
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	0adb      	lsrs	r3, r3, #11
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	4904      	ldr	r1, [pc, #16]	; (8006b90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b7e:	5ccb      	ldrb	r3, [r1, r3]
 8006b80:	f003 031f 	and.w	r3, r3, #31
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	080129b8 	.word	0x080129b8

08006b94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	220f      	movs	r2, #15
 8006ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006ba4:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f003 0203 	and.w	r2, r3, #3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006bc8:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	08db      	lsrs	r3, r3, #3
 8006bce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006bd6:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <HAL_RCC_GetClockConfig+0x60>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0207 	and.w	r2, r3, #7
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	601a      	str	r2, [r3, #0]
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	40022000 	.word	0x40022000

08006bf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006c00:	2300      	movs	r3, #0
 8006c02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006c04:	4b2a      	ldr	r3, [pc, #168]	; (8006cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006c10:	f7ff f986 	bl	8005f20 <HAL_PWREx_GetVoltageRange>
 8006c14:	6178      	str	r0, [r7, #20]
 8006c16:	e014      	b.n	8006c42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c18:	4b25      	ldr	r3, [pc, #148]	; (8006cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1c:	4a24      	ldr	r2, [pc, #144]	; (8006cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c22:	6593      	str	r3, [r2, #88]	; 0x58
 8006c24:	4b22      	ldr	r3, [pc, #136]	; (8006cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006c30:	f7ff f976 	bl	8005f20 <HAL_PWREx_GetVoltageRange>
 8006c34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006c36:	4b1e      	ldr	r3, [pc, #120]	; (8006cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3a:	4a1d      	ldr	r2, [pc, #116]	; (8006cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c48:	d10b      	bne.n	8006c62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b80      	cmp	r3, #128	; 0x80
 8006c4e:	d919      	bls.n	8006c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2ba0      	cmp	r3, #160	; 0xa0
 8006c54:	d902      	bls.n	8006c5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c56:	2302      	movs	r3, #2
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	e013      	b.n	8006c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	613b      	str	r3, [r7, #16]
 8006c60:	e010      	b.n	8006c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b80      	cmp	r3, #128	; 0x80
 8006c66:	d902      	bls.n	8006c6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006c68:	2303      	movs	r3, #3
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	e00a      	b.n	8006c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b80      	cmp	r3, #128	; 0x80
 8006c72:	d102      	bne.n	8006c7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c74:	2302      	movs	r3, #2
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	e004      	b.n	8006c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b70      	cmp	r3, #112	; 0x70
 8006c7e:	d101      	bne.n	8006c84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c80:	2301      	movs	r3, #1
 8006c82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f023 0207 	bic.w	r2, r3, #7
 8006c8c:	4909      	ldr	r1, [pc, #36]	; (8006cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c94:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d001      	beq.n	8006ca6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	40022000 	.word	0x40022000

08006cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d031      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cdc:	d01a      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006cde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ce2:	d814      	bhi.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d009      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ce8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cec:	d10f      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006cee:	4b5d      	ldr	r3, [pc, #372]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	4a5c      	ldr	r2, [pc, #368]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cfa:	e00c      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	2100      	movs	r1, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f9f0 	bl	80070e8 <RCCEx_PLLSAI1_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d0c:	e003      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	74fb      	strb	r3, [r7, #19]
      break;
 8006d12:	e000      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d16:	7cfb      	ldrb	r3, [r7, #19]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10b      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d1c:	4b51      	ldr	r3, [pc, #324]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2a:	494e      	ldr	r1, [pc, #312]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006d32:	e001      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	7cfb      	ldrb	r3, [r7, #19]
 8006d36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 809e 	beq.w	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d46:	2300      	movs	r3, #0
 8006d48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d4a:	4b46      	ldr	r3, [pc, #280]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00d      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d60:	4b40      	ldr	r3, [pc, #256]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d64:	4a3f      	ldr	r2, [pc, #252]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d6c:	4b3d      	ldr	r3, [pc, #244]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d74:	60bb      	str	r3, [r7, #8]
 8006d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d7c:	4b3a      	ldr	r3, [pc, #232]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a39      	ldr	r2, [pc, #228]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d88:	f7fd f80e 	bl	8003da8 <HAL_GetTick>
 8006d8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d8e:	e009      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d90:	f7fd f80a 	bl	8003da8 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d902      	bls.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	74fb      	strb	r3, [r7, #19]
        break;
 8006da2:	e005      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006da4:	4b30      	ldr	r3, [pc, #192]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d0ef      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006db0:	7cfb      	ldrb	r3, [r7, #19]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d15a      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006db6:	4b2b      	ldr	r3, [pc, #172]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01e      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d019      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006dd2:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ddc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006dde:	4b21      	ldr	r3, [pc, #132]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de4:	4a1f      	ldr	r2, [pc, #124]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dee:	4b1d      	ldr	r3, [pc, #116]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dfe:	4a19      	ldr	r2, [pc, #100]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d016      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e10:	f7fc ffca 	bl	8003da8 <HAL_GetTick>
 8006e14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e16:	e00b      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e18:	f7fc ffc6 	bl	8003da8 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d902      	bls.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	74fb      	strb	r3, [r7, #19]
            break;
 8006e2e:	e006      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e30:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0ec      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006e3e:	7cfb      	ldrb	r3, [r7, #19]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10b      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e44:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e52:	4904      	ldr	r1, [pc, #16]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006e5a:	e009      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e5c:	7cfb      	ldrb	r3, [r7, #19]
 8006e5e:	74bb      	strb	r3, [r7, #18]
 8006e60:	e006      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006e62:	bf00      	nop
 8006e64:	40021000 	.word	0x40021000
 8006e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e6c:	7cfb      	ldrb	r3, [r7, #19]
 8006e6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e70:	7c7b      	ldrb	r3, [r7, #17]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d105      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e76:	4b9b      	ldr	r3, [pc, #620]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7a:	4a9a      	ldr	r2, [pc, #616]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e8e:	4b95      	ldr	r3, [pc, #596]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e94:	f023 0203 	bic.w	r2, r3, #3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	4991      	ldr	r1, [pc, #580]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006eb0:	4b8c      	ldr	r3, [pc, #560]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb6:	f023 020c 	bic.w	r2, r3, #12
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	4989      	ldr	r1, [pc, #548]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ed2:	4b84      	ldr	r3, [pc, #528]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	4980      	ldr	r1, [pc, #512]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ef4:	4b7b      	ldr	r3, [pc, #492]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	4978      	ldr	r1, [pc, #480]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f16:	4b73      	ldr	r3, [pc, #460]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	496f      	ldr	r1, [pc, #444]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f38:	4b6a      	ldr	r3, [pc, #424]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	4967      	ldr	r1, [pc, #412]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f5a:	4b62      	ldr	r3, [pc, #392]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	495e      	ldr	r1, [pc, #376]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f7c:	4b59      	ldr	r3, [pc, #356]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	4956      	ldr	r1, [pc, #344]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f9e:	4b51      	ldr	r3, [pc, #324]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	494d      	ldr	r1, [pc, #308]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d028      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006fc0:	4b48      	ldr	r3, [pc, #288]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fce:	4945      	ldr	r1, [pc, #276]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fde:	d106      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fe0:	4b40      	ldr	r3, [pc, #256]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	4a3f      	ldr	r2, [pc, #252]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fea:	60d3      	str	r3, [r2, #12]
 8006fec:	e011      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ff6:	d10c      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f872 	bl	80070e8 <RCCEx_PLLSAI1_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007008:	7cfb      	ldrb	r3, [r7, #19]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800700e:	7cfb      	ldrb	r3, [r7, #19]
 8007010:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d028      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800701e:	4b31      	ldr	r3, [pc, #196]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007024:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702c:	492d      	ldr	r1, [pc, #180]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800702e:	4313      	orrs	r3, r2
 8007030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800703c:	d106      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800703e:	4b29      	ldr	r3, [pc, #164]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	4a28      	ldr	r2, [pc, #160]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007048:	60d3      	str	r3, [r2, #12]
 800704a:	e011      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007050:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007054:	d10c      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3304      	adds	r3, #4
 800705a:	2101      	movs	r1, #1
 800705c:	4618      	mov	r0, r3
 800705e:	f000 f843 	bl	80070e8 <RCCEx_PLLSAI1_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007066:	7cfb      	ldrb	r3, [r7, #19]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800706c:	7cfb      	ldrb	r3, [r7, #19]
 800706e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01c      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800707c:	4b19      	ldr	r3, [pc, #100]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800707e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007082:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708a:	4916      	ldr	r1, [pc, #88]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800708c:	4313      	orrs	r3, r2
 800708e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800709a:	d10c      	bne.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3304      	adds	r3, #4
 80070a0:	2102      	movs	r1, #2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f820 	bl	80070e8 <RCCEx_PLLSAI1_Config>
 80070a8:	4603      	mov	r3, r0
 80070aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070ac:	7cfb      	ldrb	r3, [r7, #19]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80070b2:	7cfb      	ldrb	r3, [r7, #19]
 80070b4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070c2:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d0:	4904      	ldr	r1, [pc, #16]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80070d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40021000 	.word	0x40021000

080070e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80070f6:	4b74      	ldr	r3, [pc, #464]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d018      	beq.n	8007134 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007102:	4b71      	ldr	r3, [pc, #452]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f003 0203 	and.w	r2, r3, #3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d10d      	bne.n	800712e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
       ||
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800711a:	4b6b      	ldr	r3, [pc, #428]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	091b      	lsrs	r3, r3, #4
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
       ||
 800712a:	429a      	cmp	r2, r3
 800712c:	d047      	beq.n	80071be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	73fb      	strb	r3, [r7, #15]
 8007132:	e044      	b.n	80071be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b03      	cmp	r3, #3
 800713a:	d018      	beq.n	800716e <RCCEx_PLLSAI1_Config+0x86>
 800713c:	2b03      	cmp	r3, #3
 800713e:	d825      	bhi.n	800718c <RCCEx_PLLSAI1_Config+0xa4>
 8007140:	2b01      	cmp	r3, #1
 8007142:	d002      	beq.n	800714a <RCCEx_PLLSAI1_Config+0x62>
 8007144:	2b02      	cmp	r3, #2
 8007146:	d009      	beq.n	800715c <RCCEx_PLLSAI1_Config+0x74>
 8007148:	e020      	b.n	800718c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800714a:	4b5f      	ldr	r3, [pc, #380]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11d      	bne.n	8007192 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800715a:	e01a      	b.n	8007192 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800715c:	4b5a      	ldr	r3, [pc, #360]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007164:	2b00      	cmp	r3, #0
 8007166:	d116      	bne.n	8007196 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800716c:	e013      	b.n	8007196 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800716e:	4b56      	ldr	r3, [pc, #344]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10f      	bne.n	800719a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800717a:	4b53      	ldr	r3, [pc, #332]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800718a:	e006      	b.n	800719a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]
      break;
 8007190:	e004      	b.n	800719c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007192:	bf00      	nop
 8007194:	e002      	b.n	800719c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007196:	bf00      	nop
 8007198:	e000      	b.n	800719c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800719a:	bf00      	nop
    }

    if(status == HAL_OK)
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10d      	bne.n	80071be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80071a2:	4b49      	ldr	r3, [pc, #292]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6819      	ldr	r1, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	430b      	orrs	r3, r1
 80071b8:	4943      	ldr	r1, [pc, #268]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d17c      	bne.n	80072be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80071c4:	4b40      	ldr	r3, [pc, #256]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a3f      	ldr	r2, [pc, #252]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071d0:	f7fc fdea 	bl	8003da8 <HAL_GetTick>
 80071d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80071d6:	e009      	b.n	80071ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071d8:	f7fc fde6 	bl	8003da8 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d902      	bls.n	80071ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	73fb      	strb	r3, [r7, #15]
        break;
 80071ea:	e005      	b.n	80071f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80071ec:	4b36      	ldr	r3, [pc, #216]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1ef      	bne.n	80071d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d15f      	bne.n	80072be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d110      	bne.n	8007226 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007204:	4b30      	ldr	r3, [pc, #192]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800720c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6892      	ldr	r2, [r2, #8]
 8007214:	0211      	lsls	r1, r2, #8
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68d2      	ldr	r2, [r2, #12]
 800721a:	06d2      	lsls	r2, r2, #27
 800721c:	430a      	orrs	r2, r1
 800721e:	492a      	ldr	r1, [pc, #168]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007220:	4313      	orrs	r3, r2
 8007222:	610b      	str	r3, [r1, #16]
 8007224:	e027      	b.n	8007276 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d112      	bne.n	8007252 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800722c:	4b26      	ldr	r3, [pc, #152]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007234:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6892      	ldr	r2, [r2, #8]
 800723c:	0211      	lsls	r1, r2, #8
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6912      	ldr	r2, [r2, #16]
 8007242:	0852      	lsrs	r2, r2, #1
 8007244:	3a01      	subs	r2, #1
 8007246:	0552      	lsls	r2, r2, #21
 8007248:	430a      	orrs	r2, r1
 800724a:	491f      	ldr	r1, [pc, #124]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800724c:	4313      	orrs	r3, r2
 800724e:	610b      	str	r3, [r1, #16]
 8007250:	e011      	b.n	8007276 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007252:	4b1d      	ldr	r3, [pc, #116]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800725a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6892      	ldr	r2, [r2, #8]
 8007262:	0211      	lsls	r1, r2, #8
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6952      	ldr	r2, [r2, #20]
 8007268:	0852      	lsrs	r2, r2, #1
 800726a:	3a01      	subs	r2, #1
 800726c:	0652      	lsls	r2, r2, #25
 800726e:	430a      	orrs	r2, r1
 8007270:	4915      	ldr	r1, [pc, #84]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007272:	4313      	orrs	r3, r2
 8007274:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007276:	4b14      	ldr	r3, [pc, #80]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800727c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007280:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007282:	f7fc fd91 	bl	8003da8 <HAL_GetTick>
 8007286:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007288:	e009      	b.n	800729e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800728a:	f7fc fd8d 	bl	8003da8 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d902      	bls.n	800729e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	73fb      	strb	r3, [r7, #15]
          break;
 800729c:	e005      	b.n	80072aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800729e:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0ef      	beq.n	800728a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	4903      	ldr	r1, [pc, #12]	; (80072c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40021000 	.word	0x40021000

080072cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e049      	b.n	8007372 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fc fa4a 	bl	800378c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f000 fca4 	bl	8007c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b01      	cmp	r3, #1
 800738e:	d001      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e03b      	b.n	800740c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0201 	orr.w	r2, r2, #1
 80073aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a19      	ldr	r2, [pc, #100]	; (8007418 <HAL_TIM_Base_Start_IT+0x9c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d009      	beq.n	80073ca <HAL_TIM_Base_Start_IT+0x4e>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073be:	d004      	beq.n	80073ca <HAL_TIM_Base_Start_IT+0x4e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a15      	ldr	r2, [pc, #84]	; (800741c <HAL_TIM_Base_Start_IT+0xa0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d115      	bne.n	80073f6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	4b13      	ldr	r3, [pc, #76]	; (8007420 <HAL_TIM_Base_Start_IT+0xa4>)
 80073d2:	4013      	ands	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b06      	cmp	r3, #6
 80073da:	d015      	beq.n	8007408 <HAL_TIM_Base_Start_IT+0x8c>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e2:	d011      	beq.n	8007408 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f4:	e008      	b.n	8007408 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f042 0201 	orr.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e000      	b.n	800740a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007408:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	40012c00 	.word	0x40012c00
 800741c:	40014000 	.word	0x40014000
 8007420:	00010007 	.word	0x00010007

08007424 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e049      	b.n	80074ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fc f980 	bl	8003750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3304      	adds	r3, #4
 8007460:	4619      	mov	r1, r3
 8007462:	4610      	mov	r0, r2
 8007464:	f000 fbf8 	bl	8007c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <HAL_TIM_PWM_Start+0x24>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	bf14      	ite	ne
 80074f0:	2301      	movne	r3, #1
 80074f2:	2300      	moveq	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	e03c      	b.n	8007572 <HAL_TIM_PWM_Start+0x9e>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d109      	bne.n	8007512 <HAL_TIM_PWM_Start+0x3e>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b01      	cmp	r3, #1
 8007508:	bf14      	ite	ne
 800750a:	2301      	movne	r3, #1
 800750c:	2300      	moveq	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	e02f      	b.n	8007572 <HAL_TIM_PWM_Start+0x9e>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b08      	cmp	r3, #8
 8007516:	d109      	bne.n	800752c <HAL_TIM_PWM_Start+0x58>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	bf14      	ite	ne
 8007524:	2301      	movne	r3, #1
 8007526:	2300      	moveq	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	e022      	b.n	8007572 <HAL_TIM_PWM_Start+0x9e>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b0c      	cmp	r3, #12
 8007530:	d109      	bne.n	8007546 <HAL_TIM_PWM_Start+0x72>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b01      	cmp	r3, #1
 800753c:	bf14      	ite	ne
 800753e:	2301      	movne	r3, #1
 8007540:	2300      	moveq	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	e015      	b.n	8007572 <HAL_TIM_PWM_Start+0x9e>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b10      	cmp	r3, #16
 800754a:	d109      	bne.n	8007560 <HAL_TIM_PWM_Start+0x8c>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	bf14      	ite	ne
 8007558:	2301      	movne	r3, #1
 800755a:	2300      	moveq	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	e008      	b.n	8007572 <HAL_TIM_PWM_Start+0x9e>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e07e      	b.n	8007678 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d104      	bne.n	800758a <HAL_TIM_PWM_Start+0xb6>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007588:	e023      	b.n	80075d2 <HAL_TIM_PWM_Start+0xfe>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b04      	cmp	r3, #4
 800758e:	d104      	bne.n	800759a <HAL_TIM_PWM_Start+0xc6>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007598:	e01b      	b.n	80075d2 <HAL_TIM_PWM_Start+0xfe>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b08      	cmp	r3, #8
 800759e:	d104      	bne.n	80075aa <HAL_TIM_PWM_Start+0xd6>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075a8:	e013      	b.n	80075d2 <HAL_TIM_PWM_Start+0xfe>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b0c      	cmp	r3, #12
 80075ae:	d104      	bne.n	80075ba <HAL_TIM_PWM_Start+0xe6>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075b8:	e00b      	b.n	80075d2 <HAL_TIM_PWM_Start+0xfe>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b10      	cmp	r3, #16
 80075be:	d104      	bne.n	80075ca <HAL_TIM_PWM_Start+0xf6>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075c8:	e003      	b.n	80075d2 <HAL_TIM_PWM_Start+0xfe>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2201      	movs	r2, #1
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fe1e 	bl	800821c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a26      	ldr	r2, [pc, #152]	; (8007680 <HAL_TIM_PWM_Start+0x1ac>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d009      	beq.n	80075fe <HAL_TIM_PWM_Start+0x12a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a25      	ldr	r2, [pc, #148]	; (8007684 <HAL_TIM_PWM_Start+0x1b0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d004      	beq.n	80075fe <HAL_TIM_PWM_Start+0x12a>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a23      	ldr	r2, [pc, #140]	; (8007688 <HAL_TIM_PWM_Start+0x1b4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_PWM_Start+0x12e>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <HAL_TIM_PWM_Start+0x130>
 8007602:	2300      	movs	r3, #0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007616:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a18      	ldr	r2, [pc, #96]	; (8007680 <HAL_TIM_PWM_Start+0x1ac>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d009      	beq.n	8007636 <HAL_TIM_PWM_Start+0x162>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762a:	d004      	beq.n	8007636 <HAL_TIM_PWM_Start+0x162>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a14      	ldr	r2, [pc, #80]	; (8007684 <HAL_TIM_PWM_Start+0x1b0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d115      	bne.n	8007662 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	4b13      	ldr	r3, [pc, #76]	; (800768c <HAL_TIM_PWM_Start+0x1b8>)
 800763e:	4013      	ands	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b06      	cmp	r3, #6
 8007646:	d015      	beq.n	8007674 <HAL_TIM_PWM_Start+0x1a0>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800764e:	d011      	beq.n	8007674 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0201 	orr.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007660:	e008      	b.n	8007674 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0201 	orr.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	e000      	b.n	8007676 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007674:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	40012c00 	.word	0x40012c00
 8007684:	40014000 	.word	0x40014000
 8007688:	40014400 	.word	0x40014400
 800768c:	00010007 	.word	0x00010007

08007690 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2200      	movs	r2, #0
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fdba 	bl	800821c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a39      	ldr	r2, [pc, #228]	; (8007794 <HAL_TIM_PWM_Stop+0x104>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d009      	beq.n	80076c6 <HAL_TIM_PWM_Stop+0x36>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a38      	ldr	r2, [pc, #224]	; (8007798 <HAL_TIM_PWM_Stop+0x108>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d004      	beq.n	80076c6 <HAL_TIM_PWM_Stop+0x36>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a36      	ldr	r2, [pc, #216]	; (800779c <HAL_TIM_PWM_Stop+0x10c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d101      	bne.n	80076ca <HAL_TIM_PWM_Stop+0x3a>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e000      	b.n	80076cc <HAL_TIM_PWM_Stop+0x3c>
 80076ca:	2300      	movs	r3, #0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d017      	beq.n	8007700 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6a1a      	ldr	r2, [r3, #32]
 80076d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10f      	bne.n	8007700 <HAL_TIM_PWM_Stop+0x70>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6a1a      	ldr	r2, [r3, #32]
 80076e6:	f240 4344 	movw	r3, #1092	; 0x444
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d107      	bne.n	8007700 <HAL_TIM_PWM_Stop+0x70>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6a1a      	ldr	r2, [r3, #32]
 8007706:	f241 1311 	movw	r3, #4369	; 0x1111
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10f      	bne.n	8007730 <HAL_TIM_PWM_Stop+0xa0>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6a1a      	ldr	r2, [r3, #32]
 8007716:	f240 4344 	movw	r3, #1092	; 0x444
 800771a:	4013      	ands	r3, r2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d107      	bne.n	8007730 <HAL_TIM_PWM_Stop+0xa0>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0201 	bic.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <HAL_TIM_PWM_Stop+0xb0>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800773e:	e023      	b.n	8007788 <HAL_TIM_PWM_Stop+0xf8>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d104      	bne.n	8007750 <HAL_TIM_PWM_Stop+0xc0>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800774e:	e01b      	b.n	8007788 <HAL_TIM_PWM_Stop+0xf8>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b08      	cmp	r3, #8
 8007754:	d104      	bne.n	8007760 <HAL_TIM_PWM_Stop+0xd0>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800775e:	e013      	b.n	8007788 <HAL_TIM_PWM_Stop+0xf8>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b0c      	cmp	r3, #12
 8007764:	d104      	bne.n	8007770 <HAL_TIM_PWM_Stop+0xe0>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800776e:	e00b      	b.n	8007788 <HAL_TIM_PWM_Stop+0xf8>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b10      	cmp	r3, #16
 8007774:	d104      	bne.n	8007780 <HAL_TIM_PWM_Stop+0xf0>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800777e:	e003      	b.n	8007788 <HAL_TIM_PWM_Stop+0xf8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40012c00 	.word	0x40012c00
 8007798:	40014000 	.word	0x40014000
 800779c:	40014400 	.word	0x40014400

080077a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d122      	bne.n	80077fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d11b      	bne.n	80077fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0202 	mvn.w	r2, #2
 80077cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa1a 	bl	8007c1c <HAL_TIM_IC_CaptureCallback>
 80077e8:	e005      	b.n	80077f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa0c 	bl	8007c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fa1d 	bl	8007c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b04      	cmp	r3, #4
 8007808:	d122      	bne.n	8007850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b04      	cmp	r3, #4
 8007816:	d11b      	bne.n	8007850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0204 	mvn.w	r2, #4
 8007820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2202      	movs	r2, #2
 8007826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f9f0 	bl	8007c1c <HAL_TIM_IC_CaptureCallback>
 800783c:	e005      	b.n	800784a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f9e2 	bl	8007c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f9f3 	bl	8007c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b08      	cmp	r3, #8
 800785c:	d122      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b08      	cmp	r3, #8
 800786a:	d11b      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0208 	mvn.w	r2, #8
 8007874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2204      	movs	r2, #4
 800787a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9c6 	bl	8007c1c <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f9b8 	bl	8007c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f9c9 	bl	8007c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d122      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d11b      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0210 	mvn.w	r2, #16
 80078c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2208      	movs	r2, #8
 80078ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f99c 	bl	8007c1c <HAL_TIM_IC_CaptureCallback>
 80078e4:	e005      	b.n	80078f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f98e 	bl	8007c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f99f 	bl	8007c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b01      	cmp	r3, #1
 8007904:	d10e      	bne.n	8007924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b01      	cmp	r3, #1
 8007912:	d107      	bne.n	8007924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0201 	mvn.w	r2, #1
 800791c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fb fe38 	bl	8003594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b80      	cmp	r3, #128	; 0x80
 8007930:	d10e      	bne.n	8007950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793c:	2b80      	cmp	r3, #128	; 0x80
 800793e:	d107      	bne.n	8007950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fd74 	bl	8008438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795e:	d10e      	bne.n	800797e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796a:	2b80      	cmp	r3, #128	; 0x80
 800796c:	d107      	bne.n	800797e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fd67 	bl	800844c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007988:	2b40      	cmp	r3, #64	; 0x40
 800798a:	d10e      	bne.n	80079aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007996:	2b40      	cmp	r3, #64	; 0x40
 8007998:	d107      	bne.n	80079aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f94d 	bl	8007c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b20      	cmp	r3, #32
 80079b6:	d10e      	bne.n	80079d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	d107      	bne.n	80079d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f06f 0220 	mvn.w	r2, #32
 80079ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fd27 	bl	8008424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079d6:	bf00      	nop
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e0ff      	b.n	8007bfe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b14      	cmp	r3, #20
 8007a0a:	f200 80f0 	bhi.w	8007bee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a0e:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a69 	.word	0x08007a69
 8007a18:	08007bef 	.word	0x08007bef
 8007a1c:	08007bef 	.word	0x08007bef
 8007a20:	08007bef 	.word	0x08007bef
 8007a24:	08007aa9 	.word	0x08007aa9
 8007a28:	08007bef 	.word	0x08007bef
 8007a2c:	08007bef 	.word	0x08007bef
 8007a30:	08007bef 	.word	0x08007bef
 8007a34:	08007aeb 	.word	0x08007aeb
 8007a38:	08007bef 	.word	0x08007bef
 8007a3c:	08007bef 	.word	0x08007bef
 8007a40:	08007bef 	.word	0x08007bef
 8007a44:	08007b2b 	.word	0x08007b2b
 8007a48:	08007bef 	.word	0x08007bef
 8007a4c:	08007bef 	.word	0x08007bef
 8007a50:	08007bef 	.word	0x08007bef
 8007a54:	08007b6d 	.word	0x08007b6d
 8007a58:	08007bef 	.word	0x08007bef
 8007a5c:	08007bef 	.word	0x08007bef
 8007a60:	08007bef 	.word	0x08007bef
 8007a64:	08007bad 	.word	0x08007bad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 f956 	bl	8007d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699a      	ldr	r2, [r3, #24]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0208 	orr.w	r2, r2, #8
 8007a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699a      	ldr	r2, [r3, #24]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0204 	bic.w	r2, r2, #4
 8007a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6999      	ldr	r1, [r3, #24]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	619a      	str	r2, [r3, #24]
      break;
 8007aa6:	e0a5      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f9b2 	bl	8007e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6999      	ldr	r1, [r3, #24]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	021a      	lsls	r2, r3, #8
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	619a      	str	r2, [r3, #24]
      break;
 8007ae8:	e084      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fa0b 	bl	8007f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69da      	ldr	r2, [r3, #28]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0208 	orr.w	r2, r2, #8
 8007b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0204 	bic.w	r2, r2, #4
 8007b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69d9      	ldr	r1, [r3, #28]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	61da      	str	r2, [r3, #28]
      break;
 8007b28:	e064      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68b9      	ldr	r1, [r7, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fa63 	bl	8007ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69da      	ldr	r2, [r3, #28]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69d9      	ldr	r1, [r3, #28]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	021a      	lsls	r2, r3, #8
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	61da      	str	r2, [r3, #28]
      break;
 8007b6a:	e043      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 faa0 	bl	80080b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0208 	orr.w	r2, r2, #8
 8007b86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0204 	bic.w	r2, r2, #4
 8007b96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007baa:	e023      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fad8 	bl	8008168 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	021a      	lsls	r2, r3, #8
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007bec:	e002      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop

08007c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <TIM_Base_SetConfig+0xbc>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d003      	beq.n	8007c78 <TIM_Base_SetConfig+0x20>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c76:	d108      	bne.n	8007c8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a21      	ldr	r2, [pc, #132]	; (8007d14 <TIM_Base_SetConfig+0xbc>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00b      	beq.n	8007caa <TIM_Base_SetConfig+0x52>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c98:	d007      	beq.n	8007caa <TIM_Base_SetConfig+0x52>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <TIM_Base_SetConfig+0xc0>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d003      	beq.n	8007caa <TIM_Base_SetConfig+0x52>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a1d      	ldr	r2, [pc, #116]	; (8007d1c <TIM_Base_SetConfig+0xc4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d108      	bne.n	8007cbc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a0c      	ldr	r2, [pc, #48]	; (8007d14 <TIM_Base_SetConfig+0xbc>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d007      	beq.n	8007cf8 <TIM_Base_SetConfig+0xa0>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a0b      	ldr	r2, [pc, #44]	; (8007d18 <TIM_Base_SetConfig+0xc0>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_Base_SetConfig+0xa0>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <TIM_Base_SetConfig+0xc4>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d103      	bne.n	8007d00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	691a      	ldr	r2, [r3, #16]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	615a      	str	r2, [r3, #20]
}
 8007d06:	bf00      	nop
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	40012c00 	.word	0x40012c00
 8007d18:	40014000 	.word	0x40014000
 8007d1c:	40014400 	.word	0x40014400

08007d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	f023 0201 	bic.w	r2, r3, #1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f023 0302 	bic.w	r3, r3, #2
 8007d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a24      	ldr	r2, [pc, #144]	; (8007e0c <TIM_OC1_SetConfig+0xec>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d007      	beq.n	8007d90 <TIM_OC1_SetConfig+0x70>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a23      	ldr	r2, [pc, #140]	; (8007e10 <TIM_OC1_SetConfig+0xf0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d003      	beq.n	8007d90 <TIM_OC1_SetConfig+0x70>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a22      	ldr	r2, [pc, #136]	; (8007e14 <TIM_OC1_SetConfig+0xf4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d10c      	bne.n	8007daa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f023 0308 	bic.w	r3, r3, #8
 8007d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f023 0304 	bic.w	r3, r3, #4
 8007da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a17      	ldr	r2, [pc, #92]	; (8007e0c <TIM_OC1_SetConfig+0xec>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d007      	beq.n	8007dc2 <TIM_OC1_SetConfig+0xa2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a16      	ldr	r2, [pc, #88]	; (8007e10 <TIM_OC1_SetConfig+0xf0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_OC1_SetConfig+0xa2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a15      	ldr	r2, [pc, #84]	; (8007e14 <TIM_OC1_SetConfig+0xf4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d111      	bne.n	8007de6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	621a      	str	r2, [r3, #32]
}
 8007e00:	bf00      	nop
 8007e02:	371c      	adds	r7, #28
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	40012c00 	.word	0x40012c00
 8007e10:	40014000 	.word	0x40014000
 8007e14:	40014400 	.word	0x40014400

08007e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	f023 0210 	bic.w	r2, r3, #16
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f023 0320 	bic.w	r3, r3, #32
 8007e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a22      	ldr	r2, [pc, #136]	; (8007f00 <TIM_OC2_SetConfig+0xe8>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d10d      	bne.n	8007e98 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a19      	ldr	r2, [pc, #100]	; (8007f00 <TIM_OC2_SetConfig+0xe8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_OC2_SetConfig+0x98>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a18      	ldr	r2, [pc, #96]	; (8007f04 <TIM_OC2_SetConfig+0xec>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_OC2_SetConfig+0x98>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a17      	ldr	r2, [pc, #92]	; (8007f08 <TIM_OC2_SetConfig+0xf0>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d113      	bne.n	8007ed8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	621a      	str	r2, [r3, #32]
}
 8007ef2:	bf00      	nop
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40014000 	.word	0x40014000
 8007f08:	40014400 	.word	0x40014400

08007f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a21      	ldr	r2, [pc, #132]	; (8007ff0 <TIM_OC3_SetConfig+0xe4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d10d      	bne.n	8007f8a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a18      	ldr	r2, [pc, #96]	; (8007ff0 <TIM_OC3_SetConfig+0xe4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d007      	beq.n	8007fa2 <TIM_OC3_SetConfig+0x96>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a17      	ldr	r2, [pc, #92]	; (8007ff4 <TIM_OC3_SetConfig+0xe8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d003      	beq.n	8007fa2 <TIM_OC3_SetConfig+0x96>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a16      	ldr	r2, [pc, #88]	; (8007ff8 <TIM_OC3_SetConfig+0xec>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d113      	bne.n	8007fca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	621a      	str	r2, [r3, #32]
}
 8007fe4:	bf00      	nop
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	40012c00 	.word	0x40012c00
 8007ff4:	40014000 	.word	0x40014000
 8007ff8:	40014400 	.word	0x40014400

08007ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800802a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	4313      	orrs	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800804a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	031b      	lsls	r3, r3, #12
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a14      	ldr	r2, [pc, #80]	; (80080ac <TIM_OC4_SetConfig+0xb0>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d007      	beq.n	8008070 <TIM_OC4_SetConfig+0x74>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a13      	ldr	r2, [pc, #76]	; (80080b0 <TIM_OC4_SetConfig+0xb4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <TIM_OC4_SetConfig+0x74>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a12      	ldr	r2, [pc, #72]	; (80080b4 <TIM_OC4_SetConfig+0xb8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d109      	bne.n	8008084 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	019b      	lsls	r3, r3, #6
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	40012c00 	.word	0x40012c00
 80080b0:	40014000 	.word	0x40014000
 80080b4:	40014400 	.word	0x40014400

080080b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80080fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a13      	ldr	r2, [pc, #76]	; (800815c <TIM_OC5_SetConfig+0xa4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d007      	beq.n	8008122 <TIM_OC5_SetConfig+0x6a>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a12      	ldr	r2, [pc, #72]	; (8008160 <TIM_OC5_SetConfig+0xa8>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d003      	beq.n	8008122 <TIM_OC5_SetConfig+0x6a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a11      	ldr	r2, [pc, #68]	; (8008164 <TIM_OC5_SetConfig+0xac>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d109      	bne.n	8008136 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008128:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	621a      	str	r2, [r3, #32]
}
 8008150:	bf00      	nop
 8008152:	371c      	adds	r7, #28
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	40012c00 	.word	0x40012c00
 8008160:	40014000 	.word	0x40014000
 8008164:	40014400 	.word	0x40014400

08008168 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008168:	b480      	push	{r7}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	051b      	lsls	r3, r3, #20
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a14      	ldr	r2, [pc, #80]	; (8008210 <TIM_OC6_SetConfig+0xa8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d007      	beq.n	80081d4 <TIM_OC6_SetConfig+0x6c>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a13      	ldr	r2, [pc, #76]	; (8008214 <TIM_OC6_SetConfig+0xac>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d003      	beq.n	80081d4 <TIM_OC6_SetConfig+0x6c>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a12      	ldr	r2, [pc, #72]	; (8008218 <TIM_OC6_SetConfig+0xb0>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d109      	bne.n	80081e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	029b      	lsls	r3, r3, #10
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	621a      	str	r2, [r3, #32]
}
 8008202:	bf00      	nop
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40012c00 	.word	0x40012c00
 8008214:	40014000 	.word	0x40014000
 8008218:	40014400 	.word	0x40014400

0800821c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f003 031f 	and.w	r3, r3, #31
 800822e:	2201      	movs	r2, #1
 8008230:	fa02 f303 	lsl.w	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a1a      	ldr	r2, [r3, #32]
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	43db      	mvns	r3, r3
 800823e:	401a      	ands	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a1a      	ldr	r2, [r3, #32]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 031f 	and.w	r3, r3, #31
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	fa01 f303 	lsl.w	r3, r1, r3
 8008254:	431a      	orrs	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	621a      	str	r2, [r3, #32]
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
	...

08008268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008278:	2b01      	cmp	r3, #1
 800827a:	d101      	bne.n	8008280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800827c:	2302      	movs	r3, #2
 800827e:	e04f      	b.n	8008320 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a21      	ldr	r2, [pc, #132]	; (800832c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d108      	bne.n	80082bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a14      	ldr	r2, [pc, #80]	; (800832c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d009      	beq.n	80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e8:	d004      	beq.n	80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a10      	ldr	r2, [pc, #64]	; (8008330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d10c      	bne.n	800830e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	4313      	orrs	r3, r2
 8008304:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	40012c00 	.word	0x40012c00
 8008330:	40014000 	.word	0x40014000

08008334 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008348:	2b01      	cmp	r3, #1
 800834a:	d101      	bne.n	8008350 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800834c:	2302      	movs	r3, #2
 800834e:	e060      	b.n	8008412 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4313      	orrs	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	041b      	lsls	r3, r3, #16
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a14      	ldr	r2, [pc, #80]	; (8008420 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d115      	bne.n	8008400 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	051b      	lsls	r3, r3, #20
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	40012c00 	.word	0x40012c00

08008424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e040      	b.n	80084f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7fb f9fe 	bl	8003884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2224      	movs	r2, #36	; 0x24
 800848c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0201 	bic.w	r2, r2, #1
 800849c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fc1e 	bl	8008ce0 <UART_SetConfig>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d101      	bne.n	80084ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e022      	b.n	80084f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fe46 	bl	8009148 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0201 	orr.w	r2, r2, #1
 80084ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fecd 	bl	800928c <UART_CheckIdleState>
 80084f2:	4603      	mov	r3, r0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08a      	sub	sp, #40	; 0x28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	4613      	mov	r3, r2
 8008508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800850e:	2b20      	cmp	r3, #32
 8008510:	d178      	bne.n	8008604 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <HAL_UART_Transmit_DMA+0x22>
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e071      	b.n	8008606 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_UART_Transmit_DMA+0x34>
 800852c:	2302      	movs	r3, #2
 800852e:	e06a      	b.n	8008606 <HAL_UART_Transmit_DMA+0x10a>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	88fa      	ldrh	r2, [r7, #6]
 8008542:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	88fa      	ldrh	r2, [r7, #6]
 800854a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2221      	movs	r2, #33	; 0x21
 800855a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d02b      	beq.n	80085bc <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008568:	4a29      	ldr	r2, [pc, #164]	; (8008610 <HAL_UART_Transmit_DMA+0x114>)
 800856a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008570:	4a28      	ldr	r2, [pc, #160]	; (8008614 <HAL_UART_Transmit_DMA+0x118>)
 8008572:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008578:	4a27      	ldr	r2, [pc, #156]	; (8008618 <HAL_UART_Transmit_DMA+0x11c>)
 800857a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008580:	2200      	movs	r2, #0
 8008582:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858c:	4619      	mov	r1, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3328      	adds	r3, #40	; 0x28
 8008594:	461a      	mov	r2, r3
 8008596:	88fb      	ldrh	r3, [r7, #6]
 8008598:	f7fc febc 	bl	8005314 <HAL_DMA_Start_IT>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2210      	movs	r2, #16
 80085a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2220      	movs	r2, #32
 80085b6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e024      	b.n	8008606 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2240      	movs	r2, #64	; 0x40
 80085c2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3308      	adds	r3, #8
 80085d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	613b      	str	r3, [r7, #16]
   return(result);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3308      	adds	r3, #8
 80085ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ec:	623a      	str	r2, [r7, #32]
 80085ee:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	69f9      	ldr	r1, [r7, #28]
 80085f2:	6a3a      	ldr	r2, [r7, #32]
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e5      	bne.n	80085cc <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	e000      	b.n	8008606 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008604:	2302      	movs	r3, #2
  }
}
 8008606:	4618      	mov	r0, r3
 8008608:	3728      	adds	r7, #40	; 0x28
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	08009707 	.word	0x08009707
 8008614:	080097a1 	.word	0x080097a1
 8008618:	08009919 	.word	0x08009919

0800861c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	; 0x28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800862e:	2b20      	cmp	r3, #32
 8008630:	d142      	bne.n	80086b8 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <HAL_UART_Receive_DMA+0x22>
 8008638:	88fb      	ldrh	r3, [r7, #6]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e03b      	b.n	80086ba <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_UART_Receive_DMA+0x34>
 800864c:	2302      	movs	r3, #2
 800864e:	e034      	b.n	80086ba <HAL_UART_Receive_DMA+0x9e>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a18      	ldr	r2, [pc, #96]	; (80086c4 <HAL_UART_Receive_DMA+0xa8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d01f      	beq.n	80086a8 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d018      	beq.n	80086a8 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	613b      	str	r3, [r7, #16]
   return(result);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	461a      	mov	r2, r3
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	623b      	str	r3, [r7, #32]
 8008696:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	69f9      	ldr	r1, [r7, #28]
 800869a:	6a3a      	ldr	r2, [r7, #32]
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e6      	bne.n	8008676 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	461a      	mov	r2, r3
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 fefa 	bl	80094a8 <UART_Start_Receive_DMA>
 80086b4:	4603      	mov	r3, r0
 80086b6:	e000      	b.n	80086ba <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80086b8:	2302      	movs	r3, #2
  }
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3728      	adds	r7, #40	; 0x28
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40008000 	.word	0x40008000

080086c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b0ba      	sub	sp, #232	; 0xe8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80086f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80086f6:	4013      	ands	r3, r2
 80086f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80086fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008700:	2b00      	cmp	r3, #0
 8008702:	d115      	bne.n	8008730 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008708:	f003 0320 	and.w	r3, r3, #32
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00f      	beq.n	8008730 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008714:	f003 0320 	and.w	r3, r3, #32
 8008718:	2b00      	cmp	r3, #0
 800871a:	d009      	beq.n	8008730 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 82a6 	beq.w	8008c72 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
      }
      return;
 800872e:	e2a0      	b.n	8008c72 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 8117 	beq.w	8008968 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800873a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008746:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800874a:	4b85      	ldr	r3, [pc, #532]	; (8008960 <HAL_UART_IRQHandler+0x298>)
 800874c:	4013      	ands	r3, r2
 800874e:	2b00      	cmp	r3, #0
 8008750:	f000 810a 	beq.w	8008968 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	2b00      	cmp	r3, #0
 800875e:	d011      	beq.n	8008784 <HAL_UART_IRQHandler+0xbc>
 8008760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2201      	movs	r2, #1
 8008772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800877a:	f043 0201 	orr.w	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d011      	beq.n	80087b4 <HAL_UART_IRQHandler+0xec>
 8008790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2202      	movs	r2, #2
 80087a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087aa:	f043 0204 	orr.w	r2, r3, #4
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d011      	beq.n	80087e4 <HAL_UART_IRQHandler+0x11c>
 80087c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00b      	beq.n	80087e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2204      	movs	r2, #4
 80087d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087da:	f043 0202 	orr.w	r2, r3, #2
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d017      	beq.n	8008820 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80087f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d105      	bne.n	8008808 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80087fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008800:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00b      	beq.n	8008820 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2208      	movs	r2, #8
 800880e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008816:	f043 0208 	orr.w	r2, r3, #8
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008828:	2b00      	cmp	r3, #0
 800882a:	d012      	beq.n	8008852 <HAL_UART_IRQHandler+0x18a>
 800882c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00c      	beq.n	8008852 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008848:	f043 0220 	orr.w	r2, r3, #32
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 820c 	beq.w	8008c76 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800885e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008862:	f003 0320 	and.w	r3, r3, #32
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00d      	beq.n	8008886 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800886a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	d007      	beq.n	8008886 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800888c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889a:	2b40      	cmp	r3, #64	; 0x40
 800889c:	d005      	beq.n	80088aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800889e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d04f      	beq.n	800894a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fec8 	bl	8009640 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ba:	2b40      	cmp	r3, #64	; 0x40
 80088bc:	d141      	bne.n	8008942 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3308      	adds	r3, #8
 80088c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80088d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3308      	adds	r3, #8
 80088e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80088ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80088ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1d9      	bne.n	80088be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890e:	2b00      	cmp	r3, #0
 8008910:	d013      	beq.n	800893a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008916:	4a13      	ldr	r2, [pc, #76]	; (8008964 <HAL_UART_IRQHandler+0x29c>)
 8008918:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891e:	4618      	mov	r0, r3
 8008920:	f7fc fd96 	bl	8005450 <HAL_DMA_Abort_IT>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d017      	beq.n	800895a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008938:	e00f      	b.n	800895a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f9ba 	bl	8008cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008940:	e00b      	b.n	800895a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f9b6 	bl	8008cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008948:	e007      	b.n	800895a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f9b2 	bl	8008cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008958:	e18d      	b.n	8008c76 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895a:	bf00      	nop
    return;
 800895c:	e18b      	b.n	8008c76 <HAL_UART_IRQHandler+0x5ae>
 800895e:	bf00      	nop
 8008960:	04000120 	.word	0x04000120
 8008964:	08009995 	.word	0x08009995

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800896c:	2b01      	cmp	r3, #1
 800896e:	f040 8146 	bne.w	8008bfe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008976:	f003 0310 	and.w	r3, r3, #16
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 813f 	beq.w	8008bfe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8138 	beq.w	8008bfe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2210      	movs	r2, #16
 8008994:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a0:	2b40      	cmp	r3, #64	; 0x40
 80089a2:	f040 80b4 	bne.w	8008b0e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 815f 	beq.w	8008c7a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80089c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089c6:	429a      	cmp	r2, r3
 80089c8:	f080 8157 	bcs.w	8008c7a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 8085 	bne.w	8008af2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80089fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008a16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1da      	bne.n	80089e8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3308      	adds	r3, #8
 8008a38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a44:	f023 0301 	bic.w	r3, r3, #1
 8008a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3308      	adds	r3, #8
 8008a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a62:	e841 2300 	strex	r3, r2, [r1]
 8008a66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1e1      	bne.n	8008a32 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e3      	bne.n	8008a6e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac2:	f023 0310 	bic.w	r3, r3, #16
 8008ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ad4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ad6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ada:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008adc:	e841 2300 	strex	r3, r2, [r1]
 8008ae0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e4      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fc fc71 	bl	80053d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f8de 	bl	8008cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b0c:	e0b5      	b.n	8008c7a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 80a7 	beq.w	8008c7e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008b30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 80a2 	beq.w	8008c7e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e4      	bne.n	8008b3a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3308      	adds	r3, #8
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	e853 3f00 	ldrex	r3, [r3]
 8008b7e:	623b      	str	r3, [r7, #32]
   return(result);
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	f023 0301 	bic.w	r3, r3, #1
 8008b86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3308      	adds	r3, #8
 8008b90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b94:	633a      	str	r2, [r7, #48]	; 0x30
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b9c:	e841 2300 	strex	r3, r2, [r1]
 8008ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e3      	bne.n	8008b70 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0310 	bic.w	r3, r3, #16
 8008bce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008bdc:	61fb      	str	r3, [r7, #28]
 8008bde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	69b9      	ldr	r1, [r7, #24]
 8008be2:	69fa      	ldr	r2, [r7, #28]
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e4      	bne.n	8008bba <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f866 	bl	8008cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bfc:	e03f      	b.n	8008c7e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00e      	beq.n	8008c28 <HAL_UART_IRQHandler+0x560>
 8008c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d008      	beq.n	8008c28 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008c1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fef7 	bl	8009a14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c26:	e02d      	b.n	8008c84 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00e      	beq.n	8008c52 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d008      	beq.n	8008c52 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01c      	beq.n	8008c82 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	4798      	blx	r3
    }
    return;
 8008c50:	e017      	b.n	8008c82 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d012      	beq.n	8008c84 <HAL_UART_IRQHandler+0x5bc>
 8008c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00c      	beq.n	8008c84 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fea8 	bl	80099c0 <UART_EndTransmit_IT>
    return;
 8008c70:	e008      	b.n	8008c84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008c72:	bf00      	nop
 8008c74:	e006      	b.n	8008c84 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008c76:	bf00      	nop
 8008c78:	e004      	b.n	8008c84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008c7a:	bf00      	nop
 8008c7c:	e002      	b.n	8008c84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008c7e:	bf00      	nop
 8008c80:	e000      	b.n	8008c84 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008c82:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008c84:	37e8      	adds	r7, #232	; 0xe8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop

08008c8c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ce0:	b5b0      	push	{r4, r5, r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4baa      	ldr	r3, [pc, #680]	; (8008fb4 <UART_SetConfig+0x2d4>)
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	69f9      	ldr	r1, [r7, #28]
 8008d14:	430b      	orrs	r3, r1
 8008d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a9f      	ldr	r2, [pc, #636]	; (8008fb8 <UART_SetConfig+0x2d8>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d004      	beq.n	8008d48 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69fa      	ldr	r2, [r7, #28]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a96      	ldr	r2, [pc, #600]	; (8008fbc <UART_SetConfig+0x2dc>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d121      	bne.n	8008daa <UART_SetConfig+0xca>
 8008d66:	4b96      	ldr	r3, [pc, #600]	; (8008fc0 <UART_SetConfig+0x2e0>)
 8008d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d6c:	f003 0303 	and.w	r3, r3, #3
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d817      	bhi.n	8008da4 <UART_SetConfig+0xc4>
 8008d74:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <UART_SetConfig+0x9c>)
 8008d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008d8d 	.word	0x08008d8d
 8008d80:	08008d99 	.word	0x08008d99
 8008d84:	08008d93 	.word	0x08008d93
 8008d88:	08008d9f 	.word	0x08008d9f
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	76fb      	strb	r3, [r7, #27]
 8008d90:	e096      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008d92:	2302      	movs	r3, #2
 8008d94:	76fb      	strb	r3, [r7, #27]
 8008d96:	e093      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008d98:	2304      	movs	r3, #4
 8008d9a:	76fb      	strb	r3, [r7, #27]
 8008d9c:	e090      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008d9e:	2308      	movs	r3, #8
 8008da0:	76fb      	strb	r3, [r7, #27]
 8008da2:	e08d      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008da4:	2310      	movs	r3, #16
 8008da6:	76fb      	strb	r3, [r7, #27]
 8008da8:	e08a      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a85      	ldr	r2, [pc, #532]	; (8008fc4 <UART_SetConfig+0x2e4>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d132      	bne.n	8008e1a <UART_SetConfig+0x13a>
 8008db4:	4b82      	ldr	r3, [pc, #520]	; (8008fc0 <UART_SetConfig+0x2e0>)
 8008db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dba:	f003 030c 	and.w	r3, r3, #12
 8008dbe:	2b0c      	cmp	r3, #12
 8008dc0:	d828      	bhi.n	8008e14 <UART_SetConfig+0x134>
 8008dc2:	a201      	add	r2, pc, #4	; (adr r2, 8008dc8 <UART_SetConfig+0xe8>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008dfd 	.word	0x08008dfd
 8008dcc:	08008e15 	.word	0x08008e15
 8008dd0:	08008e15 	.word	0x08008e15
 8008dd4:	08008e15 	.word	0x08008e15
 8008dd8:	08008e09 	.word	0x08008e09
 8008ddc:	08008e15 	.word	0x08008e15
 8008de0:	08008e15 	.word	0x08008e15
 8008de4:	08008e15 	.word	0x08008e15
 8008de8:	08008e03 	.word	0x08008e03
 8008dec:	08008e15 	.word	0x08008e15
 8008df0:	08008e15 	.word	0x08008e15
 8008df4:	08008e15 	.word	0x08008e15
 8008df8:	08008e0f 	.word	0x08008e0f
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	76fb      	strb	r3, [r7, #27]
 8008e00:	e05e      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008e02:	2302      	movs	r3, #2
 8008e04:	76fb      	strb	r3, [r7, #27]
 8008e06:	e05b      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008e08:	2304      	movs	r3, #4
 8008e0a:	76fb      	strb	r3, [r7, #27]
 8008e0c:	e058      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008e0e:	2308      	movs	r3, #8
 8008e10:	76fb      	strb	r3, [r7, #27]
 8008e12:	e055      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008e14:	2310      	movs	r3, #16
 8008e16:	76fb      	strb	r3, [r7, #27]
 8008e18:	e052      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a6a      	ldr	r2, [pc, #424]	; (8008fc8 <UART_SetConfig+0x2e8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d120      	bne.n	8008e66 <UART_SetConfig+0x186>
 8008e24:	4b66      	ldr	r3, [pc, #408]	; (8008fc0 <UART_SetConfig+0x2e0>)
 8008e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e2e:	2b30      	cmp	r3, #48	; 0x30
 8008e30:	d013      	beq.n	8008e5a <UART_SetConfig+0x17a>
 8008e32:	2b30      	cmp	r3, #48	; 0x30
 8008e34:	d814      	bhi.n	8008e60 <UART_SetConfig+0x180>
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	d009      	beq.n	8008e4e <UART_SetConfig+0x16e>
 8008e3a:	2b20      	cmp	r3, #32
 8008e3c:	d810      	bhi.n	8008e60 <UART_SetConfig+0x180>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <UART_SetConfig+0x168>
 8008e42:	2b10      	cmp	r3, #16
 8008e44:	d006      	beq.n	8008e54 <UART_SetConfig+0x174>
 8008e46:	e00b      	b.n	8008e60 <UART_SetConfig+0x180>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	76fb      	strb	r3, [r7, #27]
 8008e4c:	e038      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	76fb      	strb	r3, [r7, #27]
 8008e52:	e035      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008e54:	2304      	movs	r3, #4
 8008e56:	76fb      	strb	r3, [r7, #27]
 8008e58:	e032      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008e5a:	2308      	movs	r3, #8
 8008e5c:	76fb      	strb	r3, [r7, #27]
 8008e5e:	e02f      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008e60:	2310      	movs	r3, #16
 8008e62:	76fb      	strb	r3, [r7, #27]
 8008e64:	e02c      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a53      	ldr	r2, [pc, #332]	; (8008fb8 <UART_SetConfig+0x2d8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d125      	bne.n	8008ebc <UART_SetConfig+0x1dc>
 8008e70:	4b53      	ldr	r3, [pc, #332]	; (8008fc0 <UART_SetConfig+0x2e0>)
 8008e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e7e:	d017      	beq.n	8008eb0 <UART_SetConfig+0x1d0>
 8008e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e84:	d817      	bhi.n	8008eb6 <UART_SetConfig+0x1d6>
 8008e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e8a:	d00b      	beq.n	8008ea4 <UART_SetConfig+0x1c4>
 8008e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e90:	d811      	bhi.n	8008eb6 <UART_SetConfig+0x1d6>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <UART_SetConfig+0x1be>
 8008e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e9a:	d006      	beq.n	8008eaa <UART_SetConfig+0x1ca>
 8008e9c:	e00b      	b.n	8008eb6 <UART_SetConfig+0x1d6>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	76fb      	strb	r3, [r7, #27]
 8008ea2:	e00d      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	76fb      	strb	r3, [r7, #27]
 8008ea8:	e00a      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008eaa:	2304      	movs	r3, #4
 8008eac:	76fb      	strb	r3, [r7, #27]
 8008eae:	e007      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	76fb      	strb	r3, [r7, #27]
 8008eb4:	e004      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008eb6:	2310      	movs	r3, #16
 8008eb8:	76fb      	strb	r3, [r7, #27]
 8008eba:	e001      	b.n	8008ec0 <UART_SetConfig+0x1e0>
 8008ebc:	2310      	movs	r3, #16
 8008ebe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a3c      	ldr	r2, [pc, #240]	; (8008fb8 <UART_SetConfig+0x2d8>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	f040 8082 	bne.w	8008fd0 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ecc:	7efb      	ldrb	r3, [r7, #27]
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	d823      	bhi.n	8008f1a <UART_SetConfig+0x23a>
 8008ed2:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <UART_SetConfig+0x1f8>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008efd 	.word	0x08008efd
 8008edc:	08008f1b 	.word	0x08008f1b
 8008ee0:	08008f05 	.word	0x08008f05
 8008ee4:	08008f1b 	.word	0x08008f1b
 8008ee8:	08008f0b 	.word	0x08008f0b
 8008eec:	08008f1b 	.word	0x08008f1b
 8008ef0:	08008f1b 	.word	0x08008f1b
 8008ef4:	08008f1b 	.word	0x08008f1b
 8008ef8:	08008f13 	.word	0x08008f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008efc:	f7fd fe1e 	bl	8006b3c <HAL_RCC_GetPCLK1Freq>
 8008f00:	6178      	str	r0, [r7, #20]
        break;
 8008f02:	e00f      	b.n	8008f24 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f04:	4b31      	ldr	r3, [pc, #196]	; (8008fcc <UART_SetConfig+0x2ec>)
 8008f06:	617b      	str	r3, [r7, #20]
        break;
 8008f08:	e00c      	b.n	8008f24 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f0a:	f7fd fd7f 	bl	8006a0c <HAL_RCC_GetSysClockFreq>
 8008f0e:	6178      	str	r0, [r7, #20]
        break;
 8008f10:	e008      	b.n	8008f24 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f16:	617b      	str	r3, [r7, #20]
        break;
 8008f18:	e004      	b.n	8008f24 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	76bb      	strb	r3, [r7, #26]
        break;
 8008f22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 8100 	beq.w	800912c <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	4613      	mov	r3, r2
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	4413      	add	r3, r2
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d305      	bcc.n	8008f48 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d902      	bls.n	8008f4e <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	76bb      	strb	r3, [r7, #26]
 8008f4c:	e0ee      	b.n	800912c <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f04f 0100 	mov.w	r1, #0
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	f04f 0300 	mov.w	r3, #0
 8008f5e:	020b      	lsls	r3, r1, #8
 8008f60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f64:	0202      	lsls	r2, r0, #8
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	6849      	ldr	r1, [r1, #4]
 8008f6a:	0849      	lsrs	r1, r1, #1
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	f04f 0100 	mov.w	r1, #0
 8008f72:	1814      	adds	r4, r2, r0
 8008f74:	eb43 0501 	adc.w	r5, r3, r1
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f04f 0300 	mov.w	r3, #0
 8008f82:	4620      	mov	r0, r4
 8008f84:	4629      	mov	r1, r5
 8008f86:	f7f7 fe7f 	bl	8000c88 <__aeabi_uldivmod>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4613      	mov	r3, r2
 8008f90:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f98:	d308      	bcc.n	8008fac <UART_SetConfig+0x2cc>
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fa0:	d204      	bcs.n	8008fac <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	60da      	str	r2, [r3, #12]
 8008faa:	e0bf      	b.n	800912c <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	76bb      	strb	r3, [r7, #26]
 8008fb0:	e0bc      	b.n	800912c <UART_SetConfig+0x44c>
 8008fb2:	bf00      	nop
 8008fb4:	efff69f3 	.word	0xefff69f3
 8008fb8:	40008000 	.word	0x40008000
 8008fbc:	40013800 	.word	0x40013800
 8008fc0:	40021000 	.word	0x40021000
 8008fc4:	40004400 	.word	0x40004400
 8008fc8:	40004800 	.word	0x40004800
 8008fcc:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fd8:	d15b      	bne.n	8009092 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8008fda:	7efb      	ldrb	r3, [r7, #27]
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d828      	bhi.n	8009032 <UART_SetConfig+0x352>
 8008fe0:	a201      	add	r2, pc, #4	; (adr r2, 8008fe8 <UART_SetConfig+0x308>)
 8008fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe6:	bf00      	nop
 8008fe8:	0800900d 	.word	0x0800900d
 8008fec:	08009015 	.word	0x08009015
 8008ff0:	0800901d 	.word	0x0800901d
 8008ff4:	08009033 	.word	0x08009033
 8008ff8:	08009023 	.word	0x08009023
 8008ffc:	08009033 	.word	0x08009033
 8009000:	08009033 	.word	0x08009033
 8009004:	08009033 	.word	0x08009033
 8009008:	0800902b 	.word	0x0800902b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800900c:	f7fd fd96 	bl	8006b3c <HAL_RCC_GetPCLK1Freq>
 8009010:	6178      	str	r0, [r7, #20]
        break;
 8009012:	e013      	b.n	800903c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009014:	f7fd fda8 	bl	8006b68 <HAL_RCC_GetPCLK2Freq>
 8009018:	6178      	str	r0, [r7, #20]
        break;
 800901a:	e00f      	b.n	800903c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800901c:	4b49      	ldr	r3, [pc, #292]	; (8009144 <UART_SetConfig+0x464>)
 800901e:	617b      	str	r3, [r7, #20]
        break;
 8009020:	e00c      	b.n	800903c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009022:	f7fd fcf3 	bl	8006a0c <HAL_RCC_GetSysClockFreq>
 8009026:	6178      	str	r0, [r7, #20]
        break;
 8009028:	e008      	b.n	800903c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800902a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800902e:	617b      	str	r3, [r7, #20]
        break;
 8009030:	e004      	b.n	800903c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	76bb      	strb	r3, [r7, #26]
        break;
 800903a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d074      	beq.n	800912c <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	005a      	lsls	r2, r3, #1
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	085b      	lsrs	r3, r3, #1
 800904c:	441a      	add	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	fbb2 f3f3 	udiv	r3, r2, r3
 8009056:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2b0f      	cmp	r3, #15
 800905c:	d916      	bls.n	800908c <UART_SetConfig+0x3ac>
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009064:	d212      	bcs.n	800908c <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	b29b      	uxth	r3, r3
 800906a:	f023 030f 	bic.w	r3, r3, #15
 800906e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	085b      	lsrs	r3, r3, #1
 8009074:	b29b      	uxth	r3, r3
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	b29a      	uxth	r2, r3
 800907c:	89fb      	ldrh	r3, [r7, #14]
 800907e:	4313      	orrs	r3, r2
 8009080:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	89fa      	ldrh	r2, [r7, #14]
 8009088:	60da      	str	r2, [r3, #12]
 800908a:	e04f      	b.n	800912c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	76bb      	strb	r3, [r7, #26]
 8009090:	e04c      	b.n	800912c <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009092:	7efb      	ldrb	r3, [r7, #27]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d828      	bhi.n	80090ea <UART_SetConfig+0x40a>
 8009098:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <UART_SetConfig+0x3c0>)
 800909a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909e:	bf00      	nop
 80090a0:	080090c5 	.word	0x080090c5
 80090a4:	080090cd 	.word	0x080090cd
 80090a8:	080090d5 	.word	0x080090d5
 80090ac:	080090eb 	.word	0x080090eb
 80090b0:	080090db 	.word	0x080090db
 80090b4:	080090eb 	.word	0x080090eb
 80090b8:	080090eb 	.word	0x080090eb
 80090bc:	080090eb 	.word	0x080090eb
 80090c0:	080090e3 	.word	0x080090e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090c4:	f7fd fd3a 	bl	8006b3c <HAL_RCC_GetPCLK1Freq>
 80090c8:	6178      	str	r0, [r7, #20]
        break;
 80090ca:	e013      	b.n	80090f4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090cc:	f7fd fd4c 	bl	8006b68 <HAL_RCC_GetPCLK2Freq>
 80090d0:	6178      	str	r0, [r7, #20]
        break;
 80090d2:	e00f      	b.n	80090f4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090d4:	4b1b      	ldr	r3, [pc, #108]	; (8009144 <UART_SetConfig+0x464>)
 80090d6:	617b      	str	r3, [r7, #20]
        break;
 80090d8:	e00c      	b.n	80090f4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090da:	f7fd fc97 	bl	8006a0c <HAL_RCC_GetSysClockFreq>
 80090de:	6178      	str	r0, [r7, #20]
        break;
 80090e0:	e008      	b.n	80090f4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090e6:	617b      	str	r3, [r7, #20]
        break;
 80090e8:	e004      	b.n	80090f4 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	76bb      	strb	r3, [r7, #26]
        break;
 80090f2:	bf00      	nop
    }

    if (pclk != 0U)
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d018      	beq.n	800912c <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	085a      	lsrs	r2, r3, #1
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	441a      	add	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	fbb2 f3f3 	udiv	r3, r2, r3
 800910c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b0f      	cmp	r3, #15
 8009112:	d909      	bls.n	8009128 <UART_SetConfig+0x448>
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800911a:	d205      	bcs.n	8009128 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	b29a      	uxth	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60da      	str	r2, [r3, #12]
 8009126:	e001      	b.n	800912c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009138:	7ebb      	ldrb	r3, [r7, #26]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3720      	adds	r7, #32
 800913e:	46bd      	mov	sp, r7
 8009140:	bdb0      	pop	{r4, r5, r7, pc}
 8009142:	bf00      	nop
 8009144:	00f42400 	.word	0x00f42400

08009148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00a      	beq.n	8009172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	430a      	orrs	r2, r1
 8009192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ba:	f003 0308 	and.w	r3, r3, #8
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	f003 0310 	and.w	r3, r3, #16
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00a      	beq.n	80091fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01a      	beq.n	800925e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009246:	d10a      	bne.n	800925e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	430a      	orrs	r2, r1
 800927e:	605a      	str	r2, [r3, #4]
  }
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af02      	add	r7, sp, #8
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800929c:	f7fa fd84 	bl	8003da8 <HAL_GetTick>
 80092a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d10e      	bne.n	80092ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f82d 	bl	800931e <UART_WaitOnFlagUntilTimeout>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e023      	b.n	8009316 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0304 	and.w	r3, r3, #4
 80092d8:	2b04      	cmp	r3, #4
 80092da:	d10e      	bne.n	80092fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f817 	bl	800931e <UART_WaitOnFlagUntilTimeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e00d      	b.n	8009316 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2220      	movs	r2, #32
 80092fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b09c      	sub	sp, #112	; 0x70
 8009322:	af00      	add	r7, sp, #0
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	60b9      	str	r1, [r7, #8]
 8009328:	603b      	str	r3, [r7, #0]
 800932a:	4613      	mov	r3, r2
 800932c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800932e:	e0a5      	b.n	800947c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009336:	f000 80a1 	beq.w	800947c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800933a:	f7fa fd35 	bl	8003da8 <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009346:	429a      	cmp	r2, r3
 8009348:	d302      	bcc.n	8009350 <UART_WaitOnFlagUntilTimeout+0x32>
 800934a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800934c:	2b00      	cmp	r3, #0
 800934e:	d13e      	bne.n	80093ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800935e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009364:	667b      	str	r3, [r7, #100]	; 0x64
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800936e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009370:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800937c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e6      	bne.n	8009350 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3308      	adds	r3, #8
 8009388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938c:	e853 3f00 	ldrex	r3, [r3]
 8009390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	f023 0301 	bic.w	r3, r3, #1
 8009398:	663b      	str	r3, [r7, #96]	; 0x60
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3308      	adds	r3, #8
 80093a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80093a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093aa:	e841 2300 	strex	r3, r2, [r1]
 80093ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80093b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1e5      	bne.n	8009382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2220      	movs	r2, #32
 80093ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2220      	movs	r2, #32
 80093c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e067      	b.n	800949e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d04f      	beq.n	800947c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ea:	d147      	bne.n	800947c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800940a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009414:	637b      	str	r3, [r7, #52]	; 0x34
 8009416:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800941a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e6      	bne.n	80093f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3308      	adds	r3, #8
 800942e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	613b      	str	r3, [r7, #16]
   return(result);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f023 0301 	bic.w	r3, r3, #1
 800943e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3308      	adds	r3, #8
 8009446:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009448:	623a      	str	r2, [r7, #32]
 800944a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	69f9      	ldr	r1, [r7, #28]
 800944e:	6a3a      	ldr	r2, [r7, #32]
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	61bb      	str	r3, [r7, #24]
   return(result);
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e5      	bne.n	8009428 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2220      	movs	r2, #32
 8009460:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2220      	movs	r2, #32
 8009466:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2220      	movs	r2, #32
 800946c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e010      	b.n	800949e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69da      	ldr	r2, [r3, #28]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	4013      	ands	r3, r2
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	429a      	cmp	r2, r3
 800948a:	bf0c      	ite	eq
 800948c:	2301      	moveq	r3, #1
 800948e:	2300      	movne	r3, #0
 8009490:	b2db      	uxtb	r3, r3
 8009492:	461a      	mov	r2, r3
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	429a      	cmp	r2, r3
 8009498:	f43f af4a 	beq.w	8009330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3770      	adds	r7, #112	; 0x70
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b096      	sub	sp, #88	; 0x58
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	4613      	mov	r3, r2
 80094b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	88fa      	ldrh	r2, [r7, #6]
 80094c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2222      	movs	r2, #34	; 0x22
 80094d0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d02b      	beq.n	8009532 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094de:	4a42      	ldr	r2, [pc, #264]	; (80095e8 <UART_Start_Receive_DMA+0x140>)
 80094e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e6:	4a41      	ldr	r2, [pc, #260]	; (80095ec <UART_Start_Receive_DMA+0x144>)
 80094e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ee:	4a40      	ldr	r2, [pc, #256]	; (80095f0 <UART_Start_Receive_DMA+0x148>)
 80094f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f6:	2200      	movs	r2, #0
 80094f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3324      	adds	r3, #36	; 0x24
 8009504:	4619      	mov	r1, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950a:	461a      	mov	r2, r3
 800950c:	88fb      	ldrh	r3, [r7, #6]
 800950e:	f7fb ff01 	bl	8005314 <HAL_DMA_Start_IT>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00c      	beq.n	8009532 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2210      	movs	r2, #16
 800951c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2220      	movs	r2, #32
 800952c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e055      	b.n	80095de <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d018      	beq.n	8009574 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954a:	e853 3f00 	ldrex	r3, [r3]
 800954e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009556:	657b      	str	r3, [r7, #84]	; 0x54
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	461a      	mov	r2, r3
 800955e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009560:	64bb      	str	r3, [r7, #72]	; 0x48
 8009562:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800956e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e6      	bne.n	8009542 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3308      	adds	r3, #8
 800957a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	f043 0301 	orr.w	r3, r3, #1
 800958a:	653b      	str	r3, [r7, #80]	; 0x50
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3308      	adds	r3, #8
 8009592:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009594:	637a      	str	r2, [r7, #52]	; 0x34
 8009596:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800959a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800959c:	e841 2300 	strex	r3, r2, [r1]
 80095a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e5      	bne.n	8009574 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3308      	adds	r3, #8
 80095ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	e853 3f00 	ldrex	r3, [r3]
 80095b6:	613b      	str	r3, [r7, #16]
   return(result);
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3308      	adds	r3, #8
 80095c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095c8:	623a      	str	r2, [r7, #32]
 80095ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095cc:	69f9      	ldr	r1, [r7, #28]
 80095ce:	6a3a      	ldr	r2, [r7, #32]
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e5      	bne.n	80095a8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3758      	adds	r7, #88	; 0x58
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	080097bd 	.word	0x080097bd
 80095ec:	080098e1 	.word	0x080098e1
 80095f0:	08009919 	.word	0x08009919

080095f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b089      	sub	sp, #36	; 0x24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	e853 3f00 	ldrex	r3, [r3]
 8009608:	60bb      	str	r3, [r7, #8]
   return(result);
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009610:	61fb      	str	r3, [r7, #28]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	61bb      	str	r3, [r7, #24]
 800961c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961e:	6979      	ldr	r1, [r7, #20]
 8009620:	69ba      	ldr	r2, [r7, #24]
 8009622:	e841 2300 	strex	r3, r2, [r1]
 8009626:	613b      	str	r3, [r7, #16]
   return(result);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1e6      	bne.n	80095fc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2220      	movs	r2, #32
 8009632:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009634:	bf00      	nop
 8009636:	3724      	adds	r7, #36	; 0x24
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b095      	sub	sp, #84	; 0x54
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800965c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009666:	643b      	str	r3, [r7, #64]	; 0x40
 8009668:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800966c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e6      	bne.n	8009648 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3308      	adds	r3, #8
 8009680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	61fb      	str	r3, [r7, #28]
   return(result);
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	f023 0301 	bic.w	r3, r3, #1
 8009690:	64bb      	str	r3, [r7, #72]	; 0x48
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3308      	adds	r3, #8
 8009698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800969a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800969c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e5      	bne.n	800967a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d118      	bne.n	80096e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f023 0310 	bic.w	r3, r3, #16
 80096ca:	647b      	str	r3, [r7, #68]	; 0x44
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	6979      	ldr	r1, [r7, #20]
 80096da:	69ba      	ldr	r2, [r7, #24]
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	613b      	str	r3, [r7, #16]
   return(result);
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e6      	bne.n	80096b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2220      	movs	r2, #32
 80096ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80096fa:	bf00      	nop
 80096fc:	3754      	adds	r7, #84	; 0x54
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b090      	sub	sp, #64	; 0x40
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009712:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0320 	and.w	r3, r3, #32
 800971e:	2b00      	cmp	r3, #0
 8009720:	d137      	bne.n	8009792 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009724:	2200      	movs	r2, #0
 8009726:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800972a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3308      	adds	r3, #8
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	623b      	str	r3, [r7, #32]
   return(result);
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009740:	63bb      	str	r3, [r7, #56]	; 0x38
 8009742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3308      	adds	r3, #8
 8009748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800974a:	633a      	str	r2, [r7, #48]	; 0x30
 800974c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e5      	bne.n	800972a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800975e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	60fb      	str	r3, [r7, #12]
   return(result);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
 8009774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977c:	61fb      	str	r3, [r7, #28]
 800977e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	69b9      	ldr	r1, [r7, #24]
 8009782:	69fa      	ldr	r2, [r7, #28]
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	617b      	str	r3, [r7, #20]
   return(result);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e6      	bne.n	800975e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009790:	e002      	b.n	8009798 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009792:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009794:	f7f9 f92a 	bl	80029ec <HAL_UART_TxCpltCallback>
}
 8009798:	bf00      	nop
 800979a:	3740      	adds	r7, #64	; 0x40
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f7ff fa6c 	bl	8008c8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b09c      	sub	sp, #112	; 0x70
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0320 	and.w	r3, r3, #32
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d170      	bne.n	80098ba <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80097d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097da:	2200      	movs	r2, #0
 80097dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e8:	e853 3f00 	ldrex	r3, [r3]
 80097ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80097f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8009800:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009804:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800980c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e6      	bne.n	80097e0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009824:	f023 0301 	bic.w	r3, r3, #1
 8009828:	667b      	str	r3, [r7, #100]	; 0x64
 800982a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3308      	adds	r3, #8
 8009830:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009832:	647a      	str	r2, [r7, #68]	; 0x44
 8009834:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e5      	bne.n	8009812 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3308      	adds	r3, #8
 800984c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	623b      	str	r3, [r7, #32]
   return(result);
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800985c:	663b      	str	r3, [r7, #96]	; 0x60
 800985e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3308      	adds	r3, #8
 8009864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009866:	633a      	str	r2, [r7, #48]	; 0x30
 8009868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800986c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e5      	bne.n	8009846 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800987a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987c:	2220      	movs	r2, #32
 800987e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009884:	2b01      	cmp	r3, #1
 8009886:	d118      	bne.n	80098ba <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	60fb      	str	r3, [r7, #12]
   return(result);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f023 0310 	bic.w	r3, r3, #16
 800989c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800989e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	69b9      	ldr	r1, [r7, #24]
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	617b      	str	r3, [r7, #20]
   return(result);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e6      	bne.n	8009888 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d107      	bne.n	80098d2 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80098c8:	4619      	mov	r1, r3
 80098ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80098cc:	f7ff f9fc 	bl	8008cc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098d0:	e002      	b.n	80098d8 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80098d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80098d4:	f7f8 ffbe 	bl	8002854 <HAL_UART_RxCpltCallback>
}
 80098d8:	bf00      	nop
 80098da:	3770      	adds	r7, #112	; 0x70
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d109      	bne.n	800990a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80098fc:	085b      	lsrs	r3, r3, #1
 80098fe:	b29b      	uxth	r3, r3
 8009900:	4619      	mov	r1, r3
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f7ff f9e0 	bl	8008cc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009908:	e002      	b.n	8009910 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7ff f9c8 	bl	8008ca0 <HAL_UART_RxHalfCpltCallback>
}
 8009910:	bf00      	nop
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009924:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800992a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009930:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800993c:	2b80      	cmp	r3, #128	; 0x80
 800993e:	d109      	bne.n	8009954 <UART_DMAError+0x3c>
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	2b21      	cmp	r3, #33	; 0x21
 8009944:	d106      	bne.n	8009954 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2200      	movs	r2, #0
 800994a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800994e:	6978      	ldr	r0, [r7, #20]
 8009950:	f7ff fe50 	bl	80095f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800995e:	2b40      	cmp	r3, #64	; 0x40
 8009960:	d109      	bne.n	8009976 <UART_DMAError+0x5e>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b22      	cmp	r3, #34	; 0x22
 8009966:	d106      	bne.n	8009976 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	2200      	movs	r2, #0
 800996c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009970:	6978      	ldr	r0, [r7, #20]
 8009972:	f7ff fe65 	bl	8009640 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800997c:	f043 0210 	orr.w	r2, r3, #16
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009986:	6978      	ldr	r0, [r7, #20]
 8009988:	f7ff f994 	bl	8008cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800998c:	bf00      	nop
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f7ff f97e 	bl	8008cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	e853 3f00 	ldrex	r3, [r3]
 80099d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099dc:	61fb      	str	r3, [r7, #28]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	61bb      	str	r3, [r7, #24]
 80099e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	6979      	ldr	r1, [r7, #20]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	e841 2300 	strex	r3, r2, [r1]
 80099f2:	613b      	str	r3, [r7, #16]
   return(result);
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1e6      	bne.n	80099c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2220      	movs	r2, #32
 80099fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7f8 fff0 	bl	80029ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a0c:	bf00      	nop
 8009a0e:	3720      	adds	r7, #32
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <__NVIC_SetPriority>:
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	6039      	str	r1, [r7, #0]
 8009a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	db0a      	blt.n	8009a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	490c      	ldr	r1, [pc, #48]	; (8009a74 <__NVIC_SetPriority+0x4c>)
 8009a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a46:	0112      	lsls	r2, r2, #4
 8009a48:	b2d2      	uxtb	r2, r2
 8009a4a:	440b      	add	r3, r1
 8009a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a50:	e00a      	b.n	8009a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	4908      	ldr	r1, [pc, #32]	; (8009a78 <__NVIC_SetPriority+0x50>)
 8009a58:	79fb      	ldrb	r3, [r7, #7]
 8009a5a:	f003 030f 	and.w	r3, r3, #15
 8009a5e:	3b04      	subs	r3, #4
 8009a60:	0112      	lsls	r2, r2, #4
 8009a62:	b2d2      	uxtb	r2, r2
 8009a64:	440b      	add	r3, r1
 8009a66:	761a      	strb	r2, [r3, #24]
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	e000e100 	.word	0xe000e100
 8009a78:	e000ed00 	.word	0xe000ed00

08009a7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a80:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <SysTick_Handler+0x1c>)
 8009a82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a84:	f001 fe52 	bl	800b72c <xTaskGetSchedulerState>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d001      	beq.n	8009a92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a8e:	f002 fd1b 	bl	800c4c8 <xPortSysTickHandler>
  }
}
 8009a92:	bf00      	nop
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	e000e010 	.word	0xe000e010

08009a9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	f06f 0004 	mvn.w	r0, #4
 8009aa6:	f7ff ffbf 	bl	8009a28 <__NVIC_SetPriority>
#endif
}
 8009aaa:	bf00      	nop
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ab6:	f3ef 8305 	mrs	r3, IPSR
 8009aba:	603b      	str	r3, [r7, #0]
  return(result);
 8009abc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009ac2:	f06f 0305 	mvn.w	r3, #5
 8009ac6:	607b      	str	r3, [r7, #4]
 8009ac8:	e00c      	b.n	8009ae4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009aca:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <osKernelInitialize+0x44>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d105      	bne.n	8009ade <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ad2:	4b08      	ldr	r3, [pc, #32]	; (8009af4 <osKernelInitialize+0x44>)
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	607b      	str	r3, [r7, #4]
 8009adc:	e002      	b.n	8009ae4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009ade:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ae4:	687b      	ldr	r3, [r7, #4]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20000268 	.word	0x20000268

08009af8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009afe:	f3ef 8305 	mrs	r3, IPSR
 8009b02:	603b      	str	r3, [r7, #0]
  return(result);
 8009b04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b0a:	f06f 0305 	mvn.w	r3, #5
 8009b0e:	607b      	str	r3, [r7, #4]
 8009b10:	e010      	b.n	8009b34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b12:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <osKernelStart+0x48>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d109      	bne.n	8009b2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b1a:	f7ff ffbf 	bl	8009a9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b1e:	4b08      	ldr	r3, [pc, #32]	; (8009b40 <osKernelStart+0x48>)
 8009b20:	2202      	movs	r2, #2
 8009b22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b24:	f001 f978 	bl	800ae18 <vTaskStartScheduler>
      stat = osOK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	607b      	str	r3, [r7, #4]
 8009b2c:	e002      	b.n	8009b34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b34:	687b      	ldr	r3, [r7, #4]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000268 	.word	0x20000268

08009b44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08e      	sub	sp, #56	; 0x38
 8009b48:	af04      	add	r7, sp, #16
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b54:	f3ef 8305 	mrs	r3, IPSR
 8009b58:	617b      	str	r3, [r7, #20]
  return(result);
 8009b5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d17f      	bne.n	8009c60 <osThreadNew+0x11c>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d07c      	beq.n	8009c60 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8009b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b6a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b6c:	2318      	movs	r3, #24
 8009b6e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
 8009b78:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d045      	beq.n	8009c0c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d002      	beq.n	8009b8e <osThreadNew+0x4a>
        name = attr->name;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d008      	beq.n	8009bb4 <osThreadNew+0x70>
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	2b38      	cmp	r3, #56	; 0x38
 8009ba6:	d805      	bhi.n	8009bb4 <osThreadNew+0x70>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <osThreadNew+0x74>
        return (NULL);
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e054      	b.n	8009c62 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d003      	beq.n	8009bc8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	089b      	lsrs	r3, r3, #2
 8009bc6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00e      	beq.n	8009bee <osThreadNew+0xaa>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	2bbf      	cmp	r3, #191	; 0xbf
 8009bd6:	d90a      	bls.n	8009bee <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d006      	beq.n	8009bee <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <osThreadNew+0xaa>
        mem = 1;
 8009be8:	2301      	movs	r3, #1
 8009bea:	61bb      	str	r3, [r7, #24]
 8009bec:	e010      	b.n	8009c10 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10c      	bne.n	8009c10 <osThreadNew+0xcc>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d108      	bne.n	8009c10 <osThreadNew+0xcc>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d104      	bne.n	8009c10 <osThreadNew+0xcc>
          mem = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	61bb      	str	r3, [r7, #24]
 8009c0a:	e001      	b.n	8009c10 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d110      	bne.n	8009c38 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c1e:	9202      	str	r2, [sp, #8]
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	6a3a      	ldr	r2, [r7, #32]
 8009c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f000 ff03 	bl	800aa38 <xTaskCreateStatic>
 8009c32:	4603      	mov	r3, r0
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	e013      	b.n	8009c60 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d110      	bne.n	8009c60 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	f107 0310 	add.w	r3, r7, #16
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 ff4e 	bl	800aaf2 <xTaskCreate>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d001      	beq.n	8009c60 <osThreadNew+0x11c>
            hTask = NULL;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c60:	693b      	ldr	r3, [r7, #16]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3728      	adds	r7, #40	; 0x28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c72:	f3ef 8305 	mrs	r3, IPSR
 8009c76:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <osDelay+0x1c>
    stat = osErrorISR;
 8009c7e:	f06f 0305 	mvn.w	r3, #5
 8009c82:	60fb      	str	r3, [r7, #12]
 8009c84:	e007      	b.n	8009c96 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f001 f88d 	bl	800adb0 <vTaskDelay>
    }
  }

  return (stat);
 8009c96:	68fb      	ldr	r3, [r7, #12]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f002 fa30 	bl	800c10e <pvTimerGetTimerID>
 8009cae:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	6852      	ldr	r2, [r2, #4]
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	4798      	blx	r3
  }
}
 8009cc2:	bf00      	nop
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08c      	sub	sp, #48	; 0x30
 8009cd0:	af02      	add	r7, sp, #8
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	607a      	str	r2, [r7, #4]
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ce0:	f3ef 8305 	mrs	r3, IPSR
 8009ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8009ce6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d163      	bne.n	8009db4 <osTimerNew+0xe8>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d060      	beq.n	8009db4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009cf2:	2008      	movs	r0, #8
 8009cf4:	f002 fc78 	bl	800c5e8 <pvPortMalloc>
 8009cf8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d059      	beq.n	8009db4 <osTimerNew+0xe8>
      callb->func = func;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009d0c:	7afb      	ldrb	r3, [r7, #11]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d102      	bne.n	8009d18 <osTimerNew+0x4c>
        reload = pdFALSE;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	e001      	b.n	8009d1c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d20:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009d22:	2300      	movs	r3, #0
 8009d24:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d01c      	beq.n	8009d66 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <osTimerNew+0x6e>
          name = attr->name;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d006      	beq.n	8009d50 <osTimerNew+0x84>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2b2b      	cmp	r3, #43	; 0x2b
 8009d48:	d902      	bls.n	8009d50 <osTimerNew+0x84>
          mem = 1;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	61bb      	str	r3, [r7, #24]
 8009d4e:	e00c      	b.n	8009d6a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d108      	bne.n	8009d6a <osTimerNew+0x9e>
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d104      	bne.n	8009d6a <osTimerNew+0x9e>
            mem = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	61bb      	str	r3, [r7, #24]
 8009d64:	e001      	b.n	8009d6a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d10c      	bne.n	8009d8a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	4b12      	ldr	r3, [pc, #72]	; (8009dc0 <osTimerNew+0xf4>)
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	2101      	movs	r1, #1
 8009d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d82:	f001 fe1c 	bl	800b9be <xTimerCreateStatic>
 8009d86:	6238      	str	r0, [r7, #32]
 8009d88:	e00b      	b.n	8009da2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d108      	bne.n	8009da2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009d90:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <osTimerNew+0xf4>)
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	2101      	movs	r1, #1
 8009d9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d9c:	f001 fdee 	bl	800b97c <xTimerCreate>
 8009da0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d105      	bne.n	8009db4 <osTimerNew+0xe8>
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d002      	beq.n	8009db4 <osTimerNew+0xe8>
        vPortFree (callb);
 8009dae:	6978      	ldr	r0, [r7, #20]
 8009db0:	f002 fce6 	bl	800c780 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009db4:	6a3b      	ldr	r3, [r7, #32]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3728      	adds	r7, #40	; 0x28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	08009ca1 	.word	0x08009ca1

08009dc4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af02      	add	r7, sp, #8
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dd2:	f3ef 8305 	mrs	r3, IPSR
 8009dd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <osTimerStart+0x22>
    stat = osErrorISR;
 8009dde:	f06f 0305 	mvn.w	r3, #5
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	e017      	b.n	8009e16 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d103      	bne.n	8009df4 <osTimerStart+0x30>
    stat = osErrorParameter;
 8009dec:	f06f 0303 	mvn.w	r3, #3
 8009df0:	617b      	str	r3, [r7, #20]
 8009df2:	e010      	b.n	8009e16 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009df4:	2300      	movs	r3, #0
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	2104      	movs	r1, #4
 8009dfe:	6938      	ldr	r0, [r7, #16]
 8009e00:	f001 fe56 	bl	800bab0 <xTimerGenericCommand>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d102      	bne.n	8009e10 <osTimerStart+0x4c>
      stat = osOK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	617b      	str	r3, [r7, #20]
 8009e0e:	e002      	b.n	8009e16 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009e10:	f06f 0302 	mvn.w	r3, #2
 8009e14:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009e16:	697b      	ldr	r3, [r7, #20]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b088      	sub	sp, #32
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e2c:	f3ef 8305 	mrs	r3, IPSR
 8009e30:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e32:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <osTimerStop+0x20>
    stat = osErrorISR;
 8009e38:	f06f 0305 	mvn.w	r3, #5
 8009e3c:	617b      	str	r3, [r7, #20]
 8009e3e:	e021      	b.n	8009e84 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d103      	bne.n	8009e4e <osTimerStop+0x2e>
    stat = osErrorParameter;
 8009e46:	f06f 0303 	mvn.w	r3, #3
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	e01a      	b.n	8009e84 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8009e4e:	6938      	ldr	r0, [r7, #16]
 8009e50:	f002 f934 	bl	800c0bc <xTimerIsTimerActive>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d103      	bne.n	8009e62 <osTimerStop+0x42>
      stat = osErrorResource;
 8009e5a:	f06f 0302 	mvn.w	r3, #2
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	e010      	b.n	8009e84 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8009e62:	2300      	movs	r3, #0
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	2300      	movs	r3, #0
 8009e68:	2200      	movs	r2, #0
 8009e6a:	2103      	movs	r1, #3
 8009e6c:	6938      	ldr	r0, [r7, #16]
 8009e6e:	f001 fe1f 	bl	800bab0 <xTimerGenericCommand>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d102      	bne.n	8009e7e <osTimerStop+0x5e>
        stat = osOK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	617b      	str	r3, [r7, #20]
 8009e7c:	e002      	b.n	8009e84 <osTimerStop+0x64>
      } else {
        stat = osError;
 8009e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e82:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009e84:	697b      	ldr	r3, [r7, #20]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
	...

08009e90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4a07      	ldr	r2, [pc, #28]	; (8009ebc <vApplicationGetIdleTaskMemory+0x2c>)
 8009ea0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	4a06      	ldr	r2, [pc, #24]	; (8009ec0 <vApplicationGetIdleTaskMemory+0x30>)
 8009ea6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009eae:	601a      	str	r2, [r3, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	2000026c 	.word	0x2000026c
 8009ec0:	2000032c 	.word	0x2000032c

08009ec4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4a07      	ldr	r2, [pc, #28]	; (8009ef0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ed4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	4a06      	ldr	r2, [pc, #24]	; (8009ef4 <vApplicationGetTimerTaskMemory+0x30>)
 8009eda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ee2:	601a      	str	r2, [r3, #0]
}
 8009ee4:	bf00      	nop
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	2000132c 	.word	0x2000132c
 8009ef4:	200013ec 	.word	0x200013ec

08009ef8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f103 0208 	add.w	r2, r3, #8
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f103 0208 	add.w	r2, r3, #8
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f103 0208 	add.w	r2, r3, #8
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f46:	bf00      	nop
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f52:	b480      	push	{r7}
 8009f54:	b085      	sub	sp, #20
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	689a      	ldr	r2, [r3, #8]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	601a      	str	r2, [r3, #0]
}
 8009f8e:	bf00      	nop
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	b085      	sub	sp, #20
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb0:	d103      	bne.n	8009fba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	e00c      	b.n	8009fd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	60fb      	str	r3, [r7, #12]
 8009fc0:	e002      	b.n	8009fc8 <vListInsert+0x2e>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d2f6      	bcs.n	8009fc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	601a      	str	r2, [r3, #0]
}
 800a000:	bf00      	nop
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	6892      	ldr	r2, [r2, #8]
 800a022:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	6852      	ldr	r2, [r2, #4]
 800a02c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	429a      	cmp	r2, r3
 800a036:	d103      	bne.n	800a040 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	689a      	ldr	r2, [r3, #8]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	1e5a      	subs	r2, r3, #1
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3714      	adds	r7, #20
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a08a:	f002 f98b 	bl	800c3a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a096:	68f9      	ldr	r1, [r7, #12]
 800a098:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a09a:	fb01 f303 	mul.w	r3, r1, r3
 800a09e:	441a      	add	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	68f9      	ldr	r1, [r7, #12]
 800a0be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0c0:	fb01 f303 	mul.w	r3, r1, r3
 800a0c4:	441a      	add	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	22ff      	movs	r2, #255	; 0xff
 800a0ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	22ff      	movs	r2, #255	; 0xff
 800a0d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d114      	bne.n	800a10a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01a      	beq.n	800a11e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	3310      	adds	r3, #16
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f001 f95b 	bl	800b3a8 <xTaskRemoveFromEventList>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d012      	beq.n	800a11e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0f8:	4b0c      	ldr	r3, [pc, #48]	; (800a12c <xQueueGenericReset+0xcc>)
 800a0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	e009      	b.n	800a11e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3310      	adds	r3, #16
 800a10e:	4618      	mov	r0, r3
 800a110:	f7ff fef2 	bl	8009ef8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	3324      	adds	r3, #36	; 0x24
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff feed 	bl	8009ef8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a11e:	f002 f971 	bl	800c404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a122:	2301      	movs	r3, #1
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	e000ed04 	.word	0xe000ed04

0800a130 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08e      	sub	sp, #56	; 0x38
 800a134:	af02      	add	r7, sp, #8
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
 800a13c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10a      	bne.n	800a15a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a156:	bf00      	nop
 800a158:	e7fe      	b.n	800a158 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d002      	beq.n	800a182 <xQueueGenericCreateStatic+0x52>
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <xQueueGenericCreateStatic+0x56>
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <xQueueGenericCreateStatic+0x58>
 800a186:	2300      	movs	r3, #0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	623b      	str	r3, [r7, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d102      	bne.n	800a1ae <xQueueGenericCreateStatic+0x7e>
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <xQueueGenericCreateStatic+0x82>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e000      	b.n	800a1b4 <xQueueGenericCreateStatic+0x84>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10a      	bne.n	800a1ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	61fb      	str	r3, [r7, #28]
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a1ce:	2350      	movs	r3, #80	; 0x50
 800a1d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2b50      	cmp	r3, #80	; 0x50
 800a1d6:	d00a      	beq.n	800a1ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	61bb      	str	r3, [r7, #24]
}
 800a1ea:	bf00      	nop
 800a1ec:	e7fe      	b.n	800a1ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00d      	beq.n	800a216 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a202:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	4613      	mov	r3, r2
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	68b9      	ldr	r1, [r7, #8]
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f805 	bl	800a220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a218:	4618      	mov	r0, r3
 800a21a:	3730      	adds	r7, #48	; 0x30
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d103      	bne.n	800a23c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	e002      	b.n	800a242 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a24e:	2101      	movs	r1, #1
 800a250:	69b8      	ldr	r0, [r7, #24]
 800a252:	f7ff ff05 	bl	800a060 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	78fa      	ldrb	r2, [r7, #3]
 800a25a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
	...

0800a268 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08e      	sub	sp, #56	; 0x38
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a276:	2300      	movs	r3, #0
 800a278:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10a      	bne.n	800a29a <xQueueGenericSend+0x32>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d103      	bne.n	800a2a8 <xQueueGenericSend+0x40>
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <xQueueGenericSend+0x44>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e000      	b.n	800a2ae <xQueueGenericSend+0x46>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10a      	bne.n	800a2c8 <xQueueGenericSend+0x60>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2c4:	bf00      	nop
 800a2c6:	e7fe      	b.n	800a2c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d103      	bne.n	800a2d6 <xQueueGenericSend+0x6e>
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <xQueueGenericSend+0x72>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e000      	b.n	800a2dc <xQueueGenericSend+0x74>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	623b      	str	r3, [r7, #32]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2f6:	f001 fa19 	bl	800b72c <xTaskGetSchedulerState>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d102      	bne.n	800a306 <xQueueGenericSend+0x9e>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <xQueueGenericSend+0xa2>
 800a306:	2301      	movs	r3, #1
 800a308:	e000      	b.n	800a30c <xQueueGenericSend+0xa4>
 800a30a:	2300      	movs	r3, #0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10a      	bne.n	800a326 <xQueueGenericSend+0xbe>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	61fb      	str	r3, [r7, #28]
}
 800a322:	bf00      	nop
 800a324:	e7fe      	b.n	800a324 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a326:	f002 f83d 	bl	800c3a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a332:	429a      	cmp	r2, r3
 800a334:	d302      	bcc.n	800a33c <xQueueGenericSend+0xd4>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d129      	bne.n	800a390 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	68b9      	ldr	r1, [r7, #8]
 800a340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a342:	f000 fa0b 	bl	800a75c <prvCopyDataToQueue>
 800a346:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d010      	beq.n	800a372 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a352:	3324      	adds	r3, #36	; 0x24
 800a354:	4618      	mov	r0, r3
 800a356:	f001 f827 	bl	800b3a8 <xTaskRemoveFromEventList>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d013      	beq.n	800a388 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a360:	4b3f      	ldr	r3, [pc, #252]	; (800a460 <xQueueGenericSend+0x1f8>)
 800a362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	e00a      	b.n	800a388 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a374:	2b00      	cmp	r3, #0
 800a376:	d007      	beq.n	800a388 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a378:	4b39      	ldr	r3, [pc, #228]	; (800a460 <xQueueGenericSend+0x1f8>)
 800a37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a388:	f002 f83c 	bl	800c404 <vPortExitCritical>
				return pdPASS;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e063      	b.n	800a458 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d103      	bne.n	800a39e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a396:	f002 f835 	bl	800c404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e05c      	b.n	800a458 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d106      	bne.n	800a3b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3a4:	f107 0314 	add.w	r3, r7, #20
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f001 f861 	bl	800b470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3b2:	f002 f827 	bl	800c404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3b6:	f000 fda1 	bl	800aefc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3ba:	f001 fff3 	bl	800c3a4 <vPortEnterCritical>
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3c4:	b25b      	sxtb	r3, r3
 800a3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ca:	d103      	bne.n	800a3d4 <xQueueGenericSend+0x16c>
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3da:	b25b      	sxtb	r3, r3
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e0:	d103      	bne.n	800a3ea <xQueueGenericSend+0x182>
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3ea:	f002 f80b 	bl	800c404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3ee:	1d3a      	adds	r2, r7, #4
 800a3f0:	f107 0314 	add.w	r3, r7, #20
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f001 f850 	bl	800b49c <xTaskCheckForTimeOut>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d124      	bne.n	800a44c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a404:	f000 faa2 	bl	800a94c <prvIsQueueFull>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d018      	beq.n	800a440 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	3310      	adds	r3, #16
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	4611      	mov	r1, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f000 ff76 	bl	800b308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a41c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a41e:	f000 fa2d 	bl	800a87c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a422:	f000 fd79 	bl	800af18 <xTaskResumeAll>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f47f af7c 	bne.w	800a326 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a42e:	4b0c      	ldr	r3, [pc, #48]	; (800a460 <xQueueGenericSend+0x1f8>)
 800a430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	e772      	b.n	800a326 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a442:	f000 fa1b 	bl	800a87c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a446:	f000 fd67 	bl	800af18 <xTaskResumeAll>
 800a44a:	e76c      	b.n	800a326 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a44e:	f000 fa15 	bl	800a87c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a452:	f000 fd61 	bl	800af18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a456:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3738      	adds	r7, #56	; 0x38
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	e000ed04 	.word	0xe000ed04

0800a464 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b090      	sub	sp, #64	; 0x40
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10a      	bne.n	800a492 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a48e:	bf00      	nop
 800a490:	e7fe      	b.n	800a490 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d103      	bne.n	800a4a0 <xQueueGenericSendFromISR+0x3c>
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <xQueueGenericSendFromISR+0x40>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e000      	b.n	800a4a6 <xQueueGenericSendFromISR+0x42>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10a      	bne.n	800a4c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4bc:	bf00      	nop
 800a4be:	e7fe      	b.n	800a4be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d103      	bne.n	800a4ce <xQueueGenericSendFromISR+0x6a>
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d101      	bne.n	800a4d2 <xQueueGenericSendFromISR+0x6e>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e000      	b.n	800a4d4 <xQueueGenericSendFromISR+0x70>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10a      	bne.n	800a4ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	623b      	str	r3, [r7, #32]
}
 800a4ea:	bf00      	nop
 800a4ec:	e7fe      	b.n	800a4ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4ee:	f002 f83b 	bl	800c568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a4f2:	f3ef 8211 	mrs	r2, BASEPRI
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	61fa      	str	r2, [r7, #28]
 800a508:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a50a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a50c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a516:	429a      	cmp	r2, r3
 800a518:	d302      	bcc.n	800a520 <xQueueGenericSendFromISR+0xbc>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d12f      	bne.n	800a580 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	68b9      	ldr	r1, [r7, #8]
 800a534:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a536:	f000 f911 	bl	800a75c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a53a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a542:	d112      	bne.n	800a56a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d016      	beq.n	800a57a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	3324      	adds	r3, #36	; 0x24
 800a550:	4618      	mov	r0, r3
 800a552:	f000 ff29 	bl	800b3a8 <xTaskRemoveFromEventList>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00e      	beq.n	800a57a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00b      	beq.n	800a57a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	e007      	b.n	800a57a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a56a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a56e:	3301      	adds	r3, #1
 800a570:	b2db      	uxtb	r3, r3
 800a572:	b25a      	sxtb	r2, r3
 800a574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a57a:	2301      	movs	r3, #1
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a57e:	e001      	b.n	800a584 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a580:	2300      	movs	r3, #0
 800a582:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a586:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a58e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a592:	4618      	mov	r0, r3
 800a594:	3740      	adds	r7, #64	; 0x40
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08c      	sub	sp, #48	; 0x30
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10a      	bne.n	800a5cc <xQueueReceive+0x30>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	623b      	str	r3, [r7, #32]
}
 800a5c8:	bf00      	nop
 800a5ca:	e7fe      	b.n	800a5ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d103      	bne.n	800a5da <xQueueReceive+0x3e>
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <xQueueReceive+0x42>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e000      	b.n	800a5e0 <xQueueReceive+0x44>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10a      	bne.n	800a5fa <xQueueReceive+0x5e>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	61fb      	str	r3, [r7, #28]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5fa:	f001 f897 	bl	800b72c <xTaskGetSchedulerState>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d102      	bne.n	800a60a <xQueueReceive+0x6e>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <xQueueReceive+0x72>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <xQueueReceive+0x74>
 800a60e:	2300      	movs	r3, #0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <xQueueReceive+0x8e>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	61bb      	str	r3, [r7, #24]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a62a:	f001 febb 	bl	800c3a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a632:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	2b00      	cmp	r3, #0
 800a638:	d01f      	beq.n	800a67a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a63a:	68b9      	ldr	r1, [r7, #8]
 800a63c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a63e:	f000 f8f7 	bl	800a830 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	1e5a      	subs	r2, r3, #1
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00f      	beq.n	800a672 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	3310      	adds	r3, #16
 800a656:	4618      	mov	r0, r3
 800a658:	f000 fea6 	bl	800b3a8 <xTaskRemoveFromEventList>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d007      	beq.n	800a672 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a662:	4b3d      	ldr	r3, [pc, #244]	; (800a758 <xQueueReceive+0x1bc>)
 800a664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a672:	f001 fec7 	bl	800c404 <vPortExitCritical>
				return pdPASS;
 800a676:	2301      	movs	r3, #1
 800a678:	e069      	b.n	800a74e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d103      	bne.n	800a688 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a680:	f001 fec0 	bl	800c404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a684:	2300      	movs	r3, #0
 800a686:	e062      	b.n	800a74e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d106      	bne.n	800a69c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a68e:	f107 0310 	add.w	r3, r7, #16
 800a692:	4618      	mov	r0, r3
 800a694:	f000 feec 	bl	800b470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a698:	2301      	movs	r3, #1
 800a69a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a69c:	f001 feb2 	bl	800c404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6a0:	f000 fc2c 	bl	800aefc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6a4:	f001 fe7e 	bl	800c3a4 <vPortEnterCritical>
 800a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ae:	b25b      	sxtb	r3, r3
 800a6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b4:	d103      	bne.n	800a6be <xQueueReceive+0x122>
 800a6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6c4:	b25b      	sxtb	r3, r3
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ca:	d103      	bne.n	800a6d4 <xQueueReceive+0x138>
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6d4:	f001 fe96 	bl	800c404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6d8:	1d3a      	adds	r2, r7, #4
 800a6da:	f107 0310 	add.w	r3, r7, #16
 800a6de:	4611      	mov	r1, r2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 fedb 	bl	800b49c <xTaskCheckForTimeOut>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d123      	bne.n	800a734 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ee:	f000 f917 	bl	800a920 <prvIsQueueEmpty>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d017      	beq.n	800a728 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	3324      	adds	r3, #36	; 0x24
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	4611      	mov	r1, r2
 800a700:	4618      	mov	r0, r3
 800a702:	f000 fe01 	bl	800b308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a708:	f000 f8b8 	bl	800a87c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a70c:	f000 fc04 	bl	800af18 <xTaskResumeAll>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d189      	bne.n	800a62a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a716:	4b10      	ldr	r3, [pc, #64]	; (800a758 <xQueueReceive+0x1bc>)
 800a718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a71c:	601a      	str	r2, [r3, #0]
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	e780      	b.n	800a62a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a72a:	f000 f8a7 	bl	800a87c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a72e:	f000 fbf3 	bl	800af18 <xTaskResumeAll>
 800a732:	e77a      	b.n	800a62a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a736:	f000 f8a1 	bl	800a87c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a73a:	f000 fbed 	bl	800af18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a740:	f000 f8ee 	bl	800a920 <prvIsQueueEmpty>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	f43f af6f 	beq.w	800a62a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a74c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3730      	adds	r7, #48	; 0x30
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	e000ed04 	.word	0xe000ed04

0800a75c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a768:	2300      	movs	r3, #0
 800a76a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a770:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10d      	bne.n	800a796 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d14d      	bne.n	800a81e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	4618      	mov	r0, r3
 800a788:	f000 ffee 	bl	800b768 <xTaskPriorityDisinherit>
 800a78c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	609a      	str	r2, [r3, #8]
 800a794:	e043      	b.n	800a81e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d119      	bne.n	800a7d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6858      	ldr	r0, [r3, #4]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	68b9      	ldr	r1, [r7, #8]
 800a7a8:	f002 fa2b 	bl	800cc02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	441a      	add	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d32b      	bcc.n	800a81e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	605a      	str	r2, [r3, #4]
 800a7ce:	e026      	b.n	800a81e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	68d8      	ldr	r0, [r3, #12]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d8:	461a      	mov	r2, r3
 800a7da:	68b9      	ldr	r1, [r7, #8]
 800a7dc:	f002 fa11 	bl	800cc02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	68da      	ldr	r2, [r3, #12]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e8:	425b      	negs	r3, r3
 800a7ea:	441a      	add	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	68da      	ldr	r2, [r3, #12]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d207      	bcs.n	800a80c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a804:	425b      	negs	r3, r3
 800a806:	441a      	add	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d105      	bne.n	800a81e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	3b01      	subs	r3, #1
 800a81c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	1c5a      	adds	r2, r3, #1
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a826:	697b      	ldr	r3, [r7, #20]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d018      	beq.n	800a874 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68da      	ldr	r2, [r3, #12]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84a:	441a      	add	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68da      	ldr	r2, [r3, #12]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d303      	bcc.n	800a864 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68d9      	ldr	r1, [r3, #12]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86c:	461a      	mov	r2, r3
 800a86e:	6838      	ldr	r0, [r7, #0]
 800a870:	f002 f9c7 	bl	800cc02 <memcpy>
	}
}
 800a874:	bf00      	nop
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a884:	f001 fd8e 	bl	800c3a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a88e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a890:	e011      	b.n	800a8b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d012      	beq.n	800a8c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3324      	adds	r3, #36	; 0x24
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 fd82 	bl	800b3a8 <xTaskRemoveFromEventList>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8aa:	f000 fe59 	bl	800b560 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	dce9      	bgt.n	800a892 <prvUnlockQueue+0x16>
 800a8be:	e000      	b.n	800a8c2 <prvUnlockQueue+0x46>
					break;
 800a8c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	22ff      	movs	r2, #255	; 0xff
 800a8c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a8ca:	f001 fd9b 	bl	800c404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8ce:	f001 fd69 	bl	800c3a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8da:	e011      	b.n	800a900 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d012      	beq.n	800a90a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3310      	adds	r3, #16
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f000 fd5d 	bl	800b3a8 <xTaskRemoveFromEventList>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8f4:	f000 fe34 	bl	800b560 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a904:	2b00      	cmp	r3, #0
 800a906:	dce9      	bgt.n	800a8dc <prvUnlockQueue+0x60>
 800a908:	e000      	b.n	800a90c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a90a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	22ff      	movs	r2, #255	; 0xff
 800a910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a914:	f001 fd76 	bl	800c404 <vPortExitCritical>
}
 800a918:	bf00      	nop
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a928:	f001 fd3c 	bl	800c3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a930:	2b00      	cmp	r3, #0
 800a932:	d102      	bne.n	800a93a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a934:	2301      	movs	r3, #1
 800a936:	60fb      	str	r3, [r7, #12]
 800a938:	e001      	b.n	800a93e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a93e:	f001 fd61 	bl	800c404 <vPortExitCritical>

	return xReturn;
 800a942:	68fb      	ldr	r3, [r7, #12]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a954:	f001 fd26 	bl	800c3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a960:	429a      	cmp	r2, r3
 800a962:	d102      	bne.n	800a96a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a964:	2301      	movs	r3, #1
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	e001      	b.n	800a96e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a96e:	f001 fd49 	bl	800c404 <vPortExitCritical>

	return xReturn;
 800a972:	68fb      	ldr	r3, [r7, #12]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a986:	2300      	movs	r3, #0
 800a988:	60fb      	str	r3, [r7, #12]
 800a98a:	e014      	b.n	800a9b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a98c:	4a0f      	ldr	r2, [pc, #60]	; (800a9cc <vQueueAddToRegistry+0x50>)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10b      	bne.n	800a9b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a998:	490c      	ldr	r1, [pc, #48]	; (800a9cc <vQueueAddToRegistry+0x50>)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9a2:	4a0a      	ldr	r2, [pc, #40]	; (800a9cc <vQueueAddToRegistry+0x50>)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	00db      	lsls	r3, r3, #3
 800a9a8:	4413      	add	r3, r2
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9ae:	e006      	b.n	800a9be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b07      	cmp	r3, #7
 800a9ba:	d9e7      	bls.n	800a98c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	20006288 	.word	0x20006288

0800a9d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9e0:	f001 fce0 	bl	800c3a4 <vPortEnterCritical>
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ea:	b25b      	sxtb	r3, r3
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f0:	d103      	bne.n	800a9fa <vQueueWaitForMessageRestricted+0x2a>
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa00:	b25b      	sxtb	r3, r3
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa06:	d103      	bne.n	800aa10 <vQueueWaitForMessageRestricted+0x40>
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa10:	f001 fcf8 	bl	800c404 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d106      	bne.n	800aa2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	3324      	adds	r3, #36	; 0x24
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	68b9      	ldr	r1, [r7, #8]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 fc93 	bl	800b350 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa2a:	6978      	ldr	r0, [r7, #20]
 800aa2c:	f7ff ff26 	bl	800a87c <prvUnlockQueue>
	}
 800aa30:	bf00      	nop
 800aa32:	3718      	adds	r7, #24
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08e      	sub	sp, #56	; 0x38
 800aa3c:	af04      	add	r7, sp, #16
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
 800aa44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10a      	bne.n	800aa62 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	623b      	str	r3, [r7, #32]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <xTaskCreateStatic+0x46>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	61fb      	str	r3, [r7, #28]
}
 800aa7a:	bf00      	nop
 800aa7c:	e7fe      	b.n	800aa7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa7e:	23c0      	movs	r3, #192	; 0xc0
 800aa80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2bc0      	cmp	r3, #192	; 0xc0
 800aa86:	d00a      	beq.n	800aa9e <xTaskCreateStatic+0x66>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	61bb      	str	r3, [r7, #24]
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d01e      	beq.n	800aae4 <xTaskCreateStatic+0xac>
 800aaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d01b      	beq.n	800aae4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aab4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	2202      	movs	r2, #2
 800aaba:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aabe:	2300      	movs	r3, #0
 800aac0:	9303      	str	r3, [sp, #12]
 800aac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac4:	9302      	str	r3, [sp, #8]
 800aac6:	f107 0314 	add.w	r3, r7, #20
 800aaca:	9301      	str	r3, [sp, #4]
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	68b9      	ldr	r1, [r7, #8]
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 f850 	bl	800ab7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aadc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aade:	f000 f8f7 	bl	800acd0 <prvAddNewTaskToReadyList>
 800aae2:	e001      	b.n	800aae8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aae4:	2300      	movs	r3, #0
 800aae6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aae8:	697b      	ldr	r3, [r7, #20]
	}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3728      	adds	r7, #40	; 0x28
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b08c      	sub	sp, #48	; 0x30
 800aaf6:	af04      	add	r7, sp, #16
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	603b      	str	r3, [r7, #0]
 800aafe:	4613      	mov	r3, r2
 800ab00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab02:	88fb      	ldrh	r3, [r7, #6]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 fd6e 	bl	800c5e8 <pvPortMalloc>
 800ab0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00e      	beq.n	800ab32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab14:	20c0      	movs	r0, #192	; 0xc0
 800ab16:	f001 fd67 	bl	800c5e8 <pvPortMalloc>
 800ab1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	631a      	str	r2, [r3, #48]	; 0x30
 800ab28:	e005      	b.n	800ab36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab2a:	6978      	ldr	r0, [r7, #20]
 800ab2c:	f001 fe28 	bl	800c780 <vPortFree>
 800ab30:	e001      	b.n	800ab36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab32:	2300      	movs	r3, #0
 800ab34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d017      	beq.n	800ab6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab44:	88fa      	ldrh	r2, [r7, #6]
 800ab46:	2300      	movs	r3, #0
 800ab48:	9303      	str	r3, [sp, #12]
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	9302      	str	r3, [sp, #8]
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 f80e 	bl	800ab7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab60:	69f8      	ldr	r0, [r7, #28]
 800ab62:	f000 f8b5 	bl	800acd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab66:	2301      	movs	r3, #1
 800ab68:	61bb      	str	r3, [r7, #24]
 800ab6a:	e002      	b.n	800ab72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab72:	69bb      	ldr	r3, [r7, #24]
	}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3720      	adds	r7, #32
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b088      	sub	sp, #32
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
 800ab88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	461a      	mov	r2, r3
 800ab94:	21a5      	movs	r1, #165	; 0xa5
 800ab96:	f002 f842 	bl	800cc1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aba4:	3b01      	subs	r3, #1
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	f023 0307 	bic.w	r3, r3, #7
 800abb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	f003 0307 	and.w	r3, r3, #7
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00a      	beq.n	800abd4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	617b      	str	r3, [r7, #20]
}
 800abd0:	bf00      	nop
 800abd2:	e7fe      	b.n	800abd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d01f      	beq.n	800ac1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abda:	2300      	movs	r3, #0
 800abdc:	61fb      	str	r3, [r7, #28]
 800abde:	e012      	b.n	800ac06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	4413      	add	r3, r2
 800abe6:	7819      	ldrb	r1, [r3, #0]
 800abe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	4413      	add	r3, r2
 800abee:	3334      	adds	r3, #52	; 0x34
 800abf0:	460a      	mov	r2, r1
 800abf2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	4413      	add	r3, r2
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d006      	beq.n	800ac0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	3301      	adds	r3, #1
 800ac04:	61fb      	str	r3, [r7, #28]
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	2b0f      	cmp	r3, #15
 800ac0a:	d9e9      	bls.n	800abe0 <prvInitialiseNewTask+0x64>
 800ac0c:	e000      	b.n	800ac10 <prvInitialiseNewTask+0x94>
			{
				break;
 800ac0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac18:	e003      	b.n	800ac22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac24:	2b37      	cmp	r3, #55	; 0x37
 800ac26:	d901      	bls.n	800ac2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac28:	2337      	movs	r3, #55	; 0x37
 800ac2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	3304      	adds	r3, #4
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff f978 	bl	8009f38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	3318      	adds	r3, #24
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff f973 	bl	8009f38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ac68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	2200      	movs	r2, #0
 800ac72:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	3358      	adds	r3, #88	; 0x58
 800ac82:	2260      	movs	r2, #96	; 0x60
 800ac84:	2100      	movs	r1, #0
 800ac86:	4618      	mov	r0, r3
 800ac88:	f001 ffc9 	bl	800cc1e <memset>
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8e:	4a0d      	ldr	r2, [pc, #52]	; (800acc4 <prvInitialiseNewTask+0x148>)
 800ac90:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	4a0c      	ldr	r2, [pc, #48]	; (800acc8 <prvInitialiseNewTask+0x14c>)
 800ac96:	661a      	str	r2, [r3, #96]	; 0x60
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	4a0c      	ldr	r2, [pc, #48]	; (800accc <prvInitialiseNewTask+0x150>)
 800ac9c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	68f9      	ldr	r1, [r7, #12]
 800aca2:	69b8      	ldr	r0, [r7, #24]
 800aca4:	f001 fa54 	bl	800c150 <pxPortInitialiseStack>
 800aca8:	4602      	mov	r2, r0
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800acb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acba:	bf00      	nop
 800acbc:	3720      	adds	r7, #32
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	08012a10 	.word	0x08012a10
 800acc8:	08012a30 	.word	0x08012a30
 800accc:	080129f0 	.word	0x080129f0

0800acd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800acd8:	f001 fb64 	bl	800c3a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800acdc:	4b2d      	ldr	r3, [pc, #180]	; (800ad94 <prvAddNewTaskToReadyList+0xc4>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3301      	adds	r3, #1
 800ace2:	4a2c      	ldr	r2, [pc, #176]	; (800ad94 <prvAddNewTaskToReadyList+0xc4>)
 800ace4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ace6:	4b2c      	ldr	r3, [pc, #176]	; (800ad98 <prvAddNewTaskToReadyList+0xc8>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d109      	bne.n	800ad02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acee:	4a2a      	ldr	r2, [pc, #168]	; (800ad98 <prvAddNewTaskToReadyList+0xc8>)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acf4:	4b27      	ldr	r3, [pc, #156]	; (800ad94 <prvAddNewTaskToReadyList+0xc4>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d110      	bne.n	800ad1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800acfc:	f000 fc54 	bl	800b5a8 <prvInitialiseTaskLists>
 800ad00:	e00d      	b.n	800ad1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad02:	4b26      	ldr	r3, [pc, #152]	; (800ad9c <prvAddNewTaskToReadyList+0xcc>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d109      	bne.n	800ad1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad0a:	4b23      	ldr	r3, [pc, #140]	; (800ad98 <prvAddNewTaskToReadyList+0xc8>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d802      	bhi.n	800ad1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad18:	4a1f      	ldr	r2, [pc, #124]	; (800ad98 <prvAddNewTaskToReadyList+0xc8>)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad1e:	4b20      	ldr	r3, [pc, #128]	; (800ada0 <prvAddNewTaskToReadyList+0xd0>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3301      	adds	r3, #1
 800ad24:	4a1e      	ldr	r2, [pc, #120]	; (800ada0 <prvAddNewTaskToReadyList+0xd0>)
 800ad26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad28:	4b1d      	ldr	r3, [pc, #116]	; (800ada0 <prvAddNewTaskToReadyList+0xd0>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad34:	4b1b      	ldr	r3, [pc, #108]	; (800ada4 <prvAddNewTaskToReadyList+0xd4>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d903      	bls.n	800ad44 <prvAddNewTaskToReadyList+0x74>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	4a18      	ldr	r2, [pc, #96]	; (800ada4 <prvAddNewTaskToReadyList+0xd4>)
 800ad42:	6013      	str	r3, [r2, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad48:	4613      	mov	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4a15      	ldr	r2, [pc, #84]	; (800ada8 <prvAddNewTaskToReadyList+0xd8>)
 800ad52:	441a      	add	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	3304      	adds	r3, #4
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	f7ff f8f9 	bl	8009f52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad60:	f001 fb50 	bl	800c404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad64:	4b0d      	ldr	r3, [pc, #52]	; (800ad9c <prvAddNewTaskToReadyList+0xcc>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00e      	beq.n	800ad8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad6c:	4b0a      	ldr	r3, [pc, #40]	; (800ad98 <prvAddNewTaskToReadyList+0xc8>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d207      	bcs.n	800ad8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad7a:	4b0c      	ldr	r3, [pc, #48]	; (800adac <prvAddNewTaskToReadyList+0xdc>)
 800ad7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	200038c0 	.word	0x200038c0
 800ad98:	200033ec 	.word	0x200033ec
 800ad9c:	200038cc 	.word	0x200038cc
 800ada0:	200038dc 	.word	0x200038dc
 800ada4:	200038c8 	.word	0x200038c8
 800ada8:	200033f0 	.word	0x200033f0
 800adac:	e000ed04 	.word	0xe000ed04

0800adb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adb8:	2300      	movs	r3, #0
 800adba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d017      	beq.n	800adf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800adc2:	4b13      	ldr	r3, [pc, #76]	; (800ae10 <vTaskDelay+0x60>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00a      	beq.n	800ade0 <vTaskDelay+0x30>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	60bb      	str	r3, [r7, #8]
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ade0:	f000 f88c 	bl	800aefc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ade4:	2100      	movs	r1, #0
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fd2c 	bl	800b844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adec:	f000 f894 	bl	800af18 <xTaskResumeAll>
 800adf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d107      	bne.n	800ae08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800adf8:	4b06      	ldr	r3, [pc, #24]	; (800ae14 <vTaskDelay+0x64>)
 800adfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae08:	bf00      	nop
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	200038e8 	.word	0x200038e8
 800ae14:	e000ed04 	.word	0xe000ed04

0800ae18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08a      	sub	sp, #40	; 0x28
 800ae1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae22:	2300      	movs	r3, #0
 800ae24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae26:	463a      	mov	r2, r7
 800ae28:	1d39      	adds	r1, r7, #4
 800ae2a:	f107 0308 	add.w	r3, r7, #8
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff f82e 	bl	8009e90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	9202      	str	r2, [sp, #8]
 800ae3c:	9301      	str	r3, [sp, #4]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	2300      	movs	r3, #0
 800ae44:	460a      	mov	r2, r1
 800ae46:	4925      	ldr	r1, [pc, #148]	; (800aedc <vTaskStartScheduler+0xc4>)
 800ae48:	4825      	ldr	r0, [pc, #148]	; (800aee0 <vTaskStartScheduler+0xc8>)
 800ae4a:	f7ff fdf5 	bl	800aa38 <xTaskCreateStatic>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	4a24      	ldr	r2, [pc, #144]	; (800aee4 <vTaskStartScheduler+0xcc>)
 800ae52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae54:	4b23      	ldr	r3, [pc, #140]	; (800aee4 <vTaskStartScheduler+0xcc>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	e001      	b.n	800ae66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d102      	bne.n	800ae72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae6c:	f000 fd3e 	bl	800b8ec <xTimerCreateTimerTask>
 800ae70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d11d      	bne.n	800aeb4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800ae78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7c:	f383 8811 	msr	BASEPRI, r3
 800ae80:	f3bf 8f6f 	isb	sy
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	613b      	str	r3, [r7, #16]
}
 800ae8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae8c:	4b16      	ldr	r3, [pc, #88]	; (800aee8 <vTaskStartScheduler+0xd0>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3358      	adds	r3, #88	; 0x58
 800ae92:	4a16      	ldr	r2, [pc, #88]	; (800aeec <vTaskStartScheduler+0xd4>)
 800ae94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae96:	4b16      	ldr	r3, [pc, #88]	; (800aef0 <vTaskStartScheduler+0xd8>)
 800ae98:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae9e:	4b15      	ldr	r3, [pc, #84]	; (800aef4 <vTaskStartScheduler+0xdc>)
 800aea0:	2201      	movs	r2, #1
 800aea2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aea4:	4b14      	ldr	r3, [pc, #80]	; (800aef8 <vTaskStartScheduler+0xe0>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800aeaa:	f7f6 f89f 	bl	8000fec <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aeae:	f001 f9d7 	bl	800c260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aeb2:	e00e      	b.n	800aed2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeba:	d10a      	bne.n	800aed2 <vTaskStartScheduler+0xba>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	60fb      	str	r3, [r7, #12]
}
 800aece:	bf00      	nop
 800aed0:	e7fe      	b.n	800aed0 <vTaskStartScheduler+0xb8>
}
 800aed2:	bf00      	nop
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	0801295c 	.word	0x0801295c
 800aee0:	0800b579 	.word	0x0800b579
 800aee4:	200038e4 	.word	0x200038e4
 800aee8:	200033ec 	.word	0x200033ec
 800aeec:	20000040 	.word	0x20000040
 800aef0:	200038e0 	.word	0x200038e0
 800aef4:	200038cc 	.word	0x200038cc
 800aef8:	200038c4 	.word	0x200038c4

0800aefc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aefc:	b480      	push	{r7}
 800aefe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af00:	4b04      	ldr	r3, [pc, #16]	; (800af14 <vTaskSuspendAll+0x18>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3301      	adds	r3, #1
 800af06:	4a03      	ldr	r2, [pc, #12]	; (800af14 <vTaskSuspendAll+0x18>)
 800af08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af0a:	bf00      	nop
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	200038e8 	.word	0x200038e8

0800af18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af22:	2300      	movs	r3, #0
 800af24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af26:	4b42      	ldr	r3, [pc, #264]	; (800b030 <xTaskResumeAll+0x118>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10a      	bne.n	800af44 <xTaskResumeAll+0x2c>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	603b      	str	r3, [r7, #0]
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af44:	f001 fa2e 	bl	800c3a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af48:	4b39      	ldr	r3, [pc, #228]	; (800b030 <xTaskResumeAll+0x118>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	4a38      	ldr	r2, [pc, #224]	; (800b030 <xTaskResumeAll+0x118>)
 800af50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af52:	4b37      	ldr	r3, [pc, #220]	; (800b030 <xTaskResumeAll+0x118>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d162      	bne.n	800b020 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af5a:	4b36      	ldr	r3, [pc, #216]	; (800b034 <xTaskResumeAll+0x11c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d05e      	beq.n	800b020 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af62:	e02f      	b.n	800afc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af64:	4b34      	ldr	r3, [pc, #208]	; (800b038 <xTaskResumeAll+0x120>)
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	3318      	adds	r3, #24
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff f84b 	bl	800a00c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3304      	adds	r3, #4
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff f846 	bl	800a00c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af84:	4b2d      	ldr	r3, [pc, #180]	; (800b03c <xTaskResumeAll+0x124>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d903      	bls.n	800af94 <xTaskResumeAll+0x7c>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af90:	4a2a      	ldr	r2, [pc, #168]	; (800b03c <xTaskResumeAll+0x124>)
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af98:	4613      	mov	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4a27      	ldr	r2, [pc, #156]	; (800b040 <xTaskResumeAll+0x128>)
 800afa2:	441a      	add	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3304      	adds	r3, #4
 800afa8:	4619      	mov	r1, r3
 800afaa:	4610      	mov	r0, r2
 800afac:	f7fe ffd1 	bl	8009f52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb4:	4b23      	ldr	r3, [pc, #140]	; (800b044 <xTaskResumeAll+0x12c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afba:	429a      	cmp	r2, r3
 800afbc:	d302      	bcc.n	800afc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800afbe:	4b22      	ldr	r3, [pc, #136]	; (800b048 <xTaskResumeAll+0x130>)
 800afc0:	2201      	movs	r2, #1
 800afc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afc4:	4b1c      	ldr	r3, [pc, #112]	; (800b038 <xTaskResumeAll+0x120>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1cb      	bne.n	800af64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800afd2:	f000 fb8b 	bl	800b6ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800afd6:	4b1d      	ldr	r3, [pc, #116]	; (800b04c <xTaskResumeAll+0x134>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d010      	beq.n	800b004 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afe2:	f000 f847 	bl	800b074 <xTaskIncrementTick>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800afec:	4b16      	ldr	r3, [pc, #88]	; (800b048 <xTaskResumeAll+0x130>)
 800afee:	2201      	movs	r2, #1
 800aff0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1f1      	bne.n	800afe2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800affe:	4b13      	ldr	r3, [pc, #76]	; (800b04c <xTaskResumeAll+0x134>)
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b004:	4b10      	ldr	r3, [pc, #64]	; (800b048 <xTaskResumeAll+0x130>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d009      	beq.n	800b020 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b00c:	2301      	movs	r3, #1
 800b00e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b010:	4b0f      	ldr	r3, [pc, #60]	; (800b050 <xTaskResumeAll+0x138>)
 800b012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b020:	f001 f9f0 	bl	800c404 <vPortExitCritical>

	return xAlreadyYielded;
 800b024:	68bb      	ldr	r3, [r7, #8]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	200038e8 	.word	0x200038e8
 800b034:	200038c0 	.word	0x200038c0
 800b038:	20003880 	.word	0x20003880
 800b03c:	200038c8 	.word	0x200038c8
 800b040:	200033f0 	.word	0x200033f0
 800b044:	200033ec 	.word	0x200033ec
 800b048:	200038d4 	.word	0x200038d4
 800b04c:	200038d0 	.word	0x200038d0
 800b050:	e000ed04 	.word	0xe000ed04

0800b054 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b05a:	4b05      	ldr	r3, [pc, #20]	; (800b070 <xTaskGetTickCount+0x1c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b060:	687b      	ldr	r3, [r7, #4]
}
 800b062:	4618      	mov	r0, r3
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	200038c4 	.word	0x200038c4

0800b074 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b07a:	2300      	movs	r3, #0
 800b07c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b07e:	4b4f      	ldr	r3, [pc, #316]	; (800b1bc <xTaskIncrementTick+0x148>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	f040 808f 	bne.w	800b1a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b088:	4b4d      	ldr	r3, [pc, #308]	; (800b1c0 <xTaskIncrementTick+0x14c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3301      	adds	r3, #1
 800b08e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b090:	4a4b      	ldr	r2, [pc, #300]	; (800b1c0 <xTaskIncrementTick+0x14c>)
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d120      	bne.n	800b0de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b09c:	4b49      	ldr	r3, [pc, #292]	; (800b1c4 <xTaskIncrementTick+0x150>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00a      	beq.n	800b0bc <xTaskIncrementTick+0x48>
	__asm volatile
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	603b      	str	r3, [r7, #0]
}
 800b0b8:	bf00      	nop
 800b0ba:	e7fe      	b.n	800b0ba <xTaskIncrementTick+0x46>
 800b0bc:	4b41      	ldr	r3, [pc, #260]	; (800b1c4 <xTaskIncrementTick+0x150>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	4b41      	ldr	r3, [pc, #260]	; (800b1c8 <xTaskIncrementTick+0x154>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a3f      	ldr	r2, [pc, #252]	; (800b1c4 <xTaskIncrementTick+0x150>)
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	4a3f      	ldr	r2, [pc, #252]	; (800b1c8 <xTaskIncrementTick+0x154>)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	4b3e      	ldr	r3, [pc, #248]	; (800b1cc <xTaskIncrementTick+0x158>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	4a3d      	ldr	r2, [pc, #244]	; (800b1cc <xTaskIncrementTick+0x158>)
 800b0d8:	6013      	str	r3, [r2, #0]
 800b0da:	f000 fb07 	bl	800b6ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0de:	4b3c      	ldr	r3, [pc, #240]	; (800b1d0 <xTaskIncrementTick+0x15c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d349      	bcc.n	800b17c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0e8:	4b36      	ldr	r3, [pc, #216]	; (800b1c4 <xTaskIncrementTick+0x150>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d104      	bne.n	800b0fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0f2:	4b37      	ldr	r3, [pc, #220]	; (800b1d0 <xTaskIncrementTick+0x15c>)
 800b0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f8:	601a      	str	r2, [r3, #0]
					break;
 800b0fa:	e03f      	b.n	800b17c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0fc:	4b31      	ldr	r3, [pc, #196]	; (800b1c4 <xTaskIncrementTick+0x150>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b10c:	693a      	ldr	r2, [r7, #16]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	429a      	cmp	r2, r3
 800b112:	d203      	bcs.n	800b11c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b114:	4a2e      	ldr	r2, [pc, #184]	; (800b1d0 <xTaskIncrementTick+0x15c>)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b11a:	e02f      	b.n	800b17c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	3304      	adds	r3, #4
 800b120:	4618      	mov	r0, r3
 800b122:	f7fe ff73 	bl	800a00c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d004      	beq.n	800b138 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	3318      	adds	r3, #24
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe ff6a 	bl	800a00c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13c:	4b25      	ldr	r3, [pc, #148]	; (800b1d4 <xTaskIncrementTick+0x160>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	429a      	cmp	r2, r3
 800b142:	d903      	bls.n	800b14c <xTaskIncrementTick+0xd8>
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b148:	4a22      	ldr	r2, [pc, #136]	; (800b1d4 <xTaskIncrementTick+0x160>)
 800b14a:	6013      	str	r3, [r2, #0]
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4a1f      	ldr	r2, [pc, #124]	; (800b1d8 <xTaskIncrementTick+0x164>)
 800b15a:	441a      	add	r2, r3
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	3304      	adds	r3, #4
 800b160:	4619      	mov	r1, r3
 800b162:	4610      	mov	r0, r2
 800b164:	f7fe fef5 	bl	8009f52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b16c:	4b1b      	ldr	r3, [pc, #108]	; (800b1dc <xTaskIncrementTick+0x168>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	429a      	cmp	r2, r3
 800b174:	d3b8      	bcc.n	800b0e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b176:	2301      	movs	r3, #1
 800b178:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b17a:	e7b5      	b.n	800b0e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b17c:	4b17      	ldr	r3, [pc, #92]	; (800b1dc <xTaskIncrementTick+0x168>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b182:	4915      	ldr	r1, [pc, #84]	; (800b1d8 <xTaskIncrementTick+0x164>)
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	440b      	add	r3, r1
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d901      	bls.n	800b198 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b194:	2301      	movs	r3, #1
 800b196:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b198:	4b11      	ldr	r3, [pc, #68]	; (800b1e0 <xTaskIncrementTick+0x16c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d007      	beq.n	800b1b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	617b      	str	r3, [r7, #20]
 800b1a4:	e004      	b.n	800b1b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1a6:	4b0f      	ldr	r3, [pc, #60]	; (800b1e4 <xTaskIncrementTick+0x170>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	4a0d      	ldr	r2, [pc, #52]	; (800b1e4 <xTaskIncrementTick+0x170>)
 800b1ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1b0:	697b      	ldr	r3, [r7, #20]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200038e8 	.word	0x200038e8
 800b1c0:	200038c4 	.word	0x200038c4
 800b1c4:	20003878 	.word	0x20003878
 800b1c8:	2000387c 	.word	0x2000387c
 800b1cc:	200038d8 	.word	0x200038d8
 800b1d0:	200038e0 	.word	0x200038e0
 800b1d4:	200038c8 	.word	0x200038c8
 800b1d8:	200033f0 	.word	0x200033f0
 800b1dc:	200033ec 	.word	0x200033ec
 800b1e0:	200038d4 	.word	0x200038d4
 800b1e4:	200038d0 	.word	0x200038d0

0800b1e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1ee:	4b3e      	ldr	r3, [pc, #248]	; (800b2e8 <vTaskSwitchContext+0x100>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1f6:	4b3d      	ldr	r3, [pc, #244]	; (800b2ec <vTaskSwitchContext+0x104>)
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1fc:	e070      	b.n	800b2e0 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800b1fe:	4b3b      	ldr	r3, [pc, #236]	; (800b2ec <vTaskSwitchContext+0x104>)
 800b200:	2200      	movs	r2, #0
 800b202:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b204:	f7f5 fef9 	bl	8000ffa <getRunTimeCounterValue>
 800b208:	4603      	mov	r3, r0
 800b20a:	4a39      	ldr	r2, [pc, #228]	; (800b2f0 <vTaskSwitchContext+0x108>)
 800b20c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b20e:	4b38      	ldr	r3, [pc, #224]	; (800b2f0 <vTaskSwitchContext+0x108>)
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	4b38      	ldr	r3, [pc, #224]	; (800b2f4 <vTaskSwitchContext+0x10c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d909      	bls.n	800b22e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b21a:	4b37      	ldr	r3, [pc, #220]	; (800b2f8 <vTaskSwitchContext+0x110>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b220:	4a33      	ldr	r2, [pc, #204]	; (800b2f0 <vTaskSwitchContext+0x108>)
 800b222:	6810      	ldr	r0, [r2, #0]
 800b224:	4a33      	ldr	r2, [pc, #204]	; (800b2f4 <vTaskSwitchContext+0x10c>)
 800b226:	6812      	ldr	r2, [r2, #0]
 800b228:	1a82      	subs	r2, r0, r2
 800b22a:	440a      	add	r2, r1
 800b22c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b22e:	4b30      	ldr	r3, [pc, #192]	; (800b2f0 <vTaskSwitchContext+0x108>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a30      	ldr	r2, [pc, #192]	; (800b2f4 <vTaskSwitchContext+0x10c>)
 800b234:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b236:	4b30      	ldr	r3, [pc, #192]	; (800b2f8 <vTaskSwitchContext+0x110>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	4b2e      	ldr	r3, [pc, #184]	; (800b2f8 <vTaskSwitchContext+0x110>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b242:	429a      	cmp	r2, r3
 800b244:	d808      	bhi.n	800b258 <vTaskSwitchContext+0x70>
 800b246:	4b2c      	ldr	r3, [pc, #176]	; (800b2f8 <vTaskSwitchContext+0x110>)
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	4b2b      	ldr	r3, [pc, #172]	; (800b2f8 <vTaskSwitchContext+0x110>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3334      	adds	r3, #52	; 0x34
 800b250:	4619      	mov	r1, r3
 800b252:	4610      	mov	r0, r2
 800b254:	f7f5 fed9 	bl	800100a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b258:	4b28      	ldr	r3, [pc, #160]	; (800b2fc <vTaskSwitchContext+0x114>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	e010      	b.n	800b282 <vTaskSwitchContext+0x9a>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10a      	bne.n	800b27c <vTaskSwitchContext+0x94>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	607b      	str	r3, [r7, #4]
}
 800b278:	bf00      	nop
 800b27a:	e7fe      	b.n	800b27a <vTaskSwitchContext+0x92>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3b01      	subs	r3, #1
 800b280:	60fb      	str	r3, [r7, #12]
 800b282:	491f      	ldr	r1, [pc, #124]	; (800b300 <vTaskSwitchContext+0x118>)
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	440b      	add	r3, r1
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0e4      	beq.n	800b260 <vTaskSwitchContext+0x78>
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	4613      	mov	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4413      	add	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4a17      	ldr	r2, [pc, #92]	; (800b300 <vTaskSwitchContext+0x118>)
 800b2a2:	4413      	add	r3, r2
 800b2a4:	60bb      	str	r3, [r7, #8]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	605a      	str	r2, [r3, #4]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	3308      	adds	r3, #8
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d104      	bne.n	800b2c6 <vTaskSwitchContext+0xde>
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	605a      	str	r2, [r3, #4]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	4a0a      	ldr	r2, [pc, #40]	; (800b2f8 <vTaskSwitchContext+0x110>)
 800b2ce:	6013      	str	r3, [r2, #0]
 800b2d0:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <vTaskSwitchContext+0x114>)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2d6:	4b08      	ldr	r3, [pc, #32]	; (800b2f8 <vTaskSwitchContext+0x110>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3358      	adds	r3, #88	; 0x58
 800b2dc:	4a09      	ldr	r2, [pc, #36]	; (800b304 <vTaskSwitchContext+0x11c>)
 800b2de:	6013      	str	r3, [r2, #0]
}
 800b2e0:	bf00      	nop
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	200038e8 	.word	0x200038e8
 800b2ec:	200038d4 	.word	0x200038d4
 800b2f0:	200038f0 	.word	0x200038f0
 800b2f4:	200038ec 	.word	0x200038ec
 800b2f8:	200033ec 	.word	0x200033ec
 800b2fc:	200038c8 	.word	0x200038c8
 800b300:	200033f0 	.word	0x200033f0
 800b304:	20000040 	.word	0x20000040

0800b308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d10a      	bne.n	800b32e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31c:	f383 8811 	msr	BASEPRI, r3
 800b320:	f3bf 8f6f 	isb	sy
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	60fb      	str	r3, [r7, #12]
}
 800b32a:	bf00      	nop
 800b32c:	e7fe      	b.n	800b32c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b32e:	4b07      	ldr	r3, [pc, #28]	; (800b34c <vTaskPlaceOnEventList+0x44>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3318      	adds	r3, #24
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7fe fe2f 	bl	8009f9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b33c:	2101      	movs	r1, #1
 800b33e:	6838      	ldr	r0, [r7, #0]
 800b340:	f000 fa80 	bl	800b844 <prvAddCurrentTaskToDelayedList>
}
 800b344:	bf00      	nop
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	200033ec 	.word	0x200033ec

0800b350 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10a      	bne.n	800b378 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	617b      	str	r3, [r7, #20]
}
 800b374:	bf00      	nop
 800b376:	e7fe      	b.n	800b376 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b378:	4b0a      	ldr	r3, [pc, #40]	; (800b3a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3318      	adds	r3, #24
 800b37e:	4619      	mov	r1, r3
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f7fe fde6 	bl	8009f52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b38c:	f04f 33ff 	mov.w	r3, #4294967295
 800b390:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	68b8      	ldr	r0, [r7, #8]
 800b396:	f000 fa55 	bl	800b844 <prvAddCurrentTaskToDelayedList>
	}
 800b39a:	bf00      	nop
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200033ec 	.word	0x200033ec

0800b3a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10a      	bne.n	800b3d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	60fb      	str	r3, [r7, #12]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	3318      	adds	r3, #24
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe fe17 	bl	800a00c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3de:	4b1e      	ldr	r3, [pc, #120]	; (800b458 <xTaskRemoveFromEventList+0xb0>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d11d      	bne.n	800b422 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fe fe0e 	bl	800a00c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f4:	4b19      	ldr	r3, [pc, #100]	; (800b45c <xTaskRemoveFromEventList+0xb4>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d903      	bls.n	800b404 <xTaskRemoveFromEventList+0x5c>
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	4a16      	ldr	r2, [pc, #88]	; (800b45c <xTaskRemoveFromEventList+0xb4>)
 800b402:	6013      	str	r3, [r2, #0]
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b408:	4613      	mov	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4413      	add	r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4a13      	ldr	r2, [pc, #76]	; (800b460 <xTaskRemoveFromEventList+0xb8>)
 800b412:	441a      	add	r2, r3
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	3304      	adds	r3, #4
 800b418:	4619      	mov	r1, r3
 800b41a:	4610      	mov	r0, r2
 800b41c:	f7fe fd99 	bl	8009f52 <vListInsertEnd>
 800b420:	e005      	b.n	800b42e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3318      	adds	r3, #24
 800b426:	4619      	mov	r1, r3
 800b428:	480e      	ldr	r0, [pc, #56]	; (800b464 <xTaskRemoveFromEventList+0xbc>)
 800b42a:	f7fe fd92 	bl	8009f52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b432:	4b0d      	ldr	r3, [pc, #52]	; (800b468 <xTaskRemoveFromEventList+0xc0>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	429a      	cmp	r2, r3
 800b43a:	d905      	bls.n	800b448 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b440:	4b0a      	ldr	r3, [pc, #40]	; (800b46c <xTaskRemoveFromEventList+0xc4>)
 800b442:	2201      	movs	r2, #1
 800b444:	601a      	str	r2, [r3, #0]
 800b446:	e001      	b.n	800b44c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b448:	2300      	movs	r3, #0
 800b44a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b44c:	697b      	ldr	r3, [r7, #20]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	200038e8 	.word	0x200038e8
 800b45c:	200038c8 	.word	0x200038c8
 800b460:	200033f0 	.word	0x200033f0
 800b464:	20003880 	.word	0x20003880
 800b468:	200033ec 	.word	0x200033ec
 800b46c:	200038d4 	.word	0x200038d4

0800b470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b478:	4b06      	ldr	r3, [pc, #24]	; (800b494 <vTaskInternalSetTimeOutState+0x24>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b480:	4b05      	ldr	r3, [pc, #20]	; (800b498 <vTaskInternalSetTimeOutState+0x28>)
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	605a      	str	r2, [r3, #4]
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	200038d8 	.word	0x200038d8
 800b498:	200038c4 	.word	0x200038c4

0800b49c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b088      	sub	sp, #32
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10a      	bne.n	800b4c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	613b      	str	r3, [r7, #16]
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	60fb      	str	r3, [r7, #12]
}
 800b4da:	bf00      	nop
 800b4dc:	e7fe      	b.n	800b4dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b4de:	f000 ff61 	bl	800c3a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4e2:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <xTaskCheckForTimeOut+0xbc>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	69ba      	ldr	r2, [r7, #24]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fa:	d102      	bne.n	800b502 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	61fb      	str	r3, [r7, #28]
 800b500:	e023      	b.n	800b54a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	4b15      	ldr	r3, [pc, #84]	; (800b55c <xTaskCheckForTimeOut+0xc0>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d007      	beq.n	800b51e <xTaskCheckForTimeOut+0x82>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	429a      	cmp	r2, r3
 800b516:	d302      	bcc.n	800b51e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b518:	2301      	movs	r3, #1
 800b51a:	61fb      	str	r3, [r7, #28]
 800b51c:	e015      	b.n	800b54a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	429a      	cmp	r2, r3
 800b526:	d20b      	bcs.n	800b540 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	1ad2      	subs	r2, r2, r3
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7ff ff9b 	bl	800b470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b53a:	2300      	movs	r3, #0
 800b53c:	61fb      	str	r3, [r7, #28]
 800b53e:	e004      	b.n	800b54a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	2200      	movs	r2, #0
 800b544:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b546:	2301      	movs	r3, #1
 800b548:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b54a:	f000 ff5b 	bl	800c404 <vPortExitCritical>

	return xReturn;
 800b54e:	69fb      	ldr	r3, [r7, #28]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3720      	adds	r7, #32
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	200038c4 	.word	0x200038c4
 800b55c:	200038d8 	.word	0x200038d8

0800b560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b560:	b480      	push	{r7}
 800b562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b564:	4b03      	ldr	r3, [pc, #12]	; (800b574 <vTaskMissedYield+0x14>)
 800b566:	2201      	movs	r2, #1
 800b568:	601a      	str	r2, [r3, #0]
}
 800b56a:	bf00      	nop
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	200038d4 	.word	0x200038d4

0800b578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b580:	f000 f852 	bl	800b628 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b584:	4b06      	ldr	r3, [pc, #24]	; (800b5a0 <prvIdleTask+0x28>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d9f9      	bls.n	800b580 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b58c:	4b05      	ldr	r3, [pc, #20]	; (800b5a4 <prvIdleTask+0x2c>)
 800b58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b59c:	e7f0      	b.n	800b580 <prvIdleTask+0x8>
 800b59e:	bf00      	nop
 800b5a0:	200033f0 	.word	0x200033f0
 800b5a4:	e000ed04 	.word	0xe000ed04

0800b5a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	607b      	str	r3, [r7, #4]
 800b5b2:	e00c      	b.n	800b5ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4a12      	ldr	r2, [pc, #72]	; (800b608 <prvInitialiseTaskLists+0x60>)
 800b5c0:	4413      	add	r3, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fe fc98 	bl	8009ef8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	607b      	str	r3, [r7, #4]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b37      	cmp	r3, #55	; 0x37
 800b5d2:	d9ef      	bls.n	800b5b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5d4:	480d      	ldr	r0, [pc, #52]	; (800b60c <prvInitialiseTaskLists+0x64>)
 800b5d6:	f7fe fc8f 	bl	8009ef8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5da:	480d      	ldr	r0, [pc, #52]	; (800b610 <prvInitialiseTaskLists+0x68>)
 800b5dc:	f7fe fc8c 	bl	8009ef8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5e0:	480c      	ldr	r0, [pc, #48]	; (800b614 <prvInitialiseTaskLists+0x6c>)
 800b5e2:	f7fe fc89 	bl	8009ef8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5e6:	480c      	ldr	r0, [pc, #48]	; (800b618 <prvInitialiseTaskLists+0x70>)
 800b5e8:	f7fe fc86 	bl	8009ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5ec:	480b      	ldr	r0, [pc, #44]	; (800b61c <prvInitialiseTaskLists+0x74>)
 800b5ee:	f7fe fc83 	bl	8009ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5f2:	4b0b      	ldr	r3, [pc, #44]	; (800b620 <prvInitialiseTaskLists+0x78>)
 800b5f4:	4a05      	ldr	r2, [pc, #20]	; (800b60c <prvInitialiseTaskLists+0x64>)
 800b5f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	; (800b624 <prvInitialiseTaskLists+0x7c>)
 800b5fa:	4a05      	ldr	r2, [pc, #20]	; (800b610 <prvInitialiseTaskLists+0x68>)
 800b5fc:	601a      	str	r2, [r3, #0]
}
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	200033f0 	.word	0x200033f0
 800b60c:	20003850 	.word	0x20003850
 800b610:	20003864 	.word	0x20003864
 800b614:	20003880 	.word	0x20003880
 800b618:	20003894 	.word	0x20003894
 800b61c:	200038ac 	.word	0x200038ac
 800b620:	20003878 	.word	0x20003878
 800b624:	2000387c 	.word	0x2000387c

0800b628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b62e:	e019      	b.n	800b664 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b630:	f000 feb8 	bl	800c3a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b634:	4b10      	ldr	r3, [pc, #64]	; (800b678 <prvCheckTasksWaitingTermination+0x50>)
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3304      	adds	r3, #4
 800b640:	4618      	mov	r0, r3
 800b642:	f7fe fce3 	bl	800a00c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b646:	4b0d      	ldr	r3, [pc, #52]	; (800b67c <prvCheckTasksWaitingTermination+0x54>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3b01      	subs	r3, #1
 800b64c:	4a0b      	ldr	r2, [pc, #44]	; (800b67c <prvCheckTasksWaitingTermination+0x54>)
 800b64e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b650:	4b0b      	ldr	r3, [pc, #44]	; (800b680 <prvCheckTasksWaitingTermination+0x58>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3b01      	subs	r3, #1
 800b656:	4a0a      	ldr	r2, [pc, #40]	; (800b680 <prvCheckTasksWaitingTermination+0x58>)
 800b658:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b65a:	f000 fed3 	bl	800c404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f810 	bl	800b684 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b664:	4b06      	ldr	r3, [pc, #24]	; (800b680 <prvCheckTasksWaitingTermination+0x58>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1e1      	bne.n	800b630 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b66c:	bf00      	nop
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	20003894 	.word	0x20003894
 800b67c:	200038c0 	.word	0x200038c0
 800b680:	200038a8 	.word	0x200038a8

0800b684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	3358      	adds	r3, #88	; 0x58
 800b690:	4618      	mov	r0, r3
 800b692:	f002 f9af 	bl	800d9f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d108      	bne.n	800b6b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f001 f86b 	bl	800c780 <vPortFree>
				vPortFree( pxTCB );
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f001 f868 	bl	800c780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6b0:	e018      	b.n	800b6e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d103      	bne.n	800b6c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f001 f85f 	bl	800c780 <vPortFree>
	}
 800b6c2:	e00f      	b.n	800b6e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d00a      	beq.n	800b6e4 <prvDeleteTCB+0x60>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	60fb      	str	r3, [r7, #12]
}
 800b6e0:	bf00      	nop
 800b6e2:	e7fe      	b.n	800b6e2 <prvDeleteTCB+0x5e>
	}
 800b6e4:	bf00      	nop
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6f2:	4b0c      	ldr	r3, [pc, #48]	; (800b724 <prvResetNextTaskUnblockTime+0x38>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d104      	bne.n	800b706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	; (800b728 <prvResetNextTaskUnblockTime+0x3c>)
 800b6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b704:	e008      	b.n	800b718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b706:	4b07      	ldr	r3, [pc, #28]	; (800b724 <prvResetNextTaskUnblockTime+0x38>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	4a04      	ldr	r2, [pc, #16]	; (800b728 <prvResetNextTaskUnblockTime+0x3c>)
 800b716:	6013      	str	r3, [r2, #0]
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	20003878 	.word	0x20003878
 800b728:	200038e0 	.word	0x200038e0

0800b72c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b732:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <xTaskGetSchedulerState+0x34>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d102      	bne.n	800b740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b73a:	2301      	movs	r3, #1
 800b73c:	607b      	str	r3, [r7, #4]
 800b73e:	e008      	b.n	800b752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b740:	4b08      	ldr	r3, [pc, #32]	; (800b764 <xTaskGetSchedulerState+0x38>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d102      	bne.n	800b74e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b748:	2302      	movs	r3, #2
 800b74a:	607b      	str	r3, [r7, #4]
 800b74c:	e001      	b.n	800b752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b74e:	2300      	movs	r3, #0
 800b750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b752:	687b      	ldr	r3, [r7, #4]
	}
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	200038cc 	.word	0x200038cc
 800b764:	200038e8 	.word	0x200038e8

0800b768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b774:	2300      	movs	r3, #0
 800b776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d056      	beq.n	800b82c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b77e:	4b2e      	ldr	r3, [pc, #184]	; (800b838 <xTaskPriorityDisinherit+0xd0>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	429a      	cmp	r2, r3
 800b786:	d00a      	beq.n	800b79e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	60fb      	str	r3, [r7, #12]
}
 800b79a:	bf00      	nop
 800b79c:	e7fe      	b.n	800b79c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10a      	bne.n	800b7bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60bb      	str	r3, [r7, #8]
}
 800b7b8:	bf00      	nop
 800b7ba:	e7fe      	b.n	800b7ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c0:	1e5a      	subs	r2, r3, #1
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d02c      	beq.n	800b82c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d128      	bne.n	800b82c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe fc14 	bl	800a00c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <xTaskPriorityDisinherit+0xd4>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	429a      	cmp	r2, r3
 800b802:	d903      	bls.n	800b80c <xTaskPriorityDisinherit+0xa4>
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	4a0c      	ldr	r2, [pc, #48]	; (800b83c <xTaskPriorityDisinherit+0xd4>)
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b810:	4613      	mov	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4413      	add	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4a09      	ldr	r2, [pc, #36]	; (800b840 <xTaskPriorityDisinherit+0xd8>)
 800b81a:	441a      	add	r2, r3
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	3304      	adds	r3, #4
 800b820:	4619      	mov	r1, r3
 800b822:	4610      	mov	r0, r2
 800b824:	f7fe fb95 	bl	8009f52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b828:	2301      	movs	r3, #1
 800b82a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b82c:	697b      	ldr	r3, [r7, #20]
	}
 800b82e:	4618      	mov	r0, r3
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	200033ec 	.word	0x200033ec
 800b83c:	200038c8 	.word	0x200038c8
 800b840:	200033f0 	.word	0x200033f0

0800b844 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b84e:	4b21      	ldr	r3, [pc, #132]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b854:	4b20      	ldr	r3, [pc, #128]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3304      	adds	r3, #4
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe fbd6 	bl	800a00c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b866:	d10a      	bne.n	800b87e <prvAddCurrentTaskToDelayedList+0x3a>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d007      	beq.n	800b87e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b86e:	4b1a      	ldr	r3, [pc, #104]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3304      	adds	r3, #4
 800b874:	4619      	mov	r1, r3
 800b876:	4819      	ldr	r0, [pc, #100]	; (800b8dc <prvAddCurrentTaskToDelayedList+0x98>)
 800b878:	f7fe fb6b 	bl	8009f52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b87c:	e026      	b.n	800b8cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4413      	add	r3, r2
 800b884:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b886:	4b14      	ldr	r3, [pc, #80]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	429a      	cmp	r2, r3
 800b894:	d209      	bcs.n	800b8aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b896:	4b12      	ldr	r3, [pc, #72]	; (800b8e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f7fe fb79 	bl	8009f9a <vListInsert>
}
 800b8a8:	e010      	b.n	800b8cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8aa:	4b0e      	ldr	r3, [pc, #56]	; (800b8e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	4b0a      	ldr	r3, [pc, #40]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f7fe fb6f 	bl	8009f9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d202      	bcs.n	800b8cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8c6:	4a08      	ldr	r2, [pc, #32]	; (800b8e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	6013      	str	r3, [r2, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	200038c4 	.word	0x200038c4
 800b8d8:	200033ec 	.word	0x200033ec
 800b8dc:	200038ac 	.word	0x200038ac
 800b8e0:	2000387c 	.word	0x2000387c
 800b8e4:	20003878 	.word	0x20003878
 800b8e8:	200038e0 	.word	0x200038e0

0800b8ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08a      	sub	sp, #40	; 0x28
 800b8f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8f6:	f000 fba1 	bl	800c03c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8fa:	4b1c      	ldr	r3, [pc, #112]	; (800b96c <xTimerCreateTimerTask+0x80>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d021      	beq.n	800b946 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b90a:	1d3a      	adds	r2, r7, #4
 800b90c:	f107 0108 	add.w	r1, r7, #8
 800b910:	f107 030c 	add.w	r3, r7, #12
 800b914:	4618      	mov	r0, r3
 800b916:	f7fe fad5 	bl	8009ec4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	9202      	str	r2, [sp, #8]
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	2302      	movs	r3, #2
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	2300      	movs	r3, #0
 800b92a:	460a      	mov	r2, r1
 800b92c:	4910      	ldr	r1, [pc, #64]	; (800b970 <xTimerCreateTimerTask+0x84>)
 800b92e:	4811      	ldr	r0, [pc, #68]	; (800b974 <xTimerCreateTimerTask+0x88>)
 800b930:	f7ff f882 	bl	800aa38 <xTaskCreateStatic>
 800b934:	4603      	mov	r3, r0
 800b936:	4a10      	ldr	r2, [pc, #64]	; (800b978 <xTimerCreateTimerTask+0x8c>)
 800b938:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b93a:	4b0f      	ldr	r3, [pc, #60]	; (800b978 <xTimerCreateTimerTask+0x8c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b942:	2301      	movs	r3, #1
 800b944:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10a      	bne.n	800b962 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	613b      	str	r3, [r7, #16]
}
 800b95e:	bf00      	nop
 800b960:	e7fe      	b.n	800b960 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b962:	697b      	ldr	r3, [r7, #20]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3718      	adds	r7, #24
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	20003924 	.word	0x20003924
 800b970:	08012964 	.word	0x08012964
 800b974:	0800bbe5 	.word	0x0800bbe5
 800b978:	20003928 	.word	0x20003928

0800b97c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af02      	add	r7, sp, #8
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b98a:	202c      	movs	r0, #44	; 0x2c
 800b98c:	f000 fe2c 	bl	800c5e8 <pvPortMalloc>
 800b990:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00d      	beq.n	800b9b4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	9301      	str	r3, [sp, #4]
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	68b9      	ldr	r1, [r7, #8]
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f000 f843 	bl	800ba3a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b9b4:	697b      	ldr	r3, [r7, #20]
	}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b08a      	sub	sp, #40	; 0x28
 800b9c2:	af02      	add	r7, sp, #8
 800b9c4:	60f8      	str	r0, [r7, #12]
 800b9c6:	60b9      	str	r1, [r7, #8]
 800b9c8:	607a      	str	r2, [r7, #4]
 800b9ca:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b9cc:	232c      	movs	r3, #44	; 0x2c
 800b9ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	2b2c      	cmp	r3, #44	; 0x2c
 800b9d4:	d00a      	beq.n	800b9ec <xTimerCreateStatic+0x2e>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	61bb      	str	r3, [r7, #24]
}
 800b9e8:	bf00      	nop
 800b9ea:	e7fe      	b.n	800b9ea <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10a      	bne.n	800ba0a <xTimerCreateStatic+0x4c>
	__asm volatile
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	617b      	str	r3, [r7, #20]
}
 800ba06:	bf00      	nop
 800ba08:	e7fe      	b.n	800ba08 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ba0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00d      	beq.n	800ba30 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	2202      	movs	r2, #2
 800ba18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	68b9      	ldr	r1, [r7, #8]
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f000 f805 	bl	800ba3a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ba30:	69fb      	ldr	r3, [r7, #28]
	}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3720      	adds	r7, #32
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b086      	sub	sp, #24
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	60f8      	str	r0, [r7, #12]
 800ba42:	60b9      	str	r1, [r7, #8]
 800ba44:	607a      	str	r2, [r7, #4]
 800ba46:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10a      	bne.n	800ba64 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	617b      	str	r3, [r7, #20]
}
 800ba60:	bf00      	nop
 800ba62:	e7fe      	b.n	800ba62 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d01e      	beq.n	800baa8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ba6a:	f000 fae7 	bl	800c03c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ba74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	6a3a      	ldr	r2, [r7, #32]
 800ba84:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ba86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fe fa54 	bl	8009f38 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d008      	beq.n	800baa8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba9c:	f043 0304 	orr.w	r3, r3, #4
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800baa8:	bf00      	nop
 800baaa:	3718      	adds	r7, #24
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b08a      	sub	sp, #40	; 0x28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
 800babc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800babe:	2300      	movs	r3, #0
 800bac0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <xTimerGenericCommand+0x2e>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	623b      	str	r3, [r7, #32]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bade:	4b1a      	ldr	r3, [pc, #104]	; (800bb48 <xTimerGenericCommand+0x98>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d02a      	beq.n	800bb3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	2b05      	cmp	r3, #5
 800baf6:	dc18      	bgt.n	800bb2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800baf8:	f7ff fe18 	bl	800b72c <xTaskGetSchedulerState>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d109      	bne.n	800bb16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb02:	4b11      	ldr	r3, [pc, #68]	; (800bb48 <xTimerGenericCommand+0x98>)
 800bb04:	6818      	ldr	r0, [r3, #0]
 800bb06:	f107 0110 	add.w	r1, r7, #16
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb0e:	f7fe fbab 	bl	800a268 <xQueueGenericSend>
 800bb12:	6278      	str	r0, [r7, #36]	; 0x24
 800bb14:	e012      	b.n	800bb3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb16:	4b0c      	ldr	r3, [pc, #48]	; (800bb48 <xTimerGenericCommand+0x98>)
 800bb18:	6818      	ldr	r0, [r3, #0]
 800bb1a:	f107 0110 	add.w	r1, r7, #16
 800bb1e:	2300      	movs	r3, #0
 800bb20:	2200      	movs	r2, #0
 800bb22:	f7fe fba1 	bl	800a268 <xQueueGenericSend>
 800bb26:	6278      	str	r0, [r7, #36]	; 0x24
 800bb28:	e008      	b.n	800bb3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb2a:	4b07      	ldr	r3, [pc, #28]	; (800bb48 <xTimerGenericCommand+0x98>)
 800bb2c:	6818      	ldr	r0, [r3, #0]
 800bb2e:	f107 0110 	add.w	r1, r7, #16
 800bb32:	2300      	movs	r3, #0
 800bb34:	683a      	ldr	r2, [r7, #0]
 800bb36:	f7fe fc95 	bl	800a464 <xQueueGenericSendFromISR>
 800bb3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3728      	adds	r7, #40	; 0x28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20003924 	.word	0x20003924

0800bb4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af02      	add	r7, sp, #8
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb56:	4b22      	ldr	r3, [pc, #136]	; (800bbe0 <prvProcessExpiredTimer+0x94>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	3304      	adds	r3, #4
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fe fa51 	bl	800a00c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb70:	f003 0304 	and.w	r3, r3, #4
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d022      	beq.n	800bbbe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	699a      	ldr	r2, [r3, #24]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	18d1      	adds	r1, r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	6978      	ldr	r0, [r7, #20]
 800bb86:	f000 f8d1 	bl	800bd2c <prvInsertTimerInActiveList>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d01f      	beq.n	800bbd0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb90:	2300      	movs	r3, #0
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	2300      	movs	r3, #0
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	6978      	ldr	r0, [r7, #20]
 800bb9c:	f7ff ff88 	bl	800bab0 <xTimerGenericCommand>
 800bba0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d113      	bne.n	800bbd0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	60fb      	str	r3, [r7, #12]
}
 800bbba:	bf00      	nop
 800bbbc:	e7fe      	b.n	800bbbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbc4:	f023 0301 	bic.w	r3, r3, #1
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	6a1b      	ldr	r3, [r3, #32]
 800bbd4:	6978      	ldr	r0, [r7, #20]
 800bbd6:	4798      	blx	r3
}
 800bbd8:	bf00      	nop
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	2000391c 	.word	0x2000391c

0800bbe4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbec:	f107 0308 	add.w	r3, r7, #8
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 f857 	bl	800bca4 <prvGetNextExpireTime>
 800bbf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 f803 	bl	800bc08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc02:	f000 f8d5 	bl	800bdb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc06:	e7f1      	b.n	800bbec <prvTimerTask+0x8>

0800bc08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc12:	f7ff f973 	bl	800aefc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc16:	f107 0308 	add.w	r3, r7, #8
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 f866 	bl	800bcec <prvSampleTimeNow>
 800bc20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d130      	bne.n	800bc8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10a      	bne.n	800bc44 <prvProcessTimerOrBlockTask+0x3c>
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d806      	bhi.n	800bc44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc36:	f7ff f96f 	bl	800af18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc3a:	68f9      	ldr	r1, [r7, #12]
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff ff85 	bl	800bb4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc42:	e024      	b.n	800bc8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d008      	beq.n	800bc5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc4a:	4b13      	ldr	r3, [pc, #76]	; (800bc98 <prvProcessTimerOrBlockTask+0x90>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d101      	bne.n	800bc58 <prvProcessTimerOrBlockTask+0x50>
 800bc54:	2301      	movs	r3, #1
 800bc56:	e000      	b.n	800bc5a <prvProcessTimerOrBlockTask+0x52>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc5c:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <prvProcessTimerOrBlockTask+0x94>)
 800bc5e:	6818      	ldr	r0, [r3, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	4619      	mov	r1, r3
 800bc6a:	f7fe feb1 	bl	800a9d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc6e:	f7ff f953 	bl	800af18 <xTaskResumeAll>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc78:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <prvProcessTimerOrBlockTask+0x98>)
 800bc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	f3bf 8f6f 	isb	sy
}
 800bc88:	e001      	b.n	800bc8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc8a:	f7ff f945 	bl	800af18 <xTaskResumeAll>
}
 800bc8e:	bf00      	nop
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20003920 	.word	0x20003920
 800bc9c:	20003924 	.word	0x20003924
 800bca0:	e000ed04 	.word	0xe000ed04

0800bca4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bcac:	4b0e      	ldr	r3, [pc, #56]	; (800bce8 <prvGetNextExpireTime+0x44>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <prvGetNextExpireTime+0x16>
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	e000      	b.n	800bcbc <prvGetNextExpireTime+0x18>
 800bcba:	2200      	movs	r2, #0
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d105      	bne.n	800bcd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcc8:	4b07      	ldr	r3, [pc, #28]	; (800bce8 <prvGetNextExpireTime+0x44>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	e001      	b.n	800bcd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	2000391c 	.word	0x2000391c

0800bcec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcf4:	f7ff f9ae 	bl	800b054 <xTaskGetTickCount>
 800bcf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcfa:	4b0b      	ldr	r3, [pc, #44]	; (800bd28 <prvSampleTimeNow+0x3c>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d205      	bcs.n	800bd10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd04:	f000 f936 	bl	800bf74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	601a      	str	r2, [r3, #0]
 800bd0e:	e002      	b.n	800bd16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd16:	4a04      	ldr	r2, [pc, #16]	; (800bd28 <prvSampleTimeNow+0x3c>)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	2000392c 	.word	0x2000392c

0800bd2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
 800bd38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d812      	bhi.n	800bd78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	1ad2      	subs	r2, r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d302      	bcc.n	800bd66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd60:	2301      	movs	r3, #1
 800bd62:	617b      	str	r3, [r7, #20]
 800bd64:	e01b      	b.n	800bd9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd66:	4b10      	ldr	r3, [pc, #64]	; (800bda8 <prvInsertTimerInActiveList+0x7c>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4610      	mov	r0, r2
 800bd72:	f7fe f912 	bl	8009f9a <vListInsert>
 800bd76:	e012      	b.n	800bd9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d206      	bcs.n	800bd8e <prvInsertTimerInActiveList+0x62>
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d302      	bcc.n	800bd8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	e007      	b.n	800bd9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd8e:	4b07      	ldr	r3, [pc, #28]	; (800bdac <prvInsertTimerInActiveList+0x80>)
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3304      	adds	r3, #4
 800bd96:	4619      	mov	r1, r3
 800bd98:	4610      	mov	r0, r2
 800bd9a:	f7fe f8fe 	bl	8009f9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd9e:	697b      	ldr	r3, [r7, #20]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	20003920 	.word	0x20003920
 800bdac:	2000391c 	.word	0x2000391c

0800bdb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b08e      	sub	sp, #56	; 0x38
 800bdb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdb6:	e0ca      	b.n	800bf4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	da18      	bge.n	800bdf0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bdbe:	1d3b      	adds	r3, r7, #4
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10a      	bne.n	800bde0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	61fb      	str	r3, [r7, #28]
}
 800bddc:	bf00      	nop
 800bdde:	e7fe      	b.n	800bdde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bde6:	6850      	ldr	r0, [r2, #4]
 800bde8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdea:	6892      	ldr	r2, [r2, #8]
 800bdec:	4611      	mov	r1, r2
 800bdee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f2c0 80aa 	blt.w	800bf4c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d004      	beq.n	800be0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	3304      	adds	r3, #4
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fe f8ff 	bl	800a00c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be0e:	463b      	mov	r3, r7
 800be10:	4618      	mov	r0, r3
 800be12:	f7ff ff6b 	bl	800bcec <prvSampleTimeNow>
 800be16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b09      	cmp	r3, #9
 800be1c:	f200 8097 	bhi.w	800bf4e <prvProcessReceivedCommands+0x19e>
 800be20:	a201      	add	r2, pc, #4	; (adr r2, 800be28 <prvProcessReceivedCommands+0x78>)
 800be22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be26:	bf00      	nop
 800be28:	0800be51 	.word	0x0800be51
 800be2c:	0800be51 	.word	0x0800be51
 800be30:	0800be51 	.word	0x0800be51
 800be34:	0800bec5 	.word	0x0800bec5
 800be38:	0800bed9 	.word	0x0800bed9
 800be3c:	0800bf23 	.word	0x0800bf23
 800be40:	0800be51 	.word	0x0800be51
 800be44:	0800be51 	.word	0x0800be51
 800be48:	0800bec5 	.word	0x0800bec5
 800be4c:	0800bed9 	.word	0x0800bed9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be56:	f043 0301 	orr.w	r3, r3, #1
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	18d1      	adds	r1, r2, r3
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be70:	f7ff ff5c 	bl	800bd2c <prvInsertTimerInActiveList>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d069      	beq.n	800bf4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be88:	f003 0304 	and.w	r3, r3, #4
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d05e      	beq.n	800bf4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	699b      	ldr	r3, [r3, #24]
 800be96:	441a      	add	r2, r3
 800be98:	2300      	movs	r3, #0
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	2300      	movs	r3, #0
 800be9e:	2100      	movs	r1, #0
 800bea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bea2:	f7ff fe05 	bl	800bab0 <xTimerGenericCommand>
 800bea6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bea8:	6a3b      	ldr	r3, [r7, #32]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d14f      	bne.n	800bf4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	61bb      	str	r3, [r7, #24]
}
 800bec0:	bf00      	nop
 800bec2:	e7fe      	b.n	800bec2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beca:	f023 0301 	bic.w	r3, r3, #1
 800bece:	b2da      	uxtb	r2, r3
 800bed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bed6:	e03a      	b.n	800bf4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bede:	f043 0301 	orr.w	r3, r3, #1
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	617b      	str	r3, [r7, #20]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf10:	699a      	ldr	r2, [r3, #24]
 800bf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf14:	18d1      	adds	r1, r2, r3
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf1c:	f7ff ff06 	bl	800bd2c <prvInsertTimerInActiveList>
					break;
 800bf20:	e015      	b.n	800bf4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d103      	bne.n	800bf38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bf30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf32:	f000 fc25 	bl	800c780 <vPortFree>
 800bf36:	e00a      	b.n	800bf4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf3e:	f023 0301 	bic.w	r3, r3, #1
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf4a:	e000      	b.n	800bf4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bf4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf4e:	4b08      	ldr	r3, [pc, #32]	; (800bf70 <prvProcessReceivedCommands+0x1c0>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	1d39      	adds	r1, r7, #4
 800bf54:	2200      	movs	r2, #0
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe fb20 	bl	800a59c <xQueueReceive>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f47f af2a 	bne.w	800bdb8 <prvProcessReceivedCommands+0x8>
	}
}
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop
 800bf68:	3730      	adds	r7, #48	; 0x30
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	20003924 	.word	0x20003924

0800bf74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf7a:	e048      	b.n	800c00e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf7c:	4b2d      	ldr	r3, [pc, #180]	; (800c034 <prvSwitchTimerLists+0xc0>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf86:	4b2b      	ldr	r3, [pc, #172]	; (800c034 <prvSwitchTimerLists+0xc0>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	3304      	adds	r3, #4
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fe f839 	bl	800a00c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfa8:	f003 0304 	and.w	r3, r3, #4
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d02e      	beq.n	800c00e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	699b      	ldr	r3, [r3, #24]
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d90e      	bls.n	800bfe0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfce:	4b19      	ldr	r3, [pc, #100]	; (800c034 <prvSwitchTimerLists+0xc0>)
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4610      	mov	r0, r2
 800bfda:	f7fd ffde 	bl	8009f9a <vListInsert>
 800bfde:	e016      	b.n	800c00e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	693a      	ldr	r2, [r7, #16]
 800bfe8:	2100      	movs	r1, #0
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7ff fd60 	bl	800bab0 <xTimerGenericCommand>
 800bff0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10a      	bne.n	800c00e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffc:	f383 8811 	msr	BASEPRI, r3
 800c000:	f3bf 8f6f 	isb	sy
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	603b      	str	r3, [r7, #0]
}
 800c00a:	bf00      	nop
 800c00c:	e7fe      	b.n	800c00c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c00e:	4b09      	ldr	r3, [pc, #36]	; (800c034 <prvSwitchTimerLists+0xc0>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1b1      	bne.n	800bf7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c018:	4b06      	ldr	r3, [pc, #24]	; (800c034 <prvSwitchTimerLists+0xc0>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c01e:	4b06      	ldr	r3, [pc, #24]	; (800c038 <prvSwitchTimerLists+0xc4>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a04      	ldr	r2, [pc, #16]	; (800c034 <prvSwitchTimerLists+0xc0>)
 800c024:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c026:	4a04      	ldr	r2, [pc, #16]	; (800c038 <prvSwitchTimerLists+0xc4>)
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	6013      	str	r3, [r2, #0]
}
 800c02c:	bf00      	nop
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	2000391c 	.word	0x2000391c
 800c038:	20003920 	.word	0x20003920

0800c03c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c042:	f000 f9af 	bl	800c3a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c046:	4b15      	ldr	r3, [pc, #84]	; (800c09c <prvCheckForValidListAndQueue+0x60>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d120      	bne.n	800c090 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c04e:	4814      	ldr	r0, [pc, #80]	; (800c0a0 <prvCheckForValidListAndQueue+0x64>)
 800c050:	f7fd ff52 	bl	8009ef8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c054:	4813      	ldr	r0, [pc, #76]	; (800c0a4 <prvCheckForValidListAndQueue+0x68>)
 800c056:	f7fd ff4f 	bl	8009ef8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c05a:	4b13      	ldr	r3, [pc, #76]	; (800c0a8 <prvCheckForValidListAndQueue+0x6c>)
 800c05c:	4a10      	ldr	r2, [pc, #64]	; (800c0a0 <prvCheckForValidListAndQueue+0x64>)
 800c05e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c060:	4b12      	ldr	r3, [pc, #72]	; (800c0ac <prvCheckForValidListAndQueue+0x70>)
 800c062:	4a10      	ldr	r2, [pc, #64]	; (800c0a4 <prvCheckForValidListAndQueue+0x68>)
 800c064:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c066:	2300      	movs	r3, #0
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	4b11      	ldr	r3, [pc, #68]	; (800c0b0 <prvCheckForValidListAndQueue+0x74>)
 800c06c:	4a11      	ldr	r2, [pc, #68]	; (800c0b4 <prvCheckForValidListAndQueue+0x78>)
 800c06e:	2110      	movs	r1, #16
 800c070:	200a      	movs	r0, #10
 800c072:	f7fe f85d 	bl	800a130 <xQueueGenericCreateStatic>
 800c076:	4603      	mov	r3, r0
 800c078:	4a08      	ldr	r2, [pc, #32]	; (800c09c <prvCheckForValidListAndQueue+0x60>)
 800c07a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c07c:	4b07      	ldr	r3, [pc, #28]	; (800c09c <prvCheckForValidListAndQueue+0x60>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d005      	beq.n	800c090 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c084:	4b05      	ldr	r3, [pc, #20]	; (800c09c <prvCheckForValidListAndQueue+0x60>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	490b      	ldr	r1, [pc, #44]	; (800c0b8 <prvCheckForValidListAndQueue+0x7c>)
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fe fc76 	bl	800a97c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c090:	f000 f9b8 	bl	800c404 <vPortExitCritical>
}
 800c094:	bf00      	nop
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	20003924 	.word	0x20003924
 800c0a0:	200038f4 	.word	0x200038f4
 800c0a4:	20003908 	.word	0x20003908
 800c0a8:	2000391c 	.word	0x2000391c
 800c0ac:	20003920 	.word	0x20003920
 800c0b0:	200039d0 	.word	0x200039d0
 800c0b4:	20003930 	.word	0x20003930
 800c0b8:	0801296c 	.word	0x0801296c

0800c0bc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <xTimerIsTimerActive+0x28>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	60fb      	str	r3, [r7, #12]
}
 800c0e0:	bf00      	nop
 800c0e2:	e7fe      	b.n	800c0e2 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800c0e4:	f000 f95e 	bl	800c3a4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0ee:	f003 0301 	and.w	r3, r3, #1
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d102      	bne.n	800c0fc <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	617b      	str	r3, [r7, #20]
 800c0fa:	e001      	b.n	800c100 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800c100:	f000 f980 	bl	800c404 <vPortExitCritical>

	return xReturn;
 800c104:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800c106:	4618      	mov	r0, r3
 800c108:	3718      	adds	r7, #24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b086      	sub	sp, #24
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10a      	bne.n	800c136 <pvTimerGetTimerID+0x28>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	60fb      	str	r3, [r7, #12]
}
 800c132:	bf00      	nop
 800c134:	e7fe      	b.n	800c134 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800c136:	f000 f935 	bl	800c3a4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c140:	f000 f960 	bl	800c404 <vPortExitCritical>

	return pvReturn;
 800c144:	693b      	ldr	r3, [r7, #16]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3718      	adds	r7, #24
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
	...

0800c150 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3b04      	subs	r3, #4
 800c160:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	3b04      	subs	r3, #4
 800c16e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	f023 0201 	bic.w	r2, r3, #1
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3b04      	subs	r3, #4
 800c17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c180:	4a0c      	ldr	r2, [pc, #48]	; (800c1b4 <pxPortInitialiseStack+0x64>)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	3b14      	subs	r3, #20
 800c18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3b04      	subs	r3, #4
 800c196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f06f 0202 	mvn.w	r2, #2
 800c19e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	3b20      	subs	r3, #32
 800c1a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr
 800c1b4:	0800c1b9 	.word	0x0800c1b9

0800c1b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1c2:	4b12      	ldr	r3, [pc, #72]	; (800c20c <prvTaskExitError+0x54>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ca:	d00a      	beq.n	800c1e2 <prvTaskExitError+0x2a>
	__asm volatile
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	60fb      	str	r3, [r7, #12]
}
 800c1de:	bf00      	nop
 800c1e0:	e7fe      	b.n	800c1e0 <prvTaskExitError+0x28>
	__asm volatile
 800c1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	60bb      	str	r3, [r7, #8]
}
 800c1f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1f6:	bf00      	nop
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d0fc      	beq.n	800c1f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1fe:	bf00      	nop
 800c200:	bf00      	nop
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	2000003c 	.word	0x2000003c

0800c210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c210:	4b07      	ldr	r3, [pc, #28]	; (800c230 <pxCurrentTCBConst2>)
 800c212:	6819      	ldr	r1, [r3, #0]
 800c214:	6808      	ldr	r0, [r1, #0]
 800c216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21a:	f380 8809 	msr	PSP, r0
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f04f 0000 	mov.w	r0, #0
 800c226:	f380 8811 	msr	BASEPRI, r0
 800c22a:	4770      	bx	lr
 800c22c:	f3af 8000 	nop.w

0800c230 <pxCurrentTCBConst2>:
 800c230:	200033ec 	.word	0x200033ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c234:	bf00      	nop
 800c236:	bf00      	nop

0800c238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c238:	4808      	ldr	r0, [pc, #32]	; (800c25c <prvPortStartFirstTask+0x24>)
 800c23a:	6800      	ldr	r0, [r0, #0]
 800c23c:	6800      	ldr	r0, [r0, #0]
 800c23e:	f380 8808 	msr	MSP, r0
 800c242:	f04f 0000 	mov.w	r0, #0
 800c246:	f380 8814 	msr	CONTROL, r0
 800c24a:	b662      	cpsie	i
 800c24c:	b661      	cpsie	f
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	df00      	svc	0
 800c258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c25a:	bf00      	nop
 800c25c:	e000ed08 	.word	0xe000ed08

0800c260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c266:	4b46      	ldr	r3, [pc, #280]	; (800c380 <xPortStartScheduler+0x120>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a46      	ldr	r2, [pc, #280]	; (800c384 <xPortStartScheduler+0x124>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d10a      	bne.n	800c286 <xPortStartScheduler+0x26>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	613b      	str	r3, [r7, #16]
}
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c286:	4b3e      	ldr	r3, [pc, #248]	; (800c380 <xPortStartScheduler+0x120>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a3f      	ldr	r2, [pc, #252]	; (800c388 <xPortStartScheduler+0x128>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d10a      	bne.n	800c2a6 <xPortStartScheduler+0x46>
	__asm volatile
 800c290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	60fb      	str	r3, [r7, #12]
}
 800c2a2:	bf00      	nop
 800c2a4:	e7fe      	b.n	800c2a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2a6:	4b39      	ldr	r3, [pc, #228]	; (800c38c <xPortStartScheduler+0x12c>)
 800c2a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	22ff      	movs	r2, #255	; 0xff
 800c2b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	4b31      	ldr	r3, [pc, #196]	; (800c390 <xPortStartScheduler+0x130>)
 800c2cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2ce:	4b31      	ldr	r3, [pc, #196]	; (800c394 <xPortStartScheduler+0x134>)
 800c2d0:	2207      	movs	r2, #7
 800c2d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2d4:	e009      	b.n	800c2ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c2d6:	4b2f      	ldr	r3, [pc, #188]	; (800c394 <xPortStartScheduler+0x134>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	4a2d      	ldr	r2, [pc, #180]	; (800c394 <xPortStartScheduler+0x134>)
 800c2de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2e0:	78fb      	ldrb	r3, [r7, #3]
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	005b      	lsls	r3, r3, #1
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2ea:	78fb      	ldrb	r3, [r7, #3]
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f2:	2b80      	cmp	r3, #128	; 0x80
 800c2f4:	d0ef      	beq.n	800c2d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2f6:	4b27      	ldr	r3, [pc, #156]	; (800c394 <xPortStartScheduler+0x134>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f1c3 0307 	rsb	r3, r3, #7
 800c2fe:	2b04      	cmp	r3, #4
 800c300:	d00a      	beq.n	800c318 <xPortStartScheduler+0xb8>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	60bb      	str	r3, [r7, #8]
}
 800c314:	bf00      	nop
 800c316:	e7fe      	b.n	800c316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c318:	4b1e      	ldr	r3, [pc, #120]	; (800c394 <xPortStartScheduler+0x134>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	021b      	lsls	r3, r3, #8
 800c31e:	4a1d      	ldr	r2, [pc, #116]	; (800c394 <xPortStartScheduler+0x134>)
 800c320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c322:	4b1c      	ldr	r3, [pc, #112]	; (800c394 <xPortStartScheduler+0x134>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c32a:	4a1a      	ldr	r2, [pc, #104]	; (800c394 <xPortStartScheduler+0x134>)
 800c32c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	b2da      	uxtb	r2, r3
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c336:	4b18      	ldr	r3, [pc, #96]	; (800c398 <xPortStartScheduler+0x138>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a17      	ldr	r2, [pc, #92]	; (800c398 <xPortStartScheduler+0x138>)
 800c33c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c342:	4b15      	ldr	r3, [pc, #84]	; (800c398 <xPortStartScheduler+0x138>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a14      	ldr	r2, [pc, #80]	; (800c398 <xPortStartScheduler+0x138>)
 800c348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c34c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c34e:	f000 f8dd 	bl	800c50c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c352:	4b12      	ldr	r3, [pc, #72]	; (800c39c <xPortStartScheduler+0x13c>)
 800c354:	2200      	movs	r2, #0
 800c356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c358:	f000 f8fc 	bl	800c554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c35c:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <xPortStartScheduler+0x140>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a0f      	ldr	r2, [pc, #60]	; (800c3a0 <xPortStartScheduler+0x140>)
 800c362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c368:	f7ff ff66 	bl	800c238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c36c:	f7fe ff3c 	bl	800b1e8 <vTaskSwitchContext>
	prvTaskExitError();
 800c370:	f7ff ff22 	bl	800c1b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c374:	2300      	movs	r3, #0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3718      	adds	r7, #24
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	e000ed00 	.word	0xe000ed00
 800c384:	410fc271 	.word	0x410fc271
 800c388:	410fc270 	.word	0x410fc270
 800c38c:	e000e400 	.word	0xe000e400
 800c390:	20003a20 	.word	0x20003a20
 800c394:	20003a24 	.word	0x20003a24
 800c398:	e000ed20 	.word	0xe000ed20
 800c39c:	2000003c 	.word	0x2000003c
 800c3a0:	e000ef34 	.word	0xe000ef34

0800c3a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	607b      	str	r3, [r7, #4]
}
 800c3bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3be:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <vPortEnterCritical+0x58>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	4a0d      	ldr	r2, [pc, #52]	; (800c3fc <vPortEnterCritical+0x58>)
 800c3c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3c8:	4b0c      	ldr	r3, [pc, #48]	; (800c3fc <vPortEnterCritical+0x58>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d10f      	bne.n	800c3f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3d0:	4b0b      	ldr	r3, [pc, #44]	; (800c400 <vPortEnterCritical+0x5c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00a      	beq.n	800c3f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	603b      	str	r3, [r7, #0]
}
 800c3ec:	bf00      	nop
 800c3ee:	e7fe      	b.n	800c3ee <vPortEnterCritical+0x4a>
	}
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	2000003c 	.word	0x2000003c
 800c400:	e000ed04 	.word	0xe000ed04

0800c404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c40a:	4b12      	ldr	r3, [pc, #72]	; (800c454 <vPortExitCritical+0x50>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10a      	bne.n	800c428 <vPortExitCritical+0x24>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	607b      	str	r3, [r7, #4]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c428:	4b0a      	ldr	r3, [pc, #40]	; (800c454 <vPortExitCritical+0x50>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	4a09      	ldr	r2, [pc, #36]	; (800c454 <vPortExitCritical+0x50>)
 800c430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c432:	4b08      	ldr	r3, [pc, #32]	; (800c454 <vPortExitCritical+0x50>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d105      	bne.n	800c446 <vPortExitCritical+0x42>
 800c43a:	2300      	movs	r3, #0
 800c43c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	f383 8811 	msr	BASEPRI, r3
}
 800c444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c446:	bf00      	nop
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	2000003c 	.word	0x2000003c
	...

0800c460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c460:	f3ef 8009 	mrs	r0, PSP
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	4b15      	ldr	r3, [pc, #84]	; (800c4c0 <pxCurrentTCBConst>)
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	f01e 0f10 	tst.w	lr, #16
 800c470:	bf08      	it	eq
 800c472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47a:	6010      	str	r0, [r2, #0]
 800c47c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c480:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c484:	f380 8811 	msr	BASEPRI, r0
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f7fe feaa 	bl	800b1e8 <vTaskSwitchContext>
 800c494:	f04f 0000 	mov.w	r0, #0
 800c498:	f380 8811 	msr	BASEPRI, r0
 800c49c:	bc09      	pop	{r0, r3}
 800c49e:	6819      	ldr	r1, [r3, #0]
 800c4a0:	6808      	ldr	r0, [r1, #0]
 800c4a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a6:	f01e 0f10 	tst.w	lr, #16
 800c4aa:	bf08      	it	eq
 800c4ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4b0:	f380 8809 	msr	PSP, r0
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	f3af 8000 	nop.w

0800c4c0 <pxCurrentTCBConst>:
 800c4c0:	200033ec 	.word	0x200033ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop

0800c4c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	607b      	str	r3, [r7, #4]
}
 800c4e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4e2:	f7fe fdc7 	bl	800b074 <xTaskIncrementTick>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d003      	beq.n	800c4f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4ec:	4b06      	ldr	r3, [pc, #24]	; (800c508 <xPortSysTickHandler+0x40>)
 800c4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	f383 8811 	msr	BASEPRI, r3
}
 800c4fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	e000ed04 	.word	0xe000ed04

0800c50c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c50c:	b480      	push	{r7}
 800c50e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c510:	4b0b      	ldr	r3, [pc, #44]	; (800c540 <vPortSetupTimerInterrupt+0x34>)
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c516:	4b0b      	ldr	r3, [pc, #44]	; (800c544 <vPortSetupTimerInterrupt+0x38>)
 800c518:	2200      	movs	r2, #0
 800c51a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c51c:	4b0a      	ldr	r3, [pc, #40]	; (800c548 <vPortSetupTimerInterrupt+0x3c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a0a      	ldr	r2, [pc, #40]	; (800c54c <vPortSetupTimerInterrupt+0x40>)
 800c522:	fba2 2303 	umull	r2, r3, r2, r3
 800c526:	095b      	lsrs	r3, r3, #5
 800c528:	4a09      	ldr	r2, [pc, #36]	; (800c550 <vPortSetupTimerInterrupt+0x44>)
 800c52a:	3b01      	subs	r3, #1
 800c52c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c52e:	4b04      	ldr	r3, [pc, #16]	; (800c540 <vPortSetupTimerInterrupt+0x34>)
 800c530:	2207      	movs	r2, #7
 800c532:	601a      	str	r2, [r3, #0]
}
 800c534:	bf00      	nop
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	e000e010 	.word	0xe000e010
 800c544:	e000e018 	.word	0xe000e018
 800c548:	20000010 	.word	0x20000010
 800c54c:	51eb851f 	.word	0x51eb851f
 800c550:	e000e014 	.word	0xe000e014

0800c554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c564 <vPortEnableVFP+0x10>
 800c558:	6801      	ldr	r1, [r0, #0]
 800c55a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c55e:	6001      	str	r1, [r0, #0]
 800c560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c562:	bf00      	nop
 800c564:	e000ed88 	.word	0xe000ed88

0800c568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c56e:	f3ef 8305 	mrs	r3, IPSR
 800c572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b0f      	cmp	r3, #15
 800c578:	d914      	bls.n	800c5a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c57a:	4a17      	ldr	r2, [pc, #92]	; (800c5d8 <vPortValidateInterruptPriority+0x70>)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4413      	add	r3, r2
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c584:	4b15      	ldr	r3, [pc, #84]	; (800c5dc <vPortValidateInterruptPriority+0x74>)
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	7afa      	ldrb	r2, [r7, #11]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d20a      	bcs.n	800c5a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	607b      	str	r3, [r7, #4]
}
 800c5a0:	bf00      	nop
 800c5a2:	e7fe      	b.n	800c5a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5a4:	4b0e      	ldr	r3, [pc, #56]	; (800c5e0 <vPortValidateInterruptPriority+0x78>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c5ac:	4b0d      	ldr	r3, [pc, #52]	; (800c5e4 <vPortValidateInterruptPriority+0x7c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d90a      	bls.n	800c5ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	603b      	str	r3, [r7, #0]
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <vPortValidateInterruptPriority+0x60>
	}
 800c5ca:	bf00      	nop
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	e000e3f0 	.word	0xe000e3f0
 800c5dc:	20003a20 	.word	0x20003a20
 800c5e0:	e000ed0c 	.word	0xe000ed0c
 800c5e4:	20003a24 	.word	0x20003a24

0800c5e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b08a      	sub	sp, #40	; 0x28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5f4:	f7fe fc82 	bl	800aefc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5f8:	4b5b      	ldr	r3, [pc, #364]	; (800c768 <pvPortMalloc+0x180>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c600:	f000 f920 	bl	800c844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c604:	4b59      	ldr	r3, [pc, #356]	; (800c76c <pvPortMalloc+0x184>)
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4013      	ands	r3, r2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f040 8093 	bne.w	800c738 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d01d      	beq.n	800c654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c618:	2208      	movs	r2, #8
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4413      	add	r3, r2
 800c61e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f003 0307 	and.w	r3, r3, #7
 800c626:	2b00      	cmp	r3, #0
 800c628:	d014      	beq.n	800c654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f023 0307 	bic.w	r3, r3, #7
 800c630:	3308      	adds	r3, #8
 800c632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f003 0307 	and.w	r3, r3, #7
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00a      	beq.n	800c654 <pvPortMalloc+0x6c>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	617b      	str	r3, [r7, #20]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d06e      	beq.n	800c738 <pvPortMalloc+0x150>
 800c65a:	4b45      	ldr	r3, [pc, #276]	; (800c770 <pvPortMalloc+0x188>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	429a      	cmp	r2, r3
 800c662:	d869      	bhi.n	800c738 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c664:	4b43      	ldr	r3, [pc, #268]	; (800c774 <pvPortMalloc+0x18c>)
 800c666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c668:	4b42      	ldr	r3, [pc, #264]	; (800c774 <pvPortMalloc+0x18c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c66e:	e004      	b.n	800c67a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	429a      	cmp	r2, r3
 800c682:	d903      	bls.n	800c68c <pvPortMalloc+0xa4>
 800c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1f1      	bne.n	800c670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c68c:	4b36      	ldr	r3, [pc, #216]	; (800c768 <pvPortMalloc+0x180>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c692:	429a      	cmp	r2, r3
 800c694:	d050      	beq.n	800c738 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c696:	6a3b      	ldr	r3, [r7, #32]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2208      	movs	r2, #8
 800c69c:	4413      	add	r3, r2
 800c69e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	1ad2      	subs	r2, r2, r3
 800c6b0:	2308      	movs	r3, #8
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d91f      	bls.n	800c6f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4413      	add	r3, r2
 800c6be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	f003 0307 	and.w	r3, r3, #7
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00a      	beq.n	800c6e0 <pvPortMalloc+0xf8>
	__asm volatile
 800c6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ce:	f383 8811 	msr	BASEPRI, r3
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	613b      	str	r3, [r7, #16]
}
 800c6dc:	bf00      	nop
 800c6de:	e7fe      	b.n	800c6de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	685a      	ldr	r2, [r3, #4]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	1ad2      	subs	r2, r2, r3
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6f2:	69b8      	ldr	r0, [r7, #24]
 800c6f4:	f000 f908 	bl	800c908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6f8:	4b1d      	ldr	r3, [pc, #116]	; (800c770 <pvPortMalloc+0x188>)
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	4a1b      	ldr	r2, [pc, #108]	; (800c770 <pvPortMalloc+0x188>)
 800c704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c706:	4b1a      	ldr	r3, [pc, #104]	; (800c770 <pvPortMalloc+0x188>)
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	4b1b      	ldr	r3, [pc, #108]	; (800c778 <pvPortMalloc+0x190>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d203      	bcs.n	800c71a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c712:	4b17      	ldr	r3, [pc, #92]	; (800c770 <pvPortMalloc+0x188>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a18      	ldr	r2, [pc, #96]	; (800c778 <pvPortMalloc+0x190>)
 800c718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	4b13      	ldr	r3, [pc, #76]	; (800c76c <pvPortMalloc+0x184>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	431a      	orrs	r2, r3
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c72e:	4b13      	ldr	r3, [pc, #76]	; (800c77c <pvPortMalloc+0x194>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3301      	adds	r3, #1
 800c734:	4a11      	ldr	r2, [pc, #68]	; (800c77c <pvPortMalloc+0x194>)
 800c736:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c738:	f7fe fbee 	bl	800af18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00a      	beq.n	800c75c <pvPortMalloc+0x174>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	60fb      	str	r3, [r7, #12]
}
 800c758:	bf00      	nop
 800c75a:	e7fe      	b.n	800c75a <pvPortMalloc+0x172>
	return pvReturn;
 800c75c:	69fb      	ldr	r3, [r7, #28]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3728      	adds	r7, #40	; 0x28
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	20005970 	.word	0x20005970
 800c76c:	20005984 	.word	0x20005984
 800c770:	20005974 	.word	0x20005974
 800c774:	20005968 	.word	0x20005968
 800c778:	20005978 	.word	0x20005978
 800c77c:	2000597c 	.word	0x2000597c

0800c780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d04d      	beq.n	800c82e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c792:	2308      	movs	r3, #8
 800c794:	425b      	negs	r3, r3
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	4413      	add	r3, r2
 800c79a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	685a      	ldr	r2, [r3, #4]
 800c7a4:	4b24      	ldr	r3, [pc, #144]	; (800c838 <vPortFree+0xb8>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4013      	ands	r3, r2
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10a      	bne.n	800c7c4 <vPortFree+0x44>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	60fb      	str	r3, [r7, #12]
}
 800c7c0:	bf00      	nop
 800c7c2:	e7fe      	b.n	800c7c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00a      	beq.n	800c7e2 <vPortFree+0x62>
	__asm volatile
 800c7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d0:	f383 8811 	msr	BASEPRI, r3
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	60bb      	str	r3, [r7, #8]
}
 800c7de:	bf00      	nop
 800c7e0:	e7fe      	b.n	800c7e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	4b14      	ldr	r3, [pc, #80]	; (800c838 <vPortFree+0xb8>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d01e      	beq.n	800c82e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d11a      	bne.n	800c82e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	685a      	ldr	r2, [r3, #4]
 800c7fc:	4b0e      	ldr	r3, [pc, #56]	; (800c838 <vPortFree+0xb8>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	43db      	mvns	r3, r3
 800c802:	401a      	ands	r2, r3
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c808:	f7fe fb78 	bl	800aefc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <vPortFree+0xbc>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4413      	add	r3, r2
 800c816:	4a09      	ldr	r2, [pc, #36]	; (800c83c <vPortFree+0xbc>)
 800c818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c81a:	6938      	ldr	r0, [r7, #16]
 800c81c:	f000 f874 	bl	800c908 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c820:	4b07      	ldr	r3, [pc, #28]	; (800c840 <vPortFree+0xc0>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	3301      	adds	r3, #1
 800c826:	4a06      	ldr	r2, [pc, #24]	; (800c840 <vPortFree+0xc0>)
 800c828:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c82a:	f7fe fb75 	bl	800af18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c82e:	bf00      	nop
 800c830:	3718      	adds	r7, #24
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	20005984 	.word	0x20005984
 800c83c:	20005974 	.word	0x20005974
 800c840:	20005980 	.word	0x20005980

0800c844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c84a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800c84e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c850:	4b27      	ldr	r3, [pc, #156]	; (800c8f0 <prvHeapInit+0xac>)
 800c852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f003 0307 	and.w	r3, r3, #7
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00c      	beq.n	800c878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3307      	adds	r3, #7
 800c862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f023 0307 	bic.w	r3, r3, #7
 800c86a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c86c:	68ba      	ldr	r2, [r7, #8]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	4a1f      	ldr	r2, [pc, #124]	; (800c8f0 <prvHeapInit+0xac>)
 800c874:	4413      	add	r3, r2
 800c876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c87c:	4a1d      	ldr	r2, [pc, #116]	; (800c8f4 <prvHeapInit+0xb0>)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c882:	4b1c      	ldr	r3, [pc, #112]	; (800c8f4 <prvHeapInit+0xb0>)
 800c884:	2200      	movs	r2, #0
 800c886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	4413      	add	r3, r2
 800c88e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c890:	2208      	movs	r2, #8
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	1a9b      	subs	r3, r3, r2
 800c896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f023 0307 	bic.w	r3, r3, #7
 800c89e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	4a15      	ldr	r2, [pc, #84]	; (800c8f8 <prvHeapInit+0xb4>)
 800c8a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8a6:	4b14      	ldr	r3, [pc, #80]	; (800c8f8 <prvHeapInit+0xb4>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8ae:	4b12      	ldr	r3, [pc, #72]	; (800c8f8 <prvHeapInit+0xb4>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	1ad2      	subs	r2, r2, r3
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8c4:	4b0c      	ldr	r3, [pc, #48]	; (800c8f8 <prvHeapInit+0xb4>)
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	4a0a      	ldr	r2, [pc, #40]	; (800c8fc <prvHeapInit+0xb8>)
 800c8d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	4a09      	ldr	r2, [pc, #36]	; (800c900 <prvHeapInit+0xbc>)
 800c8da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8dc:	4b09      	ldr	r3, [pc, #36]	; (800c904 <prvHeapInit+0xc0>)
 800c8de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8e2:	601a      	str	r2, [r3, #0]
}
 800c8e4:	bf00      	nop
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr
 800c8f0:	20003a28 	.word	0x20003a28
 800c8f4:	20005968 	.word	0x20005968
 800c8f8:	20005970 	.word	0x20005970
 800c8fc:	20005978 	.word	0x20005978
 800c900:	20005974 	.word	0x20005974
 800c904:	20005984 	.word	0x20005984

0800c908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c910:	4b28      	ldr	r3, [pc, #160]	; (800c9b4 <prvInsertBlockIntoFreeList+0xac>)
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	e002      	b.n	800c91c <prvInsertBlockIntoFreeList+0x14>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	60fb      	str	r3, [r7, #12]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	429a      	cmp	r2, r3
 800c924:	d8f7      	bhi.n	800c916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	4413      	add	r3, r2
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	429a      	cmp	r2, r3
 800c936:	d108      	bne.n	800c94a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	441a      	add	r2, r3
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	68ba      	ldr	r2, [r7, #8]
 800c954:	441a      	add	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d118      	bne.n	800c990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	d00d      	beq.n	800c986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	441a      	add	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	e008      	b.n	800c998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c986:	4b0c      	ldr	r3, [pc, #48]	; (800c9b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	601a      	str	r2, [r3, #0]
 800c98e:	e003      	b.n	800c998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d002      	beq.n	800c9a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9a6:	bf00      	nop
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	20005968 	.word	0x20005968
 800c9b8:	20005970 	.word	0x20005970

0800c9bc <__errno>:
 800c9bc:	4b01      	ldr	r3, [pc, #4]	; (800c9c4 <__errno+0x8>)
 800c9be:	6818      	ldr	r0, [r3, #0]
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	20000040 	.word	0x20000040

0800c9c8 <std>:
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	b510      	push	{r4, lr}
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c9d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9d6:	6083      	str	r3, [r0, #8]
 800c9d8:	8181      	strh	r1, [r0, #12]
 800c9da:	6643      	str	r3, [r0, #100]	; 0x64
 800c9dc:	81c2      	strh	r2, [r0, #14]
 800c9de:	6183      	str	r3, [r0, #24]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	2208      	movs	r2, #8
 800c9e4:	305c      	adds	r0, #92	; 0x5c
 800c9e6:	f000 f91a 	bl	800cc1e <memset>
 800c9ea:	4b05      	ldr	r3, [pc, #20]	; (800ca00 <std+0x38>)
 800c9ec:	6263      	str	r3, [r4, #36]	; 0x24
 800c9ee:	4b05      	ldr	r3, [pc, #20]	; (800ca04 <std+0x3c>)
 800c9f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9f2:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <std+0x40>)
 800c9f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9f6:	4b05      	ldr	r3, [pc, #20]	; (800ca0c <std+0x44>)
 800c9f8:	6224      	str	r4, [r4, #32]
 800c9fa:	6323      	str	r3, [r4, #48]	; 0x30
 800c9fc:	bd10      	pop	{r4, pc}
 800c9fe:	bf00      	nop
 800ca00:	0800db19 	.word	0x0800db19
 800ca04:	0800db3b 	.word	0x0800db3b
 800ca08:	0800db73 	.word	0x0800db73
 800ca0c:	0800db97 	.word	0x0800db97

0800ca10 <_cleanup_r>:
 800ca10:	4901      	ldr	r1, [pc, #4]	; (800ca18 <_cleanup_r+0x8>)
 800ca12:	f000 b8af 	b.w	800cb74 <_fwalk_reent>
 800ca16:	bf00      	nop
 800ca18:	0800f745 	.word	0x0800f745

0800ca1c <__sfmoreglue>:
 800ca1c:	b570      	push	{r4, r5, r6, lr}
 800ca1e:	1e4a      	subs	r2, r1, #1
 800ca20:	2568      	movs	r5, #104	; 0x68
 800ca22:	4355      	muls	r5, r2
 800ca24:	460e      	mov	r6, r1
 800ca26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca2a:	f000 f901 	bl	800cc30 <_malloc_r>
 800ca2e:	4604      	mov	r4, r0
 800ca30:	b140      	cbz	r0, 800ca44 <__sfmoreglue+0x28>
 800ca32:	2100      	movs	r1, #0
 800ca34:	e9c0 1600 	strd	r1, r6, [r0]
 800ca38:	300c      	adds	r0, #12
 800ca3a:	60a0      	str	r0, [r4, #8]
 800ca3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca40:	f000 f8ed 	bl	800cc1e <memset>
 800ca44:	4620      	mov	r0, r4
 800ca46:	bd70      	pop	{r4, r5, r6, pc}

0800ca48 <__sfp_lock_acquire>:
 800ca48:	4801      	ldr	r0, [pc, #4]	; (800ca50 <__sfp_lock_acquire+0x8>)
 800ca4a:	f000 b8d8 	b.w	800cbfe <__retarget_lock_acquire_recursive>
 800ca4e:	bf00      	nop
 800ca50:	200062d0 	.word	0x200062d0

0800ca54 <__sfp_lock_release>:
 800ca54:	4801      	ldr	r0, [pc, #4]	; (800ca5c <__sfp_lock_release+0x8>)
 800ca56:	f000 b8d3 	b.w	800cc00 <__retarget_lock_release_recursive>
 800ca5a:	bf00      	nop
 800ca5c:	200062d0 	.word	0x200062d0

0800ca60 <__sinit_lock_acquire>:
 800ca60:	4801      	ldr	r0, [pc, #4]	; (800ca68 <__sinit_lock_acquire+0x8>)
 800ca62:	f000 b8cc 	b.w	800cbfe <__retarget_lock_acquire_recursive>
 800ca66:	bf00      	nop
 800ca68:	200062cb 	.word	0x200062cb

0800ca6c <__sinit_lock_release>:
 800ca6c:	4801      	ldr	r0, [pc, #4]	; (800ca74 <__sinit_lock_release+0x8>)
 800ca6e:	f000 b8c7 	b.w	800cc00 <__retarget_lock_release_recursive>
 800ca72:	bf00      	nop
 800ca74:	200062cb 	.word	0x200062cb

0800ca78 <__sinit>:
 800ca78:	b510      	push	{r4, lr}
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	f7ff fff0 	bl	800ca60 <__sinit_lock_acquire>
 800ca80:	69a3      	ldr	r3, [r4, #24]
 800ca82:	b11b      	cbz	r3, 800ca8c <__sinit+0x14>
 800ca84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca88:	f7ff bff0 	b.w	800ca6c <__sinit_lock_release>
 800ca8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca90:	6523      	str	r3, [r4, #80]	; 0x50
 800ca92:	4b13      	ldr	r3, [pc, #76]	; (800cae0 <__sinit+0x68>)
 800ca94:	4a13      	ldr	r2, [pc, #76]	; (800cae4 <__sinit+0x6c>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca9a:	42a3      	cmp	r3, r4
 800ca9c:	bf04      	itt	eq
 800ca9e:	2301      	moveq	r3, #1
 800caa0:	61a3      	streq	r3, [r4, #24]
 800caa2:	4620      	mov	r0, r4
 800caa4:	f000 f820 	bl	800cae8 <__sfp>
 800caa8:	6060      	str	r0, [r4, #4]
 800caaa:	4620      	mov	r0, r4
 800caac:	f000 f81c 	bl	800cae8 <__sfp>
 800cab0:	60a0      	str	r0, [r4, #8]
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 f818 	bl	800cae8 <__sfp>
 800cab8:	2200      	movs	r2, #0
 800caba:	60e0      	str	r0, [r4, #12]
 800cabc:	2104      	movs	r1, #4
 800cabe:	6860      	ldr	r0, [r4, #4]
 800cac0:	f7ff ff82 	bl	800c9c8 <std>
 800cac4:	68a0      	ldr	r0, [r4, #8]
 800cac6:	2201      	movs	r2, #1
 800cac8:	2109      	movs	r1, #9
 800caca:	f7ff ff7d 	bl	800c9c8 <std>
 800cace:	68e0      	ldr	r0, [r4, #12]
 800cad0:	2202      	movs	r2, #2
 800cad2:	2112      	movs	r1, #18
 800cad4:	f7ff ff78 	bl	800c9c8 <std>
 800cad8:	2301      	movs	r3, #1
 800cada:	61a3      	str	r3, [r4, #24]
 800cadc:	e7d2      	b.n	800ca84 <__sinit+0xc>
 800cade:	bf00      	nop
 800cae0:	08012a50 	.word	0x08012a50
 800cae4:	0800ca11 	.word	0x0800ca11

0800cae8 <__sfp>:
 800cae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caea:	4607      	mov	r7, r0
 800caec:	f7ff ffac 	bl	800ca48 <__sfp_lock_acquire>
 800caf0:	4b1e      	ldr	r3, [pc, #120]	; (800cb6c <__sfp+0x84>)
 800caf2:	681e      	ldr	r6, [r3, #0]
 800caf4:	69b3      	ldr	r3, [r6, #24]
 800caf6:	b913      	cbnz	r3, 800cafe <__sfp+0x16>
 800caf8:	4630      	mov	r0, r6
 800cafa:	f7ff ffbd 	bl	800ca78 <__sinit>
 800cafe:	3648      	adds	r6, #72	; 0x48
 800cb00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	d503      	bpl.n	800cb10 <__sfp+0x28>
 800cb08:	6833      	ldr	r3, [r6, #0]
 800cb0a:	b30b      	cbz	r3, 800cb50 <__sfp+0x68>
 800cb0c:	6836      	ldr	r6, [r6, #0]
 800cb0e:	e7f7      	b.n	800cb00 <__sfp+0x18>
 800cb10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb14:	b9d5      	cbnz	r5, 800cb4c <__sfp+0x64>
 800cb16:	4b16      	ldr	r3, [pc, #88]	; (800cb70 <__sfp+0x88>)
 800cb18:	60e3      	str	r3, [r4, #12]
 800cb1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb1e:	6665      	str	r5, [r4, #100]	; 0x64
 800cb20:	f000 f86c 	bl	800cbfc <__retarget_lock_init_recursive>
 800cb24:	f7ff ff96 	bl	800ca54 <__sfp_lock_release>
 800cb28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb30:	6025      	str	r5, [r4, #0]
 800cb32:	61a5      	str	r5, [r4, #24]
 800cb34:	2208      	movs	r2, #8
 800cb36:	4629      	mov	r1, r5
 800cb38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb3c:	f000 f86f 	bl	800cc1e <memset>
 800cb40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb48:	4620      	mov	r0, r4
 800cb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb4c:	3468      	adds	r4, #104	; 0x68
 800cb4e:	e7d9      	b.n	800cb04 <__sfp+0x1c>
 800cb50:	2104      	movs	r1, #4
 800cb52:	4638      	mov	r0, r7
 800cb54:	f7ff ff62 	bl	800ca1c <__sfmoreglue>
 800cb58:	4604      	mov	r4, r0
 800cb5a:	6030      	str	r0, [r6, #0]
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d1d5      	bne.n	800cb0c <__sfp+0x24>
 800cb60:	f7ff ff78 	bl	800ca54 <__sfp_lock_release>
 800cb64:	230c      	movs	r3, #12
 800cb66:	603b      	str	r3, [r7, #0]
 800cb68:	e7ee      	b.n	800cb48 <__sfp+0x60>
 800cb6a:	bf00      	nop
 800cb6c:	08012a50 	.word	0x08012a50
 800cb70:	ffff0001 	.word	0xffff0001

0800cb74 <_fwalk_reent>:
 800cb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb78:	4606      	mov	r6, r0
 800cb7a:	4688      	mov	r8, r1
 800cb7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb80:	2700      	movs	r7, #0
 800cb82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb86:	f1b9 0901 	subs.w	r9, r9, #1
 800cb8a:	d505      	bpl.n	800cb98 <_fwalk_reent+0x24>
 800cb8c:	6824      	ldr	r4, [r4, #0]
 800cb8e:	2c00      	cmp	r4, #0
 800cb90:	d1f7      	bne.n	800cb82 <_fwalk_reent+0xe>
 800cb92:	4638      	mov	r0, r7
 800cb94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb98:	89ab      	ldrh	r3, [r5, #12]
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d907      	bls.n	800cbae <_fwalk_reent+0x3a>
 800cb9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cba2:	3301      	adds	r3, #1
 800cba4:	d003      	beq.n	800cbae <_fwalk_reent+0x3a>
 800cba6:	4629      	mov	r1, r5
 800cba8:	4630      	mov	r0, r6
 800cbaa:	47c0      	blx	r8
 800cbac:	4307      	orrs	r7, r0
 800cbae:	3568      	adds	r5, #104	; 0x68
 800cbb0:	e7e9      	b.n	800cb86 <_fwalk_reent+0x12>
	...

0800cbb4 <__libc_init_array>:
 800cbb4:	b570      	push	{r4, r5, r6, lr}
 800cbb6:	4d0d      	ldr	r5, [pc, #52]	; (800cbec <__libc_init_array+0x38>)
 800cbb8:	4c0d      	ldr	r4, [pc, #52]	; (800cbf0 <__libc_init_array+0x3c>)
 800cbba:	1b64      	subs	r4, r4, r5
 800cbbc:	10a4      	asrs	r4, r4, #2
 800cbbe:	2600      	movs	r6, #0
 800cbc0:	42a6      	cmp	r6, r4
 800cbc2:	d109      	bne.n	800cbd8 <__libc_init_array+0x24>
 800cbc4:	4d0b      	ldr	r5, [pc, #44]	; (800cbf4 <__libc_init_array+0x40>)
 800cbc6:	4c0c      	ldr	r4, [pc, #48]	; (800cbf8 <__libc_init_array+0x44>)
 800cbc8:	f005 fb64 	bl	8012294 <_init>
 800cbcc:	1b64      	subs	r4, r4, r5
 800cbce:	10a4      	asrs	r4, r4, #2
 800cbd0:	2600      	movs	r6, #0
 800cbd2:	42a6      	cmp	r6, r4
 800cbd4:	d105      	bne.n	800cbe2 <__libc_init_array+0x2e>
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}
 800cbd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbdc:	4798      	blx	r3
 800cbde:	3601      	adds	r6, #1
 800cbe0:	e7ee      	b.n	800cbc0 <__libc_init_array+0xc>
 800cbe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbe6:	4798      	blx	r3
 800cbe8:	3601      	adds	r6, #1
 800cbea:	e7f2      	b.n	800cbd2 <__libc_init_array+0x1e>
 800cbec:	08012ef0 	.word	0x08012ef0
 800cbf0:	08012ef0 	.word	0x08012ef0
 800cbf4:	08012ef0 	.word	0x08012ef0
 800cbf8:	08012ef4 	.word	0x08012ef4

0800cbfc <__retarget_lock_init_recursive>:
 800cbfc:	4770      	bx	lr

0800cbfe <__retarget_lock_acquire_recursive>:
 800cbfe:	4770      	bx	lr

0800cc00 <__retarget_lock_release_recursive>:
 800cc00:	4770      	bx	lr

0800cc02 <memcpy>:
 800cc02:	440a      	add	r2, r1
 800cc04:	4291      	cmp	r1, r2
 800cc06:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc0a:	d100      	bne.n	800cc0e <memcpy+0xc>
 800cc0c:	4770      	bx	lr
 800cc0e:	b510      	push	{r4, lr}
 800cc10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc18:	4291      	cmp	r1, r2
 800cc1a:	d1f9      	bne.n	800cc10 <memcpy+0xe>
 800cc1c:	bd10      	pop	{r4, pc}

0800cc1e <memset>:
 800cc1e:	4402      	add	r2, r0
 800cc20:	4603      	mov	r3, r0
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d100      	bne.n	800cc28 <memset+0xa>
 800cc26:	4770      	bx	lr
 800cc28:	f803 1b01 	strb.w	r1, [r3], #1
 800cc2c:	e7f9      	b.n	800cc22 <memset+0x4>
	...

0800cc30 <_malloc_r>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	1ccd      	adds	r5, r1, #3
 800cc34:	f025 0503 	bic.w	r5, r5, #3
 800cc38:	3508      	adds	r5, #8
 800cc3a:	2d0c      	cmp	r5, #12
 800cc3c:	bf38      	it	cc
 800cc3e:	250c      	movcc	r5, #12
 800cc40:	2d00      	cmp	r5, #0
 800cc42:	4606      	mov	r6, r0
 800cc44:	db01      	blt.n	800cc4a <_malloc_r+0x1a>
 800cc46:	42a9      	cmp	r1, r5
 800cc48:	d903      	bls.n	800cc52 <_malloc_r+0x22>
 800cc4a:	230c      	movs	r3, #12
 800cc4c:	6033      	str	r3, [r6, #0]
 800cc4e:	2000      	movs	r0, #0
 800cc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc52:	f003 f953 	bl	800fefc <__malloc_lock>
 800cc56:	4921      	ldr	r1, [pc, #132]	; (800ccdc <_malloc_r+0xac>)
 800cc58:	680a      	ldr	r2, [r1, #0]
 800cc5a:	4614      	mov	r4, r2
 800cc5c:	b99c      	cbnz	r4, 800cc86 <_malloc_r+0x56>
 800cc5e:	4f20      	ldr	r7, [pc, #128]	; (800cce0 <_malloc_r+0xb0>)
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	b923      	cbnz	r3, 800cc6e <_malloc_r+0x3e>
 800cc64:	4621      	mov	r1, r4
 800cc66:	4630      	mov	r0, r6
 800cc68:	f000 ff20 	bl	800daac <_sbrk_r>
 800cc6c:	6038      	str	r0, [r7, #0]
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4630      	mov	r0, r6
 800cc72:	f000 ff1b 	bl	800daac <_sbrk_r>
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	d123      	bne.n	800ccc2 <_malloc_r+0x92>
 800cc7a:	230c      	movs	r3, #12
 800cc7c:	6033      	str	r3, [r6, #0]
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f003 f942 	bl	800ff08 <__malloc_unlock>
 800cc84:	e7e3      	b.n	800cc4e <_malloc_r+0x1e>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	1b5b      	subs	r3, r3, r5
 800cc8a:	d417      	bmi.n	800ccbc <_malloc_r+0x8c>
 800cc8c:	2b0b      	cmp	r3, #11
 800cc8e:	d903      	bls.n	800cc98 <_malloc_r+0x68>
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	441c      	add	r4, r3
 800cc94:	6025      	str	r5, [r4, #0]
 800cc96:	e004      	b.n	800cca2 <_malloc_r+0x72>
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	42a2      	cmp	r2, r4
 800cc9c:	bf0c      	ite	eq
 800cc9e:	600b      	streq	r3, [r1, #0]
 800cca0:	6053      	strne	r3, [r2, #4]
 800cca2:	4630      	mov	r0, r6
 800cca4:	f003 f930 	bl	800ff08 <__malloc_unlock>
 800cca8:	f104 000b 	add.w	r0, r4, #11
 800ccac:	1d23      	adds	r3, r4, #4
 800ccae:	f020 0007 	bic.w	r0, r0, #7
 800ccb2:	1ac2      	subs	r2, r0, r3
 800ccb4:	d0cc      	beq.n	800cc50 <_malloc_r+0x20>
 800ccb6:	1a1b      	subs	r3, r3, r0
 800ccb8:	50a3      	str	r3, [r4, r2]
 800ccba:	e7c9      	b.n	800cc50 <_malloc_r+0x20>
 800ccbc:	4622      	mov	r2, r4
 800ccbe:	6864      	ldr	r4, [r4, #4]
 800ccc0:	e7cc      	b.n	800cc5c <_malloc_r+0x2c>
 800ccc2:	1cc4      	adds	r4, r0, #3
 800ccc4:	f024 0403 	bic.w	r4, r4, #3
 800ccc8:	42a0      	cmp	r0, r4
 800ccca:	d0e3      	beq.n	800cc94 <_malloc_r+0x64>
 800cccc:	1a21      	subs	r1, r4, r0
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f000 feec 	bl	800daac <_sbrk_r>
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	d1dd      	bne.n	800cc94 <_malloc_r+0x64>
 800ccd8:	e7cf      	b.n	800cc7a <_malloc_r+0x4a>
 800ccda:	bf00      	nop
 800ccdc:	20005988 	.word	0x20005988
 800cce0:	2000598c 	.word	0x2000598c

0800cce4 <__cvt>:
 800cce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cce8:	ec55 4b10 	vmov	r4, r5, d0
 800ccec:	2d00      	cmp	r5, #0
 800ccee:	460e      	mov	r6, r1
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	462b      	mov	r3, r5
 800ccf4:	bfbb      	ittet	lt
 800ccf6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ccfa:	461d      	movlt	r5, r3
 800ccfc:	2300      	movge	r3, #0
 800ccfe:	232d      	movlt	r3, #45	; 0x2d
 800cd00:	700b      	strb	r3, [r1, #0]
 800cd02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cd08:	4691      	mov	r9, r2
 800cd0a:	f023 0820 	bic.w	r8, r3, #32
 800cd0e:	bfbc      	itt	lt
 800cd10:	4622      	movlt	r2, r4
 800cd12:	4614      	movlt	r4, r2
 800cd14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd18:	d005      	beq.n	800cd26 <__cvt+0x42>
 800cd1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cd1e:	d100      	bne.n	800cd22 <__cvt+0x3e>
 800cd20:	3601      	adds	r6, #1
 800cd22:	2102      	movs	r1, #2
 800cd24:	e000      	b.n	800cd28 <__cvt+0x44>
 800cd26:	2103      	movs	r1, #3
 800cd28:	ab03      	add	r3, sp, #12
 800cd2a:	9301      	str	r3, [sp, #4]
 800cd2c:	ab02      	add	r3, sp, #8
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	ec45 4b10 	vmov	d0, r4, r5
 800cd34:	4653      	mov	r3, sl
 800cd36:	4632      	mov	r2, r6
 800cd38:	f001 fe92 	bl	800ea60 <_dtoa_r>
 800cd3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cd40:	4607      	mov	r7, r0
 800cd42:	d102      	bne.n	800cd4a <__cvt+0x66>
 800cd44:	f019 0f01 	tst.w	r9, #1
 800cd48:	d022      	beq.n	800cd90 <__cvt+0xac>
 800cd4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd4e:	eb07 0906 	add.w	r9, r7, r6
 800cd52:	d110      	bne.n	800cd76 <__cvt+0x92>
 800cd54:	783b      	ldrb	r3, [r7, #0]
 800cd56:	2b30      	cmp	r3, #48	; 0x30
 800cd58:	d10a      	bne.n	800cd70 <__cvt+0x8c>
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	4620      	mov	r0, r4
 800cd60:	4629      	mov	r1, r5
 800cd62:	f7f3 feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd66:	b918      	cbnz	r0, 800cd70 <__cvt+0x8c>
 800cd68:	f1c6 0601 	rsb	r6, r6, #1
 800cd6c:	f8ca 6000 	str.w	r6, [sl]
 800cd70:	f8da 3000 	ldr.w	r3, [sl]
 800cd74:	4499      	add	r9, r3
 800cd76:	2200      	movs	r2, #0
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	f7f3 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd82:	b108      	cbz	r0, 800cd88 <__cvt+0xa4>
 800cd84:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd88:	2230      	movs	r2, #48	; 0x30
 800cd8a:	9b03      	ldr	r3, [sp, #12]
 800cd8c:	454b      	cmp	r3, r9
 800cd8e:	d307      	bcc.n	800cda0 <__cvt+0xbc>
 800cd90:	9b03      	ldr	r3, [sp, #12]
 800cd92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd94:	1bdb      	subs	r3, r3, r7
 800cd96:	4638      	mov	r0, r7
 800cd98:	6013      	str	r3, [r2, #0]
 800cd9a:	b004      	add	sp, #16
 800cd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda0:	1c59      	adds	r1, r3, #1
 800cda2:	9103      	str	r1, [sp, #12]
 800cda4:	701a      	strb	r2, [r3, #0]
 800cda6:	e7f0      	b.n	800cd8a <__cvt+0xa6>

0800cda8 <__exponent>:
 800cda8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2900      	cmp	r1, #0
 800cdae:	bfb8      	it	lt
 800cdb0:	4249      	neglt	r1, r1
 800cdb2:	f803 2b02 	strb.w	r2, [r3], #2
 800cdb6:	bfb4      	ite	lt
 800cdb8:	222d      	movlt	r2, #45	; 0x2d
 800cdba:	222b      	movge	r2, #43	; 0x2b
 800cdbc:	2909      	cmp	r1, #9
 800cdbe:	7042      	strb	r2, [r0, #1]
 800cdc0:	dd2a      	ble.n	800ce18 <__exponent+0x70>
 800cdc2:	f10d 0407 	add.w	r4, sp, #7
 800cdc6:	46a4      	mov	ip, r4
 800cdc8:	270a      	movs	r7, #10
 800cdca:	46a6      	mov	lr, r4
 800cdcc:	460a      	mov	r2, r1
 800cdce:	fb91 f6f7 	sdiv	r6, r1, r7
 800cdd2:	fb07 1516 	mls	r5, r7, r6, r1
 800cdd6:	3530      	adds	r5, #48	; 0x30
 800cdd8:	2a63      	cmp	r2, #99	; 0x63
 800cdda:	f104 34ff 	add.w	r4, r4, #4294967295
 800cdde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cde2:	4631      	mov	r1, r6
 800cde4:	dcf1      	bgt.n	800cdca <__exponent+0x22>
 800cde6:	3130      	adds	r1, #48	; 0x30
 800cde8:	f1ae 0502 	sub.w	r5, lr, #2
 800cdec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cdf0:	1c44      	adds	r4, r0, #1
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	4561      	cmp	r1, ip
 800cdf6:	d30a      	bcc.n	800ce0e <__exponent+0x66>
 800cdf8:	f10d 0209 	add.w	r2, sp, #9
 800cdfc:	eba2 020e 	sub.w	r2, r2, lr
 800ce00:	4565      	cmp	r5, ip
 800ce02:	bf88      	it	hi
 800ce04:	2200      	movhi	r2, #0
 800ce06:	4413      	add	r3, r2
 800ce08:	1a18      	subs	r0, r3, r0
 800ce0a:	b003      	add	sp, #12
 800ce0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce12:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ce16:	e7ed      	b.n	800cdf4 <__exponent+0x4c>
 800ce18:	2330      	movs	r3, #48	; 0x30
 800ce1a:	3130      	adds	r1, #48	; 0x30
 800ce1c:	7083      	strb	r3, [r0, #2]
 800ce1e:	70c1      	strb	r1, [r0, #3]
 800ce20:	1d03      	adds	r3, r0, #4
 800ce22:	e7f1      	b.n	800ce08 <__exponent+0x60>

0800ce24 <_printf_float>:
 800ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	ed2d 8b02 	vpush	{d8}
 800ce2c:	b08d      	sub	sp, #52	; 0x34
 800ce2e:	460c      	mov	r4, r1
 800ce30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce34:	4616      	mov	r6, r2
 800ce36:	461f      	mov	r7, r3
 800ce38:	4605      	mov	r5, r0
 800ce3a:	f003 f82f 	bl	800fe9c <_localeconv_r>
 800ce3e:	f8d0 a000 	ldr.w	sl, [r0]
 800ce42:	4650      	mov	r0, sl
 800ce44:	f7f3 f9c4 	bl	80001d0 <strlen>
 800ce48:	2300      	movs	r3, #0
 800ce4a:	930a      	str	r3, [sp, #40]	; 0x28
 800ce4c:	6823      	ldr	r3, [r4, #0]
 800ce4e:	9305      	str	r3, [sp, #20]
 800ce50:	f8d8 3000 	ldr.w	r3, [r8]
 800ce54:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ce58:	3307      	adds	r3, #7
 800ce5a:	f023 0307 	bic.w	r3, r3, #7
 800ce5e:	f103 0208 	add.w	r2, r3, #8
 800ce62:	f8c8 2000 	str.w	r2, [r8]
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ce6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ce72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce76:	9307      	str	r3, [sp, #28]
 800ce78:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce7c:	ee08 0a10 	vmov	s16, r0
 800ce80:	4b9f      	ldr	r3, [pc, #636]	; (800d100 <_printf_float+0x2dc>)
 800ce82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce86:	f04f 32ff 	mov.w	r2, #4294967295
 800ce8a:	f7f3 fe4f 	bl	8000b2c <__aeabi_dcmpun>
 800ce8e:	bb88      	cbnz	r0, 800cef4 <_printf_float+0xd0>
 800ce90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce94:	4b9a      	ldr	r3, [pc, #616]	; (800d100 <_printf_float+0x2dc>)
 800ce96:	f04f 32ff 	mov.w	r2, #4294967295
 800ce9a:	f7f3 fe29 	bl	8000af0 <__aeabi_dcmple>
 800ce9e:	bb48      	cbnz	r0, 800cef4 <_printf_float+0xd0>
 800cea0:	2200      	movs	r2, #0
 800cea2:	2300      	movs	r3, #0
 800cea4:	4640      	mov	r0, r8
 800cea6:	4649      	mov	r1, r9
 800cea8:	f7f3 fe18 	bl	8000adc <__aeabi_dcmplt>
 800ceac:	b110      	cbz	r0, 800ceb4 <_printf_float+0x90>
 800ceae:	232d      	movs	r3, #45	; 0x2d
 800ceb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ceb4:	4b93      	ldr	r3, [pc, #588]	; (800d104 <_printf_float+0x2e0>)
 800ceb6:	4894      	ldr	r0, [pc, #592]	; (800d108 <_printf_float+0x2e4>)
 800ceb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cebc:	bf94      	ite	ls
 800cebe:	4698      	movls	r8, r3
 800cec0:	4680      	movhi	r8, r0
 800cec2:	2303      	movs	r3, #3
 800cec4:	6123      	str	r3, [r4, #16]
 800cec6:	9b05      	ldr	r3, [sp, #20]
 800cec8:	f023 0204 	bic.w	r2, r3, #4
 800cecc:	6022      	str	r2, [r4, #0]
 800cece:	f04f 0900 	mov.w	r9, #0
 800ced2:	9700      	str	r7, [sp, #0]
 800ced4:	4633      	mov	r3, r6
 800ced6:	aa0b      	add	r2, sp, #44	; 0x2c
 800ced8:	4621      	mov	r1, r4
 800ceda:	4628      	mov	r0, r5
 800cedc:	f000 f9d8 	bl	800d290 <_printf_common>
 800cee0:	3001      	adds	r0, #1
 800cee2:	f040 8090 	bne.w	800d006 <_printf_float+0x1e2>
 800cee6:	f04f 30ff 	mov.w	r0, #4294967295
 800ceea:	b00d      	add	sp, #52	; 0x34
 800ceec:	ecbd 8b02 	vpop	{d8}
 800cef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef4:	4642      	mov	r2, r8
 800cef6:	464b      	mov	r3, r9
 800cef8:	4640      	mov	r0, r8
 800cefa:	4649      	mov	r1, r9
 800cefc:	f7f3 fe16 	bl	8000b2c <__aeabi_dcmpun>
 800cf00:	b140      	cbz	r0, 800cf14 <_printf_float+0xf0>
 800cf02:	464b      	mov	r3, r9
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bfbc      	itt	lt
 800cf08:	232d      	movlt	r3, #45	; 0x2d
 800cf0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cf0e:	487f      	ldr	r0, [pc, #508]	; (800d10c <_printf_float+0x2e8>)
 800cf10:	4b7f      	ldr	r3, [pc, #508]	; (800d110 <_printf_float+0x2ec>)
 800cf12:	e7d1      	b.n	800ceb8 <_printf_float+0x94>
 800cf14:	6863      	ldr	r3, [r4, #4]
 800cf16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cf1a:	9206      	str	r2, [sp, #24]
 800cf1c:	1c5a      	adds	r2, r3, #1
 800cf1e:	d13f      	bne.n	800cfa0 <_printf_float+0x17c>
 800cf20:	2306      	movs	r3, #6
 800cf22:	6063      	str	r3, [r4, #4]
 800cf24:	9b05      	ldr	r3, [sp, #20]
 800cf26:	6861      	ldr	r1, [r4, #4]
 800cf28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	9303      	str	r3, [sp, #12]
 800cf30:	ab0a      	add	r3, sp, #40	; 0x28
 800cf32:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cf36:	ab09      	add	r3, sp, #36	; 0x24
 800cf38:	ec49 8b10 	vmov	d0, r8, r9
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	6022      	str	r2, [r4, #0]
 800cf40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf44:	4628      	mov	r0, r5
 800cf46:	f7ff fecd 	bl	800cce4 <__cvt>
 800cf4a:	9b06      	ldr	r3, [sp, #24]
 800cf4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf4e:	2b47      	cmp	r3, #71	; 0x47
 800cf50:	4680      	mov	r8, r0
 800cf52:	d108      	bne.n	800cf66 <_printf_float+0x142>
 800cf54:	1cc8      	adds	r0, r1, #3
 800cf56:	db02      	blt.n	800cf5e <_printf_float+0x13a>
 800cf58:	6863      	ldr	r3, [r4, #4]
 800cf5a:	4299      	cmp	r1, r3
 800cf5c:	dd41      	ble.n	800cfe2 <_printf_float+0x1be>
 800cf5e:	f1ab 0b02 	sub.w	fp, fp, #2
 800cf62:	fa5f fb8b 	uxtb.w	fp, fp
 800cf66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf6a:	d820      	bhi.n	800cfae <_printf_float+0x18a>
 800cf6c:	3901      	subs	r1, #1
 800cf6e:	465a      	mov	r2, fp
 800cf70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf74:	9109      	str	r1, [sp, #36]	; 0x24
 800cf76:	f7ff ff17 	bl	800cda8 <__exponent>
 800cf7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf7c:	1813      	adds	r3, r2, r0
 800cf7e:	2a01      	cmp	r2, #1
 800cf80:	4681      	mov	r9, r0
 800cf82:	6123      	str	r3, [r4, #16]
 800cf84:	dc02      	bgt.n	800cf8c <_printf_float+0x168>
 800cf86:	6822      	ldr	r2, [r4, #0]
 800cf88:	07d2      	lsls	r2, r2, #31
 800cf8a:	d501      	bpl.n	800cf90 <_printf_float+0x16c>
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	6123      	str	r3, [r4, #16]
 800cf90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d09c      	beq.n	800ced2 <_printf_float+0xae>
 800cf98:	232d      	movs	r3, #45	; 0x2d
 800cf9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf9e:	e798      	b.n	800ced2 <_printf_float+0xae>
 800cfa0:	9a06      	ldr	r2, [sp, #24]
 800cfa2:	2a47      	cmp	r2, #71	; 0x47
 800cfa4:	d1be      	bne.n	800cf24 <_printf_float+0x100>
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1bc      	bne.n	800cf24 <_printf_float+0x100>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e7b9      	b.n	800cf22 <_printf_float+0xfe>
 800cfae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cfb2:	d118      	bne.n	800cfe6 <_printf_float+0x1c2>
 800cfb4:	2900      	cmp	r1, #0
 800cfb6:	6863      	ldr	r3, [r4, #4]
 800cfb8:	dd0b      	ble.n	800cfd2 <_printf_float+0x1ae>
 800cfba:	6121      	str	r1, [r4, #16]
 800cfbc:	b913      	cbnz	r3, 800cfc4 <_printf_float+0x1a0>
 800cfbe:	6822      	ldr	r2, [r4, #0]
 800cfc0:	07d0      	lsls	r0, r2, #31
 800cfc2:	d502      	bpl.n	800cfca <_printf_float+0x1a6>
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	440b      	add	r3, r1
 800cfc8:	6123      	str	r3, [r4, #16]
 800cfca:	65a1      	str	r1, [r4, #88]	; 0x58
 800cfcc:	f04f 0900 	mov.w	r9, #0
 800cfd0:	e7de      	b.n	800cf90 <_printf_float+0x16c>
 800cfd2:	b913      	cbnz	r3, 800cfda <_printf_float+0x1b6>
 800cfd4:	6822      	ldr	r2, [r4, #0]
 800cfd6:	07d2      	lsls	r2, r2, #31
 800cfd8:	d501      	bpl.n	800cfde <_printf_float+0x1ba>
 800cfda:	3302      	adds	r3, #2
 800cfdc:	e7f4      	b.n	800cfc8 <_printf_float+0x1a4>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e7f2      	b.n	800cfc8 <_printf_float+0x1a4>
 800cfe2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfe8:	4299      	cmp	r1, r3
 800cfea:	db05      	blt.n	800cff8 <_printf_float+0x1d4>
 800cfec:	6823      	ldr	r3, [r4, #0]
 800cfee:	6121      	str	r1, [r4, #16]
 800cff0:	07d8      	lsls	r0, r3, #31
 800cff2:	d5ea      	bpl.n	800cfca <_printf_float+0x1a6>
 800cff4:	1c4b      	adds	r3, r1, #1
 800cff6:	e7e7      	b.n	800cfc8 <_printf_float+0x1a4>
 800cff8:	2900      	cmp	r1, #0
 800cffa:	bfd4      	ite	le
 800cffc:	f1c1 0202 	rsble	r2, r1, #2
 800d000:	2201      	movgt	r2, #1
 800d002:	4413      	add	r3, r2
 800d004:	e7e0      	b.n	800cfc8 <_printf_float+0x1a4>
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	055a      	lsls	r2, r3, #21
 800d00a:	d407      	bmi.n	800d01c <_printf_float+0x1f8>
 800d00c:	6923      	ldr	r3, [r4, #16]
 800d00e:	4642      	mov	r2, r8
 800d010:	4631      	mov	r1, r6
 800d012:	4628      	mov	r0, r5
 800d014:	47b8      	blx	r7
 800d016:	3001      	adds	r0, #1
 800d018:	d12c      	bne.n	800d074 <_printf_float+0x250>
 800d01a:	e764      	b.n	800cee6 <_printf_float+0xc2>
 800d01c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d020:	f240 80e0 	bls.w	800d1e4 <_printf_float+0x3c0>
 800d024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d028:	2200      	movs	r2, #0
 800d02a:	2300      	movs	r3, #0
 800d02c:	f7f3 fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d030:	2800      	cmp	r0, #0
 800d032:	d034      	beq.n	800d09e <_printf_float+0x27a>
 800d034:	4a37      	ldr	r2, [pc, #220]	; (800d114 <_printf_float+0x2f0>)
 800d036:	2301      	movs	r3, #1
 800d038:	4631      	mov	r1, r6
 800d03a:	4628      	mov	r0, r5
 800d03c:	47b8      	blx	r7
 800d03e:	3001      	adds	r0, #1
 800d040:	f43f af51 	beq.w	800cee6 <_printf_float+0xc2>
 800d044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d048:	429a      	cmp	r2, r3
 800d04a:	db02      	blt.n	800d052 <_printf_float+0x22e>
 800d04c:	6823      	ldr	r3, [r4, #0]
 800d04e:	07d8      	lsls	r0, r3, #31
 800d050:	d510      	bpl.n	800d074 <_printf_float+0x250>
 800d052:	ee18 3a10 	vmov	r3, s16
 800d056:	4652      	mov	r2, sl
 800d058:	4631      	mov	r1, r6
 800d05a:	4628      	mov	r0, r5
 800d05c:	47b8      	blx	r7
 800d05e:	3001      	adds	r0, #1
 800d060:	f43f af41 	beq.w	800cee6 <_printf_float+0xc2>
 800d064:	f04f 0800 	mov.w	r8, #0
 800d068:	f104 091a 	add.w	r9, r4, #26
 800d06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d06e:	3b01      	subs	r3, #1
 800d070:	4543      	cmp	r3, r8
 800d072:	dc09      	bgt.n	800d088 <_printf_float+0x264>
 800d074:	6823      	ldr	r3, [r4, #0]
 800d076:	079b      	lsls	r3, r3, #30
 800d078:	f100 8105 	bmi.w	800d286 <_printf_float+0x462>
 800d07c:	68e0      	ldr	r0, [r4, #12]
 800d07e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d080:	4298      	cmp	r0, r3
 800d082:	bfb8      	it	lt
 800d084:	4618      	movlt	r0, r3
 800d086:	e730      	b.n	800ceea <_printf_float+0xc6>
 800d088:	2301      	movs	r3, #1
 800d08a:	464a      	mov	r2, r9
 800d08c:	4631      	mov	r1, r6
 800d08e:	4628      	mov	r0, r5
 800d090:	47b8      	blx	r7
 800d092:	3001      	adds	r0, #1
 800d094:	f43f af27 	beq.w	800cee6 <_printf_float+0xc2>
 800d098:	f108 0801 	add.w	r8, r8, #1
 800d09c:	e7e6      	b.n	800d06c <_printf_float+0x248>
 800d09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	dc39      	bgt.n	800d118 <_printf_float+0x2f4>
 800d0a4:	4a1b      	ldr	r2, [pc, #108]	; (800d114 <_printf_float+0x2f0>)
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	4631      	mov	r1, r6
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	47b8      	blx	r7
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	f43f af19 	beq.w	800cee6 <_printf_float+0xc2>
 800d0b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	d102      	bne.n	800d0c2 <_printf_float+0x29e>
 800d0bc:	6823      	ldr	r3, [r4, #0]
 800d0be:	07d9      	lsls	r1, r3, #31
 800d0c0:	d5d8      	bpl.n	800d074 <_printf_float+0x250>
 800d0c2:	ee18 3a10 	vmov	r3, s16
 800d0c6:	4652      	mov	r2, sl
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	47b8      	blx	r7
 800d0ce:	3001      	adds	r0, #1
 800d0d0:	f43f af09 	beq.w	800cee6 <_printf_float+0xc2>
 800d0d4:	f04f 0900 	mov.w	r9, #0
 800d0d8:	f104 0a1a 	add.w	sl, r4, #26
 800d0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0de:	425b      	negs	r3, r3
 800d0e0:	454b      	cmp	r3, r9
 800d0e2:	dc01      	bgt.n	800d0e8 <_printf_float+0x2c4>
 800d0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0e6:	e792      	b.n	800d00e <_printf_float+0x1ea>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	4652      	mov	r2, sl
 800d0ec:	4631      	mov	r1, r6
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	47b8      	blx	r7
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	f43f aef7 	beq.w	800cee6 <_printf_float+0xc2>
 800d0f8:	f109 0901 	add.w	r9, r9, #1
 800d0fc:	e7ee      	b.n	800d0dc <_printf_float+0x2b8>
 800d0fe:	bf00      	nop
 800d100:	7fefffff 	.word	0x7fefffff
 800d104:	08012a54 	.word	0x08012a54
 800d108:	08012a58 	.word	0x08012a58
 800d10c:	08012a60 	.word	0x08012a60
 800d110:	08012a5c 	.word	0x08012a5c
 800d114:	08012a64 	.word	0x08012a64
 800d118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d11a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d11c:	429a      	cmp	r2, r3
 800d11e:	bfa8      	it	ge
 800d120:	461a      	movge	r2, r3
 800d122:	2a00      	cmp	r2, #0
 800d124:	4691      	mov	r9, r2
 800d126:	dc37      	bgt.n	800d198 <_printf_float+0x374>
 800d128:	f04f 0b00 	mov.w	fp, #0
 800d12c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d130:	f104 021a 	add.w	r2, r4, #26
 800d134:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d136:	9305      	str	r3, [sp, #20]
 800d138:	eba3 0309 	sub.w	r3, r3, r9
 800d13c:	455b      	cmp	r3, fp
 800d13e:	dc33      	bgt.n	800d1a8 <_printf_float+0x384>
 800d140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d144:	429a      	cmp	r2, r3
 800d146:	db3b      	blt.n	800d1c0 <_printf_float+0x39c>
 800d148:	6823      	ldr	r3, [r4, #0]
 800d14a:	07da      	lsls	r2, r3, #31
 800d14c:	d438      	bmi.n	800d1c0 <_printf_float+0x39c>
 800d14e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d150:	9b05      	ldr	r3, [sp, #20]
 800d152:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	eba2 0901 	sub.w	r9, r2, r1
 800d15a:	4599      	cmp	r9, r3
 800d15c:	bfa8      	it	ge
 800d15e:	4699      	movge	r9, r3
 800d160:	f1b9 0f00 	cmp.w	r9, #0
 800d164:	dc35      	bgt.n	800d1d2 <_printf_float+0x3ae>
 800d166:	f04f 0800 	mov.w	r8, #0
 800d16a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d16e:	f104 0a1a 	add.w	sl, r4, #26
 800d172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d176:	1a9b      	subs	r3, r3, r2
 800d178:	eba3 0309 	sub.w	r3, r3, r9
 800d17c:	4543      	cmp	r3, r8
 800d17e:	f77f af79 	ble.w	800d074 <_printf_float+0x250>
 800d182:	2301      	movs	r3, #1
 800d184:	4652      	mov	r2, sl
 800d186:	4631      	mov	r1, r6
 800d188:	4628      	mov	r0, r5
 800d18a:	47b8      	blx	r7
 800d18c:	3001      	adds	r0, #1
 800d18e:	f43f aeaa 	beq.w	800cee6 <_printf_float+0xc2>
 800d192:	f108 0801 	add.w	r8, r8, #1
 800d196:	e7ec      	b.n	800d172 <_printf_float+0x34e>
 800d198:	4613      	mov	r3, r2
 800d19a:	4631      	mov	r1, r6
 800d19c:	4642      	mov	r2, r8
 800d19e:	4628      	mov	r0, r5
 800d1a0:	47b8      	blx	r7
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	d1c0      	bne.n	800d128 <_printf_float+0x304>
 800d1a6:	e69e      	b.n	800cee6 <_printf_float+0xc2>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	4631      	mov	r1, r6
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	9205      	str	r2, [sp, #20]
 800d1b0:	47b8      	blx	r7
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	f43f ae97 	beq.w	800cee6 <_printf_float+0xc2>
 800d1b8:	9a05      	ldr	r2, [sp, #20]
 800d1ba:	f10b 0b01 	add.w	fp, fp, #1
 800d1be:	e7b9      	b.n	800d134 <_printf_float+0x310>
 800d1c0:	ee18 3a10 	vmov	r3, s16
 800d1c4:	4652      	mov	r2, sl
 800d1c6:	4631      	mov	r1, r6
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	47b8      	blx	r7
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	d1be      	bne.n	800d14e <_printf_float+0x32a>
 800d1d0:	e689      	b.n	800cee6 <_printf_float+0xc2>
 800d1d2:	9a05      	ldr	r2, [sp, #20]
 800d1d4:	464b      	mov	r3, r9
 800d1d6:	4442      	add	r2, r8
 800d1d8:	4631      	mov	r1, r6
 800d1da:	4628      	mov	r0, r5
 800d1dc:	47b8      	blx	r7
 800d1de:	3001      	adds	r0, #1
 800d1e0:	d1c1      	bne.n	800d166 <_printf_float+0x342>
 800d1e2:	e680      	b.n	800cee6 <_printf_float+0xc2>
 800d1e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1e6:	2a01      	cmp	r2, #1
 800d1e8:	dc01      	bgt.n	800d1ee <_printf_float+0x3ca>
 800d1ea:	07db      	lsls	r3, r3, #31
 800d1ec:	d538      	bpl.n	800d260 <_printf_float+0x43c>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	4642      	mov	r2, r8
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	47b8      	blx	r7
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	f43f ae74 	beq.w	800cee6 <_printf_float+0xc2>
 800d1fe:	ee18 3a10 	vmov	r3, s16
 800d202:	4652      	mov	r2, sl
 800d204:	4631      	mov	r1, r6
 800d206:	4628      	mov	r0, r5
 800d208:	47b8      	blx	r7
 800d20a:	3001      	adds	r0, #1
 800d20c:	f43f ae6b 	beq.w	800cee6 <_printf_float+0xc2>
 800d210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d214:	2200      	movs	r2, #0
 800d216:	2300      	movs	r3, #0
 800d218:	f7f3 fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 800d21c:	b9d8      	cbnz	r0, 800d256 <_printf_float+0x432>
 800d21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d220:	f108 0201 	add.w	r2, r8, #1
 800d224:	3b01      	subs	r3, #1
 800d226:	4631      	mov	r1, r6
 800d228:	4628      	mov	r0, r5
 800d22a:	47b8      	blx	r7
 800d22c:	3001      	adds	r0, #1
 800d22e:	d10e      	bne.n	800d24e <_printf_float+0x42a>
 800d230:	e659      	b.n	800cee6 <_printf_float+0xc2>
 800d232:	2301      	movs	r3, #1
 800d234:	4652      	mov	r2, sl
 800d236:	4631      	mov	r1, r6
 800d238:	4628      	mov	r0, r5
 800d23a:	47b8      	blx	r7
 800d23c:	3001      	adds	r0, #1
 800d23e:	f43f ae52 	beq.w	800cee6 <_printf_float+0xc2>
 800d242:	f108 0801 	add.w	r8, r8, #1
 800d246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d248:	3b01      	subs	r3, #1
 800d24a:	4543      	cmp	r3, r8
 800d24c:	dcf1      	bgt.n	800d232 <_printf_float+0x40e>
 800d24e:	464b      	mov	r3, r9
 800d250:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d254:	e6dc      	b.n	800d010 <_printf_float+0x1ec>
 800d256:	f04f 0800 	mov.w	r8, #0
 800d25a:	f104 0a1a 	add.w	sl, r4, #26
 800d25e:	e7f2      	b.n	800d246 <_printf_float+0x422>
 800d260:	2301      	movs	r3, #1
 800d262:	4642      	mov	r2, r8
 800d264:	e7df      	b.n	800d226 <_printf_float+0x402>
 800d266:	2301      	movs	r3, #1
 800d268:	464a      	mov	r2, r9
 800d26a:	4631      	mov	r1, r6
 800d26c:	4628      	mov	r0, r5
 800d26e:	47b8      	blx	r7
 800d270:	3001      	adds	r0, #1
 800d272:	f43f ae38 	beq.w	800cee6 <_printf_float+0xc2>
 800d276:	f108 0801 	add.w	r8, r8, #1
 800d27a:	68e3      	ldr	r3, [r4, #12]
 800d27c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d27e:	1a5b      	subs	r3, r3, r1
 800d280:	4543      	cmp	r3, r8
 800d282:	dcf0      	bgt.n	800d266 <_printf_float+0x442>
 800d284:	e6fa      	b.n	800d07c <_printf_float+0x258>
 800d286:	f04f 0800 	mov.w	r8, #0
 800d28a:	f104 0919 	add.w	r9, r4, #25
 800d28e:	e7f4      	b.n	800d27a <_printf_float+0x456>

0800d290 <_printf_common>:
 800d290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d294:	4616      	mov	r6, r2
 800d296:	4699      	mov	r9, r3
 800d298:	688a      	ldr	r2, [r1, #8]
 800d29a:	690b      	ldr	r3, [r1, #16]
 800d29c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	bfb8      	it	lt
 800d2a4:	4613      	movlt	r3, r2
 800d2a6:	6033      	str	r3, [r6, #0]
 800d2a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2ac:	4607      	mov	r7, r0
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	b10a      	cbz	r2, 800d2b6 <_printf_common+0x26>
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	6033      	str	r3, [r6, #0]
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	0699      	lsls	r1, r3, #26
 800d2ba:	bf42      	ittt	mi
 800d2bc:	6833      	ldrmi	r3, [r6, #0]
 800d2be:	3302      	addmi	r3, #2
 800d2c0:	6033      	strmi	r3, [r6, #0]
 800d2c2:	6825      	ldr	r5, [r4, #0]
 800d2c4:	f015 0506 	ands.w	r5, r5, #6
 800d2c8:	d106      	bne.n	800d2d8 <_printf_common+0x48>
 800d2ca:	f104 0a19 	add.w	sl, r4, #25
 800d2ce:	68e3      	ldr	r3, [r4, #12]
 800d2d0:	6832      	ldr	r2, [r6, #0]
 800d2d2:	1a9b      	subs	r3, r3, r2
 800d2d4:	42ab      	cmp	r3, r5
 800d2d6:	dc26      	bgt.n	800d326 <_printf_common+0x96>
 800d2d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2dc:	1e13      	subs	r3, r2, #0
 800d2de:	6822      	ldr	r2, [r4, #0]
 800d2e0:	bf18      	it	ne
 800d2e2:	2301      	movne	r3, #1
 800d2e4:	0692      	lsls	r2, r2, #26
 800d2e6:	d42b      	bmi.n	800d340 <_printf_common+0xb0>
 800d2e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2ec:	4649      	mov	r1, r9
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	47c0      	blx	r8
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	d01e      	beq.n	800d334 <_printf_common+0xa4>
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	68e5      	ldr	r5, [r4, #12]
 800d2fa:	6832      	ldr	r2, [r6, #0]
 800d2fc:	f003 0306 	and.w	r3, r3, #6
 800d300:	2b04      	cmp	r3, #4
 800d302:	bf08      	it	eq
 800d304:	1aad      	subeq	r5, r5, r2
 800d306:	68a3      	ldr	r3, [r4, #8]
 800d308:	6922      	ldr	r2, [r4, #16]
 800d30a:	bf0c      	ite	eq
 800d30c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d310:	2500      	movne	r5, #0
 800d312:	4293      	cmp	r3, r2
 800d314:	bfc4      	itt	gt
 800d316:	1a9b      	subgt	r3, r3, r2
 800d318:	18ed      	addgt	r5, r5, r3
 800d31a:	2600      	movs	r6, #0
 800d31c:	341a      	adds	r4, #26
 800d31e:	42b5      	cmp	r5, r6
 800d320:	d11a      	bne.n	800d358 <_printf_common+0xc8>
 800d322:	2000      	movs	r0, #0
 800d324:	e008      	b.n	800d338 <_printf_common+0xa8>
 800d326:	2301      	movs	r3, #1
 800d328:	4652      	mov	r2, sl
 800d32a:	4649      	mov	r1, r9
 800d32c:	4638      	mov	r0, r7
 800d32e:	47c0      	blx	r8
 800d330:	3001      	adds	r0, #1
 800d332:	d103      	bne.n	800d33c <_printf_common+0xac>
 800d334:	f04f 30ff 	mov.w	r0, #4294967295
 800d338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d33c:	3501      	adds	r5, #1
 800d33e:	e7c6      	b.n	800d2ce <_printf_common+0x3e>
 800d340:	18e1      	adds	r1, r4, r3
 800d342:	1c5a      	adds	r2, r3, #1
 800d344:	2030      	movs	r0, #48	; 0x30
 800d346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d34a:	4422      	add	r2, r4
 800d34c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d354:	3302      	adds	r3, #2
 800d356:	e7c7      	b.n	800d2e8 <_printf_common+0x58>
 800d358:	2301      	movs	r3, #1
 800d35a:	4622      	mov	r2, r4
 800d35c:	4649      	mov	r1, r9
 800d35e:	4638      	mov	r0, r7
 800d360:	47c0      	blx	r8
 800d362:	3001      	adds	r0, #1
 800d364:	d0e6      	beq.n	800d334 <_printf_common+0xa4>
 800d366:	3601      	adds	r6, #1
 800d368:	e7d9      	b.n	800d31e <_printf_common+0x8e>
	...

0800d36c <_printf_i>:
 800d36c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d370:	460c      	mov	r4, r1
 800d372:	4691      	mov	r9, r2
 800d374:	7e27      	ldrb	r7, [r4, #24]
 800d376:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d378:	2f78      	cmp	r7, #120	; 0x78
 800d37a:	4680      	mov	r8, r0
 800d37c:	469a      	mov	sl, r3
 800d37e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d382:	d807      	bhi.n	800d394 <_printf_i+0x28>
 800d384:	2f62      	cmp	r7, #98	; 0x62
 800d386:	d80a      	bhi.n	800d39e <_printf_i+0x32>
 800d388:	2f00      	cmp	r7, #0
 800d38a:	f000 80d8 	beq.w	800d53e <_printf_i+0x1d2>
 800d38e:	2f58      	cmp	r7, #88	; 0x58
 800d390:	f000 80a3 	beq.w	800d4da <_printf_i+0x16e>
 800d394:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d39c:	e03a      	b.n	800d414 <_printf_i+0xa8>
 800d39e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3a2:	2b15      	cmp	r3, #21
 800d3a4:	d8f6      	bhi.n	800d394 <_printf_i+0x28>
 800d3a6:	a001      	add	r0, pc, #4	; (adr r0, 800d3ac <_printf_i+0x40>)
 800d3a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d3ac:	0800d405 	.word	0x0800d405
 800d3b0:	0800d419 	.word	0x0800d419
 800d3b4:	0800d395 	.word	0x0800d395
 800d3b8:	0800d395 	.word	0x0800d395
 800d3bc:	0800d395 	.word	0x0800d395
 800d3c0:	0800d395 	.word	0x0800d395
 800d3c4:	0800d419 	.word	0x0800d419
 800d3c8:	0800d395 	.word	0x0800d395
 800d3cc:	0800d395 	.word	0x0800d395
 800d3d0:	0800d395 	.word	0x0800d395
 800d3d4:	0800d395 	.word	0x0800d395
 800d3d8:	0800d525 	.word	0x0800d525
 800d3dc:	0800d449 	.word	0x0800d449
 800d3e0:	0800d507 	.word	0x0800d507
 800d3e4:	0800d395 	.word	0x0800d395
 800d3e8:	0800d395 	.word	0x0800d395
 800d3ec:	0800d547 	.word	0x0800d547
 800d3f0:	0800d395 	.word	0x0800d395
 800d3f4:	0800d449 	.word	0x0800d449
 800d3f8:	0800d395 	.word	0x0800d395
 800d3fc:	0800d395 	.word	0x0800d395
 800d400:	0800d50f 	.word	0x0800d50f
 800d404:	680b      	ldr	r3, [r1, #0]
 800d406:	1d1a      	adds	r2, r3, #4
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	600a      	str	r2, [r1, #0]
 800d40c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d414:	2301      	movs	r3, #1
 800d416:	e0a3      	b.n	800d560 <_printf_i+0x1f4>
 800d418:	6825      	ldr	r5, [r4, #0]
 800d41a:	6808      	ldr	r0, [r1, #0]
 800d41c:	062e      	lsls	r6, r5, #24
 800d41e:	f100 0304 	add.w	r3, r0, #4
 800d422:	d50a      	bpl.n	800d43a <_printf_i+0xce>
 800d424:	6805      	ldr	r5, [r0, #0]
 800d426:	600b      	str	r3, [r1, #0]
 800d428:	2d00      	cmp	r5, #0
 800d42a:	da03      	bge.n	800d434 <_printf_i+0xc8>
 800d42c:	232d      	movs	r3, #45	; 0x2d
 800d42e:	426d      	negs	r5, r5
 800d430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d434:	485e      	ldr	r0, [pc, #376]	; (800d5b0 <_printf_i+0x244>)
 800d436:	230a      	movs	r3, #10
 800d438:	e019      	b.n	800d46e <_printf_i+0x102>
 800d43a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d43e:	6805      	ldr	r5, [r0, #0]
 800d440:	600b      	str	r3, [r1, #0]
 800d442:	bf18      	it	ne
 800d444:	b22d      	sxthne	r5, r5
 800d446:	e7ef      	b.n	800d428 <_printf_i+0xbc>
 800d448:	680b      	ldr	r3, [r1, #0]
 800d44a:	6825      	ldr	r5, [r4, #0]
 800d44c:	1d18      	adds	r0, r3, #4
 800d44e:	6008      	str	r0, [r1, #0]
 800d450:	0628      	lsls	r0, r5, #24
 800d452:	d501      	bpl.n	800d458 <_printf_i+0xec>
 800d454:	681d      	ldr	r5, [r3, #0]
 800d456:	e002      	b.n	800d45e <_printf_i+0xf2>
 800d458:	0669      	lsls	r1, r5, #25
 800d45a:	d5fb      	bpl.n	800d454 <_printf_i+0xe8>
 800d45c:	881d      	ldrh	r5, [r3, #0]
 800d45e:	4854      	ldr	r0, [pc, #336]	; (800d5b0 <_printf_i+0x244>)
 800d460:	2f6f      	cmp	r7, #111	; 0x6f
 800d462:	bf0c      	ite	eq
 800d464:	2308      	moveq	r3, #8
 800d466:	230a      	movne	r3, #10
 800d468:	2100      	movs	r1, #0
 800d46a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d46e:	6866      	ldr	r6, [r4, #4]
 800d470:	60a6      	str	r6, [r4, #8]
 800d472:	2e00      	cmp	r6, #0
 800d474:	bfa2      	ittt	ge
 800d476:	6821      	ldrge	r1, [r4, #0]
 800d478:	f021 0104 	bicge.w	r1, r1, #4
 800d47c:	6021      	strge	r1, [r4, #0]
 800d47e:	b90d      	cbnz	r5, 800d484 <_printf_i+0x118>
 800d480:	2e00      	cmp	r6, #0
 800d482:	d04d      	beq.n	800d520 <_printf_i+0x1b4>
 800d484:	4616      	mov	r6, r2
 800d486:	fbb5 f1f3 	udiv	r1, r5, r3
 800d48a:	fb03 5711 	mls	r7, r3, r1, r5
 800d48e:	5dc7      	ldrb	r7, [r0, r7]
 800d490:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d494:	462f      	mov	r7, r5
 800d496:	42bb      	cmp	r3, r7
 800d498:	460d      	mov	r5, r1
 800d49a:	d9f4      	bls.n	800d486 <_printf_i+0x11a>
 800d49c:	2b08      	cmp	r3, #8
 800d49e:	d10b      	bne.n	800d4b8 <_printf_i+0x14c>
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	07df      	lsls	r7, r3, #31
 800d4a4:	d508      	bpl.n	800d4b8 <_printf_i+0x14c>
 800d4a6:	6923      	ldr	r3, [r4, #16]
 800d4a8:	6861      	ldr	r1, [r4, #4]
 800d4aa:	4299      	cmp	r1, r3
 800d4ac:	bfde      	ittt	le
 800d4ae:	2330      	movle	r3, #48	; 0x30
 800d4b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d4b8:	1b92      	subs	r2, r2, r6
 800d4ba:	6122      	str	r2, [r4, #16]
 800d4bc:	f8cd a000 	str.w	sl, [sp]
 800d4c0:	464b      	mov	r3, r9
 800d4c2:	aa03      	add	r2, sp, #12
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	f7ff fee2 	bl	800d290 <_printf_common>
 800d4cc:	3001      	adds	r0, #1
 800d4ce:	d14c      	bne.n	800d56a <_printf_i+0x1fe>
 800d4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d4:	b004      	add	sp, #16
 800d4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4da:	4835      	ldr	r0, [pc, #212]	; (800d5b0 <_printf_i+0x244>)
 800d4dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4e0:	6823      	ldr	r3, [r4, #0]
 800d4e2:	680e      	ldr	r6, [r1, #0]
 800d4e4:	061f      	lsls	r7, r3, #24
 800d4e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800d4ea:	600e      	str	r6, [r1, #0]
 800d4ec:	d514      	bpl.n	800d518 <_printf_i+0x1ac>
 800d4ee:	07d9      	lsls	r1, r3, #31
 800d4f0:	bf44      	itt	mi
 800d4f2:	f043 0320 	orrmi.w	r3, r3, #32
 800d4f6:	6023      	strmi	r3, [r4, #0]
 800d4f8:	b91d      	cbnz	r5, 800d502 <_printf_i+0x196>
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	f023 0320 	bic.w	r3, r3, #32
 800d500:	6023      	str	r3, [r4, #0]
 800d502:	2310      	movs	r3, #16
 800d504:	e7b0      	b.n	800d468 <_printf_i+0xfc>
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	f043 0320 	orr.w	r3, r3, #32
 800d50c:	6023      	str	r3, [r4, #0]
 800d50e:	2378      	movs	r3, #120	; 0x78
 800d510:	4828      	ldr	r0, [pc, #160]	; (800d5b4 <_printf_i+0x248>)
 800d512:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d516:	e7e3      	b.n	800d4e0 <_printf_i+0x174>
 800d518:	065e      	lsls	r6, r3, #25
 800d51a:	bf48      	it	mi
 800d51c:	b2ad      	uxthmi	r5, r5
 800d51e:	e7e6      	b.n	800d4ee <_printf_i+0x182>
 800d520:	4616      	mov	r6, r2
 800d522:	e7bb      	b.n	800d49c <_printf_i+0x130>
 800d524:	680b      	ldr	r3, [r1, #0]
 800d526:	6826      	ldr	r6, [r4, #0]
 800d528:	6960      	ldr	r0, [r4, #20]
 800d52a:	1d1d      	adds	r5, r3, #4
 800d52c:	600d      	str	r5, [r1, #0]
 800d52e:	0635      	lsls	r5, r6, #24
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	d501      	bpl.n	800d538 <_printf_i+0x1cc>
 800d534:	6018      	str	r0, [r3, #0]
 800d536:	e002      	b.n	800d53e <_printf_i+0x1d2>
 800d538:	0671      	lsls	r1, r6, #25
 800d53a:	d5fb      	bpl.n	800d534 <_printf_i+0x1c8>
 800d53c:	8018      	strh	r0, [r3, #0]
 800d53e:	2300      	movs	r3, #0
 800d540:	6123      	str	r3, [r4, #16]
 800d542:	4616      	mov	r6, r2
 800d544:	e7ba      	b.n	800d4bc <_printf_i+0x150>
 800d546:	680b      	ldr	r3, [r1, #0]
 800d548:	1d1a      	adds	r2, r3, #4
 800d54a:	600a      	str	r2, [r1, #0]
 800d54c:	681e      	ldr	r6, [r3, #0]
 800d54e:	6862      	ldr	r2, [r4, #4]
 800d550:	2100      	movs	r1, #0
 800d552:	4630      	mov	r0, r6
 800d554:	f7f2 fe44 	bl	80001e0 <memchr>
 800d558:	b108      	cbz	r0, 800d55e <_printf_i+0x1f2>
 800d55a:	1b80      	subs	r0, r0, r6
 800d55c:	6060      	str	r0, [r4, #4]
 800d55e:	6863      	ldr	r3, [r4, #4]
 800d560:	6123      	str	r3, [r4, #16]
 800d562:	2300      	movs	r3, #0
 800d564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d568:	e7a8      	b.n	800d4bc <_printf_i+0x150>
 800d56a:	6923      	ldr	r3, [r4, #16]
 800d56c:	4632      	mov	r2, r6
 800d56e:	4649      	mov	r1, r9
 800d570:	4640      	mov	r0, r8
 800d572:	47d0      	blx	sl
 800d574:	3001      	adds	r0, #1
 800d576:	d0ab      	beq.n	800d4d0 <_printf_i+0x164>
 800d578:	6823      	ldr	r3, [r4, #0]
 800d57a:	079b      	lsls	r3, r3, #30
 800d57c:	d413      	bmi.n	800d5a6 <_printf_i+0x23a>
 800d57e:	68e0      	ldr	r0, [r4, #12]
 800d580:	9b03      	ldr	r3, [sp, #12]
 800d582:	4298      	cmp	r0, r3
 800d584:	bfb8      	it	lt
 800d586:	4618      	movlt	r0, r3
 800d588:	e7a4      	b.n	800d4d4 <_printf_i+0x168>
 800d58a:	2301      	movs	r3, #1
 800d58c:	4632      	mov	r2, r6
 800d58e:	4649      	mov	r1, r9
 800d590:	4640      	mov	r0, r8
 800d592:	47d0      	blx	sl
 800d594:	3001      	adds	r0, #1
 800d596:	d09b      	beq.n	800d4d0 <_printf_i+0x164>
 800d598:	3501      	adds	r5, #1
 800d59a:	68e3      	ldr	r3, [r4, #12]
 800d59c:	9903      	ldr	r1, [sp, #12]
 800d59e:	1a5b      	subs	r3, r3, r1
 800d5a0:	42ab      	cmp	r3, r5
 800d5a2:	dcf2      	bgt.n	800d58a <_printf_i+0x21e>
 800d5a4:	e7eb      	b.n	800d57e <_printf_i+0x212>
 800d5a6:	2500      	movs	r5, #0
 800d5a8:	f104 0619 	add.w	r6, r4, #25
 800d5ac:	e7f5      	b.n	800d59a <_printf_i+0x22e>
 800d5ae:	bf00      	nop
 800d5b0:	08012a66 	.word	0x08012a66
 800d5b4:	08012a77 	.word	0x08012a77

0800d5b8 <_scanf_float>:
 800d5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5bc:	b087      	sub	sp, #28
 800d5be:	4617      	mov	r7, r2
 800d5c0:	9303      	str	r3, [sp, #12]
 800d5c2:	688b      	ldr	r3, [r1, #8]
 800d5c4:	1e5a      	subs	r2, r3, #1
 800d5c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d5ca:	bf83      	ittte	hi
 800d5cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d5d0:	195b      	addhi	r3, r3, r5
 800d5d2:	9302      	strhi	r3, [sp, #8]
 800d5d4:	2300      	movls	r3, #0
 800d5d6:	bf86      	itte	hi
 800d5d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d5dc:	608b      	strhi	r3, [r1, #8]
 800d5de:	9302      	strls	r3, [sp, #8]
 800d5e0:	680b      	ldr	r3, [r1, #0]
 800d5e2:	468b      	mov	fp, r1
 800d5e4:	2500      	movs	r5, #0
 800d5e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d5ea:	f84b 3b1c 	str.w	r3, [fp], #28
 800d5ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d5f2:	4680      	mov	r8, r0
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	465e      	mov	r6, fp
 800d5f8:	46aa      	mov	sl, r5
 800d5fa:	46a9      	mov	r9, r5
 800d5fc:	9501      	str	r5, [sp, #4]
 800d5fe:	68a2      	ldr	r2, [r4, #8]
 800d600:	b152      	cbz	r2, 800d618 <_scanf_float+0x60>
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b4e      	cmp	r3, #78	; 0x4e
 800d608:	d864      	bhi.n	800d6d4 <_scanf_float+0x11c>
 800d60a:	2b40      	cmp	r3, #64	; 0x40
 800d60c:	d83c      	bhi.n	800d688 <_scanf_float+0xd0>
 800d60e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d612:	b2c8      	uxtb	r0, r1
 800d614:	280e      	cmp	r0, #14
 800d616:	d93a      	bls.n	800d68e <_scanf_float+0xd6>
 800d618:	f1b9 0f00 	cmp.w	r9, #0
 800d61c:	d003      	beq.n	800d626 <_scanf_float+0x6e>
 800d61e:	6823      	ldr	r3, [r4, #0]
 800d620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d624:	6023      	str	r3, [r4, #0]
 800d626:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d62a:	f1ba 0f01 	cmp.w	sl, #1
 800d62e:	f200 8113 	bhi.w	800d858 <_scanf_float+0x2a0>
 800d632:	455e      	cmp	r6, fp
 800d634:	f200 8105 	bhi.w	800d842 <_scanf_float+0x28a>
 800d638:	2501      	movs	r5, #1
 800d63a:	4628      	mov	r0, r5
 800d63c:	b007      	add	sp, #28
 800d63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d642:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d646:	2a0d      	cmp	r2, #13
 800d648:	d8e6      	bhi.n	800d618 <_scanf_float+0x60>
 800d64a:	a101      	add	r1, pc, #4	; (adr r1, 800d650 <_scanf_float+0x98>)
 800d64c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d650:	0800d78f 	.word	0x0800d78f
 800d654:	0800d619 	.word	0x0800d619
 800d658:	0800d619 	.word	0x0800d619
 800d65c:	0800d619 	.word	0x0800d619
 800d660:	0800d7ef 	.word	0x0800d7ef
 800d664:	0800d7c7 	.word	0x0800d7c7
 800d668:	0800d619 	.word	0x0800d619
 800d66c:	0800d619 	.word	0x0800d619
 800d670:	0800d79d 	.word	0x0800d79d
 800d674:	0800d619 	.word	0x0800d619
 800d678:	0800d619 	.word	0x0800d619
 800d67c:	0800d619 	.word	0x0800d619
 800d680:	0800d619 	.word	0x0800d619
 800d684:	0800d755 	.word	0x0800d755
 800d688:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d68c:	e7db      	b.n	800d646 <_scanf_float+0x8e>
 800d68e:	290e      	cmp	r1, #14
 800d690:	d8c2      	bhi.n	800d618 <_scanf_float+0x60>
 800d692:	a001      	add	r0, pc, #4	; (adr r0, 800d698 <_scanf_float+0xe0>)
 800d694:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d698:	0800d747 	.word	0x0800d747
 800d69c:	0800d619 	.word	0x0800d619
 800d6a0:	0800d747 	.word	0x0800d747
 800d6a4:	0800d7db 	.word	0x0800d7db
 800d6a8:	0800d619 	.word	0x0800d619
 800d6ac:	0800d6f5 	.word	0x0800d6f5
 800d6b0:	0800d731 	.word	0x0800d731
 800d6b4:	0800d731 	.word	0x0800d731
 800d6b8:	0800d731 	.word	0x0800d731
 800d6bc:	0800d731 	.word	0x0800d731
 800d6c0:	0800d731 	.word	0x0800d731
 800d6c4:	0800d731 	.word	0x0800d731
 800d6c8:	0800d731 	.word	0x0800d731
 800d6cc:	0800d731 	.word	0x0800d731
 800d6d0:	0800d731 	.word	0x0800d731
 800d6d4:	2b6e      	cmp	r3, #110	; 0x6e
 800d6d6:	d809      	bhi.n	800d6ec <_scanf_float+0x134>
 800d6d8:	2b60      	cmp	r3, #96	; 0x60
 800d6da:	d8b2      	bhi.n	800d642 <_scanf_float+0x8a>
 800d6dc:	2b54      	cmp	r3, #84	; 0x54
 800d6de:	d077      	beq.n	800d7d0 <_scanf_float+0x218>
 800d6e0:	2b59      	cmp	r3, #89	; 0x59
 800d6e2:	d199      	bne.n	800d618 <_scanf_float+0x60>
 800d6e4:	2d07      	cmp	r5, #7
 800d6e6:	d197      	bne.n	800d618 <_scanf_float+0x60>
 800d6e8:	2508      	movs	r5, #8
 800d6ea:	e029      	b.n	800d740 <_scanf_float+0x188>
 800d6ec:	2b74      	cmp	r3, #116	; 0x74
 800d6ee:	d06f      	beq.n	800d7d0 <_scanf_float+0x218>
 800d6f0:	2b79      	cmp	r3, #121	; 0x79
 800d6f2:	e7f6      	b.n	800d6e2 <_scanf_float+0x12a>
 800d6f4:	6821      	ldr	r1, [r4, #0]
 800d6f6:	05c8      	lsls	r0, r1, #23
 800d6f8:	d51a      	bpl.n	800d730 <_scanf_float+0x178>
 800d6fa:	9b02      	ldr	r3, [sp, #8]
 800d6fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d700:	6021      	str	r1, [r4, #0]
 800d702:	f109 0901 	add.w	r9, r9, #1
 800d706:	b11b      	cbz	r3, 800d710 <_scanf_float+0x158>
 800d708:	3b01      	subs	r3, #1
 800d70a:	3201      	adds	r2, #1
 800d70c:	9302      	str	r3, [sp, #8]
 800d70e:	60a2      	str	r2, [r4, #8]
 800d710:	68a3      	ldr	r3, [r4, #8]
 800d712:	3b01      	subs	r3, #1
 800d714:	60a3      	str	r3, [r4, #8]
 800d716:	6923      	ldr	r3, [r4, #16]
 800d718:	3301      	adds	r3, #1
 800d71a:	6123      	str	r3, [r4, #16]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	3b01      	subs	r3, #1
 800d720:	2b00      	cmp	r3, #0
 800d722:	607b      	str	r3, [r7, #4]
 800d724:	f340 8084 	ble.w	800d830 <_scanf_float+0x278>
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	3301      	adds	r3, #1
 800d72c:	603b      	str	r3, [r7, #0]
 800d72e:	e766      	b.n	800d5fe <_scanf_float+0x46>
 800d730:	eb1a 0f05 	cmn.w	sl, r5
 800d734:	f47f af70 	bne.w	800d618 <_scanf_float+0x60>
 800d738:	6822      	ldr	r2, [r4, #0]
 800d73a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d73e:	6022      	str	r2, [r4, #0]
 800d740:	f806 3b01 	strb.w	r3, [r6], #1
 800d744:	e7e4      	b.n	800d710 <_scanf_float+0x158>
 800d746:	6822      	ldr	r2, [r4, #0]
 800d748:	0610      	lsls	r0, r2, #24
 800d74a:	f57f af65 	bpl.w	800d618 <_scanf_float+0x60>
 800d74e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d752:	e7f4      	b.n	800d73e <_scanf_float+0x186>
 800d754:	f1ba 0f00 	cmp.w	sl, #0
 800d758:	d10e      	bne.n	800d778 <_scanf_float+0x1c0>
 800d75a:	f1b9 0f00 	cmp.w	r9, #0
 800d75e:	d10e      	bne.n	800d77e <_scanf_float+0x1c6>
 800d760:	6822      	ldr	r2, [r4, #0]
 800d762:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d766:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d76a:	d108      	bne.n	800d77e <_scanf_float+0x1c6>
 800d76c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d770:	6022      	str	r2, [r4, #0]
 800d772:	f04f 0a01 	mov.w	sl, #1
 800d776:	e7e3      	b.n	800d740 <_scanf_float+0x188>
 800d778:	f1ba 0f02 	cmp.w	sl, #2
 800d77c:	d055      	beq.n	800d82a <_scanf_float+0x272>
 800d77e:	2d01      	cmp	r5, #1
 800d780:	d002      	beq.n	800d788 <_scanf_float+0x1d0>
 800d782:	2d04      	cmp	r5, #4
 800d784:	f47f af48 	bne.w	800d618 <_scanf_float+0x60>
 800d788:	3501      	adds	r5, #1
 800d78a:	b2ed      	uxtb	r5, r5
 800d78c:	e7d8      	b.n	800d740 <_scanf_float+0x188>
 800d78e:	f1ba 0f01 	cmp.w	sl, #1
 800d792:	f47f af41 	bne.w	800d618 <_scanf_float+0x60>
 800d796:	f04f 0a02 	mov.w	sl, #2
 800d79a:	e7d1      	b.n	800d740 <_scanf_float+0x188>
 800d79c:	b97d      	cbnz	r5, 800d7be <_scanf_float+0x206>
 800d79e:	f1b9 0f00 	cmp.w	r9, #0
 800d7a2:	f47f af3c 	bne.w	800d61e <_scanf_float+0x66>
 800d7a6:	6822      	ldr	r2, [r4, #0]
 800d7a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d7ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d7b0:	f47f af39 	bne.w	800d626 <_scanf_float+0x6e>
 800d7b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d7b8:	6022      	str	r2, [r4, #0]
 800d7ba:	2501      	movs	r5, #1
 800d7bc:	e7c0      	b.n	800d740 <_scanf_float+0x188>
 800d7be:	2d03      	cmp	r5, #3
 800d7c0:	d0e2      	beq.n	800d788 <_scanf_float+0x1d0>
 800d7c2:	2d05      	cmp	r5, #5
 800d7c4:	e7de      	b.n	800d784 <_scanf_float+0x1cc>
 800d7c6:	2d02      	cmp	r5, #2
 800d7c8:	f47f af26 	bne.w	800d618 <_scanf_float+0x60>
 800d7cc:	2503      	movs	r5, #3
 800d7ce:	e7b7      	b.n	800d740 <_scanf_float+0x188>
 800d7d0:	2d06      	cmp	r5, #6
 800d7d2:	f47f af21 	bne.w	800d618 <_scanf_float+0x60>
 800d7d6:	2507      	movs	r5, #7
 800d7d8:	e7b2      	b.n	800d740 <_scanf_float+0x188>
 800d7da:	6822      	ldr	r2, [r4, #0]
 800d7dc:	0591      	lsls	r1, r2, #22
 800d7de:	f57f af1b 	bpl.w	800d618 <_scanf_float+0x60>
 800d7e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d7e6:	6022      	str	r2, [r4, #0]
 800d7e8:	f8cd 9004 	str.w	r9, [sp, #4]
 800d7ec:	e7a8      	b.n	800d740 <_scanf_float+0x188>
 800d7ee:	6822      	ldr	r2, [r4, #0]
 800d7f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d7f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d7f8:	d006      	beq.n	800d808 <_scanf_float+0x250>
 800d7fa:	0550      	lsls	r0, r2, #21
 800d7fc:	f57f af0c 	bpl.w	800d618 <_scanf_float+0x60>
 800d800:	f1b9 0f00 	cmp.w	r9, #0
 800d804:	f43f af0f 	beq.w	800d626 <_scanf_float+0x6e>
 800d808:	0591      	lsls	r1, r2, #22
 800d80a:	bf58      	it	pl
 800d80c:	9901      	ldrpl	r1, [sp, #4]
 800d80e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d812:	bf58      	it	pl
 800d814:	eba9 0101 	subpl.w	r1, r9, r1
 800d818:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d81c:	bf58      	it	pl
 800d81e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d822:	6022      	str	r2, [r4, #0]
 800d824:	f04f 0900 	mov.w	r9, #0
 800d828:	e78a      	b.n	800d740 <_scanf_float+0x188>
 800d82a:	f04f 0a03 	mov.w	sl, #3
 800d82e:	e787      	b.n	800d740 <_scanf_float+0x188>
 800d830:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d834:	4639      	mov	r1, r7
 800d836:	4640      	mov	r0, r8
 800d838:	4798      	blx	r3
 800d83a:	2800      	cmp	r0, #0
 800d83c:	f43f aedf 	beq.w	800d5fe <_scanf_float+0x46>
 800d840:	e6ea      	b.n	800d618 <_scanf_float+0x60>
 800d842:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d846:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d84a:	463a      	mov	r2, r7
 800d84c:	4640      	mov	r0, r8
 800d84e:	4798      	blx	r3
 800d850:	6923      	ldr	r3, [r4, #16]
 800d852:	3b01      	subs	r3, #1
 800d854:	6123      	str	r3, [r4, #16]
 800d856:	e6ec      	b.n	800d632 <_scanf_float+0x7a>
 800d858:	1e6b      	subs	r3, r5, #1
 800d85a:	2b06      	cmp	r3, #6
 800d85c:	d825      	bhi.n	800d8aa <_scanf_float+0x2f2>
 800d85e:	2d02      	cmp	r5, #2
 800d860:	d836      	bhi.n	800d8d0 <_scanf_float+0x318>
 800d862:	455e      	cmp	r6, fp
 800d864:	f67f aee8 	bls.w	800d638 <_scanf_float+0x80>
 800d868:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d86c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d870:	463a      	mov	r2, r7
 800d872:	4640      	mov	r0, r8
 800d874:	4798      	blx	r3
 800d876:	6923      	ldr	r3, [r4, #16]
 800d878:	3b01      	subs	r3, #1
 800d87a:	6123      	str	r3, [r4, #16]
 800d87c:	e7f1      	b.n	800d862 <_scanf_float+0x2aa>
 800d87e:	9802      	ldr	r0, [sp, #8]
 800d880:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d884:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d888:	9002      	str	r0, [sp, #8]
 800d88a:	463a      	mov	r2, r7
 800d88c:	4640      	mov	r0, r8
 800d88e:	4798      	blx	r3
 800d890:	6923      	ldr	r3, [r4, #16]
 800d892:	3b01      	subs	r3, #1
 800d894:	6123      	str	r3, [r4, #16]
 800d896:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d89a:	fa5f fa8a 	uxtb.w	sl, sl
 800d89e:	f1ba 0f02 	cmp.w	sl, #2
 800d8a2:	d1ec      	bne.n	800d87e <_scanf_float+0x2c6>
 800d8a4:	3d03      	subs	r5, #3
 800d8a6:	b2ed      	uxtb	r5, r5
 800d8a8:	1b76      	subs	r6, r6, r5
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	05da      	lsls	r2, r3, #23
 800d8ae:	d52f      	bpl.n	800d910 <_scanf_float+0x358>
 800d8b0:	055b      	lsls	r3, r3, #21
 800d8b2:	d510      	bpl.n	800d8d6 <_scanf_float+0x31e>
 800d8b4:	455e      	cmp	r6, fp
 800d8b6:	f67f aebf 	bls.w	800d638 <_scanf_float+0x80>
 800d8ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d8be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d8c2:	463a      	mov	r2, r7
 800d8c4:	4640      	mov	r0, r8
 800d8c6:	4798      	blx	r3
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	6123      	str	r3, [r4, #16]
 800d8ce:	e7f1      	b.n	800d8b4 <_scanf_float+0x2fc>
 800d8d0:	46aa      	mov	sl, r5
 800d8d2:	9602      	str	r6, [sp, #8]
 800d8d4:	e7df      	b.n	800d896 <_scanf_float+0x2de>
 800d8d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d8da:	6923      	ldr	r3, [r4, #16]
 800d8dc:	2965      	cmp	r1, #101	; 0x65
 800d8de:	f103 33ff 	add.w	r3, r3, #4294967295
 800d8e2:	f106 35ff 	add.w	r5, r6, #4294967295
 800d8e6:	6123      	str	r3, [r4, #16]
 800d8e8:	d00c      	beq.n	800d904 <_scanf_float+0x34c>
 800d8ea:	2945      	cmp	r1, #69	; 0x45
 800d8ec:	d00a      	beq.n	800d904 <_scanf_float+0x34c>
 800d8ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d8f2:	463a      	mov	r2, r7
 800d8f4:	4640      	mov	r0, r8
 800d8f6:	4798      	blx	r3
 800d8f8:	6923      	ldr	r3, [r4, #16]
 800d8fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d8fe:	3b01      	subs	r3, #1
 800d900:	1eb5      	subs	r5, r6, #2
 800d902:	6123      	str	r3, [r4, #16]
 800d904:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d908:	463a      	mov	r2, r7
 800d90a:	4640      	mov	r0, r8
 800d90c:	4798      	blx	r3
 800d90e:	462e      	mov	r6, r5
 800d910:	6825      	ldr	r5, [r4, #0]
 800d912:	f015 0510 	ands.w	r5, r5, #16
 800d916:	d158      	bne.n	800d9ca <_scanf_float+0x412>
 800d918:	7035      	strb	r5, [r6, #0]
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d924:	d11c      	bne.n	800d960 <_scanf_float+0x3a8>
 800d926:	9b01      	ldr	r3, [sp, #4]
 800d928:	454b      	cmp	r3, r9
 800d92a:	eba3 0209 	sub.w	r2, r3, r9
 800d92e:	d124      	bne.n	800d97a <_scanf_float+0x3c2>
 800d930:	2200      	movs	r2, #0
 800d932:	4659      	mov	r1, fp
 800d934:	4640      	mov	r0, r8
 800d936:	f000 ff59 	bl	800e7ec <_strtod_r>
 800d93a:	9b03      	ldr	r3, [sp, #12]
 800d93c:	6821      	ldr	r1, [r4, #0]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f011 0f02 	tst.w	r1, #2
 800d944:	ec57 6b10 	vmov	r6, r7, d0
 800d948:	f103 0204 	add.w	r2, r3, #4
 800d94c:	d020      	beq.n	800d990 <_scanf_float+0x3d8>
 800d94e:	9903      	ldr	r1, [sp, #12]
 800d950:	600a      	str	r2, [r1, #0]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	e9c3 6700 	strd	r6, r7, [r3]
 800d958:	68e3      	ldr	r3, [r4, #12]
 800d95a:	3301      	adds	r3, #1
 800d95c:	60e3      	str	r3, [r4, #12]
 800d95e:	e66c      	b.n	800d63a <_scanf_float+0x82>
 800d960:	9b04      	ldr	r3, [sp, #16]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d0e4      	beq.n	800d930 <_scanf_float+0x378>
 800d966:	9905      	ldr	r1, [sp, #20]
 800d968:	230a      	movs	r3, #10
 800d96a:	462a      	mov	r2, r5
 800d96c:	3101      	adds	r1, #1
 800d96e:	4640      	mov	r0, r8
 800d970:	f000 ffc6 	bl	800e900 <_strtol_r>
 800d974:	9b04      	ldr	r3, [sp, #16]
 800d976:	9e05      	ldr	r6, [sp, #20]
 800d978:	1ac2      	subs	r2, r0, r3
 800d97a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d97e:	429e      	cmp	r6, r3
 800d980:	bf28      	it	cs
 800d982:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d986:	4912      	ldr	r1, [pc, #72]	; (800d9d0 <_scanf_float+0x418>)
 800d988:	4630      	mov	r0, r6
 800d98a:	f000 f8a5 	bl	800dad8 <siprintf>
 800d98e:	e7cf      	b.n	800d930 <_scanf_float+0x378>
 800d990:	f011 0f04 	tst.w	r1, #4
 800d994:	9903      	ldr	r1, [sp, #12]
 800d996:	600a      	str	r2, [r1, #0]
 800d998:	d1db      	bne.n	800d952 <_scanf_float+0x39a>
 800d99a:	f8d3 8000 	ldr.w	r8, [r3]
 800d99e:	ee10 2a10 	vmov	r2, s0
 800d9a2:	ee10 0a10 	vmov	r0, s0
 800d9a6:	463b      	mov	r3, r7
 800d9a8:	4639      	mov	r1, r7
 800d9aa:	f7f3 f8bf 	bl	8000b2c <__aeabi_dcmpun>
 800d9ae:	b128      	cbz	r0, 800d9bc <_scanf_float+0x404>
 800d9b0:	4808      	ldr	r0, [pc, #32]	; (800d9d4 <_scanf_float+0x41c>)
 800d9b2:	f000 f88b 	bl	800dacc <nanf>
 800d9b6:	ed88 0a00 	vstr	s0, [r8]
 800d9ba:	e7cd      	b.n	800d958 <_scanf_float+0x3a0>
 800d9bc:	4630      	mov	r0, r6
 800d9be:	4639      	mov	r1, r7
 800d9c0:	f7f3 f912 	bl	8000be8 <__aeabi_d2f>
 800d9c4:	f8c8 0000 	str.w	r0, [r8]
 800d9c8:	e7c6      	b.n	800d958 <_scanf_float+0x3a0>
 800d9ca:	2500      	movs	r5, #0
 800d9cc:	e635      	b.n	800d63a <_scanf_float+0x82>
 800d9ce:	bf00      	nop
 800d9d0:	08012a88 	.word	0x08012a88
 800d9d4:	08012ea0 	.word	0x08012ea0

0800d9d8 <cleanup_glue>:
 800d9d8:	b538      	push	{r3, r4, r5, lr}
 800d9da:	460c      	mov	r4, r1
 800d9dc:	6809      	ldr	r1, [r1, #0]
 800d9de:	4605      	mov	r5, r0
 800d9e0:	b109      	cbz	r1, 800d9e6 <cleanup_glue+0xe>
 800d9e2:	f7ff fff9 	bl	800d9d8 <cleanup_glue>
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ee:	f002 bf5b 	b.w	80108a8 <_free_r>
	...

0800d9f4 <_reclaim_reent>:
 800d9f4:	4b2c      	ldr	r3, [pc, #176]	; (800daa8 <_reclaim_reent+0xb4>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4283      	cmp	r3, r0
 800d9fa:	b570      	push	{r4, r5, r6, lr}
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	d051      	beq.n	800daa4 <_reclaim_reent+0xb0>
 800da00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800da02:	b143      	cbz	r3, 800da16 <_reclaim_reent+0x22>
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d14a      	bne.n	800daa0 <_reclaim_reent+0xac>
 800da0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da0c:	6819      	ldr	r1, [r3, #0]
 800da0e:	b111      	cbz	r1, 800da16 <_reclaim_reent+0x22>
 800da10:	4620      	mov	r0, r4
 800da12:	f002 ff49 	bl	80108a8 <_free_r>
 800da16:	6961      	ldr	r1, [r4, #20]
 800da18:	b111      	cbz	r1, 800da20 <_reclaim_reent+0x2c>
 800da1a:	4620      	mov	r0, r4
 800da1c:	f002 ff44 	bl	80108a8 <_free_r>
 800da20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800da22:	b111      	cbz	r1, 800da2a <_reclaim_reent+0x36>
 800da24:	4620      	mov	r0, r4
 800da26:	f002 ff3f 	bl	80108a8 <_free_r>
 800da2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800da2c:	b111      	cbz	r1, 800da34 <_reclaim_reent+0x40>
 800da2e:	4620      	mov	r0, r4
 800da30:	f002 ff3a 	bl	80108a8 <_free_r>
 800da34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800da36:	b111      	cbz	r1, 800da3e <_reclaim_reent+0x4a>
 800da38:	4620      	mov	r0, r4
 800da3a:	f002 ff35 	bl	80108a8 <_free_r>
 800da3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800da40:	b111      	cbz	r1, 800da48 <_reclaim_reent+0x54>
 800da42:	4620      	mov	r0, r4
 800da44:	f002 ff30 	bl	80108a8 <_free_r>
 800da48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800da4a:	b111      	cbz	r1, 800da52 <_reclaim_reent+0x5e>
 800da4c:	4620      	mov	r0, r4
 800da4e:	f002 ff2b 	bl	80108a8 <_free_r>
 800da52:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800da54:	b111      	cbz	r1, 800da5c <_reclaim_reent+0x68>
 800da56:	4620      	mov	r0, r4
 800da58:	f002 ff26 	bl	80108a8 <_free_r>
 800da5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da5e:	b111      	cbz	r1, 800da66 <_reclaim_reent+0x72>
 800da60:	4620      	mov	r0, r4
 800da62:	f002 ff21 	bl	80108a8 <_free_r>
 800da66:	69a3      	ldr	r3, [r4, #24]
 800da68:	b1e3      	cbz	r3, 800daa4 <_reclaim_reent+0xb0>
 800da6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800da6c:	4620      	mov	r0, r4
 800da6e:	4798      	blx	r3
 800da70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800da72:	b1b9      	cbz	r1, 800daa4 <_reclaim_reent+0xb0>
 800da74:	4620      	mov	r0, r4
 800da76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da7a:	f7ff bfad 	b.w	800d9d8 <cleanup_glue>
 800da7e:	5949      	ldr	r1, [r1, r5]
 800da80:	b941      	cbnz	r1, 800da94 <_reclaim_reent+0xa0>
 800da82:	3504      	adds	r5, #4
 800da84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da86:	2d80      	cmp	r5, #128	; 0x80
 800da88:	68d9      	ldr	r1, [r3, #12]
 800da8a:	d1f8      	bne.n	800da7e <_reclaim_reent+0x8a>
 800da8c:	4620      	mov	r0, r4
 800da8e:	f002 ff0b 	bl	80108a8 <_free_r>
 800da92:	e7ba      	b.n	800da0a <_reclaim_reent+0x16>
 800da94:	680e      	ldr	r6, [r1, #0]
 800da96:	4620      	mov	r0, r4
 800da98:	f002 ff06 	bl	80108a8 <_free_r>
 800da9c:	4631      	mov	r1, r6
 800da9e:	e7ef      	b.n	800da80 <_reclaim_reent+0x8c>
 800daa0:	2500      	movs	r5, #0
 800daa2:	e7ef      	b.n	800da84 <_reclaim_reent+0x90>
 800daa4:	bd70      	pop	{r4, r5, r6, pc}
 800daa6:	bf00      	nop
 800daa8:	20000040 	.word	0x20000040

0800daac <_sbrk_r>:
 800daac:	b538      	push	{r3, r4, r5, lr}
 800daae:	4d06      	ldr	r5, [pc, #24]	; (800dac8 <_sbrk_r+0x1c>)
 800dab0:	2300      	movs	r3, #0
 800dab2:	4604      	mov	r4, r0
 800dab4:	4608      	mov	r0, r1
 800dab6:	602b      	str	r3, [r5, #0]
 800dab8:	f7f6 f8d8 	bl	8003c6c <_sbrk>
 800dabc:	1c43      	adds	r3, r0, #1
 800dabe:	d102      	bne.n	800dac6 <_sbrk_r+0x1a>
 800dac0:	682b      	ldr	r3, [r5, #0]
 800dac2:	b103      	cbz	r3, 800dac6 <_sbrk_r+0x1a>
 800dac4:	6023      	str	r3, [r4, #0]
 800dac6:	bd38      	pop	{r3, r4, r5, pc}
 800dac8:	200062d4 	.word	0x200062d4

0800dacc <nanf>:
 800dacc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dad4 <nanf+0x8>
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	7fc00000 	.word	0x7fc00000

0800dad8 <siprintf>:
 800dad8:	b40e      	push	{r1, r2, r3}
 800dada:	b500      	push	{lr}
 800dadc:	b09c      	sub	sp, #112	; 0x70
 800dade:	ab1d      	add	r3, sp, #116	; 0x74
 800dae0:	9002      	str	r0, [sp, #8]
 800dae2:	9006      	str	r0, [sp, #24]
 800dae4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dae8:	4809      	ldr	r0, [pc, #36]	; (800db10 <siprintf+0x38>)
 800daea:	9107      	str	r1, [sp, #28]
 800daec:	9104      	str	r1, [sp, #16]
 800daee:	4909      	ldr	r1, [pc, #36]	; (800db14 <siprintf+0x3c>)
 800daf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800daf4:	9105      	str	r1, [sp, #20]
 800daf6:	6800      	ldr	r0, [r0, #0]
 800daf8:	9301      	str	r3, [sp, #4]
 800dafa:	a902      	add	r1, sp, #8
 800dafc:	f002 ff80 	bl	8010a00 <_svfiprintf_r>
 800db00:	9b02      	ldr	r3, [sp, #8]
 800db02:	2200      	movs	r2, #0
 800db04:	701a      	strb	r2, [r3, #0]
 800db06:	b01c      	add	sp, #112	; 0x70
 800db08:	f85d eb04 	ldr.w	lr, [sp], #4
 800db0c:	b003      	add	sp, #12
 800db0e:	4770      	bx	lr
 800db10:	20000040 	.word	0x20000040
 800db14:	ffff0208 	.word	0xffff0208

0800db18 <__sread>:
 800db18:	b510      	push	{r4, lr}
 800db1a:	460c      	mov	r4, r1
 800db1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db20:	f003 f86e 	bl	8010c00 <_read_r>
 800db24:	2800      	cmp	r0, #0
 800db26:	bfab      	itete	ge
 800db28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db2a:	89a3      	ldrhlt	r3, [r4, #12]
 800db2c:	181b      	addge	r3, r3, r0
 800db2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db32:	bfac      	ite	ge
 800db34:	6563      	strge	r3, [r4, #84]	; 0x54
 800db36:	81a3      	strhlt	r3, [r4, #12]
 800db38:	bd10      	pop	{r4, pc}

0800db3a <__swrite>:
 800db3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3e:	461f      	mov	r7, r3
 800db40:	898b      	ldrh	r3, [r1, #12]
 800db42:	05db      	lsls	r3, r3, #23
 800db44:	4605      	mov	r5, r0
 800db46:	460c      	mov	r4, r1
 800db48:	4616      	mov	r6, r2
 800db4a:	d505      	bpl.n	800db58 <__swrite+0x1e>
 800db4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db50:	2302      	movs	r3, #2
 800db52:	2200      	movs	r2, #0
 800db54:	f002 f9a6 	bl	800fea4 <_lseek_r>
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db62:	81a3      	strh	r3, [r4, #12]
 800db64:	4632      	mov	r2, r6
 800db66:	463b      	mov	r3, r7
 800db68:	4628      	mov	r0, r5
 800db6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db6e:	f000 bec9 	b.w	800e904 <_write_r>

0800db72 <__sseek>:
 800db72:	b510      	push	{r4, lr}
 800db74:	460c      	mov	r4, r1
 800db76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db7a:	f002 f993 	bl	800fea4 <_lseek_r>
 800db7e:	1c43      	adds	r3, r0, #1
 800db80:	89a3      	ldrh	r3, [r4, #12]
 800db82:	bf15      	itete	ne
 800db84:	6560      	strne	r0, [r4, #84]	; 0x54
 800db86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db8e:	81a3      	strheq	r3, [r4, #12]
 800db90:	bf18      	it	ne
 800db92:	81a3      	strhne	r3, [r4, #12]
 800db94:	bd10      	pop	{r4, pc}

0800db96 <__sclose>:
 800db96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db9a:	f000 bec5 	b.w	800e928 <_close_r>

0800db9e <sulp>:
 800db9e:	b570      	push	{r4, r5, r6, lr}
 800dba0:	4604      	mov	r4, r0
 800dba2:	460d      	mov	r5, r1
 800dba4:	ec45 4b10 	vmov	d0, r4, r5
 800dba8:	4616      	mov	r6, r2
 800dbaa:	f002 fd1f 	bl	80105ec <__ulp>
 800dbae:	ec51 0b10 	vmov	r0, r1, d0
 800dbb2:	b17e      	cbz	r6, 800dbd4 <sulp+0x36>
 800dbb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dbb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	dd09      	ble.n	800dbd4 <sulp+0x36>
 800dbc0:	051b      	lsls	r3, r3, #20
 800dbc2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dbc6:	2400      	movs	r4, #0
 800dbc8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dbcc:	4622      	mov	r2, r4
 800dbce:	462b      	mov	r3, r5
 800dbd0:	f7f2 fd12 	bl	80005f8 <__aeabi_dmul>
 800dbd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dbd8 <_strtod_l>:
 800dbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbdc:	b0a3      	sub	sp, #140	; 0x8c
 800dbde:	461f      	mov	r7, r3
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	931e      	str	r3, [sp, #120]	; 0x78
 800dbe4:	4ba4      	ldr	r3, [pc, #656]	; (800de78 <_strtod_l+0x2a0>)
 800dbe6:	9219      	str	r2, [sp, #100]	; 0x64
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	9307      	str	r3, [sp, #28]
 800dbec:	4604      	mov	r4, r0
 800dbee:	4618      	mov	r0, r3
 800dbf0:	4688      	mov	r8, r1
 800dbf2:	f7f2 faed 	bl	80001d0 <strlen>
 800dbf6:	f04f 0a00 	mov.w	sl, #0
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	f04f 0b00 	mov.w	fp, #0
 800dc00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dc04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc06:	781a      	ldrb	r2, [r3, #0]
 800dc08:	2a2b      	cmp	r2, #43	; 0x2b
 800dc0a:	d04c      	beq.n	800dca6 <_strtod_l+0xce>
 800dc0c:	d839      	bhi.n	800dc82 <_strtod_l+0xaa>
 800dc0e:	2a0d      	cmp	r2, #13
 800dc10:	d832      	bhi.n	800dc78 <_strtod_l+0xa0>
 800dc12:	2a08      	cmp	r2, #8
 800dc14:	d832      	bhi.n	800dc7c <_strtod_l+0xa4>
 800dc16:	2a00      	cmp	r2, #0
 800dc18:	d03c      	beq.n	800dc94 <_strtod_l+0xbc>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	930e      	str	r3, [sp, #56]	; 0x38
 800dc1e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800dc20:	7833      	ldrb	r3, [r6, #0]
 800dc22:	2b30      	cmp	r3, #48	; 0x30
 800dc24:	f040 80b4 	bne.w	800dd90 <_strtod_l+0x1b8>
 800dc28:	7873      	ldrb	r3, [r6, #1]
 800dc2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dc2e:	2b58      	cmp	r3, #88	; 0x58
 800dc30:	d16c      	bne.n	800dd0c <_strtod_l+0x134>
 800dc32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc34:	9301      	str	r3, [sp, #4]
 800dc36:	ab1e      	add	r3, sp, #120	; 0x78
 800dc38:	9702      	str	r7, [sp, #8]
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	4a8f      	ldr	r2, [pc, #572]	; (800de7c <_strtod_l+0x2a4>)
 800dc3e:	ab1f      	add	r3, sp, #124	; 0x7c
 800dc40:	a91d      	add	r1, sp, #116	; 0x74
 800dc42:	4620      	mov	r0, r4
 800dc44:	f001 fe22 	bl	800f88c <__gethex>
 800dc48:	f010 0707 	ands.w	r7, r0, #7
 800dc4c:	4605      	mov	r5, r0
 800dc4e:	d005      	beq.n	800dc5c <_strtod_l+0x84>
 800dc50:	2f06      	cmp	r7, #6
 800dc52:	d12a      	bne.n	800dcaa <_strtod_l+0xd2>
 800dc54:	3601      	adds	r6, #1
 800dc56:	2300      	movs	r3, #0
 800dc58:	961d      	str	r6, [sp, #116]	; 0x74
 800dc5a:	930e      	str	r3, [sp, #56]	; 0x38
 800dc5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f040 8596 	bne.w	800e790 <_strtod_l+0xbb8>
 800dc64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc66:	b1db      	cbz	r3, 800dca0 <_strtod_l+0xc8>
 800dc68:	4652      	mov	r2, sl
 800dc6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dc6e:	ec43 2b10 	vmov	d0, r2, r3
 800dc72:	b023      	add	sp, #140	; 0x8c
 800dc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc78:	2a20      	cmp	r2, #32
 800dc7a:	d1ce      	bne.n	800dc1a <_strtod_l+0x42>
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	931d      	str	r3, [sp, #116]	; 0x74
 800dc80:	e7c0      	b.n	800dc04 <_strtod_l+0x2c>
 800dc82:	2a2d      	cmp	r2, #45	; 0x2d
 800dc84:	d1c9      	bne.n	800dc1a <_strtod_l+0x42>
 800dc86:	2201      	movs	r2, #1
 800dc88:	920e      	str	r2, [sp, #56]	; 0x38
 800dc8a:	1c5a      	adds	r2, r3, #1
 800dc8c:	921d      	str	r2, [sp, #116]	; 0x74
 800dc8e:	785b      	ldrb	r3, [r3, #1]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d1c4      	bne.n	800dc1e <_strtod_l+0x46>
 800dc94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc96:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	f040 8576 	bne.w	800e78c <_strtod_l+0xbb4>
 800dca0:	4652      	mov	r2, sl
 800dca2:	465b      	mov	r3, fp
 800dca4:	e7e3      	b.n	800dc6e <_strtod_l+0x96>
 800dca6:	2200      	movs	r2, #0
 800dca8:	e7ee      	b.n	800dc88 <_strtod_l+0xb0>
 800dcaa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dcac:	b13a      	cbz	r2, 800dcbe <_strtod_l+0xe6>
 800dcae:	2135      	movs	r1, #53	; 0x35
 800dcb0:	a820      	add	r0, sp, #128	; 0x80
 800dcb2:	f002 fda6 	bl	8010802 <__copybits>
 800dcb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f002 f96b 	bl	800ff94 <_Bfree>
 800dcbe:	3f01      	subs	r7, #1
 800dcc0:	2f05      	cmp	r7, #5
 800dcc2:	d807      	bhi.n	800dcd4 <_strtod_l+0xfc>
 800dcc4:	e8df f007 	tbb	[pc, r7]
 800dcc8:	1d180b0e 	.word	0x1d180b0e
 800dccc:	030e      	.short	0x030e
 800dcce:	f04f 0b00 	mov.w	fp, #0
 800dcd2:	46da      	mov	sl, fp
 800dcd4:	0728      	lsls	r0, r5, #28
 800dcd6:	d5c1      	bpl.n	800dc5c <_strtod_l+0x84>
 800dcd8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dcdc:	e7be      	b.n	800dc5c <_strtod_l+0x84>
 800dcde:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800dce2:	e7f7      	b.n	800dcd4 <_strtod_l+0xfc>
 800dce4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800dce8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dcea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dcee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dcf2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dcf6:	e7ed      	b.n	800dcd4 <_strtod_l+0xfc>
 800dcf8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800de80 <_strtod_l+0x2a8>
 800dcfc:	f04f 0a00 	mov.w	sl, #0
 800dd00:	e7e8      	b.n	800dcd4 <_strtod_l+0xfc>
 800dd02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800dd06:	f04f 3aff 	mov.w	sl, #4294967295
 800dd0a:	e7e3      	b.n	800dcd4 <_strtod_l+0xfc>
 800dd0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd0e:	1c5a      	adds	r2, r3, #1
 800dd10:	921d      	str	r2, [sp, #116]	; 0x74
 800dd12:	785b      	ldrb	r3, [r3, #1]
 800dd14:	2b30      	cmp	r3, #48	; 0x30
 800dd16:	d0f9      	beq.n	800dd0c <_strtod_l+0x134>
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d09f      	beq.n	800dc5c <_strtod_l+0x84>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	f04f 0900 	mov.w	r9, #0
 800dd22:	9304      	str	r3, [sp, #16]
 800dd24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd26:	930a      	str	r3, [sp, #40]	; 0x28
 800dd28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dd2c:	464f      	mov	r7, r9
 800dd2e:	220a      	movs	r2, #10
 800dd30:	981d      	ldr	r0, [sp, #116]	; 0x74
 800dd32:	7806      	ldrb	r6, [r0, #0]
 800dd34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dd38:	b2d9      	uxtb	r1, r3
 800dd3a:	2909      	cmp	r1, #9
 800dd3c:	d92a      	bls.n	800dd94 <_strtod_l+0x1bc>
 800dd3e:	9907      	ldr	r1, [sp, #28]
 800dd40:	462a      	mov	r2, r5
 800dd42:	f002 ff79 	bl	8010c38 <strncmp>
 800dd46:	b398      	cbz	r0, 800ddb0 <_strtod_l+0x1d8>
 800dd48:	2000      	movs	r0, #0
 800dd4a:	4633      	mov	r3, r6
 800dd4c:	463d      	mov	r5, r7
 800dd4e:	9007      	str	r0, [sp, #28]
 800dd50:	4602      	mov	r2, r0
 800dd52:	2b65      	cmp	r3, #101	; 0x65
 800dd54:	d001      	beq.n	800dd5a <_strtod_l+0x182>
 800dd56:	2b45      	cmp	r3, #69	; 0x45
 800dd58:	d118      	bne.n	800dd8c <_strtod_l+0x1b4>
 800dd5a:	b91d      	cbnz	r5, 800dd64 <_strtod_l+0x18c>
 800dd5c:	9b04      	ldr	r3, [sp, #16]
 800dd5e:	4303      	orrs	r3, r0
 800dd60:	d098      	beq.n	800dc94 <_strtod_l+0xbc>
 800dd62:	2500      	movs	r5, #0
 800dd64:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800dd68:	f108 0301 	add.w	r3, r8, #1
 800dd6c:	931d      	str	r3, [sp, #116]	; 0x74
 800dd6e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dd72:	2b2b      	cmp	r3, #43	; 0x2b
 800dd74:	d075      	beq.n	800de62 <_strtod_l+0x28a>
 800dd76:	2b2d      	cmp	r3, #45	; 0x2d
 800dd78:	d07b      	beq.n	800de72 <_strtod_l+0x29a>
 800dd7a:	f04f 0c00 	mov.w	ip, #0
 800dd7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dd82:	2909      	cmp	r1, #9
 800dd84:	f240 8082 	bls.w	800de8c <_strtod_l+0x2b4>
 800dd88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dd8c:	2600      	movs	r6, #0
 800dd8e:	e09d      	b.n	800decc <_strtod_l+0x2f4>
 800dd90:	2300      	movs	r3, #0
 800dd92:	e7c4      	b.n	800dd1e <_strtod_l+0x146>
 800dd94:	2f08      	cmp	r7, #8
 800dd96:	bfd8      	it	le
 800dd98:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800dd9a:	f100 0001 	add.w	r0, r0, #1
 800dd9e:	bfda      	itte	le
 800dda0:	fb02 3301 	mlale	r3, r2, r1, r3
 800dda4:	9309      	strle	r3, [sp, #36]	; 0x24
 800dda6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ddaa:	3701      	adds	r7, #1
 800ddac:	901d      	str	r0, [sp, #116]	; 0x74
 800ddae:	e7bf      	b.n	800dd30 <_strtod_l+0x158>
 800ddb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddb2:	195a      	adds	r2, r3, r5
 800ddb4:	921d      	str	r2, [sp, #116]	; 0x74
 800ddb6:	5d5b      	ldrb	r3, [r3, r5]
 800ddb8:	2f00      	cmp	r7, #0
 800ddba:	d037      	beq.n	800de2c <_strtod_l+0x254>
 800ddbc:	9007      	str	r0, [sp, #28]
 800ddbe:	463d      	mov	r5, r7
 800ddc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ddc4:	2a09      	cmp	r2, #9
 800ddc6:	d912      	bls.n	800ddee <_strtod_l+0x216>
 800ddc8:	2201      	movs	r2, #1
 800ddca:	e7c2      	b.n	800dd52 <_strtod_l+0x17a>
 800ddcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddce:	1c5a      	adds	r2, r3, #1
 800ddd0:	921d      	str	r2, [sp, #116]	; 0x74
 800ddd2:	785b      	ldrb	r3, [r3, #1]
 800ddd4:	3001      	adds	r0, #1
 800ddd6:	2b30      	cmp	r3, #48	; 0x30
 800ddd8:	d0f8      	beq.n	800ddcc <_strtod_l+0x1f4>
 800ddda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ddde:	2a08      	cmp	r2, #8
 800dde0:	f200 84db 	bhi.w	800e79a <_strtod_l+0xbc2>
 800dde4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dde6:	9007      	str	r0, [sp, #28]
 800dde8:	2000      	movs	r0, #0
 800ddea:	920a      	str	r2, [sp, #40]	; 0x28
 800ddec:	4605      	mov	r5, r0
 800ddee:	3b30      	subs	r3, #48	; 0x30
 800ddf0:	f100 0201 	add.w	r2, r0, #1
 800ddf4:	d014      	beq.n	800de20 <_strtod_l+0x248>
 800ddf6:	9907      	ldr	r1, [sp, #28]
 800ddf8:	4411      	add	r1, r2
 800ddfa:	9107      	str	r1, [sp, #28]
 800ddfc:	462a      	mov	r2, r5
 800ddfe:	eb00 0e05 	add.w	lr, r0, r5
 800de02:	210a      	movs	r1, #10
 800de04:	4572      	cmp	r2, lr
 800de06:	d113      	bne.n	800de30 <_strtod_l+0x258>
 800de08:	182a      	adds	r2, r5, r0
 800de0a:	2a08      	cmp	r2, #8
 800de0c:	f105 0501 	add.w	r5, r5, #1
 800de10:	4405      	add	r5, r0
 800de12:	dc1c      	bgt.n	800de4e <_strtod_l+0x276>
 800de14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de16:	220a      	movs	r2, #10
 800de18:	fb02 3301 	mla	r3, r2, r1, r3
 800de1c:	9309      	str	r3, [sp, #36]	; 0x24
 800de1e:	2200      	movs	r2, #0
 800de20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de22:	1c59      	adds	r1, r3, #1
 800de24:	911d      	str	r1, [sp, #116]	; 0x74
 800de26:	785b      	ldrb	r3, [r3, #1]
 800de28:	4610      	mov	r0, r2
 800de2a:	e7c9      	b.n	800ddc0 <_strtod_l+0x1e8>
 800de2c:	4638      	mov	r0, r7
 800de2e:	e7d2      	b.n	800ddd6 <_strtod_l+0x1fe>
 800de30:	2a08      	cmp	r2, #8
 800de32:	dc04      	bgt.n	800de3e <_strtod_l+0x266>
 800de34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800de36:	434e      	muls	r6, r1
 800de38:	9609      	str	r6, [sp, #36]	; 0x24
 800de3a:	3201      	adds	r2, #1
 800de3c:	e7e2      	b.n	800de04 <_strtod_l+0x22c>
 800de3e:	f102 0c01 	add.w	ip, r2, #1
 800de42:	f1bc 0f10 	cmp.w	ip, #16
 800de46:	bfd8      	it	le
 800de48:	fb01 f909 	mulle.w	r9, r1, r9
 800de4c:	e7f5      	b.n	800de3a <_strtod_l+0x262>
 800de4e:	2d10      	cmp	r5, #16
 800de50:	bfdc      	itt	le
 800de52:	220a      	movle	r2, #10
 800de54:	fb02 3909 	mlale	r9, r2, r9, r3
 800de58:	e7e1      	b.n	800de1e <_strtod_l+0x246>
 800de5a:	2300      	movs	r3, #0
 800de5c:	9307      	str	r3, [sp, #28]
 800de5e:	2201      	movs	r2, #1
 800de60:	e77c      	b.n	800dd5c <_strtod_l+0x184>
 800de62:	f04f 0c00 	mov.w	ip, #0
 800de66:	f108 0302 	add.w	r3, r8, #2
 800de6a:	931d      	str	r3, [sp, #116]	; 0x74
 800de6c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800de70:	e785      	b.n	800dd7e <_strtod_l+0x1a6>
 800de72:	f04f 0c01 	mov.w	ip, #1
 800de76:	e7f6      	b.n	800de66 <_strtod_l+0x28e>
 800de78:	08012ce0 	.word	0x08012ce0
 800de7c:	08012a90 	.word	0x08012a90
 800de80:	7ff00000 	.word	0x7ff00000
 800de84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de86:	1c59      	adds	r1, r3, #1
 800de88:	911d      	str	r1, [sp, #116]	; 0x74
 800de8a:	785b      	ldrb	r3, [r3, #1]
 800de8c:	2b30      	cmp	r3, #48	; 0x30
 800de8e:	d0f9      	beq.n	800de84 <_strtod_l+0x2ac>
 800de90:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800de94:	2908      	cmp	r1, #8
 800de96:	f63f af79 	bhi.w	800dd8c <_strtod_l+0x1b4>
 800de9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800de9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dea0:	9308      	str	r3, [sp, #32]
 800dea2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dea4:	1c59      	adds	r1, r3, #1
 800dea6:	911d      	str	r1, [sp, #116]	; 0x74
 800dea8:	785b      	ldrb	r3, [r3, #1]
 800deaa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800deae:	2e09      	cmp	r6, #9
 800deb0:	d937      	bls.n	800df22 <_strtod_l+0x34a>
 800deb2:	9e08      	ldr	r6, [sp, #32]
 800deb4:	1b89      	subs	r1, r1, r6
 800deb6:	2908      	cmp	r1, #8
 800deb8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800debc:	dc02      	bgt.n	800dec4 <_strtod_l+0x2ec>
 800debe:	4576      	cmp	r6, lr
 800dec0:	bfa8      	it	ge
 800dec2:	4676      	movge	r6, lr
 800dec4:	f1bc 0f00 	cmp.w	ip, #0
 800dec8:	d000      	beq.n	800decc <_strtod_l+0x2f4>
 800deca:	4276      	negs	r6, r6
 800decc:	2d00      	cmp	r5, #0
 800dece:	d14f      	bne.n	800df70 <_strtod_l+0x398>
 800ded0:	9904      	ldr	r1, [sp, #16]
 800ded2:	4301      	orrs	r1, r0
 800ded4:	f47f aec2 	bne.w	800dc5c <_strtod_l+0x84>
 800ded8:	2a00      	cmp	r2, #0
 800deda:	f47f aedb 	bne.w	800dc94 <_strtod_l+0xbc>
 800dede:	2b69      	cmp	r3, #105	; 0x69
 800dee0:	d027      	beq.n	800df32 <_strtod_l+0x35a>
 800dee2:	dc24      	bgt.n	800df2e <_strtod_l+0x356>
 800dee4:	2b49      	cmp	r3, #73	; 0x49
 800dee6:	d024      	beq.n	800df32 <_strtod_l+0x35a>
 800dee8:	2b4e      	cmp	r3, #78	; 0x4e
 800deea:	f47f aed3 	bne.w	800dc94 <_strtod_l+0xbc>
 800deee:	499e      	ldr	r1, [pc, #632]	; (800e168 <_strtod_l+0x590>)
 800def0:	a81d      	add	r0, sp, #116	; 0x74
 800def2:	f001 ff23 	bl	800fd3c <__match>
 800def6:	2800      	cmp	r0, #0
 800def8:	f43f aecc 	beq.w	800dc94 <_strtod_l+0xbc>
 800defc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	2b28      	cmp	r3, #40	; 0x28
 800df02:	d12d      	bne.n	800df60 <_strtod_l+0x388>
 800df04:	4999      	ldr	r1, [pc, #612]	; (800e16c <_strtod_l+0x594>)
 800df06:	aa20      	add	r2, sp, #128	; 0x80
 800df08:	a81d      	add	r0, sp, #116	; 0x74
 800df0a:	f001 ff2b 	bl	800fd64 <__hexnan>
 800df0e:	2805      	cmp	r0, #5
 800df10:	d126      	bne.n	800df60 <_strtod_l+0x388>
 800df12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df14:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800df18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800df1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800df20:	e69c      	b.n	800dc5c <_strtod_l+0x84>
 800df22:	210a      	movs	r1, #10
 800df24:	fb01 3e0e 	mla	lr, r1, lr, r3
 800df28:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800df2c:	e7b9      	b.n	800dea2 <_strtod_l+0x2ca>
 800df2e:	2b6e      	cmp	r3, #110	; 0x6e
 800df30:	e7db      	b.n	800deea <_strtod_l+0x312>
 800df32:	498f      	ldr	r1, [pc, #572]	; (800e170 <_strtod_l+0x598>)
 800df34:	a81d      	add	r0, sp, #116	; 0x74
 800df36:	f001 ff01 	bl	800fd3c <__match>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	f43f aeaa 	beq.w	800dc94 <_strtod_l+0xbc>
 800df40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df42:	498c      	ldr	r1, [pc, #560]	; (800e174 <_strtod_l+0x59c>)
 800df44:	3b01      	subs	r3, #1
 800df46:	a81d      	add	r0, sp, #116	; 0x74
 800df48:	931d      	str	r3, [sp, #116]	; 0x74
 800df4a:	f001 fef7 	bl	800fd3c <__match>
 800df4e:	b910      	cbnz	r0, 800df56 <_strtod_l+0x37e>
 800df50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df52:	3301      	adds	r3, #1
 800df54:	931d      	str	r3, [sp, #116]	; 0x74
 800df56:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e184 <_strtod_l+0x5ac>
 800df5a:	f04f 0a00 	mov.w	sl, #0
 800df5e:	e67d      	b.n	800dc5c <_strtod_l+0x84>
 800df60:	4885      	ldr	r0, [pc, #532]	; (800e178 <_strtod_l+0x5a0>)
 800df62:	f002 fe61 	bl	8010c28 <nan>
 800df66:	ed8d 0b04 	vstr	d0, [sp, #16]
 800df6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800df6e:	e675      	b.n	800dc5c <_strtod_l+0x84>
 800df70:	9b07      	ldr	r3, [sp, #28]
 800df72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df74:	1af3      	subs	r3, r6, r3
 800df76:	2f00      	cmp	r7, #0
 800df78:	bf08      	it	eq
 800df7a:	462f      	moveq	r7, r5
 800df7c:	2d10      	cmp	r5, #16
 800df7e:	9308      	str	r3, [sp, #32]
 800df80:	46a8      	mov	r8, r5
 800df82:	bfa8      	it	ge
 800df84:	f04f 0810 	movge.w	r8, #16
 800df88:	f7f2 fabc 	bl	8000504 <__aeabi_ui2d>
 800df8c:	2d09      	cmp	r5, #9
 800df8e:	4682      	mov	sl, r0
 800df90:	468b      	mov	fp, r1
 800df92:	dd13      	ble.n	800dfbc <_strtod_l+0x3e4>
 800df94:	4b79      	ldr	r3, [pc, #484]	; (800e17c <_strtod_l+0x5a4>)
 800df96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800df9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800df9e:	f7f2 fb2b 	bl	80005f8 <__aeabi_dmul>
 800dfa2:	4682      	mov	sl, r0
 800dfa4:	4648      	mov	r0, r9
 800dfa6:	468b      	mov	fp, r1
 800dfa8:	f7f2 faac 	bl	8000504 <__aeabi_ui2d>
 800dfac:	4602      	mov	r2, r0
 800dfae:	460b      	mov	r3, r1
 800dfb0:	4650      	mov	r0, sl
 800dfb2:	4659      	mov	r1, fp
 800dfb4:	f7f2 f96a 	bl	800028c <__adddf3>
 800dfb8:	4682      	mov	sl, r0
 800dfba:	468b      	mov	fp, r1
 800dfbc:	2d0f      	cmp	r5, #15
 800dfbe:	dc38      	bgt.n	800e032 <_strtod_l+0x45a>
 800dfc0:	9b08      	ldr	r3, [sp, #32]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	f43f ae4a 	beq.w	800dc5c <_strtod_l+0x84>
 800dfc8:	dd24      	ble.n	800e014 <_strtod_l+0x43c>
 800dfca:	2b16      	cmp	r3, #22
 800dfcc:	dc0b      	bgt.n	800dfe6 <_strtod_l+0x40e>
 800dfce:	4d6b      	ldr	r5, [pc, #428]	; (800e17c <_strtod_l+0x5a4>)
 800dfd0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800dfd4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dfd8:	4652      	mov	r2, sl
 800dfda:	465b      	mov	r3, fp
 800dfdc:	f7f2 fb0c 	bl	80005f8 <__aeabi_dmul>
 800dfe0:	4682      	mov	sl, r0
 800dfe2:	468b      	mov	fp, r1
 800dfe4:	e63a      	b.n	800dc5c <_strtod_l+0x84>
 800dfe6:	9a08      	ldr	r2, [sp, #32]
 800dfe8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dfec:	4293      	cmp	r3, r2
 800dfee:	db20      	blt.n	800e032 <_strtod_l+0x45a>
 800dff0:	4c62      	ldr	r4, [pc, #392]	; (800e17c <_strtod_l+0x5a4>)
 800dff2:	f1c5 050f 	rsb	r5, r5, #15
 800dff6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dffa:	4652      	mov	r2, sl
 800dffc:	465b      	mov	r3, fp
 800dffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e002:	f7f2 faf9 	bl	80005f8 <__aeabi_dmul>
 800e006:	9b08      	ldr	r3, [sp, #32]
 800e008:	1b5d      	subs	r5, r3, r5
 800e00a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e00e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e012:	e7e3      	b.n	800dfdc <_strtod_l+0x404>
 800e014:	9b08      	ldr	r3, [sp, #32]
 800e016:	3316      	adds	r3, #22
 800e018:	db0b      	blt.n	800e032 <_strtod_l+0x45a>
 800e01a:	9b07      	ldr	r3, [sp, #28]
 800e01c:	4a57      	ldr	r2, [pc, #348]	; (800e17c <_strtod_l+0x5a4>)
 800e01e:	1b9e      	subs	r6, r3, r6
 800e020:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e024:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e028:	4650      	mov	r0, sl
 800e02a:	4659      	mov	r1, fp
 800e02c:	f7f2 fc0e 	bl	800084c <__aeabi_ddiv>
 800e030:	e7d6      	b.n	800dfe0 <_strtod_l+0x408>
 800e032:	9b08      	ldr	r3, [sp, #32]
 800e034:	eba5 0808 	sub.w	r8, r5, r8
 800e038:	4498      	add	r8, r3
 800e03a:	f1b8 0f00 	cmp.w	r8, #0
 800e03e:	dd71      	ble.n	800e124 <_strtod_l+0x54c>
 800e040:	f018 030f 	ands.w	r3, r8, #15
 800e044:	d00a      	beq.n	800e05c <_strtod_l+0x484>
 800e046:	494d      	ldr	r1, [pc, #308]	; (800e17c <_strtod_l+0x5a4>)
 800e048:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e04c:	4652      	mov	r2, sl
 800e04e:	465b      	mov	r3, fp
 800e050:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e054:	f7f2 fad0 	bl	80005f8 <__aeabi_dmul>
 800e058:	4682      	mov	sl, r0
 800e05a:	468b      	mov	fp, r1
 800e05c:	f038 080f 	bics.w	r8, r8, #15
 800e060:	d04d      	beq.n	800e0fe <_strtod_l+0x526>
 800e062:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e066:	dd22      	ble.n	800e0ae <_strtod_l+0x4d6>
 800e068:	2500      	movs	r5, #0
 800e06a:	462e      	mov	r6, r5
 800e06c:	9509      	str	r5, [sp, #36]	; 0x24
 800e06e:	9507      	str	r5, [sp, #28]
 800e070:	2322      	movs	r3, #34	; 0x22
 800e072:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e184 <_strtod_l+0x5ac>
 800e076:	6023      	str	r3, [r4, #0]
 800e078:	f04f 0a00 	mov.w	sl, #0
 800e07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e07e:	2b00      	cmp	r3, #0
 800e080:	f43f adec 	beq.w	800dc5c <_strtod_l+0x84>
 800e084:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e086:	4620      	mov	r0, r4
 800e088:	f001 ff84 	bl	800ff94 <_Bfree>
 800e08c:	9907      	ldr	r1, [sp, #28]
 800e08e:	4620      	mov	r0, r4
 800e090:	f001 ff80 	bl	800ff94 <_Bfree>
 800e094:	4631      	mov	r1, r6
 800e096:	4620      	mov	r0, r4
 800e098:	f001 ff7c 	bl	800ff94 <_Bfree>
 800e09c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f001 ff78 	bl	800ff94 <_Bfree>
 800e0a4:	4629      	mov	r1, r5
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f001 ff74 	bl	800ff94 <_Bfree>
 800e0ac:	e5d6      	b.n	800dc5c <_strtod_l+0x84>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e0b4:	4650      	mov	r0, sl
 800e0b6:	4659      	mov	r1, fp
 800e0b8:	4699      	mov	r9, r3
 800e0ba:	f1b8 0f01 	cmp.w	r8, #1
 800e0be:	dc21      	bgt.n	800e104 <_strtod_l+0x52c>
 800e0c0:	b10b      	cbz	r3, 800e0c6 <_strtod_l+0x4ee>
 800e0c2:	4682      	mov	sl, r0
 800e0c4:	468b      	mov	fp, r1
 800e0c6:	4b2e      	ldr	r3, [pc, #184]	; (800e180 <_strtod_l+0x5a8>)
 800e0c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e0cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e0d0:	4652      	mov	r2, sl
 800e0d2:	465b      	mov	r3, fp
 800e0d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e0d8:	f7f2 fa8e 	bl	80005f8 <__aeabi_dmul>
 800e0dc:	4b29      	ldr	r3, [pc, #164]	; (800e184 <_strtod_l+0x5ac>)
 800e0de:	460a      	mov	r2, r1
 800e0e0:	400b      	ands	r3, r1
 800e0e2:	4929      	ldr	r1, [pc, #164]	; (800e188 <_strtod_l+0x5b0>)
 800e0e4:	428b      	cmp	r3, r1
 800e0e6:	4682      	mov	sl, r0
 800e0e8:	d8be      	bhi.n	800e068 <_strtod_l+0x490>
 800e0ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e0ee:	428b      	cmp	r3, r1
 800e0f0:	bf86      	itte	hi
 800e0f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e18c <_strtod_l+0x5b4>
 800e0f6:	f04f 3aff 	movhi.w	sl, #4294967295
 800e0fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e0fe:	2300      	movs	r3, #0
 800e100:	9304      	str	r3, [sp, #16]
 800e102:	e081      	b.n	800e208 <_strtod_l+0x630>
 800e104:	f018 0f01 	tst.w	r8, #1
 800e108:	d007      	beq.n	800e11a <_strtod_l+0x542>
 800e10a:	4b1d      	ldr	r3, [pc, #116]	; (800e180 <_strtod_l+0x5a8>)
 800e10c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e114:	f7f2 fa70 	bl	80005f8 <__aeabi_dmul>
 800e118:	2301      	movs	r3, #1
 800e11a:	f109 0901 	add.w	r9, r9, #1
 800e11e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e122:	e7ca      	b.n	800e0ba <_strtod_l+0x4e2>
 800e124:	d0eb      	beq.n	800e0fe <_strtod_l+0x526>
 800e126:	f1c8 0800 	rsb	r8, r8, #0
 800e12a:	f018 020f 	ands.w	r2, r8, #15
 800e12e:	d00a      	beq.n	800e146 <_strtod_l+0x56e>
 800e130:	4b12      	ldr	r3, [pc, #72]	; (800e17c <_strtod_l+0x5a4>)
 800e132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e136:	4650      	mov	r0, sl
 800e138:	4659      	mov	r1, fp
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	f7f2 fb85 	bl	800084c <__aeabi_ddiv>
 800e142:	4682      	mov	sl, r0
 800e144:	468b      	mov	fp, r1
 800e146:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e14a:	d0d8      	beq.n	800e0fe <_strtod_l+0x526>
 800e14c:	f1b8 0f1f 	cmp.w	r8, #31
 800e150:	dd1e      	ble.n	800e190 <_strtod_l+0x5b8>
 800e152:	2500      	movs	r5, #0
 800e154:	462e      	mov	r6, r5
 800e156:	9509      	str	r5, [sp, #36]	; 0x24
 800e158:	9507      	str	r5, [sp, #28]
 800e15a:	2322      	movs	r3, #34	; 0x22
 800e15c:	f04f 0a00 	mov.w	sl, #0
 800e160:	f04f 0b00 	mov.w	fp, #0
 800e164:	6023      	str	r3, [r4, #0]
 800e166:	e789      	b.n	800e07c <_strtod_l+0x4a4>
 800e168:	08012a61 	.word	0x08012a61
 800e16c:	08012aa4 	.word	0x08012aa4
 800e170:	08012a59 	.word	0x08012a59
 800e174:	08012be4 	.word	0x08012be4
 800e178:	08012ea0 	.word	0x08012ea0
 800e17c:	08012d80 	.word	0x08012d80
 800e180:	08012d58 	.word	0x08012d58
 800e184:	7ff00000 	.word	0x7ff00000
 800e188:	7ca00000 	.word	0x7ca00000
 800e18c:	7fefffff 	.word	0x7fefffff
 800e190:	f018 0310 	ands.w	r3, r8, #16
 800e194:	bf18      	it	ne
 800e196:	236a      	movne	r3, #106	; 0x6a
 800e198:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e550 <_strtod_l+0x978>
 800e19c:	9304      	str	r3, [sp, #16]
 800e19e:	4650      	mov	r0, sl
 800e1a0:	4659      	mov	r1, fp
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	f018 0f01 	tst.w	r8, #1
 800e1a8:	d004      	beq.n	800e1b4 <_strtod_l+0x5dc>
 800e1aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e1ae:	f7f2 fa23 	bl	80005f8 <__aeabi_dmul>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e1b8:	f109 0908 	add.w	r9, r9, #8
 800e1bc:	d1f2      	bne.n	800e1a4 <_strtod_l+0x5cc>
 800e1be:	b10b      	cbz	r3, 800e1c4 <_strtod_l+0x5ec>
 800e1c0:	4682      	mov	sl, r0
 800e1c2:	468b      	mov	fp, r1
 800e1c4:	9b04      	ldr	r3, [sp, #16]
 800e1c6:	b1bb      	cbz	r3, 800e1f8 <_strtod_l+0x620>
 800e1c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e1cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	4659      	mov	r1, fp
 800e1d4:	dd10      	ble.n	800e1f8 <_strtod_l+0x620>
 800e1d6:	2b1f      	cmp	r3, #31
 800e1d8:	f340 8128 	ble.w	800e42c <_strtod_l+0x854>
 800e1dc:	2b34      	cmp	r3, #52	; 0x34
 800e1de:	bfde      	ittt	le
 800e1e0:	3b20      	suble	r3, #32
 800e1e2:	f04f 32ff 	movle.w	r2, #4294967295
 800e1e6:	fa02 f303 	lslle.w	r3, r2, r3
 800e1ea:	f04f 0a00 	mov.w	sl, #0
 800e1ee:	bfcc      	ite	gt
 800e1f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e1f4:	ea03 0b01 	andle.w	fp, r3, r1
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	4650      	mov	r0, sl
 800e1fe:	4659      	mov	r1, fp
 800e200:	f7f2 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 800e204:	2800      	cmp	r0, #0
 800e206:	d1a4      	bne.n	800e152 <_strtod_l+0x57a>
 800e208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e20e:	462b      	mov	r3, r5
 800e210:	463a      	mov	r2, r7
 800e212:	4620      	mov	r0, r4
 800e214:	f001 ff2a 	bl	801006c <__s2b>
 800e218:	9009      	str	r0, [sp, #36]	; 0x24
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f43f af24 	beq.w	800e068 <_strtod_l+0x490>
 800e220:	9b07      	ldr	r3, [sp, #28]
 800e222:	1b9e      	subs	r6, r3, r6
 800e224:	9b08      	ldr	r3, [sp, #32]
 800e226:	2b00      	cmp	r3, #0
 800e228:	bfb4      	ite	lt
 800e22a:	4633      	movlt	r3, r6
 800e22c:	2300      	movge	r3, #0
 800e22e:	9310      	str	r3, [sp, #64]	; 0x40
 800e230:	9b08      	ldr	r3, [sp, #32]
 800e232:	2500      	movs	r5, #0
 800e234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e238:	9318      	str	r3, [sp, #96]	; 0x60
 800e23a:	462e      	mov	r6, r5
 800e23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e23e:	4620      	mov	r0, r4
 800e240:	6859      	ldr	r1, [r3, #4]
 800e242:	f001 fe67 	bl	800ff14 <_Balloc>
 800e246:	9007      	str	r0, [sp, #28]
 800e248:	2800      	cmp	r0, #0
 800e24a:	f43f af11 	beq.w	800e070 <_strtod_l+0x498>
 800e24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e250:	691a      	ldr	r2, [r3, #16]
 800e252:	3202      	adds	r2, #2
 800e254:	f103 010c 	add.w	r1, r3, #12
 800e258:	0092      	lsls	r2, r2, #2
 800e25a:	300c      	adds	r0, #12
 800e25c:	f7fe fcd1 	bl	800cc02 <memcpy>
 800e260:	ec4b ab10 	vmov	d0, sl, fp
 800e264:	aa20      	add	r2, sp, #128	; 0x80
 800e266:	a91f      	add	r1, sp, #124	; 0x7c
 800e268:	4620      	mov	r0, r4
 800e26a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e26e:	f002 fa39 	bl	80106e4 <__d2b>
 800e272:	901e      	str	r0, [sp, #120]	; 0x78
 800e274:	2800      	cmp	r0, #0
 800e276:	f43f aefb 	beq.w	800e070 <_strtod_l+0x498>
 800e27a:	2101      	movs	r1, #1
 800e27c:	4620      	mov	r0, r4
 800e27e:	f001 ff8f 	bl	80101a0 <__i2b>
 800e282:	4606      	mov	r6, r0
 800e284:	2800      	cmp	r0, #0
 800e286:	f43f aef3 	beq.w	800e070 <_strtod_l+0x498>
 800e28a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e28c:	9904      	ldr	r1, [sp, #16]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	bfab      	itete	ge
 800e292:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e294:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e296:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e298:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e29c:	bfac      	ite	ge
 800e29e:	eb03 0902 	addge.w	r9, r3, r2
 800e2a2:	1ad7      	sublt	r7, r2, r3
 800e2a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e2a6:	eba3 0801 	sub.w	r8, r3, r1
 800e2aa:	4490      	add	r8, r2
 800e2ac:	4ba3      	ldr	r3, [pc, #652]	; (800e53c <_strtod_l+0x964>)
 800e2ae:	f108 38ff 	add.w	r8, r8, #4294967295
 800e2b2:	4598      	cmp	r8, r3
 800e2b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e2b8:	f280 80cc 	bge.w	800e454 <_strtod_l+0x87c>
 800e2bc:	eba3 0308 	sub.w	r3, r3, r8
 800e2c0:	2b1f      	cmp	r3, #31
 800e2c2:	eba2 0203 	sub.w	r2, r2, r3
 800e2c6:	f04f 0101 	mov.w	r1, #1
 800e2ca:	f300 80b6 	bgt.w	800e43a <_strtod_l+0x862>
 800e2ce:	fa01 f303 	lsl.w	r3, r1, r3
 800e2d2:	9311      	str	r3, [sp, #68]	; 0x44
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	930c      	str	r3, [sp, #48]	; 0x30
 800e2d8:	eb09 0802 	add.w	r8, r9, r2
 800e2dc:	9b04      	ldr	r3, [sp, #16]
 800e2de:	45c1      	cmp	r9, r8
 800e2e0:	4417      	add	r7, r2
 800e2e2:	441f      	add	r7, r3
 800e2e4:	464b      	mov	r3, r9
 800e2e6:	bfa8      	it	ge
 800e2e8:	4643      	movge	r3, r8
 800e2ea:	42bb      	cmp	r3, r7
 800e2ec:	bfa8      	it	ge
 800e2ee:	463b      	movge	r3, r7
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	bfc2      	ittt	gt
 800e2f4:	eba8 0803 	subgt.w	r8, r8, r3
 800e2f8:	1aff      	subgt	r7, r7, r3
 800e2fa:	eba9 0903 	subgt.w	r9, r9, r3
 800e2fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e300:	2b00      	cmp	r3, #0
 800e302:	dd17      	ble.n	800e334 <_strtod_l+0x75c>
 800e304:	4631      	mov	r1, r6
 800e306:	461a      	mov	r2, r3
 800e308:	4620      	mov	r0, r4
 800e30a:	f002 f805 	bl	8010318 <__pow5mult>
 800e30e:	4606      	mov	r6, r0
 800e310:	2800      	cmp	r0, #0
 800e312:	f43f aead 	beq.w	800e070 <_strtod_l+0x498>
 800e316:	4601      	mov	r1, r0
 800e318:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e31a:	4620      	mov	r0, r4
 800e31c:	f001 ff56 	bl	80101cc <__multiply>
 800e320:	900f      	str	r0, [sp, #60]	; 0x3c
 800e322:	2800      	cmp	r0, #0
 800e324:	f43f aea4 	beq.w	800e070 <_strtod_l+0x498>
 800e328:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e32a:	4620      	mov	r0, r4
 800e32c:	f001 fe32 	bl	800ff94 <_Bfree>
 800e330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e332:	931e      	str	r3, [sp, #120]	; 0x78
 800e334:	f1b8 0f00 	cmp.w	r8, #0
 800e338:	f300 8091 	bgt.w	800e45e <_strtod_l+0x886>
 800e33c:	9b08      	ldr	r3, [sp, #32]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	dd08      	ble.n	800e354 <_strtod_l+0x77c>
 800e342:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e344:	9907      	ldr	r1, [sp, #28]
 800e346:	4620      	mov	r0, r4
 800e348:	f001 ffe6 	bl	8010318 <__pow5mult>
 800e34c:	9007      	str	r0, [sp, #28]
 800e34e:	2800      	cmp	r0, #0
 800e350:	f43f ae8e 	beq.w	800e070 <_strtod_l+0x498>
 800e354:	2f00      	cmp	r7, #0
 800e356:	dd08      	ble.n	800e36a <_strtod_l+0x792>
 800e358:	9907      	ldr	r1, [sp, #28]
 800e35a:	463a      	mov	r2, r7
 800e35c:	4620      	mov	r0, r4
 800e35e:	f002 f835 	bl	80103cc <__lshift>
 800e362:	9007      	str	r0, [sp, #28]
 800e364:	2800      	cmp	r0, #0
 800e366:	f43f ae83 	beq.w	800e070 <_strtod_l+0x498>
 800e36a:	f1b9 0f00 	cmp.w	r9, #0
 800e36e:	dd08      	ble.n	800e382 <_strtod_l+0x7aa>
 800e370:	4631      	mov	r1, r6
 800e372:	464a      	mov	r2, r9
 800e374:	4620      	mov	r0, r4
 800e376:	f002 f829 	bl	80103cc <__lshift>
 800e37a:	4606      	mov	r6, r0
 800e37c:	2800      	cmp	r0, #0
 800e37e:	f43f ae77 	beq.w	800e070 <_strtod_l+0x498>
 800e382:	9a07      	ldr	r2, [sp, #28]
 800e384:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e386:	4620      	mov	r0, r4
 800e388:	f002 f8a8 	bl	80104dc <__mdiff>
 800e38c:	4605      	mov	r5, r0
 800e38e:	2800      	cmp	r0, #0
 800e390:	f43f ae6e 	beq.w	800e070 <_strtod_l+0x498>
 800e394:	68c3      	ldr	r3, [r0, #12]
 800e396:	930f      	str	r3, [sp, #60]	; 0x3c
 800e398:	2300      	movs	r3, #0
 800e39a:	60c3      	str	r3, [r0, #12]
 800e39c:	4631      	mov	r1, r6
 800e39e:	f002 f881 	bl	80104a4 <__mcmp>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	da65      	bge.n	800e472 <_strtod_l+0x89a>
 800e3a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3a8:	ea53 030a 	orrs.w	r3, r3, sl
 800e3ac:	f040 8087 	bne.w	800e4be <_strtod_l+0x8e6>
 800e3b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f040 8082 	bne.w	800e4be <_strtod_l+0x8e6>
 800e3ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e3be:	0d1b      	lsrs	r3, r3, #20
 800e3c0:	051b      	lsls	r3, r3, #20
 800e3c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e3c6:	d97a      	bls.n	800e4be <_strtod_l+0x8e6>
 800e3c8:	696b      	ldr	r3, [r5, #20]
 800e3ca:	b913      	cbnz	r3, 800e3d2 <_strtod_l+0x7fa>
 800e3cc:	692b      	ldr	r3, [r5, #16]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	dd75      	ble.n	800e4be <_strtod_l+0x8e6>
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f001 fff8 	bl	80103cc <__lshift>
 800e3dc:	4631      	mov	r1, r6
 800e3de:	4605      	mov	r5, r0
 800e3e0:	f002 f860 	bl	80104a4 <__mcmp>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	dd6a      	ble.n	800e4be <_strtod_l+0x8e6>
 800e3e8:	9904      	ldr	r1, [sp, #16]
 800e3ea:	4a55      	ldr	r2, [pc, #340]	; (800e540 <_strtod_l+0x968>)
 800e3ec:	465b      	mov	r3, fp
 800e3ee:	2900      	cmp	r1, #0
 800e3f0:	f000 8085 	beq.w	800e4fe <_strtod_l+0x926>
 800e3f4:	ea02 010b 	and.w	r1, r2, fp
 800e3f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e3fc:	dc7f      	bgt.n	800e4fe <_strtod_l+0x926>
 800e3fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e402:	f77f aeaa 	ble.w	800e15a <_strtod_l+0x582>
 800e406:	4a4f      	ldr	r2, [pc, #316]	; (800e544 <_strtod_l+0x96c>)
 800e408:	2300      	movs	r3, #0
 800e40a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e40e:	4650      	mov	r0, sl
 800e410:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e414:	4659      	mov	r1, fp
 800e416:	f7f2 f8ef 	bl	80005f8 <__aeabi_dmul>
 800e41a:	460b      	mov	r3, r1
 800e41c:	4303      	orrs	r3, r0
 800e41e:	bf08      	it	eq
 800e420:	2322      	moveq	r3, #34	; 0x22
 800e422:	4682      	mov	sl, r0
 800e424:	468b      	mov	fp, r1
 800e426:	bf08      	it	eq
 800e428:	6023      	streq	r3, [r4, #0]
 800e42a:	e62b      	b.n	800e084 <_strtod_l+0x4ac>
 800e42c:	f04f 32ff 	mov.w	r2, #4294967295
 800e430:	fa02 f303 	lsl.w	r3, r2, r3
 800e434:	ea03 0a0a 	and.w	sl, r3, sl
 800e438:	e6de      	b.n	800e1f8 <_strtod_l+0x620>
 800e43a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e43e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e442:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e446:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e44a:	fa01 f308 	lsl.w	r3, r1, r8
 800e44e:	930c      	str	r3, [sp, #48]	; 0x30
 800e450:	9111      	str	r1, [sp, #68]	; 0x44
 800e452:	e741      	b.n	800e2d8 <_strtod_l+0x700>
 800e454:	2300      	movs	r3, #0
 800e456:	930c      	str	r3, [sp, #48]	; 0x30
 800e458:	2301      	movs	r3, #1
 800e45a:	9311      	str	r3, [sp, #68]	; 0x44
 800e45c:	e73c      	b.n	800e2d8 <_strtod_l+0x700>
 800e45e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e460:	4642      	mov	r2, r8
 800e462:	4620      	mov	r0, r4
 800e464:	f001 ffb2 	bl	80103cc <__lshift>
 800e468:	901e      	str	r0, [sp, #120]	; 0x78
 800e46a:	2800      	cmp	r0, #0
 800e46c:	f47f af66 	bne.w	800e33c <_strtod_l+0x764>
 800e470:	e5fe      	b.n	800e070 <_strtod_l+0x498>
 800e472:	465f      	mov	r7, fp
 800e474:	d16e      	bne.n	800e554 <_strtod_l+0x97c>
 800e476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e478:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e47c:	b342      	cbz	r2, 800e4d0 <_strtod_l+0x8f8>
 800e47e:	4a32      	ldr	r2, [pc, #200]	; (800e548 <_strtod_l+0x970>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d128      	bne.n	800e4d6 <_strtod_l+0x8fe>
 800e484:	9b04      	ldr	r3, [sp, #16]
 800e486:	4650      	mov	r0, sl
 800e488:	b1eb      	cbz	r3, 800e4c6 <_strtod_l+0x8ee>
 800e48a:	4a2d      	ldr	r2, [pc, #180]	; (800e540 <_strtod_l+0x968>)
 800e48c:	403a      	ands	r2, r7
 800e48e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e492:	f04f 31ff 	mov.w	r1, #4294967295
 800e496:	d819      	bhi.n	800e4cc <_strtod_l+0x8f4>
 800e498:	0d12      	lsrs	r2, r2, #20
 800e49a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e49e:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a2:	4298      	cmp	r0, r3
 800e4a4:	d117      	bne.n	800e4d6 <_strtod_l+0x8fe>
 800e4a6:	4b29      	ldr	r3, [pc, #164]	; (800e54c <_strtod_l+0x974>)
 800e4a8:	429f      	cmp	r7, r3
 800e4aa:	d102      	bne.n	800e4b2 <_strtod_l+0x8da>
 800e4ac:	3001      	adds	r0, #1
 800e4ae:	f43f addf 	beq.w	800e070 <_strtod_l+0x498>
 800e4b2:	4b23      	ldr	r3, [pc, #140]	; (800e540 <_strtod_l+0x968>)
 800e4b4:	403b      	ands	r3, r7
 800e4b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e4ba:	f04f 0a00 	mov.w	sl, #0
 800e4be:	9b04      	ldr	r3, [sp, #16]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1a0      	bne.n	800e406 <_strtod_l+0x82e>
 800e4c4:	e5de      	b.n	800e084 <_strtod_l+0x4ac>
 800e4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ca:	e7ea      	b.n	800e4a2 <_strtod_l+0x8ca>
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	e7e8      	b.n	800e4a2 <_strtod_l+0x8ca>
 800e4d0:	ea53 030a 	orrs.w	r3, r3, sl
 800e4d4:	d088      	beq.n	800e3e8 <_strtod_l+0x810>
 800e4d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4d8:	b1db      	cbz	r3, 800e512 <_strtod_l+0x93a>
 800e4da:	423b      	tst	r3, r7
 800e4dc:	d0ef      	beq.n	800e4be <_strtod_l+0x8e6>
 800e4de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4e0:	9a04      	ldr	r2, [sp, #16]
 800e4e2:	4650      	mov	r0, sl
 800e4e4:	4659      	mov	r1, fp
 800e4e6:	b1c3      	cbz	r3, 800e51a <_strtod_l+0x942>
 800e4e8:	f7ff fb59 	bl	800db9e <sulp>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e4f4:	f7f1 feca 	bl	800028c <__adddf3>
 800e4f8:	4682      	mov	sl, r0
 800e4fa:	468b      	mov	fp, r1
 800e4fc:	e7df      	b.n	800e4be <_strtod_l+0x8e6>
 800e4fe:	4013      	ands	r3, r2
 800e500:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e504:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e508:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e50c:	f04f 3aff 	mov.w	sl, #4294967295
 800e510:	e7d5      	b.n	800e4be <_strtod_l+0x8e6>
 800e512:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e514:	ea13 0f0a 	tst.w	r3, sl
 800e518:	e7e0      	b.n	800e4dc <_strtod_l+0x904>
 800e51a:	f7ff fb40 	bl	800db9e <sulp>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e526:	f7f1 feaf 	bl	8000288 <__aeabi_dsub>
 800e52a:	2200      	movs	r2, #0
 800e52c:	2300      	movs	r3, #0
 800e52e:	4682      	mov	sl, r0
 800e530:	468b      	mov	fp, r1
 800e532:	f7f2 fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e536:	2800      	cmp	r0, #0
 800e538:	d0c1      	beq.n	800e4be <_strtod_l+0x8e6>
 800e53a:	e60e      	b.n	800e15a <_strtod_l+0x582>
 800e53c:	fffffc02 	.word	0xfffffc02
 800e540:	7ff00000 	.word	0x7ff00000
 800e544:	39500000 	.word	0x39500000
 800e548:	000fffff 	.word	0x000fffff
 800e54c:	7fefffff 	.word	0x7fefffff
 800e550:	08012ab8 	.word	0x08012ab8
 800e554:	4631      	mov	r1, r6
 800e556:	4628      	mov	r0, r5
 800e558:	f002 f920 	bl	801079c <__ratio>
 800e55c:	ec59 8b10 	vmov	r8, r9, d0
 800e560:	ee10 0a10 	vmov	r0, s0
 800e564:	2200      	movs	r2, #0
 800e566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e56a:	4649      	mov	r1, r9
 800e56c:	f7f2 fac0 	bl	8000af0 <__aeabi_dcmple>
 800e570:	2800      	cmp	r0, #0
 800e572:	d07c      	beq.n	800e66e <_strtod_l+0xa96>
 800e574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e576:	2b00      	cmp	r3, #0
 800e578:	d04c      	beq.n	800e614 <_strtod_l+0xa3c>
 800e57a:	4b95      	ldr	r3, [pc, #596]	; (800e7d0 <_strtod_l+0xbf8>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e582:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e7d0 <_strtod_l+0xbf8>
 800e586:	f04f 0800 	mov.w	r8, #0
 800e58a:	4b92      	ldr	r3, [pc, #584]	; (800e7d4 <_strtod_l+0xbfc>)
 800e58c:	403b      	ands	r3, r7
 800e58e:	9311      	str	r3, [sp, #68]	; 0x44
 800e590:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e592:	4b91      	ldr	r3, [pc, #580]	; (800e7d8 <_strtod_l+0xc00>)
 800e594:	429a      	cmp	r2, r3
 800e596:	f040 80b2 	bne.w	800e6fe <_strtod_l+0xb26>
 800e59a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e59e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e5a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e5a6:	ec4b ab10 	vmov	d0, sl, fp
 800e5aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e5ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e5b2:	f002 f81b 	bl	80105ec <__ulp>
 800e5b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e5ba:	ec53 2b10 	vmov	r2, r3, d0
 800e5be:	f7f2 f81b 	bl	80005f8 <__aeabi_dmul>
 800e5c2:	4652      	mov	r2, sl
 800e5c4:	465b      	mov	r3, fp
 800e5c6:	f7f1 fe61 	bl	800028c <__adddf3>
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	4981      	ldr	r1, [pc, #516]	; (800e7d4 <_strtod_l+0xbfc>)
 800e5ce:	4a83      	ldr	r2, [pc, #524]	; (800e7dc <_strtod_l+0xc04>)
 800e5d0:	4019      	ands	r1, r3
 800e5d2:	4291      	cmp	r1, r2
 800e5d4:	4682      	mov	sl, r0
 800e5d6:	d95e      	bls.n	800e696 <_strtod_l+0xabe>
 800e5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d103      	bne.n	800e5ea <_strtod_l+0xa12>
 800e5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	f43f ad43 	beq.w	800e070 <_strtod_l+0x498>
 800e5ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e7e8 <_strtod_l+0xc10>
 800e5ee:	f04f 3aff 	mov.w	sl, #4294967295
 800e5f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f001 fccd 	bl	800ff94 <_Bfree>
 800e5fa:	9907      	ldr	r1, [sp, #28]
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f001 fcc9 	bl	800ff94 <_Bfree>
 800e602:	4631      	mov	r1, r6
 800e604:	4620      	mov	r0, r4
 800e606:	f001 fcc5 	bl	800ff94 <_Bfree>
 800e60a:	4629      	mov	r1, r5
 800e60c:	4620      	mov	r0, r4
 800e60e:	f001 fcc1 	bl	800ff94 <_Bfree>
 800e612:	e613      	b.n	800e23c <_strtod_l+0x664>
 800e614:	f1ba 0f00 	cmp.w	sl, #0
 800e618:	d11b      	bne.n	800e652 <_strtod_l+0xa7a>
 800e61a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e61e:	b9f3      	cbnz	r3, 800e65e <_strtod_l+0xa86>
 800e620:	4b6b      	ldr	r3, [pc, #428]	; (800e7d0 <_strtod_l+0xbf8>)
 800e622:	2200      	movs	r2, #0
 800e624:	4640      	mov	r0, r8
 800e626:	4649      	mov	r1, r9
 800e628:	f7f2 fa58 	bl	8000adc <__aeabi_dcmplt>
 800e62c:	b9d0      	cbnz	r0, 800e664 <_strtod_l+0xa8c>
 800e62e:	4640      	mov	r0, r8
 800e630:	4649      	mov	r1, r9
 800e632:	4b6b      	ldr	r3, [pc, #428]	; (800e7e0 <_strtod_l+0xc08>)
 800e634:	2200      	movs	r2, #0
 800e636:	f7f1 ffdf 	bl	80005f8 <__aeabi_dmul>
 800e63a:	4680      	mov	r8, r0
 800e63c:	4689      	mov	r9, r1
 800e63e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e642:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e646:	931b      	str	r3, [sp, #108]	; 0x6c
 800e648:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e64c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e650:	e79b      	b.n	800e58a <_strtod_l+0x9b2>
 800e652:	f1ba 0f01 	cmp.w	sl, #1
 800e656:	d102      	bne.n	800e65e <_strtod_l+0xa86>
 800e658:	2f00      	cmp	r7, #0
 800e65a:	f43f ad7e 	beq.w	800e15a <_strtod_l+0x582>
 800e65e:	4b61      	ldr	r3, [pc, #388]	; (800e7e4 <_strtod_l+0xc0c>)
 800e660:	2200      	movs	r2, #0
 800e662:	e78c      	b.n	800e57e <_strtod_l+0x9a6>
 800e664:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e7e0 <_strtod_l+0xc08>
 800e668:	f04f 0800 	mov.w	r8, #0
 800e66c:	e7e7      	b.n	800e63e <_strtod_l+0xa66>
 800e66e:	4b5c      	ldr	r3, [pc, #368]	; (800e7e0 <_strtod_l+0xc08>)
 800e670:	4640      	mov	r0, r8
 800e672:	4649      	mov	r1, r9
 800e674:	2200      	movs	r2, #0
 800e676:	f7f1 ffbf 	bl	80005f8 <__aeabi_dmul>
 800e67a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e67c:	4680      	mov	r8, r0
 800e67e:	4689      	mov	r9, r1
 800e680:	b933      	cbnz	r3, 800e690 <_strtod_l+0xab8>
 800e682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e686:	9012      	str	r0, [sp, #72]	; 0x48
 800e688:	9313      	str	r3, [sp, #76]	; 0x4c
 800e68a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e68e:	e7dd      	b.n	800e64c <_strtod_l+0xa74>
 800e690:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e694:	e7f9      	b.n	800e68a <_strtod_l+0xab2>
 800e696:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e69a:	9b04      	ldr	r3, [sp, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d1a8      	bne.n	800e5f2 <_strtod_l+0xa1a>
 800e6a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e6a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e6a6:	0d1b      	lsrs	r3, r3, #20
 800e6a8:	051b      	lsls	r3, r3, #20
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d1a1      	bne.n	800e5f2 <_strtod_l+0xa1a>
 800e6ae:	4640      	mov	r0, r8
 800e6b0:	4649      	mov	r1, r9
 800e6b2:	f7f2 fb01 	bl	8000cb8 <__aeabi_d2lz>
 800e6b6:	f7f1 ff71 	bl	800059c <__aeabi_l2d>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4640      	mov	r0, r8
 800e6c0:	4649      	mov	r1, r9
 800e6c2:	f7f1 fde1 	bl	8000288 <__aeabi_dsub>
 800e6c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e6c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e6cc:	ea43 030a 	orr.w	r3, r3, sl
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	4680      	mov	r8, r0
 800e6d4:	4689      	mov	r9, r1
 800e6d6:	d053      	beq.n	800e780 <_strtod_l+0xba8>
 800e6d8:	a335      	add	r3, pc, #212	; (adr r3, 800e7b0 <_strtod_l+0xbd8>)
 800e6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6de:	f7f2 f9fd 	bl	8000adc <__aeabi_dcmplt>
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	f47f acce 	bne.w	800e084 <_strtod_l+0x4ac>
 800e6e8:	a333      	add	r3, pc, #204	; (adr r3, 800e7b8 <_strtod_l+0xbe0>)
 800e6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ee:	4640      	mov	r0, r8
 800e6f0:	4649      	mov	r1, r9
 800e6f2:	f7f2 fa11 	bl	8000b18 <__aeabi_dcmpgt>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	f43f af7b 	beq.w	800e5f2 <_strtod_l+0xa1a>
 800e6fc:	e4c2      	b.n	800e084 <_strtod_l+0x4ac>
 800e6fe:	9b04      	ldr	r3, [sp, #16]
 800e700:	b333      	cbz	r3, 800e750 <_strtod_l+0xb78>
 800e702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e704:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e708:	d822      	bhi.n	800e750 <_strtod_l+0xb78>
 800e70a:	a32d      	add	r3, pc, #180	; (adr r3, 800e7c0 <_strtod_l+0xbe8>)
 800e70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e710:	4640      	mov	r0, r8
 800e712:	4649      	mov	r1, r9
 800e714:	f7f2 f9ec 	bl	8000af0 <__aeabi_dcmple>
 800e718:	b1a0      	cbz	r0, 800e744 <_strtod_l+0xb6c>
 800e71a:	4649      	mov	r1, r9
 800e71c:	4640      	mov	r0, r8
 800e71e:	f7f2 fa43 	bl	8000ba8 <__aeabi_d2uiz>
 800e722:	2801      	cmp	r0, #1
 800e724:	bf38      	it	cc
 800e726:	2001      	movcc	r0, #1
 800e728:	f7f1 feec 	bl	8000504 <__aeabi_ui2d>
 800e72c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e72e:	4680      	mov	r8, r0
 800e730:	4689      	mov	r9, r1
 800e732:	bb13      	cbnz	r3, 800e77a <_strtod_l+0xba2>
 800e734:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e738:	9014      	str	r0, [sp, #80]	; 0x50
 800e73a:	9315      	str	r3, [sp, #84]	; 0x54
 800e73c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e740:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e746:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e748:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e74c:	1a9b      	subs	r3, r3, r2
 800e74e:	930d      	str	r3, [sp, #52]	; 0x34
 800e750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e754:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e758:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e75c:	f001 ff46 	bl	80105ec <__ulp>
 800e760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e764:	ec53 2b10 	vmov	r2, r3, d0
 800e768:	f7f1 ff46 	bl	80005f8 <__aeabi_dmul>
 800e76c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e770:	f7f1 fd8c 	bl	800028c <__adddf3>
 800e774:	4682      	mov	sl, r0
 800e776:	468b      	mov	fp, r1
 800e778:	e78f      	b.n	800e69a <_strtod_l+0xac2>
 800e77a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e77e:	e7dd      	b.n	800e73c <_strtod_l+0xb64>
 800e780:	a311      	add	r3, pc, #68	; (adr r3, 800e7c8 <_strtod_l+0xbf0>)
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	f7f2 f9a9 	bl	8000adc <__aeabi_dcmplt>
 800e78a:	e7b4      	b.n	800e6f6 <_strtod_l+0xb1e>
 800e78c:	2300      	movs	r3, #0
 800e78e:	930e      	str	r3, [sp, #56]	; 0x38
 800e790:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e794:	6013      	str	r3, [r2, #0]
 800e796:	f7ff ba65 	b.w	800dc64 <_strtod_l+0x8c>
 800e79a:	2b65      	cmp	r3, #101	; 0x65
 800e79c:	f43f ab5d 	beq.w	800de5a <_strtod_l+0x282>
 800e7a0:	2b45      	cmp	r3, #69	; 0x45
 800e7a2:	f43f ab5a 	beq.w	800de5a <_strtod_l+0x282>
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	f7ff bb92 	b.w	800ded0 <_strtod_l+0x2f8>
 800e7ac:	f3af 8000 	nop.w
 800e7b0:	94a03595 	.word	0x94a03595
 800e7b4:	3fdfffff 	.word	0x3fdfffff
 800e7b8:	35afe535 	.word	0x35afe535
 800e7bc:	3fe00000 	.word	0x3fe00000
 800e7c0:	ffc00000 	.word	0xffc00000
 800e7c4:	41dfffff 	.word	0x41dfffff
 800e7c8:	94a03595 	.word	0x94a03595
 800e7cc:	3fcfffff 	.word	0x3fcfffff
 800e7d0:	3ff00000 	.word	0x3ff00000
 800e7d4:	7ff00000 	.word	0x7ff00000
 800e7d8:	7fe00000 	.word	0x7fe00000
 800e7dc:	7c9fffff 	.word	0x7c9fffff
 800e7e0:	3fe00000 	.word	0x3fe00000
 800e7e4:	bff00000 	.word	0xbff00000
 800e7e8:	7fefffff 	.word	0x7fefffff

0800e7ec <_strtod_r>:
 800e7ec:	4b01      	ldr	r3, [pc, #4]	; (800e7f4 <_strtod_r+0x8>)
 800e7ee:	f7ff b9f3 	b.w	800dbd8 <_strtod_l>
 800e7f2:	bf00      	nop
 800e7f4:	200000a8 	.word	0x200000a8

0800e7f8 <_strtol_l.isra.0>:
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7fe:	d001      	beq.n	800e804 <_strtol_l.isra.0+0xc>
 800e800:	2b24      	cmp	r3, #36	; 0x24
 800e802:	d906      	bls.n	800e812 <_strtol_l.isra.0+0x1a>
 800e804:	f7fe f8da 	bl	800c9bc <__errno>
 800e808:	2316      	movs	r3, #22
 800e80a:	6003      	str	r3, [r0, #0]
 800e80c:	2000      	movs	r0, #0
 800e80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e812:	4f3a      	ldr	r7, [pc, #232]	; (800e8fc <_strtol_l.isra.0+0x104>)
 800e814:	468e      	mov	lr, r1
 800e816:	4676      	mov	r6, lr
 800e818:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e81c:	5de5      	ldrb	r5, [r4, r7]
 800e81e:	f015 0508 	ands.w	r5, r5, #8
 800e822:	d1f8      	bne.n	800e816 <_strtol_l.isra.0+0x1e>
 800e824:	2c2d      	cmp	r4, #45	; 0x2d
 800e826:	d134      	bne.n	800e892 <_strtol_l.isra.0+0x9a>
 800e828:	f89e 4000 	ldrb.w	r4, [lr]
 800e82c:	f04f 0801 	mov.w	r8, #1
 800e830:	f106 0e02 	add.w	lr, r6, #2
 800e834:	2b00      	cmp	r3, #0
 800e836:	d05c      	beq.n	800e8f2 <_strtol_l.isra.0+0xfa>
 800e838:	2b10      	cmp	r3, #16
 800e83a:	d10c      	bne.n	800e856 <_strtol_l.isra.0+0x5e>
 800e83c:	2c30      	cmp	r4, #48	; 0x30
 800e83e:	d10a      	bne.n	800e856 <_strtol_l.isra.0+0x5e>
 800e840:	f89e 4000 	ldrb.w	r4, [lr]
 800e844:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e848:	2c58      	cmp	r4, #88	; 0x58
 800e84a:	d14d      	bne.n	800e8e8 <_strtol_l.isra.0+0xf0>
 800e84c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e850:	2310      	movs	r3, #16
 800e852:	f10e 0e02 	add.w	lr, lr, #2
 800e856:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e85a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e85e:	2600      	movs	r6, #0
 800e860:	fbbc f9f3 	udiv	r9, ip, r3
 800e864:	4635      	mov	r5, r6
 800e866:	fb03 ca19 	mls	sl, r3, r9, ip
 800e86a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e86e:	2f09      	cmp	r7, #9
 800e870:	d818      	bhi.n	800e8a4 <_strtol_l.isra.0+0xac>
 800e872:	463c      	mov	r4, r7
 800e874:	42a3      	cmp	r3, r4
 800e876:	dd24      	ble.n	800e8c2 <_strtol_l.isra.0+0xca>
 800e878:	2e00      	cmp	r6, #0
 800e87a:	db1f      	blt.n	800e8bc <_strtol_l.isra.0+0xc4>
 800e87c:	45a9      	cmp	r9, r5
 800e87e:	d31d      	bcc.n	800e8bc <_strtol_l.isra.0+0xc4>
 800e880:	d101      	bne.n	800e886 <_strtol_l.isra.0+0x8e>
 800e882:	45a2      	cmp	sl, r4
 800e884:	db1a      	blt.n	800e8bc <_strtol_l.isra.0+0xc4>
 800e886:	fb05 4503 	mla	r5, r5, r3, r4
 800e88a:	2601      	movs	r6, #1
 800e88c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e890:	e7eb      	b.n	800e86a <_strtol_l.isra.0+0x72>
 800e892:	2c2b      	cmp	r4, #43	; 0x2b
 800e894:	bf08      	it	eq
 800e896:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e89a:	46a8      	mov	r8, r5
 800e89c:	bf08      	it	eq
 800e89e:	f106 0e02 	addeq.w	lr, r6, #2
 800e8a2:	e7c7      	b.n	800e834 <_strtol_l.isra.0+0x3c>
 800e8a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e8a8:	2f19      	cmp	r7, #25
 800e8aa:	d801      	bhi.n	800e8b0 <_strtol_l.isra.0+0xb8>
 800e8ac:	3c37      	subs	r4, #55	; 0x37
 800e8ae:	e7e1      	b.n	800e874 <_strtol_l.isra.0+0x7c>
 800e8b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e8b4:	2f19      	cmp	r7, #25
 800e8b6:	d804      	bhi.n	800e8c2 <_strtol_l.isra.0+0xca>
 800e8b8:	3c57      	subs	r4, #87	; 0x57
 800e8ba:	e7db      	b.n	800e874 <_strtol_l.isra.0+0x7c>
 800e8bc:	f04f 36ff 	mov.w	r6, #4294967295
 800e8c0:	e7e4      	b.n	800e88c <_strtol_l.isra.0+0x94>
 800e8c2:	2e00      	cmp	r6, #0
 800e8c4:	da05      	bge.n	800e8d2 <_strtol_l.isra.0+0xda>
 800e8c6:	2322      	movs	r3, #34	; 0x22
 800e8c8:	6003      	str	r3, [r0, #0]
 800e8ca:	4665      	mov	r5, ip
 800e8cc:	b942      	cbnz	r2, 800e8e0 <_strtol_l.isra.0+0xe8>
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	e79d      	b.n	800e80e <_strtol_l.isra.0+0x16>
 800e8d2:	f1b8 0f00 	cmp.w	r8, #0
 800e8d6:	d000      	beq.n	800e8da <_strtol_l.isra.0+0xe2>
 800e8d8:	426d      	negs	r5, r5
 800e8da:	2a00      	cmp	r2, #0
 800e8dc:	d0f7      	beq.n	800e8ce <_strtol_l.isra.0+0xd6>
 800e8de:	b10e      	cbz	r6, 800e8e4 <_strtol_l.isra.0+0xec>
 800e8e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e8e4:	6011      	str	r1, [r2, #0]
 800e8e6:	e7f2      	b.n	800e8ce <_strtol_l.isra.0+0xd6>
 800e8e8:	2430      	movs	r4, #48	; 0x30
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d1b3      	bne.n	800e856 <_strtol_l.isra.0+0x5e>
 800e8ee:	2308      	movs	r3, #8
 800e8f0:	e7b1      	b.n	800e856 <_strtol_l.isra.0+0x5e>
 800e8f2:	2c30      	cmp	r4, #48	; 0x30
 800e8f4:	d0a4      	beq.n	800e840 <_strtol_l.isra.0+0x48>
 800e8f6:	230a      	movs	r3, #10
 800e8f8:	e7ad      	b.n	800e856 <_strtol_l.isra.0+0x5e>
 800e8fa:	bf00      	nop
 800e8fc:	08012ae1 	.word	0x08012ae1

0800e900 <_strtol_r>:
 800e900:	f7ff bf7a 	b.w	800e7f8 <_strtol_l.isra.0>

0800e904 <_write_r>:
 800e904:	b538      	push	{r3, r4, r5, lr}
 800e906:	4d07      	ldr	r5, [pc, #28]	; (800e924 <_write_r+0x20>)
 800e908:	4604      	mov	r4, r0
 800e90a:	4608      	mov	r0, r1
 800e90c:	4611      	mov	r1, r2
 800e90e:	2200      	movs	r2, #0
 800e910:	602a      	str	r2, [r5, #0]
 800e912:	461a      	mov	r2, r3
 800e914:	f7f5 f959 	bl	8003bca <_write>
 800e918:	1c43      	adds	r3, r0, #1
 800e91a:	d102      	bne.n	800e922 <_write_r+0x1e>
 800e91c:	682b      	ldr	r3, [r5, #0]
 800e91e:	b103      	cbz	r3, 800e922 <_write_r+0x1e>
 800e920:	6023      	str	r3, [r4, #0]
 800e922:	bd38      	pop	{r3, r4, r5, pc}
 800e924:	200062d4 	.word	0x200062d4

0800e928 <_close_r>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	4d06      	ldr	r5, [pc, #24]	; (800e944 <_close_r+0x1c>)
 800e92c:	2300      	movs	r3, #0
 800e92e:	4604      	mov	r4, r0
 800e930:	4608      	mov	r0, r1
 800e932:	602b      	str	r3, [r5, #0]
 800e934:	f7f5 f965 	bl	8003c02 <_close>
 800e938:	1c43      	adds	r3, r0, #1
 800e93a:	d102      	bne.n	800e942 <_close_r+0x1a>
 800e93c:	682b      	ldr	r3, [r5, #0]
 800e93e:	b103      	cbz	r3, 800e942 <_close_r+0x1a>
 800e940:	6023      	str	r3, [r4, #0]
 800e942:	bd38      	pop	{r3, r4, r5, pc}
 800e944:	200062d4 	.word	0x200062d4

0800e948 <quorem>:
 800e948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94c:	6903      	ldr	r3, [r0, #16]
 800e94e:	690c      	ldr	r4, [r1, #16]
 800e950:	42a3      	cmp	r3, r4
 800e952:	4607      	mov	r7, r0
 800e954:	f2c0 8081 	blt.w	800ea5a <quorem+0x112>
 800e958:	3c01      	subs	r4, #1
 800e95a:	f101 0814 	add.w	r8, r1, #20
 800e95e:	f100 0514 	add.w	r5, r0, #20
 800e962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e966:	9301      	str	r3, [sp, #4]
 800e968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e96c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e970:	3301      	adds	r3, #1
 800e972:	429a      	cmp	r2, r3
 800e974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e97c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e980:	d331      	bcc.n	800e9e6 <quorem+0x9e>
 800e982:	f04f 0e00 	mov.w	lr, #0
 800e986:	4640      	mov	r0, r8
 800e988:	46ac      	mov	ip, r5
 800e98a:	46f2      	mov	sl, lr
 800e98c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e990:	b293      	uxth	r3, r2
 800e992:	fb06 e303 	mla	r3, r6, r3, lr
 800e996:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	ebaa 0303 	sub.w	r3, sl, r3
 800e9a0:	0c12      	lsrs	r2, r2, #16
 800e9a2:	f8dc a000 	ldr.w	sl, [ip]
 800e9a6:	fb06 e202 	mla	r2, r6, r2, lr
 800e9aa:	fa13 f38a 	uxtah	r3, r3, sl
 800e9ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e9b2:	fa1f fa82 	uxth.w	sl, r2
 800e9b6:	f8dc 2000 	ldr.w	r2, [ip]
 800e9ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e9be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9c8:	4581      	cmp	r9, r0
 800e9ca:	f84c 3b04 	str.w	r3, [ip], #4
 800e9ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e9d2:	d2db      	bcs.n	800e98c <quorem+0x44>
 800e9d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e9d8:	b92b      	cbnz	r3, 800e9e6 <quorem+0x9e>
 800e9da:	9b01      	ldr	r3, [sp, #4]
 800e9dc:	3b04      	subs	r3, #4
 800e9de:	429d      	cmp	r5, r3
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	d32e      	bcc.n	800ea42 <quorem+0xfa>
 800e9e4:	613c      	str	r4, [r7, #16]
 800e9e6:	4638      	mov	r0, r7
 800e9e8:	f001 fd5c 	bl	80104a4 <__mcmp>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	db24      	blt.n	800ea3a <quorem+0xf2>
 800e9f0:	3601      	adds	r6, #1
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	f04f 0c00 	mov.w	ip, #0
 800e9f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9fc:	f8d0 e000 	ldr.w	lr, [r0]
 800ea00:	b293      	uxth	r3, r2
 800ea02:	ebac 0303 	sub.w	r3, ip, r3
 800ea06:	0c12      	lsrs	r2, r2, #16
 800ea08:	fa13 f38e 	uxtah	r3, r3, lr
 800ea0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ea10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea1a:	45c1      	cmp	r9, r8
 800ea1c:	f840 3b04 	str.w	r3, [r0], #4
 800ea20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ea24:	d2e8      	bcs.n	800e9f8 <quorem+0xb0>
 800ea26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea2e:	b922      	cbnz	r2, 800ea3a <quorem+0xf2>
 800ea30:	3b04      	subs	r3, #4
 800ea32:	429d      	cmp	r5, r3
 800ea34:	461a      	mov	r2, r3
 800ea36:	d30a      	bcc.n	800ea4e <quorem+0x106>
 800ea38:	613c      	str	r4, [r7, #16]
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	b003      	add	sp, #12
 800ea3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea42:	6812      	ldr	r2, [r2, #0]
 800ea44:	3b04      	subs	r3, #4
 800ea46:	2a00      	cmp	r2, #0
 800ea48:	d1cc      	bne.n	800e9e4 <quorem+0x9c>
 800ea4a:	3c01      	subs	r4, #1
 800ea4c:	e7c7      	b.n	800e9de <quorem+0x96>
 800ea4e:	6812      	ldr	r2, [r2, #0]
 800ea50:	3b04      	subs	r3, #4
 800ea52:	2a00      	cmp	r2, #0
 800ea54:	d1f0      	bne.n	800ea38 <quorem+0xf0>
 800ea56:	3c01      	subs	r4, #1
 800ea58:	e7eb      	b.n	800ea32 <quorem+0xea>
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	e7ee      	b.n	800ea3c <quorem+0xf4>
	...

0800ea60 <_dtoa_r>:
 800ea60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea64:	ed2d 8b02 	vpush	{d8}
 800ea68:	ec57 6b10 	vmov	r6, r7, d0
 800ea6c:	b095      	sub	sp, #84	; 0x54
 800ea6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ea70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ea74:	9105      	str	r1, [sp, #20]
 800ea76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ea7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea80:	b975      	cbnz	r5, 800eaa0 <_dtoa_r+0x40>
 800ea82:	2010      	movs	r0, #16
 800ea84:	f001 fa20 	bl	800fec8 <malloc>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	6260      	str	r0, [r4, #36]	; 0x24
 800ea8c:	b920      	cbnz	r0, 800ea98 <_dtoa_r+0x38>
 800ea8e:	4bb2      	ldr	r3, [pc, #712]	; (800ed58 <_dtoa_r+0x2f8>)
 800ea90:	21ea      	movs	r1, #234	; 0xea
 800ea92:	48b2      	ldr	r0, [pc, #712]	; (800ed5c <_dtoa_r+0x2fc>)
 800ea94:	f002 f8f0 	bl	8010c78 <__assert_func>
 800ea98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ea9c:	6005      	str	r5, [r0, #0]
 800ea9e:	60c5      	str	r5, [r0, #12]
 800eaa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaa2:	6819      	ldr	r1, [r3, #0]
 800eaa4:	b151      	cbz	r1, 800eabc <_dtoa_r+0x5c>
 800eaa6:	685a      	ldr	r2, [r3, #4]
 800eaa8:	604a      	str	r2, [r1, #4]
 800eaaa:	2301      	movs	r3, #1
 800eaac:	4093      	lsls	r3, r2
 800eaae:	608b      	str	r3, [r1, #8]
 800eab0:	4620      	mov	r0, r4
 800eab2:	f001 fa6f 	bl	800ff94 <_Bfree>
 800eab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eab8:	2200      	movs	r2, #0
 800eaba:	601a      	str	r2, [r3, #0]
 800eabc:	1e3b      	subs	r3, r7, #0
 800eabe:	bfb9      	ittee	lt
 800eac0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eac4:	9303      	strlt	r3, [sp, #12]
 800eac6:	2300      	movge	r3, #0
 800eac8:	f8c8 3000 	strge.w	r3, [r8]
 800eacc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ead0:	4ba3      	ldr	r3, [pc, #652]	; (800ed60 <_dtoa_r+0x300>)
 800ead2:	bfbc      	itt	lt
 800ead4:	2201      	movlt	r2, #1
 800ead6:	f8c8 2000 	strlt.w	r2, [r8]
 800eada:	ea33 0309 	bics.w	r3, r3, r9
 800eade:	d11b      	bne.n	800eb18 <_dtoa_r+0xb8>
 800eae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eae2:	f242 730f 	movw	r3, #9999	; 0x270f
 800eae6:	6013      	str	r3, [r2, #0]
 800eae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eaec:	4333      	orrs	r3, r6
 800eaee:	f000 857a 	beq.w	800f5e6 <_dtoa_r+0xb86>
 800eaf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eaf4:	b963      	cbnz	r3, 800eb10 <_dtoa_r+0xb0>
 800eaf6:	4b9b      	ldr	r3, [pc, #620]	; (800ed64 <_dtoa_r+0x304>)
 800eaf8:	e024      	b.n	800eb44 <_dtoa_r+0xe4>
 800eafa:	4b9b      	ldr	r3, [pc, #620]	; (800ed68 <_dtoa_r+0x308>)
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	3308      	adds	r3, #8
 800eb00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eb02:	6013      	str	r3, [r2, #0]
 800eb04:	9800      	ldr	r0, [sp, #0]
 800eb06:	b015      	add	sp, #84	; 0x54
 800eb08:	ecbd 8b02 	vpop	{d8}
 800eb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb10:	4b94      	ldr	r3, [pc, #592]	; (800ed64 <_dtoa_r+0x304>)
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	3303      	adds	r3, #3
 800eb16:	e7f3      	b.n	800eb00 <_dtoa_r+0xa0>
 800eb18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	ec51 0b17 	vmov	r0, r1, d7
 800eb22:	2300      	movs	r3, #0
 800eb24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800eb28:	f7f1 ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb2c:	4680      	mov	r8, r0
 800eb2e:	b158      	cbz	r0, 800eb48 <_dtoa_r+0xe8>
 800eb30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eb32:	2301      	movs	r3, #1
 800eb34:	6013      	str	r3, [r2, #0]
 800eb36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	f000 8551 	beq.w	800f5e0 <_dtoa_r+0xb80>
 800eb3e:	488b      	ldr	r0, [pc, #556]	; (800ed6c <_dtoa_r+0x30c>)
 800eb40:	6018      	str	r0, [r3, #0]
 800eb42:	1e43      	subs	r3, r0, #1
 800eb44:	9300      	str	r3, [sp, #0]
 800eb46:	e7dd      	b.n	800eb04 <_dtoa_r+0xa4>
 800eb48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800eb4c:	aa12      	add	r2, sp, #72	; 0x48
 800eb4e:	a913      	add	r1, sp, #76	; 0x4c
 800eb50:	4620      	mov	r0, r4
 800eb52:	f001 fdc7 	bl	80106e4 <__d2b>
 800eb56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb5a:	4683      	mov	fp, r0
 800eb5c:	2d00      	cmp	r5, #0
 800eb5e:	d07c      	beq.n	800ec5a <_dtoa_r+0x1fa>
 800eb60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800eb66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800eb6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800eb72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800eb76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eb7a:	4b7d      	ldr	r3, [pc, #500]	; (800ed70 <_dtoa_r+0x310>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	4630      	mov	r0, r6
 800eb80:	4639      	mov	r1, r7
 800eb82:	f7f1 fb81 	bl	8000288 <__aeabi_dsub>
 800eb86:	a36e      	add	r3, pc, #440	; (adr r3, 800ed40 <_dtoa_r+0x2e0>)
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	f7f1 fd34 	bl	80005f8 <__aeabi_dmul>
 800eb90:	a36d      	add	r3, pc, #436	; (adr r3, 800ed48 <_dtoa_r+0x2e8>)
 800eb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb96:	f7f1 fb79 	bl	800028c <__adddf3>
 800eb9a:	4606      	mov	r6, r0
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	460f      	mov	r7, r1
 800eba0:	f7f1 fcc0 	bl	8000524 <__aeabi_i2d>
 800eba4:	a36a      	add	r3, pc, #424	; (adr r3, 800ed50 <_dtoa_r+0x2f0>)
 800eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebaa:	f7f1 fd25 	bl	80005f8 <__aeabi_dmul>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	4639      	mov	r1, r7
 800ebb6:	f7f1 fb69 	bl	800028c <__adddf3>
 800ebba:	4606      	mov	r6, r0
 800ebbc:	460f      	mov	r7, r1
 800ebbe:	f7f1 ffcb 	bl	8000b58 <__aeabi_d2iz>
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	4682      	mov	sl, r0
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	4630      	mov	r0, r6
 800ebca:	4639      	mov	r1, r7
 800ebcc:	f7f1 ff86 	bl	8000adc <__aeabi_dcmplt>
 800ebd0:	b148      	cbz	r0, 800ebe6 <_dtoa_r+0x186>
 800ebd2:	4650      	mov	r0, sl
 800ebd4:	f7f1 fca6 	bl	8000524 <__aeabi_i2d>
 800ebd8:	4632      	mov	r2, r6
 800ebda:	463b      	mov	r3, r7
 800ebdc:	f7f1 ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebe0:	b908      	cbnz	r0, 800ebe6 <_dtoa_r+0x186>
 800ebe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebe6:	f1ba 0f16 	cmp.w	sl, #22
 800ebea:	d854      	bhi.n	800ec96 <_dtoa_r+0x236>
 800ebec:	4b61      	ldr	r3, [pc, #388]	; (800ed74 <_dtoa_r+0x314>)
 800ebee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ebf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ebfa:	f7f1 ff6f 	bl	8000adc <__aeabi_dcmplt>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d04b      	beq.n	800ec9a <_dtoa_r+0x23a>
 800ec02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec06:	2300      	movs	r3, #0
 800ec08:	930e      	str	r3, [sp, #56]	; 0x38
 800ec0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec0c:	1b5d      	subs	r5, r3, r5
 800ec0e:	1e6b      	subs	r3, r5, #1
 800ec10:	9304      	str	r3, [sp, #16]
 800ec12:	bf43      	ittte	mi
 800ec14:	2300      	movmi	r3, #0
 800ec16:	f1c5 0801 	rsbmi	r8, r5, #1
 800ec1a:	9304      	strmi	r3, [sp, #16]
 800ec1c:	f04f 0800 	movpl.w	r8, #0
 800ec20:	f1ba 0f00 	cmp.w	sl, #0
 800ec24:	db3b      	blt.n	800ec9e <_dtoa_r+0x23e>
 800ec26:	9b04      	ldr	r3, [sp, #16]
 800ec28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ec2c:	4453      	add	r3, sl
 800ec2e:	9304      	str	r3, [sp, #16]
 800ec30:	2300      	movs	r3, #0
 800ec32:	9306      	str	r3, [sp, #24]
 800ec34:	9b05      	ldr	r3, [sp, #20]
 800ec36:	2b09      	cmp	r3, #9
 800ec38:	d869      	bhi.n	800ed0e <_dtoa_r+0x2ae>
 800ec3a:	2b05      	cmp	r3, #5
 800ec3c:	bfc4      	itt	gt
 800ec3e:	3b04      	subgt	r3, #4
 800ec40:	9305      	strgt	r3, [sp, #20]
 800ec42:	9b05      	ldr	r3, [sp, #20]
 800ec44:	f1a3 0302 	sub.w	r3, r3, #2
 800ec48:	bfcc      	ite	gt
 800ec4a:	2500      	movgt	r5, #0
 800ec4c:	2501      	movle	r5, #1
 800ec4e:	2b03      	cmp	r3, #3
 800ec50:	d869      	bhi.n	800ed26 <_dtoa_r+0x2c6>
 800ec52:	e8df f003 	tbb	[pc, r3]
 800ec56:	4e2c      	.short	0x4e2c
 800ec58:	5a4c      	.short	0x5a4c
 800ec5a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ec5e:	441d      	add	r5, r3
 800ec60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ec64:	2b20      	cmp	r3, #32
 800ec66:	bfc1      	itttt	gt
 800ec68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec6c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ec70:	fa09 f303 	lslgt.w	r3, r9, r3
 800ec74:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ec78:	bfda      	itte	le
 800ec7a:	f1c3 0320 	rsble	r3, r3, #32
 800ec7e:	fa06 f003 	lslle.w	r0, r6, r3
 800ec82:	4318      	orrgt	r0, r3
 800ec84:	f7f1 fc3e 	bl	8000504 <__aeabi_ui2d>
 800ec88:	2301      	movs	r3, #1
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ec90:	3d01      	subs	r5, #1
 800ec92:	9310      	str	r3, [sp, #64]	; 0x40
 800ec94:	e771      	b.n	800eb7a <_dtoa_r+0x11a>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e7b6      	b.n	800ec08 <_dtoa_r+0x1a8>
 800ec9a:	900e      	str	r0, [sp, #56]	; 0x38
 800ec9c:	e7b5      	b.n	800ec0a <_dtoa_r+0x1aa>
 800ec9e:	f1ca 0300 	rsb	r3, sl, #0
 800eca2:	9306      	str	r3, [sp, #24]
 800eca4:	2300      	movs	r3, #0
 800eca6:	eba8 080a 	sub.w	r8, r8, sl
 800ecaa:	930d      	str	r3, [sp, #52]	; 0x34
 800ecac:	e7c2      	b.n	800ec34 <_dtoa_r+0x1d4>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	9308      	str	r3, [sp, #32]
 800ecb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	dc39      	bgt.n	800ed2c <_dtoa_r+0x2cc>
 800ecb8:	f04f 0901 	mov.w	r9, #1
 800ecbc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ecc0:	464b      	mov	r3, r9
 800ecc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ecc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ecc8:	2200      	movs	r2, #0
 800ecca:	6042      	str	r2, [r0, #4]
 800eccc:	2204      	movs	r2, #4
 800ecce:	f102 0614 	add.w	r6, r2, #20
 800ecd2:	429e      	cmp	r6, r3
 800ecd4:	6841      	ldr	r1, [r0, #4]
 800ecd6:	d92f      	bls.n	800ed38 <_dtoa_r+0x2d8>
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f001 f91b 	bl	800ff14 <_Balloc>
 800ecde:	9000      	str	r0, [sp, #0]
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d14b      	bne.n	800ed7c <_dtoa_r+0x31c>
 800ece4:	4b24      	ldr	r3, [pc, #144]	; (800ed78 <_dtoa_r+0x318>)
 800ece6:	4602      	mov	r2, r0
 800ece8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ecec:	e6d1      	b.n	800ea92 <_dtoa_r+0x32>
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e7de      	b.n	800ecb0 <_dtoa_r+0x250>
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	9308      	str	r3, [sp, #32]
 800ecf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecf8:	eb0a 0903 	add.w	r9, sl, r3
 800ecfc:	f109 0301 	add.w	r3, r9, #1
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	9301      	str	r3, [sp, #4]
 800ed04:	bfb8      	it	lt
 800ed06:	2301      	movlt	r3, #1
 800ed08:	e7dd      	b.n	800ecc6 <_dtoa_r+0x266>
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	e7f2      	b.n	800ecf4 <_dtoa_r+0x294>
 800ed0e:	2501      	movs	r5, #1
 800ed10:	2300      	movs	r3, #0
 800ed12:	9305      	str	r3, [sp, #20]
 800ed14:	9508      	str	r5, [sp, #32]
 800ed16:	f04f 39ff 	mov.w	r9, #4294967295
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ed20:	2312      	movs	r3, #18
 800ed22:	9209      	str	r2, [sp, #36]	; 0x24
 800ed24:	e7cf      	b.n	800ecc6 <_dtoa_r+0x266>
 800ed26:	2301      	movs	r3, #1
 800ed28:	9308      	str	r3, [sp, #32]
 800ed2a:	e7f4      	b.n	800ed16 <_dtoa_r+0x2b6>
 800ed2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ed30:	f8cd 9004 	str.w	r9, [sp, #4]
 800ed34:	464b      	mov	r3, r9
 800ed36:	e7c6      	b.n	800ecc6 <_dtoa_r+0x266>
 800ed38:	3101      	adds	r1, #1
 800ed3a:	6041      	str	r1, [r0, #4]
 800ed3c:	0052      	lsls	r2, r2, #1
 800ed3e:	e7c6      	b.n	800ecce <_dtoa_r+0x26e>
 800ed40:	636f4361 	.word	0x636f4361
 800ed44:	3fd287a7 	.word	0x3fd287a7
 800ed48:	8b60c8b3 	.word	0x8b60c8b3
 800ed4c:	3fc68a28 	.word	0x3fc68a28
 800ed50:	509f79fb 	.word	0x509f79fb
 800ed54:	3fd34413 	.word	0x3fd34413
 800ed58:	08012bee 	.word	0x08012bee
 800ed5c:	08012c05 	.word	0x08012c05
 800ed60:	7ff00000 	.word	0x7ff00000
 800ed64:	08012bea 	.word	0x08012bea
 800ed68:	08012be1 	.word	0x08012be1
 800ed6c:	08012a65 	.word	0x08012a65
 800ed70:	3ff80000 	.word	0x3ff80000
 800ed74:	08012d80 	.word	0x08012d80
 800ed78:	08012c64 	.word	0x08012c64
 800ed7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed7e:	9a00      	ldr	r2, [sp, #0]
 800ed80:	601a      	str	r2, [r3, #0]
 800ed82:	9b01      	ldr	r3, [sp, #4]
 800ed84:	2b0e      	cmp	r3, #14
 800ed86:	f200 80ad 	bhi.w	800eee4 <_dtoa_r+0x484>
 800ed8a:	2d00      	cmp	r5, #0
 800ed8c:	f000 80aa 	beq.w	800eee4 <_dtoa_r+0x484>
 800ed90:	f1ba 0f00 	cmp.w	sl, #0
 800ed94:	dd36      	ble.n	800ee04 <_dtoa_r+0x3a4>
 800ed96:	4ac3      	ldr	r2, [pc, #780]	; (800f0a4 <_dtoa_r+0x644>)
 800ed98:	f00a 030f 	and.w	r3, sl, #15
 800ed9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eda0:	ed93 7b00 	vldr	d7, [r3]
 800eda4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800eda8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800edac:	eeb0 8a47 	vmov.f32	s16, s14
 800edb0:	eef0 8a67 	vmov.f32	s17, s15
 800edb4:	d016      	beq.n	800ede4 <_dtoa_r+0x384>
 800edb6:	4bbc      	ldr	r3, [pc, #752]	; (800f0a8 <_dtoa_r+0x648>)
 800edb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800edbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800edc0:	f7f1 fd44 	bl	800084c <__aeabi_ddiv>
 800edc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edc8:	f007 070f 	and.w	r7, r7, #15
 800edcc:	2503      	movs	r5, #3
 800edce:	4eb6      	ldr	r6, [pc, #728]	; (800f0a8 <_dtoa_r+0x648>)
 800edd0:	b957      	cbnz	r7, 800ede8 <_dtoa_r+0x388>
 800edd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edd6:	ec53 2b18 	vmov	r2, r3, d8
 800edda:	f7f1 fd37 	bl	800084c <__aeabi_ddiv>
 800edde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ede2:	e029      	b.n	800ee38 <_dtoa_r+0x3d8>
 800ede4:	2502      	movs	r5, #2
 800ede6:	e7f2      	b.n	800edce <_dtoa_r+0x36e>
 800ede8:	07f9      	lsls	r1, r7, #31
 800edea:	d508      	bpl.n	800edfe <_dtoa_r+0x39e>
 800edec:	ec51 0b18 	vmov	r0, r1, d8
 800edf0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800edf4:	f7f1 fc00 	bl	80005f8 <__aeabi_dmul>
 800edf8:	ec41 0b18 	vmov	d8, r0, r1
 800edfc:	3501      	adds	r5, #1
 800edfe:	107f      	asrs	r7, r7, #1
 800ee00:	3608      	adds	r6, #8
 800ee02:	e7e5      	b.n	800edd0 <_dtoa_r+0x370>
 800ee04:	f000 80a6 	beq.w	800ef54 <_dtoa_r+0x4f4>
 800ee08:	f1ca 0600 	rsb	r6, sl, #0
 800ee0c:	4ba5      	ldr	r3, [pc, #660]	; (800f0a4 <_dtoa_r+0x644>)
 800ee0e:	4fa6      	ldr	r7, [pc, #664]	; (800f0a8 <_dtoa_r+0x648>)
 800ee10:	f006 020f 	and.w	r2, r6, #15
 800ee14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee20:	f7f1 fbea 	bl	80005f8 <__aeabi_dmul>
 800ee24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee28:	1136      	asrs	r6, r6, #4
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	2502      	movs	r5, #2
 800ee2e:	2e00      	cmp	r6, #0
 800ee30:	f040 8085 	bne.w	800ef3e <_dtoa_r+0x4de>
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d1d2      	bne.n	800edde <_dtoa_r+0x37e>
 800ee38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f000 808c 	beq.w	800ef58 <_dtoa_r+0x4f8>
 800ee40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ee44:	4b99      	ldr	r3, [pc, #612]	; (800f0ac <_dtoa_r+0x64c>)
 800ee46:	2200      	movs	r2, #0
 800ee48:	4630      	mov	r0, r6
 800ee4a:	4639      	mov	r1, r7
 800ee4c:	f7f1 fe46 	bl	8000adc <__aeabi_dcmplt>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	f000 8081 	beq.w	800ef58 <_dtoa_r+0x4f8>
 800ee56:	9b01      	ldr	r3, [sp, #4]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d07d      	beq.n	800ef58 <_dtoa_r+0x4f8>
 800ee5c:	f1b9 0f00 	cmp.w	r9, #0
 800ee60:	dd3c      	ble.n	800eedc <_dtoa_r+0x47c>
 800ee62:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ee66:	9307      	str	r3, [sp, #28]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	4b91      	ldr	r3, [pc, #580]	; (800f0b0 <_dtoa_r+0x650>)
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	4639      	mov	r1, r7
 800ee70:	f7f1 fbc2 	bl	80005f8 <__aeabi_dmul>
 800ee74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee78:	3501      	adds	r5, #1
 800ee7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ee7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ee82:	4628      	mov	r0, r5
 800ee84:	f7f1 fb4e 	bl	8000524 <__aeabi_i2d>
 800ee88:	4632      	mov	r2, r6
 800ee8a:	463b      	mov	r3, r7
 800ee8c:	f7f1 fbb4 	bl	80005f8 <__aeabi_dmul>
 800ee90:	4b88      	ldr	r3, [pc, #544]	; (800f0b4 <_dtoa_r+0x654>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	f7f1 f9fa 	bl	800028c <__adddf3>
 800ee98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ee9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eea0:	9303      	str	r3, [sp, #12]
 800eea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d15c      	bne.n	800ef62 <_dtoa_r+0x502>
 800eea8:	4b83      	ldr	r3, [pc, #524]	; (800f0b8 <_dtoa_r+0x658>)
 800eeaa:	2200      	movs	r2, #0
 800eeac:	4630      	mov	r0, r6
 800eeae:	4639      	mov	r1, r7
 800eeb0:	f7f1 f9ea 	bl	8000288 <__aeabi_dsub>
 800eeb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eeb8:	4606      	mov	r6, r0
 800eeba:	460f      	mov	r7, r1
 800eebc:	f7f1 fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	f040 8296 	bne.w	800f3f2 <_dtoa_r+0x992>
 800eec6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eeca:	4630      	mov	r0, r6
 800eecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eed0:	4639      	mov	r1, r7
 800eed2:	f7f1 fe03 	bl	8000adc <__aeabi_dcmplt>
 800eed6:	2800      	cmp	r0, #0
 800eed8:	f040 8288 	bne.w	800f3ec <_dtoa_r+0x98c>
 800eedc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eee0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f2c0 8158 	blt.w	800f19c <_dtoa_r+0x73c>
 800eeec:	f1ba 0f0e 	cmp.w	sl, #14
 800eef0:	f300 8154 	bgt.w	800f19c <_dtoa_r+0x73c>
 800eef4:	4b6b      	ldr	r3, [pc, #428]	; (800f0a4 <_dtoa_r+0x644>)
 800eef6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eefa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	f280 80e3 	bge.w	800f0cc <_dtoa_r+0x66c>
 800ef06:	9b01      	ldr	r3, [sp, #4]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f300 80df 	bgt.w	800f0cc <_dtoa_r+0x66c>
 800ef0e:	f040 826d 	bne.w	800f3ec <_dtoa_r+0x98c>
 800ef12:	4b69      	ldr	r3, [pc, #420]	; (800f0b8 <_dtoa_r+0x658>)
 800ef14:	2200      	movs	r2, #0
 800ef16:	4640      	mov	r0, r8
 800ef18:	4649      	mov	r1, r9
 800ef1a:	f7f1 fb6d 	bl	80005f8 <__aeabi_dmul>
 800ef1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef22:	f7f1 fdef 	bl	8000b04 <__aeabi_dcmpge>
 800ef26:	9e01      	ldr	r6, [sp, #4]
 800ef28:	4637      	mov	r7, r6
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	f040 8243 	bne.w	800f3b6 <_dtoa_r+0x956>
 800ef30:	9d00      	ldr	r5, [sp, #0]
 800ef32:	2331      	movs	r3, #49	; 0x31
 800ef34:	f805 3b01 	strb.w	r3, [r5], #1
 800ef38:	f10a 0a01 	add.w	sl, sl, #1
 800ef3c:	e23f      	b.n	800f3be <_dtoa_r+0x95e>
 800ef3e:	07f2      	lsls	r2, r6, #31
 800ef40:	d505      	bpl.n	800ef4e <_dtoa_r+0x4ee>
 800ef42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef46:	f7f1 fb57 	bl	80005f8 <__aeabi_dmul>
 800ef4a:	3501      	adds	r5, #1
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	1076      	asrs	r6, r6, #1
 800ef50:	3708      	adds	r7, #8
 800ef52:	e76c      	b.n	800ee2e <_dtoa_r+0x3ce>
 800ef54:	2502      	movs	r5, #2
 800ef56:	e76f      	b.n	800ee38 <_dtoa_r+0x3d8>
 800ef58:	9b01      	ldr	r3, [sp, #4]
 800ef5a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ef5e:	930c      	str	r3, [sp, #48]	; 0x30
 800ef60:	e78d      	b.n	800ee7e <_dtoa_r+0x41e>
 800ef62:	9900      	ldr	r1, [sp, #0]
 800ef64:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ef66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef68:	4b4e      	ldr	r3, [pc, #312]	; (800f0a4 <_dtoa_r+0x644>)
 800ef6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef6e:	4401      	add	r1, r0
 800ef70:	9102      	str	r1, [sp, #8]
 800ef72:	9908      	ldr	r1, [sp, #32]
 800ef74:	eeb0 8a47 	vmov.f32	s16, s14
 800ef78:	eef0 8a67 	vmov.f32	s17, s15
 800ef7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef84:	2900      	cmp	r1, #0
 800ef86:	d045      	beq.n	800f014 <_dtoa_r+0x5b4>
 800ef88:	494c      	ldr	r1, [pc, #304]	; (800f0bc <_dtoa_r+0x65c>)
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	f7f1 fc5e 	bl	800084c <__aeabi_ddiv>
 800ef90:	ec53 2b18 	vmov	r2, r3, d8
 800ef94:	f7f1 f978 	bl	8000288 <__aeabi_dsub>
 800ef98:	9d00      	ldr	r5, [sp, #0]
 800ef9a:	ec41 0b18 	vmov	d8, r0, r1
 800ef9e:	4639      	mov	r1, r7
 800efa0:	4630      	mov	r0, r6
 800efa2:	f7f1 fdd9 	bl	8000b58 <__aeabi_d2iz>
 800efa6:	900c      	str	r0, [sp, #48]	; 0x30
 800efa8:	f7f1 fabc 	bl	8000524 <__aeabi_i2d>
 800efac:	4602      	mov	r2, r0
 800efae:	460b      	mov	r3, r1
 800efb0:	4630      	mov	r0, r6
 800efb2:	4639      	mov	r1, r7
 800efb4:	f7f1 f968 	bl	8000288 <__aeabi_dsub>
 800efb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efba:	3330      	adds	r3, #48	; 0x30
 800efbc:	f805 3b01 	strb.w	r3, [r5], #1
 800efc0:	ec53 2b18 	vmov	r2, r3, d8
 800efc4:	4606      	mov	r6, r0
 800efc6:	460f      	mov	r7, r1
 800efc8:	f7f1 fd88 	bl	8000adc <__aeabi_dcmplt>
 800efcc:	2800      	cmp	r0, #0
 800efce:	d165      	bne.n	800f09c <_dtoa_r+0x63c>
 800efd0:	4632      	mov	r2, r6
 800efd2:	463b      	mov	r3, r7
 800efd4:	4935      	ldr	r1, [pc, #212]	; (800f0ac <_dtoa_r+0x64c>)
 800efd6:	2000      	movs	r0, #0
 800efd8:	f7f1 f956 	bl	8000288 <__aeabi_dsub>
 800efdc:	ec53 2b18 	vmov	r2, r3, d8
 800efe0:	f7f1 fd7c 	bl	8000adc <__aeabi_dcmplt>
 800efe4:	2800      	cmp	r0, #0
 800efe6:	f040 80b9 	bne.w	800f15c <_dtoa_r+0x6fc>
 800efea:	9b02      	ldr	r3, [sp, #8]
 800efec:	429d      	cmp	r5, r3
 800efee:	f43f af75 	beq.w	800eedc <_dtoa_r+0x47c>
 800eff2:	4b2f      	ldr	r3, [pc, #188]	; (800f0b0 <_dtoa_r+0x650>)
 800eff4:	ec51 0b18 	vmov	r0, r1, d8
 800eff8:	2200      	movs	r2, #0
 800effa:	f7f1 fafd 	bl	80005f8 <__aeabi_dmul>
 800effe:	4b2c      	ldr	r3, [pc, #176]	; (800f0b0 <_dtoa_r+0x650>)
 800f000:	ec41 0b18 	vmov	d8, r0, r1
 800f004:	2200      	movs	r2, #0
 800f006:	4630      	mov	r0, r6
 800f008:	4639      	mov	r1, r7
 800f00a:	f7f1 faf5 	bl	80005f8 <__aeabi_dmul>
 800f00e:	4606      	mov	r6, r0
 800f010:	460f      	mov	r7, r1
 800f012:	e7c4      	b.n	800ef9e <_dtoa_r+0x53e>
 800f014:	ec51 0b17 	vmov	r0, r1, d7
 800f018:	f7f1 faee 	bl	80005f8 <__aeabi_dmul>
 800f01c:	9b02      	ldr	r3, [sp, #8]
 800f01e:	9d00      	ldr	r5, [sp, #0]
 800f020:	930c      	str	r3, [sp, #48]	; 0x30
 800f022:	ec41 0b18 	vmov	d8, r0, r1
 800f026:	4639      	mov	r1, r7
 800f028:	4630      	mov	r0, r6
 800f02a:	f7f1 fd95 	bl	8000b58 <__aeabi_d2iz>
 800f02e:	9011      	str	r0, [sp, #68]	; 0x44
 800f030:	f7f1 fa78 	bl	8000524 <__aeabi_i2d>
 800f034:	4602      	mov	r2, r0
 800f036:	460b      	mov	r3, r1
 800f038:	4630      	mov	r0, r6
 800f03a:	4639      	mov	r1, r7
 800f03c:	f7f1 f924 	bl	8000288 <__aeabi_dsub>
 800f040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f042:	3330      	adds	r3, #48	; 0x30
 800f044:	f805 3b01 	strb.w	r3, [r5], #1
 800f048:	9b02      	ldr	r3, [sp, #8]
 800f04a:	429d      	cmp	r5, r3
 800f04c:	4606      	mov	r6, r0
 800f04e:	460f      	mov	r7, r1
 800f050:	f04f 0200 	mov.w	r2, #0
 800f054:	d134      	bne.n	800f0c0 <_dtoa_r+0x660>
 800f056:	4b19      	ldr	r3, [pc, #100]	; (800f0bc <_dtoa_r+0x65c>)
 800f058:	ec51 0b18 	vmov	r0, r1, d8
 800f05c:	f7f1 f916 	bl	800028c <__adddf3>
 800f060:	4602      	mov	r2, r0
 800f062:	460b      	mov	r3, r1
 800f064:	4630      	mov	r0, r6
 800f066:	4639      	mov	r1, r7
 800f068:	f7f1 fd56 	bl	8000b18 <__aeabi_dcmpgt>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d175      	bne.n	800f15c <_dtoa_r+0x6fc>
 800f070:	ec53 2b18 	vmov	r2, r3, d8
 800f074:	4911      	ldr	r1, [pc, #68]	; (800f0bc <_dtoa_r+0x65c>)
 800f076:	2000      	movs	r0, #0
 800f078:	f7f1 f906 	bl	8000288 <__aeabi_dsub>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	4630      	mov	r0, r6
 800f082:	4639      	mov	r1, r7
 800f084:	f7f1 fd2a 	bl	8000adc <__aeabi_dcmplt>
 800f088:	2800      	cmp	r0, #0
 800f08a:	f43f af27 	beq.w	800eedc <_dtoa_r+0x47c>
 800f08e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f090:	1e6b      	subs	r3, r5, #1
 800f092:	930c      	str	r3, [sp, #48]	; 0x30
 800f094:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f098:	2b30      	cmp	r3, #48	; 0x30
 800f09a:	d0f8      	beq.n	800f08e <_dtoa_r+0x62e>
 800f09c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f0a0:	e04a      	b.n	800f138 <_dtoa_r+0x6d8>
 800f0a2:	bf00      	nop
 800f0a4:	08012d80 	.word	0x08012d80
 800f0a8:	08012d58 	.word	0x08012d58
 800f0ac:	3ff00000 	.word	0x3ff00000
 800f0b0:	40240000 	.word	0x40240000
 800f0b4:	401c0000 	.word	0x401c0000
 800f0b8:	40140000 	.word	0x40140000
 800f0bc:	3fe00000 	.word	0x3fe00000
 800f0c0:	4baf      	ldr	r3, [pc, #700]	; (800f380 <_dtoa_r+0x920>)
 800f0c2:	f7f1 fa99 	bl	80005f8 <__aeabi_dmul>
 800f0c6:	4606      	mov	r6, r0
 800f0c8:	460f      	mov	r7, r1
 800f0ca:	e7ac      	b.n	800f026 <_dtoa_r+0x5c6>
 800f0cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f0d0:	9d00      	ldr	r5, [sp, #0]
 800f0d2:	4642      	mov	r2, r8
 800f0d4:	464b      	mov	r3, r9
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	4639      	mov	r1, r7
 800f0da:	f7f1 fbb7 	bl	800084c <__aeabi_ddiv>
 800f0de:	f7f1 fd3b 	bl	8000b58 <__aeabi_d2iz>
 800f0e2:	9002      	str	r0, [sp, #8]
 800f0e4:	f7f1 fa1e 	bl	8000524 <__aeabi_i2d>
 800f0e8:	4642      	mov	r2, r8
 800f0ea:	464b      	mov	r3, r9
 800f0ec:	f7f1 fa84 	bl	80005f8 <__aeabi_dmul>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	f7f1 f8c6 	bl	8000288 <__aeabi_dsub>
 800f0fc:	9e02      	ldr	r6, [sp, #8]
 800f0fe:	9f01      	ldr	r7, [sp, #4]
 800f100:	3630      	adds	r6, #48	; 0x30
 800f102:	f805 6b01 	strb.w	r6, [r5], #1
 800f106:	9e00      	ldr	r6, [sp, #0]
 800f108:	1bae      	subs	r6, r5, r6
 800f10a:	42b7      	cmp	r7, r6
 800f10c:	4602      	mov	r2, r0
 800f10e:	460b      	mov	r3, r1
 800f110:	d137      	bne.n	800f182 <_dtoa_r+0x722>
 800f112:	f7f1 f8bb 	bl	800028c <__adddf3>
 800f116:	4642      	mov	r2, r8
 800f118:	464b      	mov	r3, r9
 800f11a:	4606      	mov	r6, r0
 800f11c:	460f      	mov	r7, r1
 800f11e:	f7f1 fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 800f122:	b9c8      	cbnz	r0, 800f158 <_dtoa_r+0x6f8>
 800f124:	4642      	mov	r2, r8
 800f126:	464b      	mov	r3, r9
 800f128:	4630      	mov	r0, r6
 800f12a:	4639      	mov	r1, r7
 800f12c:	f7f1 fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 800f130:	b110      	cbz	r0, 800f138 <_dtoa_r+0x6d8>
 800f132:	9b02      	ldr	r3, [sp, #8]
 800f134:	07d9      	lsls	r1, r3, #31
 800f136:	d40f      	bmi.n	800f158 <_dtoa_r+0x6f8>
 800f138:	4620      	mov	r0, r4
 800f13a:	4659      	mov	r1, fp
 800f13c:	f000 ff2a 	bl	800ff94 <_Bfree>
 800f140:	2300      	movs	r3, #0
 800f142:	702b      	strb	r3, [r5, #0]
 800f144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f146:	f10a 0001 	add.w	r0, sl, #1
 800f14a:	6018      	str	r0, [r3, #0]
 800f14c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f14e:	2b00      	cmp	r3, #0
 800f150:	f43f acd8 	beq.w	800eb04 <_dtoa_r+0xa4>
 800f154:	601d      	str	r5, [r3, #0]
 800f156:	e4d5      	b.n	800eb04 <_dtoa_r+0xa4>
 800f158:	f8cd a01c 	str.w	sl, [sp, #28]
 800f15c:	462b      	mov	r3, r5
 800f15e:	461d      	mov	r5, r3
 800f160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f164:	2a39      	cmp	r2, #57	; 0x39
 800f166:	d108      	bne.n	800f17a <_dtoa_r+0x71a>
 800f168:	9a00      	ldr	r2, [sp, #0]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d1f7      	bne.n	800f15e <_dtoa_r+0x6fe>
 800f16e:	9a07      	ldr	r2, [sp, #28]
 800f170:	9900      	ldr	r1, [sp, #0]
 800f172:	3201      	adds	r2, #1
 800f174:	9207      	str	r2, [sp, #28]
 800f176:	2230      	movs	r2, #48	; 0x30
 800f178:	700a      	strb	r2, [r1, #0]
 800f17a:	781a      	ldrb	r2, [r3, #0]
 800f17c:	3201      	adds	r2, #1
 800f17e:	701a      	strb	r2, [r3, #0]
 800f180:	e78c      	b.n	800f09c <_dtoa_r+0x63c>
 800f182:	4b7f      	ldr	r3, [pc, #508]	; (800f380 <_dtoa_r+0x920>)
 800f184:	2200      	movs	r2, #0
 800f186:	f7f1 fa37 	bl	80005f8 <__aeabi_dmul>
 800f18a:	2200      	movs	r2, #0
 800f18c:	2300      	movs	r3, #0
 800f18e:	4606      	mov	r6, r0
 800f190:	460f      	mov	r7, r1
 800f192:	f7f1 fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 800f196:	2800      	cmp	r0, #0
 800f198:	d09b      	beq.n	800f0d2 <_dtoa_r+0x672>
 800f19a:	e7cd      	b.n	800f138 <_dtoa_r+0x6d8>
 800f19c:	9a08      	ldr	r2, [sp, #32]
 800f19e:	2a00      	cmp	r2, #0
 800f1a0:	f000 80c4 	beq.w	800f32c <_dtoa_r+0x8cc>
 800f1a4:	9a05      	ldr	r2, [sp, #20]
 800f1a6:	2a01      	cmp	r2, #1
 800f1a8:	f300 80a8 	bgt.w	800f2fc <_dtoa_r+0x89c>
 800f1ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f1ae:	2a00      	cmp	r2, #0
 800f1b0:	f000 80a0 	beq.w	800f2f4 <_dtoa_r+0x894>
 800f1b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f1b8:	9e06      	ldr	r6, [sp, #24]
 800f1ba:	4645      	mov	r5, r8
 800f1bc:	9a04      	ldr	r2, [sp, #16]
 800f1be:	2101      	movs	r1, #1
 800f1c0:	441a      	add	r2, r3
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	4498      	add	r8, r3
 800f1c6:	9204      	str	r2, [sp, #16]
 800f1c8:	f000 ffea 	bl	80101a0 <__i2b>
 800f1cc:	4607      	mov	r7, r0
 800f1ce:	2d00      	cmp	r5, #0
 800f1d0:	dd0b      	ble.n	800f1ea <_dtoa_r+0x78a>
 800f1d2:	9b04      	ldr	r3, [sp, #16]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	dd08      	ble.n	800f1ea <_dtoa_r+0x78a>
 800f1d8:	42ab      	cmp	r3, r5
 800f1da:	9a04      	ldr	r2, [sp, #16]
 800f1dc:	bfa8      	it	ge
 800f1de:	462b      	movge	r3, r5
 800f1e0:	eba8 0803 	sub.w	r8, r8, r3
 800f1e4:	1aed      	subs	r5, r5, r3
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	9304      	str	r3, [sp, #16]
 800f1ea:	9b06      	ldr	r3, [sp, #24]
 800f1ec:	b1fb      	cbz	r3, 800f22e <_dtoa_r+0x7ce>
 800f1ee:	9b08      	ldr	r3, [sp, #32]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f000 809f 	beq.w	800f334 <_dtoa_r+0x8d4>
 800f1f6:	2e00      	cmp	r6, #0
 800f1f8:	dd11      	ble.n	800f21e <_dtoa_r+0x7be>
 800f1fa:	4639      	mov	r1, r7
 800f1fc:	4632      	mov	r2, r6
 800f1fe:	4620      	mov	r0, r4
 800f200:	f001 f88a 	bl	8010318 <__pow5mult>
 800f204:	465a      	mov	r2, fp
 800f206:	4601      	mov	r1, r0
 800f208:	4607      	mov	r7, r0
 800f20a:	4620      	mov	r0, r4
 800f20c:	f000 ffde 	bl	80101cc <__multiply>
 800f210:	4659      	mov	r1, fp
 800f212:	9007      	str	r0, [sp, #28]
 800f214:	4620      	mov	r0, r4
 800f216:	f000 febd 	bl	800ff94 <_Bfree>
 800f21a:	9b07      	ldr	r3, [sp, #28]
 800f21c:	469b      	mov	fp, r3
 800f21e:	9b06      	ldr	r3, [sp, #24]
 800f220:	1b9a      	subs	r2, r3, r6
 800f222:	d004      	beq.n	800f22e <_dtoa_r+0x7ce>
 800f224:	4659      	mov	r1, fp
 800f226:	4620      	mov	r0, r4
 800f228:	f001 f876 	bl	8010318 <__pow5mult>
 800f22c:	4683      	mov	fp, r0
 800f22e:	2101      	movs	r1, #1
 800f230:	4620      	mov	r0, r4
 800f232:	f000 ffb5 	bl	80101a0 <__i2b>
 800f236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f238:	2b00      	cmp	r3, #0
 800f23a:	4606      	mov	r6, r0
 800f23c:	dd7c      	ble.n	800f338 <_dtoa_r+0x8d8>
 800f23e:	461a      	mov	r2, r3
 800f240:	4601      	mov	r1, r0
 800f242:	4620      	mov	r0, r4
 800f244:	f001 f868 	bl	8010318 <__pow5mult>
 800f248:	9b05      	ldr	r3, [sp, #20]
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	4606      	mov	r6, r0
 800f24e:	dd76      	ble.n	800f33e <_dtoa_r+0x8de>
 800f250:	2300      	movs	r3, #0
 800f252:	9306      	str	r3, [sp, #24]
 800f254:	6933      	ldr	r3, [r6, #16]
 800f256:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f25a:	6918      	ldr	r0, [r3, #16]
 800f25c:	f000 ff50 	bl	8010100 <__hi0bits>
 800f260:	f1c0 0020 	rsb	r0, r0, #32
 800f264:	9b04      	ldr	r3, [sp, #16]
 800f266:	4418      	add	r0, r3
 800f268:	f010 001f 	ands.w	r0, r0, #31
 800f26c:	f000 8086 	beq.w	800f37c <_dtoa_r+0x91c>
 800f270:	f1c0 0320 	rsb	r3, r0, #32
 800f274:	2b04      	cmp	r3, #4
 800f276:	dd7f      	ble.n	800f378 <_dtoa_r+0x918>
 800f278:	f1c0 001c 	rsb	r0, r0, #28
 800f27c:	9b04      	ldr	r3, [sp, #16]
 800f27e:	4403      	add	r3, r0
 800f280:	4480      	add	r8, r0
 800f282:	4405      	add	r5, r0
 800f284:	9304      	str	r3, [sp, #16]
 800f286:	f1b8 0f00 	cmp.w	r8, #0
 800f28a:	dd05      	ble.n	800f298 <_dtoa_r+0x838>
 800f28c:	4659      	mov	r1, fp
 800f28e:	4642      	mov	r2, r8
 800f290:	4620      	mov	r0, r4
 800f292:	f001 f89b 	bl	80103cc <__lshift>
 800f296:	4683      	mov	fp, r0
 800f298:	9b04      	ldr	r3, [sp, #16]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	dd05      	ble.n	800f2aa <_dtoa_r+0x84a>
 800f29e:	4631      	mov	r1, r6
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f001 f892 	bl	80103cc <__lshift>
 800f2a8:	4606      	mov	r6, r0
 800f2aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d069      	beq.n	800f384 <_dtoa_r+0x924>
 800f2b0:	4631      	mov	r1, r6
 800f2b2:	4658      	mov	r0, fp
 800f2b4:	f001 f8f6 	bl	80104a4 <__mcmp>
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	da63      	bge.n	800f384 <_dtoa_r+0x924>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	4659      	mov	r1, fp
 800f2c0:	220a      	movs	r2, #10
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f000 fe88 	bl	800ffd8 <__multadd>
 800f2c8:	9b08      	ldr	r3, [sp, #32]
 800f2ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2ce:	4683      	mov	fp, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f000 818f 	beq.w	800f5f4 <_dtoa_r+0xb94>
 800f2d6:	4639      	mov	r1, r7
 800f2d8:	2300      	movs	r3, #0
 800f2da:	220a      	movs	r2, #10
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f000 fe7b 	bl	800ffd8 <__multadd>
 800f2e2:	f1b9 0f00 	cmp.w	r9, #0
 800f2e6:	4607      	mov	r7, r0
 800f2e8:	f300 808e 	bgt.w	800f408 <_dtoa_r+0x9a8>
 800f2ec:	9b05      	ldr	r3, [sp, #20]
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	dc50      	bgt.n	800f394 <_dtoa_r+0x934>
 800f2f2:	e089      	b.n	800f408 <_dtoa_r+0x9a8>
 800f2f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f2f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f2fa:	e75d      	b.n	800f1b8 <_dtoa_r+0x758>
 800f2fc:	9b01      	ldr	r3, [sp, #4]
 800f2fe:	1e5e      	subs	r6, r3, #1
 800f300:	9b06      	ldr	r3, [sp, #24]
 800f302:	42b3      	cmp	r3, r6
 800f304:	bfbf      	itttt	lt
 800f306:	9b06      	ldrlt	r3, [sp, #24]
 800f308:	9606      	strlt	r6, [sp, #24]
 800f30a:	1af2      	sublt	r2, r6, r3
 800f30c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f30e:	bfb6      	itet	lt
 800f310:	189b      	addlt	r3, r3, r2
 800f312:	1b9e      	subge	r6, r3, r6
 800f314:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f316:	9b01      	ldr	r3, [sp, #4]
 800f318:	bfb8      	it	lt
 800f31a:	2600      	movlt	r6, #0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	bfb5      	itete	lt
 800f320:	eba8 0503 	sublt.w	r5, r8, r3
 800f324:	9b01      	ldrge	r3, [sp, #4]
 800f326:	2300      	movlt	r3, #0
 800f328:	4645      	movge	r5, r8
 800f32a:	e747      	b.n	800f1bc <_dtoa_r+0x75c>
 800f32c:	9e06      	ldr	r6, [sp, #24]
 800f32e:	9f08      	ldr	r7, [sp, #32]
 800f330:	4645      	mov	r5, r8
 800f332:	e74c      	b.n	800f1ce <_dtoa_r+0x76e>
 800f334:	9a06      	ldr	r2, [sp, #24]
 800f336:	e775      	b.n	800f224 <_dtoa_r+0x7c4>
 800f338:	9b05      	ldr	r3, [sp, #20]
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	dc18      	bgt.n	800f370 <_dtoa_r+0x910>
 800f33e:	9b02      	ldr	r3, [sp, #8]
 800f340:	b9b3      	cbnz	r3, 800f370 <_dtoa_r+0x910>
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f348:	b9a3      	cbnz	r3, 800f374 <_dtoa_r+0x914>
 800f34a:	9b03      	ldr	r3, [sp, #12]
 800f34c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f350:	0d1b      	lsrs	r3, r3, #20
 800f352:	051b      	lsls	r3, r3, #20
 800f354:	b12b      	cbz	r3, 800f362 <_dtoa_r+0x902>
 800f356:	9b04      	ldr	r3, [sp, #16]
 800f358:	3301      	adds	r3, #1
 800f35a:	9304      	str	r3, [sp, #16]
 800f35c:	f108 0801 	add.w	r8, r8, #1
 800f360:	2301      	movs	r3, #1
 800f362:	9306      	str	r3, [sp, #24]
 800f364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f366:	2b00      	cmp	r3, #0
 800f368:	f47f af74 	bne.w	800f254 <_dtoa_r+0x7f4>
 800f36c:	2001      	movs	r0, #1
 800f36e:	e779      	b.n	800f264 <_dtoa_r+0x804>
 800f370:	2300      	movs	r3, #0
 800f372:	e7f6      	b.n	800f362 <_dtoa_r+0x902>
 800f374:	9b02      	ldr	r3, [sp, #8]
 800f376:	e7f4      	b.n	800f362 <_dtoa_r+0x902>
 800f378:	d085      	beq.n	800f286 <_dtoa_r+0x826>
 800f37a:	4618      	mov	r0, r3
 800f37c:	301c      	adds	r0, #28
 800f37e:	e77d      	b.n	800f27c <_dtoa_r+0x81c>
 800f380:	40240000 	.word	0x40240000
 800f384:	9b01      	ldr	r3, [sp, #4]
 800f386:	2b00      	cmp	r3, #0
 800f388:	dc38      	bgt.n	800f3fc <_dtoa_r+0x99c>
 800f38a:	9b05      	ldr	r3, [sp, #20]
 800f38c:	2b02      	cmp	r3, #2
 800f38e:	dd35      	ble.n	800f3fc <_dtoa_r+0x99c>
 800f390:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f394:	f1b9 0f00 	cmp.w	r9, #0
 800f398:	d10d      	bne.n	800f3b6 <_dtoa_r+0x956>
 800f39a:	4631      	mov	r1, r6
 800f39c:	464b      	mov	r3, r9
 800f39e:	2205      	movs	r2, #5
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f000 fe19 	bl	800ffd8 <__multadd>
 800f3a6:	4601      	mov	r1, r0
 800f3a8:	4606      	mov	r6, r0
 800f3aa:	4658      	mov	r0, fp
 800f3ac:	f001 f87a 	bl	80104a4 <__mcmp>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	f73f adbd 	bgt.w	800ef30 <_dtoa_r+0x4d0>
 800f3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3b8:	9d00      	ldr	r5, [sp, #0]
 800f3ba:	ea6f 0a03 	mvn.w	sl, r3
 800f3be:	f04f 0800 	mov.w	r8, #0
 800f3c2:	4631      	mov	r1, r6
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f000 fde5 	bl	800ff94 <_Bfree>
 800f3ca:	2f00      	cmp	r7, #0
 800f3cc:	f43f aeb4 	beq.w	800f138 <_dtoa_r+0x6d8>
 800f3d0:	f1b8 0f00 	cmp.w	r8, #0
 800f3d4:	d005      	beq.n	800f3e2 <_dtoa_r+0x982>
 800f3d6:	45b8      	cmp	r8, r7
 800f3d8:	d003      	beq.n	800f3e2 <_dtoa_r+0x982>
 800f3da:	4641      	mov	r1, r8
 800f3dc:	4620      	mov	r0, r4
 800f3de:	f000 fdd9 	bl	800ff94 <_Bfree>
 800f3e2:	4639      	mov	r1, r7
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	f000 fdd5 	bl	800ff94 <_Bfree>
 800f3ea:	e6a5      	b.n	800f138 <_dtoa_r+0x6d8>
 800f3ec:	2600      	movs	r6, #0
 800f3ee:	4637      	mov	r7, r6
 800f3f0:	e7e1      	b.n	800f3b6 <_dtoa_r+0x956>
 800f3f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f3f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f3f8:	4637      	mov	r7, r6
 800f3fa:	e599      	b.n	800ef30 <_dtoa_r+0x4d0>
 800f3fc:	9b08      	ldr	r3, [sp, #32]
 800f3fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f402:	2b00      	cmp	r3, #0
 800f404:	f000 80fd 	beq.w	800f602 <_dtoa_r+0xba2>
 800f408:	2d00      	cmp	r5, #0
 800f40a:	dd05      	ble.n	800f418 <_dtoa_r+0x9b8>
 800f40c:	4639      	mov	r1, r7
 800f40e:	462a      	mov	r2, r5
 800f410:	4620      	mov	r0, r4
 800f412:	f000 ffdb 	bl	80103cc <__lshift>
 800f416:	4607      	mov	r7, r0
 800f418:	9b06      	ldr	r3, [sp, #24]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d05c      	beq.n	800f4d8 <_dtoa_r+0xa78>
 800f41e:	6879      	ldr	r1, [r7, #4]
 800f420:	4620      	mov	r0, r4
 800f422:	f000 fd77 	bl	800ff14 <_Balloc>
 800f426:	4605      	mov	r5, r0
 800f428:	b928      	cbnz	r0, 800f436 <_dtoa_r+0x9d6>
 800f42a:	4b80      	ldr	r3, [pc, #512]	; (800f62c <_dtoa_r+0xbcc>)
 800f42c:	4602      	mov	r2, r0
 800f42e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f432:	f7ff bb2e 	b.w	800ea92 <_dtoa_r+0x32>
 800f436:	693a      	ldr	r2, [r7, #16]
 800f438:	3202      	adds	r2, #2
 800f43a:	0092      	lsls	r2, r2, #2
 800f43c:	f107 010c 	add.w	r1, r7, #12
 800f440:	300c      	adds	r0, #12
 800f442:	f7fd fbde 	bl	800cc02 <memcpy>
 800f446:	2201      	movs	r2, #1
 800f448:	4629      	mov	r1, r5
 800f44a:	4620      	mov	r0, r4
 800f44c:	f000 ffbe 	bl	80103cc <__lshift>
 800f450:	9b00      	ldr	r3, [sp, #0]
 800f452:	3301      	adds	r3, #1
 800f454:	9301      	str	r3, [sp, #4]
 800f456:	9b00      	ldr	r3, [sp, #0]
 800f458:	444b      	add	r3, r9
 800f45a:	9307      	str	r3, [sp, #28]
 800f45c:	9b02      	ldr	r3, [sp, #8]
 800f45e:	f003 0301 	and.w	r3, r3, #1
 800f462:	46b8      	mov	r8, r7
 800f464:	9306      	str	r3, [sp, #24]
 800f466:	4607      	mov	r7, r0
 800f468:	9b01      	ldr	r3, [sp, #4]
 800f46a:	4631      	mov	r1, r6
 800f46c:	3b01      	subs	r3, #1
 800f46e:	4658      	mov	r0, fp
 800f470:	9302      	str	r3, [sp, #8]
 800f472:	f7ff fa69 	bl	800e948 <quorem>
 800f476:	4603      	mov	r3, r0
 800f478:	3330      	adds	r3, #48	; 0x30
 800f47a:	9004      	str	r0, [sp, #16]
 800f47c:	4641      	mov	r1, r8
 800f47e:	4658      	mov	r0, fp
 800f480:	9308      	str	r3, [sp, #32]
 800f482:	f001 f80f 	bl	80104a4 <__mcmp>
 800f486:	463a      	mov	r2, r7
 800f488:	4681      	mov	r9, r0
 800f48a:	4631      	mov	r1, r6
 800f48c:	4620      	mov	r0, r4
 800f48e:	f001 f825 	bl	80104dc <__mdiff>
 800f492:	68c2      	ldr	r2, [r0, #12]
 800f494:	9b08      	ldr	r3, [sp, #32]
 800f496:	4605      	mov	r5, r0
 800f498:	bb02      	cbnz	r2, 800f4dc <_dtoa_r+0xa7c>
 800f49a:	4601      	mov	r1, r0
 800f49c:	4658      	mov	r0, fp
 800f49e:	f001 f801 	bl	80104a4 <__mcmp>
 800f4a2:	9b08      	ldr	r3, [sp, #32]
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f4ae:	f000 fd71 	bl	800ff94 <_Bfree>
 800f4b2:	9b05      	ldr	r3, [sp, #20]
 800f4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4b6:	9d01      	ldr	r5, [sp, #4]
 800f4b8:	ea43 0102 	orr.w	r1, r3, r2
 800f4bc:	9b06      	ldr	r3, [sp, #24]
 800f4be:	430b      	orrs	r3, r1
 800f4c0:	9b08      	ldr	r3, [sp, #32]
 800f4c2:	d10d      	bne.n	800f4e0 <_dtoa_r+0xa80>
 800f4c4:	2b39      	cmp	r3, #57	; 0x39
 800f4c6:	d029      	beq.n	800f51c <_dtoa_r+0xabc>
 800f4c8:	f1b9 0f00 	cmp.w	r9, #0
 800f4cc:	dd01      	ble.n	800f4d2 <_dtoa_r+0xa72>
 800f4ce:	9b04      	ldr	r3, [sp, #16]
 800f4d0:	3331      	adds	r3, #49	; 0x31
 800f4d2:	9a02      	ldr	r2, [sp, #8]
 800f4d4:	7013      	strb	r3, [r2, #0]
 800f4d6:	e774      	b.n	800f3c2 <_dtoa_r+0x962>
 800f4d8:	4638      	mov	r0, r7
 800f4da:	e7b9      	b.n	800f450 <_dtoa_r+0x9f0>
 800f4dc:	2201      	movs	r2, #1
 800f4de:	e7e2      	b.n	800f4a6 <_dtoa_r+0xa46>
 800f4e0:	f1b9 0f00 	cmp.w	r9, #0
 800f4e4:	db06      	blt.n	800f4f4 <_dtoa_r+0xa94>
 800f4e6:	9905      	ldr	r1, [sp, #20]
 800f4e8:	ea41 0909 	orr.w	r9, r1, r9
 800f4ec:	9906      	ldr	r1, [sp, #24]
 800f4ee:	ea59 0101 	orrs.w	r1, r9, r1
 800f4f2:	d120      	bne.n	800f536 <_dtoa_r+0xad6>
 800f4f4:	2a00      	cmp	r2, #0
 800f4f6:	ddec      	ble.n	800f4d2 <_dtoa_r+0xa72>
 800f4f8:	4659      	mov	r1, fp
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	9301      	str	r3, [sp, #4]
 800f500:	f000 ff64 	bl	80103cc <__lshift>
 800f504:	4631      	mov	r1, r6
 800f506:	4683      	mov	fp, r0
 800f508:	f000 ffcc 	bl	80104a4 <__mcmp>
 800f50c:	2800      	cmp	r0, #0
 800f50e:	9b01      	ldr	r3, [sp, #4]
 800f510:	dc02      	bgt.n	800f518 <_dtoa_r+0xab8>
 800f512:	d1de      	bne.n	800f4d2 <_dtoa_r+0xa72>
 800f514:	07da      	lsls	r2, r3, #31
 800f516:	d5dc      	bpl.n	800f4d2 <_dtoa_r+0xa72>
 800f518:	2b39      	cmp	r3, #57	; 0x39
 800f51a:	d1d8      	bne.n	800f4ce <_dtoa_r+0xa6e>
 800f51c:	9a02      	ldr	r2, [sp, #8]
 800f51e:	2339      	movs	r3, #57	; 0x39
 800f520:	7013      	strb	r3, [r2, #0]
 800f522:	462b      	mov	r3, r5
 800f524:	461d      	mov	r5, r3
 800f526:	3b01      	subs	r3, #1
 800f528:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f52c:	2a39      	cmp	r2, #57	; 0x39
 800f52e:	d050      	beq.n	800f5d2 <_dtoa_r+0xb72>
 800f530:	3201      	adds	r2, #1
 800f532:	701a      	strb	r2, [r3, #0]
 800f534:	e745      	b.n	800f3c2 <_dtoa_r+0x962>
 800f536:	2a00      	cmp	r2, #0
 800f538:	dd03      	ble.n	800f542 <_dtoa_r+0xae2>
 800f53a:	2b39      	cmp	r3, #57	; 0x39
 800f53c:	d0ee      	beq.n	800f51c <_dtoa_r+0xabc>
 800f53e:	3301      	adds	r3, #1
 800f540:	e7c7      	b.n	800f4d2 <_dtoa_r+0xa72>
 800f542:	9a01      	ldr	r2, [sp, #4]
 800f544:	9907      	ldr	r1, [sp, #28]
 800f546:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f54a:	428a      	cmp	r2, r1
 800f54c:	d02a      	beq.n	800f5a4 <_dtoa_r+0xb44>
 800f54e:	4659      	mov	r1, fp
 800f550:	2300      	movs	r3, #0
 800f552:	220a      	movs	r2, #10
 800f554:	4620      	mov	r0, r4
 800f556:	f000 fd3f 	bl	800ffd8 <__multadd>
 800f55a:	45b8      	cmp	r8, r7
 800f55c:	4683      	mov	fp, r0
 800f55e:	f04f 0300 	mov.w	r3, #0
 800f562:	f04f 020a 	mov.w	r2, #10
 800f566:	4641      	mov	r1, r8
 800f568:	4620      	mov	r0, r4
 800f56a:	d107      	bne.n	800f57c <_dtoa_r+0xb1c>
 800f56c:	f000 fd34 	bl	800ffd8 <__multadd>
 800f570:	4680      	mov	r8, r0
 800f572:	4607      	mov	r7, r0
 800f574:	9b01      	ldr	r3, [sp, #4]
 800f576:	3301      	adds	r3, #1
 800f578:	9301      	str	r3, [sp, #4]
 800f57a:	e775      	b.n	800f468 <_dtoa_r+0xa08>
 800f57c:	f000 fd2c 	bl	800ffd8 <__multadd>
 800f580:	4639      	mov	r1, r7
 800f582:	4680      	mov	r8, r0
 800f584:	2300      	movs	r3, #0
 800f586:	220a      	movs	r2, #10
 800f588:	4620      	mov	r0, r4
 800f58a:	f000 fd25 	bl	800ffd8 <__multadd>
 800f58e:	4607      	mov	r7, r0
 800f590:	e7f0      	b.n	800f574 <_dtoa_r+0xb14>
 800f592:	f1b9 0f00 	cmp.w	r9, #0
 800f596:	9a00      	ldr	r2, [sp, #0]
 800f598:	bfcc      	ite	gt
 800f59a:	464d      	movgt	r5, r9
 800f59c:	2501      	movle	r5, #1
 800f59e:	4415      	add	r5, r2
 800f5a0:	f04f 0800 	mov.w	r8, #0
 800f5a4:	4659      	mov	r1, fp
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	9301      	str	r3, [sp, #4]
 800f5ac:	f000 ff0e 	bl	80103cc <__lshift>
 800f5b0:	4631      	mov	r1, r6
 800f5b2:	4683      	mov	fp, r0
 800f5b4:	f000 ff76 	bl	80104a4 <__mcmp>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	dcb2      	bgt.n	800f522 <_dtoa_r+0xac2>
 800f5bc:	d102      	bne.n	800f5c4 <_dtoa_r+0xb64>
 800f5be:	9b01      	ldr	r3, [sp, #4]
 800f5c0:	07db      	lsls	r3, r3, #31
 800f5c2:	d4ae      	bmi.n	800f522 <_dtoa_r+0xac2>
 800f5c4:	462b      	mov	r3, r5
 800f5c6:	461d      	mov	r5, r3
 800f5c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5cc:	2a30      	cmp	r2, #48	; 0x30
 800f5ce:	d0fa      	beq.n	800f5c6 <_dtoa_r+0xb66>
 800f5d0:	e6f7      	b.n	800f3c2 <_dtoa_r+0x962>
 800f5d2:	9a00      	ldr	r2, [sp, #0]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d1a5      	bne.n	800f524 <_dtoa_r+0xac4>
 800f5d8:	f10a 0a01 	add.w	sl, sl, #1
 800f5dc:	2331      	movs	r3, #49	; 0x31
 800f5de:	e779      	b.n	800f4d4 <_dtoa_r+0xa74>
 800f5e0:	4b13      	ldr	r3, [pc, #76]	; (800f630 <_dtoa_r+0xbd0>)
 800f5e2:	f7ff baaf 	b.w	800eb44 <_dtoa_r+0xe4>
 800f5e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f47f aa86 	bne.w	800eafa <_dtoa_r+0x9a>
 800f5ee:	4b11      	ldr	r3, [pc, #68]	; (800f634 <_dtoa_r+0xbd4>)
 800f5f0:	f7ff baa8 	b.w	800eb44 <_dtoa_r+0xe4>
 800f5f4:	f1b9 0f00 	cmp.w	r9, #0
 800f5f8:	dc03      	bgt.n	800f602 <_dtoa_r+0xba2>
 800f5fa:	9b05      	ldr	r3, [sp, #20]
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	f73f aec9 	bgt.w	800f394 <_dtoa_r+0x934>
 800f602:	9d00      	ldr	r5, [sp, #0]
 800f604:	4631      	mov	r1, r6
 800f606:	4658      	mov	r0, fp
 800f608:	f7ff f99e 	bl	800e948 <quorem>
 800f60c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f610:	f805 3b01 	strb.w	r3, [r5], #1
 800f614:	9a00      	ldr	r2, [sp, #0]
 800f616:	1aaa      	subs	r2, r5, r2
 800f618:	4591      	cmp	r9, r2
 800f61a:	ddba      	ble.n	800f592 <_dtoa_r+0xb32>
 800f61c:	4659      	mov	r1, fp
 800f61e:	2300      	movs	r3, #0
 800f620:	220a      	movs	r2, #10
 800f622:	4620      	mov	r0, r4
 800f624:	f000 fcd8 	bl	800ffd8 <__multadd>
 800f628:	4683      	mov	fp, r0
 800f62a:	e7eb      	b.n	800f604 <_dtoa_r+0xba4>
 800f62c:	08012c64 	.word	0x08012c64
 800f630:	08012a64 	.word	0x08012a64
 800f634:	08012be1 	.word	0x08012be1

0800f638 <__sflush_r>:
 800f638:	898a      	ldrh	r2, [r1, #12]
 800f63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f63e:	4605      	mov	r5, r0
 800f640:	0710      	lsls	r0, r2, #28
 800f642:	460c      	mov	r4, r1
 800f644:	d458      	bmi.n	800f6f8 <__sflush_r+0xc0>
 800f646:	684b      	ldr	r3, [r1, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	dc05      	bgt.n	800f658 <__sflush_r+0x20>
 800f64c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f64e:	2b00      	cmp	r3, #0
 800f650:	dc02      	bgt.n	800f658 <__sflush_r+0x20>
 800f652:	2000      	movs	r0, #0
 800f654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f65a:	2e00      	cmp	r6, #0
 800f65c:	d0f9      	beq.n	800f652 <__sflush_r+0x1a>
 800f65e:	2300      	movs	r3, #0
 800f660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f664:	682f      	ldr	r7, [r5, #0]
 800f666:	602b      	str	r3, [r5, #0]
 800f668:	d032      	beq.n	800f6d0 <__sflush_r+0x98>
 800f66a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f66c:	89a3      	ldrh	r3, [r4, #12]
 800f66e:	075a      	lsls	r2, r3, #29
 800f670:	d505      	bpl.n	800f67e <__sflush_r+0x46>
 800f672:	6863      	ldr	r3, [r4, #4]
 800f674:	1ac0      	subs	r0, r0, r3
 800f676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f678:	b10b      	cbz	r3, 800f67e <__sflush_r+0x46>
 800f67a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f67c:	1ac0      	subs	r0, r0, r3
 800f67e:	2300      	movs	r3, #0
 800f680:	4602      	mov	r2, r0
 800f682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f684:	6a21      	ldr	r1, [r4, #32]
 800f686:	4628      	mov	r0, r5
 800f688:	47b0      	blx	r6
 800f68a:	1c43      	adds	r3, r0, #1
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	d106      	bne.n	800f69e <__sflush_r+0x66>
 800f690:	6829      	ldr	r1, [r5, #0]
 800f692:	291d      	cmp	r1, #29
 800f694:	d82c      	bhi.n	800f6f0 <__sflush_r+0xb8>
 800f696:	4a2a      	ldr	r2, [pc, #168]	; (800f740 <__sflush_r+0x108>)
 800f698:	40ca      	lsrs	r2, r1
 800f69a:	07d6      	lsls	r6, r2, #31
 800f69c:	d528      	bpl.n	800f6f0 <__sflush_r+0xb8>
 800f69e:	2200      	movs	r2, #0
 800f6a0:	6062      	str	r2, [r4, #4]
 800f6a2:	04d9      	lsls	r1, r3, #19
 800f6a4:	6922      	ldr	r2, [r4, #16]
 800f6a6:	6022      	str	r2, [r4, #0]
 800f6a8:	d504      	bpl.n	800f6b4 <__sflush_r+0x7c>
 800f6aa:	1c42      	adds	r2, r0, #1
 800f6ac:	d101      	bne.n	800f6b2 <__sflush_r+0x7a>
 800f6ae:	682b      	ldr	r3, [r5, #0]
 800f6b0:	b903      	cbnz	r3, 800f6b4 <__sflush_r+0x7c>
 800f6b2:	6560      	str	r0, [r4, #84]	; 0x54
 800f6b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6b6:	602f      	str	r7, [r5, #0]
 800f6b8:	2900      	cmp	r1, #0
 800f6ba:	d0ca      	beq.n	800f652 <__sflush_r+0x1a>
 800f6bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6c0:	4299      	cmp	r1, r3
 800f6c2:	d002      	beq.n	800f6ca <__sflush_r+0x92>
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f001 f8ef 	bl	80108a8 <_free_r>
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	6360      	str	r0, [r4, #52]	; 0x34
 800f6ce:	e7c1      	b.n	800f654 <__sflush_r+0x1c>
 800f6d0:	6a21      	ldr	r1, [r4, #32]
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	47b0      	blx	r6
 800f6d8:	1c41      	adds	r1, r0, #1
 800f6da:	d1c7      	bne.n	800f66c <__sflush_r+0x34>
 800f6dc:	682b      	ldr	r3, [r5, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d0c4      	beq.n	800f66c <__sflush_r+0x34>
 800f6e2:	2b1d      	cmp	r3, #29
 800f6e4:	d001      	beq.n	800f6ea <__sflush_r+0xb2>
 800f6e6:	2b16      	cmp	r3, #22
 800f6e8:	d101      	bne.n	800f6ee <__sflush_r+0xb6>
 800f6ea:	602f      	str	r7, [r5, #0]
 800f6ec:	e7b1      	b.n	800f652 <__sflush_r+0x1a>
 800f6ee:	89a3      	ldrh	r3, [r4, #12]
 800f6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6f4:	81a3      	strh	r3, [r4, #12]
 800f6f6:	e7ad      	b.n	800f654 <__sflush_r+0x1c>
 800f6f8:	690f      	ldr	r7, [r1, #16]
 800f6fa:	2f00      	cmp	r7, #0
 800f6fc:	d0a9      	beq.n	800f652 <__sflush_r+0x1a>
 800f6fe:	0793      	lsls	r3, r2, #30
 800f700:	680e      	ldr	r6, [r1, #0]
 800f702:	bf08      	it	eq
 800f704:	694b      	ldreq	r3, [r1, #20]
 800f706:	600f      	str	r7, [r1, #0]
 800f708:	bf18      	it	ne
 800f70a:	2300      	movne	r3, #0
 800f70c:	eba6 0807 	sub.w	r8, r6, r7
 800f710:	608b      	str	r3, [r1, #8]
 800f712:	f1b8 0f00 	cmp.w	r8, #0
 800f716:	dd9c      	ble.n	800f652 <__sflush_r+0x1a>
 800f718:	6a21      	ldr	r1, [r4, #32]
 800f71a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f71c:	4643      	mov	r3, r8
 800f71e:	463a      	mov	r2, r7
 800f720:	4628      	mov	r0, r5
 800f722:	47b0      	blx	r6
 800f724:	2800      	cmp	r0, #0
 800f726:	dc06      	bgt.n	800f736 <__sflush_r+0xfe>
 800f728:	89a3      	ldrh	r3, [r4, #12]
 800f72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f72e:	81a3      	strh	r3, [r4, #12]
 800f730:	f04f 30ff 	mov.w	r0, #4294967295
 800f734:	e78e      	b.n	800f654 <__sflush_r+0x1c>
 800f736:	4407      	add	r7, r0
 800f738:	eba8 0800 	sub.w	r8, r8, r0
 800f73c:	e7e9      	b.n	800f712 <__sflush_r+0xda>
 800f73e:	bf00      	nop
 800f740:	20400001 	.word	0x20400001

0800f744 <_fflush_r>:
 800f744:	b538      	push	{r3, r4, r5, lr}
 800f746:	690b      	ldr	r3, [r1, #16]
 800f748:	4605      	mov	r5, r0
 800f74a:	460c      	mov	r4, r1
 800f74c:	b913      	cbnz	r3, 800f754 <_fflush_r+0x10>
 800f74e:	2500      	movs	r5, #0
 800f750:	4628      	mov	r0, r5
 800f752:	bd38      	pop	{r3, r4, r5, pc}
 800f754:	b118      	cbz	r0, 800f75e <_fflush_r+0x1a>
 800f756:	6983      	ldr	r3, [r0, #24]
 800f758:	b90b      	cbnz	r3, 800f75e <_fflush_r+0x1a>
 800f75a:	f7fd f98d 	bl	800ca78 <__sinit>
 800f75e:	4b14      	ldr	r3, [pc, #80]	; (800f7b0 <_fflush_r+0x6c>)
 800f760:	429c      	cmp	r4, r3
 800f762:	d11b      	bne.n	800f79c <_fflush_r+0x58>
 800f764:	686c      	ldr	r4, [r5, #4]
 800f766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d0ef      	beq.n	800f74e <_fflush_r+0xa>
 800f76e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f770:	07d0      	lsls	r0, r2, #31
 800f772:	d404      	bmi.n	800f77e <_fflush_r+0x3a>
 800f774:	0599      	lsls	r1, r3, #22
 800f776:	d402      	bmi.n	800f77e <_fflush_r+0x3a>
 800f778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f77a:	f7fd fa40 	bl	800cbfe <__retarget_lock_acquire_recursive>
 800f77e:	4628      	mov	r0, r5
 800f780:	4621      	mov	r1, r4
 800f782:	f7ff ff59 	bl	800f638 <__sflush_r>
 800f786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f788:	07da      	lsls	r2, r3, #31
 800f78a:	4605      	mov	r5, r0
 800f78c:	d4e0      	bmi.n	800f750 <_fflush_r+0xc>
 800f78e:	89a3      	ldrh	r3, [r4, #12]
 800f790:	059b      	lsls	r3, r3, #22
 800f792:	d4dd      	bmi.n	800f750 <_fflush_r+0xc>
 800f794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f796:	f7fd fa33 	bl	800cc00 <__retarget_lock_release_recursive>
 800f79a:	e7d9      	b.n	800f750 <_fflush_r+0xc>
 800f79c:	4b05      	ldr	r3, [pc, #20]	; (800f7b4 <_fflush_r+0x70>)
 800f79e:	429c      	cmp	r4, r3
 800f7a0:	d101      	bne.n	800f7a6 <_fflush_r+0x62>
 800f7a2:	68ac      	ldr	r4, [r5, #8]
 800f7a4:	e7df      	b.n	800f766 <_fflush_r+0x22>
 800f7a6:	4b04      	ldr	r3, [pc, #16]	; (800f7b8 <_fflush_r+0x74>)
 800f7a8:	429c      	cmp	r4, r3
 800f7aa:	bf08      	it	eq
 800f7ac:	68ec      	ldreq	r4, [r5, #12]
 800f7ae:	e7da      	b.n	800f766 <_fflush_r+0x22>
 800f7b0:	08012a10 	.word	0x08012a10
 800f7b4:	08012a30 	.word	0x08012a30
 800f7b8:	080129f0 	.word	0x080129f0

0800f7bc <rshift>:
 800f7bc:	6903      	ldr	r3, [r0, #16]
 800f7be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f7c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f7ca:	f100 0414 	add.w	r4, r0, #20
 800f7ce:	dd45      	ble.n	800f85c <rshift+0xa0>
 800f7d0:	f011 011f 	ands.w	r1, r1, #31
 800f7d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f7d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f7dc:	d10c      	bne.n	800f7f8 <rshift+0x3c>
 800f7de:	f100 0710 	add.w	r7, r0, #16
 800f7e2:	4629      	mov	r1, r5
 800f7e4:	42b1      	cmp	r1, r6
 800f7e6:	d334      	bcc.n	800f852 <rshift+0x96>
 800f7e8:	1a9b      	subs	r3, r3, r2
 800f7ea:	009b      	lsls	r3, r3, #2
 800f7ec:	1eea      	subs	r2, r5, #3
 800f7ee:	4296      	cmp	r6, r2
 800f7f0:	bf38      	it	cc
 800f7f2:	2300      	movcc	r3, #0
 800f7f4:	4423      	add	r3, r4
 800f7f6:	e015      	b.n	800f824 <rshift+0x68>
 800f7f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f7fc:	f1c1 0820 	rsb	r8, r1, #32
 800f800:	40cf      	lsrs	r7, r1
 800f802:	f105 0e04 	add.w	lr, r5, #4
 800f806:	46a1      	mov	r9, r4
 800f808:	4576      	cmp	r6, lr
 800f80a:	46f4      	mov	ip, lr
 800f80c:	d815      	bhi.n	800f83a <rshift+0x7e>
 800f80e:	1a9b      	subs	r3, r3, r2
 800f810:	009a      	lsls	r2, r3, #2
 800f812:	3a04      	subs	r2, #4
 800f814:	3501      	adds	r5, #1
 800f816:	42ae      	cmp	r6, r5
 800f818:	bf38      	it	cc
 800f81a:	2200      	movcc	r2, #0
 800f81c:	18a3      	adds	r3, r4, r2
 800f81e:	50a7      	str	r7, [r4, r2]
 800f820:	b107      	cbz	r7, 800f824 <rshift+0x68>
 800f822:	3304      	adds	r3, #4
 800f824:	1b1a      	subs	r2, r3, r4
 800f826:	42a3      	cmp	r3, r4
 800f828:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f82c:	bf08      	it	eq
 800f82e:	2300      	moveq	r3, #0
 800f830:	6102      	str	r2, [r0, #16]
 800f832:	bf08      	it	eq
 800f834:	6143      	streq	r3, [r0, #20]
 800f836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f83a:	f8dc c000 	ldr.w	ip, [ip]
 800f83e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f842:	ea4c 0707 	orr.w	r7, ip, r7
 800f846:	f849 7b04 	str.w	r7, [r9], #4
 800f84a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f84e:	40cf      	lsrs	r7, r1
 800f850:	e7da      	b.n	800f808 <rshift+0x4c>
 800f852:	f851 cb04 	ldr.w	ip, [r1], #4
 800f856:	f847 cf04 	str.w	ip, [r7, #4]!
 800f85a:	e7c3      	b.n	800f7e4 <rshift+0x28>
 800f85c:	4623      	mov	r3, r4
 800f85e:	e7e1      	b.n	800f824 <rshift+0x68>

0800f860 <__hexdig_fun>:
 800f860:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f864:	2b09      	cmp	r3, #9
 800f866:	d802      	bhi.n	800f86e <__hexdig_fun+0xe>
 800f868:	3820      	subs	r0, #32
 800f86a:	b2c0      	uxtb	r0, r0
 800f86c:	4770      	bx	lr
 800f86e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f872:	2b05      	cmp	r3, #5
 800f874:	d801      	bhi.n	800f87a <__hexdig_fun+0x1a>
 800f876:	3847      	subs	r0, #71	; 0x47
 800f878:	e7f7      	b.n	800f86a <__hexdig_fun+0xa>
 800f87a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f87e:	2b05      	cmp	r3, #5
 800f880:	d801      	bhi.n	800f886 <__hexdig_fun+0x26>
 800f882:	3827      	subs	r0, #39	; 0x27
 800f884:	e7f1      	b.n	800f86a <__hexdig_fun+0xa>
 800f886:	2000      	movs	r0, #0
 800f888:	4770      	bx	lr
	...

0800f88c <__gethex>:
 800f88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f890:	ed2d 8b02 	vpush	{d8}
 800f894:	b089      	sub	sp, #36	; 0x24
 800f896:	ee08 0a10 	vmov	s16, r0
 800f89a:	9304      	str	r3, [sp, #16]
 800f89c:	4bbc      	ldr	r3, [pc, #752]	; (800fb90 <__gethex+0x304>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	9301      	str	r3, [sp, #4]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	468b      	mov	fp, r1
 800f8a6:	4690      	mov	r8, r2
 800f8a8:	f7f0 fc92 	bl	80001d0 <strlen>
 800f8ac:	9b01      	ldr	r3, [sp, #4]
 800f8ae:	f8db 2000 	ldr.w	r2, [fp]
 800f8b2:	4403      	add	r3, r0
 800f8b4:	4682      	mov	sl, r0
 800f8b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f8ba:	9305      	str	r3, [sp, #20]
 800f8bc:	1c93      	adds	r3, r2, #2
 800f8be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f8c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f8c6:	32fe      	adds	r2, #254	; 0xfe
 800f8c8:	18d1      	adds	r1, r2, r3
 800f8ca:	461f      	mov	r7, r3
 800f8cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f8d0:	9100      	str	r1, [sp, #0]
 800f8d2:	2830      	cmp	r0, #48	; 0x30
 800f8d4:	d0f8      	beq.n	800f8c8 <__gethex+0x3c>
 800f8d6:	f7ff ffc3 	bl	800f860 <__hexdig_fun>
 800f8da:	4604      	mov	r4, r0
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	d13a      	bne.n	800f956 <__gethex+0xca>
 800f8e0:	9901      	ldr	r1, [sp, #4]
 800f8e2:	4652      	mov	r2, sl
 800f8e4:	4638      	mov	r0, r7
 800f8e6:	f001 f9a7 	bl	8010c38 <strncmp>
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	d168      	bne.n	800f9c2 <__gethex+0x136>
 800f8f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f8f4:	eb07 060a 	add.w	r6, r7, sl
 800f8f8:	f7ff ffb2 	bl	800f860 <__hexdig_fun>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d062      	beq.n	800f9c6 <__gethex+0x13a>
 800f900:	4633      	mov	r3, r6
 800f902:	7818      	ldrb	r0, [r3, #0]
 800f904:	2830      	cmp	r0, #48	; 0x30
 800f906:	461f      	mov	r7, r3
 800f908:	f103 0301 	add.w	r3, r3, #1
 800f90c:	d0f9      	beq.n	800f902 <__gethex+0x76>
 800f90e:	f7ff ffa7 	bl	800f860 <__hexdig_fun>
 800f912:	2301      	movs	r3, #1
 800f914:	fab0 f480 	clz	r4, r0
 800f918:	0964      	lsrs	r4, r4, #5
 800f91a:	4635      	mov	r5, r6
 800f91c:	9300      	str	r3, [sp, #0]
 800f91e:	463a      	mov	r2, r7
 800f920:	4616      	mov	r6, r2
 800f922:	3201      	adds	r2, #1
 800f924:	7830      	ldrb	r0, [r6, #0]
 800f926:	f7ff ff9b 	bl	800f860 <__hexdig_fun>
 800f92a:	2800      	cmp	r0, #0
 800f92c:	d1f8      	bne.n	800f920 <__gethex+0x94>
 800f92e:	9901      	ldr	r1, [sp, #4]
 800f930:	4652      	mov	r2, sl
 800f932:	4630      	mov	r0, r6
 800f934:	f001 f980 	bl	8010c38 <strncmp>
 800f938:	b980      	cbnz	r0, 800f95c <__gethex+0xd0>
 800f93a:	b94d      	cbnz	r5, 800f950 <__gethex+0xc4>
 800f93c:	eb06 050a 	add.w	r5, r6, sl
 800f940:	462a      	mov	r2, r5
 800f942:	4616      	mov	r6, r2
 800f944:	3201      	adds	r2, #1
 800f946:	7830      	ldrb	r0, [r6, #0]
 800f948:	f7ff ff8a 	bl	800f860 <__hexdig_fun>
 800f94c:	2800      	cmp	r0, #0
 800f94e:	d1f8      	bne.n	800f942 <__gethex+0xb6>
 800f950:	1bad      	subs	r5, r5, r6
 800f952:	00ad      	lsls	r5, r5, #2
 800f954:	e004      	b.n	800f960 <__gethex+0xd4>
 800f956:	2400      	movs	r4, #0
 800f958:	4625      	mov	r5, r4
 800f95a:	e7e0      	b.n	800f91e <__gethex+0x92>
 800f95c:	2d00      	cmp	r5, #0
 800f95e:	d1f7      	bne.n	800f950 <__gethex+0xc4>
 800f960:	7833      	ldrb	r3, [r6, #0]
 800f962:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f966:	2b50      	cmp	r3, #80	; 0x50
 800f968:	d13b      	bne.n	800f9e2 <__gethex+0x156>
 800f96a:	7873      	ldrb	r3, [r6, #1]
 800f96c:	2b2b      	cmp	r3, #43	; 0x2b
 800f96e:	d02c      	beq.n	800f9ca <__gethex+0x13e>
 800f970:	2b2d      	cmp	r3, #45	; 0x2d
 800f972:	d02e      	beq.n	800f9d2 <__gethex+0x146>
 800f974:	1c71      	adds	r1, r6, #1
 800f976:	f04f 0900 	mov.w	r9, #0
 800f97a:	7808      	ldrb	r0, [r1, #0]
 800f97c:	f7ff ff70 	bl	800f860 <__hexdig_fun>
 800f980:	1e43      	subs	r3, r0, #1
 800f982:	b2db      	uxtb	r3, r3
 800f984:	2b18      	cmp	r3, #24
 800f986:	d82c      	bhi.n	800f9e2 <__gethex+0x156>
 800f988:	f1a0 0210 	sub.w	r2, r0, #16
 800f98c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f990:	f7ff ff66 	bl	800f860 <__hexdig_fun>
 800f994:	1e43      	subs	r3, r0, #1
 800f996:	b2db      	uxtb	r3, r3
 800f998:	2b18      	cmp	r3, #24
 800f99a:	d91d      	bls.n	800f9d8 <__gethex+0x14c>
 800f99c:	f1b9 0f00 	cmp.w	r9, #0
 800f9a0:	d000      	beq.n	800f9a4 <__gethex+0x118>
 800f9a2:	4252      	negs	r2, r2
 800f9a4:	4415      	add	r5, r2
 800f9a6:	f8cb 1000 	str.w	r1, [fp]
 800f9aa:	b1e4      	cbz	r4, 800f9e6 <__gethex+0x15a>
 800f9ac:	9b00      	ldr	r3, [sp, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	bf14      	ite	ne
 800f9b2:	2700      	movne	r7, #0
 800f9b4:	2706      	moveq	r7, #6
 800f9b6:	4638      	mov	r0, r7
 800f9b8:	b009      	add	sp, #36	; 0x24
 800f9ba:	ecbd 8b02 	vpop	{d8}
 800f9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c2:	463e      	mov	r6, r7
 800f9c4:	4625      	mov	r5, r4
 800f9c6:	2401      	movs	r4, #1
 800f9c8:	e7ca      	b.n	800f960 <__gethex+0xd4>
 800f9ca:	f04f 0900 	mov.w	r9, #0
 800f9ce:	1cb1      	adds	r1, r6, #2
 800f9d0:	e7d3      	b.n	800f97a <__gethex+0xee>
 800f9d2:	f04f 0901 	mov.w	r9, #1
 800f9d6:	e7fa      	b.n	800f9ce <__gethex+0x142>
 800f9d8:	230a      	movs	r3, #10
 800f9da:	fb03 0202 	mla	r2, r3, r2, r0
 800f9de:	3a10      	subs	r2, #16
 800f9e0:	e7d4      	b.n	800f98c <__gethex+0x100>
 800f9e2:	4631      	mov	r1, r6
 800f9e4:	e7df      	b.n	800f9a6 <__gethex+0x11a>
 800f9e6:	1bf3      	subs	r3, r6, r7
 800f9e8:	3b01      	subs	r3, #1
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	2b07      	cmp	r3, #7
 800f9ee:	dc0b      	bgt.n	800fa08 <__gethex+0x17c>
 800f9f0:	ee18 0a10 	vmov	r0, s16
 800f9f4:	f000 fa8e 	bl	800ff14 <_Balloc>
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	b940      	cbnz	r0, 800fa0e <__gethex+0x182>
 800f9fc:	4b65      	ldr	r3, [pc, #404]	; (800fb94 <__gethex+0x308>)
 800f9fe:	4602      	mov	r2, r0
 800fa00:	21de      	movs	r1, #222	; 0xde
 800fa02:	4865      	ldr	r0, [pc, #404]	; (800fb98 <__gethex+0x30c>)
 800fa04:	f001 f938 	bl	8010c78 <__assert_func>
 800fa08:	3101      	adds	r1, #1
 800fa0a:	105b      	asrs	r3, r3, #1
 800fa0c:	e7ee      	b.n	800f9ec <__gethex+0x160>
 800fa0e:	f100 0914 	add.w	r9, r0, #20
 800fa12:	f04f 0b00 	mov.w	fp, #0
 800fa16:	f1ca 0301 	rsb	r3, sl, #1
 800fa1a:	f8cd 9008 	str.w	r9, [sp, #8]
 800fa1e:	f8cd b000 	str.w	fp, [sp]
 800fa22:	9306      	str	r3, [sp, #24]
 800fa24:	42b7      	cmp	r7, r6
 800fa26:	d340      	bcc.n	800faaa <__gethex+0x21e>
 800fa28:	9802      	ldr	r0, [sp, #8]
 800fa2a:	9b00      	ldr	r3, [sp, #0]
 800fa2c:	f840 3b04 	str.w	r3, [r0], #4
 800fa30:	eba0 0009 	sub.w	r0, r0, r9
 800fa34:	1080      	asrs	r0, r0, #2
 800fa36:	0146      	lsls	r6, r0, #5
 800fa38:	6120      	str	r0, [r4, #16]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f000 fb60 	bl	8010100 <__hi0bits>
 800fa40:	1a30      	subs	r0, r6, r0
 800fa42:	f8d8 6000 	ldr.w	r6, [r8]
 800fa46:	42b0      	cmp	r0, r6
 800fa48:	dd63      	ble.n	800fb12 <__gethex+0x286>
 800fa4a:	1b87      	subs	r7, r0, r6
 800fa4c:	4639      	mov	r1, r7
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f000 fefa 	bl	8010848 <__any_on>
 800fa54:	4682      	mov	sl, r0
 800fa56:	b1a8      	cbz	r0, 800fa84 <__gethex+0x1f8>
 800fa58:	1e7b      	subs	r3, r7, #1
 800fa5a:	1159      	asrs	r1, r3, #5
 800fa5c:	f003 021f 	and.w	r2, r3, #31
 800fa60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fa64:	f04f 0a01 	mov.w	sl, #1
 800fa68:	fa0a f202 	lsl.w	r2, sl, r2
 800fa6c:	420a      	tst	r2, r1
 800fa6e:	d009      	beq.n	800fa84 <__gethex+0x1f8>
 800fa70:	4553      	cmp	r3, sl
 800fa72:	dd05      	ble.n	800fa80 <__gethex+0x1f4>
 800fa74:	1eb9      	subs	r1, r7, #2
 800fa76:	4620      	mov	r0, r4
 800fa78:	f000 fee6 	bl	8010848 <__any_on>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d145      	bne.n	800fb0c <__gethex+0x280>
 800fa80:	f04f 0a02 	mov.w	sl, #2
 800fa84:	4639      	mov	r1, r7
 800fa86:	4620      	mov	r0, r4
 800fa88:	f7ff fe98 	bl	800f7bc <rshift>
 800fa8c:	443d      	add	r5, r7
 800fa8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa92:	42ab      	cmp	r3, r5
 800fa94:	da4c      	bge.n	800fb30 <__gethex+0x2a4>
 800fa96:	ee18 0a10 	vmov	r0, s16
 800fa9a:	4621      	mov	r1, r4
 800fa9c:	f000 fa7a 	bl	800ff94 <_Bfree>
 800faa0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800faa2:	2300      	movs	r3, #0
 800faa4:	6013      	str	r3, [r2, #0]
 800faa6:	27a3      	movs	r7, #163	; 0xa3
 800faa8:	e785      	b.n	800f9b6 <__gethex+0x12a>
 800faaa:	1e73      	subs	r3, r6, #1
 800faac:	9a05      	ldr	r2, [sp, #20]
 800faae:	9303      	str	r3, [sp, #12]
 800fab0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d019      	beq.n	800faec <__gethex+0x260>
 800fab8:	f1bb 0f20 	cmp.w	fp, #32
 800fabc:	d107      	bne.n	800face <__gethex+0x242>
 800fabe:	9b02      	ldr	r3, [sp, #8]
 800fac0:	9a00      	ldr	r2, [sp, #0]
 800fac2:	f843 2b04 	str.w	r2, [r3], #4
 800fac6:	9302      	str	r3, [sp, #8]
 800fac8:	2300      	movs	r3, #0
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	469b      	mov	fp, r3
 800face:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fad2:	f7ff fec5 	bl	800f860 <__hexdig_fun>
 800fad6:	9b00      	ldr	r3, [sp, #0]
 800fad8:	f000 000f 	and.w	r0, r0, #15
 800fadc:	fa00 f00b 	lsl.w	r0, r0, fp
 800fae0:	4303      	orrs	r3, r0
 800fae2:	9300      	str	r3, [sp, #0]
 800fae4:	f10b 0b04 	add.w	fp, fp, #4
 800fae8:	9b03      	ldr	r3, [sp, #12]
 800faea:	e00d      	b.n	800fb08 <__gethex+0x27c>
 800faec:	9b03      	ldr	r3, [sp, #12]
 800faee:	9a06      	ldr	r2, [sp, #24]
 800faf0:	4413      	add	r3, r2
 800faf2:	42bb      	cmp	r3, r7
 800faf4:	d3e0      	bcc.n	800fab8 <__gethex+0x22c>
 800faf6:	4618      	mov	r0, r3
 800faf8:	9901      	ldr	r1, [sp, #4]
 800fafa:	9307      	str	r3, [sp, #28]
 800fafc:	4652      	mov	r2, sl
 800fafe:	f001 f89b 	bl	8010c38 <strncmp>
 800fb02:	9b07      	ldr	r3, [sp, #28]
 800fb04:	2800      	cmp	r0, #0
 800fb06:	d1d7      	bne.n	800fab8 <__gethex+0x22c>
 800fb08:	461e      	mov	r6, r3
 800fb0a:	e78b      	b.n	800fa24 <__gethex+0x198>
 800fb0c:	f04f 0a03 	mov.w	sl, #3
 800fb10:	e7b8      	b.n	800fa84 <__gethex+0x1f8>
 800fb12:	da0a      	bge.n	800fb2a <__gethex+0x29e>
 800fb14:	1a37      	subs	r7, r6, r0
 800fb16:	4621      	mov	r1, r4
 800fb18:	ee18 0a10 	vmov	r0, s16
 800fb1c:	463a      	mov	r2, r7
 800fb1e:	f000 fc55 	bl	80103cc <__lshift>
 800fb22:	1bed      	subs	r5, r5, r7
 800fb24:	4604      	mov	r4, r0
 800fb26:	f100 0914 	add.w	r9, r0, #20
 800fb2a:	f04f 0a00 	mov.w	sl, #0
 800fb2e:	e7ae      	b.n	800fa8e <__gethex+0x202>
 800fb30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fb34:	42a8      	cmp	r0, r5
 800fb36:	dd72      	ble.n	800fc1e <__gethex+0x392>
 800fb38:	1b45      	subs	r5, r0, r5
 800fb3a:	42ae      	cmp	r6, r5
 800fb3c:	dc36      	bgt.n	800fbac <__gethex+0x320>
 800fb3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb42:	2b02      	cmp	r3, #2
 800fb44:	d02a      	beq.n	800fb9c <__gethex+0x310>
 800fb46:	2b03      	cmp	r3, #3
 800fb48:	d02c      	beq.n	800fba4 <__gethex+0x318>
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	d115      	bne.n	800fb7a <__gethex+0x2ee>
 800fb4e:	42ae      	cmp	r6, r5
 800fb50:	d113      	bne.n	800fb7a <__gethex+0x2ee>
 800fb52:	2e01      	cmp	r6, #1
 800fb54:	d10b      	bne.n	800fb6e <__gethex+0x2e2>
 800fb56:	9a04      	ldr	r2, [sp, #16]
 800fb58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fb5c:	6013      	str	r3, [r2, #0]
 800fb5e:	2301      	movs	r3, #1
 800fb60:	6123      	str	r3, [r4, #16]
 800fb62:	f8c9 3000 	str.w	r3, [r9]
 800fb66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb68:	2762      	movs	r7, #98	; 0x62
 800fb6a:	601c      	str	r4, [r3, #0]
 800fb6c:	e723      	b.n	800f9b6 <__gethex+0x12a>
 800fb6e:	1e71      	subs	r1, r6, #1
 800fb70:	4620      	mov	r0, r4
 800fb72:	f000 fe69 	bl	8010848 <__any_on>
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d1ed      	bne.n	800fb56 <__gethex+0x2ca>
 800fb7a:	ee18 0a10 	vmov	r0, s16
 800fb7e:	4621      	mov	r1, r4
 800fb80:	f000 fa08 	bl	800ff94 <_Bfree>
 800fb84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fb86:	2300      	movs	r3, #0
 800fb88:	6013      	str	r3, [r2, #0]
 800fb8a:	2750      	movs	r7, #80	; 0x50
 800fb8c:	e713      	b.n	800f9b6 <__gethex+0x12a>
 800fb8e:	bf00      	nop
 800fb90:	08012ce0 	.word	0x08012ce0
 800fb94:	08012c64 	.word	0x08012c64
 800fb98:	08012c75 	.word	0x08012c75
 800fb9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d1eb      	bne.n	800fb7a <__gethex+0x2ee>
 800fba2:	e7d8      	b.n	800fb56 <__gethex+0x2ca>
 800fba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d1d5      	bne.n	800fb56 <__gethex+0x2ca>
 800fbaa:	e7e6      	b.n	800fb7a <__gethex+0x2ee>
 800fbac:	1e6f      	subs	r7, r5, #1
 800fbae:	f1ba 0f00 	cmp.w	sl, #0
 800fbb2:	d131      	bne.n	800fc18 <__gethex+0x38c>
 800fbb4:	b127      	cbz	r7, 800fbc0 <__gethex+0x334>
 800fbb6:	4639      	mov	r1, r7
 800fbb8:	4620      	mov	r0, r4
 800fbba:	f000 fe45 	bl	8010848 <__any_on>
 800fbbe:	4682      	mov	sl, r0
 800fbc0:	117b      	asrs	r3, r7, #5
 800fbc2:	2101      	movs	r1, #1
 800fbc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fbc8:	f007 071f 	and.w	r7, r7, #31
 800fbcc:	fa01 f707 	lsl.w	r7, r1, r7
 800fbd0:	421f      	tst	r7, r3
 800fbd2:	4629      	mov	r1, r5
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	bf18      	it	ne
 800fbd8:	f04a 0a02 	orrne.w	sl, sl, #2
 800fbdc:	1b76      	subs	r6, r6, r5
 800fbde:	f7ff fded 	bl	800f7bc <rshift>
 800fbe2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fbe6:	2702      	movs	r7, #2
 800fbe8:	f1ba 0f00 	cmp.w	sl, #0
 800fbec:	d048      	beq.n	800fc80 <__gethex+0x3f4>
 800fbee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fbf2:	2b02      	cmp	r3, #2
 800fbf4:	d015      	beq.n	800fc22 <__gethex+0x396>
 800fbf6:	2b03      	cmp	r3, #3
 800fbf8:	d017      	beq.n	800fc2a <__gethex+0x39e>
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d109      	bne.n	800fc12 <__gethex+0x386>
 800fbfe:	f01a 0f02 	tst.w	sl, #2
 800fc02:	d006      	beq.n	800fc12 <__gethex+0x386>
 800fc04:	f8d9 0000 	ldr.w	r0, [r9]
 800fc08:	ea4a 0a00 	orr.w	sl, sl, r0
 800fc0c:	f01a 0f01 	tst.w	sl, #1
 800fc10:	d10e      	bne.n	800fc30 <__gethex+0x3a4>
 800fc12:	f047 0710 	orr.w	r7, r7, #16
 800fc16:	e033      	b.n	800fc80 <__gethex+0x3f4>
 800fc18:	f04f 0a01 	mov.w	sl, #1
 800fc1c:	e7d0      	b.n	800fbc0 <__gethex+0x334>
 800fc1e:	2701      	movs	r7, #1
 800fc20:	e7e2      	b.n	800fbe8 <__gethex+0x35c>
 800fc22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc24:	f1c3 0301 	rsb	r3, r3, #1
 800fc28:	9315      	str	r3, [sp, #84]	; 0x54
 800fc2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d0f0      	beq.n	800fc12 <__gethex+0x386>
 800fc30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fc34:	f104 0314 	add.w	r3, r4, #20
 800fc38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fc3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fc40:	f04f 0c00 	mov.w	ip, #0
 800fc44:	4618      	mov	r0, r3
 800fc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fc4e:	d01c      	beq.n	800fc8a <__gethex+0x3fe>
 800fc50:	3201      	adds	r2, #1
 800fc52:	6002      	str	r2, [r0, #0]
 800fc54:	2f02      	cmp	r7, #2
 800fc56:	f104 0314 	add.w	r3, r4, #20
 800fc5a:	d13f      	bne.n	800fcdc <__gethex+0x450>
 800fc5c:	f8d8 2000 	ldr.w	r2, [r8]
 800fc60:	3a01      	subs	r2, #1
 800fc62:	42b2      	cmp	r2, r6
 800fc64:	d10a      	bne.n	800fc7c <__gethex+0x3f0>
 800fc66:	1171      	asrs	r1, r6, #5
 800fc68:	2201      	movs	r2, #1
 800fc6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc6e:	f006 061f 	and.w	r6, r6, #31
 800fc72:	fa02 f606 	lsl.w	r6, r2, r6
 800fc76:	421e      	tst	r6, r3
 800fc78:	bf18      	it	ne
 800fc7a:	4617      	movne	r7, r2
 800fc7c:	f047 0720 	orr.w	r7, r7, #32
 800fc80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc82:	601c      	str	r4, [r3, #0]
 800fc84:	9b04      	ldr	r3, [sp, #16]
 800fc86:	601d      	str	r5, [r3, #0]
 800fc88:	e695      	b.n	800f9b6 <__gethex+0x12a>
 800fc8a:	4299      	cmp	r1, r3
 800fc8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800fc90:	d8d8      	bhi.n	800fc44 <__gethex+0x3b8>
 800fc92:	68a3      	ldr	r3, [r4, #8]
 800fc94:	459b      	cmp	fp, r3
 800fc96:	db19      	blt.n	800fccc <__gethex+0x440>
 800fc98:	6861      	ldr	r1, [r4, #4]
 800fc9a:	ee18 0a10 	vmov	r0, s16
 800fc9e:	3101      	adds	r1, #1
 800fca0:	f000 f938 	bl	800ff14 <_Balloc>
 800fca4:	4681      	mov	r9, r0
 800fca6:	b918      	cbnz	r0, 800fcb0 <__gethex+0x424>
 800fca8:	4b1a      	ldr	r3, [pc, #104]	; (800fd14 <__gethex+0x488>)
 800fcaa:	4602      	mov	r2, r0
 800fcac:	2184      	movs	r1, #132	; 0x84
 800fcae:	e6a8      	b.n	800fa02 <__gethex+0x176>
 800fcb0:	6922      	ldr	r2, [r4, #16]
 800fcb2:	3202      	adds	r2, #2
 800fcb4:	f104 010c 	add.w	r1, r4, #12
 800fcb8:	0092      	lsls	r2, r2, #2
 800fcba:	300c      	adds	r0, #12
 800fcbc:	f7fc ffa1 	bl	800cc02 <memcpy>
 800fcc0:	4621      	mov	r1, r4
 800fcc2:	ee18 0a10 	vmov	r0, s16
 800fcc6:	f000 f965 	bl	800ff94 <_Bfree>
 800fcca:	464c      	mov	r4, r9
 800fccc:	6923      	ldr	r3, [r4, #16]
 800fcce:	1c5a      	adds	r2, r3, #1
 800fcd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fcd4:	6122      	str	r2, [r4, #16]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	615a      	str	r2, [r3, #20]
 800fcda:	e7bb      	b.n	800fc54 <__gethex+0x3c8>
 800fcdc:	6922      	ldr	r2, [r4, #16]
 800fcde:	455a      	cmp	r2, fp
 800fce0:	dd0b      	ble.n	800fcfa <__gethex+0x46e>
 800fce2:	2101      	movs	r1, #1
 800fce4:	4620      	mov	r0, r4
 800fce6:	f7ff fd69 	bl	800f7bc <rshift>
 800fcea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fcee:	3501      	adds	r5, #1
 800fcf0:	42ab      	cmp	r3, r5
 800fcf2:	f6ff aed0 	blt.w	800fa96 <__gethex+0x20a>
 800fcf6:	2701      	movs	r7, #1
 800fcf8:	e7c0      	b.n	800fc7c <__gethex+0x3f0>
 800fcfa:	f016 061f 	ands.w	r6, r6, #31
 800fcfe:	d0fa      	beq.n	800fcf6 <__gethex+0x46a>
 800fd00:	449a      	add	sl, r3
 800fd02:	f1c6 0620 	rsb	r6, r6, #32
 800fd06:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fd0a:	f000 f9f9 	bl	8010100 <__hi0bits>
 800fd0e:	42b0      	cmp	r0, r6
 800fd10:	dbe7      	blt.n	800fce2 <__gethex+0x456>
 800fd12:	e7f0      	b.n	800fcf6 <__gethex+0x46a>
 800fd14:	08012c64 	.word	0x08012c64

0800fd18 <L_shift>:
 800fd18:	f1c2 0208 	rsb	r2, r2, #8
 800fd1c:	0092      	lsls	r2, r2, #2
 800fd1e:	b570      	push	{r4, r5, r6, lr}
 800fd20:	f1c2 0620 	rsb	r6, r2, #32
 800fd24:	6843      	ldr	r3, [r0, #4]
 800fd26:	6804      	ldr	r4, [r0, #0]
 800fd28:	fa03 f506 	lsl.w	r5, r3, r6
 800fd2c:	432c      	orrs	r4, r5
 800fd2e:	40d3      	lsrs	r3, r2
 800fd30:	6004      	str	r4, [r0, #0]
 800fd32:	f840 3f04 	str.w	r3, [r0, #4]!
 800fd36:	4288      	cmp	r0, r1
 800fd38:	d3f4      	bcc.n	800fd24 <L_shift+0xc>
 800fd3a:	bd70      	pop	{r4, r5, r6, pc}

0800fd3c <__match>:
 800fd3c:	b530      	push	{r4, r5, lr}
 800fd3e:	6803      	ldr	r3, [r0, #0]
 800fd40:	3301      	adds	r3, #1
 800fd42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd46:	b914      	cbnz	r4, 800fd4e <__match+0x12>
 800fd48:	6003      	str	r3, [r0, #0]
 800fd4a:	2001      	movs	r0, #1
 800fd4c:	bd30      	pop	{r4, r5, pc}
 800fd4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fd56:	2d19      	cmp	r5, #25
 800fd58:	bf98      	it	ls
 800fd5a:	3220      	addls	r2, #32
 800fd5c:	42a2      	cmp	r2, r4
 800fd5e:	d0f0      	beq.n	800fd42 <__match+0x6>
 800fd60:	2000      	movs	r0, #0
 800fd62:	e7f3      	b.n	800fd4c <__match+0x10>

0800fd64 <__hexnan>:
 800fd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd68:	680b      	ldr	r3, [r1, #0]
 800fd6a:	6801      	ldr	r1, [r0, #0]
 800fd6c:	115e      	asrs	r6, r3, #5
 800fd6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fd72:	f013 031f 	ands.w	r3, r3, #31
 800fd76:	b087      	sub	sp, #28
 800fd78:	bf18      	it	ne
 800fd7a:	3604      	addne	r6, #4
 800fd7c:	2500      	movs	r5, #0
 800fd7e:	1f37      	subs	r7, r6, #4
 800fd80:	4682      	mov	sl, r0
 800fd82:	4690      	mov	r8, r2
 800fd84:	9301      	str	r3, [sp, #4]
 800fd86:	f846 5c04 	str.w	r5, [r6, #-4]
 800fd8a:	46b9      	mov	r9, r7
 800fd8c:	463c      	mov	r4, r7
 800fd8e:	9502      	str	r5, [sp, #8]
 800fd90:	46ab      	mov	fp, r5
 800fd92:	784a      	ldrb	r2, [r1, #1]
 800fd94:	1c4b      	adds	r3, r1, #1
 800fd96:	9303      	str	r3, [sp, #12]
 800fd98:	b342      	cbz	r2, 800fdec <__hexnan+0x88>
 800fd9a:	4610      	mov	r0, r2
 800fd9c:	9105      	str	r1, [sp, #20]
 800fd9e:	9204      	str	r2, [sp, #16]
 800fda0:	f7ff fd5e 	bl	800f860 <__hexdig_fun>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d14f      	bne.n	800fe48 <__hexnan+0xe4>
 800fda8:	9a04      	ldr	r2, [sp, #16]
 800fdaa:	9905      	ldr	r1, [sp, #20]
 800fdac:	2a20      	cmp	r2, #32
 800fdae:	d818      	bhi.n	800fde2 <__hexnan+0x7e>
 800fdb0:	9b02      	ldr	r3, [sp, #8]
 800fdb2:	459b      	cmp	fp, r3
 800fdb4:	dd13      	ble.n	800fdde <__hexnan+0x7a>
 800fdb6:	454c      	cmp	r4, r9
 800fdb8:	d206      	bcs.n	800fdc8 <__hexnan+0x64>
 800fdba:	2d07      	cmp	r5, #7
 800fdbc:	dc04      	bgt.n	800fdc8 <__hexnan+0x64>
 800fdbe:	462a      	mov	r2, r5
 800fdc0:	4649      	mov	r1, r9
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f7ff ffa8 	bl	800fd18 <L_shift>
 800fdc8:	4544      	cmp	r4, r8
 800fdca:	d950      	bls.n	800fe6e <__hexnan+0x10a>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	f1a4 0904 	sub.w	r9, r4, #4
 800fdd2:	f844 3c04 	str.w	r3, [r4, #-4]
 800fdd6:	f8cd b008 	str.w	fp, [sp, #8]
 800fdda:	464c      	mov	r4, r9
 800fddc:	461d      	mov	r5, r3
 800fdde:	9903      	ldr	r1, [sp, #12]
 800fde0:	e7d7      	b.n	800fd92 <__hexnan+0x2e>
 800fde2:	2a29      	cmp	r2, #41	; 0x29
 800fde4:	d156      	bne.n	800fe94 <__hexnan+0x130>
 800fde6:	3102      	adds	r1, #2
 800fde8:	f8ca 1000 	str.w	r1, [sl]
 800fdec:	f1bb 0f00 	cmp.w	fp, #0
 800fdf0:	d050      	beq.n	800fe94 <__hexnan+0x130>
 800fdf2:	454c      	cmp	r4, r9
 800fdf4:	d206      	bcs.n	800fe04 <__hexnan+0xa0>
 800fdf6:	2d07      	cmp	r5, #7
 800fdf8:	dc04      	bgt.n	800fe04 <__hexnan+0xa0>
 800fdfa:	462a      	mov	r2, r5
 800fdfc:	4649      	mov	r1, r9
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f7ff ff8a 	bl	800fd18 <L_shift>
 800fe04:	4544      	cmp	r4, r8
 800fe06:	d934      	bls.n	800fe72 <__hexnan+0x10e>
 800fe08:	f1a8 0204 	sub.w	r2, r8, #4
 800fe0c:	4623      	mov	r3, r4
 800fe0e:	f853 1b04 	ldr.w	r1, [r3], #4
 800fe12:	f842 1f04 	str.w	r1, [r2, #4]!
 800fe16:	429f      	cmp	r7, r3
 800fe18:	d2f9      	bcs.n	800fe0e <__hexnan+0xaa>
 800fe1a:	1b3b      	subs	r3, r7, r4
 800fe1c:	f023 0303 	bic.w	r3, r3, #3
 800fe20:	3304      	adds	r3, #4
 800fe22:	3401      	adds	r4, #1
 800fe24:	3e03      	subs	r6, #3
 800fe26:	42b4      	cmp	r4, r6
 800fe28:	bf88      	it	hi
 800fe2a:	2304      	movhi	r3, #4
 800fe2c:	4443      	add	r3, r8
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f843 2b04 	str.w	r2, [r3], #4
 800fe34:	429f      	cmp	r7, r3
 800fe36:	d2fb      	bcs.n	800fe30 <__hexnan+0xcc>
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	b91b      	cbnz	r3, 800fe44 <__hexnan+0xe0>
 800fe3c:	4547      	cmp	r7, r8
 800fe3e:	d127      	bne.n	800fe90 <__hexnan+0x12c>
 800fe40:	2301      	movs	r3, #1
 800fe42:	603b      	str	r3, [r7, #0]
 800fe44:	2005      	movs	r0, #5
 800fe46:	e026      	b.n	800fe96 <__hexnan+0x132>
 800fe48:	3501      	adds	r5, #1
 800fe4a:	2d08      	cmp	r5, #8
 800fe4c:	f10b 0b01 	add.w	fp, fp, #1
 800fe50:	dd06      	ble.n	800fe60 <__hexnan+0xfc>
 800fe52:	4544      	cmp	r4, r8
 800fe54:	d9c3      	bls.n	800fdde <__hexnan+0x7a>
 800fe56:	2300      	movs	r3, #0
 800fe58:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe5c:	2501      	movs	r5, #1
 800fe5e:	3c04      	subs	r4, #4
 800fe60:	6822      	ldr	r2, [r4, #0]
 800fe62:	f000 000f 	and.w	r0, r0, #15
 800fe66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fe6a:	6022      	str	r2, [r4, #0]
 800fe6c:	e7b7      	b.n	800fdde <__hexnan+0x7a>
 800fe6e:	2508      	movs	r5, #8
 800fe70:	e7b5      	b.n	800fdde <__hexnan+0x7a>
 800fe72:	9b01      	ldr	r3, [sp, #4]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d0df      	beq.n	800fe38 <__hexnan+0xd4>
 800fe78:	f04f 32ff 	mov.w	r2, #4294967295
 800fe7c:	f1c3 0320 	rsb	r3, r3, #32
 800fe80:	fa22 f303 	lsr.w	r3, r2, r3
 800fe84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fe88:	401a      	ands	r2, r3
 800fe8a:	f846 2c04 	str.w	r2, [r6, #-4]
 800fe8e:	e7d3      	b.n	800fe38 <__hexnan+0xd4>
 800fe90:	3f04      	subs	r7, #4
 800fe92:	e7d1      	b.n	800fe38 <__hexnan+0xd4>
 800fe94:	2004      	movs	r0, #4
 800fe96:	b007      	add	sp, #28
 800fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe9c <_localeconv_r>:
 800fe9c:	4800      	ldr	r0, [pc, #0]	; (800fea0 <_localeconv_r+0x4>)
 800fe9e:	4770      	bx	lr
 800fea0:	20000198 	.word	0x20000198

0800fea4 <_lseek_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	4d07      	ldr	r5, [pc, #28]	; (800fec4 <_lseek_r+0x20>)
 800fea8:	4604      	mov	r4, r0
 800feaa:	4608      	mov	r0, r1
 800feac:	4611      	mov	r1, r2
 800feae:	2200      	movs	r2, #0
 800feb0:	602a      	str	r2, [r5, #0]
 800feb2:	461a      	mov	r2, r3
 800feb4:	f7f3 fecc 	bl	8003c50 <_lseek>
 800feb8:	1c43      	adds	r3, r0, #1
 800feba:	d102      	bne.n	800fec2 <_lseek_r+0x1e>
 800febc:	682b      	ldr	r3, [r5, #0]
 800febe:	b103      	cbz	r3, 800fec2 <_lseek_r+0x1e>
 800fec0:	6023      	str	r3, [r4, #0]
 800fec2:	bd38      	pop	{r3, r4, r5, pc}
 800fec4:	200062d4 	.word	0x200062d4

0800fec8 <malloc>:
 800fec8:	4b02      	ldr	r3, [pc, #8]	; (800fed4 <malloc+0xc>)
 800feca:	4601      	mov	r1, r0
 800fecc:	6818      	ldr	r0, [r3, #0]
 800fece:	f7fc beaf 	b.w	800cc30 <_malloc_r>
 800fed2:	bf00      	nop
 800fed4:	20000040 	.word	0x20000040

0800fed8 <__ascii_mbtowc>:
 800fed8:	b082      	sub	sp, #8
 800feda:	b901      	cbnz	r1, 800fede <__ascii_mbtowc+0x6>
 800fedc:	a901      	add	r1, sp, #4
 800fede:	b142      	cbz	r2, 800fef2 <__ascii_mbtowc+0x1a>
 800fee0:	b14b      	cbz	r3, 800fef6 <__ascii_mbtowc+0x1e>
 800fee2:	7813      	ldrb	r3, [r2, #0]
 800fee4:	600b      	str	r3, [r1, #0]
 800fee6:	7812      	ldrb	r2, [r2, #0]
 800fee8:	1e10      	subs	r0, r2, #0
 800feea:	bf18      	it	ne
 800feec:	2001      	movne	r0, #1
 800feee:	b002      	add	sp, #8
 800fef0:	4770      	bx	lr
 800fef2:	4610      	mov	r0, r2
 800fef4:	e7fb      	b.n	800feee <__ascii_mbtowc+0x16>
 800fef6:	f06f 0001 	mvn.w	r0, #1
 800fefa:	e7f8      	b.n	800feee <__ascii_mbtowc+0x16>

0800fefc <__malloc_lock>:
 800fefc:	4801      	ldr	r0, [pc, #4]	; (800ff04 <__malloc_lock+0x8>)
 800fefe:	f7fc be7e 	b.w	800cbfe <__retarget_lock_acquire_recursive>
 800ff02:	bf00      	nop
 800ff04:	200062cc 	.word	0x200062cc

0800ff08 <__malloc_unlock>:
 800ff08:	4801      	ldr	r0, [pc, #4]	; (800ff10 <__malloc_unlock+0x8>)
 800ff0a:	f7fc be79 	b.w	800cc00 <__retarget_lock_release_recursive>
 800ff0e:	bf00      	nop
 800ff10:	200062cc 	.word	0x200062cc

0800ff14 <_Balloc>:
 800ff14:	b570      	push	{r4, r5, r6, lr}
 800ff16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ff18:	4604      	mov	r4, r0
 800ff1a:	460d      	mov	r5, r1
 800ff1c:	b976      	cbnz	r6, 800ff3c <_Balloc+0x28>
 800ff1e:	2010      	movs	r0, #16
 800ff20:	f7ff ffd2 	bl	800fec8 <malloc>
 800ff24:	4602      	mov	r2, r0
 800ff26:	6260      	str	r0, [r4, #36]	; 0x24
 800ff28:	b920      	cbnz	r0, 800ff34 <_Balloc+0x20>
 800ff2a:	4b18      	ldr	r3, [pc, #96]	; (800ff8c <_Balloc+0x78>)
 800ff2c:	4818      	ldr	r0, [pc, #96]	; (800ff90 <_Balloc+0x7c>)
 800ff2e:	2166      	movs	r1, #102	; 0x66
 800ff30:	f000 fea2 	bl	8010c78 <__assert_func>
 800ff34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff38:	6006      	str	r6, [r0, #0]
 800ff3a:	60c6      	str	r6, [r0, #12]
 800ff3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ff3e:	68f3      	ldr	r3, [r6, #12]
 800ff40:	b183      	cbz	r3, 800ff64 <_Balloc+0x50>
 800ff42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff4a:	b9b8      	cbnz	r0, 800ff7c <_Balloc+0x68>
 800ff4c:	2101      	movs	r1, #1
 800ff4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ff52:	1d72      	adds	r2, r6, #5
 800ff54:	0092      	lsls	r2, r2, #2
 800ff56:	4620      	mov	r0, r4
 800ff58:	f000 fc97 	bl	801088a <_calloc_r>
 800ff5c:	b160      	cbz	r0, 800ff78 <_Balloc+0x64>
 800ff5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff62:	e00e      	b.n	800ff82 <_Balloc+0x6e>
 800ff64:	2221      	movs	r2, #33	; 0x21
 800ff66:	2104      	movs	r1, #4
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f000 fc8e 	bl	801088a <_calloc_r>
 800ff6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff70:	60f0      	str	r0, [r6, #12]
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1e4      	bne.n	800ff42 <_Balloc+0x2e>
 800ff78:	2000      	movs	r0, #0
 800ff7a:	bd70      	pop	{r4, r5, r6, pc}
 800ff7c:	6802      	ldr	r2, [r0, #0]
 800ff7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff82:	2300      	movs	r3, #0
 800ff84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff88:	e7f7      	b.n	800ff7a <_Balloc+0x66>
 800ff8a:	bf00      	nop
 800ff8c:	08012bee 	.word	0x08012bee
 800ff90:	08012cf4 	.word	0x08012cf4

0800ff94 <_Bfree>:
 800ff94:	b570      	push	{r4, r5, r6, lr}
 800ff96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ff98:	4605      	mov	r5, r0
 800ff9a:	460c      	mov	r4, r1
 800ff9c:	b976      	cbnz	r6, 800ffbc <_Bfree+0x28>
 800ff9e:	2010      	movs	r0, #16
 800ffa0:	f7ff ff92 	bl	800fec8 <malloc>
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	6268      	str	r0, [r5, #36]	; 0x24
 800ffa8:	b920      	cbnz	r0, 800ffb4 <_Bfree+0x20>
 800ffaa:	4b09      	ldr	r3, [pc, #36]	; (800ffd0 <_Bfree+0x3c>)
 800ffac:	4809      	ldr	r0, [pc, #36]	; (800ffd4 <_Bfree+0x40>)
 800ffae:	218a      	movs	r1, #138	; 0x8a
 800ffb0:	f000 fe62 	bl	8010c78 <__assert_func>
 800ffb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffb8:	6006      	str	r6, [r0, #0]
 800ffba:	60c6      	str	r6, [r0, #12]
 800ffbc:	b13c      	cbz	r4, 800ffce <_Bfree+0x3a>
 800ffbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ffc0:	6862      	ldr	r2, [r4, #4]
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ffc8:	6021      	str	r1, [r4, #0]
 800ffca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ffce:	bd70      	pop	{r4, r5, r6, pc}
 800ffd0:	08012bee 	.word	0x08012bee
 800ffd4:	08012cf4 	.word	0x08012cf4

0800ffd8 <__multadd>:
 800ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffdc:	690e      	ldr	r6, [r1, #16]
 800ffde:	4607      	mov	r7, r0
 800ffe0:	4698      	mov	r8, r3
 800ffe2:	460c      	mov	r4, r1
 800ffe4:	f101 0014 	add.w	r0, r1, #20
 800ffe8:	2300      	movs	r3, #0
 800ffea:	6805      	ldr	r5, [r0, #0]
 800ffec:	b2a9      	uxth	r1, r5
 800ffee:	fb02 8101 	mla	r1, r2, r1, r8
 800fff2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fff6:	0c2d      	lsrs	r5, r5, #16
 800fff8:	fb02 c505 	mla	r5, r2, r5, ip
 800fffc:	b289      	uxth	r1, r1
 800fffe:	3301      	adds	r3, #1
 8010000:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010004:	429e      	cmp	r6, r3
 8010006:	f840 1b04 	str.w	r1, [r0], #4
 801000a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801000e:	dcec      	bgt.n	800ffea <__multadd+0x12>
 8010010:	f1b8 0f00 	cmp.w	r8, #0
 8010014:	d022      	beq.n	801005c <__multadd+0x84>
 8010016:	68a3      	ldr	r3, [r4, #8]
 8010018:	42b3      	cmp	r3, r6
 801001a:	dc19      	bgt.n	8010050 <__multadd+0x78>
 801001c:	6861      	ldr	r1, [r4, #4]
 801001e:	4638      	mov	r0, r7
 8010020:	3101      	adds	r1, #1
 8010022:	f7ff ff77 	bl	800ff14 <_Balloc>
 8010026:	4605      	mov	r5, r0
 8010028:	b928      	cbnz	r0, 8010036 <__multadd+0x5e>
 801002a:	4602      	mov	r2, r0
 801002c:	4b0d      	ldr	r3, [pc, #52]	; (8010064 <__multadd+0x8c>)
 801002e:	480e      	ldr	r0, [pc, #56]	; (8010068 <__multadd+0x90>)
 8010030:	21b5      	movs	r1, #181	; 0xb5
 8010032:	f000 fe21 	bl	8010c78 <__assert_func>
 8010036:	6922      	ldr	r2, [r4, #16]
 8010038:	3202      	adds	r2, #2
 801003a:	f104 010c 	add.w	r1, r4, #12
 801003e:	0092      	lsls	r2, r2, #2
 8010040:	300c      	adds	r0, #12
 8010042:	f7fc fdde 	bl	800cc02 <memcpy>
 8010046:	4621      	mov	r1, r4
 8010048:	4638      	mov	r0, r7
 801004a:	f7ff ffa3 	bl	800ff94 <_Bfree>
 801004e:	462c      	mov	r4, r5
 8010050:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010054:	3601      	adds	r6, #1
 8010056:	f8c3 8014 	str.w	r8, [r3, #20]
 801005a:	6126      	str	r6, [r4, #16]
 801005c:	4620      	mov	r0, r4
 801005e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010062:	bf00      	nop
 8010064:	08012c64 	.word	0x08012c64
 8010068:	08012cf4 	.word	0x08012cf4

0801006c <__s2b>:
 801006c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010070:	460c      	mov	r4, r1
 8010072:	4615      	mov	r5, r2
 8010074:	461f      	mov	r7, r3
 8010076:	2209      	movs	r2, #9
 8010078:	3308      	adds	r3, #8
 801007a:	4606      	mov	r6, r0
 801007c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010080:	2100      	movs	r1, #0
 8010082:	2201      	movs	r2, #1
 8010084:	429a      	cmp	r2, r3
 8010086:	db09      	blt.n	801009c <__s2b+0x30>
 8010088:	4630      	mov	r0, r6
 801008a:	f7ff ff43 	bl	800ff14 <_Balloc>
 801008e:	b940      	cbnz	r0, 80100a2 <__s2b+0x36>
 8010090:	4602      	mov	r2, r0
 8010092:	4b19      	ldr	r3, [pc, #100]	; (80100f8 <__s2b+0x8c>)
 8010094:	4819      	ldr	r0, [pc, #100]	; (80100fc <__s2b+0x90>)
 8010096:	21ce      	movs	r1, #206	; 0xce
 8010098:	f000 fdee 	bl	8010c78 <__assert_func>
 801009c:	0052      	lsls	r2, r2, #1
 801009e:	3101      	adds	r1, #1
 80100a0:	e7f0      	b.n	8010084 <__s2b+0x18>
 80100a2:	9b08      	ldr	r3, [sp, #32]
 80100a4:	6143      	str	r3, [r0, #20]
 80100a6:	2d09      	cmp	r5, #9
 80100a8:	f04f 0301 	mov.w	r3, #1
 80100ac:	6103      	str	r3, [r0, #16]
 80100ae:	dd16      	ble.n	80100de <__s2b+0x72>
 80100b0:	f104 0909 	add.w	r9, r4, #9
 80100b4:	46c8      	mov	r8, r9
 80100b6:	442c      	add	r4, r5
 80100b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80100bc:	4601      	mov	r1, r0
 80100be:	3b30      	subs	r3, #48	; 0x30
 80100c0:	220a      	movs	r2, #10
 80100c2:	4630      	mov	r0, r6
 80100c4:	f7ff ff88 	bl	800ffd8 <__multadd>
 80100c8:	45a0      	cmp	r8, r4
 80100ca:	d1f5      	bne.n	80100b8 <__s2b+0x4c>
 80100cc:	f1a5 0408 	sub.w	r4, r5, #8
 80100d0:	444c      	add	r4, r9
 80100d2:	1b2d      	subs	r5, r5, r4
 80100d4:	1963      	adds	r3, r4, r5
 80100d6:	42bb      	cmp	r3, r7
 80100d8:	db04      	blt.n	80100e4 <__s2b+0x78>
 80100da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100de:	340a      	adds	r4, #10
 80100e0:	2509      	movs	r5, #9
 80100e2:	e7f6      	b.n	80100d2 <__s2b+0x66>
 80100e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80100e8:	4601      	mov	r1, r0
 80100ea:	3b30      	subs	r3, #48	; 0x30
 80100ec:	220a      	movs	r2, #10
 80100ee:	4630      	mov	r0, r6
 80100f0:	f7ff ff72 	bl	800ffd8 <__multadd>
 80100f4:	e7ee      	b.n	80100d4 <__s2b+0x68>
 80100f6:	bf00      	nop
 80100f8:	08012c64 	.word	0x08012c64
 80100fc:	08012cf4 	.word	0x08012cf4

08010100 <__hi0bits>:
 8010100:	0c03      	lsrs	r3, r0, #16
 8010102:	041b      	lsls	r3, r3, #16
 8010104:	b9d3      	cbnz	r3, 801013c <__hi0bits+0x3c>
 8010106:	0400      	lsls	r0, r0, #16
 8010108:	2310      	movs	r3, #16
 801010a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801010e:	bf04      	itt	eq
 8010110:	0200      	lsleq	r0, r0, #8
 8010112:	3308      	addeq	r3, #8
 8010114:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010118:	bf04      	itt	eq
 801011a:	0100      	lsleq	r0, r0, #4
 801011c:	3304      	addeq	r3, #4
 801011e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010122:	bf04      	itt	eq
 8010124:	0080      	lsleq	r0, r0, #2
 8010126:	3302      	addeq	r3, #2
 8010128:	2800      	cmp	r0, #0
 801012a:	db05      	blt.n	8010138 <__hi0bits+0x38>
 801012c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010130:	f103 0301 	add.w	r3, r3, #1
 8010134:	bf08      	it	eq
 8010136:	2320      	moveq	r3, #32
 8010138:	4618      	mov	r0, r3
 801013a:	4770      	bx	lr
 801013c:	2300      	movs	r3, #0
 801013e:	e7e4      	b.n	801010a <__hi0bits+0xa>

08010140 <__lo0bits>:
 8010140:	6803      	ldr	r3, [r0, #0]
 8010142:	f013 0207 	ands.w	r2, r3, #7
 8010146:	4601      	mov	r1, r0
 8010148:	d00b      	beq.n	8010162 <__lo0bits+0x22>
 801014a:	07da      	lsls	r2, r3, #31
 801014c:	d424      	bmi.n	8010198 <__lo0bits+0x58>
 801014e:	0798      	lsls	r0, r3, #30
 8010150:	bf49      	itett	mi
 8010152:	085b      	lsrmi	r3, r3, #1
 8010154:	089b      	lsrpl	r3, r3, #2
 8010156:	2001      	movmi	r0, #1
 8010158:	600b      	strmi	r3, [r1, #0]
 801015a:	bf5c      	itt	pl
 801015c:	600b      	strpl	r3, [r1, #0]
 801015e:	2002      	movpl	r0, #2
 8010160:	4770      	bx	lr
 8010162:	b298      	uxth	r0, r3
 8010164:	b9b0      	cbnz	r0, 8010194 <__lo0bits+0x54>
 8010166:	0c1b      	lsrs	r3, r3, #16
 8010168:	2010      	movs	r0, #16
 801016a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801016e:	bf04      	itt	eq
 8010170:	0a1b      	lsreq	r3, r3, #8
 8010172:	3008      	addeq	r0, #8
 8010174:	071a      	lsls	r2, r3, #28
 8010176:	bf04      	itt	eq
 8010178:	091b      	lsreq	r3, r3, #4
 801017a:	3004      	addeq	r0, #4
 801017c:	079a      	lsls	r2, r3, #30
 801017e:	bf04      	itt	eq
 8010180:	089b      	lsreq	r3, r3, #2
 8010182:	3002      	addeq	r0, #2
 8010184:	07da      	lsls	r2, r3, #31
 8010186:	d403      	bmi.n	8010190 <__lo0bits+0x50>
 8010188:	085b      	lsrs	r3, r3, #1
 801018a:	f100 0001 	add.w	r0, r0, #1
 801018e:	d005      	beq.n	801019c <__lo0bits+0x5c>
 8010190:	600b      	str	r3, [r1, #0]
 8010192:	4770      	bx	lr
 8010194:	4610      	mov	r0, r2
 8010196:	e7e8      	b.n	801016a <__lo0bits+0x2a>
 8010198:	2000      	movs	r0, #0
 801019a:	4770      	bx	lr
 801019c:	2020      	movs	r0, #32
 801019e:	4770      	bx	lr

080101a0 <__i2b>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	460c      	mov	r4, r1
 80101a4:	2101      	movs	r1, #1
 80101a6:	f7ff feb5 	bl	800ff14 <_Balloc>
 80101aa:	4602      	mov	r2, r0
 80101ac:	b928      	cbnz	r0, 80101ba <__i2b+0x1a>
 80101ae:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <__i2b+0x24>)
 80101b0:	4805      	ldr	r0, [pc, #20]	; (80101c8 <__i2b+0x28>)
 80101b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80101b6:	f000 fd5f 	bl	8010c78 <__assert_func>
 80101ba:	2301      	movs	r3, #1
 80101bc:	6144      	str	r4, [r0, #20]
 80101be:	6103      	str	r3, [r0, #16]
 80101c0:	bd10      	pop	{r4, pc}
 80101c2:	bf00      	nop
 80101c4:	08012c64 	.word	0x08012c64
 80101c8:	08012cf4 	.word	0x08012cf4

080101cc <__multiply>:
 80101cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d0:	4614      	mov	r4, r2
 80101d2:	690a      	ldr	r2, [r1, #16]
 80101d4:	6923      	ldr	r3, [r4, #16]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	bfb8      	it	lt
 80101da:	460b      	movlt	r3, r1
 80101dc:	460d      	mov	r5, r1
 80101de:	bfbc      	itt	lt
 80101e0:	4625      	movlt	r5, r4
 80101e2:	461c      	movlt	r4, r3
 80101e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80101e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80101ec:	68ab      	ldr	r3, [r5, #8]
 80101ee:	6869      	ldr	r1, [r5, #4]
 80101f0:	eb0a 0709 	add.w	r7, sl, r9
 80101f4:	42bb      	cmp	r3, r7
 80101f6:	b085      	sub	sp, #20
 80101f8:	bfb8      	it	lt
 80101fa:	3101      	addlt	r1, #1
 80101fc:	f7ff fe8a 	bl	800ff14 <_Balloc>
 8010200:	b930      	cbnz	r0, 8010210 <__multiply+0x44>
 8010202:	4602      	mov	r2, r0
 8010204:	4b42      	ldr	r3, [pc, #264]	; (8010310 <__multiply+0x144>)
 8010206:	4843      	ldr	r0, [pc, #268]	; (8010314 <__multiply+0x148>)
 8010208:	f240 115d 	movw	r1, #349	; 0x15d
 801020c:	f000 fd34 	bl	8010c78 <__assert_func>
 8010210:	f100 0614 	add.w	r6, r0, #20
 8010214:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010218:	4633      	mov	r3, r6
 801021a:	2200      	movs	r2, #0
 801021c:	4543      	cmp	r3, r8
 801021e:	d31e      	bcc.n	801025e <__multiply+0x92>
 8010220:	f105 0c14 	add.w	ip, r5, #20
 8010224:	f104 0314 	add.w	r3, r4, #20
 8010228:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801022c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010230:	9202      	str	r2, [sp, #8]
 8010232:	ebac 0205 	sub.w	r2, ip, r5
 8010236:	3a15      	subs	r2, #21
 8010238:	f022 0203 	bic.w	r2, r2, #3
 801023c:	3204      	adds	r2, #4
 801023e:	f105 0115 	add.w	r1, r5, #21
 8010242:	458c      	cmp	ip, r1
 8010244:	bf38      	it	cc
 8010246:	2204      	movcc	r2, #4
 8010248:	9201      	str	r2, [sp, #4]
 801024a:	9a02      	ldr	r2, [sp, #8]
 801024c:	9303      	str	r3, [sp, #12]
 801024e:	429a      	cmp	r2, r3
 8010250:	d808      	bhi.n	8010264 <__multiply+0x98>
 8010252:	2f00      	cmp	r7, #0
 8010254:	dc55      	bgt.n	8010302 <__multiply+0x136>
 8010256:	6107      	str	r7, [r0, #16]
 8010258:	b005      	add	sp, #20
 801025a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025e:	f843 2b04 	str.w	r2, [r3], #4
 8010262:	e7db      	b.n	801021c <__multiply+0x50>
 8010264:	f8b3 a000 	ldrh.w	sl, [r3]
 8010268:	f1ba 0f00 	cmp.w	sl, #0
 801026c:	d020      	beq.n	80102b0 <__multiply+0xe4>
 801026e:	f105 0e14 	add.w	lr, r5, #20
 8010272:	46b1      	mov	r9, r6
 8010274:	2200      	movs	r2, #0
 8010276:	f85e 4b04 	ldr.w	r4, [lr], #4
 801027a:	f8d9 b000 	ldr.w	fp, [r9]
 801027e:	b2a1      	uxth	r1, r4
 8010280:	fa1f fb8b 	uxth.w	fp, fp
 8010284:	fb0a b101 	mla	r1, sl, r1, fp
 8010288:	4411      	add	r1, r2
 801028a:	f8d9 2000 	ldr.w	r2, [r9]
 801028e:	0c24      	lsrs	r4, r4, #16
 8010290:	0c12      	lsrs	r2, r2, #16
 8010292:	fb0a 2404 	mla	r4, sl, r4, r2
 8010296:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801029a:	b289      	uxth	r1, r1
 801029c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80102a0:	45f4      	cmp	ip, lr
 80102a2:	f849 1b04 	str.w	r1, [r9], #4
 80102a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80102aa:	d8e4      	bhi.n	8010276 <__multiply+0xaa>
 80102ac:	9901      	ldr	r1, [sp, #4]
 80102ae:	5072      	str	r2, [r6, r1]
 80102b0:	9a03      	ldr	r2, [sp, #12]
 80102b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80102b6:	3304      	adds	r3, #4
 80102b8:	f1b9 0f00 	cmp.w	r9, #0
 80102bc:	d01f      	beq.n	80102fe <__multiply+0x132>
 80102be:	6834      	ldr	r4, [r6, #0]
 80102c0:	f105 0114 	add.w	r1, r5, #20
 80102c4:	46b6      	mov	lr, r6
 80102c6:	f04f 0a00 	mov.w	sl, #0
 80102ca:	880a      	ldrh	r2, [r1, #0]
 80102cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80102d0:	fb09 b202 	mla	r2, r9, r2, fp
 80102d4:	4492      	add	sl, r2
 80102d6:	b2a4      	uxth	r4, r4
 80102d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80102dc:	f84e 4b04 	str.w	r4, [lr], #4
 80102e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80102e4:	f8be 2000 	ldrh.w	r2, [lr]
 80102e8:	0c24      	lsrs	r4, r4, #16
 80102ea:	fb09 2404 	mla	r4, r9, r4, r2
 80102ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80102f2:	458c      	cmp	ip, r1
 80102f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80102f8:	d8e7      	bhi.n	80102ca <__multiply+0xfe>
 80102fa:	9a01      	ldr	r2, [sp, #4]
 80102fc:	50b4      	str	r4, [r6, r2]
 80102fe:	3604      	adds	r6, #4
 8010300:	e7a3      	b.n	801024a <__multiply+0x7e>
 8010302:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010306:	2b00      	cmp	r3, #0
 8010308:	d1a5      	bne.n	8010256 <__multiply+0x8a>
 801030a:	3f01      	subs	r7, #1
 801030c:	e7a1      	b.n	8010252 <__multiply+0x86>
 801030e:	bf00      	nop
 8010310:	08012c64 	.word	0x08012c64
 8010314:	08012cf4 	.word	0x08012cf4

08010318 <__pow5mult>:
 8010318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801031c:	4615      	mov	r5, r2
 801031e:	f012 0203 	ands.w	r2, r2, #3
 8010322:	4606      	mov	r6, r0
 8010324:	460f      	mov	r7, r1
 8010326:	d007      	beq.n	8010338 <__pow5mult+0x20>
 8010328:	4c25      	ldr	r4, [pc, #148]	; (80103c0 <__pow5mult+0xa8>)
 801032a:	3a01      	subs	r2, #1
 801032c:	2300      	movs	r3, #0
 801032e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010332:	f7ff fe51 	bl	800ffd8 <__multadd>
 8010336:	4607      	mov	r7, r0
 8010338:	10ad      	asrs	r5, r5, #2
 801033a:	d03d      	beq.n	80103b8 <__pow5mult+0xa0>
 801033c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801033e:	b97c      	cbnz	r4, 8010360 <__pow5mult+0x48>
 8010340:	2010      	movs	r0, #16
 8010342:	f7ff fdc1 	bl	800fec8 <malloc>
 8010346:	4602      	mov	r2, r0
 8010348:	6270      	str	r0, [r6, #36]	; 0x24
 801034a:	b928      	cbnz	r0, 8010358 <__pow5mult+0x40>
 801034c:	4b1d      	ldr	r3, [pc, #116]	; (80103c4 <__pow5mult+0xac>)
 801034e:	481e      	ldr	r0, [pc, #120]	; (80103c8 <__pow5mult+0xb0>)
 8010350:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010354:	f000 fc90 	bl	8010c78 <__assert_func>
 8010358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801035c:	6004      	str	r4, [r0, #0]
 801035e:	60c4      	str	r4, [r0, #12]
 8010360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010368:	b94c      	cbnz	r4, 801037e <__pow5mult+0x66>
 801036a:	f240 2171 	movw	r1, #625	; 0x271
 801036e:	4630      	mov	r0, r6
 8010370:	f7ff ff16 	bl	80101a0 <__i2b>
 8010374:	2300      	movs	r3, #0
 8010376:	f8c8 0008 	str.w	r0, [r8, #8]
 801037a:	4604      	mov	r4, r0
 801037c:	6003      	str	r3, [r0, #0]
 801037e:	f04f 0900 	mov.w	r9, #0
 8010382:	07eb      	lsls	r3, r5, #31
 8010384:	d50a      	bpl.n	801039c <__pow5mult+0x84>
 8010386:	4639      	mov	r1, r7
 8010388:	4622      	mov	r2, r4
 801038a:	4630      	mov	r0, r6
 801038c:	f7ff ff1e 	bl	80101cc <__multiply>
 8010390:	4639      	mov	r1, r7
 8010392:	4680      	mov	r8, r0
 8010394:	4630      	mov	r0, r6
 8010396:	f7ff fdfd 	bl	800ff94 <_Bfree>
 801039a:	4647      	mov	r7, r8
 801039c:	106d      	asrs	r5, r5, #1
 801039e:	d00b      	beq.n	80103b8 <__pow5mult+0xa0>
 80103a0:	6820      	ldr	r0, [r4, #0]
 80103a2:	b938      	cbnz	r0, 80103b4 <__pow5mult+0x9c>
 80103a4:	4622      	mov	r2, r4
 80103a6:	4621      	mov	r1, r4
 80103a8:	4630      	mov	r0, r6
 80103aa:	f7ff ff0f 	bl	80101cc <__multiply>
 80103ae:	6020      	str	r0, [r4, #0]
 80103b0:	f8c0 9000 	str.w	r9, [r0]
 80103b4:	4604      	mov	r4, r0
 80103b6:	e7e4      	b.n	8010382 <__pow5mult+0x6a>
 80103b8:	4638      	mov	r0, r7
 80103ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103be:	bf00      	nop
 80103c0:	08012e48 	.word	0x08012e48
 80103c4:	08012bee 	.word	0x08012bee
 80103c8:	08012cf4 	.word	0x08012cf4

080103cc <__lshift>:
 80103cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103d0:	460c      	mov	r4, r1
 80103d2:	6849      	ldr	r1, [r1, #4]
 80103d4:	6923      	ldr	r3, [r4, #16]
 80103d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80103da:	68a3      	ldr	r3, [r4, #8]
 80103dc:	4607      	mov	r7, r0
 80103de:	4691      	mov	r9, r2
 80103e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80103e4:	f108 0601 	add.w	r6, r8, #1
 80103e8:	42b3      	cmp	r3, r6
 80103ea:	db0b      	blt.n	8010404 <__lshift+0x38>
 80103ec:	4638      	mov	r0, r7
 80103ee:	f7ff fd91 	bl	800ff14 <_Balloc>
 80103f2:	4605      	mov	r5, r0
 80103f4:	b948      	cbnz	r0, 801040a <__lshift+0x3e>
 80103f6:	4602      	mov	r2, r0
 80103f8:	4b28      	ldr	r3, [pc, #160]	; (801049c <__lshift+0xd0>)
 80103fa:	4829      	ldr	r0, [pc, #164]	; (80104a0 <__lshift+0xd4>)
 80103fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010400:	f000 fc3a 	bl	8010c78 <__assert_func>
 8010404:	3101      	adds	r1, #1
 8010406:	005b      	lsls	r3, r3, #1
 8010408:	e7ee      	b.n	80103e8 <__lshift+0x1c>
 801040a:	2300      	movs	r3, #0
 801040c:	f100 0114 	add.w	r1, r0, #20
 8010410:	f100 0210 	add.w	r2, r0, #16
 8010414:	4618      	mov	r0, r3
 8010416:	4553      	cmp	r3, sl
 8010418:	db33      	blt.n	8010482 <__lshift+0xb6>
 801041a:	6920      	ldr	r0, [r4, #16]
 801041c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010420:	f104 0314 	add.w	r3, r4, #20
 8010424:	f019 091f 	ands.w	r9, r9, #31
 8010428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801042c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010430:	d02b      	beq.n	801048a <__lshift+0xbe>
 8010432:	f1c9 0e20 	rsb	lr, r9, #32
 8010436:	468a      	mov	sl, r1
 8010438:	2200      	movs	r2, #0
 801043a:	6818      	ldr	r0, [r3, #0]
 801043c:	fa00 f009 	lsl.w	r0, r0, r9
 8010440:	4302      	orrs	r2, r0
 8010442:	f84a 2b04 	str.w	r2, [sl], #4
 8010446:	f853 2b04 	ldr.w	r2, [r3], #4
 801044a:	459c      	cmp	ip, r3
 801044c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010450:	d8f3      	bhi.n	801043a <__lshift+0x6e>
 8010452:	ebac 0304 	sub.w	r3, ip, r4
 8010456:	3b15      	subs	r3, #21
 8010458:	f023 0303 	bic.w	r3, r3, #3
 801045c:	3304      	adds	r3, #4
 801045e:	f104 0015 	add.w	r0, r4, #21
 8010462:	4584      	cmp	ip, r0
 8010464:	bf38      	it	cc
 8010466:	2304      	movcc	r3, #4
 8010468:	50ca      	str	r2, [r1, r3]
 801046a:	b10a      	cbz	r2, 8010470 <__lshift+0xa4>
 801046c:	f108 0602 	add.w	r6, r8, #2
 8010470:	3e01      	subs	r6, #1
 8010472:	4638      	mov	r0, r7
 8010474:	612e      	str	r6, [r5, #16]
 8010476:	4621      	mov	r1, r4
 8010478:	f7ff fd8c 	bl	800ff94 <_Bfree>
 801047c:	4628      	mov	r0, r5
 801047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010482:	f842 0f04 	str.w	r0, [r2, #4]!
 8010486:	3301      	adds	r3, #1
 8010488:	e7c5      	b.n	8010416 <__lshift+0x4a>
 801048a:	3904      	subs	r1, #4
 801048c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010490:	f841 2f04 	str.w	r2, [r1, #4]!
 8010494:	459c      	cmp	ip, r3
 8010496:	d8f9      	bhi.n	801048c <__lshift+0xc0>
 8010498:	e7ea      	b.n	8010470 <__lshift+0xa4>
 801049a:	bf00      	nop
 801049c:	08012c64 	.word	0x08012c64
 80104a0:	08012cf4 	.word	0x08012cf4

080104a4 <__mcmp>:
 80104a4:	b530      	push	{r4, r5, lr}
 80104a6:	6902      	ldr	r2, [r0, #16]
 80104a8:	690c      	ldr	r4, [r1, #16]
 80104aa:	1b12      	subs	r2, r2, r4
 80104ac:	d10e      	bne.n	80104cc <__mcmp+0x28>
 80104ae:	f100 0314 	add.w	r3, r0, #20
 80104b2:	3114      	adds	r1, #20
 80104b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80104b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80104bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80104c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80104c4:	42a5      	cmp	r5, r4
 80104c6:	d003      	beq.n	80104d0 <__mcmp+0x2c>
 80104c8:	d305      	bcc.n	80104d6 <__mcmp+0x32>
 80104ca:	2201      	movs	r2, #1
 80104cc:	4610      	mov	r0, r2
 80104ce:	bd30      	pop	{r4, r5, pc}
 80104d0:	4283      	cmp	r3, r0
 80104d2:	d3f3      	bcc.n	80104bc <__mcmp+0x18>
 80104d4:	e7fa      	b.n	80104cc <__mcmp+0x28>
 80104d6:	f04f 32ff 	mov.w	r2, #4294967295
 80104da:	e7f7      	b.n	80104cc <__mcmp+0x28>

080104dc <__mdiff>:
 80104dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e0:	460c      	mov	r4, r1
 80104e2:	4606      	mov	r6, r0
 80104e4:	4611      	mov	r1, r2
 80104e6:	4620      	mov	r0, r4
 80104e8:	4617      	mov	r7, r2
 80104ea:	f7ff ffdb 	bl	80104a4 <__mcmp>
 80104ee:	1e05      	subs	r5, r0, #0
 80104f0:	d110      	bne.n	8010514 <__mdiff+0x38>
 80104f2:	4629      	mov	r1, r5
 80104f4:	4630      	mov	r0, r6
 80104f6:	f7ff fd0d 	bl	800ff14 <_Balloc>
 80104fa:	b930      	cbnz	r0, 801050a <__mdiff+0x2e>
 80104fc:	4b39      	ldr	r3, [pc, #228]	; (80105e4 <__mdiff+0x108>)
 80104fe:	4602      	mov	r2, r0
 8010500:	f240 2132 	movw	r1, #562	; 0x232
 8010504:	4838      	ldr	r0, [pc, #224]	; (80105e8 <__mdiff+0x10c>)
 8010506:	f000 fbb7 	bl	8010c78 <__assert_func>
 801050a:	2301      	movs	r3, #1
 801050c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010514:	bfa4      	itt	ge
 8010516:	463b      	movge	r3, r7
 8010518:	4627      	movge	r7, r4
 801051a:	4630      	mov	r0, r6
 801051c:	6879      	ldr	r1, [r7, #4]
 801051e:	bfa6      	itte	ge
 8010520:	461c      	movge	r4, r3
 8010522:	2500      	movge	r5, #0
 8010524:	2501      	movlt	r5, #1
 8010526:	f7ff fcf5 	bl	800ff14 <_Balloc>
 801052a:	b920      	cbnz	r0, 8010536 <__mdiff+0x5a>
 801052c:	4b2d      	ldr	r3, [pc, #180]	; (80105e4 <__mdiff+0x108>)
 801052e:	4602      	mov	r2, r0
 8010530:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010534:	e7e6      	b.n	8010504 <__mdiff+0x28>
 8010536:	693e      	ldr	r6, [r7, #16]
 8010538:	60c5      	str	r5, [r0, #12]
 801053a:	6925      	ldr	r5, [r4, #16]
 801053c:	f107 0114 	add.w	r1, r7, #20
 8010540:	f104 0914 	add.w	r9, r4, #20
 8010544:	f100 0e14 	add.w	lr, r0, #20
 8010548:	f107 0210 	add.w	r2, r7, #16
 801054c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010550:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010554:	46f2      	mov	sl, lr
 8010556:	2700      	movs	r7, #0
 8010558:	f859 3b04 	ldr.w	r3, [r9], #4
 801055c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010560:	fa1f f883 	uxth.w	r8, r3
 8010564:	fa17 f78b 	uxtah	r7, r7, fp
 8010568:	0c1b      	lsrs	r3, r3, #16
 801056a:	eba7 0808 	sub.w	r8, r7, r8
 801056e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010572:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010576:	fa1f f888 	uxth.w	r8, r8
 801057a:	141f      	asrs	r7, r3, #16
 801057c:	454d      	cmp	r5, r9
 801057e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010582:	f84a 3b04 	str.w	r3, [sl], #4
 8010586:	d8e7      	bhi.n	8010558 <__mdiff+0x7c>
 8010588:	1b2b      	subs	r3, r5, r4
 801058a:	3b15      	subs	r3, #21
 801058c:	f023 0303 	bic.w	r3, r3, #3
 8010590:	3304      	adds	r3, #4
 8010592:	3415      	adds	r4, #21
 8010594:	42a5      	cmp	r5, r4
 8010596:	bf38      	it	cc
 8010598:	2304      	movcc	r3, #4
 801059a:	4419      	add	r1, r3
 801059c:	4473      	add	r3, lr
 801059e:	469e      	mov	lr, r3
 80105a0:	460d      	mov	r5, r1
 80105a2:	4565      	cmp	r5, ip
 80105a4:	d30e      	bcc.n	80105c4 <__mdiff+0xe8>
 80105a6:	f10c 0203 	add.w	r2, ip, #3
 80105aa:	1a52      	subs	r2, r2, r1
 80105ac:	f022 0203 	bic.w	r2, r2, #3
 80105b0:	3903      	subs	r1, #3
 80105b2:	458c      	cmp	ip, r1
 80105b4:	bf38      	it	cc
 80105b6:	2200      	movcc	r2, #0
 80105b8:	441a      	add	r2, r3
 80105ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80105be:	b17b      	cbz	r3, 80105e0 <__mdiff+0x104>
 80105c0:	6106      	str	r6, [r0, #16]
 80105c2:	e7a5      	b.n	8010510 <__mdiff+0x34>
 80105c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80105c8:	fa17 f488 	uxtah	r4, r7, r8
 80105cc:	1422      	asrs	r2, r4, #16
 80105ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80105d2:	b2a4      	uxth	r4, r4
 80105d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80105d8:	f84e 4b04 	str.w	r4, [lr], #4
 80105dc:	1417      	asrs	r7, r2, #16
 80105de:	e7e0      	b.n	80105a2 <__mdiff+0xc6>
 80105e0:	3e01      	subs	r6, #1
 80105e2:	e7ea      	b.n	80105ba <__mdiff+0xde>
 80105e4:	08012c64 	.word	0x08012c64
 80105e8:	08012cf4 	.word	0x08012cf4

080105ec <__ulp>:
 80105ec:	b082      	sub	sp, #8
 80105ee:	ed8d 0b00 	vstr	d0, [sp]
 80105f2:	9b01      	ldr	r3, [sp, #4]
 80105f4:	4912      	ldr	r1, [pc, #72]	; (8010640 <__ulp+0x54>)
 80105f6:	4019      	ands	r1, r3
 80105f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80105fc:	2900      	cmp	r1, #0
 80105fe:	dd05      	ble.n	801060c <__ulp+0x20>
 8010600:	2200      	movs	r2, #0
 8010602:	460b      	mov	r3, r1
 8010604:	ec43 2b10 	vmov	d0, r2, r3
 8010608:	b002      	add	sp, #8
 801060a:	4770      	bx	lr
 801060c:	4249      	negs	r1, r1
 801060e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010612:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010616:	f04f 0200 	mov.w	r2, #0
 801061a:	f04f 0300 	mov.w	r3, #0
 801061e:	da04      	bge.n	801062a <__ulp+0x3e>
 8010620:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010624:	fa41 f300 	asr.w	r3, r1, r0
 8010628:	e7ec      	b.n	8010604 <__ulp+0x18>
 801062a:	f1a0 0114 	sub.w	r1, r0, #20
 801062e:	291e      	cmp	r1, #30
 8010630:	bfda      	itte	le
 8010632:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010636:	fa20 f101 	lsrle.w	r1, r0, r1
 801063a:	2101      	movgt	r1, #1
 801063c:	460a      	mov	r2, r1
 801063e:	e7e1      	b.n	8010604 <__ulp+0x18>
 8010640:	7ff00000 	.word	0x7ff00000

08010644 <__b2d>:
 8010644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010646:	6905      	ldr	r5, [r0, #16]
 8010648:	f100 0714 	add.w	r7, r0, #20
 801064c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010650:	1f2e      	subs	r6, r5, #4
 8010652:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010656:	4620      	mov	r0, r4
 8010658:	f7ff fd52 	bl	8010100 <__hi0bits>
 801065c:	f1c0 0320 	rsb	r3, r0, #32
 8010660:	280a      	cmp	r0, #10
 8010662:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80106e0 <__b2d+0x9c>
 8010666:	600b      	str	r3, [r1, #0]
 8010668:	dc14      	bgt.n	8010694 <__b2d+0x50>
 801066a:	f1c0 0e0b 	rsb	lr, r0, #11
 801066e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010672:	42b7      	cmp	r7, r6
 8010674:	ea41 030c 	orr.w	r3, r1, ip
 8010678:	bf34      	ite	cc
 801067a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801067e:	2100      	movcs	r1, #0
 8010680:	3015      	adds	r0, #21
 8010682:	fa04 f000 	lsl.w	r0, r4, r0
 8010686:	fa21 f10e 	lsr.w	r1, r1, lr
 801068a:	ea40 0201 	orr.w	r2, r0, r1
 801068e:	ec43 2b10 	vmov	d0, r2, r3
 8010692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010694:	42b7      	cmp	r7, r6
 8010696:	bf3a      	itte	cc
 8010698:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801069c:	f1a5 0608 	subcc.w	r6, r5, #8
 80106a0:	2100      	movcs	r1, #0
 80106a2:	380b      	subs	r0, #11
 80106a4:	d017      	beq.n	80106d6 <__b2d+0x92>
 80106a6:	f1c0 0c20 	rsb	ip, r0, #32
 80106aa:	fa04 f500 	lsl.w	r5, r4, r0
 80106ae:	42be      	cmp	r6, r7
 80106b0:	fa21 f40c 	lsr.w	r4, r1, ip
 80106b4:	ea45 0504 	orr.w	r5, r5, r4
 80106b8:	bf8c      	ite	hi
 80106ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80106be:	2400      	movls	r4, #0
 80106c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80106c4:	fa01 f000 	lsl.w	r0, r1, r0
 80106c8:	fa24 f40c 	lsr.w	r4, r4, ip
 80106cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80106d0:	ea40 0204 	orr.w	r2, r0, r4
 80106d4:	e7db      	b.n	801068e <__b2d+0x4a>
 80106d6:	ea44 030c 	orr.w	r3, r4, ip
 80106da:	460a      	mov	r2, r1
 80106dc:	e7d7      	b.n	801068e <__b2d+0x4a>
 80106de:	bf00      	nop
 80106e0:	3ff00000 	.word	0x3ff00000

080106e4 <__d2b>:
 80106e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80106e8:	4689      	mov	r9, r1
 80106ea:	2101      	movs	r1, #1
 80106ec:	ec57 6b10 	vmov	r6, r7, d0
 80106f0:	4690      	mov	r8, r2
 80106f2:	f7ff fc0f 	bl	800ff14 <_Balloc>
 80106f6:	4604      	mov	r4, r0
 80106f8:	b930      	cbnz	r0, 8010708 <__d2b+0x24>
 80106fa:	4602      	mov	r2, r0
 80106fc:	4b25      	ldr	r3, [pc, #148]	; (8010794 <__d2b+0xb0>)
 80106fe:	4826      	ldr	r0, [pc, #152]	; (8010798 <__d2b+0xb4>)
 8010700:	f240 310a 	movw	r1, #778	; 0x30a
 8010704:	f000 fab8 	bl	8010c78 <__assert_func>
 8010708:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801070c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010710:	bb35      	cbnz	r5, 8010760 <__d2b+0x7c>
 8010712:	2e00      	cmp	r6, #0
 8010714:	9301      	str	r3, [sp, #4]
 8010716:	d028      	beq.n	801076a <__d2b+0x86>
 8010718:	4668      	mov	r0, sp
 801071a:	9600      	str	r6, [sp, #0]
 801071c:	f7ff fd10 	bl	8010140 <__lo0bits>
 8010720:	9900      	ldr	r1, [sp, #0]
 8010722:	b300      	cbz	r0, 8010766 <__d2b+0x82>
 8010724:	9a01      	ldr	r2, [sp, #4]
 8010726:	f1c0 0320 	rsb	r3, r0, #32
 801072a:	fa02 f303 	lsl.w	r3, r2, r3
 801072e:	430b      	orrs	r3, r1
 8010730:	40c2      	lsrs	r2, r0
 8010732:	6163      	str	r3, [r4, #20]
 8010734:	9201      	str	r2, [sp, #4]
 8010736:	9b01      	ldr	r3, [sp, #4]
 8010738:	61a3      	str	r3, [r4, #24]
 801073a:	2b00      	cmp	r3, #0
 801073c:	bf14      	ite	ne
 801073e:	2202      	movne	r2, #2
 8010740:	2201      	moveq	r2, #1
 8010742:	6122      	str	r2, [r4, #16]
 8010744:	b1d5      	cbz	r5, 801077c <__d2b+0x98>
 8010746:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801074a:	4405      	add	r5, r0
 801074c:	f8c9 5000 	str.w	r5, [r9]
 8010750:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010754:	f8c8 0000 	str.w	r0, [r8]
 8010758:	4620      	mov	r0, r4
 801075a:	b003      	add	sp, #12
 801075c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010764:	e7d5      	b.n	8010712 <__d2b+0x2e>
 8010766:	6161      	str	r1, [r4, #20]
 8010768:	e7e5      	b.n	8010736 <__d2b+0x52>
 801076a:	a801      	add	r0, sp, #4
 801076c:	f7ff fce8 	bl	8010140 <__lo0bits>
 8010770:	9b01      	ldr	r3, [sp, #4]
 8010772:	6163      	str	r3, [r4, #20]
 8010774:	2201      	movs	r2, #1
 8010776:	6122      	str	r2, [r4, #16]
 8010778:	3020      	adds	r0, #32
 801077a:	e7e3      	b.n	8010744 <__d2b+0x60>
 801077c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010780:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010784:	f8c9 0000 	str.w	r0, [r9]
 8010788:	6918      	ldr	r0, [r3, #16]
 801078a:	f7ff fcb9 	bl	8010100 <__hi0bits>
 801078e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010792:	e7df      	b.n	8010754 <__d2b+0x70>
 8010794:	08012c64 	.word	0x08012c64
 8010798:	08012cf4 	.word	0x08012cf4

0801079c <__ratio>:
 801079c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a0:	4688      	mov	r8, r1
 80107a2:	4669      	mov	r1, sp
 80107a4:	4681      	mov	r9, r0
 80107a6:	f7ff ff4d 	bl	8010644 <__b2d>
 80107aa:	a901      	add	r1, sp, #4
 80107ac:	4640      	mov	r0, r8
 80107ae:	ec55 4b10 	vmov	r4, r5, d0
 80107b2:	f7ff ff47 	bl	8010644 <__b2d>
 80107b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80107be:	eba3 0c02 	sub.w	ip, r3, r2
 80107c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80107c6:	1a9b      	subs	r3, r3, r2
 80107c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80107cc:	ec51 0b10 	vmov	r0, r1, d0
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	bfd6      	itet	le
 80107d4:	460a      	movle	r2, r1
 80107d6:	462a      	movgt	r2, r5
 80107d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80107dc:	468b      	mov	fp, r1
 80107de:	462f      	mov	r7, r5
 80107e0:	bfd4      	ite	le
 80107e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80107e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80107ea:	4620      	mov	r0, r4
 80107ec:	ee10 2a10 	vmov	r2, s0
 80107f0:	465b      	mov	r3, fp
 80107f2:	4639      	mov	r1, r7
 80107f4:	f7f0 f82a 	bl	800084c <__aeabi_ddiv>
 80107f8:	ec41 0b10 	vmov	d0, r0, r1
 80107fc:	b003      	add	sp, #12
 80107fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010802 <__copybits>:
 8010802:	3901      	subs	r1, #1
 8010804:	b570      	push	{r4, r5, r6, lr}
 8010806:	1149      	asrs	r1, r1, #5
 8010808:	6914      	ldr	r4, [r2, #16]
 801080a:	3101      	adds	r1, #1
 801080c:	f102 0314 	add.w	r3, r2, #20
 8010810:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010814:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010818:	1f05      	subs	r5, r0, #4
 801081a:	42a3      	cmp	r3, r4
 801081c:	d30c      	bcc.n	8010838 <__copybits+0x36>
 801081e:	1aa3      	subs	r3, r4, r2
 8010820:	3b11      	subs	r3, #17
 8010822:	f023 0303 	bic.w	r3, r3, #3
 8010826:	3211      	adds	r2, #17
 8010828:	42a2      	cmp	r2, r4
 801082a:	bf88      	it	hi
 801082c:	2300      	movhi	r3, #0
 801082e:	4418      	add	r0, r3
 8010830:	2300      	movs	r3, #0
 8010832:	4288      	cmp	r0, r1
 8010834:	d305      	bcc.n	8010842 <__copybits+0x40>
 8010836:	bd70      	pop	{r4, r5, r6, pc}
 8010838:	f853 6b04 	ldr.w	r6, [r3], #4
 801083c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010840:	e7eb      	b.n	801081a <__copybits+0x18>
 8010842:	f840 3b04 	str.w	r3, [r0], #4
 8010846:	e7f4      	b.n	8010832 <__copybits+0x30>

08010848 <__any_on>:
 8010848:	f100 0214 	add.w	r2, r0, #20
 801084c:	6900      	ldr	r0, [r0, #16]
 801084e:	114b      	asrs	r3, r1, #5
 8010850:	4298      	cmp	r0, r3
 8010852:	b510      	push	{r4, lr}
 8010854:	db11      	blt.n	801087a <__any_on+0x32>
 8010856:	dd0a      	ble.n	801086e <__any_on+0x26>
 8010858:	f011 011f 	ands.w	r1, r1, #31
 801085c:	d007      	beq.n	801086e <__any_on+0x26>
 801085e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010862:	fa24 f001 	lsr.w	r0, r4, r1
 8010866:	fa00 f101 	lsl.w	r1, r0, r1
 801086a:	428c      	cmp	r4, r1
 801086c:	d10b      	bne.n	8010886 <__any_on+0x3e>
 801086e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010872:	4293      	cmp	r3, r2
 8010874:	d803      	bhi.n	801087e <__any_on+0x36>
 8010876:	2000      	movs	r0, #0
 8010878:	bd10      	pop	{r4, pc}
 801087a:	4603      	mov	r3, r0
 801087c:	e7f7      	b.n	801086e <__any_on+0x26>
 801087e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010882:	2900      	cmp	r1, #0
 8010884:	d0f5      	beq.n	8010872 <__any_on+0x2a>
 8010886:	2001      	movs	r0, #1
 8010888:	e7f6      	b.n	8010878 <__any_on+0x30>

0801088a <_calloc_r>:
 801088a:	b513      	push	{r0, r1, r4, lr}
 801088c:	434a      	muls	r2, r1
 801088e:	4611      	mov	r1, r2
 8010890:	9201      	str	r2, [sp, #4]
 8010892:	f7fc f9cd 	bl	800cc30 <_malloc_r>
 8010896:	4604      	mov	r4, r0
 8010898:	b118      	cbz	r0, 80108a2 <_calloc_r+0x18>
 801089a:	9a01      	ldr	r2, [sp, #4]
 801089c:	2100      	movs	r1, #0
 801089e:	f7fc f9be 	bl	800cc1e <memset>
 80108a2:	4620      	mov	r0, r4
 80108a4:	b002      	add	sp, #8
 80108a6:	bd10      	pop	{r4, pc}

080108a8 <_free_r>:
 80108a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108aa:	2900      	cmp	r1, #0
 80108ac:	d048      	beq.n	8010940 <_free_r+0x98>
 80108ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108b2:	9001      	str	r0, [sp, #4]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	f1a1 0404 	sub.w	r4, r1, #4
 80108ba:	bfb8      	it	lt
 80108bc:	18e4      	addlt	r4, r4, r3
 80108be:	f7ff fb1d 	bl	800fefc <__malloc_lock>
 80108c2:	4a20      	ldr	r2, [pc, #128]	; (8010944 <_free_r+0x9c>)
 80108c4:	9801      	ldr	r0, [sp, #4]
 80108c6:	6813      	ldr	r3, [r2, #0]
 80108c8:	4615      	mov	r5, r2
 80108ca:	b933      	cbnz	r3, 80108da <_free_r+0x32>
 80108cc:	6063      	str	r3, [r4, #4]
 80108ce:	6014      	str	r4, [r2, #0]
 80108d0:	b003      	add	sp, #12
 80108d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108d6:	f7ff bb17 	b.w	800ff08 <__malloc_unlock>
 80108da:	42a3      	cmp	r3, r4
 80108dc:	d90b      	bls.n	80108f6 <_free_r+0x4e>
 80108de:	6821      	ldr	r1, [r4, #0]
 80108e0:	1862      	adds	r2, r4, r1
 80108e2:	4293      	cmp	r3, r2
 80108e4:	bf04      	itt	eq
 80108e6:	681a      	ldreq	r2, [r3, #0]
 80108e8:	685b      	ldreq	r3, [r3, #4]
 80108ea:	6063      	str	r3, [r4, #4]
 80108ec:	bf04      	itt	eq
 80108ee:	1852      	addeq	r2, r2, r1
 80108f0:	6022      	streq	r2, [r4, #0]
 80108f2:	602c      	str	r4, [r5, #0]
 80108f4:	e7ec      	b.n	80108d0 <_free_r+0x28>
 80108f6:	461a      	mov	r2, r3
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	b10b      	cbz	r3, 8010900 <_free_r+0x58>
 80108fc:	42a3      	cmp	r3, r4
 80108fe:	d9fa      	bls.n	80108f6 <_free_r+0x4e>
 8010900:	6811      	ldr	r1, [r2, #0]
 8010902:	1855      	adds	r5, r2, r1
 8010904:	42a5      	cmp	r5, r4
 8010906:	d10b      	bne.n	8010920 <_free_r+0x78>
 8010908:	6824      	ldr	r4, [r4, #0]
 801090a:	4421      	add	r1, r4
 801090c:	1854      	adds	r4, r2, r1
 801090e:	42a3      	cmp	r3, r4
 8010910:	6011      	str	r1, [r2, #0]
 8010912:	d1dd      	bne.n	80108d0 <_free_r+0x28>
 8010914:	681c      	ldr	r4, [r3, #0]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	6053      	str	r3, [r2, #4]
 801091a:	4421      	add	r1, r4
 801091c:	6011      	str	r1, [r2, #0]
 801091e:	e7d7      	b.n	80108d0 <_free_r+0x28>
 8010920:	d902      	bls.n	8010928 <_free_r+0x80>
 8010922:	230c      	movs	r3, #12
 8010924:	6003      	str	r3, [r0, #0]
 8010926:	e7d3      	b.n	80108d0 <_free_r+0x28>
 8010928:	6825      	ldr	r5, [r4, #0]
 801092a:	1961      	adds	r1, r4, r5
 801092c:	428b      	cmp	r3, r1
 801092e:	bf04      	itt	eq
 8010930:	6819      	ldreq	r1, [r3, #0]
 8010932:	685b      	ldreq	r3, [r3, #4]
 8010934:	6063      	str	r3, [r4, #4]
 8010936:	bf04      	itt	eq
 8010938:	1949      	addeq	r1, r1, r5
 801093a:	6021      	streq	r1, [r4, #0]
 801093c:	6054      	str	r4, [r2, #4]
 801093e:	e7c7      	b.n	80108d0 <_free_r+0x28>
 8010940:	b003      	add	sp, #12
 8010942:	bd30      	pop	{r4, r5, pc}
 8010944:	20005988 	.word	0x20005988

08010948 <__ssputs_r>:
 8010948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801094c:	688e      	ldr	r6, [r1, #8]
 801094e:	429e      	cmp	r6, r3
 8010950:	4682      	mov	sl, r0
 8010952:	460c      	mov	r4, r1
 8010954:	4690      	mov	r8, r2
 8010956:	461f      	mov	r7, r3
 8010958:	d838      	bhi.n	80109cc <__ssputs_r+0x84>
 801095a:	898a      	ldrh	r2, [r1, #12]
 801095c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010960:	d032      	beq.n	80109c8 <__ssputs_r+0x80>
 8010962:	6825      	ldr	r5, [r4, #0]
 8010964:	6909      	ldr	r1, [r1, #16]
 8010966:	eba5 0901 	sub.w	r9, r5, r1
 801096a:	6965      	ldr	r5, [r4, #20]
 801096c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010970:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010974:	3301      	adds	r3, #1
 8010976:	444b      	add	r3, r9
 8010978:	106d      	asrs	r5, r5, #1
 801097a:	429d      	cmp	r5, r3
 801097c:	bf38      	it	cc
 801097e:	461d      	movcc	r5, r3
 8010980:	0553      	lsls	r3, r2, #21
 8010982:	d531      	bpl.n	80109e8 <__ssputs_r+0xa0>
 8010984:	4629      	mov	r1, r5
 8010986:	f7fc f953 	bl	800cc30 <_malloc_r>
 801098a:	4606      	mov	r6, r0
 801098c:	b950      	cbnz	r0, 80109a4 <__ssputs_r+0x5c>
 801098e:	230c      	movs	r3, #12
 8010990:	f8ca 3000 	str.w	r3, [sl]
 8010994:	89a3      	ldrh	r3, [r4, #12]
 8010996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801099a:	81a3      	strh	r3, [r4, #12]
 801099c:	f04f 30ff 	mov.w	r0, #4294967295
 80109a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109a4:	6921      	ldr	r1, [r4, #16]
 80109a6:	464a      	mov	r2, r9
 80109a8:	f7fc f92b 	bl	800cc02 <memcpy>
 80109ac:	89a3      	ldrh	r3, [r4, #12]
 80109ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80109b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109b6:	81a3      	strh	r3, [r4, #12]
 80109b8:	6126      	str	r6, [r4, #16]
 80109ba:	6165      	str	r5, [r4, #20]
 80109bc:	444e      	add	r6, r9
 80109be:	eba5 0509 	sub.w	r5, r5, r9
 80109c2:	6026      	str	r6, [r4, #0]
 80109c4:	60a5      	str	r5, [r4, #8]
 80109c6:	463e      	mov	r6, r7
 80109c8:	42be      	cmp	r6, r7
 80109ca:	d900      	bls.n	80109ce <__ssputs_r+0x86>
 80109cc:	463e      	mov	r6, r7
 80109ce:	4632      	mov	r2, r6
 80109d0:	6820      	ldr	r0, [r4, #0]
 80109d2:	4641      	mov	r1, r8
 80109d4:	f000 f980 	bl	8010cd8 <memmove>
 80109d8:	68a3      	ldr	r3, [r4, #8]
 80109da:	6822      	ldr	r2, [r4, #0]
 80109dc:	1b9b      	subs	r3, r3, r6
 80109de:	4432      	add	r2, r6
 80109e0:	60a3      	str	r3, [r4, #8]
 80109e2:	6022      	str	r2, [r4, #0]
 80109e4:	2000      	movs	r0, #0
 80109e6:	e7db      	b.n	80109a0 <__ssputs_r+0x58>
 80109e8:	462a      	mov	r2, r5
 80109ea:	f000 f98f 	bl	8010d0c <_realloc_r>
 80109ee:	4606      	mov	r6, r0
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d1e1      	bne.n	80109b8 <__ssputs_r+0x70>
 80109f4:	6921      	ldr	r1, [r4, #16]
 80109f6:	4650      	mov	r0, sl
 80109f8:	f7ff ff56 	bl	80108a8 <_free_r>
 80109fc:	e7c7      	b.n	801098e <__ssputs_r+0x46>
	...

08010a00 <_svfiprintf_r>:
 8010a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a04:	4698      	mov	r8, r3
 8010a06:	898b      	ldrh	r3, [r1, #12]
 8010a08:	061b      	lsls	r3, r3, #24
 8010a0a:	b09d      	sub	sp, #116	; 0x74
 8010a0c:	4607      	mov	r7, r0
 8010a0e:	460d      	mov	r5, r1
 8010a10:	4614      	mov	r4, r2
 8010a12:	d50e      	bpl.n	8010a32 <_svfiprintf_r+0x32>
 8010a14:	690b      	ldr	r3, [r1, #16]
 8010a16:	b963      	cbnz	r3, 8010a32 <_svfiprintf_r+0x32>
 8010a18:	2140      	movs	r1, #64	; 0x40
 8010a1a:	f7fc f909 	bl	800cc30 <_malloc_r>
 8010a1e:	6028      	str	r0, [r5, #0]
 8010a20:	6128      	str	r0, [r5, #16]
 8010a22:	b920      	cbnz	r0, 8010a2e <_svfiprintf_r+0x2e>
 8010a24:	230c      	movs	r3, #12
 8010a26:	603b      	str	r3, [r7, #0]
 8010a28:	f04f 30ff 	mov.w	r0, #4294967295
 8010a2c:	e0d1      	b.n	8010bd2 <_svfiprintf_r+0x1d2>
 8010a2e:	2340      	movs	r3, #64	; 0x40
 8010a30:	616b      	str	r3, [r5, #20]
 8010a32:	2300      	movs	r3, #0
 8010a34:	9309      	str	r3, [sp, #36]	; 0x24
 8010a36:	2320      	movs	r3, #32
 8010a38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a40:	2330      	movs	r3, #48	; 0x30
 8010a42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010bec <_svfiprintf_r+0x1ec>
 8010a46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a4a:	f04f 0901 	mov.w	r9, #1
 8010a4e:	4623      	mov	r3, r4
 8010a50:	469a      	mov	sl, r3
 8010a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a56:	b10a      	cbz	r2, 8010a5c <_svfiprintf_r+0x5c>
 8010a58:	2a25      	cmp	r2, #37	; 0x25
 8010a5a:	d1f9      	bne.n	8010a50 <_svfiprintf_r+0x50>
 8010a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8010a60:	d00b      	beq.n	8010a7a <_svfiprintf_r+0x7a>
 8010a62:	465b      	mov	r3, fp
 8010a64:	4622      	mov	r2, r4
 8010a66:	4629      	mov	r1, r5
 8010a68:	4638      	mov	r0, r7
 8010a6a:	f7ff ff6d 	bl	8010948 <__ssputs_r>
 8010a6e:	3001      	adds	r0, #1
 8010a70:	f000 80aa 	beq.w	8010bc8 <_svfiprintf_r+0x1c8>
 8010a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a76:	445a      	add	r2, fp
 8010a78:	9209      	str	r2, [sp, #36]	; 0x24
 8010a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	f000 80a2 	beq.w	8010bc8 <_svfiprintf_r+0x1c8>
 8010a84:	2300      	movs	r3, #0
 8010a86:	f04f 32ff 	mov.w	r2, #4294967295
 8010a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a8e:	f10a 0a01 	add.w	sl, sl, #1
 8010a92:	9304      	str	r3, [sp, #16]
 8010a94:	9307      	str	r3, [sp, #28]
 8010a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8010a9c:	4654      	mov	r4, sl
 8010a9e:	2205      	movs	r2, #5
 8010aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aa4:	4851      	ldr	r0, [pc, #324]	; (8010bec <_svfiprintf_r+0x1ec>)
 8010aa6:	f7ef fb9b 	bl	80001e0 <memchr>
 8010aaa:	9a04      	ldr	r2, [sp, #16]
 8010aac:	b9d8      	cbnz	r0, 8010ae6 <_svfiprintf_r+0xe6>
 8010aae:	06d0      	lsls	r0, r2, #27
 8010ab0:	bf44      	itt	mi
 8010ab2:	2320      	movmi	r3, #32
 8010ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ab8:	0711      	lsls	r1, r2, #28
 8010aba:	bf44      	itt	mi
 8010abc:	232b      	movmi	r3, #43	; 0x2b
 8010abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ac8:	d015      	beq.n	8010af6 <_svfiprintf_r+0xf6>
 8010aca:	9a07      	ldr	r2, [sp, #28]
 8010acc:	4654      	mov	r4, sl
 8010ace:	2000      	movs	r0, #0
 8010ad0:	f04f 0c0a 	mov.w	ip, #10
 8010ad4:	4621      	mov	r1, r4
 8010ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ada:	3b30      	subs	r3, #48	; 0x30
 8010adc:	2b09      	cmp	r3, #9
 8010ade:	d94e      	bls.n	8010b7e <_svfiprintf_r+0x17e>
 8010ae0:	b1b0      	cbz	r0, 8010b10 <_svfiprintf_r+0x110>
 8010ae2:	9207      	str	r2, [sp, #28]
 8010ae4:	e014      	b.n	8010b10 <_svfiprintf_r+0x110>
 8010ae6:	eba0 0308 	sub.w	r3, r0, r8
 8010aea:	fa09 f303 	lsl.w	r3, r9, r3
 8010aee:	4313      	orrs	r3, r2
 8010af0:	9304      	str	r3, [sp, #16]
 8010af2:	46a2      	mov	sl, r4
 8010af4:	e7d2      	b.n	8010a9c <_svfiprintf_r+0x9c>
 8010af6:	9b03      	ldr	r3, [sp, #12]
 8010af8:	1d19      	adds	r1, r3, #4
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	9103      	str	r1, [sp, #12]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	bfbb      	ittet	lt
 8010b02:	425b      	neglt	r3, r3
 8010b04:	f042 0202 	orrlt.w	r2, r2, #2
 8010b08:	9307      	strge	r3, [sp, #28]
 8010b0a:	9307      	strlt	r3, [sp, #28]
 8010b0c:	bfb8      	it	lt
 8010b0e:	9204      	strlt	r2, [sp, #16]
 8010b10:	7823      	ldrb	r3, [r4, #0]
 8010b12:	2b2e      	cmp	r3, #46	; 0x2e
 8010b14:	d10c      	bne.n	8010b30 <_svfiprintf_r+0x130>
 8010b16:	7863      	ldrb	r3, [r4, #1]
 8010b18:	2b2a      	cmp	r3, #42	; 0x2a
 8010b1a:	d135      	bne.n	8010b88 <_svfiprintf_r+0x188>
 8010b1c:	9b03      	ldr	r3, [sp, #12]
 8010b1e:	1d1a      	adds	r2, r3, #4
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	9203      	str	r2, [sp, #12]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	bfb8      	it	lt
 8010b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b2c:	3402      	adds	r4, #2
 8010b2e:	9305      	str	r3, [sp, #20]
 8010b30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010bfc <_svfiprintf_r+0x1fc>
 8010b34:	7821      	ldrb	r1, [r4, #0]
 8010b36:	2203      	movs	r2, #3
 8010b38:	4650      	mov	r0, sl
 8010b3a:	f7ef fb51 	bl	80001e0 <memchr>
 8010b3e:	b140      	cbz	r0, 8010b52 <_svfiprintf_r+0x152>
 8010b40:	2340      	movs	r3, #64	; 0x40
 8010b42:	eba0 000a 	sub.w	r0, r0, sl
 8010b46:	fa03 f000 	lsl.w	r0, r3, r0
 8010b4a:	9b04      	ldr	r3, [sp, #16]
 8010b4c:	4303      	orrs	r3, r0
 8010b4e:	3401      	adds	r4, #1
 8010b50:	9304      	str	r3, [sp, #16]
 8010b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b56:	4826      	ldr	r0, [pc, #152]	; (8010bf0 <_svfiprintf_r+0x1f0>)
 8010b58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b5c:	2206      	movs	r2, #6
 8010b5e:	f7ef fb3f 	bl	80001e0 <memchr>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d038      	beq.n	8010bd8 <_svfiprintf_r+0x1d8>
 8010b66:	4b23      	ldr	r3, [pc, #140]	; (8010bf4 <_svfiprintf_r+0x1f4>)
 8010b68:	bb1b      	cbnz	r3, 8010bb2 <_svfiprintf_r+0x1b2>
 8010b6a:	9b03      	ldr	r3, [sp, #12]
 8010b6c:	3307      	adds	r3, #7
 8010b6e:	f023 0307 	bic.w	r3, r3, #7
 8010b72:	3308      	adds	r3, #8
 8010b74:	9303      	str	r3, [sp, #12]
 8010b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b78:	4433      	add	r3, r6
 8010b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8010b7c:	e767      	b.n	8010a4e <_svfiprintf_r+0x4e>
 8010b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b82:	460c      	mov	r4, r1
 8010b84:	2001      	movs	r0, #1
 8010b86:	e7a5      	b.n	8010ad4 <_svfiprintf_r+0xd4>
 8010b88:	2300      	movs	r3, #0
 8010b8a:	3401      	adds	r4, #1
 8010b8c:	9305      	str	r3, [sp, #20]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	f04f 0c0a 	mov.w	ip, #10
 8010b94:	4620      	mov	r0, r4
 8010b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b9a:	3a30      	subs	r2, #48	; 0x30
 8010b9c:	2a09      	cmp	r2, #9
 8010b9e:	d903      	bls.n	8010ba8 <_svfiprintf_r+0x1a8>
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d0c5      	beq.n	8010b30 <_svfiprintf_r+0x130>
 8010ba4:	9105      	str	r1, [sp, #20]
 8010ba6:	e7c3      	b.n	8010b30 <_svfiprintf_r+0x130>
 8010ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bac:	4604      	mov	r4, r0
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e7f0      	b.n	8010b94 <_svfiprintf_r+0x194>
 8010bb2:	ab03      	add	r3, sp, #12
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	462a      	mov	r2, r5
 8010bb8:	4b0f      	ldr	r3, [pc, #60]	; (8010bf8 <_svfiprintf_r+0x1f8>)
 8010bba:	a904      	add	r1, sp, #16
 8010bbc:	4638      	mov	r0, r7
 8010bbe:	f7fc f931 	bl	800ce24 <_printf_float>
 8010bc2:	1c42      	adds	r2, r0, #1
 8010bc4:	4606      	mov	r6, r0
 8010bc6:	d1d6      	bne.n	8010b76 <_svfiprintf_r+0x176>
 8010bc8:	89ab      	ldrh	r3, [r5, #12]
 8010bca:	065b      	lsls	r3, r3, #25
 8010bcc:	f53f af2c 	bmi.w	8010a28 <_svfiprintf_r+0x28>
 8010bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bd2:	b01d      	add	sp, #116	; 0x74
 8010bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd8:	ab03      	add	r3, sp, #12
 8010bda:	9300      	str	r3, [sp, #0]
 8010bdc:	462a      	mov	r2, r5
 8010bde:	4b06      	ldr	r3, [pc, #24]	; (8010bf8 <_svfiprintf_r+0x1f8>)
 8010be0:	a904      	add	r1, sp, #16
 8010be2:	4638      	mov	r0, r7
 8010be4:	f7fc fbc2 	bl	800d36c <_printf_i>
 8010be8:	e7eb      	b.n	8010bc2 <_svfiprintf_r+0x1c2>
 8010bea:	bf00      	nop
 8010bec:	08012e54 	.word	0x08012e54
 8010bf0:	08012e5e 	.word	0x08012e5e
 8010bf4:	0800ce25 	.word	0x0800ce25
 8010bf8:	08010949 	.word	0x08010949
 8010bfc:	08012e5a 	.word	0x08012e5a

08010c00 <_read_r>:
 8010c00:	b538      	push	{r3, r4, r5, lr}
 8010c02:	4d07      	ldr	r5, [pc, #28]	; (8010c20 <_read_r+0x20>)
 8010c04:	4604      	mov	r4, r0
 8010c06:	4608      	mov	r0, r1
 8010c08:	4611      	mov	r1, r2
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	602a      	str	r2, [r5, #0]
 8010c0e:	461a      	mov	r2, r3
 8010c10:	f7f2 ffbe 	bl	8003b90 <_read>
 8010c14:	1c43      	adds	r3, r0, #1
 8010c16:	d102      	bne.n	8010c1e <_read_r+0x1e>
 8010c18:	682b      	ldr	r3, [r5, #0]
 8010c1a:	b103      	cbz	r3, 8010c1e <_read_r+0x1e>
 8010c1c:	6023      	str	r3, [r4, #0]
 8010c1e:	bd38      	pop	{r3, r4, r5, pc}
 8010c20:	200062d4 	.word	0x200062d4
 8010c24:	00000000 	.word	0x00000000

08010c28 <nan>:
 8010c28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010c30 <nan+0x8>
 8010c2c:	4770      	bx	lr
 8010c2e:	bf00      	nop
 8010c30:	00000000 	.word	0x00000000
 8010c34:	7ff80000 	.word	0x7ff80000

08010c38 <strncmp>:
 8010c38:	b510      	push	{r4, lr}
 8010c3a:	b16a      	cbz	r2, 8010c58 <strncmp+0x20>
 8010c3c:	3901      	subs	r1, #1
 8010c3e:	1884      	adds	r4, r0, r2
 8010c40:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010c44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d103      	bne.n	8010c54 <strncmp+0x1c>
 8010c4c:	42a0      	cmp	r0, r4
 8010c4e:	d001      	beq.n	8010c54 <strncmp+0x1c>
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d1f5      	bne.n	8010c40 <strncmp+0x8>
 8010c54:	1a98      	subs	r0, r3, r2
 8010c56:	bd10      	pop	{r4, pc}
 8010c58:	4610      	mov	r0, r2
 8010c5a:	e7fc      	b.n	8010c56 <strncmp+0x1e>

08010c5c <__ascii_wctomb>:
 8010c5c:	b149      	cbz	r1, 8010c72 <__ascii_wctomb+0x16>
 8010c5e:	2aff      	cmp	r2, #255	; 0xff
 8010c60:	bf85      	ittet	hi
 8010c62:	238a      	movhi	r3, #138	; 0x8a
 8010c64:	6003      	strhi	r3, [r0, #0]
 8010c66:	700a      	strbls	r2, [r1, #0]
 8010c68:	f04f 30ff 	movhi.w	r0, #4294967295
 8010c6c:	bf98      	it	ls
 8010c6e:	2001      	movls	r0, #1
 8010c70:	4770      	bx	lr
 8010c72:	4608      	mov	r0, r1
 8010c74:	4770      	bx	lr
	...

08010c78 <__assert_func>:
 8010c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c7a:	4614      	mov	r4, r2
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	4b09      	ldr	r3, [pc, #36]	; (8010ca4 <__assert_func+0x2c>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	4605      	mov	r5, r0
 8010c84:	68d8      	ldr	r0, [r3, #12]
 8010c86:	b14c      	cbz	r4, 8010c9c <__assert_func+0x24>
 8010c88:	4b07      	ldr	r3, [pc, #28]	; (8010ca8 <__assert_func+0x30>)
 8010c8a:	9100      	str	r1, [sp, #0]
 8010c8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c90:	4906      	ldr	r1, [pc, #24]	; (8010cac <__assert_func+0x34>)
 8010c92:	462b      	mov	r3, r5
 8010c94:	f000 f80e 	bl	8010cb4 <fiprintf>
 8010c98:	f000 fa78 	bl	801118c <abort>
 8010c9c:	4b04      	ldr	r3, [pc, #16]	; (8010cb0 <__assert_func+0x38>)
 8010c9e:	461c      	mov	r4, r3
 8010ca0:	e7f3      	b.n	8010c8a <__assert_func+0x12>
 8010ca2:	bf00      	nop
 8010ca4:	20000040 	.word	0x20000040
 8010ca8:	08012e65 	.word	0x08012e65
 8010cac:	08012e72 	.word	0x08012e72
 8010cb0:	08012ea0 	.word	0x08012ea0

08010cb4 <fiprintf>:
 8010cb4:	b40e      	push	{r1, r2, r3}
 8010cb6:	b503      	push	{r0, r1, lr}
 8010cb8:	4601      	mov	r1, r0
 8010cba:	ab03      	add	r3, sp, #12
 8010cbc:	4805      	ldr	r0, [pc, #20]	; (8010cd4 <fiprintf+0x20>)
 8010cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cc2:	6800      	ldr	r0, [r0, #0]
 8010cc4:	9301      	str	r3, [sp, #4]
 8010cc6:	f000 f871 	bl	8010dac <_vfiprintf_r>
 8010cca:	b002      	add	sp, #8
 8010ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cd0:	b003      	add	sp, #12
 8010cd2:	4770      	bx	lr
 8010cd4:	20000040 	.word	0x20000040

08010cd8 <memmove>:
 8010cd8:	4288      	cmp	r0, r1
 8010cda:	b510      	push	{r4, lr}
 8010cdc:	eb01 0402 	add.w	r4, r1, r2
 8010ce0:	d902      	bls.n	8010ce8 <memmove+0x10>
 8010ce2:	4284      	cmp	r4, r0
 8010ce4:	4623      	mov	r3, r4
 8010ce6:	d807      	bhi.n	8010cf8 <memmove+0x20>
 8010ce8:	1e43      	subs	r3, r0, #1
 8010cea:	42a1      	cmp	r1, r4
 8010cec:	d008      	beq.n	8010d00 <memmove+0x28>
 8010cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010cf6:	e7f8      	b.n	8010cea <memmove+0x12>
 8010cf8:	4402      	add	r2, r0
 8010cfa:	4601      	mov	r1, r0
 8010cfc:	428a      	cmp	r2, r1
 8010cfe:	d100      	bne.n	8010d02 <memmove+0x2a>
 8010d00:	bd10      	pop	{r4, pc}
 8010d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d0a:	e7f7      	b.n	8010cfc <memmove+0x24>

08010d0c <_realloc_r>:
 8010d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d0e:	4607      	mov	r7, r0
 8010d10:	4614      	mov	r4, r2
 8010d12:	460e      	mov	r6, r1
 8010d14:	b921      	cbnz	r1, 8010d20 <_realloc_r+0x14>
 8010d16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d1a:	4611      	mov	r1, r2
 8010d1c:	f7fb bf88 	b.w	800cc30 <_malloc_r>
 8010d20:	b922      	cbnz	r2, 8010d2c <_realloc_r+0x20>
 8010d22:	f7ff fdc1 	bl	80108a8 <_free_r>
 8010d26:	4625      	mov	r5, r4
 8010d28:	4628      	mov	r0, r5
 8010d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d2c:	f000 fa9a 	bl	8011264 <_malloc_usable_size_r>
 8010d30:	42a0      	cmp	r0, r4
 8010d32:	d20f      	bcs.n	8010d54 <_realloc_r+0x48>
 8010d34:	4621      	mov	r1, r4
 8010d36:	4638      	mov	r0, r7
 8010d38:	f7fb ff7a 	bl	800cc30 <_malloc_r>
 8010d3c:	4605      	mov	r5, r0
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	d0f2      	beq.n	8010d28 <_realloc_r+0x1c>
 8010d42:	4631      	mov	r1, r6
 8010d44:	4622      	mov	r2, r4
 8010d46:	f7fb ff5c 	bl	800cc02 <memcpy>
 8010d4a:	4631      	mov	r1, r6
 8010d4c:	4638      	mov	r0, r7
 8010d4e:	f7ff fdab 	bl	80108a8 <_free_r>
 8010d52:	e7e9      	b.n	8010d28 <_realloc_r+0x1c>
 8010d54:	4635      	mov	r5, r6
 8010d56:	e7e7      	b.n	8010d28 <_realloc_r+0x1c>

08010d58 <__sfputc_r>:
 8010d58:	6893      	ldr	r3, [r2, #8]
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	b410      	push	{r4}
 8010d60:	6093      	str	r3, [r2, #8]
 8010d62:	da08      	bge.n	8010d76 <__sfputc_r+0x1e>
 8010d64:	6994      	ldr	r4, [r2, #24]
 8010d66:	42a3      	cmp	r3, r4
 8010d68:	db01      	blt.n	8010d6e <__sfputc_r+0x16>
 8010d6a:	290a      	cmp	r1, #10
 8010d6c:	d103      	bne.n	8010d76 <__sfputc_r+0x1e>
 8010d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d72:	f000 b94b 	b.w	801100c <__swbuf_r>
 8010d76:	6813      	ldr	r3, [r2, #0]
 8010d78:	1c58      	adds	r0, r3, #1
 8010d7a:	6010      	str	r0, [r2, #0]
 8010d7c:	7019      	strb	r1, [r3, #0]
 8010d7e:	4608      	mov	r0, r1
 8010d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d84:	4770      	bx	lr

08010d86 <__sfputs_r>:
 8010d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d88:	4606      	mov	r6, r0
 8010d8a:	460f      	mov	r7, r1
 8010d8c:	4614      	mov	r4, r2
 8010d8e:	18d5      	adds	r5, r2, r3
 8010d90:	42ac      	cmp	r4, r5
 8010d92:	d101      	bne.n	8010d98 <__sfputs_r+0x12>
 8010d94:	2000      	movs	r0, #0
 8010d96:	e007      	b.n	8010da8 <__sfputs_r+0x22>
 8010d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d9c:	463a      	mov	r2, r7
 8010d9e:	4630      	mov	r0, r6
 8010da0:	f7ff ffda 	bl	8010d58 <__sfputc_r>
 8010da4:	1c43      	adds	r3, r0, #1
 8010da6:	d1f3      	bne.n	8010d90 <__sfputs_r+0xa>
 8010da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010dac <_vfiprintf_r>:
 8010dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db0:	460d      	mov	r5, r1
 8010db2:	b09d      	sub	sp, #116	; 0x74
 8010db4:	4614      	mov	r4, r2
 8010db6:	4698      	mov	r8, r3
 8010db8:	4606      	mov	r6, r0
 8010dba:	b118      	cbz	r0, 8010dc4 <_vfiprintf_r+0x18>
 8010dbc:	6983      	ldr	r3, [r0, #24]
 8010dbe:	b90b      	cbnz	r3, 8010dc4 <_vfiprintf_r+0x18>
 8010dc0:	f7fb fe5a 	bl	800ca78 <__sinit>
 8010dc4:	4b89      	ldr	r3, [pc, #548]	; (8010fec <_vfiprintf_r+0x240>)
 8010dc6:	429d      	cmp	r5, r3
 8010dc8:	d11b      	bne.n	8010e02 <_vfiprintf_r+0x56>
 8010dca:	6875      	ldr	r5, [r6, #4]
 8010dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010dce:	07d9      	lsls	r1, r3, #31
 8010dd0:	d405      	bmi.n	8010dde <_vfiprintf_r+0x32>
 8010dd2:	89ab      	ldrh	r3, [r5, #12]
 8010dd4:	059a      	lsls	r2, r3, #22
 8010dd6:	d402      	bmi.n	8010dde <_vfiprintf_r+0x32>
 8010dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010dda:	f7fb ff10 	bl	800cbfe <__retarget_lock_acquire_recursive>
 8010dde:	89ab      	ldrh	r3, [r5, #12]
 8010de0:	071b      	lsls	r3, r3, #28
 8010de2:	d501      	bpl.n	8010de8 <_vfiprintf_r+0x3c>
 8010de4:	692b      	ldr	r3, [r5, #16]
 8010de6:	b9eb      	cbnz	r3, 8010e24 <_vfiprintf_r+0x78>
 8010de8:	4629      	mov	r1, r5
 8010dea:	4630      	mov	r0, r6
 8010dec:	f000 f960 	bl	80110b0 <__swsetup_r>
 8010df0:	b1c0      	cbz	r0, 8010e24 <_vfiprintf_r+0x78>
 8010df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010df4:	07dc      	lsls	r4, r3, #31
 8010df6:	d50e      	bpl.n	8010e16 <_vfiprintf_r+0x6a>
 8010df8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dfc:	b01d      	add	sp, #116	; 0x74
 8010dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e02:	4b7b      	ldr	r3, [pc, #492]	; (8010ff0 <_vfiprintf_r+0x244>)
 8010e04:	429d      	cmp	r5, r3
 8010e06:	d101      	bne.n	8010e0c <_vfiprintf_r+0x60>
 8010e08:	68b5      	ldr	r5, [r6, #8]
 8010e0a:	e7df      	b.n	8010dcc <_vfiprintf_r+0x20>
 8010e0c:	4b79      	ldr	r3, [pc, #484]	; (8010ff4 <_vfiprintf_r+0x248>)
 8010e0e:	429d      	cmp	r5, r3
 8010e10:	bf08      	it	eq
 8010e12:	68f5      	ldreq	r5, [r6, #12]
 8010e14:	e7da      	b.n	8010dcc <_vfiprintf_r+0x20>
 8010e16:	89ab      	ldrh	r3, [r5, #12]
 8010e18:	0598      	lsls	r0, r3, #22
 8010e1a:	d4ed      	bmi.n	8010df8 <_vfiprintf_r+0x4c>
 8010e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e1e:	f7fb feef 	bl	800cc00 <__retarget_lock_release_recursive>
 8010e22:	e7e9      	b.n	8010df8 <_vfiprintf_r+0x4c>
 8010e24:	2300      	movs	r3, #0
 8010e26:	9309      	str	r3, [sp, #36]	; 0x24
 8010e28:	2320      	movs	r3, #32
 8010e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e32:	2330      	movs	r3, #48	; 0x30
 8010e34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010ff8 <_vfiprintf_r+0x24c>
 8010e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e3c:	f04f 0901 	mov.w	r9, #1
 8010e40:	4623      	mov	r3, r4
 8010e42:	469a      	mov	sl, r3
 8010e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e48:	b10a      	cbz	r2, 8010e4e <_vfiprintf_r+0xa2>
 8010e4a:	2a25      	cmp	r2, #37	; 0x25
 8010e4c:	d1f9      	bne.n	8010e42 <_vfiprintf_r+0x96>
 8010e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8010e52:	d00b      	beq.n	8010e6c <_vfiprintf_r+0xc0>
 8010e54:	465b      	mov	r3, fp
 8010e56:	4622      	mov	r2, r4
 8010e58:	4629      	mov	r1, r5
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	f7ff ff93 	bl	8010d86 <__sfputs_r>
 8010e60:	3001      	adds	r0, #1
 8010e62:	f000 80aa 	beq.w	8010fba <_vfiprintf_r+0x20e>
 8010e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e68:	445a      	add	r2, fp
 8010e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8010e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	f000 80a2 	beq.w	8010fba <_vfiprintf_r+0x20e>
 8010e76:	2300      	movs	r3, #0
 8010e78:	f04f 32ff 	mov.w	r2, #4294967295
 8010e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e80:	f10a 0a01 	add.w	sl, sl, #1
 8010e84:	9304      	str	r3, [sp, #16]
 8010e86:	9307      	str	r3, [sp, #28]
 8010e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8010e8e:	4654      	mov	r4, sl
 8010e90:	2205      	movs	r2, #5
 8010e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e96:	4858      	ldr	r0, [pc, #352]	; (8010ff8 <_vfiprintf_r+0x24c>)
 8010e98:	f7ef f9a2 	bl	80001e0 <memchr>
 8010e9c:	9a04      	ldr	r2, [sp, #16]
 8010e9e:	b9d8      	cbnz	r0, 8010ed8 <_vfiprintf_r+0x12c>
 8010ea0:	06d1      	lsls	r1, r2, #27
 8010ea2:	bf44      	itt	mi
 8010ea4:	2320      	movmi	r3, #32
 8010ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010eaa:	0713      	lsls	r3, r2, #28
 8010eac:	bf44      	itt	mi
 8010eae:	232b      	movmi	r3, #43	; 0x2b
 8010eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8010eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8010eba:	d015      	beq.n	8010ee8 <_vfiprintf_r+0x13c>
 8010ebc:	9a07      	ldr	r2, [sp, #28]
 8010ebe:	4654      	mov	r4, sl
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	f04f 0c0a 	mov.w	ip, #10
 8010ec6:	4621      	mov	r1, r4
 8010ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ecc:	3b30      	subs	r3, #48	; 0x30
 8010ece:	2b09      	cmp	r3, #9
 8010ed0:	d94e      	bls.n	8010f70 <_vfiprintf_r+0x1c4>
 8010ed2:	b1b0      	cbz	r0, 8010f02 <_vfiprintf_r+0x156>
 8010ed4:	9207      	str	r2, [sp, #28]
 8010ed6:	e014      	b.n	8010f02 <_vfiprintf_r+0x156>
 8010ed8:	eba0 0308 	sub.w	r3, r0, r8
 8010edc:	fa09 f303 	lsl.w	r3, r9, r3
 8010ee0:	4313      	orrs	r3, r2
 8010ee2:	9304      	str	r3, [sp, #16]
 8010ee4:	46a2      	mov	sl, r4
 8010ee6:	e7d2      	b.n	8010e8e <_vfiprintf_r+0xe2>
 8010ee8:	9b03      	ldr	r3, [sp, #12]
 8010eea:	1d19      	adds	r1, r3, #4
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	9103      	str	r1, [sp, #12]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	bfbb      	ittet	lt
 8010ef4:	425b      	neglt	r3, r3
 8010ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8010efa:	9307      	strge	r3, [sp, #28]
 8010efc:	9307      	strlt	r3, [sp, #28]
 8010efe:	bfb8      	it	lt
 8010f00:	9204      	strlt	r2, [sp, #16]
 8010f02:	7823      	ldrb	r3, [r4, #0]
 8010f04:	2b2e      	cmp	r3, #46	; 0x2e
 8010f06:	d10c      	bne.n	8010f22 <_vfiprintf_r+0x176>
 8010f08:	7863      	ldrb	r3, [r4, #1]
 8010f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8010f0c:	d135      	bne.n	8010f7a <_vfiprintf_r+0x1ce>
 8010f0e:	9b03      	ldr	r3, [sp, #12]
 8010f10:	1d1a      	adds	r2, r3, #4
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	9203      	str	r2, [sp, #12]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	bfb8      	it	lt
 8010f1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f1e:	3402      	adds	r4, #2
 8010f20:	9305      	str	r3, [sp, #20]
 8010f22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011008 <_vfiprintf_r+0x25c>
 8010f26:	7821      	ldrb	r1, [r4, #0]
 8010f28:	2203      	movs	r2, #3
 8010f2a:	4650      	mov	r0, sl
 8010f2c:	f7ef f958 	bl	80001e0 <memchr>
 8010f30:	b140      	cbz	r0, 8010f44 <_vfiprintf_r+0x198>
 8010f32:	2340      	movs	r3, #64	; 0x40
 8010f34:	eba0 000a 	sub.w	r0, r0, sl
 8010f38:	fa03 f000 	lsl.w	r0, r3, r0
 8010f3c:	9b04      	ldr	r3, [sp, #16]
 8010f3e:	4303      	orrs	r3, r0
 8010f40:	3401      	adds	r4, #1
 8010f42:	9304      	str	r3, [sp, #16]
 8010f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f48:	482c      	ldr	r0, [pc, #176]	; (8010ffc <_vfiprintf_r+0x250>)
 8010f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f4e:	2206      	movs	r2, #6
 8010f50:	f7ef f946 	bl	80001e0 <memchr>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	d03f      	beq.n	8010fd8 <_vfiprintf_r+0x22c>
 8010f58:	4b29      	ldr	r3, [pc, #164]	; (8011000 <_vfiprintf_r+0x254>)
 8010f5a:	bb1b      	cbnz	r3, 8010fa4 <_vfiprintf_r+0x1f8>
 8010f5c:	9b03      	ldr	r3, [sp, #12]
 8010f5e:	3307      	adds	r3, #7
 8010f60:	f023 0307 	bic.w	r3, r3, #7
 8010f64:	3308      	adds	r3, #8
 8010f66:	9303      	str	r3, [sp, #12]
 8010f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f6a:	443b      	add	r3, r7
 8010f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8010f6e:	e767      	b.n	8010e40 <_vfiprintf_r+0x94>
 8010f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f74:	460c      	mov	r4, r1
 8010f76:	2001      	movs	r0, #1
 8010f78:	e7a5      	b.n	8010ec6 <_vfiprintf_r+0x11a>
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	3401      	adds	r4, #1
 8010f7e:	9305      	str	r3, [sp, #20]
 8010f80:	4619      	mov	r1, r3
 8010f82:	f04f 0c0a 	mov.w	ip, #10
 8010f86:	4620      	mov	r0, r4
 8010f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f8c:	3a30      	subs	r2, #48	; 0x30
 8010f8e:	2a09      	cmp	r2, #9
 8010f90:	d903      	bls.n	8010f9a <_vfiprintf_r+0x1ee>
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d0c5      	beq.n	8010f22 <_vfiprintf_r+0x176>
 8010f96:	9105      	str	r1, [sp, #20]
 8010f98:	e7c3      	b.n	8010f22 <_vfiprintf_r+0x176>
 8010f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	e7f0      	b.n	8010f86 <_vfiprintf_r+0x1da>
 8010fa4:	ab03      	add	r3, sp, #12
 8010fa6:	9300      	str	r3, [sp, #0]
 8010fa8:	462a      	mov	r2, r5
 8010faa:	4b16      	ldr	r3, [pc, #88]	; (8011004 <_vfiprintf_r+0x258>)
 8010fac:	a904      	add	r1, sp, #16
 8010fae:	4630      	mov	r0, r6
 8010fb0:	f7fb ff38 	bl	800ce24 <_printf_float>
 8010fb4:	4607      	mov	r7, r0
 8010fb6:	1c78      	adds	r0, r7, #1
 8010fb8:	d1d6      	bne.n	8010f68 <_vfiprintf_r+0x1bc>
 8010fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fbc:	07d9      	lsls	r1, r3, #31
 8010fbe:	d405      	bmi.n	8010fcc <_vfiprintf_r+0x220>
 8010fc0:	89ab      	ldrh	r3, [r5, #12]
 8010fc2:	059a      	lsls	r2, r3, #22
 8010fc4:	d402      	bmi.n	8010fcc <_vfiprintf_r+0x220>
 8010fc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010fc8:	f7fb fe1a 	bl	800cc00 <__retarget_lock_release_recursive>
 8010fcc:	89ab      	ldrh	r3, [r5, #12]
 8010fce:	065b      	lsls	r3, r3, #25
 8010fd0:	f53f af12 	bmi.w	8010df8 <_vfiprintf_r+0x4c>
 8010fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fd6:	e711      	b.n	8010dfc <_vfiprintf_r+0x50>
 8010fd8:	ab03      	add	r3, sp, #12
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	462a      	mov	r2, r5
 8010fde:	4b09      	ldr	r3, [pc, #36]	; (8011004 <_vfiprintf_r+0x258>)
 8010fe0:	a904      	add	r1, sp, #16
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	f7fc f9c2 	bl	800d36c <_printf_i>
 8010fe8:	e7e4      	b.n	8010fb4 <_vfiprintf_r+0x208>
 8010fea:	bf00      	nop
 8010fec:	08012a10 	.word	0x08012a10
 8010ff0:	08012a30 	.word	0x08012a30
 8010ff4:	080129f0 	.word	0x080129f0
 8010ff8:	08012e54 	.word	0x08012e54
 8010ffc:	08012e5e 	.word	0x08012e5e
 8011000:	0800ce25 	.word	0x0800ce25
 8011004:	08010d87 	.word	0x08010d87
 8011008:	08012e5a 	.word	0x08012e5a

0801100c <__swbuf_r>:
 801100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100e:	460e      	mov	r6, r1
 8011010:	4614      	mov	r4, r2
 8011012:	4605      	mov	r5, r0
 8011014:	b118      	cbz	r0, 801101e <__swbuf_r+0x12>
 8011016:	6983      	ldr	r3, [r0, #24]
 8011018:	b90b      	cbnz	r3, 801101e <__swbuf_r+0x12>
 801101a:	f7fb fd2d 	bl	800ca78 <__sinit>
 801101e:	4b21      	ldr	r3, [pc, #132]	; (80110a4 <__swbuf_r+0x98>)
 8011020:	429c      	cmp	r4, r3
 8011022:	d12b      	bne.n	801107c <__swbuf_r+0x70>
 8011024:	686c      	ldr	r4, [r5, #4]
 8011026:	69a3      	ldr	r3, [r4, #24]
 8011028:	60a3      	str	r3, [r4, #8]
 801102a:	89a3      	ldrh	r3, [r4, #12]
 801102c:	071a      	lsls	r2, r3, #28
 801102e:	d52f      	bpl.n	8011090 <__swbuf_r+0x84>
 8011030:	6923      	ldr	r3, [r4, #16]
 8011032:	b36b      	cbz	r3, 8011090 <__swbuf_r+0x84>
 8011034:	6923      	ldr	r3, [r4, #16]
 8011036:	6820      	ldr	r0, [r4, #0]
 8011038:	1ac0      	subs	r0, r0, r3
 801103a:	6963      	ldr	r3, [r4, #20]
 801103c:	b2f6      	uxtb	r6, r6
 801103e:	4283      	cmp	r3, r0
 8011040:	4637      	mov	r7, r6
 8011042:	dc04      	bgt.n	801104e <__swbuf_r+0x42>
 8011044:	4621      	mov	r1, r4
 8011046:	4628      	mov	r0, r5
 8011048:	f7fe fb7c 	bl	800f744 <_fflush_r>
 801104c:	bb30      	cbnz	r0, 801109c <__swbuf_r+0x90>
 801104e:	68a3      	ldr	r3, [r4, #8]
 8011050:	3b01      	subs	r3, #1
 8011052:	60a3      	str	r3, [r4, #8]
 8011054:	6823      	ldr	r3, [r4, #0]
 8011056:	1c5a      	adds	r2, r3, #1
 8011058:	6022      	str	r2, [r4, #0]
 801105a:	701e      	strb	r6, [r3, #0]
 801105c:	6963      	ldr	r3, [r4, #20]
 801105e:	3001      	adds	r0, #1
 8011060:	4283      	cmp	r3, r0
 8011062:	d004      	beq.n	801106e <__swbuf_r+0x62>
 8011064:	89a3      	ldrh	r3, [r4, #12]
 8011066:	07db      	lsls	r3, r3, #31
 8011068:	d506      	bpl.n	8011078 <__swbuf_r+0x6c>
 801106a:	2e0a      	cmp	r6, #10
 801106c:	d104      	bne.n	8011078 <__swbuf_r+0x6c>
 801106e:	4621      	mov	r1, r4
 8011070:	4628      	mov	r0, r5
 8011072:	f7fe fb67 	bl	800f744 <_fflush_r>
 8011076:	b988      	cbnz	r0, 801109c <__swbuf_r+0x90>
 8011078:	4638      	mov	r0, r7
 801107a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801107c:	4b0a      	ldr	r3, [pc, #40]	; (80110a8 <__swbuf_r+0x9c>)
 801107e:	429c      	cmp	r4, r3
 8011080:	d101      	bne.n	8011086 <__swbuf_r+0x7a>
 8011082:	68ac      	ldr	r4, [r5, #8]
 8011084:	e7cf      	b.n	8011026 <__swbuf_r+0x1a>
 8011086:	4b09      	ldr	r3, [pc, #36]	; (80110ac <__swbuf_r+0xa0>)
 8011088:	429c      	cmp	r4, r3
 801108a:	bf08      	it	eq
 801108c:	68ec      	ldreq	r4, [r5, #12]
 801108e:	e7ca      	b.n	8011026 <__swbuf_r+0x1a>
 8011090:	4621      	mov	r1, r4
 8011092:	4628      	mov	r0, r5
 8011094:	f000 f80c 	bl	80110b0 <__swsetup_r>
 8011098:	2800      	cmp	r0, #0
 801109a:	d0cb      	beq.n	8011034 <__swbuf_r+0x28>
 801109c:	f04f 37ff 	mov.w	r7, #4294967295
 80110a0:	e7ea      	b.n	8011078 <__swbuf_r+0x6c>
 80110a2:	bf00      	nop
 80110a4:	08012a10 	.word	0x08012a10
 80110a8:	08012a30 	.word	0x08012a30
 80110ac:	080129f0 	.word	0x080129f0

080110b0 <__swsetup_r>:
 80110b0:	4b32      	ldr	r3, [pc, #200]	; (801117c <__swsetup_r+0xcc>)
 80110b2:	b570      	push	{r4, r5, r6, lr}
 80110b4:	681d      	ldr	r5, [r3, #0]
 80110b6:	4606      	mov	r6, r0
 80110b8:	460c      	mov	r4, r1
 80110ba:	b125      	cbz	r5, 80110c6 <__swsetup_r+0x16>
 80110bc:	69ab      	ldr	r3, [r5, #24]
 80110be:	b913      	cbnz	r3, 80110c6 <__swsetup_r+0x16>
 80110c0:	4628      	mov	r0, r5
 80110c2:	f7fb fcd9 	bl	800ca78 <__sinit>
 80110c6:	4b2e      	ldr	r3, [pc, #184]	; (8011180 <__swsetup_r+0xd0>)
 80110c8:	429c      	cmp	r4, r3
 80110ca:	d10f      	bne.n	80110ec <__swsetup_r+0x3c>
 80110cc:	686c      	ldr	r4, [r5, #4]
 80110ce:	89a3      	ldrh	r3, [r4, #12]
 80110d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110d4:	0719      	lsls	r1, r3, #28
 80110d6:	d42c      	bmi.n	8011132 <__swsetup_r+0x82>
 80110d8:	06dd      	lsls	r5, r3, #27
 80110da:	d411      	bmi.n	8011100 <__swsetup_r+0x50>
 80110dc:	2309      	movs	r3, #9
 80110de:	6033      	str	r3, [r6, #0]
 80110e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110e4:	81a3      	strh	r3, [r4, #12]
 80110e6:	f04f 30ff 	mov.w	r0, #4294967295
 80110ea:	e03e      	b.n	801116a <__swsetup_r+0xba>
 80110ec:	4b25      	ldr	r3, [pc, #148]	; (8011184 <__swsetup_r+0xd4>)
 80110ee:	429c      	cmp	r4, r3
 80110f0:	d101      	bne.n	80110f6 <__swsetup_r+0x46>
 80110f2:	68ac      	ldr	r4, [r5, #8]
 80110f4:	e7eb      	b.n	80110ce <__swsetup_r+0x1e>
 80110f6:	4b24      	ldr	r3, [pc, #144]	; (8011188 <__swsetup_r+0xd8>)
 80110f8:	429c      	cmp	r4, r3
 80110fa:	bf08      	it	eq
 80110fc:	68ec      	ldreq	r4, [r5, #12]
 80110fe:	e7e6      	b.n	80110ce <__swsetup_r+0x1e>
 8011100:	0758      	lsls	r0, r3, #29
 8011102:	d512      	bpl.n	801112a <__swsetup_r+0x7a>
 8011104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011106:	b141      	cbz	r1, 801111a <__swsetup_r+0x6a>
 8011108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801110c:	4299      	cmp	r1, r3
 801110e:	d002      	beq.n	8011116 <__swsetup_r+0x66>
 8011110:	4630      	mov	r0, r6
 8011112:	f7ff fbc9 	bl	80108a8 <_free_r>
 8011116:	2300      	movs	r3, #0
 8011118:	6363      	str	r3, [r4, #52]	; 0x34
 801111a:	89a3      	ldrh	r3, [r4, #12]
 801111c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011120:	81a3      	strh	r3, [r4, #12]
 8011122:	2300      	movs	r3, #0
 8011124:	6063      	str	r3, [r4, #4]
 8011126:	6923      	ldr	r3, [r4, #16]
 8011128:	6023      	str	r3, [r4, #0]
 801112a:	89a3      	ldrh	r3, [r4, #12]
 801112c:	f043 0308 	orr.w	r3, r3, #8
 8011130:	81a3      	strh	r3, [r4, #12]
 8011132:	6923      	ldr	r3, [r4, #16]
 8011134:	b94b      	cbnz	r3, 801114a <__swsetup_r+0x9a>
 8011136:	89a3      	ldrh	r3, [r4, #12]
 8011138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801113c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011140:	d003      	beq.n	801114a <__swsetup_r+0x9a>
 8011142:	4621      	mov	r1, r4
 8011144:	4630      	mov	r0, r6
 8011146:	f000 f84d 	bl	80111e4 <__smakebuf_r>
 801114a:	89a0      	ldrh	r0, [r4, #12]
 801114c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011150:	f010 0301 	ands.w	r3, r0, #1
 8011154:	d00a      	beq.n	801116c <__swsetup_r+0xbc>
 8011156:	2300      	movs	r3, #0
 8011158:	60a3      	str	r3, [r4, #8]
 801115a:	6963      	ldr	r3, [r4, #20]
 801115c:	425b      	negs	r3, r3
 801115e:	61a3      	str	r3, [r4, #24]
 8011160:	6923      	ldr	r3, [r4, #16]
 8011162:	b943      	cbnz	r3, 8011176 <__swsetup_r+0xc6>
 8011164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011168:	d1ba      	bne.n	80110e0 <__swsetup_r+0x30>
 801116a:	bd70      	pop	{r4, r5, r6, pc}
 801116c:	0781      	lsls	r1, r0, #30
 801116e:	bf58      	it	pl
 8011170:	6963      	ldrpl	r3, [r4, #20]
 8011172:	60a3      	str	r3, [r4, #8]
 8011174:	e7f4      	b.n	8011160 <__swsetup_r+0xb0>
 8011176:	2000      	movs	r0, #0
 8011178:	e7f7      	b.n	801116a <__swsetup_r+0xba>
 801117a:	bf00      	nop
 801117c:	20000040 	.word	0x20000040
 8011180:	08012a10 	.word	0x08012a10
 8011184:	08012a30 	.word	0x08012a30
 8011188:	080129f0 	.word	0x080129f0

0801118c <abort>:
 801118c:	b508      	push	{r3, lr}
 801118e:	2006      	movs	r0, #6
 8011190:	f000 f898 	bl	80112c4 <raise>
 8011194:	2001      	movs	r0, #1
 8011196:	f7f2 fcf1 	bl	8003b7c <_exit>

0801119a <__swhatbuf_r>:
 801119a:	b570      	push	{r4, r5, r6, lr}
 801119c:	460e      	mov	r6, r1
 801119e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111a2:	2900      	cmp	r1, #0
 80111a4:	b096      	sub	sp, #88	; 0x58
 80111a6:	4614      	mov	r4, r2
 80111a8:	461d      	mov	r5, r3
 80111aa:	da07      	bge.n	80111bc <__swhatbuf_r+0x22>
 80111ac:	2300      	movs	r3, #0
 80111ae:	602b      	str	r3, [r5, #0]
 80111b0:	89b3      	ldrh	r3, [r6, #12]
 80111b2:	061a      	lsls	r2, r3, #24
 80111b4:	d410      	bmi.n	80111d8 <__swhatbuf_r+0x3e>
 80111b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111ba:	e00e      	b.n	80111da <__swhatbuf_r+0x40>
 80111bc:	466a      	mov	r2, sp
 80111be:	f000 f89d 	bl	80112fc <_fstat_r>
 80111c2:	2800      	cmp	r0, #0
 80111c4:	dbf2      	blt.n	80111ac <__swhatbuf_r+0x12>
 80111c6:	9a01      	ldr	r2, [sp, #4]
 80111c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80111cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80111d0:	425a      	negs	r2, r3
 80111d2:	415a      	adcs	r2, r3
 80111d4:	602a      	str	r2, [r5, #0]
 80111d6:	e7ee      	b.n	80111b6 <__swhatbuf_r+0x1c>
 80111d8:	2340      	movs	r3, #64	; 0x40
 80111da:	2000      	movs	r0, #0
 80111dc:	6023      	str	r3, [r4, #0]
 80111de:	b016      	add	sp, #88	; 0x58
 80111e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080111e4 <__smakebuf_r>:
 80111e4:	898b      	ldrh	r3, [r1, #12]
 80111e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111e8:	079d      	lsls	r5, r3, #30
 80111ea:	4606      	mov	r6, r0
 80111ec:	460c      	mov	r4, r1
 80111ee:	d507      	bpl.n	8011200 <__smakebuf_r+0x1c>
 80111f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80111f4:	6023      	str	r3, [r4, #0]
 80111f6:	6123      	str	r3, [r4, #16]
 80111f8:	2301      	movs	r3, #1
 80111fa:	6163      	str	r3, [r4, #20]
 80111fc:	b002      	add	sp, #8
 80111fe:	bd70      	pop	{r4, r5, r6, pc}
 8011200:	ab01      	add	r3, sp, #4
 8011202:	466a      	mov	r2, sp
 8011204:	f7ff ffc9 	bl	801119a <__swhatbuf_r>
 8011208:	9900      	ldr	r1, [sp, #0]
 801120a:	4605      	mov	r5, r0
 801120c:	4630      	mov	r0, r6
 801120e:	f7fb fd0f 	bl	800cc30 <_malloc_r>
 8011212:	b948      	cbnz	r0, 8011228 <__smakebuf_r+0x44>
 8011214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011218:	059a      	lsls	r2, r3, #22
 801121a:	d4ef      	bmi.n	80111fc <__smakebuf_r+0x18>
 801121c:	f023 0303 	bic.w	r3, r3, #3
 8011220:	f043 0302 	orr.w	r3, r3, #2
 8011224:	81a3      	strh	r3, [r4, #12]
 8011226:	e7e3      	b.n	80111f0 <__smakebuf_r+0xc>
 8011228:	4b0d      	ldr	r3, [pc, #52]	; (8011260 <__smakebuf_r+0x7c>)
 801122a:	62b3      	str	r3, [r6, #40]	; 0x28
 801122c:	89a3      	ldrh	r3, [r4, #12]
 801122e:	6020      	str	r0, [r4, #0]
 8011230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011234:	81a3      	strh	r3, [r4, #12]
 8011236:	9b00      	ldr	r3, [sp, #0]
 8011238:	6163      	str	r3, [r4, #20]
 801123a:	9b01      	ldr	r3, [sp, #4]
 801123c:	6120      	str	r0, [r4, #16]
 801123e:	b15b      	cbz	r3, 8011258 <__smakebuf_r+0x74>
 8011240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011244:	4630      	mov	r0, r6
 8011246:	f000 f86b 	bl	8011320 <_isatty_r>
 801124a:	b128      	cbz	r0, 8011258 <__smakebuf_r+0x74>
 801124c:	89a3      	ldrh	r3, [r4, #12]
 801124e:	f023 0303 	bic.w	r3, r3, #3
 8011252:	f043 0301 	orr.w	r3, r3, #1
 8011256:	81a3      	strh	r3, [r4, #12]
 8011258:	89a0      	ldrh	r0, [r4, #12]
 801125a:	4305      	orrs	r5, r0
 801125c:	81a5      	strh	r5, [r4, #12]
 801125e:	e7cd      	b.n	80111fc <__smakebuf_r+0x18>
 8011260:	0800ca11 	.word	0x0800ca11

08011264 <_malloc_usable_size_r>:
 8011264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011268:	1f18      	subs	r0, r3, #4
 801126a:	2b00      	cmp	r3, #0
 801126c:	bfbc      	itt	lt
 801126e:	580b      	ldrlt	r3, [r1, r0]
 8011270:	18c0      	addlt	r0, r0, r3
 8011272:	4770      	bx	lr

08011274 <_raise_r>:
 8011274:	291f      	cmp	r1, #31
 8011276:	b538      	push	{r3, r4, r5, lr}
 8011278:	4604      	mov	r4, r0
 801127a:	460d      	mov	r5, r1
 801127c:	d904      	bls.n	8011288 <_raise_r+0x14>
 801127e:	2316      	movs	r3, #22
 8011280:	6003      	str	r3, [r0, #0]
 8011282:	f04f 30ff 	mov.w	r0, #4294967295
 8011286:	bd38      	pop	{r3, r4, r5, pc}
 8011288:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801128a:	b112      	cbz	r2, 8011292 <_raise_r+0x1e>
 801128c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011290:	b94b      	cbnz	r3, 80112a6 <_raise_r+0x32>
 8011292:	4620      	mov	r0, r4
 8011294:	f000 f830 	bl	80112f8 <_getpid_r>
 8011298:	462a      	mov	r2, r5
 801129a:	4601      	mov	r1, r0
 801129c:	4620      	mov	r0, r4
 801129e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112a2:	f000 b817 	b.w	80112d4 <_kill_r>
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	d00a      	beq.n	80112c0 <_raise_r+0x4c>
 80112aa:	1c59      	adds	r1, r3, #1
 80112ac:	d103      	bne.n	80112b6 <_raise_r+0x42>
 80112ae:	2316      	movs	r3, #22
 80112b0:	6003      	str	r3, [r0, #0]
 80112b2:	2001      	movs	r0, #1
 80112b4:	e7e7      	b.n	8011286 <_raise_r+0x12>
 80112b6:	2400      	movs	r4, #0
 80112b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80112bc:	4628      	mov	r0, r5
 80112be:	4798      	blx	r3
 80112c0:	2000      	movs	r0, #0
 80112c2:	e7e0      	b.n	8011286 <_raise_r+0x12>

080112c4 <raise>:
 80112c4:	4b02      	ldr	r3, [pc, #8]	; (80112d0 <raise+0xc>)
 80112c6:	4601      	mov	r1, r0
 80112c8:	6818      	ldr	r0, [r3, #0]
 80112ca:	f7ff bfd3 	b.w	8011274 <_raise_r>
 80112ce:	bf00      	nop
 80112d0:	20000040 	.word	0x20000040

080112d4 <_kill_r>:
 80112d4:	b538      	push	{r3, r4, r5, lr}
 80112d6:	4d07      	ldr	r5, [pc, #28]	; (80112f4 <_kill_r+0x20>)
 80112d8:	2300      	movs	r3, #0
 80112da:	4604      	mov	r4, r0
 80112dc:	4608      	mov	r0, r1
 80112de:	4611      	mov	r1, r2
 80112e0:	602b      	str	r3, [r5, #0]
 80112e2:	f7f2 fc3b 	bl	8003b5c <_kill>
 80112e6:	1c43      	adds	r3, r0, #1
 80112e8:	d102      	bne.n	80112f0 <_kill_r+0x1c>
 80112ea:	682b      	ldr	r3, [r5, #0]
 80112ec:	b103      	cbz	r3, 80112f0 <_kill_r+0x1c>
 80112ee:	6023      	str	r3, [r4, #0]
 80112f0:	bd38      	pop	{r3, r4, r5, pc}
 80112f2:	bf00      	nop
 80112f4:	200062d4 	.word	0x200062d4

080112f8 <_getpid_r>:
 80112f8:	f7f2 bc28 	b.w	8003b4c <_getpid>

080112fc <_fstat_r>:
 80112fc:	b538      	push	{r3, r4, r5, lr}
 80112fe:	4d07      	ldr	r5, [pc, #28]	; (801131c <_fstat_r+0x20>)
 8011300:	2300      	movs	r3, #0
 8011302:	4604      	mov	r4, r0
 8011304:	4608      	mov	r0, r1
 8011306:	4611      	mov	r1, r2
 8011308:	602b      	str	r3, [r5, #0]
 801130a:	f7f2 fc86 	bl	8003c1a <_fstat>
 801130e:	1c43      	adds	r3, r0, #1
 8011310:	d102      	bne.n	8011318 <_fstat_r+0x1c>
 8011312:	682b      	ldr	r3, [r5, #0]
 8011314:	b103      	cbz	r3, 8011318 <_fstat_r+0x1c>
 8011316:	6023      	str	r3, [r4, #0]
 8011318:	bd38      	pop	{r3, r4, r5, pc}
 801131a:	bf00      	nop
 801131c:	200062d4 	.word	0x200062d4

08011320 <_isatty_r>:
 8011320:	b538      	push	{r3, r4, r5, lr}
 8011322:	4d06      	ldr	r5, [pc, #24]	; (801133c <_isatty_r+0x1c>)
 8011324:	2300      	movs	r3, #0
 8011326:	4604      	mov	r4, r0
 8011328:	4608      	mov	r0, r1
 801132a:	602b      	str	r3, [r5, #0]
 801132c:	f7f2 fc85 	bl	8003c3a <_isatty>
 8011330:	1c43      	adds	r3, r0, #1
 8011332:	d102      	bne.n	801133a <_isatty_r+0x1a>
 8011334:	682b      	ldr	r3, [r5, #0]
 8011336:	b103      	cbz	r3, 801133a <_isatty_r+0x1a>
 8011338:	6023      	str	r3, [r4, #0]
 801133a:	bd38      	pop	{r3, r4, r5, pc}
 801133c:	200062d4 	.word	0x200062d4

08011340 <pow>:
 8011340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011344:	ec59 8b10 	vmov	r8, r9, d0
 8011348:	ec57 6b11 	vmov	r6, r7, d1
 801134c:	f000 f8a8 	bl	80114a0 <__ieee754_pow>
 8011350:	4b4e      	ldr	r3, [pc, #312]	; (801148c <pow+0x14c>)
 8011352:	f993 3000 	ldrsb.w	r3, [r3]
 8011356:	3301      	adds	r3, #1
 8011358:	ec55 4b10 	vmov	r4, r5, d0
 801135c:	d015      	beq.n	801138a <pow+0x4a>
 801135e:	4632      	mov	r2, r6
 8011360:	463b      	mov	r3, r7
 8011362:	4630      	mov	r0, r6
 8011364:	4639      	mov	r1, r7
 8011366:	f7ef fbe1 	bl	8000b2c <__aeabi_dcmpun>
 801136a:	b970      	cbnz	r0, 801138a <pow+0x4a>
 801136c:	4642      	mov	r2, r8
 801136e:	464b      	mov	r3, r9
 8011370:	4640      	mov	r0, r8
 8011372:	4649      	mov	r1, r9
 8011374:	f7ef fbda 	bl	8000b2c <__aeabi_dcmpun>
 8011378:	2200      	movs	r2, #0
 801137a:	2300      	movs	r3, #0
 801137c:	b148      	cbz	r0, 8011392 <pow+0x52>
 801137e:	4630      	mov	r0, r6
 8011380:	4639      	mov	r1, r7
 8011382:	f7ef fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 8011386:	2800      	cmp	r0, #0
 8011388:	d17d      	bne.n	8011486 <pow+0x146>
 801138a:	ec45 4b10 	vmov	d0, r4, r5
 801138e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011392:	4640      	mov	r0, r8
 8011394:	4649      	mov	r1, r9
 8011396:	f7ef fb97 	bl	8000ac8 <__aeabi_dcmpeq>
 801139a:	b1e0      	cbz	r0, 80113d6 <pow+0x96>
 801139c:	2200      	movs	r2, #0
 801139e:	2300      	movs	r3, #0
 80113a0:	4630      	mov	r0, r6
 80113a2:	4639      	mov	r1, r7
 80113a4:	f7ef fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 80113a8:	2800      	cmp	r0, #0
 80113aa:	d16c      	bne.n	8011486 <pow+0x146>
 80113ac:	ec47 6b10 	vmov	d0, r6, r7
 80113b0:	f000 fe55 	bl	801205e <finite>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	d0e8      	beq.n	801138a <pow+0x4a>
 80113b8:	2200      	movs	r2, #0
 80113ba:	2300      	movs	r3, #0
 80113bc:	4630      	mov	r0, r6
 80113be:	4639      	mov	r1, r7
 80113c0:	f7ef fb8c 	bl	8000adc <__aeabi_dcmplt>
 80113c4:	2800      	cmp	r0, #0
 80113c6:	d0e0      	beq.n	801138a <pow+0x4a>
 80113c8:	f7fb faf8 	bl	800c9bc <__errno>
 80113cc:	2321      	movs	r3, #33	; 0x21
 80113ce:	6003      	str	r3, [r0, #0]
 80113d0:	2400      	movs	r4, #0
 80113d2:	4d2f      	ldr	r5, [pc, #188]	; (8011490 <pow+0x150>)
 80113d4:	e7d9      	b.n	801138a <pow+0x4a>
 80113d6:	ec45 4b10 	vmov	d0, r4, r5
 80113da:	f000 fe40 	bl	801205e <finite>
 80113de:	bbb8      	cbnz	r0, 8011450 <pow+0x110>
 80113e0:	ec49 8b10 	vmov	d0, r8, r9
 80113e4:	f000 fe3b 	bl	801205e <finite>
 80113e8:	b390      	cbz	r0, 8011450 <pow+0x110>
 80113ea:	ec47 6b10 	vmov	d0, r6, r7
 80113ee:	f000 fe36 	bl	801205e <finite>
 80113f2:	b368      	cbz	r0, 8011450 <pow+0x110>
 80113f4:	4622      	mov	r2, r4
 80113f6:	462b      	mov	r3, r5
 80113f8:	4620      	mov	r0, r4
 80113fa:	4629      	mov	r1, r5
 80113fc:	f7ef fb96 	bl	8000b2c <__aeabi_dcmpun>
 8011400:	b160      	cbz	r0, 801141c <pow+0xdc>
 8011402:	f7fb fadb 	bl	800c9bc <__errno>
 8011406:	2321      	movs	r3, #33	; 0x21
 8011408:	6003      	str	r3, [r0, #0]
 801140a:	2200      	movs	r2, #0
 801140c:	2300      	movs	r3, #0
 801140e:	4610      	mov	r0, r2
 8011410:	4619      	mov	r1, r3
 8011412:	f7ef fa1b 	bl	800084c <__aeabi_ddiv>
 8011416:	4604      	mov	r4, r0
 8011418:	460d      	mov	r5, r1
 801141a:	e7b6      	b.n	801138a <pow+0x4a>
 801141c:	f7fb face 	bl	800c9bc <__errno>
 8011420:	2322      	movs	r3, #34	; 0x22
 8011422:	6003      	str	r3, [r0, #0]
 8011424:	2200      	movs	r2, #0
 8011426:	2300      	movs	r3, #0
 8011428:	4640      	mov	r0, r8
 801142a:	4649      	mov	r1, r9
 801142c:	f7ef fb56 	bl	8000adc <__aeabi_dcmplt>
 8011430:	2400      	movs	r4, #0
 8011432:	b158      	cbz	r0, 801144c <pow+0x10c>
 8011434:	ec47 6b10 	vmov	d0, r6, r7
 8011438:	f000 fe1c 	bl	8012074 <rint>
 801143c:	4632      	mov	r2, r6
 801143e:	ec51 0b10 	vmov	r0, r1, d0
 8011442:	463b      	mov	r3, r7
 8011444:	f7ef fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8011448:	2800      	cmp	r0, #0
 801144a:	d0c2      	beq.n	80113d2 <pow+0x92>
 801144c:	4d11      	ldr	r5, [pc, #68]	; (8011494 <pow+0x154>)
 801144e:	e79c      	b.n	801138a <pow+0x4a>
 8011450:	2200      	movs	r2, #0
 8011452:	2300      	movs	r3, #0
 8011454:	4620      	mov	r0, r4
 8011456:	4629      	mov	r1, r5
 8011458:	f7ef fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 801145c:	2800      	cmp	r0, #0
 801145e:	d094      	beq.n	801138a <pow+0x4a>
 8011460:	ec49 8b10 	vmov	d0, r8, r9
 8011464:	f000 fdfb 	bl	801205e <finite>
 8011468:	2800      	cmp	r0, #0
 801146a:	d08e      	beq.n	801138a <pow+0x4a>
 801146c:	ec47 6b10 	vmov	d0, r6, r7
 8011470:	f000 fdf5 	bl	801205e <finite>
 8011474:	2800      	cmp	r0, #0
 8011476:	d088      	beq.n	801138a <pow+0x4a>
 8011478:	f7fb faa0 	bl	800c9bc <__errno>
 801147c:	2322      	movs	r3, #34	; 0x22
 801147e:	6003      	str	r3, [r0, #0]
 8011480:	2400      	movs	r4, #0
 8011482:	2500      	movs	r5, #0
 8011484:	e781      	b.n	801138a <pow+0x4a>
 8011486:	4d04      	ldr	r5, [pc, #16]	; (8011498 <pow+0x158>)
 8011488:	2400      	movs	r4, #0
 801148a:	e77e      	b.n	801138a <pow+0x4a>
 801148c:	20000214 	.word	0x20000214
 8011490:	fff00000 	.word	0xfff00000
 8011494:	7ff00000 	.word	0x7ff00000
 8011498:	3ff00000 	.word	0x3ff00000
 801149c:	00000000 	.word	0x00000000

080114a0 <__ieee754_pow>:
 80114a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a4:	ed2d 8b06 	vpush	{d8-d10}
 80114a8:	b08d      	sub	sp, #52	; 0x34
 80114aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80114ae:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80114b2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80114b6:	ea56 0100 	orrs.w	r1, r6, r0
 80114ba:	ec53 2b10 	vmov	r2, r3, d0
 80114be:	f000 84d1 	beq.w	8011e64 <__ieee754_pow+0x9c4>
 80114c2:	497f      	ldr	r1, [pc, #508]	; (80116c0 <__ieee754_pow+0x220>)
 80114c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80114c8:	428c      	cmp	r4, r1
 80114ca:	ee10 8a10 	vmov	r8, s0
 80114ce:	4699      	mov	r9, r3
 80114d0:	dc09      	bgt.n	80114e6 <__ieee754_pow+0x46>
 80114d2:	d103      	bne.n	80114dc <__ieee754_pow+0x3c>
 80114d4:	b97a      	cbnz	r2, 80114f6 <__ieee754_pow+0x56>
 80114d6:	42a6      	cmp	r6, r4
 80114d8:	dd02      	ble.n	80114e0 <__ieee754_pow+0x40>
 80114da:	e00c      	b.n	80114f6 <__ieee754_pow+0x56>
 80114dc:	428e      	cmp	r6, r1
 80114de:	dc02      	bgt.n	80114e6 <__ieee754_pow+0x46>
 80114e0:	428e      	cmp	r6, r1
 80114e2:	d110      	bne.n	8011506 <__ieee754_pow+0x66>
 80114e4:	b178      	cbz	r0, 8011506 <__ieee754_pow+0x66>
 80114e6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80114ea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80114ee:	ea54 0308 	orrs.w	r3, r4, r8
 80114f2:	f000 84b7 	beq.w	8011e64 <__ieee754_pow+0x9c4>
 80114f6:	4873      	ldr	r0, [pc, #460]	; (80116c4 <__ieee754_pow+0x224>)
 80114f8:	b00d      	add	sp, #52	; 0x34
 80114fa:	ecbd 8b06 	vpop	{d8-d10}
 80114fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011502:	f7ff bb91 	b.w	8010c28 <nan>
 8011506:	f1b9 0f00 	cmp.w	r9, #0
 801150a:	da36      	bge.n	801157a <__ieee754_pow+0xda>
 801150c:	496e      	ldr	r1, [pc, #440]	; (80116c8 <__ieee754_pow+0x228>)
 801150e:	428e      	cmp	r6, r1
 8011510:	dc51      	bgt.n	80115b6 <__ieee754_pow+0x116>
 8011512:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8011516:	428e      	cmp	r6, r1
 8011518:	f340 84af 	ble.w	8011e7a <__ieee754_pow+0x9da>
 801151c:	1531      	asrs	r1, r6, #20
 801151e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011522:	2914      	cmp	r1, #20
 8011524:	dd0f      	ble.n	8011546 <__ieee754_pow+0xa6>
 8011526:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801152a:	fa20 fc01 	lsr.w	ip, r0, r1
 801152e:	fa0c f101 	lsl.w	r1, ip, r1
 8011532:	4281      	cmp	r1, r0
 8011534:	f040 84a1 	bne.w	8011e7a <__ieee754_pow+0x9da>
 8011538:	f00c 0c01 	and.w	ip, ip, #1
 801153c:	f1cc 0102 	rsb	r1, ip, #2
 8011540:	9100      	str	r1, [sp, #0]
 8011542:	b180      	cbz	r0, 8011566 <__ieee754_pow+0xc6>
 8011544:	e059      	b.n	80115fa <__ieee754_pow+0x15a>
 8011546:	2800      	cmp	r0, #0
 8011548:	d155      	bne.n	80115f6 <__ieee754_pow+0x156>
 801154a:	f1c1 0114 	rsb	r1, r1, #20
 801154e:	fa46 fc01 	asr.w	ip, r6, r1
 8011552:	fa0c f101 	lsl.w	r1, ip, r1
 8011556:	42b1      	cmp	r1, r6
 8011558:	f040 848c 	bne.w	8011e74 <__ieee754_pow+0x9d4>
 801155c:	f00c 0c01 	and.w	ip, ip, #1
 8011560:	f1cc 0102 	rsb	r1, ip, #2
 8011564:	9100      	str	r1, [sp, #0]
 8011566:	4959      	ldr	r1, [pc, #356]	; (80116cc <__ieee754_pow+0x22c>)
 8011568:	428e      	cmp	r6, r1
 801156a:	d12d      	bne.n	80115c8 <__ieee754_pow+0x128>
 801156c:	2f00      	cmp	r7, #0
 801156e:	da79      	bge.n	8011664 <__ieee754_pow+0x1c4>
 8011570:	4956      	ldr	r1, [pc, #344]	; (80116cc <__ieee754_pow+0x22c>)
 8011572:	2000      	movs	r0, #0
 8011574:	f7ef f96a 	bl	800084c <__aeabi_ddiv>
 8011578:	e016      	b.n	80115a8 <__ieee754_pow+0x108>
 801157a:	2100      	movs	r1, #0
 801157c:	9100      	str	r1, [sp, #0]
 801157e:	2800      	cmp	r0, #0
 8011580:	d13b      	bne.n	80115fa <__ieee754_pow+0x15a>
 8011582:	494f      	ldr	r1, [pc, #316]	; (80116c0 <__ieee754_pow+0x220>)
 8011584:	428e      	cmp	r6, r1
 8011586:	d1ee      	bne.n	8011566 <__ieee754_pow+0xc6>
 8011588:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801158c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011590:	ea53 0308 	orrs.w	r3, r3, r8
 8011594:	f000 8466 	beq.w	8011e64 <__ieee754_pow+0x9c4>
 8011598:	4b4d      	ldr	r3, [pc, #308]	; (80116d0 <__ieee754_pow+0x230>)
 801159a:	429c      	cmp	r4, r3
 801159c:	dd0d      	ble.n	80115ba <__ieee754_pow+0x11a>
 801159e:	2f00      	cmp	r7, #0
 80115a0:	f280 8464 	bge.w	8011e6c <__ieee754_pow+0x9cc>
 80115a4:	2000      	movs	r0, #0
 80115a6:	2100      	movs	r1, #0
 80115a8:	ec41 0b10 	vmov	d0, r0, r1
 80115ac:	b00d      	add	sp, #52	; 0x34
 80115ae:	ecbd 8b06 	vpop	{d8-d10}
 80115b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b6:	2102      	movs	r1, #2
 80115b8:	e7e0      	b.n	801157c <__ieee754_pow+0xdc>
 80115ba:	2f00      	cmp	r7, #0
 80115bc:	daf2      	bge.n	80115a4 <__ieee754_pow+0x104>
 80115be:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80115c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80115c6:	e7ef      	b.n	80115a8 <__ieee754_pow+0x108>
 80115c8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80115cc:	d104      	bne.n	80115d8 <__ieee754_pow+0x138>
 80115ce:	4610      	mov	r0, r2
 80115d0:	4619      	mov	r1, r3
 80115d2:	f7ef f811 	bl	80005f8 <__aeabi_dmul>
 80115d6:	e7e7      	b.n	80115a8 <__ieee754_pow+0x108>
 80115d8:	493e      	ldr	r1, [pc, #248]	; (80116d4 <__ieee754_pow+0x234>)
 80115da:	428f      	cmp	r7, r1
 80115dc:	d10d      	bne.n	80115fa <__ieee754_pow+0x15a>
 80115de:	f1b9 0f00 	cmp.w	r9, #0
 80115e2:	db0a      	blt.n	80115fa <__ieee754_pow+0x15a>
 80115e4:	ec43 2b10 	vmov	d0, r2, r3
 80115e8:	b00d      	add	sp, #52	; 0x34
 80115ea:	ecbd 8b06 	vpop	{d8-d10}
 80115ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115f2:	f000 bc77 	b.w	8011ee4 <__ieee754_sqrt>
 80115f6:	2100      	movs	r1, #0
 80115f8:	9100      	str	r1, [sp, #0]
 80115fa:	ec43 2b10 	vmov	d0, r2, r3
 80115fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011602:	f000 fd23 	bl	801204c <fabs>
 8011606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801160a:	ec51 0b10 	vmov	r0, r1, d0
 801160e:	f1b8 0f00 	cmp.w	r8, #0
 8011612:	d12a      	bne.n	801166a <__ieee754_pow+0x1ca>
 8011614:	b12c      	cbz	r4, 8011622 <__ieee754_pow+0x182>
 8011616:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80116cc <__ieee754_pow+0x22c>
 801161a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801161e:	45e6      	cmp	lr, ip
 8011620:	d123      	bne.n	801166a <__ieee754_pow+0x1ca>
 8011622:	2f00      	cmp	r7, #0
 8011624:	da05      	bge.n	8011632 <__ieee754_pow+0x192>
 8011626:	4602      	mov	r2, r0
 8011628:	460b      	mov	r3, r1
 801162a:	2000      	movs	r0, #0
 801162c:	4927      	ldr	r1, [pc, #156]	; (80116cc <__ieee754_pow+0x22c>)
 801162e:	f7ef f90d 	bl	800084c <__aeabi_ddiv>
 8011632:	f1b9 0f00 	cmp.w	r9, #0
 8011636:	dab7      	bge.n	80115a8 <__ieee754_pow+0x108>
 8011638:	9b00      	ldr	r3, [sp, #0]
 801163a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801163e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011642:	4323      	orrs	r3, r4
 8011644:	d108      	bne.n	8011658 <__ieee754_pow+0x1b8>
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	4610      	mov	r0, r2
 801164c:	4619      	mov	r1, r3
 801164e:	f7ee fe1b 	bl	8000288 <__aeabi_dsub>
 8011652:	4602      	mov	r2, r0
 8011654:	460b      	mov	r3, r1
 8011656:	e78d      	b.n	8011574 <__ieee754_pow+0xd4>
 8011658:	9b00      	ldr	r3, [sp, #0]
 801165a:	2b01      	cmp	r3, #1
 801165c:	d1a4      	bne.n	80115a8 <__ieee754_pow+0x108>
 801165e:	4602      	mov	r2, r0
 8011660:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011664:	4610      	mov	r0, r2
 8011666:	4619      	mov	r1, r3
 8011668:	e79e      	b.n	80115a8 <__ieee754_pow+0x108>
 801166a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801166e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8011672:	950a      	str	r5, [sp, #40]	; 0x28
 8011674:	9d00      	ldr	r5, [sp, #0]
 8011676:	46ac      	mov	ip, r5
 8011678:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801167a:	ea5c 0505 	orrs.w	r5, ip, r5
 801167e:	d0e4      	beq.n	801164a <__ieee754_pow+0x1aa>
 8011680:	4b15      	ldr	r3, [pc, #84]	; (80116d8 <__ieee754_pow+0x238>)
 8011682:	429e      	cmp	r6, r3
 8011684:	f340 80fc 	ble.w	8011880 <__ieee754_pow+0x3e0>
 8011688:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801168c:	429e      	cmp	r6, r3
 801168e:	4b10      	ldr	r3, [pc, #64]	; (80116d0 <__ieee754_pow+0x230>)
 8011690:	dd07      	ble.n	80116a2 <__ieee754_pow+0x202>
 8011692:	429c      	cmp	r4, r3
 8011694:	dc0a      	bgt.n	80116ac <__ieee754_pow+0x20c>
 8011696:	2f00      	cmp	r7, #0
 8011698:	da84      	bge.n	80115a4 <__ieee754_pow+0x104>
 801169a:	a307      	add	r3, pc, #28	; (adr r3, 80116b8 <__ieee754_pow+0x218>)
 801169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a0:	e795      	b.n	80115ce <__ieee754_pow+0x12e>
 80116a2:	429c      	cmp	r4, r3
 80116a4:	dbf7      	blt.n	8011696 <__ieee754_pow+0x1f6>
 80116a6:	4b09      	ldr	r3, [pc, #36]	; (80116cc <__ieee754_pow+0x22c>)
 80116a8:	429c      	cmp	r4, r3
 80116aa:	dd17      	ble.n	80116dc <__ieee754_pow+0x23c>
 80116ac:	2f00      	cmp	r7, #0
 80116ae:	dcf4      	bgt.n	801169a <__ieee754_pow+0x1fa>
 80116b0:	e778      	b.n	80115a4 <__ieee754_pow+0x104>
 80116b2:	bf00      	nop
 80116b4:	f3af 8000 	nop.w
 80116b8:	8800759c 	.word	0x8800759c
 80116bc:	7e37e43c 	.word	0x7e37e43c
 80116c0:	7ff00000 	.word	0x7ff00000
 80116c4:	08012ea0 	.word	0x08012ea0
 80116c8:	433fffff 	.word	0x433fffff
 80116cc:	3ff00000 	.word	0x3ff00000
 80116d0:	3fefffff 	.word	0x3fefffff
 80116d4:	3fe00000 	.word	0x3fe00000
 80116d8:	41e00000 	.word	0x41e00000
 80116dc:	4b64      	ldr	r3, [pc, #400]	; (8011870 <__ieee754_pow+0x3d0>)
 80116de:	2200      	movs	r2, #0
 80116e0:	f7ee fdd2 	bl	8000288 <__aeabi_dsub>
 80116e4:	a356      	add	r3, pc, #344	; (adr r3, 8011840 <__ieee754_pow+0x3a0>)
 80116e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ea:	4604      	mov	r4, r0
 80116ec:	460d      	mov	r5, r1
 80116ee:	f7ee ff83 	bl	80005f8 <__aeabi_dmul>
 80116f2:	a355      	add	r3, pc, #340	; (adr r3, 8011848 <__ieee754_pow+0x3a8>)
 80116f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f8:	4606      	mov	r6, r0
 80116fa:	460f      	mov	r7, r1
 80116fc:	4620      	mov	r0, r4
 80116fe:	4629      	mov	r1, r5
 8011700:	f7ee ff7a 	bl	80005f8 <__aeabi_dmul>
 8011704:	4b5b      	ldr	r3, [pc, #364]	; (8011874 <__ieee754_pow+0x3d4>)
 8011706:	4682      	mov	sl, r0
 8011708:	468b      	mov	fp, r1
 801170a:	2200      	movs	r2, #0
 801170c:	4620      	mov	r0, r4
 801170e:	4629      	mov	r1, r5
 8011710:	f7ee ff72 	bl	80005f8 <__aeabi_dmul>
 8011714:	4602      	mov	r2, r0
 8011716:	460b      	mov	r3, r1
 8011718:	a14d      	add	r1, pc, #308	; (adr r1, 8011850 <__ieee754_pow+0x3b0>)
 801171a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801171e:	f7ee fdb3 	bl	8000288 <__aeabi_dsub>
 8011722:	4622      	mov	r2, r4
 8011724:	462b      	mov	r3, r5
 8011726:	f7ee ff67 	bl	80005f8 <__aeabi_dmul>
 801172a:	4602      	mov	r2, r0
 801172c:	460b      	mov	r3, r1
 801172e:	2000      	movs	r0, #0
 8011730:	4951      	ldr	r1, [pc, #324]	; (8011878 <__ieee754_pow+0x3d8>)
 8011732:	f7ee fda9 	bl	8000288 <__aeabi_dsub>
 8011736:	4622      	mov	r2, r4
 8011738:	4680      	mov	r8, r0
 801173a:	4689      	mov	r9, r1
 801173c:	462b      	mov	r3, r5
 801173e:	4620      	mov	r0, r4
 8011740:	4629      	mov	r1, r5
 8011742:	f7ee ff59 	bl	80005f8 <__aeabi_dmul>
 8011746:	4602      	mov	r2, r0
 8011748:	460b      	mov	r3, r1
 801174a:	4640      	mov	r0, r8
 801174c:	4649      	mov	r1, r9
 801174e:	f7ee ff53 	bl	80005f8 <__aeabi_dmul>
 8011752:	a341      	add	r3, pc, #260	; (adr r3, 8011858 <__ieee754_pow+0x3b8>)
 8011754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011758:	f7ee ff4e 	bl	80005f8 <__aeabi_dmul>
 801175c:	4602      	mov	r2, r0
 801175e:	460b      	mov	r3, r1
 8011760:	4650      	mov	r0, sl
 8011762:	4659      	mov	r1, fp
 8011764:	f7ee fd90 	bl	8000288 <__aeabi_dsub>
 8011768:	4602      	mov	r2, r0
 801176a:	460b      	mov	r3, r1
 801176c:	4680      	mov	r8, r0
 801176e:	4689      	mov	r9, r1
 8011770:	4630      	mov	r0, r6
 8011772:	4639      	mov	r1, r7
 8011774:	f7ee fd8a 	bl	800028c <__adddf3>
 8011778:	2400      	movs	r4, #0
 801177a:	4632      	mov	r2, r6
 801177c:	463b      	mov	r3, r7
 801177e:	4620      	mov	r0, r4
 8011780:	460d      	mov	r5, r1
 8011782:	f7ee fd81 	bl	8000288 <__aeabi_dsub>
 8011786:	4602      	mov	r2, r0
 8011788:	460b      	mov	r3, r1
 801178a:	4640      	mov	r0, r8
 801178c:	4649      	mov	r1, r9
 801178e:	f7ee fd7b 	bl	8000288 <__aeabi_dsub>
 8011792:	9b00      	ldr	r3, [sp, #0]
 8011794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011796:	3b01      	subs	r3, #1
 8011798:	4313      	orrs	r3, r2
 801179a:	4682      	mov	sl, r0
 801179c:	468b      	mov	fp, r1
 801179e:	f040 81f1 	bne.w	8011b84 <__ieee754_pow+0x6e4>
 80117a2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011860 <__ieee754_pow+0x3c0>
 80117a6:	eeb0 8a47 	vmov.f32	s16, s14
 80117aa:	eef0 8a67 	vmov.f32	s17, s15
 80117ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80117b2:	2600      	movs	r6, #0
 80117b4:	4632      	mov	r2, r6
 80117b6:	463b      	mov	r3, r7
 80117b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117bc:	f7ee fd64 	bl	8000288 <__aeabi_dsub>
 80117c0:	4622      	mov	r2, r4
 80117c2:	462b      	mov	r3, r5
 80117c4:	f7ee ff18 	bl	80005f8 <__aeabi_dmul>
 80117c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117cc:	4680      	mov	r8, r0
 80117ce:	4689      	mov	r9, r1
 80117d0:	4650      	mov	r0, sl
 80117d2:	4659      	mov	r1, fp
 80117d4:	f7ee ff10 	bl	80005f8 <__aeabi_dmul>
 80117d8:	4602      	mov	r2, r0
 80117da:	460b      	mov	r3, r1
 80117dc:	4640      	mov	r0, r8
 80117de:	4649      	mov	r1, r9
 80117e0:	f7ee fd54 	bl	800028c <__adddf3>
 80117e4:	4632      	mov	r2, r6
 80117e6:	463b      	mov	r3, r7
 80117e8:	4680      	mov	r8, r0
 80117ea:	4689      	mov	r9, r1
 80117ec:	4620      	mov	r0, r4
 80117ee:	4629      	mov	r1, r5
 80117f0:	f7ee ff02 	bl	80005f8 <__aeabi_dmul>
 80117f4:	460b      	mov	r3, r1
 80117f6:	4604      	mov	r4, r0
 80117f8:	460d      	mov	r5, r1
 80117fa:	4602      	mov	r2, r0
 80117fc:	4649      	mov	r1, r9
 80117fe:	4640      	mov	r0, r8
 8011800:	f7ee fd44 	bl	800028c <__adddf3>
 8011804:	4b1d      	ldr	r3, [pc, #116]	; (801187c <__ieee754_pow+0x3dc>)
 8011806:	4299      	cmp	r1, r3
 8011808:	ec45 4b19 	vmov	d9, r4, r5
 801180c:	4606      	mov	r6, r0
 801180e:	460f      	mov	r7, r1
 8011810:	468b      	mov	fp, r1
 8011812:	f340 82fe 	ble.w	8011e12 <__ieee754_pow+0x972>
 8011816:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801181a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801181e:	4303      	orrs	r3, r0
 8011820:	f000 81f0 	beq.w	8011c04 <__ieee754_pow+0x764>
 8011824:	a310      	add	r3, pc, #64	; (adr r3, 8011868 <__ieee754_pow+0x3c8>)
 8011826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182a:	ec51 0b18 	vmov	r0, r1, d8
 801182e:	f7ee fee3 	bl	80005f8 <__aeabi_dmul>
 8011832:	a30d      	add	r3, pc, #52	; (adr r3, 8011868 <__ieee754_pow+0x3c8>)
 8011834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011838:	e6cb      	b.n	80115d2 <__ieee754_pow+0x132>
 801183a:	bf00      	nop
 801183c:	f3af 8000 	nop.w
 8011840:	60000000 	.word	0x60000000
 8011844:	3ff71547 	.word	0x3ff71547
 8011848:	f85ddf44 	.word	0xf85ddf44
 801184c:	3e54ae0b 	.word	0x3e54ae0b
 8011850:	55555555 	.word	0x55555555
 8011854:	3fd55555 	.word	0x3fd55555
 8011858:	652b82fe 	.word	0x652b82fe
 801185c:	3ff71547 	.word	0x3ff71547
 8011860:	00000000 	.word	0x00000000
 8011864:	bff00000 	.word	0xbff00000
 8011868:	8800759c 	.word	0x8800759c
 801186c:	7e37e43c 	.word	0x7e37e43c
 8011870:	3ff00000 	.word	0x3ff00000
 8011874:	3fd00000 	.word	0x3fd00000
 8011878:	3fe00000 	.word	0x3fe00000
 801187c:	408fffff 	.word	0x408fffff
 8011880:	4bd7      	ldr	r3, [pc, #860]	; (8011be0 <__ieee754_pow+0x740>)
 8011882:	ea03 0309 	and.w	r3, r3, r9
 8011886:	2200      	movs	r2, #0
 8011888:	b92b      	cbnz	r3, 8011896 <__ieee754_pow+0x3f6>
 801188a:	4bd6      	ldr	r3, [pc, #856]	; (8011be4 <__ieee754_pow+0x744>)
 801188c:	f7ee feb4 	bl	80005f8 <__aeabi_dmul>
 8011890:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011894:	460c      	mov	r4, r1
 8011896:	1523      	asrs	r3, r4, #20
 8011898:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801189c:	4413      	add	r3, r2
 801189e:	9309      	str	r3, [sp, #36]	; 0x24
 80118a0:	4bd1      	ldr	r3, [pc, #836]	; (8011be8 <__ieee754_pow+0x748>)
 80118a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80118a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80118aa:	429c      	cmp	r4, r3
 80118ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80118b0:	dd08      	ble.n	80118c4 <__ieee754_pow+0x424>
 80118b2:	4bce      	ldr	r3, [pc, #824]	; (8011bec <__ieee754_pow+0x74c>)
 80118b4:	429c      	cmp	r4, r3
 80118b6:	f340 8163 	ble.w	8011b80 <__ieee754_pow+0x6e0>
 80118ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118bc:	3301      	adds	r3, #1
 80118be:	9309      	str	r3, [sp, #36]	; 0x24
 80118c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80118c4:	2400      	movs	r4, #0
 80118c6:	00e3      	lsls	r3, r4, #3
 80118c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80118ca:	4bc9      	ldr	r3, [pc, #804]	; (8011bf0 <__ieee754_pow+0x750>)
 80118cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118d0:	ed93 7b00 	vldr	d7, [r3]
 80118d4:	4629      	mov	r1, r5
 80118d6:	ec53 2b17 	vmov	r2, r3, d7
 80118da:	eeb0 8a47 	vmov.f32	s16, s14
 80118de:	eef0 8a67 	vmov.f32	s17, s15
 80118e2:	4682      	mov	sl, r0
 80118e4:	f7ee fcd0 	bl	8000288 <__aeabi_dsub>
 80118e8:	4652      	mov	r2, sl
 80118ea:	4606      	mov	r6, r0
 80118ec:	460f      	mov	r7, r1
 80118ee:	462b      	mov	r3, r5
 80118f0:	ec51 0b18 	vmov	r0, r1, d8
 80118f4:	f7ee fcca 	bl	800028c <__adddf3>
 80118f8:	4602      	mov	r2, r0
 80118fa:	460b      	mov	r3, r1
 80118fc:	2000      	movs	r0, #0
 80118fe:	49bd      	ldr	r1, [pc, #756]	; (8011bf4 <__ieee754_pow+0x754>)
 8011900:	f7ee ffa4 	bl	800084c <__aeabi_ddiv>
 8011904:	ec41 0b19 	vmov	d9, r0, r1
 8011908:	4602      	mov	r2, r0
 801190a:	460b      	mov	r3, r1
 801190c:	4630      	mov	r0, r6
 801190e:	4639      	mov	r1, r7
 8011910:	f7ee fe72 	bl	80005f8 <__aeabi_dmul>
 8011914:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011918:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801191c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011920:	2300      	movs	r3, #0
 8011922:	9304      	str	r3, [sp, #16]
 8011924:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011928:	46ab      	mov	fp, r5
 801192a:	106d      	asrs	r5, r5, #1
 801192c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011930:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011934:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011938:	2200      	movs	r2, #0
 801193a:	4640      	mov	r0, r8
 801193c:	4649      	mov	r1, r9
 801193e:	4614      	mov	r4, r2
 8011940:	461d      	mov	r5, r3
 8011942:	f7ee fe59 	bl	80005f8 <__aeabi_dmul>
 8011946:	4602      	mov	r2, r0
 8011948:	460b      	mov	r3, r1
 801194a:	4630      	mov	r0, r6
 801194c:	4639      	mov	r1, r7
 801194e:	f7ee fc9b 	bl	8000288 <__aeabi_dsub>
 8011952:	ec53 2b18 	vmov	r2, r3, d8
 8011956:	4606      	mov	r6, r0
 8011958:	460f      	mov	r7, r1
 801195a:	4620      	mov	r0, r4
 801195c:	4629      	mov	r1, r5
 801195e:	f7ee fc93 	bl	8000288 <__aeabi_dsub>
 8011962:	4602      	mov	r2, r0
 8011964:	460b      	mov	r3, r1
 8011966:	4650      	mov	r0, sl
 8011968:	4659      	mov	r1, fp
 801196a:	f7ee fc8d 	bl	8000288 <__aeabi_dsub>
 801196e:	4642      	mov	r2, r8
 8011970:	464b      	mov	r3, r9
 8011972:	f7ee fe41 	bl	80005f8 <__aeabi_dmul>
 8011976:	4602      	mov	r2, r0
 8011978:	460b      	mov	r3, r1
 801197a:	4630      	mov	r0, r6
 801197c:	4639      	mov	r1, r7
 801197e:	f7ee fc83 	bl	8000288 <__aeabi_dsub>
 8011982:	ec53 2b19 	vmov	r2, r3, d9
 8011986:	f7ee fe37 	bl	80005f8 <__aeabi_dmul>
 801198a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801198e:	ec41 0b18 	vmov	d8, r0, r1
 8011992:	4610      	mov	r0, r2
 8011994:	4619      	mov	r1, r3
 8011996:	f7ee fe2f 	bl	80005f8 <__aeabi_dmul>
 801199a:	a37d      	add	r3, pc, #500	; (adr r3, 8011b90 <__ieee754_pow+0x6f0>)
 801199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a0:	4604      	mov	r4, r0
 80119a2:	460d      	mov	r5, r1
 80119a4:	f7ee fe28 	bl	80005f8 <__aeabi_dmul>
 80119a8:	a37b      	add	r3, pc, #492	; (adr r3, 8011b98 <__ieee754_pow+0x6f8>)
 80119aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ae:	f7ee fc6d 	bl	800028c <__adddf3>
 80119b2:	4622      	mov	r2, r4
 80119b4:	462b      	mov	r3, r5
 80119b6:	f7ee fe1f 	bl	80005f8 <__aeabi_dmul>
 80119ba:	a379      	add	r3, pc, #484	; (adr r3, 8011ba0 <__ieee754_pow+0x700>)
 80119bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c0:	f7ee fc64 	bl	800028c <__adddf3>
 80119c4:	4622      	mov	r2, r4
 80119c6:	462b      	mov	r3, r5
 80119c8:	f7ee fe16 	bl	80005f8 <__aeabi_dmul>
 80119cc:	a376      	add	r3, pc, #472	; (adr r3, 8011ba8 <__ieee754_pow+0x708>)
 80119ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d2:	f7ee fc5b 	bl	800028c <__adddf3>
 80119d6:	4622      	mov	r2, r4
 80119d8:	462b      	mov	r3, r5
 80119da:	f7ee fe0d 	bl	80005f8 <__aeabi_dmul>
 80119de:	a374      	add	r3, pc, #464	; (adr r3, 8011bb0 <__ieee754_pow+0x710>)
 80119e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e4:	f7ee fc52 	bl	800028c <__adddf3>
 80119e8:	4622      	mov	r2, r4
 80119ea:	462b      	mov	r3, r5
 80119ec:	f7ee fe04 	bl	80005f8 <__aeabi_dmul>
 80119f0:	a371      	add	r3, pc, #452	; (adr r3, 8011bb8 <__ieee754_pow+0x718>)
 80119f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f6:	f7ee fc49 	bl	800028c <__adddf3>
 80119fa:	4622      	mov	r2, r4
 80119fc:	4606      	mov	r6, r0
 80119fe:	460f      	mov	r7, r1
 8011a00:	462b      	mov	r3, r5
 8011a02:	4620      	mov	r0, r4
 8011a04:	4629      	mov	r1, r5
 8011a06:	f7ee fdf7 	bl	80005f8 <__aeabi_dmul>
 8011a0a:	4602      	mov	r2, r0
 8011a0c:	460b      	mov	r3, r1
 8011a0e:	4630      	mov	r0, r6
 8011a10:	4639      	mov	r1, r7
 8011a12:	f7ee fdf1 	bl	80005f8 <__aeabi_dmul>
 8011a16:	4642      	mov	r2, r8
 8011a18:	4604      	mov	r4, r0
 8011a1a:	460d      	mov	r5, r1
 8011a1c:	464b      	mov	r3, r9
 8011a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a22:	f7ee fc33 	bl	800028c <__adddf3>
 8011a26:	ec53 2b18 	vmov	r2, r3, d8
 8011a2a:	f7ee fde5 	bl	80005f8 <__aeabi_dmul>
 8011a2e:	4622      	mov	r2, r4
 8011a30:	462b      	mov	r3, r5
 8011a32:	f7ee fc2b 	bl	800028c <__adddf3>
 8011a36:	4642      	mov	r2, r8
 8011a38:	4682      	mov	sl, r0
 8011a3a:	468b      	mov	fp, r1
 8011a3c:	464b      	mov	r3, r9
 8011a3e:	4640      	mov	r0, r8
 8011a40:	4649      	mov	r1, r9
 8011a42:	f7ee fdd9 	bl	80005f8 <__aeabi_dmul>
 8011a46:	4b6c      	ldr	r3, [pc, #432]	; (8011bf8 <__ieee754_pow+0x758>)
 8011a48:	2200      	movs	r2, #0
 8011a4a:	4606      	mov	r6, r0
 8011a4c:	460f      	mov	r7, r1
 8011a4e:	f7ee fc1d 	bl	800028c <__adddf3>
 8011a52:	4652      	mov	r2, sl
 8011a54:	465b      	mov	r3, fp
 8011a56:	f7ee fc19 	bl	800028c <__adddf3>
 8011a5a:	9c04      	ldr	r4, [sp, #16]
 8011a5c:	460d      	mov	r5, r1
 8011a5e:	4622      	mov	r2, r4
 8011a60:	460b      	mov	r3, r1
 8011a62:	4640      	mov	r0, r8
 8011a64:	4649      	mov	r1, r9
 8011a66:	f7ee fdc7 	bl	80005f8 <__aeabi_dmul>
 8011a6a:	4b63      	ldr	r3, [pc, #396]	; (8011bf8 <__ieee754_pow+0x758>)
 8011a6c:	4680      	mov	r8, r0
 8011a6e:	4689      	mov	r9, r1
 8011a70:	2200      	movs	r2, #0
 8011a72:	4620      	mov	r0, r4
 8011a74:	4629      	mov	r1, r5
 8011a76:	f7ee fc07 	bl	8000288 <__aeabi_dsub>
 8011a7a:	4632      	mov	r2, r6
 8011a7c:	463b      	mov	r3, r7
 8011a7e:	f7ee fc03 	bl	8000288 <__aeabi_dsub>
 8011a82:	4602      	mov	r2, r0
 8011a84:	460b      	mov	r3, r1
 8011a86:	4650      	mov	r0, sl
 8011a88:	4659      	mov	r1, fp
 8011a8a:	f7ee fbfd 	bl	8000288 <__aeabi_dsub>
 8011a8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a92:	f7ee fdb1 	bl	80005f8 <__aeabi_dmul>
 8011a96:	4622      	mov	r2, r4
 8011a98:	4606      	mov	r6, r0
 8011a9a:	460f      	mov	r7, r1
 8011a9c:	462b      	mov	r3, r5
 8011a9e:	ec51 0b18 	vmov	r0, r1, d8
 8011aa2:	f7ee fda9 	bl	80005f8 <__aeabi_dmul>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	4630      	mov	r0, r6
 8011aac:	4639      	mov	r1, r7
 8011aae:	f7ee fbed 	bl	800028c <__adddf3>
 8011ab2:	4606      	mov	r6, r0
 8011ab4:	460f      	mov	r7, r1
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	460b      	mov	r3, r1
 8011aba:	4640      	mov	r0, r8
 8011abc:	4649      	mov	r1, r9
 8011abe:	f7ee fbe5 	bl	800028c <__adddf3>
 8011ac2:	9c04      	ldr	r4, [sp, #16]
 8011ac4:	a33e      	add	r3, pc, #248	; (adr r3, 8011bc0 <__ieee754_pow+0x720>)
 8011ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aca:	4620      	mov	r0, r4
 8011acc:	460d      	mov	r5, r1
 8011ace:	f7ee fd93 	bl	80005f8 <__aeabi_dmul>
 8011ad2:	4642      	mov	r2, r8
 8011ad4:	ec41 0b18 	vmov	d8, r0, r1
 8011ad8:	464b      	mov	r3, r9
 8011ada:	4620      	mov	r0, r4
 8011adc:	4629      	mov	r1, r5
 8011ade:	f7ee fbd3 	bl	8000288 <__aeabi_dsub>
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	4639      	mov	r1, r7
 8011aea:	f7ee fbcd 	bl	8000288 <__aeabi_dsub>
 8011aee:	a336      	add	r3, pc, #216	; (adr r3, 8011bc8 <__ieee754_pow+0x728>)
 8011af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af4:	f7ee fd80 	bl	80005f8 <__aeabi_dmul>
 8011af8:	a335      	add	r3, pc, #212	; (adr r3, 8011bd0 <__ieee754_pow+0x730>)
 8011afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011afe:	4606      	mov	r6, r0
 8011b00:	460f      	mov	r7, r1
 8011b02:	4620      	mov	r0, r4
 8011b04:	4629      	mov	r1, r5
 8011b06:	f7ee fd77 	bl	80005f8 <__aeabi_dmul>
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	460b      	mov	r3, r1
 8011b0e:	4630      	mov	r0, r6
 8011b10:	4639      	mov	r1, r7
 8011b12:	f7ee fbbb 	bl	800028c <__adddf3>
 8011b16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b18:	4b38      	ldr	r3, [pc, #224]	; (8011bfc <__ieee754_pow+0x75c>)
 8011b1a:	4413      	add	r3, r2
 8011b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b20:	f7ee fbb4 	bl	800028c <__adddf3>
 8011b24:	4682      	mov	sl, r0
 8011b26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b28:	468b      	mov	fp, r1
 8011b2a:	f7ee fcfb 	bl	8000524 <__aeabi_i2d>
 8011b2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b30:	4b33      	ldr	r3, [pc, #204]	; (8011c00 <__ieee754_pow+0x760>)
 8011b32:	4413      	add	r3, r2
 8011b34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011b38:	4606      	mov	r6, r0
 8011b3a:	460f      	mov	r7, r1
 8011b3c:	4652      	mov	r2, sl
 8011b3e:	465b      	mov	r3, fp
 8011b40:	ec51 0b18 	vmov	r0, r1, d8
 8011b44:	f7ee fba2 	bl	800028c <__adddf3>
 8011b48:	4642      	mov	r2, r8
 8011b4a:	464b      	mov	r3, r9
 8011b4c:	f7ee fb9e 	bl	800028c <__adddf3>
 8011b50:	4632      	mov	r2, r6
 8011b52:	463b      	mov	r3, r7
 8011b54:	f7ee fb9a 	bl	800028c <__adddf3>
 8011b58:	9c04      	ldr	r4, [sp, #16]
 8011b5a:	4632      	mov	r2, r6
 8011b5c:	463b      	mov	r3, r7
 8011b5e:	4620      	mov	r0, r4
 8011b60:	460d      	mov	r5, r1
 8011b62:	f7ee fb91 	bl	8000288 <__aeabi_dsub>
 8011b66:	4642      	mov	r2, r8
 8011b68:	464b      	mov	r3, r9
 8011b6a:	f7ee fb8d 	bl	8000288 <__aeabi_dsub>
 8011b6e:	ec53 2b18 	vmov	r2, r3, d8
 8011b72:	f7ee fb89 	bl	8000288 <__aeabi_dsub>
 8011b76:	4602      	mov	r2, r0
 8011b78:	460b      	mov	r3, r1
 8011b7a:	4650      	mov	r0, sl
 8011b7c:	4659      	mov	r1, fp
 8011b7e:	e606      	b.n	801178e <__ieee754_pow+0x2ee>
 8011b80:	2401      	movs	r4, #1
 8011b82:	e6a0      	b.n	80118c6 <__ieee754_pow+0x426>
 8011b84:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011bd8 <__ieee754_pow+0x738>
 8011b88:	e60d      	b.n	80117a6 <__ieee754_pow+0x306>
 8011b8a:	bf00      	nop
 8011b8c:	f3af 8000 	nop.w
 8011b90:	4a454eef 	.word	0x4a454eef
 8011b94:	3fca7e28 	.word	0x3fca7e28
 8011b98:	93c9db65 	.word	0x93c9db65
 8011b9c:	3fcd864a 	.word	0x3fcd864a
 8011ba0:	a91d4101 	.word	0xa91d4101
 8011ba4:	3fd17460 	.word	0x3fd17460
 8011ba8:	518f264d 	.word	0x518f264d
 8011bac:	3fd55555 	.word	0x3fd55555
 8011bb0:	db6fabff 	.word	0xdb6fabff
 8011bb4:	3fdb6db6 	.word	0x3fdb6db6
 8011bb8:	33333303 	.word	0x33333303
 8011bbc:	3fe33333 	.word	0x3fe33333
 8011bc0:	e0000000 	.word	0xe0000000
 8011bc4:	3feec709 	.word	0x3feec709
 8011bc8:	dc3a03fd 	.word	0xdc3a03fd
 8011bcc:	3feec709 	.word	0x3feec709
 8011bd0:	145b01f5 	.word	0x145b01f5
 8011bd4:	be3e2fe0 	.word	0xbe3e2fe0
 8011bd8:	00000000 	.word	0x00000000
 8011bdc:	3ff00000 	.word	0x3ff00000
 8011be0:	7ff00000 	.word	0x7ff00000
 8011be4:	43400000 	.word	0x43400000
 8011be8:	0003988e 	.word	0x0003988e
 8011bec:	000bb679 	.word	0x000bb679
 8011bf0:	08012ea8 	.word	0x08012ea8
 8011bf4:	3ff00000 	.word	0x3ff00000
 8011bf8:	40080000 	.word	0x40080000
 8011bfc:	08012ec8 	.word	0x08012ec8
 8011c00:	08012eb8 	.word	0x08012eb8
 8011c04:	a3b5      	add	r3, pc, #724	; (adr r3, 8011edc <__ieee754_pow+0xa3c>)
 8011c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0a:	4640      	mov	r0, r8
 8011c0c:	4649      	mov	r1, r9
 8011c0e:	f7ee fb3d 	bl	800028c <__adddf3>
 8011c12:	4622      	mov	r2, r4
 8011c14:	ec41 0b1a 	vmov	d10, r0, r1
 8011c18:	462b      	mov	r3, r5
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	4639      	mov	r1, r7
 8011c1e:	f7ee fb33 	bl	8000288 <__aeabi_dsub>
 8011c22:	4602      	mov	r2, r0
 8011c24:	460b      	mov	r3, r1
 8011c26:	ec51 0b1a 	vmov	r0, r1, d10
 8011c2a:	f7ee ff75 	bl	8000b18 <__aeabi_dcmpgt>
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	f47f adf8 	bne.w	8011824 <__ieee754_pow+0x384>
 8011c34:	4aa4      	ldr	r2, [pc, #656]	; (8011ec8 <__ieee754_pow+0xa28>)
 8011c36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011c3a:	4293      	cmp	r3, r2
 8011c3c:	f340 810b 	ble.w	8011e56 <__ieee754_pow+0x9b6>
 8011c40:	151b      	asrs	r3, r3, #20
 8011c42:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011c46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011c4a:	fa4a f303 	asr.w	r3, sl, r3
 8011c4e:	445b      	add	r3, fp
 8011c50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011c54:	4e9d      	ldr	r6, [pc, #628]	; (8011ecc <__ieee754_pow+0xa2c>)
 8011c56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011c5a:	4116      	asrs	r6, r2
 8011c5c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011c60:	2000      	movs	r0, #0
 8011c62:	ea23 0106 	bic.w	r1, r3, r6
 8011c66:	f1c2 0214 	rsb	r2, r2, #20
 8011c6a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011c6e:	fa4a fa02 	asr.w	sl, sl, r2
 8011c72:	f1bb 0f00 	cmp.w	fp, #0
 8011c76:	4602      	mov	r2, r0
 8011c78:	460b      	mov	r3, r1
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	4629      	mov	r1, r5
 8011c7e:	bfb8      	it	lt
 8011c80:	f1ca 0a00 	rsblt	sl, sl, #0
 8011c84:	f7ee fb00 	bl	8000288 <__aeabi_dsub>
 8011c88:	ec41 0b19 	vmov	d9, r0, r1
 8011c8c:	4642      	mov	r2, r8
 8011c8e:	464b      	mov	r3, r9
 8011c90:	ec51 0b19 	vmov	r0, r1, d9
 8011c94:	f7ee fafa 	bl	800028c <__adddf3>
 8011c98:	2400      	movs	r4, #0
 8011c9a:	a379      	add	r3, pc, #484	; (adr r3, 8011e80 <__ieee754_pow+0x9e0>)
 8011c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	460d      	mov	r5, r1
 8011ca4:	f7ee fca8 	bl	80005f8 <__aeabi_dmul>
 8011ca8:	ec53 2b19 	vmov	r2, r3, d9
 8011cac:	4606      	mov	r6, r0
 8011cae:	460f      	mov	r7, r1
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	4629      	mov	r1, r5
 8011cb4:	f7ee fae8 	bl	8000288 <__aeabi_dsub>
 8011cb8:	4602      	mov	r2, r0
 8011cba:	460b      	mov	r3, r1
 8011cbc:	4640      	mov	r0, r8
 8011cbe:	4649      	mov	r1, r9
 8011cc0:	f7ee fae2 	bl	8000288 <__aeabi_dsub>
 8011cc4:	a370      	add	r3, pc, #448	; (adr r3, 8011e88 <__ieee754_pow+0x9e8>)
 8011cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cca:	f7ee fc95 	bl	80005f8 <__aeabi_dmul>
 8011cce:	a370      	add	r3, pc, #448	; (adr r3, 8011e90 <__ieee754_pow+0x9f0>)
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	4680      	mov	r8, r0
 8011cd6:	4689      	mov	r9, r1
 8011cd8:	4620      	mov	r0, r4
 8011cda:	4629      	mov	r1, r5
 8011cdc:	f7ee fc8c 	bl	80005f8 <__aeabi_dmul>
 8011ce0:	4602      	mov	r2, r0
 8011ce2:	460b      	mov	r3, r1
 8011ce4:	4640      	mov	r0, r8
 8011ce6:	4649      	mov	r1, r9
 8011ce8:	f7ee fad0 	bl	800028c <__adddf3>
 8011cec:	4604      	mov	r4, r0
 8011cee:	460d      	mov	r5, r1
 8011cf0:	4602      	mov	r2, r0
 8011cf2:	460b      	mov	r3, r1
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	4639      	mov	r1, r7
 8011cf8:	f7ee fac8 	bl	800028c <__adddf3>
 8011cfc:	4632      	mov	r2, r6
 8011cfe:	463b      	mov	r3, r7
 8011d00:	4680      	mov	r8, r0
 8011d02:	4689      	mov	r9, r1
 8011d04:	f7ee fac0 	bl	8000288 <__aeabi_dsub>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	4629      	mov	r1, r5
 8011d10:	f7ee faba 	bl	8000288 <__aeabi_dsub>
 8011d14:	4642      	mov	r2, r8
 8011d16:	4606      	mov	r6, r0
 8011d18:	460f      	mov	r7, r1
 8011d1a:	464b      	mov	r3, r9
 8011d1c:	4640      	mov	r0, r8
 8011d1e:	4649      	mov	r1, r9
 8011d20:	f7ee fc6a 	bl	80005f8 <__aeabi_dmul>
 8011d24:	a35c      	add	r3, pc, #368	; (adr r3, 8011e98 <__ieee754_pow+0x9f8>)
 8011d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	460d      	mov	r5, r1
 8011d2e:	f7ee fc63 	bl	80005f8 <__aeabi_dmul>
 8011d32:	a35b      	add	r3, pc, #364	; (adr r3, 8011ea0 <__ieee754_pow+0xa00>)
 8011d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d38:	f7ee faa6 	bl	8000288 <__aeabi_dsub>
 8011d3c:	4622      	mov	r2, r4
 8011d3e:	462b      	mov	r3, r5
 8011d40:	f7ee fc5a 	bl	80005f8 <__aeabi_dmul>
 8011d44:	a358      	add	r3, pc, #352	; (adr r3, 8011ea8 <__ieee754_pow+0xa08>)
 8011d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4a:	f7ee fa9f 	bl	800028c <__adddf3>
 8011d4e:	4622      	mov	r2, r4
 8011d50:	462b      	mov	r3, r5
 8011d52:	f7ee fc51 	bl	80005f8 <__aeabi_dmul>
 8011d56:	a356      	add	r3, pc, #344	; (adr r3, 8011eb0 <__ieee754_pow+0xa10>)
 8011d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5c:	f7ee fa94 	bl	8000288 <__aeabi_dsub>
 8011d60:	4622      	mov	r2, r4
 8011d62:	462b      	mov	r3, r5
 8011d64:	f7ee fc48 	bl	80005f8 <__aeabi_dmul>
 8011d68:	a353      	add	r3, pc, #332	; (adr r3, 8011eb8 <__ieee754_pow+0xa18>)
 8011d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6e:	f7ee fa8d 	bl	800028c <__adddf3>
 8011d72:	4622      	mov	r2, r4
 8011d74:	462b      	mov	r3, r5
 8011d76:	f7ee fc3f 	bl	80005f8 <__aeabi_dmul>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	4640      	mov	r0, r8
 8011d80:	4649      	mov	r1, r9
 8011d82:	f7ee fa81 	bl	8000288 <__aeabi_dsub>
 8011d86:	4604      	mov	r4, r0
 8011d88:	460d      	mov	r5, r1
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	4640      	mov	r0, r8
 8011d90:	4649      	mov	r1, r9
 8011d92:	f7ee fc31 	bl	80005f8 <__aeabi_dmul>
 8011d96:	2200      	movs	r2, #0
 8011d98:	ec41 0b19 	vmov	d9, r0, r1
 8011d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011da0:	4620      	mov	r0, r4
 8011da2:	4629      	mov	r1, r5
 8011da4:	f7ee fa70 	bl	8000288 <__aeabi_dsub>
 8011da8:	4602      	mov	r2, r0
 8011daa:	460b      	mov	r3, r1
 8011dac:	ec51 0b19 	vmov	r0, r1, d9
 8011db0:	f7ee fd4c 	bl	800084c <__aeabi_ddiv>
 8011db4:	4632      	mov	r2, r6
 8011db6:	4604      	mov	r4, r0
 8011db8:	460d      	mov	r5, r1
 8011dba:	463b      	mov	r3, r7
 8011dbc:	4640      	mov	r0, r8
 8011dbe:	4649      	mov	r1, r9
 8011dc0:	f7ee fc1a 	bl	80005f8 <__aeabi_dmul>
 8011dc4:	4632      	mov	r2, r6
 8011dc6:	463b      	mov	r3, r7
 8011dc8:	f7ee fa60 	bl	800028c <__adddf3>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	460b      	mov	r3, r1
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	f7ee fa58 	bl	8000288 <__aeabi_dsub>
 8011dd8:	4642      	mov	r2, r8
 8011dda:	464b      	mov	r3, r9
 8011ddc:	f7ee fa54 	bl	8000288 <__aeabi_dsub>
 8011de0:	460b      	mov	r3, r1
 8011de2:	4602      	mov	r2, r0
 8011de4:	493a      	ldr	r1, [pc, #232]	; (8011ed0 <__ieee754_pow+0xa30>)
 8011de6:	2000      	movs	r0, #0
 8011de8:	f7ee fa4e 	bl	8000288 <__aeabi_dsub>
 8011dec:	e9cd 0100 	strd	r0, r1, [sp]
 8011df0:	9b01      	ldr	r3, [sp, #4]
 8011df2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011dfa:	da2f      	bge.n	8011e5c <__ieee754_pow+0x9bc>
 8011dfc:	4650      	mov	r0, sl
 8011dfe:	ed9d 0b00 	vldr	d0, [sp]
 8011e02:	f000 f9c1 	bl	8012188 <scalbn>
 8011e06:	ec51 0b10 	vmov	r0, r1, d0
 8011e0a:	ec53 2b18 	vmov	r2, r3, d8
 8011e0e:	f7ff bbe0 	b.w	80115d2 <__ieee754_pow+0x132>
 8011e12:	4b30      	ldr	r3, [pc, #192]	; (8011ed4 <__ieee754_pow+0xa34>)
 8011e14:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011e18:	429e      	cmp	r6, r3
 8011e1a:	f77f af0b 	ble.w	8011c34 <__ieee754_pow+0x794>
 8011e1e:	4b2e      	ldr	r3, [pc, #184]	; (8011ed8 <__ieee754_pow+0xa38>)
 8011e20:	440b      	add	r3, r1
 8011e22:	4303      	orrs	r3, r0
 8011e24:	d00b      	beq.n	8011e3e <__ieee754_pow+0x99e>
 8011e26:	a326      	add	r3, pc, #152	; (adr r3, 8011ec0 <__ieee754_pow+0xa20>)
 8011e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2c:	ec51 0b18 	vmov	r0, r1, d8
 8011e30:	f7ee fbe2 	bl	80005f8 <__aeabi_dmul>
 8011e34:	a322      	add	r3, pc, #136	; (adr r3, 8011ec0 <__ieee754_pow+0xa20>)
 8011e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3a:	f7ff bbca 	b.w	80115d2 <__ieee754_pow+0x132>
 8011e3e:	4622      	mov	r2, r4
 8011e40:	462b      	mov	r3, r5
 8011e42:	f7ee fa21 	bl	8000288 <__aeabi_dsub>
 8011e46:	4642      	mov	r2, r8
 8011e48:	464b      	mov	r3, r9
 8011e4a:	f7ee fe5b 	bl	8000b04 <__aeabi_dcmpge>
 8011e4e:	2800      	cmp	r0, #0
 8011e50:	f43f aef0 	beq.w	8011c34 <__ieee754_pow+0x794>
 8011e54:	e7e7      	b.n	8011e26 <__ieee754_pow+0x986>
 8011e56:	f04f 0a00 	mov.w	sl, #0
 8011e5a:	e717      	b.n	8011c8c <__ieee754_pow+0x7ec>
 8011e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e60:	4619      	mov	r1, r3
 8011e62:	e7d2      	b.n	8011e0a <__ieee754_pow+0x96a>
 8011e64:	491a      	ldr	r1, [pc, #104]	; (8011ed0 <__ieee754_pow+0xa30>)
 8011e66:	2000      	movs	r0, #0
 8011e68:	f7ff bb9e 	b.w	80115a8 <__ieee754_pow+0x108>
 8011e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e70:	f7ff bb9a 	b.w	80115a8 <__ieee754_pow+0x108>
 8011e74:	9000      	str	r0, [sp, #0]
 8011e76:	f7ff bb76 	b.w	8011566 <__ieee754_pow+0xc6>
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	f7ff bb60 	b.w	8011540 <__ieee754_pow+0xa0>
 8011e80:	00000000 	.word	0x00000000
 8011e84:	3fe62e43 	.word	0x3fe62e43
 8011e88:	fefa39ef 	.word	0xfefa39ef
 8011e8c:	3fe62e42 	.word	0x3fe62e42
 8011e90:	0ca86c39 	.word	0x0ca86c39
 8011e94:	be205c61 	.word	0xbe205c61
 8011e98:	72bea4d0 	.word	0x72bea4d0
 8011e9c:	3e663769 	.word	0x3e663769
 8011ea0:	c5d26bf1 	.word	0xc5d26bf1
 8011ea4:	3ebbbd41 	.word	0x3ebbbd41
 8011ea8:	af25de2c 	.word	0xaf25de2c
 8011eac:	3f11566a 	.word	0x3f11566a
 8011eb0:	16bebd93 	.word	0x16bebd93
 8011eb4:	3f66c16c 	.word	0x3f66c16c
 8011eb8:	5555553e 	.word	0x5555553e
 8011ebc:	3fc55555 	.word	0x3fc55555
 8011ec0:	c2f8f359 	.word	0xc2f8f359
 8011ec4:	01a56e1f 	.word	0x01a56e1f
 8011ec8:	3fe00000 	.word	0x3fe00000
 8011ecc:	000fffff 	.word	0x000fffff
 8011ed0:	3ff00000 	.word	0x3ff00000
 8011ed4:	4090cbff 	.word	0x4090cbff
 8011ed8:	3f6f3400 	.word	0x3f6f3400
 8011edc:	652b82fe 	.word	0x652b82fe
 8011ee0:	3c971547 	.word	0x3c971547

08011ee4 <__ieee754_sqrt>:
 8011ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee8:	ec55 4b10 	vmov	r4, r5, d0
 8011eec:	4e56      	ldr	r6, [pc, #344]	; (8012048 <__ieee754_sqrt+0x164>)
 8011eee:	43ae      	bics	r6, r5
 8011ef0:	ee10 0a10 	vmov	r0, s0
 8011ef4:	ee10 3a10 	vmov	r3, s0
 8011ef8:	4629      	mov	r1, r5
 8011efa:	462a      	mov	r2, r5
 8011efc:	d110      	bne.n	8011f20 <__ieee754_sqrt+0x3c>
 8011efe:	ee10 2a10 	vmov	r2, s0
 8011f02:	462b      	mov	r3, r5
 8011f04:	f7ee fb78 	bl	80005f8 <__aeabi_dmul>
 8011f08:	4602      	mov	r2, r0
 8011f0a:	460b      	mov	r3, r1
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	4629      	mov	r1, r5
 8011f10:	f7ee f9bc 	bl	800028c <__adddf3>
 8011f14:	4604      	mov	r4, r0
 8011f16:	460d      	mov	r5, r1
 8011f18:	ec45 4b10 	vmov	d0, r4, r5
 8011f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f20:	2d00      	cmp	r5, #0
 8011f22:	dc10      	bgt.n	8011f46 <__ieee754_sqrt+0x62>
 8011f24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011f28:	4330      	orrs	r0, r6
 8011f2a:	d0f5      	beq.n	8011f18 <__ieee754_sqrt+0x34>
 8011f2c:	b15d      	cbz	r5, 8011f46 <__ieee754_sqrt+0x62>
 8011f2e:	ee10 2a10 	vmov	r2, s0
 8011f32:	462b      	mov	r3, r5
 8011f34:	ee10 0a10 	vmov	r0, s0
 8011f38:	f7ee f9a6 	bl	8000288 <__aeabi_dsub>
 8011f3c:	4602      	mov	r2, r0
 8011f3e:	460b      	mov	r3, r1
 8011f40:	f7ee fc84 	bl	800084c <__aeabi_ddiv>
 8011f44:	e7e6      	b.n	8011f14 <__ieee754_sqrt+0x30>
 8011f46:	1509      	asrs	r1, r1, #20
 8011f48:	d076      	beq.n	8012038 <__ieee754_sqrt+0x154>
 8011f4a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011f4e:	07ce      	lsls	r6, r1, #31
 8011f50:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011f54:	bf5e      	ittt	pl
 8011f56:	0fda      	lsrpl	r2, r3, #31
 8011f58:	005b      	lslpl	r3, r3, #1
 8011f5a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8011f5e:	0fda      	lsrs	r2, r3, #31
 8011f60:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011f64:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011f68:	2000      	movs	r0, #0
 8011f6a:	106d      	asrs	r5, r5, #1
 8011f6c:	005b      	lsls	r3, r3, #1
 8011f6e:	f04f 0e16 	mov.w	lr, #22
 8011f72:	4684      	mov	ip, r0
 8011f74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011f78:	eb0c 0401 	add.w	r4, ip, r1
 8011f7c:	4294      	cmp	r4, r2
 8011f7e:	bfde      	ittt	le
 8011f80:	1b12      	suble	r2, r2, r4
 8011f82:	eb04 0c01 	addle.w	ip, r4, r1
 8011f86:	1840      	addle	r0, r0, r1
 8011f88:	0052      	lsls	r2, r2, #1
 8011f8a:	f1be 0e01 	subs.w	lr, lr, #1
 8011f8e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011f92:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011f96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011f9a:	d1ed      	bne.n	8011f78 <__ieee754_sqrt+0x94>
 8011f9c:	4671      	mov	r1, lr
 8011f9e:	2720      	movs	r7, #32
 8011fa0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011fa4:	4562      	cmp	r2, ip
 8011fa6:	eb04 060e 	add.w	r6, r4, lr
 8011faa:	dc02      	bgt.n	8011fb2 <__ieee754_sqrt+0xce>
 8011fac:	d113      	bne.n	8011fd6 <__ieee754_sqrt+0xf2>
 8011fae:	429e      	cmp	r6, r3
 8011fb0:	d811      	bhi.n	8011fd6 <__ieee754_sqrt+0xf2>
 8011fb2:	2e00      	cmp	r6, #0
 8011fb4:	eb06 0e04 	add.w	lr, r6, r4
 8011fb8:	da43      	bge.n	8012042 <__ieee754_sqrt+0x15e>
 8011fba:	f1be 0f00 	cmp.w	lr, #0
 8011fbe:	db40      	blt.n	8012042 <__ieee754_sqrt+0x15e>
 8011fc0:	f10c 0801 	add.w	r8, ip, #1
 8011fc4:	eba2 020c 	sub.w	r2, r2, ip
 8011fc8:	429e      	cmp	r6, r3
 8011fca:	bf88      	it	hi
 8011fcc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011fd0:	1b9b      	subs	r3, r3, r6
 8011fd2:	4421      	add	r1, r4
 8011fd4:	46c4      	mov	ip, r8
 8011fd6:	0052      	lsls	r2, r2, #1
 8011fd8:	3f01      	subs	r7, #1
 8011fda:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011fde:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011fe2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011fe6:	d1dd      	bne.n	8011fa4 <__ieee754_sqrt+0xc0>
 8011fe8:	4313      	orrs	r3, r2
 8011fea:	d006      	beq.n	8011ffa <__ieee754_sqrt+0x116>
 8011fec:	1c4c      	adds	r4, r1, #1
 8011fee:	bf13      	iteet	ne
 8011ff0:	3101      	addne	r1, #1
 8011ff2:	3001      	addeq	r0, #1
 8011ff4:	4639      	moveq	r1, r7
 8011ff6:	f021 0101 	bicne.w	r1, r1, #1
 8011ffa:	1043      	asrs	r3, r0, #1
 8011ffc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012000:	0849      	lsrs	r1, r1, #1
 8012002:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012006:	07c2      	lsls	r2, r0, #31
 8012008:	bf48      	it	mi
 801200a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801200e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8012012:	460c      	mov	r4, r1
 8012014:	463d      	mov	r5, r7
 8012016:	e77f      	b.n	8011f18 <__ieee754_sqrt+0x34>
 8012018:	0ada      	lsrs	r2, r3, #11
 801201a:	3815      	subs	r0, #21
 801201c:	055b      	lsls	r3, r3, #21
 801201e:	2a00      	cmp	r2, #0
 8012020:	d0fa      	beq.n	8012018 <__ieee754_sqrt+0x134>
 8012022:	02d7      	lsls	r7, r2, #11
 8012024:	d50a      	bpl.n	801203c <__ieee754_sqrt+0x158>
 8012026:	f1c1 0420 	rsb	r4, r1, #32
 801202a:	fa23 f404 	lsr.w	r4, r3, r4
 801202e:	1e4d      	subs	r5, r1, #1
 8012030:	408b      	lsls	r3, r1
 8012032:	4322      	orrs	r2, r4
 8012034:	1b41      	subs	r1, r0, r5
 8012036:	e788      	b.n	8011f4a <__ieee754_sqrt+0x66>
 8012038:	4608      	mov	r0, r1
 801203a:	e7f0      	b.n	801201e <__ieee754_sqrt+0x13a>
 801203c:	0052      	lsls	r2, r2, #1
 801203e:	3101      	adds	r1, #1
 8012040:	e7ef      	b.n	8012022 <__ieee754_sqrt+0x13e>
 8012042:	46e0      	mov	r8, ip
 8012044:	e7be      	b.n	8011fc4 <__ieee754_sqrt+0xe0>
 8012046:	bf00      	nop
 8012048:	7ff00000 	.word	0x7ff00000

0801204c <fabs>:
 801204c:	ec51 0b10 	vmov	r0, r1, d0
 8012050:	ee10 2a10 	vmov	r2, s0
 8012054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012058:	ec43 2b10 	vmov	d0, r2, r3
 801205c:	4770      	bx	lr

0801205e <finite>:
 801205e:	b082      	sub	sp, #8
 8012060:	ed8d 0b00 	vstr	d0, [sp]
 8012064:	9801      	ldr	r0, [sp, #4]
 8012066:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801206a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801206e:	0fc0      	lsrs	r0, r0, #31
 8012070:	b002      	add	sp, #8
 8012072:	4770      	bx	lr

08012074 <rint>:
 8012074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012076:	ec51 0b10 	vmov	r0, r1, d0
 801207a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801207e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012082:	2e13      	cmp	r6, #19
 8012084:	ee10 4a10 	vmov	r4, s0
 8012088:	460b      	mov	r3, r1
 801208a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801208e:	dc58      	bgt.n	8012142 <rint+0xce>
 8012090:	2e00      	cmp	r6, #0
 8012092:	da2b      	bge.n	80120ec <rint+0x78>
 8012094:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012098:	4302      	orrs	r2, r0
 801209a:	d023      	beq.n	80120e4 <rint+0x70>
 801209c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80120a0:	4302      	orrs	r2, r0
 80120a2:	4254      	negs	r4, r2
 80120a4:	4314      	orrs	r4, r2
 80120a6:	0c4b      	lsrs	r3, r1, #17
 80120a8:	0b24      	lsrs	r4, r4, #12
 80120aa:	045b      	lsls	r3, r3, #17
 80120ac:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80120b0:	ea44 0103 	orr.w	r1, r4, r3
 80120b4:	4b32      	ldr	r3, [pc, #200]	; (8012180 <rint+0x10c>)
 80120b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80120ba:	e9d3 6700 	ldrd	r6, r7, [r3]
 80120be:	4602      	mov	r2, r0
 80120c0:	460b      	mov	r3, r1
 80120c2:	4630      	mov	r0, r6
 80120c4:	4639      	mov	r1, r7
 80120c6:	f7ee f8e1 	bl	800028c <__adddf3>
 80120ca:	e9cd 0100 	strd	r0, r1, [sp]
 80120ce:	463b      	mov	r3, r7
 80120d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120d4:	4632      	mov	r2, r6
 80120d6:	f7ee f8d7 	bl	8000288 <__aeabi_dsub>
 80120da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80120de:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80120e2:	4639      	mov	r1, r7
 80120e4:	ec41 0b10 	vmov	d0, r0, r1
 80120e8:	b003      	add	sp, #12
 80120ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120ec:	4a25      	ldr	r2, [pc, #148]	; (8012184 <rint+0x110>)
 80120ee:	4132      	asrs	r2, r6
 80120f0:	ea01 0702 	and.w	r7, r1, r2
 80120f4:	4307      	orrs	r7, r0
 80120f6:	d0f5      	beq.n	80120e4 <rint+0x70>
 80120f8:	0851      	lsrs	r1, r2, #1
 80120fa:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80120fe:	4314      	orrs	r4, r2
 8012100:	d00c      	beq.n	801211c <rint+0xa8>
 8012102:	ea23 0201 	bic.w	r2, r3, r1
 8012106:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801210a:	2e13      	cmp	r6, #19
 801210c:	fa43 f606 	asr.w	r6, r3, r6
 8012110:	bf0c      	ite	eq
 8012112:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012116:	2400      	movne	r4, #0
 8012118:	ea42 0306 	orr.w	r3, r2, r6
 801211c:	4918      	ldr	r1, [pc, #96]	; (8012180 <rint+0x10c>)
 801211e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012122:	4622      	mov	r2, r4
 8012124:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012128:	4620      	mov	r0, r4
 801212a:	4629      	mov	r1, r5
 801212c:	f7ee f8ae 	bl	800028c <__adddf3>
 8012130:	e9cd 0100 	strd	r0, r1, [sp]
 8012134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012138:	4622      	mov	r2, r4
 801213a:	462b      	mov	r3, r5
 801213c:	f7ee f8a4 	bl	8000288 <__aeabi_dsub>
 8012140:	e7d0      	b.n	80120e4 <rint+0x70>
 8012142:	2e33      	cmp	r6, #51	; 0x33
 8012144:	dd07      	ble.n	8012156 <rint+0xe2>
 8012146:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801214a:	d1cb      	bne.n	80120e4 <rint+0x70>
 801214c:	ee10 2a10 	vmov	r2, s0
 8012150:	f7ee f89c 	bl	800028c <__adddf3>
 8012154:	e7c6      	b.n	80120e4 <rint+0x70>
 8012156:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801215a:	f04f 36ff 	mov.w	r6, #4294967295
 801215e:	40d6      	lsrs	r6, r2
 8012160:	4230      	tst	r0, r6
 8012162:	d0bf      	beq.n	80120e4 <rint+0x70>
 8012164:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8012168:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801216c:	bf1f      	itttt	ne
 801216e:	ea24 0101 	bicne.w	r1, r4, r1
 8012172:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012176:	fa44 f202 	asrne.w	r2, r4, r2
 801217a:	ea41 0402 	orrne.w	r4, r1, r2
 801217e:	e7cd      	b.n	801211c <rint+0xa8>
 8012180:	08012ed8 	.word	0x08012ed8
 8012184:	000fffff 	.word	0x000fffff

08012188 <scalbn>:
 8012188:	b570      	push	{r4, r5, r6, lr}
 801218a:	ec55 4b10 	vmov	r4, r5, d0
 801218e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012192:	4606      	mov	r6, r0
 8012194:	462b      	mov	r3, r5
 8012196:	b99a      	cbnz	r2, 80121c0 <scalbn+0x38>
 8012198:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801219c:	4323      	orrs	r3, r4
 801219e:	d036      	beq.n	801220e <scalbn+0x86>
 80121a0:	4b39      	ldr	r3, [pc, #228]	; (8012288 <scalbn+0x100>)
 80121a2:	4629      	mov	r1, r5
 80121a4:	ee10 0a10 	vmov	r0, s0
 80121a8:	2200      	movs	r2, #0
 80121aa:	f7ee fa25 	bl	80005f8 <__aeabi_dmul>
 80121ae:	4b37      	ldr	r3, [pc, #220]	; (801228c <scalbn+0x104>)
 80121b0:	429e      	cmp	r6, r3
 80121b2:	4604      	mov	r4, r0
 80121b4:	460d      	mov	r5, r1
 80121b6:	da10      	bge.n	80121da <scalbn+0x52>
 80121b8:	a32b      	add	r3, pc, #172	; (adr r3, 8012268 <scalbn+0xe0>)
 80121ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121be:	e03a      	b.n	8012236 <scalbn+0xae>
 80121c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80121c4:	428a      	cmp	r2, r1
 80121c6:	d10c      	bne.n	80121e2 <scalbn+0x5a>
 80121c8:	ee10 2a10 	vmov	r2, s0
 80121cc:	4620      	mov	r0, r4
 80121ce:	4629      	mov	r1, r5
 80121d0:	f7ee f85c 	bl	800028c <__adddf3>
 80121d4:	4604      	mov	r4, r0
 80121d6:	460d      	mov	r5, r1
 80121d8:	e019      	b.n	801220e <scalbn+0x86>
 80121da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80121de:	460b      	mov	r3, r1
 80121e0:	3a36      	subs	r2, #54	; 0x36
 80121e2:	4432      	add	r2, r6
 80121e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80121e8:	428a      	cmp	r2, r1
 80121ea:	dd08      	ble.n	80121fe <scalbn+0x76>
 80121ec:	2d00      	cmp	r5, #0
 80121ee:	a120      	add	r1, pc, #128	; (adr r1, 8012270 <scalbn+0xe8>)
 80121f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121f4:	da1c      	bge.n	8012230 <scalbn+0xa8>
 80121f6:	a120      	add	r1, pc, #128	; (adr r1, 8012278 <scalbn+0xf0>)
 80121f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121fc:	e018      	b.n	8012230 <scalbn+0xa8>
 80121fe:	2a00      	cmp	r2, #0
 8012200:	dd08      	ble.n	8012214 <scalbn+0x8c>
 8012202:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012206:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801220a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801220e:	ec45 4b10 	vmov	d0, r4, r5
 8012212:	bd70      	pop	{r4, r5, r6, pc}
 8012214:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012218:	da19      	bge.n	801224e <scalbn+0xc6>
 801221a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801221e:	429e      	cmp	r6, r3
 8012220:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012224:	dd0a      	ble.n	801223c <scalbn+0xb4>
 8012226:	a112      	add	r1, pc, #72	; (adr r1, 8012270 <scalbn+0xe8>)
 8012228:	e9d1 0100 	ldrd	r0, r1, [r1]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d1e2      	bne.n	80121f6 <scalbn+0x6e>
 8012230:	a30f      	add	r3, pc, #60	; (adr r3, 8012270 <scalbn+0xe8>)
 8012232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012236:	f7ee f9df 	bl	80005f8 <__aeabi_dmul>
 801223a:	e7cb      	b.n	80121d4 <scalbn+0x4c>
 801223c:	a10a      	add	r1, pc, #40	; (adr r1, 8012268 <scalbn+0xe0>)
 801223e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d0b8      	beq.n	80121b8 <scalbn+0x30>
 8012246:	a10e      	add	r1, pc, #56	; (adr r1, 8012280 <scalbn+0xf8>)
 8012248:	e9d1 0100 	ldrd	r0, r1, [r1]
 801224c:	e7b4      	b.n	80121b8 <scalbn+0x30>
 801224e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012252:	3236      	adds	r2, #54	; 0x36
 8012254:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012258:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801225c:	4620      	mov	r0, r4
 801225e:	4b0c      	ldr	r3, [pc, #48]	; (8012290 <scalbn+0x108>)
 8012260:	2200      	movs	r2, #0
 8012262:	e7e8      	b.n	8012236 <scalbn+0xae>
 8012264:	f3af 8000 	nop.w
 8012268:	c2f8f359 	.word	0xc2f8f359
 801226c:	01a56e1f 	.word	0x01a56e1f
 8012270:	8800759c 	.word	0x8800759c
 8012274:	7e37e43c 	.word	0x7e37e43c
 8012278:	8800759c 	.word	0x8800759c
 801227c:	fe37e43c 	.word	0xfe37e43c
 8012280:	c2f8f359 	.word	0xc2f8f359
 8012284:	81a56e1f 	.word	0x81a56e1f
 8012288:	43500000 	.word	0x43500000
 801228c:	ffff3cb0 	.word	0xffff3cb0
 8012290:	3c900000 	.word	0x3c900000

08012294 <_init>:
 8012294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012296:	bf00      	nop
 8012298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801229a:	bc08      	pop	{r3}
 801229c:	469e      	mov	lr, r3
 801229e:	4770      	bx	lr

080122a0 <_fini>:
 80122a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122a2:	bf00      	nop
 80122a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122a6:	bc08      	pop	{r3}
 80122a8:	469e      	mov	lr, r3
 80122aa:	4770      	bx	lr
