
MIBattController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    0001a800  08020000  08020000  00040000  2**2
                  ALLOC, READONLY
  1 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00012c0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ff0  08012da0  08012da0  00022da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08013d90  08013d90  00030218  2**0
                  CONTENTS
  5 .ARM          00000008  08013d90  08013d90  00023d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08013d98  08013d98  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08013d98  08013d98  00023d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08013d9c  08013d9c  00023d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000218  20000000  08013da0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000619c  20000218  08013fb8  00030218  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200063b4  08013fb8  000363b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a1c9  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bd9  00000000  00000000  0005a411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e38  00000000  00000000  0005eff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c80  00000000  00000000  00060e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277c5  00000000  00000000  00062aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000216ad  00000000  00000000  0008a26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eea27  00000000  00000000  000ab91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019a341  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000979c  00000000  00000000  0019a394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012d84 	.word	0x08012d84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08012d84 	.word	0x08012d84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DelayedOn_Wait>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DelayedOn_Wait(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	//is batt OK to charge? (and discharge as well)
	if ((Adc1Measurements.Batt_voltage) < (BATT_MAX_VOLTAGE+VoltHysteresisChg)
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <DelayedOn_Wait+0x34>)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <DelayedOn_Wait+0x38>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f203 1391 	addw	r3, r3, #401	; 0x191
 8001030:	429a      	cmp	r2, r3
 8001032:	d208      	bcs.n	8001046 <DelayedOn_Wait+0x26>
			&& Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <DelayedOn_Wait+0x34>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2bf0      	cmp	r3, #240	; 0xf0
 800103a:	d904      	bls.n	8001046 <DelayedOn_Wait+0x26>
	{//yes, ok to charge
		InverterMOS_OFF();	//INV blocked,
 800103c:	f001 f8fe 	bl	800223c <InverterMOS_OFF>
		BatteryMOS_ON();	//battery to power controller, if some PV still is available (at dusk), it will charge BATT (currents below ~200mA)
 8001040:	f001 f874 	bl	800212c <BatteryMOS_ON>
 8001044:	e004      	b.n	8001050 <DelayedOn_Wait+0x30>
	}
	else
	{//not ok to charge battery
#if HW_VER > 01		//charging/discharging blocked, PV might go only to INV
		BatteryMOS_OFF();
 8001046:	f001 f8b1 	bl	80021ac <BatteryMOS_OFF>
		InverterMOS_ON();
 800104a:	f001 f8df 	bl	800220c <InverterMOS_ON>
#else
		InverterMOS_OFF();	//INV blocked, battery to power controller, if some PV still is it will charge BATT (no other choice in HW01), needed to power controller
		BatteryMOS_ON();
#endif
	}
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000599c 	.word	0x2000599c
 8001058:	20000250 	.word	0x20000250

0800105c <DelayedOn_On>:

void DelayedOn_On(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	InverterMOS_ON();
 8001060:	f001 f8d4 	bl	800220c <InverterMOS_ON>
	BatteryMOS_ON();
 8001064:	f001 f862 	bl	800212c <BatteryMOS_ON>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <DelayedInvMosOn>:
/*function switches on inverter mosfet, according to actual config in an instant or with delay*/
void DelayedInvMosOn(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	switch (ConfigReg)
 8001070:	4b5b      	ldr	r3, [pc, #364]	; (80011e0 <DelayedInvMosOn+0x174>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b0d      	cmp	r3, #13
 8001076:	f200 80ae 	bhi.w	80011d6 <DelayedInvMosOn+0x16a>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <DelayedInvMosOn+0x14>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	080010b9 	.word	0x080010b9
 8001084:	080010bf 	.word	0x080010bf
 8001088:	080010d5 	.word	0x080010d5
 800108c:	080010eb 	.word	0x080010eb
 8001090:	08001103 	.word	0x08001103
 8001094:	08001119 	.word	0x08001119
 8001098:	08001131 	.word	0x08001131
 800109c:	08001147 	.word	0x08001147
 80010a0:	0800114d 	.word	0x0800114d
 80010a4:	08001163 	.word	0x08001163
 80010a8:	08001179 	.word	0x08001179
 80010ac:	08001191 	.word	0x08001191
 80010b0:	080011a7 	.word	0x080011a7
 80010b4:	080011bf 	.word	0x080011bf
	{
	case CONFIG_MAINS_0DELAY:
		DelayedOn_On();
 80010b8:	f7ff ffd0 	bl	800105c <DelayedOn_On>
		break;
 80010bc:	e08e      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_1DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME1)
 80010be:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <DelayedInvMosOn+0x178>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80010c6:	d902      	bls.n	80010ce <DelayedInvMosOn+0x62>
		{
			DelayedOn_On();
 80010c8:	f7ff ffc8 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80010cc:	e086      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80010ce:	f7ff ffa7 	bl	8001020 <DelayedOn_Wait>
		break;
 80010d2:	e083      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_2DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME2)
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <DelayedInvMosOn+0x178>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80010dc:	d902      	bls.n	80010e4 <DelayedInvMosOn+0x78>
		{
			DelayedOn_On();
 80010de:	f7ff ffbd 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80010e2:	e07b      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80010e4:	f7ff ff9c 	bl	8001020 <DelayedOn_Wait>
		break;
 80010e8:	e078      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_3DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME3)
 80010ea:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <DelayedInvMosOn+0x178>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f642 2230 	movw	r2, #10800	; 0x2a30
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d902      	bls.n	80010fc <DelayedInvMosOn+0x90>
		{
			DelayedOn_On();
 80010f6:	f7ff ffb1 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80010fa:	e06f      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80010fc:	f7ff ff90 	bl	8001020 <DelayedOn_Wait>
		break;
 8001100:	e06c      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_4DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME4)
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 800110a:	d902      	bls.n	8001112 <DelayedInvMosOn+0xa6>
		{
			DelayedOn_On();
 800110c:	f7ff ffa6 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001110:	e064      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 8001112:	f7ff ff85 	bl	8001020 <DelayedOn_Wait>
		break;
 8001116:	e061      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_5DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME5)
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <DelayedInvMosOn+0x178>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	f244 6250 	movw	r2, #18000	; 0x4650
 8001120:	4293      	cmp	r3, r2
 8001122:	d902      	bls.n	800112a <DelayedInvMosOn+0xbe>
		{
			DelayedOn_On();
 8001124:	f7ff ff9a 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001128:	e058      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 800112a:	f7ff ff79 	bl	8001020 <DelayedOn_Wait>
		break;
 800112e:	e055      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_MAINS_6DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME6)
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	f245 4260 	movw	r2, #21600	; 0x5460
 8001138:	4293      	cmp	r3, r2
 800113a:	d902      	bls.n	8001142 <DelayedInvMosOn+0xd6>
		{
			DelayedOn_On();
 800113c:	f7ff ff8e 	bl	800105c <DelayedOn_On>
 8001140:	e001      	b.n	8001146 <DelayedInvMosOn+0xda>
		}
		else
		{
			DelayedOn_Wait();
 8001142:	f7ff ff6d 	bl	8001020 <DelayedOn_Wait>
		}
	case CONFIG_BATT_0DELAY:
		DelayedOn_On();
 8001146:	f7ff ff89 	bl	800105c <DelayedOn_On>
		break;
 800114a:	e047      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_1DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME1)
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <DelayedInvMosOn+0x178>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001154:	d902      	bls.n	800115c <DelayedInvMosOn+0xf0>
		{
			DelayedOn_On();
 8001156:	f7ff ff81 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 800115a:	e03f      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 800115c:	f7ff ff60 	bl	8001020 <DelayedOn_Wait>
		break;
 8001160:	e03c      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_2DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME2)
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800116a:	d902      	bls.n	8001172 <DelayedInvMosOn+0x106>
		{
			DelayedOn_On();
 800116c:	f7ff ff76 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001170:	e034      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 8001172:	f7ff ff55 	bl	8001020 <DelayedOn_Wait>
		break;
 8001176:	e031      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_3DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME3)
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <DelayedInvMosOn+0x178>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f642 2230 	movw	r2, #10800	; 0x2a30
 8001180:	4293      	cmp	r3, r2
 8001182:	d902      	bls.n	800118a <DelayedInvMosOn+0x11e>
		{
			DelayedOn_On();
 8001184:	f7ff ff6a 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 8001188:	e028      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 800118a:	f7ff ff49 	bl	8001020 <DelayedOn_Wait>
		break;
 800118e:	e025      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_4DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME4)
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <DelayedInvMosOn+0x178>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 8001198:	d902      	bls.n	80011a0 <DelayedInvMosOn+0x134>
		{
			DelayedOn_On();
 800119a:	f7ff ff5f 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 800119e:	e01d      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80011a0:	f7ff ff3e 	bl	8001020 <DelayedOn_Wait>
		break;
 80011a4:	e01a      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_5DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME5)
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <DelayedInvMosOn+0x178>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f244 6250 	movw	r2, #18000	; 0x4650
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d902      	bls.n	80011b8 <DelayedInvMosOn+0x14c>
		{
			DelayedOn_On();
 80011b2:	f7ff ff53 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80011b6:	e011      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80011b8:	f7ff ff32 	bl	8001020 <DelayedOn_Wait>
		break;
 80011bc:	e00e      	b.n	80011dc <DelayedInvMosOn+0x170>
	case CONFIG_BATT_6DELAY:
		if (StatCurrentWs.Time_DuskTime > DUSK_TIME6)
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <DelayedInvMosOn+0x178>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f245 4260 	movw	r2, #21600	; 0x5460
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d902      	bls.n	80011d0 <DelayedInvMosOn+0x164>
		{
			DelayedOn_On();
 80011ca:	f7ff ff47 	bl	800105c <DelayedOn_On>
		}
		else
		{
			DelayedOn_Wait();
		}
		break;
 80011ce:	e005      	b.n	80011dc <DelayedInvMosOn+0x170>
			DelayedOn_Wait();
 80011d0:	f7ff ff26 	bl	8001020 <DelayedOn_Wait>
		break;
 80011d4:	e002      	b.n	80011dc <DelayedInvMosOn+0x170>
	default:
		InverterMOS_ON();
 80011d6:	f001 f819 	bl	800220c <InverterMOS_ON>
		break;
 80011da:	bf00      	nop
	}
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20005998 	.word	0x20005998
 80011e4:	20005c7c 	.word	0x20005c7c

080011e8 <ResetInverterDay>:
 * reset is needed due to issue with starting Inverter from low voltage at dawn (e.g. when battery is charging)
 * to reset MPPT algorithm at least few second long voltage spike (OCV) is needed
 * to do that procedure will disconnect INV, Battery, wait few seconds and start Inverter again
 */
void ResetInverterDay(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	switch (StateResetInv)
 80011ec:	4b50      	ldr	r3, [pc, #320]	; (8001330 <ResetInverterDay+0x148>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b1b      	cmp	r3, #27
 80011f2:	f200 8093 	bhi.w	800131c <ResetInverterDay+0x134>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <ResetInverterDay+0x14>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800126d 	.word	0x0800126d
 8001200:	080012c3 	.word	0x080012c3
 8001204:	080012e7 	.word	0x080012e7
 8001208:	080012e7 	.word	0x080012e7
 800120c:	080012e7 	.word	0x080012e7
 8001210:	080012e7 	.word	0x080012e7
 8001214:	080012e7 	.word	0x080012e7
 8001218:	080012e7 	.word	0x080012e7
 800121c:	080012e7 	.word	0x080012e7
 8001220:	080012e7 	.word	0x080012e7
 8001224:	080012e7 	.word	0x080012e7
 8001228:	080012e7 	.word	0x080012e7
 800122c:	080012e7 	.word	0x080012e7
 8001230:	080012e7 	.word	0x080012e7
 8001234:	080012e7 	.word	0x080012e7
 8001238:	080012e7 	.word	0x080012e7
 800123c:	080012e7 	.word	0x080012e7
 8001240:	080012f3 	.word	0x080012f3
 8001244:	080012f3 	.word	0x080012f3
 8001248:	080012f3 	.word	0x080012f3
 800124c:	080012f3 	.word	0x080012f3
 8001250:	080012f3 	.word	0x080012f3
 8001254:	080012f3 	.word	0x080012f3
 8001258:	080012f3 	.word	0x080012f3
 800125c:	080012f3 	.word	0x080012f3
 8001260:	080012f3 	.word	0x080012f3
 8001264:	080012f3 	.word	0x080012f3
 8001268:	08001307 	.word	0x08001307
	{
	case 0:
#if HW_VER > 01
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN && FlagExt_I == 0)
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <ResetInverterDay+0x14c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8001274:	d908      	bls.n	8001288 <ResetInverterDay+0xa0>
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <ResetInverterDay+0x150>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d104      	bne.n	8001288 <ResetInverterDay+0xa0>
#else
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN )
#endif
		{
			TimeToResetInv = TIME2RESET_INV;	//reset time to 30 minutes if inv is working
 800127e:	4b2f      	ldr	r3, [pc, #188]	; (800133c <ResetInverterDay+0x154>)
 8001280:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e00b      	b.n	80012a0 <ResetInverterDay+0xb8>
		}
#if HW_VER > 01
		else if (FlagExt_I == 1)
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <ResetInverterDay+0x150>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d107      	bne.n	80012a0 <ResetInverterDay+0xb8>
		{
			TimeToResetInv = 1;
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <ResetInverterDay+0x154>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
			StatCurrentWh.InvExtResetCnt++;
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <ResetInverterDay+0x158>)
 8001298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800129a:	3301      	adds	r3, #1
 800129c:	4a28      	ldr	r2, [pc, #160]	; (8001340 <ResetInverterDay+0x158>)
 800129e:	6693      	str	r3, [r2, #104]	; 0x68
		}
#endif
		if (TimeToResetInv)	TimeToResetInv--;
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <ResetInverterDay+0x154>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <ResetInverterDay+0xca>
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <ResetInverterDay+0x154>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	4a23      	ldr	r2, [pc, #140]	; (800133c <ResetInverterDay+0x154>)
 80012b0:	6013      	str	r3, [r2, #0]
		if (!TimeToResetInv) StateResetInv=1;	//start Inv Reset procedure
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <ResetInverterDay+0x154>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d137      	bne.n	800132a <ResetInverterDay+0x142>
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <ResetInverterDay+0x148>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]
		break;
 80012c0:	e033      	b.n	800132a <ResetInverterDay+0x142>
	case 1:	//30 minutes without inv currrent. set flag that procedure is ON,
		FlagResetInverter = 1;	//procedure is on
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <ResetInverterDay+0x15c>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
		BatteryMOS_OFF();		//switch off all loads causing OCV
 80012c8:	f000 ff70 	bl	80021ac <BatteryMOS_OFF>
		InverterMOS_OFF();
 80012cc:	f000 ffb6 	bl	800223c <InverterMOS_OFF>
		StateResetInv = 2;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <ResetInverterDay+0x148>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	601a      	str	r2, [r3, #0]
		StatCurrentWh.InvResetCntr++;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <ResetInverterDay+0x158>)
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	3301      	adds	r3, #1
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <ResetInverterDay+0x158>)
 80012de:	62d3      	str	r3, [r2, #44]	; 0x2c
		ExtOut_InvResetStart();
 80012e0:	f000 feb2 	bl	8002048 <ExtOut_InvResetStart>
		break;
 80012e4:	e022      	b.n	800132c <ResetInverterDay+0x144>
	case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10:
	case 11: case 12: case 13: case 14: case 15: case 16:
		//wait 15 seconds
		StateResetInv++;
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <ResetInverterDay+0x148>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a10      	ldr	r2, [pc, #64]	; (8001330 <ResetInverterDay+0x148>)
 80012ee:	6013      	str	r3, [r2, #0]
		break;
 80012f0:	e01c      	b.n	800132c <ResetInverterDay+0x144>
	case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26:
		//ON inverter MOS and wait 10 seconds
		InverterMOS_ON();
 80012f2:	f000 ff8b 	bl	800220c <InverterMOS_ON>
		StateResetInv++;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <ResetInverterDay+0x148>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <ResetInverterDay+0x148>)
 80012fe:	6013      	str	r3, [r2, #0]
		ExtOut_InvResetStop();
 8001300:	f000 feda 	bl	80020b8 <ExtOut_InvResetStop>
		break;
 8001304:	e012      	b.n	800132c <ResetInverterDay+0x144>
	case 27:	//now return to regular operation of controller
		StateResetInv=0;
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <ResetInverterDay+0x148>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <ResetInverterDay+0x15c>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
		TimeToResetInv = TIME2RESET_INV;	//reset timer for 30 minutes
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <ResetInverterDay+0x154>)
 8001314:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001318:	601a      	str	r2, [r3, #0]
		break;
 800131a:	e007      	b.n	800132c <ResetInverterDay+0x144>
	default:
		StateResetInv=0;
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <ResetInverterDay+0x148>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <ResetInverterDay+0x15c>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
		break;
 8001328:	e000      	b.n	800132c <ResetInverterDay+0x144>
		break;
 800132a:	bf00      	nop
	}
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20006310 	.word	0x20006310
 8001334:	2000599c 	.word	0x2000599c
 8001338:	2000024c 	.word	0x2000024c
 800133c:	2000000c 	.word	0x2000000c
 8001340:	20005a28 	.word	0x20005a28
 8001344:	200061a4 	.word	0x200061a4

08001348 <ResetInverterNight>:
 * reset is needed due to excessive current consumption (when batt voltage < MPP but battery can supply higher current than PV)
 * its due to mppt alg in inverter. Not needed when battery has operating voltage higher than MPP of inverter or PV panel
 * procedure will disconnect INV, wait few seconds and start Inverter again
 */
void ResetInverterNight(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	switch (StateResetInv)
 800134c:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <ResetInverterNight+0x1ac>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b25      	cmp	r3, #37	; 0x25
 8001352:	f200 80c3 	bhi.w	80014dc <ResetInverterNight+0x194>
 8001356:	a201      	add	r2, pc, #4	; (adr r2, 800135c <ResetInverterNight+0x14>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	080013f5 	.word	0x080013f5
 8001360:	0800145b 	.word	0x0800145b
 8001364:	0800148d 	.word	0x0800148d
 8001368:	0800148d 	.word	0x0800148d
 800136c:	0800148d 	.word	0x0800148d
 8001370:	0800148d 	.word	0x0800148d
 8001374:	0800148d 	.word	0x0800148d
 8001378:	0800148d 	.word	0x0800148d
 800137c:	0800148d 	.word	0x0800148d
 8001380:	0800148d 	.word	0x0800148d
 8001384:	0800148d 	.word	0x0800148d
 8001388:	0800148d 	.word	0x0800148d
 800138c:	0800148d 	.word	0x0800148d
 8001390:	0800148d 	.word	0x0800148d
 8001394:	0800148d 	.word	0x0800148d
 8001398:	0800148d 	.word	0x0800148d
 800139c:	0800148d 	.word	0x0800148d
 80013a0:	0800148d 	.word	0x0800148d
 80013a4:	0800148d 	.word	0x0800148d
 80013a8:	0800148d 	.word	0x0800148d
 80013ac:	0800148d 	.word	0x0800148d
 80013b0:	0800148d 	.word	0x0800148d
 80013b4:	0800148d 	.word	0x0800148d
 80013b8:	0800148d 	.word	0x0800148d
 80013bc:	0800148d 	.word	0x0800148d
 80013c0:	0800148d 	.word	0x0800148d
 80013c4:	0800148d 	.word	0x0800148d
 80013c8:	08001499 	.word	0x08001499
 80013cc:	08001499 	.word	0x08001499
 80013d0:	08001499 	.word	0x08001499
 80013d4:	08001499 	.word	0x08001499
 80013d8:	08001499 	.word	0x08001499
 80013dc:	08001499 	.word	0x08001499
 80013e0:	08001499 	.word	0x08001499
 80013e4:	08001499 	.word	0x08001499
 80013e8:	08001499 	.word	0x08001499
 80013ec:	08001499 	.word	0x08001499
 80013f0:	080014c3 	.word	0x080014c3
	{
	case 0:
		//if (Adc1Measurements.Inv_current > INV_CURRENT_MIN &&
		if ( Adc1Measurements.Inv_current < INV_CURRENT_MAX)
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <ResetInverterNight+0x1b0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f243 02d3 	movw	r2, #12499	; 0x30d3
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d803      	bhi.n	8001408 <ResetInverterNight+0xc0>
		{
			TimeToResetInv = TIME2OVLD_INV;	//set overload timer for x seconds
 8001400:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <ResetInverterNight+0x1b4>)
 8001402:	2223      	movs	r2, #35	; 0x23
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e00b      	b.n	8001420 <ResetInverterNight+0xd8>
		}
		else if (Adc1Measurements.Inv_current > INV_CURR_SC)	//considered as short-circuit
 8001408:	4b3b      	ldr	r3, [pc, #236]	; (80014f8 <ResetInverterNight+0x1b0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f244 6250 	movw	r2, #18000	; 0x4650
 8001410:	4293      	cmp	r3, r2
 8001412:	d905      	bls.n	8001420 <ResetInverterNight+0xd8>
		{
			TimeToResetInv = 0;
 8001414:	4b39      	ldr	r3, [pc, #228]	; (80014fc <ResetInverterNight+0x1b4>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
			StatCountFlagsWs.InvOutShorted = 1;
 800141a:	4b39      	ldr	r3, [pc, #228]	; (8001500 <ResetInverterNight+0x1b8>)
 800141c:	2201      	movs	r2, #1
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
		}
#if HW_VER > 01
		if (FlagExt_I == 1)
 8001420:	4b38      	ldr	r3, [pc, #224]	; (8001504 <ResetInverterNight+0x1bc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d107      	bne.n	8001438 <ResetInverterNight+0xf0>
		{
			TimeToResetInv = 1;
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <ResetInverterNight+0x1b4>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
			StatCurrentWh.InvExtResetCnt++;
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <ResetInverterNight+0x1c0>)
 8001430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001432:	3301      	adds	r3, #1
 8001434:	4a34      	ldr	r2, [pc, #208]	; (8001508 <ResetInverterNight+0x1c0>)
 8001436:	6693      	str	r3, [r2, #104]	; 0x68
		}
#endif
		if (TimeToResetInv)	TimeToResetInv--;
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <ResetInverterNight+0x1b4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <ResetInverterNight+0x102>
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <ResetInverterNight+0x1b4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	4a2d      	ldr	r2, [pc, #180]	; (80014fc <ResetInverterNight+0x1b4>)
 8001448:	6013      	str	r3, [r2, #0]
		if (!TimeToResetInv) StateResetInv=1;	//start Inv Reset procedure
 800144a:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <ResetInverterNight+0x1b4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d14b      	bne.n	80014ea <ResetInverterNight+0x1a2>
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <ResetInverterNight+0x1ac>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
		break;
 8001458:	e047      	b.n	80014ea <ResetInverterNight+0x1a2>
	case 1:	//10 sec ovld (or no current) inv currrent. set flag that procedure is ON,
		FlagResetInverter = 1;	//procedure is on
 800145a:	4b2c      	ldr	r3, [pc, #176]	; (800150c <ResetInverterNight+0x1c4>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]

#if HW_VER > 01
		BatteryMOS_OFF();			//disconnect load (HW02>)and..
 8001460:	f000 fea4 	bl	80021ac <BatteryMOS_OFF>
#endif
		InverterMOS_OFF();			//disconnect load
 8001464:	f000 feea 	bl	800223c <InverterMOS_OFF>
		StateResetInv = 17;			//for regular overload wait 10 seconds
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <ResetInverterNight+0x1ac>)
 800146a:	2211      	movs	r2, #17
 800146c:	601a      	str	r2, [r3, #0]
		if (StatCountFlagsWs.InvOutShorted) StateResetInv = 2;	//for short circuit wait 25 seconds
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <ResetInverterNight+0x1b8>)
 8001470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <ResetInverterNight+0x134>
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <ResetInverterNight+0x1ac>)
 8001478:	2202      	movs	r2, #2
 800147a:	601a      	str	r2, [r3, #0]
		//StatCurrentWh.InvResetCntr++;
		StatCurrentWh.InvOvcCounter++;
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <ResetInverterNight+0x1c0>)
 800147e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001480:	3301      	adds	r3, #1
 8001482:	4a21      	ldr	r2, [pc, #132]	; (8001508 <ResetInverterNight+0x1c0>)
 8001484:	6653      	str	r3, [r2, #100]	; 0x64
		ExtOut_InvResetStart();
 8001486:	f000 fddf 	bl	8002048 <ExtOut_InvResetStart>
		break;
 800148a:	e031      	b.n	80014f0 <ResetInverterNight+0x1a8>
	case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10:
	case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18:
	case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26:
		//wait 25 seconds
		StateResetInv++;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <ResetInverterNight+0x1ac>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <ResetInverterNight+0x1ac>)
 8001494:	6013      	str	r3, [r2, #0]
		break;
 8001496:	e02b      	b.n	80014f0 <ResetInverterNight+0x1a8>
	case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36:
		//ON inverter MOS and wait 10 seconds
		InverterMOS_ON();
 8001498:	f000 feb8 	bl	800220c <InverterMOS_ON>
		BatteryMOS_ON();
 800149c:	f000 fe46 	bl	800212c <BatteryMOS_ON>
		StateResetInv++;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <ResetInverterNight+0x1ac>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <ResetInverterNight+0x1ac>)
 80014a8:	6013      	str	r3, [r2, #0]
		ExtOut_InvResetStop();
 80014aa:	f000 fe05 	bl	80020b8 <ExtOut_InvResetStop>
		if (Adc1Measurements.Inv_current > INV_CURR_SC) StateResetInv = 1;	//if SC occurs launch again reset procedure, instantly
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <ResetInverterNight+0x1b0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f244 6250 	movw	r2, #18000	; 0x4650
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d919      	bls.n	80014ee <ResetInverterNight+0x1a6>
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <ResetInverterNight+0x1ac>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
		break;
 80014c0:	e015      	b.n	80014ee <ResetInverterNight+0x1a6>
	case 37:	//now return to regular operation of controller
		StatCountFlagsWs.InvOutShorted = 0;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <ResetInverterNight+0x1b8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38
		StateResetInv=0;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <ResetInverterNight+0x1ac>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <ResetInverterNight+0x1c4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
		TimeToResetInv = TIME2OVLD_INV;	//reset timer for 30 minutes
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <ResetInverterNight+0x1b4>)
 80014d6:	2223      	movs	r2, #35	; 0x23
 80014d8:	601a      	str	r2, [r3, #0]
		break;
 80014da:	e009      	b.n	80014f0 <ResetInverterNight+0x1a8>
	default:
		StateResetInv=0;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <ResetInverterNight+0x1ac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
		FlagResetInverter = 0;	//procedure is off
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <ResetInverterNight+0x1c4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
		break;
 80014e8:	e002      	b.n	80014f0 <ResetInverterNight+0x1a8>
		break;
 80014ea:	bf00      	nop
 80014ec:	e000      	b.n	80014f0 <ResetInverterNight+0x1a8>
		break;
 80014ee:	bf00      	nop
	}
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20006310 	.word	0x20006310
 80014f8:	2000599c 	.word	0x2000599c
 80014fc:	2000000c 	.word	0x2000000c
 8001500:	200059c0 	.word	0x200059c0
 8001504:	2000024c 	.word	0x2000024c
 8001508:	20005a28 	.word	0x20005a28
 800150c:	200061a4 	.word	0x200061a4

08001510 <setPWM_TIM2>:

void setPWM_TIM2(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8001510:	b084      	sub	sp, #16
 8001512:	b580      	push	{r7, lr}
 8001514:	b088      	sub	sp, #32
 8001516:	af00      	add	r7, sp, #0
 8001518:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800151c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 //HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 TIM_OC_InitTypeDef sConfigOC;
 //timer.Init.Period = period; // set the period duration
 //HAL_TIM_PWM_Init(&timer); // re-inititialise with new period value
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001520:	2360      	movs	r3, #96	; 0x60
 8001522:	607b      	str	r3, [r7, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 8001524:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001528:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800152e:	2308      	movs	r3, #8
 8001530:	613b      	str	r3, [r7, #16]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800153a:	4619      	mov	r1, r3
 800153c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001540:	f006 ff24 	bl	800838c <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001544:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001546:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800154a:	f006 fc99 	bl	8007e80 <HAL_TIM_PWM_Start>
}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001558:	b004      	add	sp, #16
 800155a:	4770      	bx	lr

0800155c <setPWM_TIM16>:

void setPWM_TIM16(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse)
{
 800155c:	b084      	sub	sp, #16
 800155e:	b580      	push	{r7, lr}
 8001560:	b088      	sub	sp, #32
 8001562:	af00      	add	r7, sp, #0
 8001564:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001568:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 TIM_OC_InitTypeDef sConfigOC;
 sConfigOC.Pulse = pulse; // set the pulse duration
 800156c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001570:	60bb      	str	r3, [r7, #8]
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001572:	2360      	movs	r3, #96	; 0x60
 8001574:	607b      	str	r3, [r7, #4]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
 sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800158e:	4619      	mov	r1, r3
 8001590:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001594:	f006 fefa 	bl	800838c <HAL_TIM_PWM_ConfigChannel>
 /* Set the Capture Compare Register value */
 //*timer->CCR1 = pulse;
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001598:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800159a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800159e:	f006 fc6f 	bl	8007e80 <HAL_TIM_PWM_Start>
}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015ac:	b004      	add	sp, #16
 80015ae:	4770      	bx	lr

080015b0 <LedStatusShow>:

/*function called once a 1 second to show mashine-state status thru LEDs*/
void LedStatusShow(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	if (LedStatusTimer)
 80015b4:	4b61      	ldr	r3, [pc, #388]	; (800173c <LedStatusShow+0x18c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d01d      	beq.n	80015f8 <LedStatusShow+0x48>
	{
		LedStatusTimer--;
 80015bc:	4b5f      	ldr	r3, [pc, #380]	; (800173c <LedStatusShow+0x18c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4a5e      	ldr	r2, [pc, #376]	; (800173c <LedStatusShow+0x18c>)
 80015c4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015cc:	485c      	ldr	r0, [pc, #368]	; (8001740 <LedStatusShow+0x190>)
 80015ce:	f005 f94b 	bl	8006868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d8:	4859      	ldr	r0, [pc, #356]	; (8001740 <LedStatusShow+0x190>)
 80015da:	f005 f945 	bl	8006868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e4:	4856      	ldr	r0, [pc, #344]	; (8001740 <LedStatusShow+0x190>)
 80015e6:	f005 f93f 	bl	8006868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f0:	4853      	ldr	r0, [pc, #332]	; (8001740 <LedStatusShow+0x190>)
 80015f2:	f005 f939 	bl	8006868 <HAL_GPIO_WritePin>
		{//lowest priority to show
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
		}
	}
}
 80015f6:	e09f      	b.n	8001738 <LedStatusShow+0x188>
		if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP || Adc1Measurements.NTC2_Inverter_mos>MOSFET_MAX_TEMP)	//powerMOSFET OVT 0
 80015f8:	4b52      	ldr	r3, [pc, #328]	; (8001744 <LedStatusShow+0x194>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b50      	cmp	r3, #80	; 0x50
 80015fe:	d803      	bhi.n	8001608 <LedStatusShow+0x58>
 8001600:	4b50      	ldr	r3, [pc, #320]	; (8001744 <LedStatusShow+0x194>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	2b50      	cmp	r3, #80	; 0x50
 8001606:	d91d      	bls.n	8001644 <LedStatusShow+0x94>
			if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001608:	4b4e      	ldr	r3, [pc, #312]	; (8001744 <LedStatusShow+0x194>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b50      	cmp	r3, #80	; 0x50
 800160e:	d905      	bls.n	800161c <LedStatusShow+0x6c>
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001616:	484a      	ldr	r0, [pc, #296]	; (8001740 <LedStatusShow+0x190>)
 8001618:	f005 f926 	bl	8006868 <HAL_GPIO_WritePin>
			if (Adc1Measurements.NTC2_Inverter_mos>MOSFET_MAX_TEMP) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800161c:	4b49      	ldr	r3, [pc, #292]	; (8001744 <LedStatusShow+0x194>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	2b50      	cmp	r3, #80	; 0x50
 8001622:	d905      	bls.n	8001630 <LedStatusShow+0x80>
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162a:	4845      	ldr	r0, [pc, #276]	; (8001740 <LedStatusShow+0x190>)
 800162c:	f005 f91c 	bl	8006868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001636:	4842      	ldr	r0, [pc, #264]	; (8001740 <LedStatusShow+0x190>)
 8001638:	f005 f916 	bl	8006868 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 800163c:	4b3f      	ldr	r3, [pc, #252]	; (800173c <LedStatusShow+0x18c>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e079      	b.n	8001738 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Time_NoBattery2Chg)	//cant charge battery (its full) 1 high priority
 8001644:	4b40      	ldr	r3, [pc, #256]	; (8001748 <LedStatusShow+0x198>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00f      	beq.n	800166c <LedStatusShow+0xbc>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001652:	483b      	ldr	r0, [pc, #236]	; (8001740 <LedStatusShow+0x190>)
 8001654:	f005 f908 	bl	8006868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165e:	4838      	ldr	r0, [pc, #224]	; (8001740 <LedStatusShow+0x190>)
 8001660:	f005 f902 	bl	8006868 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001664:	4b35      	ldr	r3, [pc, #212]	; (800173c <LedStatusShow+0x18c>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
}
 800166a:	e065      	b.n	8001738 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattRecharge)	//battery charging (mains mode) 2
 800166c:	4b36      	ldr	r3, [pc, #216]	; (8001748 <LedStatusShow+0x198>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <LedStatusShow+0xd8>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167a:	4831      	ldr	r0, [pc, #196]	; (8001740 <LedStatusShow+0x190>)
 800167c:	f005 f8f4 	bl	8006868 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <LedStatusShow+0x18c>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]
}
 8001686:	e057      	b.n	8001738 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattOut)	//battery discharging 3
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <LedStatusShow+0x198>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01b      	beq.n	80016c8 <LedStatusShow+0x118>
			if (FlagInverterMOS && FlagBatteryMOS)
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <LedStatusShow+0x19c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00d      	beq.n	80016b4 <LedStatusShow+0x104>
 8001698:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <LedStatusShow+0x1a0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <LedStatusShow+0x104>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a6:	4826      	ldr	r0, [pc, #152]	; (8001740 <LedStatusShow+0x190>)
 80016a8:	f005 f8de 	bl	8006868 <HAL_GPIO_WritePin>
				LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <LedStatusShow+0x18c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e041      	b.n	8001738 <LedStatusShow+0x188>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ba:	4821      	ldr	r0, [pc, #132]	; (8001740 <LedStatusShow+0x190>)
 80016bc:	f005 f8d4 	bl	8006868 <HAL_GPIO_WritePin>
				LedStatusTimer = LEDSTATUS_TIMER_MED;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <LedStatusShow+0x18c>)
 80016c2:	2203      	movs	r2, #3
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	e037      	b.n	8001738 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_Inverter)	//inverter operational (mains mode) 3
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <LedStatusShow+0x198>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d009      	beq.n	80016e4 <LedStatusShow+0x134>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d6:	481a      	ldr	r0, [pc, #104]	; (8001740 <LedStatusShow+0x190>)
 80016d8:	f005 f8c6 	bl	8006868 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <LedStatusShow+0x18c>)
 80016de:	2209      	movs	r2, #9
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	e029      	b.n	8001738 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattNoInv)	//battery charging, no inverter (mains mode) 4
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <LedStatusShow+0x198>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <LedStatusShow+0x150>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80016ec:	2201      	movs	r2, #1
 80016ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f2:	4813      	ldr	r0, [pc, #76]	; (8001740 <LedStatusShow+0x190>)
 80016f4:	f005 f8b8 	bl	8006868 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <LedStatusShow+0x18c>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
}
 80016fe:	e01b      	b.n	8001738 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Ws_BattIn)	//battery charging (battery mode) 5
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <LedStatusShow+0x198>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d009      	beq.n	800171c <LedStatusShow+0x16c>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <LedStatusShow+0x190>)
 8001710:	f005 f8aa 	bl	8006868 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_SHORT;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <LedStatusShow+0x18c>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]
}
 800171a:	e00d      	b.n	8001738 <LedStatusShow+0x188>
		else if (StatCountFlagsWs.Time_NightTime)	//night time, lowest priority to show 6
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <LedStatusShow+0x198>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <LedStatusShow+0x188>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <LedStatusShow+0x190>)
 800172c:	f005 f89c 	bl	8006868 <HAL_GPIO_WritePin>
			LedStatusTimer = LEDSTATUS_TIMER_LONG;
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <LedStatusShow+0x18c>)
 8001732:	2209      	movs	r2, #9
 8001734:	601a      	str	r2, [r3, #0]
}
 8001736:	e7ff      	b.n	8001738 <LedStatusShow+0x188>
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200059bc 	.word	0x200059bc
 8001740:	48000400 	.word	0x48000400
 8001744:	2000599c 	.word	0x2000599c
 8001748:	200059c0 	.word	0x200059c0
 800174c:	20000244 	.word	0x20000244
 8001750:	20000240 	.word	0x20000240

08001754 <RestoreCalValuesFromFLASH>:

/*Function restoring  saved cal data from FLASH memory */
void RestoreCalValuesFromFLASH(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
int i;

	for(i = 0; i < sizeof(CalibrationValues); i++)
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	e00a      	b.n	8001776 <RestoreCalValuesFromFLASH+0x22>
	{
		((uint8_t *) &CalibrationValues)[i] = Cal_savedInFLASH[i];
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <RestoreCalValuesFromFLASH+0x5c>)
 8001764:	4413      	add	r3, r2
 8001766:	4913      	ldr	r1, [pc, #76]	; (80017b4 <RestoreCalValuesFromFLASH+0x60>)
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	440a      	add	r2, r1
 800176c:	7812      	ldrb	r2, [r2, #0]
 800176e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(CalibrationValues); i++)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3301      	adds	r3, #1
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b27      	cmp	r3, #39	; 0x27
 800177a:	d9f1      	bls.n	8001760 <RestoreCalValuesFromFLASH+0xc>
	}
	if (CalibrationValues.Indicator == 0xffffffff)
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <RestoreCalValuesFromFLASH+0x5c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d10d      	bne.n	80017a2 <RestoreCalValuesFromFLASH+0x4e>
	{
		for(i = 0; i < sizeof(CalibrationValues); i++)
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	e007      	b.n	800179c <RestoreCalValuesFromFLASH+0x48>
		{
			((uint8_t *) &CalibrationValues)[i] = 0;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <RestoreCalValuesFromFLASH+0x5c>)
 8001790:	4413      	add	r3, r2
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < sizeof(CalibrationValues); i++)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3301      	adds	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b27      	cmp	r3, #39	; 0x27
 80017a0:	d9f4      	bls.n	800178c <RestoreCalValuesFromFLASH+0x38>
		}
	}

}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20005c54 	.word	0x20005c54
 80017b4:	0803a000 	.word	0x0803a000

080017b8 <StoreCalData2FLASH>:

void StoreCalData2FLASH(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
	uint32_t temp, sofar=0, PageAddress=0;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef flash_conf;

	osTimerStop(myTimer01Handle);
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <StoreCalData2FLASH+0xa8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f009 f89e 	bl	800a90c <osTimerStop>
	StatCurrentWh.FlashPageCounter++;
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <StoreCalData2FLASH+0xac>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <StoreCalData2FLASH+0xac>)
 80017d8:	6013      	str	r3, [r2, #0]
	flash_conf.TypeErase = FLASH_TYPEERASE_PAGES;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
	flash_conf.NbPages = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
	flash_conf.Page = NO_FLASH_PAGES+64;
 80017e2:	2374      	movs	r3, #116	; 0x74
 80017e4:	60fb      	str	r3, [r7, #12]
	//flash_conf.Page = (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0];
	flash_conf.Banks = FLASH_BANK_1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
#ifndef DEBUG_EN
	HAL_FLASH_Unlock();
 80017ea:	f004 fc93 	bl	8006114 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <StoreCalData2FLASH+0xb0>)
 80017f0:	22b3      	movs	r2, #179	; 0xb3
 80017f2:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&flash_conf, &temp);// FLASH_Erase_Sector(&Stats_savedInFLASH+RecentPage_pointer, VOLTAGE_RANGE_3);
 80017f4:	f107 0214 	add.w	r2, r7, #20
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f004 fd7b 	bl	80062f8 <HAL_FLASHEx_Erase>
	//HAL_FLASH_Lock();
	//HAL_FLASH_Unlock();
	//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );

	 while (sofar<((sizeof(CalibrationValues)/(4*2))))	//should divided by number of bytes@word wrote at once
 8001802:	e01f      	b.n	8001844 <StoreCalData2FLASH+0x8c>
	 {
		 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&Cal_savedInFLASH[PageAddress], ((uint64_t *) &CalibrationValues)[sofar]) == HAL_OK)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	4a19      	ldr	r2, [pc, #100]	; (800186c <StoreCalData2FLASH+0xb4>)
 8001808:	4413      	add	r3, r2
 800180a:	4619      	mov	r1, r3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4a17      	ldr	r2, [pc, #92]	; (8001870 <StoreCalData2FLASH+0xb8>)
 8001812:	4413      	add	r3, r2
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	2000      	movs	r0, #0
 800181a:	f004 fc0f 	bl	800603c <HAL_FLASH_Program>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d106      	bne.n	8001832 <StoreCalData2FLASH+0x7a>
		 {
			 PageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	3308      	adds	r3, #8
 8001828:	61bb      	str	r3, [r7, #24]
			 sofar++;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3301      	adds	r3, #1
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	e008      	b.n	8001844 <StoreCalData2FLASH+0x8c>
		 }
		 else
		 {
		   /* Error occurred while writing data in Flash memory*/
			 osTimerStart(myTimer01Handle, 100);
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <StoreCalData2FLASH+0xa8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2164      	movs	r1, #100	; 0x64
 8001838:	4618      	mov	r0, r3
 800183a:	f009 f839 	bl	800a8b0 <osTimerStart>
			 return HAL_FLASH_GetError ();
 800183e:	f004 fc9b 	bl	8006178 <HAL_FLASH_GetError>
 8001842:	e00a      	b.n	800185a <StoreCalData2FLASH+0xa2>
	 while (sofar<((sizeof(CalibrationValues)/(4*2))))	//should divided by number of bytes@word wrote at once
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b04      	cmp	r3, #4
 8001848:	d9dc      	bls.n	8001804 <StoreCalData2FLASH+0x4c>
		 }
	}
#endif
	HAL_FLASH_Lock();
 800184a:	f004 fc85 	bl	8006158 <HAL_FLASH_Lock>
	osTimerStart(myTimer01Handle, 100);
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <StoreCalData2FLASH+0xa8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2164      	movs	r1, #100	; 0x64
 8001854:	4618      	mov	r0, r3
 8001856:	f009 f82b 	bl	800a8b0 <osTimerStart>
}
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20005d9c 	.word	0x20005d9c
 8001864:	20005a28 	.word	0x20005a28
 8001868:	40022000 	.word	0x40022000
 800186c:	0803a000 	.word	0x0803a000
 8001870:	20005c54 	.word	0x20005c54

08001874 <RestoreStatisticsFromFLASH>:

/*Function restoring last saved statistics from FLASH memory */
void RestoreStatisticsFromFLASH(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
	uint32_t i, curr_val=0, Highest_val=0;
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
	//Stats_savedInFLASH[NO_FLASH_PAGES][FLASH_PAGE_SIZE]
	RecentPage_pointer = 0;
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <RestoreStatisticsFromFLASH+0x10c>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (NO_FLASH_PAGES); i++)
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e02f      	b.n	80018ee <RestoreStatisticsFromFLASH+0x7a>
		{
			for(uint32_t j=4;j>0;)
 800188e:	2304      	movs	r3, #4
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	e00d      	b.n	80018b0 <RestoreStatisticsFromFLASH+0x3c>
			{
				j--;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	3b01      	subs	r3, #1
 8001898:	603b      	str	r3, [r7, #0]
				curr_val = (curr_val<<8) | Stats_savedInFLASH[i][j];
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	4939      	ldr	r1, [pc, #228]	; (8001984 <RestoreStatisticsFromFLASH+0x110>)
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	02d2      	lsls	r2, r2, #11
 80018a4:	4411      	add	r1, r2
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	440a      	add	r2, r1
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
			for(uint32_t j=4;j>0;)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ee      	bne.n	8001894 <RestoreStatisticsFromFLASH+0x20>
			}
			if (curr_val == 0xffffffff)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d101      	bne.n	80018c2 <RestoreStatisticsFromFLASH+0x4e>
			{
				curr_val = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
			}
			if (curr_val > Highest_val)
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d909      	bls.n	80018de <RestoreStatisticsFromFLASH+0x6a>
			{
				RecentPage_pointer = i;
 80018ca:	4a2d      	ldr	r2, [pc, #180]	; (8001980 <RestoreStatisticsFromFLASH+0x10c>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6013      	str	r3, [r2, #0]
				Highest_val = curr_val;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	607b      	str	r3, [r7, #4]
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80018d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d8:	482b      	ldr	r0, [pc, #172]	; (8001988 <RestoreStatisticsFromFLASH+0x114>)
 80018da:	f004 ffdd 	bl	8006898 <HAL_GPIO_TogglePin>
			}
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80018de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e2:	4829      	ldr	r0, [pc, #164]	; (8001988 <RestoreStatisticsFromFLASH+0x114>)
 80018e4:	f004 ffd8 	bl	8006898 <HAL_GPIO_TogglePin>
	for (i = 0; i < (NO_FLASH_PAGES); i++)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b33      	cmp	r3, #51	; 0x33
 80018f2:	d9cc      	bls.n	800188e <RestoreStatisticsFromFLASH+0x1a>
		}

	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fa:	4823      	ldr	r0, [pc, #140]	; (8001988 <RestoreStatisticsFromFLASH+0x114>)
 80018fc:	f004 ffb4 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001906:	4820      	ldr	r0, [pc, #128]	; (8001988 <RestoreStatisticsFromFLASH+0x114>)
 8001908:	f004 ffae 	bl	8006868 <HAL_GPIO_WritePin>

	for(i = 0; i < sizeof(Stat_Flash); i++)
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e00e      	b.n	8001930 <RestoreStatisticsFromFLASH+0xbc>
	{
		((uint8_t *) &Stat_Flash)[i] = Stats_savedInFLASH[RecentPage_pointer][i];
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <RestoreStatisticsFromFLASH+0x10c>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	491c      	ldr	r1, [pc, #112]	; (800198c <RestoreStatisticsFromFLASH+0x118>)
 800191a:	440b      	add	r3, r1
 800191c:	4919      	ldr	r1, [pc, #100]	; (8001984 <RestoreStatisticsFromFLASH+0x110>)
 800191e:	02d2      	lsls	r2, r2, #11
 8001920:	4411      	add	r1, r2
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	440a      	add	r2, r1
 8001926:	7812      	ldrb	r2, [r2, #0]
 8001928:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(Stat_Flash); i++)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3301      	adds	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2baf      	cmp	r3, #175	; 0xaf
 8001934:	d9ed      	bls.n	8001912 <RestoreStatisticsFromFLASH+0x9e>
	}
	if (Stat_Flash.Time_NightTime == 0xffffffff)
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <RestoreStatisticsFromFLASH+0x118>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193e:	d113      	bne.n	8001968 <RestoreStatisticsFromFLASH+0xf4>
	{
		for(i = 0; i < sizeof(Stat_Flash); i++) {
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e00c      	b.n	8001960 <RestoreStatisticsFromFLASH+0xec>
			    ((uint8_t *) &StatCurrentWh)[i] = 0;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <RestoreStatisticsFromFLASH+0x11c>)
 800194a:	4413      	add	r3, r2
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
			    ((uint8_t *) &Stat_Flash)[i] = 0;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4a0e      	ldr	r2, [pc, #56]	; (800198c <RestoreStatisticsFromFLASH+0x118>)
 8001954:	4413      	add	r3, r2
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < sizeof(Stat_Flash); i++) {
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2baf      	cmp	r3, #175	; 0xaf
 8001964:	d9ef      	bls.n	8001946 <RestoreStatisticsFromFLASH+0xd2>
			}
	}
	else StatCurrentWh = Stat_Flash;
}
 8001966:	e007      	b.n	8001978 <RestoreStatisticsFromFLASH+0x104>
	else StatCurrentWh = Stat_Flash;
 8001968:	4a09      	ldr	r2, [pc, #36]	; (8001990 <RestoreStatisticsFromFLASH+0x11c>)
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <RestoreStatisticsFromFLASH+0x118>)
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	23b0      	movs	r3, #176	; 0xb0
 8001972:	461a      	mov	r2, r3
 8001974:	f00b febd 	bl	800d6f2 <memcpy>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200061a0 	.word	0x200061a0
 8001984:	08020000 	.word	0x08020000
 8001988:	48000400 	.word	0x48000400
 800198c:	20006214 	.word	0x20006214
 8001990:	20005a28 	.word	0x20005a28

08001994 <StoreStatistics2FLASH>:

/*Function storing last  statistics to FLASH memory */
void StoreStatistics2FLASH(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
	uint32_t temp, sofar=0, StartPageAddress=0;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef flash_conf;

	osTimerStop(myTimer01Handle);
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <StoreStatistics2FLASH+0xec>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f008 ffb0 	bl	800a90c <osTimerStop>
	Stat_Flash = StatCurrentWh;
 80019ac:	4a35      	ldr	r2, [pc, #212]	; (8001a84 <StoreStatistics2FLASH+0xf0>)
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <StoreStatistics2FLASH+0xf4>)
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	23b0      	movs	r3, #176	; 0xb0
 80019b6:	461a      	mov	r2, r3
 80019b8:	f00b fe9b 	bl	800d6f2 <memcpy>
	if (RecentPage_pointer < NO_FLASH_PAGES-1) RecentPage_pointer++;
 80019bc:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <StoreStatistics2FLASH+0xf8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b32      	cmp	r3, #50	; 0x32
 80019c2:	d805      	bhi.n	80019d0 <StoreStatistics2FLASH+0x3c>
 80019c4:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <StoreStatistics2FLASH+0xf8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a30      	ldr	r2, [pc, #192]	; (8001a8c <StoreStatistics2FLASH+0xf8>)
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e002      	b.n	80019d6 <StoreStatistics2FLASH+0x42>
	else RecentPage_pointer = 0;
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <StoreStatistics2FLASH+0xf8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
	StatCurrentWh.FlashPageCounter++;
 80019d6:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <StoreStatistics2FLASH+0xf4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <StoreStatistics2FLASH+0xf4>)
 80019de:	6013      	str	r3, [r2, #0]
//	return;
	flash_conf.TypeErase = FLASH_TYPEERASE_PAGES;
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
	flash_conf.NbPages = 1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
	flash_conf.Page = RecentPage_pointer + 64;
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <StoreStatistics2FLASH+0xf8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3340      	adds	r3, #64	; 0x40
 80019ee:	60fb      	str	r3, [r7, #12]
	//flash_conf.Page = (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0];
	flash_conf.Banks = FLASH_BANK_1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
#ifndef DEBUG_EN
	HAL_FLASH_Unlock();
 80019f4:	f004 fb8e 	bl	8006114 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80019f8:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <StoreStatistics2FLASH+0xfc>)
 80019fa:	22b3      	movs	r2, #179	; 0xb3
 80019fc:	611a      	str	r2, [r3, #16]
	HAL_FLASHEx_Erase(&flash_conf, &temp);// FLASH_Erase_Sector(&Stats_savedInFLASH+RecentPage_pointer, VOLTAGE_RANGE_3);
 80019fe:	f107 0214 	add.w	r2, r7, #20
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 fc76 	bl	80062f8 <HAL_FLASHEx_Erase>
	//HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][0], ((uint8_t *) &Stat_Flash)[i]);
	HAL_FLASH_Lock();
 8001a0c:	f004 fba4 	bl	8006158 <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 8001a10:	f004 fb80 	bl	8006114 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <StoreStatistics2FLASH+0xfc>)
 8001a16:	22b3      	movs	r2, #179	; 0xb3
 8001a18:	611a      	str	r2, [r3, #16]

	 while (sofar<((sizeof(Stat_Flash)/(4*2))))	//should divided by number of bytes@word wrote at once
 8001a1a:	e023      	b.n	8001a64 <StoreStatistics2FLASH+0xd0>
		   {
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&Stats_savedInFLASH[RecentPage_pointer][StartPageAddress], ((uint64_t *) &Stat_Flash)[sofar]) == HAL_OK)
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <StoreStatistics2FLASH+0xf8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	02da      	lsls	r2, r3, #11
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <StoreStatistics2FLASH+0x100>)
 8001a28:	4413      	add	r3, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <StoreStatistics2FLASH+0xf0>)
 8001a32:	4413      	add	r3, r2
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f004 faff 	bl	800603c <HAL_FLASH_Program>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d106      	bne.n	8001a52 <StoreStatistics2FLASH+0xbe>
		     {
		    	 StartPageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	3308      	adds	r3, #8
 8001a48:	61bb      	str	r3, [r7, #24]
		    	 sofar++;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	e008      	b.n	8001a64 <StoreStatistics2FLASH+0xd0>
		     }
		     else
		     {
		       /* Error occurred while writing data in Flash memory*/
		    	 osTimerStart(myTimer01Handle, 100);
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <StoreStatistics2FLASH+0xec>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2164      	movs	r1, #100	; 0x64
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f008 ff29 	bl	800a8b0 <osTimerStart>
		    	 return HAL_FLASH_GetError ();
 8001a5e:	f004 fb8b 	bl	8006178 <HAL_FLASH_GetError>
 8001a62:	e00a      	b.n	8001a7a <StoreStatistics2FLASH+0xe6>
	 while (sofar<((sizeof(Stat_Flash)/(4*2))))	//should divided by number of bytes@word wrote at once
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b15      	cmp	r3, #21
 8001a68:	d9d8      	bls.n	8001a1c <StoreStatistics2FLASH+0x88>
		     }
		   }
#endif
	HAL_FLASH_Lock();
 8001a6a:	f004 fb75 	bl	8006158 <HAL_FLASH_Lock>
	osTimerStart(myTimer01Handle, 100);
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <StoreStatistics2FLASH+0xec>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2164      	movs	r1, #100	; 0x64
 8001a74:	4618      	mov	r0, r3
 8001a76:	f008 ff1b 	bl	800a8b0 <osTimerStart>
}
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20005d9c 	.word	0x20005d9c
 8001a84:	20006214 	.word	0x20006214
 8001a88:	20005a28 	.word	0x20005a28
 8001a8c:	200061a0 	.word	0x200061a0
 8001a90:	40022000 	.word	0x40022000
 8001a94:	08020000 	.word	0x08020000

08001a98 <DeleteStatistics2FLASH>:
/*Function storing last  statistics to FLASH memory */
void DeleteStatistics2FLASH(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
	uint32_t temp, i;
	FLASH_EraseInitTypeDef flash_conf;

	osTimerStop(myTimer01Handle);
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <DeleteStatistics2FLASH+0xa4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f008 ff32 	bl	800a90c <osTimerStop>
	for(i = 0; i < sizeof(Stat_Flash); i++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e00c      	b.n	8001ac8 <DeleteStatistics2FLASH+0x30>
	{
		((uint8_t *) &StatCurrentWh)[i] = 0;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <DeleteStatistics2FLASH+0xa8>)
 8001ab2:	4413      	add	r3, r2
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
		((uint8_t *) &Stat_Flash)[i] = 0;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <DeleteStatistics2FLASH+0xac>)
 8001abc:	4413      	add	r3, r2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(Stat_Flash); i++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2baf      	cmp	r3, #175	; 0xaf
 8001acc:	d9ef      	bls.n	8001aae <DeleteStatistics2FLASH+0x16>
	}
	RecentPage_pointer = 0;
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <DeleteStatistics2FLASH+0xb0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
	flash_conf.TypeErase = FLASH_TYPEERASE_PAGES;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	603b      	str	r3, [r7, #0]
	flash_conf.NbPages = 1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
	flash_conf.Page = RecentPage_pointer + 64;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <DeleteStatistics2FLASH+0xb0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3340      	adds	r3, #64	; 0x40
 8001ae2:	60bb      	str	r3, [r7, #8]
	flash_conf.Banks = FLASH_BANK_1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
#ifndef DEBUG_EN
	HAL_FLASH_Unlock();
 8001ae8:	f004 fb14 	bl	8006114 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <DeleteStatistics2FLASH+0xb4>)
 8001aee:	22b3      	movs	r2, #179	; 0xb3
 8001af0:	611a      	str	r2, [r3, #16]
	while (RecentPage_pointer < NO_FLASH_PAGES-1)
 8001af2:	e00f      	b.n	8001b14 <DeleteStatistics2FLASH+0x7c>
	{
		HAL_FLASHEx_Erase(&flash_conf, &temp);
 8001af4:	f107 0210 	add.w	r2, r7, #16
 8001af8:	463b      	mov	r3, r7
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 fbfb 	bl	80062f8 <HAL_FLASHEx_Erase>
		RecentPage_pointer++;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <DeleteStatistics2FLASH+0xb0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <DeleteStatistics2FLASH+0xb0>)
 8001b0a:	6013      	str	r3, [r2, #0]
		flash_conf.Page = RecentPage_pointer + 64;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <DeleteStatistics2FLASH+0xb0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3340      	adds	r3, #64	; 0x40
 8001b12:	60bb      	str	r3, [r7, #8]
	while (RecentPage_pointer < NO_FLASH_PAGES-1)
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <DeleteStatistics2FLASH+0xb0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b32      	cmp	r3, #50	; 0x32
 8001b1a:	d9eb      	bls.n	8001af4 <DeleteStatistics2FLASH+0x5c>
	}

#endif
	HAL_FLASH_Lock();
 8001b1c:	f004 fb1c 	bl	8006158 <HAL_FLASH_Lock>
	RecentPage_pointer = 0;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <DeleteStatistics2FLASH+0xb0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
	osTimerStart(myTimer01Handle, 100);
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <DeleteStatistics2FLASH+0xa4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2164      	movs	r1, #100	; 0x64
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f008 febf 	bl	800a8b0 <osTimerStart>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20005d9c 	.word	0x20005d9c
 8001b40:	20005a28 	.word	0x20005a28
 8001b44:	20006214 	.word	0x20006214
 8001b48:	200061a0 	.word	0x200061a0
 8001b4c:	40022000 	.word	0x40022000

08001b50 <Calculate_WattSeconds>:
/*function launched every second to calculate Watt-seconds for given machine state on basis of flags */
void Calculate_WattSeconds(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
#ifndef TESTING_VALUES
	if (StatCountFlagsWs.Ws_BattIn)		//Watt-seconds when battery is charging
 8001b54:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d011      	beq.n	8001b80 <Calculate_WattSeconds+0x30>
	{
		StatCountFlagsWs.Ws_BattIn = 0;
 8001b5c:	4b90      	ldr	r3, [pc, #576]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
		StatCurrentWs.Ws_BattIn += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 8001b62:	4b90      	ldr	r3, [pc, #576]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b90      	ldr	r3, [pc, #576]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	498f      	ldr	r1, [pc, #572]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001b6c:	6849      	ldr	r1, [r1, #4]
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	498e      	ldr	r1, [pc, #568]	; (8001dac <Calculate_WattSeconds+0x25c>)
 8001b74:	fba1 1303 	umull	r1, r3, r1, r3
 8001b78:	0b5b      	lsrs	r3, r3, #13
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a89      	ldr	r2, [pc, #548]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001b7e:	6013      	str	r3, [r2, #0]
	}
	if (StatCountFlagsWs.Ws_BattNoInv)		//Watt-seconds when battery is charging but energy should go into mains (but cant)
 8001b80:	4b87      	ldr	r3, [pc, #540]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d011      	beq.n	8001bac <Calculate_WattSeconds+0x5c>
	{
		StatCountFlagsWs.Ws_BattNoInv = 0;
 8001b88:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	605a      	str	r2, [r3, #4]
		StatCurrentWs.Ws_BattNoInv += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 8001b8e:	4b85      	ldr	r3, [pc, #532]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4b85      	ldr	r3, [pc, #532]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	4984      	ldr	r1, [pc, #528]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001b98:	6849      	ldr	r1, [r1, #4]
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4983      	ldr	r1, [pc, #524]	; (8001dac <Calculate_WattSeconds+0x25c>)
 8001ba0:	fba1 1303 	umull	r1, r3, r1, r3
 8001ba4:	0b5b      	lsrs	r3, r3, #13
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a7e      	ldr	r2, [pc, #504]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001baa:	6053      	str	r3, [r2, #4]
		//StatCurrentWs.Time_NoInv++;	//double count
	}
	if (StatCountFlagsWs.Ws_Inverter)		//Watt-seconds for inverter
 8001bac:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d011      	beq.n	8001bd8 <Calculate_WattSeconds+0x88>
	{
		StatCountFlagsWs.Ws_Inverter = 0;
 8001bb4:	4b7a      	ldr	r3, [pc, #488]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
		StatCurrentWs.Ws_Inverter += (Adc1Measurements.PV_voltage*Adc1Measurements.Inv_current)/10000;
 8001bba:	4b7a      	ldr	r3, [pc, #488]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	4b7a      	ldr	r3, [pc, #488]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4979      	ldr	r1, [pc, #484]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001bc4:	6809      	ldr	r1, [r1, #0]
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4978      	ldr	r1, [pc, #480]	; (8001dac <Calculate_WattSeconds+0x25c>)
 8001bcc:	fba1 1303 	umull	r1, r3, r1, r3
 8001bd0:	0b5b      	lsrs	r3, r3, #13
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a73      	ldr	r2, [pc, #460]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001bd6:	6093      	str	r3, [r2, #8]
	}
	if (StatCountFlagsWs.Ws_BattOut)		//Watt-seconds when battery is discharging
 8001bd8:	4b71      	ldr	r3, [pc, #452]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d011      	beq.n	8001c04 <Calculate_WattSeconds+0xb4>
	{
		StatCountFlagsWs.Ws_BattOut = 0;
 8001be0:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
		StatCurrentWs.Ws_BattOut += (Adc1Measurements.Batt_voltage*Adc1Measurements.Inv_current)/10000;
 8001be6:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	496e      	ldr	r1, [pc, #440]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001bf0:	6809      	ldr	r1, [r1, #0]
 8001bf2:	fb01 f303 	mul.w	r3, r1, r3
 8001bf6:	496d      	ldr	r1, [pc, #436]	; (8001dac <Calculate_WattSeconds+0x25c>)
 8001bf8:	fba1 1303 	umull	r1, r3, r1, r3
 8001bfc:	0b5b      	lsrs	r3, r3, #13
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a68      	ldr	r2, [pc, #416]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c02:	60d3      	str	r3, [r2, #12]
	}
	if (StatCountFlagsWs.Ws_BattRecharge)		//Watt-seconds when battery is recharging
 8001c04:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d011      	beq.n	8001c30 <Calculate_WattSeconds+0xe0>
	{
		StatCountFlagsWs.Ws_BattRecharge = 0;
 8001c0c:	4b64      	ldr	r3, [pc, #400]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
		StatCurrentWs.Ws_BattRecharge += (Adc1Measurements.Batt_voltage*Adc1Measurements.PV_current)/10000;
 8001c12:	4b64      	ldr	r3, [pc, #400]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	4b64      	ldr	r3, [pc, #400]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	4963      	ldr	r1, [pc, #396]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001c1c:	6849      	ldr	r1, [r1, #4]
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4962      	ldr	r1, [pc, #392]	; (8001dac <Calculate_WattSeconds+0x25c>)
 8001c24:	fba1 1303 	umull	r1, r3, r1, r3
 8001c28:	0b5b      	lsrs	r3, r3, #13
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c2e:	6113      	str	r3, [r2, #16]
	}
	if (StatCountFlagsWs.Time_NightTime)		//darkness time
 8001c30:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <Calculate_WattSeconds+0xf8>
	{
		StatCountFlagsWs.Time_NightTime = 0;
 8001c38:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
		StatCurrentWs.Time_NightTime++;
 8001c3e:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a57      	ldr	r2, [pc, #348]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c46:	61d3      	str	r3, [r2, #28]
	}
	if (StatCountFlagsWs.Time_NoBattery2Chg)		//time when battery is not ready to be charged
 8001c48:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <Calculate_WattSeconds+0x110>
	{
		StatCountFlagsWs.Time_NoBattery2Chg = 0;
 8001c50:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
		StatCurrentWs.Time_NoBattery2Chg++;
 8001c56:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4a51      	ldr	r2, [pc, #324]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c5e:	6213      	str	r3, [r2, #32]
	}
	if (StatCountFlagsWs.Time_NoInv)		//time when INV is not working
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <Calculate_WattSeconds+0x128>
	{
		StatCountFlagsWs.Time_NoInv = 0;
 8001c68:	4b4d      	ldr	r3, [pc, #308]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
		StatCurrentWs.Time_NoInv++;
 8001c6e:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	3301      	adds	r3, #1
 8001c74:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c76:	6193      	str	r3, [r2, #24]
	}
	if (StatCountFlagsWs.Time_DuskTime)		//time after dusk
 8001c78:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <Calculate_WattSeconds+0x140>
	{
		StatCountFlagsWs.Time_DuskTime = 0;
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	64da      	str	r2, [r3, #76]	; 0x4c
		StatCurrentWs.Time_DuskTime++;
 8001c86:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	4a45      	ldr	r2, [pc, #276]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
	}
	if (StatCountFlagsWs.Time_Daytime)		//daytime
 8001c90:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d009      	beq.n	8001cac <Calculate_WattSeconds+0x15c>
	{
		StatCountFlagsWs.Time_Daytime=0;
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c
		StatCurrentWh.DayDuration_current++;
 8001c9e:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001ca0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a42      	ldr	r2, [pc, #264]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001ca8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	}
	if (StatCountFlagsWs.ChgAs)		//count mAs
 8001cac:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d009      	beq.n	8001cc8 <Calculate_WattSeconds+0x178>
	{
		StatCountFlagsWs.ChgAs = 0;
 8001cb4:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	651a      	str	r2, [r3, #80]	; 0x50
		StatCurrentWs.ChgAs += (Adc1Measurements.PV_current);
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cbe:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a37      	ldr	r2, [pc, #220]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001cc6:	6513      	str	r3, [r2, #80]	; 0x50
	}
	if (StatCountFlagsWs.DschgAs)		//count mAs
 8001cc8:	4b35      	ldr	r3, [pc, #212]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d009      	beq.n	8001ce4 <Calculate_WattSeconds+0x194>
	{
		StatCountFlagsWs.DschgAs = 0;
 8001cd0:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <Calculate_WattSeconds+0x250>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
		StatCurrentWs.DschgAs += (Adc1Measurements.Inv_current);
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cda:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a30      	ldr	r2, [pc, #192]	; (8001da4 <Calculate_WattSeconds+0x254>)
 8001ce2:	6553      	str	r3, [r2, #84]	; 0x54
	{
		StatCountFlagsWs.DschgAs = 0;
		StatCurrentWs.DschgAs += (Adc1Measurements.PV_current)
	}
#endif
	if (Adc1Measurements.NTC2_Inverter_mos >= StatCurrentWh.MaxTempInvMos)
 8001ce4:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d308      	bcc.n	8001d02 <Calculate_WattSeconds+0x1b2>
	{
		StatCurrentWh.MaxTempInvMos = Adc1Measurements.NTC2_Inverter_mos;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	4a2e      	ldr	r2, [pc, #184]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001cf6:	6353      	str	r3, [r2, #52]	; 0x34
		StatCurrentWh.MaxTempInvMosCntr++;
 8001cf8:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4a2c      	ldr	r2, [pc, #176]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d00:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (Adc1Measurements.NTC3_Battery_mos >= StatCurrentWh.MaxTempBatMos)
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d308      	bcc.n	8001d20 <Calculate_WattSeconds+0x1d0>
	{
		StatCurrentWh.MaxTempBatMos = Adc1Measurements.NTC3_Battery_mos;
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d14:	63d3      	str	r3, [r2, #60]	; 0x3c
		StatCurrentWh.MaxTempBatMosCntr++;
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d1e:	6413      	str	r3, [r2, #64]	; 0x40
	}
	if (Adc1Measurements.Inv_current >= StatCurrentWh.MaxInvCurrent)
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d308      	bcc.n	8001d3e <Calculate_WattSeconds+0x1ee>
	{
		StatCurrentWh.MaxInvCurrent = Adc1Measurements.Inv_current;
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d32:	6453      	str	r3, [r2, #68]	; 0x44
		StatCurrentWh.MaxInvCurrentCntr++;
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d38:	3301      	adds	r3, #1
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d3c:	6493      	str	r3, [r2, #72]	; 0x48
	}
	if (Adc1Measurements.PV_current >= StatCurrentWh.MaxPVCurrent)
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d308      	bcc.n	8001d5c <Calculate_WattSeconds+0x20c>
	{
		StatCurrentWh.MaxPVCurrent = Adc1Measurements.PV_current;
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d50:	64d3      	str	r3, [r2, #76]	; 0x4c
		StatCurrentWh.MaxPVCurrentCntr++;
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d56:	3301      	adds	r3, #1
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d5a:	6513      	str	r3, [r2, #80]	; 0x50
	}
	if (Adc1Measurements.Batt_voltage >= StatCurrentWh.MaxBatVoltage)
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d308      	bcc.n	8001d7a <Calculate_WattSeconds+0x22a>
	{
		StatCurrentWh.MaxBatVoltage = Adc1Measurements.Batt_voltage;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d6e:	6553      	str	r3, [r2, #84]	; 0x54
		StatCurrentWh.MaxBatVoltageCntr++;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	3301      	adds	r3, #1
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
	}
	if (Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2bf0      	cmp	r3, #240	; 0xf0
 8001d80:	d927      	bls.n	8001dd2 <Calculate_WattSeconds+0x282>
	{
		if (StatCurrentWh.MinBatVoltage <= BATT_CRITICAL_MIN_VOLTAGE)	//first launch value is "0", this 'if' is to cover that option
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	2bf0      	cmp	r3, #240	; 0xf0
 8001d88:	d814      	bhi.n	8001db4 <Calculate_WattSeconds+0x264>
		{
			StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <Calculate_WattSeconds+0x258>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d90:	65d3      	str	r3, [r2, #92]	; 0x5c
			StatCurrentWh.MinBatVoltageCntr++;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <Calculate_WattSeconds+0x260>)
 8001d9a:	6613      	str	r3, [r2, #96]	; 0x60
		{
			StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
			StatCurrentWh.MinBatVoltageCntr++;
		}
	}
}
 8001d9c:	e019      	b.n	8001dd2 <Calculate_WattSeconds+0x282>
 8001d9e:	bf00      	nop
 8001da0:	200059c0 	.word	0x200059c0
 8001da4:	20005c7c 	.word	0x20005c7c
 8001da8:	2000599c 	.word	0x2000599c
 8001dac:	d1b71759 	.word	0xd1b71759
 8001db0:	20005a28 	.word	0x20005a28
		else if (Adc1Measurements.Batt_voltage <= StatCurrentWh.MinBatVoltage)
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <Calculate_WattSeconds+0x28c>)
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <Calculate_WattSeconds+0x290>)
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d808      	bhi.n	8001dd2 <Calculate_WattSeconds+0x282>
			StatCurrentWh.MinBatVoltage = Adc1Measurements.Batt_voltage;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <Calculate_WattSeconds+0x28c>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <Calculate_WattSeconds+0x290>)
 8001dc6:	65d3      	str	r3, [r2, #92]	; 0x5c
			StatCurrentWh.MinBatVoltageCntr++;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <Calculate_WattSeconds+0x290>)
 8001dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dcc:	3301      	adds	r3, #1
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <Calculate_WattSeconds+0x290>)
 8001dd0:	6613      	str	r3, [r2, #96]	; 0x60
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	2000599c 	.word	0x2000599c
 8001de0:	20005a28 	.word	0x20005a28

08001de4 <Calculate_WattHours>:

/*function launched every hour to calculate Watt-hours watt-seconds hourly statistics */
void Calculate_WattHours(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	StatCurrentWh.Wh_BattIn=+StatCurrentWs.Ws_BattIn/SECONDS_HOUR;
 8001de8:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a41      	ldr	r2, [pc, #260]	; (8001ef4 <Calculate_WattHours+0x110>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0adb      	lsrs	r3, r3, #11
 8001df4:	4a40      	ldr	r2, [pc, #256]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001df6:	6053      	str	r3, [r2, #4]
	StatCurrentWh.Wh_BattNoInv+=StatCurrentWs.Ws_BattNoInv/SECONDS_HOUR;
 8001df8:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	493c      	ldr	r1, [pc, #240]	; (8001ef4 <Calculate_WattHours+0x110>)
 8001e02:	fba1 1303 	umull	r1, r3, r1, r3
 8001e06:	0adb      	lsrs	r3, r3, #11
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a3b      	ldr	r2, [pc, #236]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e0c:	6093      	str	r3, [r2, #8]
	StatCurrentWh.Time_NoInv+=StatCurrentWs.Time_NoInv;
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a37      	ldr	r2, [pc, #220]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e1a:	6193      	str	r3, [r2, #24]
	StatCurrentWh.Wh_Inverter+=StatCurrentWs.Ws_Inverter/SECONDS_HOUR;
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4933      	ldr	r1, [pc, #204]	; (8001ef4 <Calculate_WattHours+0x110>)
 8001e26:	fba1 1303 	umull	r1, r3, r1, r3
 8001e2a:	0adb      	lsrs	r3, r3, #11
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a32      	ldr	r2, [pc, #200]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e30:	60d3      	str	r3, [r2, #12]
	StatCurrentWh.Wh_BattOut+=StatCurrentWs.Ws_BattOut/SECONDS_HOUR;
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	492e      	ldr	r1, [pc, #184]	; (8001ef4 <Calculate_WattHours+0x110>)
 8001e3c:	fba1 1303 	umull	r1, r3, r1, r3
 8001e40:	0adb      	lsrs	r3, r3, #11
 8001e42:	4413      	add	r3, r2
 8001e44:	4a2c      	ldr	r2, [pc, #176]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e46:	6113      	str	r3, [r2, #16]
	StatCurrentWh.Wh_BattRecharge+=StatCurrentWs.Ws_BattRecharge/SECONDS_HOUR;
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	4928      	ldr	r1, [pc, #160]	; (8001ef4 <Calculate_WattHours+0x110>)
 8001e52:	fba1 1303 	umull	r1, r3, r1, r3
 8001e56:	0adb      	lsrs	r3, r3, #11
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a27      	ldr	r2, [pc, #156]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e5c:	6153      	str	r3, [r2, #20]
	StatCurrentWh.Chg_Ah_current+=StatCurrentWs.ChgAs/SECONDS_HOUR;
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e60:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e68:	4922      	ldr	r1, [pc, #136]	; (8001ef4 <Calculate_WattHours+0x110>)
 8001e6a:	fba1 1303 	umull	r1, r3, r1, r3
 8001e6e:	0adb      	lsrs	r3, r3, #11
 8001e70:	4413      	add	r3, r2
 8001e72:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	//StatCurrentWh.Chg_Ah_current=StatCurrentWh.Chg_Ah_current/1000;	//because current is stored in 0,001A
	StatCurrentWh.Dschg_Ah_current+=StatCurrentWs.DschgAs/SECONDS_HOUR;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e7a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	491c      	ldr	r1, [pc, #112]	; (8001ef4 <Calculate_WattHours+0x110>)
 8001e82:	fba1 1303 	umull	r1, r3, r1, r3
 8001e86:	0adb      	lsrs	r3, r3, #11
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a1b      	ldr	r2, [pc, #108]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e8c:	67d3      	str	r3, [r2, #124]	; 0x7c
	//StatCurrentWh.Dschg_Ah_current=StatCurrentWh.Dschg_Ah_current/1000;	//because current is stored in 0,001A
	StatCurrentWh.Time_NightTime+=StatCurrentWs.Time_NightTime;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e9a:	61d3      	str	r3, [r2, #28]
	StatCurrentWh.Time_NoBattery2Chg+=StatCurrentWs.Time_NoBattery2Chg;
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001e9e:	6a1a      	ldr	r2, [r3, #32]
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <Calculate_WattHours+0x114>)
 8001ea8:	6213      	str	r3, [r2, #32]
	StatCurrentWs.ChgAs=0;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	651a      	str	r2, [r3, #80]	; 0x50
	StatCurrentWs.DschgAs=0;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
	StatCurrentWs.Ws_BattIn=0;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
	StatCurrentWs.Ws_BattNoInv=0;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	605a      	str	r2, [r3, #4]
	StatCurrentWs.Time_NoInv=0;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
	StatCurrentWs.Ws_Inverter=0;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
	StatCurrentWs.Ws_BattOut=0;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
	StatCurrentWs.Ws_BattRecharge=0;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
	StatCurrentWs.Time_NightTime=0;
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	61da      	str	r2, [r3, #28]
	StatCurrentWs.Time_NoBattery2Chg=0;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <Calculate_WattHours+0x10c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	621a      	str	r2, [r3, #32]
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	20005c7c 	.word	0x20005c7c
 8001ef4:	91a2b3c5 	.word	0x91a2b3c5
 8001ef8:	20005a28 	.word	0x20005a28

08001efc <ReadConfig>:
void ReadConfig(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
#if HW_VER > 01
	ConfigReg = HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)<<0;	//LSB, config for EECO TDR-16
 8001f00:	2101      	movs	r1, #1
 8001f02:	481e      	ldr	r0, [pc, #120]	; (8001f7c <ReadConfig+0x80>)
 8001f04:	f004 fc98 	bl	8006838 <HAL_GPIO_ReadPin>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <ReadConfig+0x84>)
 8001f0e:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)<<1;
 8001f10:	2110      	movs	r1, #16
 8001f12:	481c      	ldr	r0, [pc, #112]	; (8001f84 <ReadConfig+0x88>)
 8001f14:	f004 fc90 	bl	8006838 <HAL_GPIO_ReadPin>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <ReadConfig+0x84>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <ReadConfig+0x84>)
 8001f28:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)<<2;
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <ReadConfig+0x80>)
 8001f2e:	f004 fc83 	bl	8006838 <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <ReadConfig+0x84>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <ReadConfig+0x84>)
 8001f42:	701a      	strb	r2, [r3, #0]
	ConfigReg += HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)<<3;	//MSB
 8001f44:	2120      	movs	r1, #32
 8001f46:	480f      	ldr	r0, [pc, #60]	; (8001f84 <ReadConfig+0x88>)
 8001f48:	f004 fc76 	bl	8006838 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <ReadConfig+0x84>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <ReadConfig+0x84>)
 8001f5c:	701a      	strb	r2, [r3, #0]
	ConfigReg = ~ConfigReg;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <ReadConfig+0x84>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <ReadConfig+0x84>)
 8001f68:	701a      	strb	r2, [r3, #0]
	ConfigReg = ConfigReg &0x0f;
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <ReadConfig+0x84>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b02      	ldr	r3, [pc, #8]	; (8001f80 <ReadConfig+0x84>)
 8001f76:	701a      	strb	r2, [r3, #0]
	ConfigReg = HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)<<0;	//LSB, config for EECO 330041GS
	ConfigReg += HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)<<1;
	ConfigReg += HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)<<2;
	ConfigReg += HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)<<3;	//MSB
#endif
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	20005998 	.word	0x20005998
 8001f84:	48000800 	.word	0x48000800

08001f88 <BackupPowerON>:
#if HW_VER > 01
void BackupPowerON(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
uint32_t TxSize;
	if (FlagBackupMOS) return;
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <BackupPowerON+0x50>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d11b      	bne.n	8001fce <BackupPowerON+0x46>
	FlagBackupMOS = 1;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <BackupPowerON+0x50>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(BATT_BCKP_DRV_GPIO_Port, BATT_BCKP_DRV_Pin, 1);	//turn on battery backup power: mosfet ON
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2110      	movs	r1, #16
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa4:	f004 fc60 	bl	8006868 <HAL_GPIO_WritePin>
    sprintf(TxBuffer, "BackupPwrON\r\n");
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <BackupPowerON+0x54>)
 8001faa:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <BackupPowerON+0x58>)
 8001fac:	f00c fb0c 	bl	800e5c8 <siprintf>
    TxSize = strlen(TxBuffer);
 8001fb0:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <BackupPowerON+0x58>)
 8001fb2:	f7fe f90d 	bl	80001d0 <strlen>
 8001fb6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <BackupPowerON+0x58>)
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <BackupPowerON+0x5c>)
 8001fc2:	f006 ff71 	bl	8008ea8 <HAL_UART_Transmit_DMA>
    osDelay(10);	//just to empty usart buffer
 8001fc6:	200a      	movs	r0, #10
 8001fc8:	f008 fbc5 	bl	800a756 <osDelay>
 8001fcc:	e000      	b.n	8001fd0 <BackupPowerON+0x48>
	if (FlagBackupMOS) return;
 8001fce:	bf00      	nop
}
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000248 	.word	0x20000248
 8001fdc:	08012db8 	.word	0x08012db8
 8001fe0:	20005da0 	.word	0x20005da0
 8001fe4:	20005bd0 	.word	0x20005bd0

08001fe8 <BackupPowerOFF>:
void BackupPowerOFF(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
uint32_t TxSize;
	if (!FlagBackupMOS) return;
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <BackupPowerOFF+0x50>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01b      	beq.n	800202e <BackupPowerOFF+0x46>
    FlagBackupMOS = 0;
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <BackupPowerOFF+0x50>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(BATT_BCKP_DRV_GPIO_Port, BATT_BCKP_DRV_Pin, 0);	//turn off battery backup power: mosfet ON
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2110      	movs	r1, #16
 8002000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002004:	f004 fc30 	bl	8006868 <HAL_GPIO_WritePin>
    sprintf(TxBuffer, "*** BackupPwrOFF ***\r\n");
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <BackupPowerOFF+0x54>)
 800200a:	480d      	ldr	r0, [pc, #52]	; (8002040 <BackupPowerOFF+0x58>)
 800200c:	f00c fadc 	bl	800e5c8 <siprintf>
	TxSize = strlen(TxBuffer);
 8002010:	480b      	ldr	r0, [pc, #44]	; (8002040 <BackupPowerOFF+0x58>)
 8002012:	f7fe f8dd 	bl	80001d0 <strlen>
 8002016:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <BackupPowerOFF+0x58>)
 8002020:	4808      	ldr	r0, [pc, #32]	; (8002044 <BackupPowerOFF+0x5c>)
 8002022:	f006 ff41 	bl	8008ea8 <HAL_UART_Transmit_DMA>
	osDelay(100);
 8002026:	2064      	movs	r0, #100	; 0x64
 8002028:	f008 fb95 	bl	800a756 <osDelay>
 800202c:	e000      	b.n	8002030 <BackupPowerOFF+0x48>
	if (!FlagBackupMOS) return;
 800202e:	bf00      	nop
}
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000248 	.word	0x20000248
 800203c:	08012dc8 	.word	0x08012dc8
 8002040:	20005da0 	.word	0x20005da0
 8002044:	20005bd0 	.word	0x20005bd0

08002048 <ExtOut_InvResetStart>:
#endif
//generate signal to inform other controllers: "INV reset procedure is in progress"
void ExtOut_InvResetStart(void)
{
 8002048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204a:	b099      	sub	sp, #100	; 0x64
 800204c:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM16(htim16, TIM_CHANNEL_1, 200);		//500 ->50% @ 4kHz, 50 @ 33khz, 100 @ 16khz, 200 @ 8khz
 800204e:	4e18      	ldr	r6, [pc, #96]	; (80020b0 <ExtOut_InvResetStart+0x68>)
 8002050:	23c8      	movs	r3, #200	; 0xc8
 8002052:	9310      	str	r3, [sp, #64]	; 0x40
 8002054:	2300      	movs	r3, #0
 8002056:	930f      	str	r3, [sp, #60]	; 0x3c
 8002058:	466d      	mov	r5, sp
 800205a:	f106 0410 	add.w	r4, r6, #16
 800205e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800206e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002072:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002076:	f7ff fa71 	bl	800155c <setPWM_TIM16>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800207a:	2100      	movs	r1, #0
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <ExtOut_InvResetStart+0x68>)
 800207e:	f005 feff 	bl	8007e80 <HAL_TIM_PWM_Start>
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = EXT_I_Pin;
 8002090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002094:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//prevent excessive voltage on EXT_I by pulldown
 800209a:	2302      	movs	r3, #2
 800209c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	4619      	mov	r1, r3
 80020a2:	4804      	ldr	r0, [pc, #16]	; (80020b4 <ExtOut_InvResetStart+0x6c>)
 80020a4:	f004 fa4e 	bl	8006544 <HAL_GPIO_Init>
}
 80020a8:	bf00      	nop
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b0:	200062c4 	.word	0x200062c4
 80020b4:	48000400 	.word	0x48000400

080020b8 <ExtOut_InvResetStop>:

void ExtOut_InvResetStop(void)
{
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	b099      	sub	sp, #100	; 0x64
 80020bc:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM16(htim16, TIM_CHANNEL_1, 0);		//0% @ 4kHz
 80020be:	4e19      	ldr	r6, [pc, #100]	; (8002124 <ExtOut_InvResetStop+0x6c>)
 80020c0:	2300      	movs	r3, #0
 80020c2:	9310      	str	r3, [sp, #64]	; 0x40
 80020c4:	2300      	movs	r3, #0
 80020c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80020c8:	466d      	mov	r5, sp
 80020ca:	f106 0410 	add.w	r4, r6, #16
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80020e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020e6:	f7ff fa39 	bl	800155c <setPWM_TIM16>
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80020ea:	2100      	movs	r1, #0
 80020ec:	480d      	ldr	r0, [pc, #52]	; (8002124 <ExtOut_InvResetStop+0x6c>)
 80020ee:	f005 ffa5 	bl	800803c <HAL_TIM_PWM_Stop>
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = EXT_I_Pin;
 8002100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002104:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
#if HW_VER > 01
	  GPIO_InitStruct.Pull = GPIO_NOPULL;			//disable pulldown
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//apply pulldown - in humid environment it oftyen it sets this input without real signal coming in. for testing purposes
 800210e:	2302      	movs	r3, #2
 8002110:	60fb      	str	r3, [r7, #12]
#else
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;			//prevent excessive voltage on EXT_I by pulldown
#endif
	  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	4619      	mov	r1, r3
 8002116:	4804      	ldr	r0, [pc, #16]	; (8002128 <ExtOut_InvResetStop+0x70>)
 8002118:	f004 fa14 	bl	8006544 <HAL_GPIO_Init>
}
 800211c:	bf00      	nop
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002124:	200062c4 	.word	0x200062c4
 8002128:	48000400 	.word	0x48000400

0800212c <BatteryMOS_ON>:

void BatteryMOS_ON(void)
{
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	b093      	sub	sp, #76	; 0x4c
 8002130:	af12      	add	r7, sp, #72	; 0x48

	if (Adc1Measurements.NTC3_Battery_mos>MOSFET_MAX_TEMP)
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <BatteryMOS_ON+0x74>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b50      	cmp	r3, #80	; 0x50
 8002138:	d902      	bls.n	8002140 <BatteryMOS_ON+0x14>
	{
		BatteryMOS_OFF();
 800213a:	f000 f837 	bl	80021ac <BatteryMOS_OFF>
 800213e:	e02b      	b.n	8002198 <BatteryMOS_ON+0x6c>
	}
	else
	{
		if (FlagBatteryMOS) return;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <BatteryMOS_ON+0x78>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d126      	bne.n	8002196 <BatteryMOS_ON+0x6a>
		HAL_GPIO_WritePin(BAT_SWITCH_OFF_GPIO_Port, BAT_SWITCH_OFF_Pin, 0);	//disable powerMosfet pulldown
 8002148:	2200      	movs	r2, #0
 800214a:	2140      	movs	r1, #64	; 0x40
 800214c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002150:	f004 fb8a 	bl	8006868 <HAL_GPIO_WritePin>
		setPWM_TIM2(htim2, TIM_CHANNEL_1, 254, 500);		//500->50% @ 4kHz
 8002154:	4e14      	ldr	r6, [pc, #80]	; (80021a8 <BatteryMOS_ON+0x7c>)
 8002156:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800215a:	9311      	str	r3, [sp, #68]	; 0x44
 800215c:	23fe      	movs	r3, #254	; 0xfe
 800215e:	9310      	str	r3, [sp, #64]	; 0x40
 8002160:	2300      	movs	r3, #0
 8002162:	930f      	str	r3, [sp, #60]	; 0x3c
 8002164:	466d      	mov	r5, sp
 8002166:	f106 0410 	add.w	r4, r6, #16
 800216a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002176:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800217a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800217e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002182:	f7ff f9c5 	bl	8001510 <setPWM_TIM2>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002186:	2100      	movs	r1, #0
 8002188:	4807      	ldr	r0, [pc, #28]	; (80021a8 <BatteryMOS_ON+0x7c>)
 800218a:	f005 fe79 	bl	8007e80 <HAL_TIM_PWM_Start>
		FlagBatteryMOS = 1;
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <BatteryMOS_ON+0x78>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e000      	b.n	8002198 <BatteryMOS_ON+0x6c>
		if (FlagBatteryMOS) return;
 8002196:	bf00      	nop
	}
}
 8002198:	3704      	adds	r7, #4
 800219a:	46bd      	mov	sp, r7
 800219c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000599c 	.word	0x2000599c
 80021a4:	20000240 	.word	0x20000240
 80021a8:	200061c8 	.word	0x200061c8

080021ac <BatteryMOS_OFF>:

void BatteryMOS_OFF(void)
{
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	b093      	sub	sp, #76	; 0x4c
 80021b0:	af12      	add	r7, sp, #72	; 0x48
	setPWM_TIM2(htim2, TIM_CHANNEL_1, 254, 0);
 80021b2:	4e14      	ldr	r6, [pc, #80]	; (8002204 <BatteryMOS_OFF+0x58>)
 80021b4:	2300      	movs	r3, #0
 80021b6:	9311      	str	r3, [sp, #68]	; 0x44
 80021b8:	23fe      	movs	r3, #254	; 0xfe
 80021ba:	9310      	str	r3, [sp, #64]	; 0x40
 80021bc:	2300      	movs	r3, #0
 80021be:	930f      	str	r3, [sp, #60]	; 0x3c
 80021c0:	466d      	mov	r5, sp
 80021c2:	f106 0410 	add.w	r4, r6, #16
 80021c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80021d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80021da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021de:	f7ff f997 	bl	8001510 <setPWM_TIM2>
	HAL_GPIO_WritePin(BAT_SWITCH_OFF_GPIO_Port, BAT_SWITCH_OFF_Pin, 1);	//enable powerMosfet pulldown
 80021e2:	2201      	movs	r2, #1
 80021e4:	2140      	movs	r1, #64	; 0x40
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ea:	f004 fb3d 	bl	8006868 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80021ee:	2100      	movs	r1, #0
 80021f0:	4804      	ldr	r0, [pc, #16]	; (8002204 <BatteryMOS_OFF+0x58>)
 80021f2:	f005 ff23 	bl	800803c <HAL_TIM_PWM_Stop>
	FlagBatteryMOS = 0;
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <BatteryMOS_OFF+0x5c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	bf00      	nop
 80021fe:	3704      	adds	r7, #4
 8002200:	46bd      	mov	sp, r7
 8002202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002204:	200061c8 	.word	0x200061c8
 8002208:	20000240 	.word	0x20000240

0800220c <InverterMOS_ON>:

void InverterMOS_ON(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <InverterMOS_ON+0x28>)
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	2b50      	cmp	r3, #80	; 0x50
 8002216:	d902      	bls.n	800221e <InverterMOS_ON+0x12>
	{
		InverterMOS_OFF();
 8002218:	f000 f810 	bl	800223c <InverterMOS_OFF>
	else
	{
		HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 0);	//disable powerMosfet pulldown
		FlagInverterMOS = 1;
	}
}
 800221c:	e008      	b.n	8002230 <InverterMOS_ON+0x24>
		HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 0);	//disable powerMosfet pulldown
 800221e:	2200      	movs	r2, #0
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002226:	f004 fb1f 	bl	8006868 <HAL_GPIO_WritePin>
		FlagInverterMOS = 1;
 800222a:	4b03      	ldr	r3, [pc, #12]	; (8002238 <InverterMOS_ON+0x2c>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000599c 	.word	0x2000599c
 8002238:	20000244 	.word	0x20000244

0800223c <InverterMOS_OFF>:

void InverterMOS_OFF(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INV_SWITCH_DRV_GPIO_Port, INV_SWITCH_DRV_Pin, 1);	//enable powerMosfet pulldown
 8002240:	2201      	movs	r2, #1
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002248:	f004 fb0e 	bl	8006868 <HAL_GPIO_WritePin>
	FlagInverterMOS = 0;
 800224c:	4b02      	ldr	r3, [pc, #8]	; (8002258 <InverterMOS_OFF+0x1c>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000244 	.word	0x20000244
 800225c:	00000000 	.word	0x00000000

08002260 <ConvertNTCvalue>:

uint32_t ConvertNTCvalue(uint32_t RawReading)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
double i, y;
uint32_t t;
	      i = (double) RawReading;	//
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7fe f94b 	bl	8000504 <__aeabi_ui2d>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	e9c7 2306 	strd	r2, r3, [r7, #24]
	      //y = -3*pow(10,-15)*pow(i,5) + 3*pow(10,-11)*pow(i,4)-pow(10,-7)*pow(i,3)+0.0002*pow(i,2)-0.2204*i+138.71;
	      y = -7*pow(10,-9)*pow(i,3) + 5*pow(10,-5)*pow(i,2)-0.1154*i+123.68;
 8002276:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8002318 <ConvertNTCvalue+0xb8>
 800227a:	ed97 0b06 	vldr	d0, [r7, #24]
 800227e:	f00f fdd7 	bl	8011e30 <pow>
 8002282:	ec51 0b10 	vmov	r0, r1, d0
 8002286:	a328      	add	r3, pc, #160	; (adr r3, 8002328 <ConvertNTCvalue+0xc8>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fe f9b4 	bl	80005f8 <__aeabi_dmul>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4614      	mov	r4, r2
 8002296:	461d      	mov	r5, r3
 8002298:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002320 <ConvertNTCvalue+0xc0>
 800229c:	ed97 0b06 	vldr	d0, [r7, #24]
 80022a0:	f00f fdc6 	bl	8011e30 <pow>
 80022a4:	ec51 0b10 	vmov	r0, r1, d0
 80022a8:	a321      	add	r3, pc, #132	; (adr r3, 8002330 <ConvertNTCvalue+0xd0>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f7fe f9a3 	bl	80005f8 <__aeabi_dmul>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4620      	mov	r0, r4
 80022b8:	4629      	mov	r1, r5
 80022ba:	f7fd ffe7 	bl	800028c <__adddf3>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4614      	mov	r4, r2
 80022c4:	461d      	mov	r5, r3
 80022c6:	a31c      	add	r3, pc, #112	; (adr r3, 8002338 <ConvertNTCvalue+0xd8>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022d0:	f7fe f992 	bl	80005f8 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4620      	mov	r0, r4
 80022da:	4629      	mov	r1, r5
 80022dc:	f7fd ffd4 	bl	8000288 <__aeabi_dsub>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	a315      	add	r3, pc, #84	; (adr r3, 8002340 <ConvertNTCvalue+0xe0>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fd ffcd 	bl	800028c <__adddf3>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	      t = (uint32_t) y;
 80022fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022fe:	f7fe fc53 	bl	8000ba8 <__aeabi_d2uiz>
 8002302:	4603      	mov	r3, r0
 8002304:	60fb      	str	r3, [r7, #12]
	      t = (t - 13);				// some offset removal
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3b0d      	subs	r3, #13
 800230a:	60fb      	str	r3, [r7, #12]
	      return t;	//result in *C
 800230c:	68fb      	ldr	r3, [r7, #12]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bdb0      	pop	{r4, r5, r7, pc}
 8002316:	bf00      	nop
 8002318:	00000000 	.word	0x00000000
 800231c:	40080000 	.word	0x40080000
 8002320:	00000000 	.word	0x00000000
 8002324:	40000000 	.word	0x40000000
 8002328:	d643f785 	.word	0xd643f785
 800232c:	be3e1094 	.word	0xbe3e1094
 8002330:	eb1c432d 	.word	0xeb1c432d
 8002334:	3f0a36e2 	.word	0x3f0a36e2
 8002338:	b9f559b4 	.word	0xb9f559b4
 800233c:	3fbd8ada 	.word	0x3fbd8ada
 8002340:	1eb851ec 	.word	0x1eb851ec
 8002344:	405eeb85 	.word	0x405eeb85

08002348 <ConvertVValue>:

uint32_t ConvertVValue(uint32_t RawReading)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
    double i;
    i = (((float)RawReading))*100/4095;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80023f8 <ConvertVValue+0xb0>
 800235e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002362:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80023fc <ConvertVValue+0xb4>
 8002366:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800236a:	ee16 0a90 	vmov	r0, s13
 800236e:	f7fe f8eb 	bl	8000548 <__aeabi_f2d>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i*(float)3.29;					//ref voltage value
 800237a:	a319      	add	r3, pc, #100	; (adr r3, 80023e0 <ConvertVValue+0x98>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002384:	f7fe f938 	bl	80005f8 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i*(float)(470+16)/(float)16; //resistor divider R1+R2/R1
 8002390:	a315      	add	r3, pc, #84	; (adr r3, 80023e8 <ConvertVValue+0xa0>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800239a:	f7fe f92d 	bl	80005f8 <__aeabi_dmul>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <ConvertVValue+0xb8>)
 80023ac:	f7fe fa4e 	bl	800084c <__aeabi_ddiv>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    //i *= (10.5/10.0)/10;					//coefficient due to tolerances, //without adc internal calibration
    i *= (10.0/10.0)/10;					//coefficient due to tolerances, //witht adc internal calibration
 80023b8:	a30d      	add	r3, pc, #52	; (adr r3, 80023f0 <ConvertVValue+0xa8>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023c2:	f7fe f919 	bl	80005f8 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (uint32_t) i;			//result in 100mV
 80023ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023d2:	f7fe fbe9 	bl	8000ba8 <__aeabi_d2uiz>
 80023d6:	4603      	mov	r3, r0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	80000000 	.word	0x80000000
 80023e4:	400a51eb 	.word	0x400a51eb
 80023e8:	00000000 	.word	0x00000000
 80023ec:	407e6000 	.word	0x407e6000
 80023f0:	9999999a 	.word	0x9999999a
 80023f4:	3fb99999 	.word	0x3fb99999
 80023f8:	42c80000 	.word	0x42c80000
 80023fc:	457ff000 	.word	0x457ff000
 8002400:	40300000 	.word	0x40300000
 8002404:	00000000 	.word	0x00000000

08002408 <ConvertIValue>:

uint32_t ConvertIValue(uint32_t RawReading)
{	//xls equation from 120 gain and 2mR shunt: y = 0,2954x - 36,931 -> x=10000/2954*y + 36.931
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
//without adc internal calibration
    //from test, 2,6A over ADC reading
//    i = ((2650/654)*(float)RawReading);
//    i = i + 50.1;
//with ADC internal calibration
    i = (double)(3824)*(double)RawReading;
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7fe f877 	bl	8000504 <__aeabi_ui2d>
 8002416:	a31e      	add	r3, pc, #120	; (adr r3, 8002490 <ConvertIValue+0x88>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fe f8ec 	bl	80005f8 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i/1000;
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <ConvertIValue+0x80>)
 800242e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002432:	f7fe fa0b 	bl	800084c <__aeabi_ddiv>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    i = i + 25;
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <ConvertIValue+0x84>)
 8002444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002448:	f7fd ff20 	bl	800028c <__adddf3>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	e9c7 2302 	strd	r2, r3, [r7, #8]
#else
    //from XLS trendline
    i = ((10000/2510)*(float)RawReading);
    i = i + 38.1;
#endif
    if (i<0) i=0;
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002460:	f7fe fb3c 	bl	8000adc <__aeabi_dcmplt>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <ConvertIValue+0x6e>
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (uint32_t) i;	//result in 100mA
 8002476:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800247a:	f7fe fb95 	bl	8000ba8 <__aeabi_d2uiz>
 800247e:	4603      	mov	r3, r0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	408f4000 	.word	0x408f4000
 800248c:	40390000 	.word	0x40390000
 8002490:	00000000 	.word	0x00000000
 8002494:	40ade000 	.word	0x40ade000

08002498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800249e:	f002 f80e 	bl	80044be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024a2:	f000 f843 	bl	800252c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024a6:	f000 fa9b 	bl	80029e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80024aa:	f000 fa5f 	bl	800296c <MX_DMA_Init>
  MX_ADC1_Init();
 80024ae:	f000 f881 	bl	80025b4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80024b2:	f000 fa2b 	bl	800290c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80024b6:	f000 f957 	bl	8002768 <MX_TIM2_Init>
  MX_TIM16_Init();
 80024ba:	f000 f9af 	bl	800281c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
#if HW_VER > 01
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = EXT_I_Pin;
 80024cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXT_I_GPIO_Port, &GPIO_InitStruct);
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	480c      	ldr	r0, [pc, #48]	; (8002510 <main+0x78>)
 80024e0:	f004 f830 	bl	8006544 <HAL_GPIO_Init>
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80024e4:	f008 f85a 	bl	800a59c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <main+0x7c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	2101      	movs	r1, #1
 80024ee:	480a      	ldr	r0, [pc, #40]	; (8002518 <main+0x80>)
 80024f0:	f008 f962 	bl	800a7b8 <osTimerNew>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <main+0x84>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <main+0x88>)
 80024fc:	2100      	movs	r1, #0
 80024fe:	4809      	ldr	r0, [pc, #36]	; (8002524 <main+0x8c>)
 8002500:	f008 f896 	bl	800a630 <osThreadNew>
 8002504:	4603      	mov	r3, r0
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <main+0x90>)
 8002508:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800250a:	f008 f86b 	bl	800a5e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800250e:	e7fe      	b.n	800250e <main+0x76>
 8002510:	48000400 	.word	0x48000400
 8002514:	0801383c 	.word	0x0801383c
 8002518:	08003b01 	.word	0x08003b01
 800251c:	20005d9c 	.word	0x20005d9c
 8002520:	08013818 	.word	0x08013818
 8002524:	08003515 	.word	0x08003515
 8002528:	20005994 	.word	0x20005994

0800252c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b096      	sub	sp, #88	; 0x58
 8002530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	2244      	movs	r2, #68	; 0x44
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f00b f8e7 	bl	800d70e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002540:	463b      	mov	r3, r7
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800254e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002552:	f004 f9c9 	bl	80068e8 <HAL_PWREx_ControlVoltageScaling>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800255c:	f001 fbd2 	bl	8003d04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002560:	2301      	movs	r3, #1
 8002562:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800256a:	2300      	movs	r3, #0
 800256c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4618      	mov	r0, r3
 8002574:	f004 fa0e 	bl	8006994 <HAL_RCC_OscConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800257e:	f001 fbc1 	bl	8003d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002582:	230f      	movs	r3, #15
 8002584:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002586:	2302      	movs	r3, #2
 8002588:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002596:	463b      	mov	r3, r7
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f004 fe0c 	bl	80071b8 <HAL_RCC_ClockConfig>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80025a6:	f001 fbad 	bl	8003d04 <Error_Handler>
  }
}
 80025aa:	bf00      	nop
 80025ac:	3758      	adds	r7, #88	; 0x58
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025ba:	463b      	mov	r3, r7
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
 80025c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <MX_ADC1_Init+0x18c>)
 80025cc:	4a5d      	ldr	r2, [pc, #372]	; (8002744 <MX_ADC1_Init+0x190>)
 80025ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80025d0:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <MX_ADC1_Init+0x18c>)
 80025d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <MX_ADC1_Init+0x18c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025de:	4b58      	ldr	r3, [pc, #352]	; (8002740 <MX_ADC1_Init+0x18c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <MX_ADC1_Init+0x18c>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025ea:	4b55      	ldr	r3, [pc, #340]	; (8002740 <MX_ADC1_Init+0x18c>)
 80025ec:	2204      	movs	r2, #4
 80025ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <MX_ADC1_Init+0x18c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025f6:	4b52      	ldr	r3, [pc, #328]	; (8002740 <MX_ADC1_Init+0x18c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <MX_ADC1_Init+0x18c>)
 80025fe:	2208      	movs	r2, #8
 8002600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002602:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <MX_ADC1_Init+0x18c>)
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800260a:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <MX_ADC1_Init+0x18c>)
 800260c:	2200      	movs	r2, #0
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002610:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <MX_ADC1_Init+0x18c>)
 8002612:	2200      	movs	r2, #0
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002616:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <MX_ADC1_Init+0x18c>)
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <MX_ADC1_Init+0x18c>)
 8002620:	2200      	movs	r2, #0
 8002622:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002624:	4b46      	ldr	r3, [pc, #280]	; (8002740 <MX_ADC1_Init+0x18c>)
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800262c:	4844      	ldr	r0, [pc, #272]	; (8002740 <MX_ADC1_Init+0x18c>)
 800262e:	f002 f96d 	bl	800490c <HAL_ADC_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002638:	f001 fb64 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800263c:	4b42      	ldr	r3, [pc, #264]	; (8002748 <MX_ADC1_Init+0x194>)
 800263e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002640:	2306      	movs	r3, #6
 8002642:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8002644:	2301      	movs	r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002648:	237f      	movs	r3, #127	; 0x7f
 800264a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800264c:	2304      	movs	r3, #4
 800264e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002654:	463b      	mov	r3, r7
 8002656:	4619      	mov	r1, r3
 8002658:	4839      	ldr	r0, [pc, #228]	; (8002740 <MX_ADC1_Init+0x18c>)
 800265a:	f002 fba5 	bl	8004da8 <HAL_ADC_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002664:	f001 fb4e 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002668:	4b38      	ldr	r3, [pc, #224]	; (800274c <MX_ADC1_Init+0x198>)
 800266a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800266c:	230c      	movs	r3, #12
 800266e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002670:	463b      	mov	r3, r7
 8002672:	4619      	mov	r1, r3
 8002674:	4832      	ldr	r0, [pc, #200]	; (8002740 <MX_ADC1_Init+0x18c>)
 8002676:	f002 fb97 	bl	8004da8 <HAL_ADC_ConfigChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8002680:	f001 fb40 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002684:	4b32      	ldr	r3, [pc, #200]	; (8002750 <MX_ADC1_Init+0x19c>)
 8002686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002688:	2312      	movs	r3, #18
 800268a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002690:	463b      	mov	r3, r7
 8002692:	4619      	mov	r1, r3
 8002694:	482a      	ldr	r0, [pc, #168]	; (8002740 <MX_ADC1_Init+0x18c>)
 8002696:	f002 fb87 	bl	8004da8 <HAL_ADC_ConfigChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80026a0:	f001 fb30 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <MX_ADC1_Init+0x1a0>)
 80026a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80026a8:	2318      	movs	r3, #24
 80026aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ac:	463b      	mov	r3, r7
 80026ae:	4619      	mov	r1, r3
 80026b0:	4823      	ldr	r0, [pc, #140]	; (8002740 <MX_ADC1_Init+0x18c>)
 80026b2:	f002 fb79 	bl	8004da8 <HAL_ADC_ConfigChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80026bc:	f001 fb22 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80026c0:	4b25      	ldr	r3, [pc, #148]	; (8002758 <MX_ADC1_Init+0x1a4>)
 80026c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80026c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ca:	463b      	mov	r3, r7
 80026cc:	4619      	mov	r1, r3
 80026ce:	481c      	ldr	r0, [pc, #112]	; (8002740 <MX_ADC1_Init+0x18c>)
 80026d0:	f002 fb6a 	bl	8004da8 <HAL_ADC_ConfigChannel>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 80026da:	f001 fb13 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80026de:	4b1f      	ldr	r3, [pc, #124]	; (800275c <MX_ADC1_Init+0x1a8>)
 80026e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80026e2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80026e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e8:	463b      	mov	r3, r7
 80026ea:	4619      	mov	r1, r3
 80026ec:	4814      	ldr	r0, [pc, #80]	; (8002740 <MX_ADC1_Init+0x18c>)
 80026ee:	f002 fb5b 	bl	8004da8 <HAL_ADC_ConfigChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 80026f8:	f001 fb04 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80026fc:	4b18      	ldr	r3, [pc, #96]	; (8002760 <MX_ADC1_Init+0x1ac>)
 80026fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002700:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8002704:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002706:	463b      	mov	r3, r7
 8002708:	4619      	mov	r1, r3
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <MX_ADC1_Init+0x18c>)
 800270c:	f002 fb4c 	bl	8004da8 <HAL_ADC_ConfigChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8002716:	f001 faf5 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <MX_ADC1_Init+0x1b0>)
 800271c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800271e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8002722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002724:	463b      	mov	r3, r7
 8002726:	4619      	mov	r1, r3
 8002728:	4805      	ldr	r0, [pc, #20]	; (8002740 <MX_ADC1_Init+0x18c>)
 800272a:	f002 fb3d 	bl	8004da8 <HAL_ADC_ConfigChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_ADC1_Init+0x184>
  {
    Error_Handler();
 8002734:	f001 fae6 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002738:	bf00      	nop
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20005b24 	.word	0x20005b24
 8002744:	50040000 	.word	0x50040000
 8002748:	04300002 	.word	0x04300002
 800274c:	08600004 	.word	0x08600004
 8002750:	0c900008 	.word	0x0c900008
 8002754:	10c00010 	.word	0x10c00010
 8002758:	14f00020 	.word	0x14f00020
 800275c:	19200040 	.word	0x19200040
 8002760:	1d500080 	.word	0x1d500080
 8002764:	80000001 	.word	0x80000001

08002768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276e:	f107 031c 	add.w	r3, r7, #28
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800277a:	463b      	mov	r3, r7
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	615a      	str	r2, [r3, #20]
 800278a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800278c:	4b22      	ldr	r3, [pc, #136]	; (8002818 <MX_TIM2_Init+0xb0>)
 800278e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8002794:	4b20      	ldr	r3, [pc, #128]	; (8002818 <MX_TIM2_Init+0xb0>)
 8002796:	2201      	movs	r2, #1
 8002798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <MX_TIM2_Init+0xb0>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_TIM2_Init+0xb0>)
 80027a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <MX_TIM2_Init+0xb0>)
 80027aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <MX_TIM2_Init+0xb0>)
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027b6:	4818      	ldr	r0, [pc, #96]	; (8002818 <MX_TIM2_Init+0xb0>)
 80027b8:	f005 fb0a 	bl	8007dd0 <HAL_TIM_PWM_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80027c2:	f001 fa9f 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	4810      	ldr	r0, [pc, #64]	; (8002818 <MX_TIM2_Init+0xb0>)
 80027d6:	f006 fa1d 	bl	8008c14 <HAL_TIMEx_MasterConfigSynchronization>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80027e0:	f001 fa90 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e4:	2360      	movs	r3, #96	; 0x60
 80027e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027f4:	463b      	mov	r3, r7
 80027f6:	2200      	movs	r2, #0
 80027f8:	4619      	mov	r1, r3
 80027fa:	4807      	ldr	r0, [pc, #28]	; (8002818 <MX_TIM2_Init+0xb0>)
 80027fc:	f005 fdc6 	bl	800838c <HAL_TIM_PWM_ConfigChannel>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002806:	f001 fa7d 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800280a:	4803      	ldr	r0, [pc, #12]	; (8002818 <MX_TIM2_Init+0xb0>)
 800280c:	f001 fb84 	bl	8003f18 <HAL_TIM_MspPostInit>

}
 8002810:	bf00      	nop
 8002812:	3728      	adds	r7, #40	; 0x28
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200061c8 	.word	0x200061c8

0800281c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b092      	sub	sp, #72	; 0x48
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
 8002830:	611a      	str	r2, [r3, #16]
 8002832:	615a      	str	r2, [r3, #20]
 8002834:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002836:	463b      	mov	r3, r7
 8002838:	222c      	movs	r2, #44	; 0x2c
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f00a ff66 	bl	800d70e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002842:	4b30      	ldr	r3, [pc, #192]	; (8002904 <MX_TIM16_Init+0xe8>)
 8002844:	4a30      	ldr	r2, [pc, #192]	; (8002908 <MX_TIM16_Init+0xec>)
 8002846:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <MX_TIM16_Init+0xe8>)
 800284a:	2201      	movs	r2, #1
 800284c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284e:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <MX_TIM16_Init+0xe8>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 500;
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <MX_TIM16_Init+0xe8>)
 8002856:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800285a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285c:	4b29      	ldr	r3, [pc, #164]	; (8002904 <MX_TIM16_Init+0xe8>)
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <MX_TIM16_Init+0xe8>)
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002868:	4b26      	ldr	r3, [pc, #152]	; (8002904 <MX_TIM16_Init+0xe8>)
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800286e:	4825      	ldr	r0, [pc, #148]	; (8002904 <MX_TIM16_Init+0xe8>)
 8002870:	f005 fa02 	bl	8007c78 <HAL_TIM_Base_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800287a:	f001 fa43 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800287e:	4821      	ldr	r0, [pc, #132]	; (8002904 <MX_TIM16_Init+0xe8>)
 8002880:	f005 faa6 	bl	8007dd0 <HAL_TIM_PWM_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800288a:	f001 fa3b 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800288e:	2360      	movs	r3, #96	; 0x60
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 254;
 8002892:	23fe      	movs	r3, #254	; 0xfe
 8002894:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002896:	2300      	movs	r3, #0
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800289a:	2300      	movs	r3, #0
 800289c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ae:	2200      	movs	r2, #0
 80028b0:	4619      	mov	r1, r3
 80028b2:	4814      	ldr	r0, [pc, #80]	; (8002904 <MX_TIM16_Init+0xe8>)
 80028b4:	f005 fd6a 	bl	800838c <HAL_TIM_PWM_ConfigChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80028be:	f001 fa21 	bl	8003d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80028e0:	463b      	mov	r3, r7
 80028e2:	4619      	mov	r1, r3
 80028e4:	4807      	ldr	r0, [pc, #28]	; (8002904 <MX_TIM16_Init+0xe8>)
 80028e6:	f006 f9fb 	bl	8008ce0 <HAL_TIMEx_ConfigBreakDeadTime>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80028f0:	f001 fa08 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80028f4:	4803      	ldr	r0, [pc, #12]	; (8002904 <MX_TIM16_Init+0xe8>)
 80028f6:	f001 fb0f 	bl	8003f18 <HAL_TIM_MspPostInit>

}
 80028fa:	bf00      	nop
 80028fc:	3748      	adds	r7, #72	; 0x48
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200062c4 	.word	0x200062c4
 8002908:	40014400 	.word	0x40014400

0800290c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <MX_USART1_UART_Init+0x58>)
 8002912:	4a15      	ldr	r2, [pc, #84]	; (8002968 <MX_USART1_UART_Init+0x5c>)
 8002914:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <MX_USART1_UART_Init+0x58>)
 8002918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800291c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <MX_USART1_UART_Init+0x58>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <MX_USART1_UART_Init+0x58>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <MX_USART1_UART_Init+0x58>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <MX_USART1_UART_Init+0x58>)
 8002932:	220c      	movs	r2, #12
 8002934:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <MX_USART1_UART_Init+0x58>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800293c:	4b09      	ldr	r3, [pc, #36]	; (8002964 <MX_USART1_UART_Init+0x58>)
 800293e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002942:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <MX_USART1_UART_Init+0x58>)
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <MX_USART1_UART_Init+0x58>)
 800294c:	2200      	movs	r2, #0
 800294e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002950:	4804      	ldr	r0, [pc, #16]	; (8002964 <MX_USART1_UART_Init+0x58>)
 8002952:	f006 fa5b 	bl	8008e0c <HAL_UART_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800295c:	f001 f9d2 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20005bd0 	.word	0x20005bd0
 8002968:	40013800 	.word	0x40013800

0800296c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <MX_DMA_Init+0x70>)
 8002974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002976:	4a19      	ldr	r2, [pc, #100]	; (80029dc <MX_DMA_Init+0x70>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6493      	str	r3, [r2, #72]	; 0x48
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <MX_DMA_Init+0x70>)
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <MX_DMA_Init+0x70>)
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298e:	4a13      	ldr	r2, [pc, #76]	; (80029dc <MX_DMA_Init+0x70>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6493      	str	r3, [r2, #72]	; 0x48
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MX_DMA_Init+0x70>)
 8002998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2105      	movs	r1, #5
 80029a6:	200b      	movs	r0, #11
 80029a8:	f003 f89c 	bl	8005ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80029ac:	200b      	movs	r0, #11
 80029ae:	f003 f8b5 	bl	8005b1c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2105      	movs	r1, #5
 80029b6:	2044      	movs	r0, #68	; 0x44
 80029b8:	f003 f894 	bl	8005ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80029bc:	2044      	movs	r0, #68	; 0x44
 80029be:	f003 f8ad 	bl	8005b1c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2105      	movs	r1, #5
 80029c6:	2045      	movs	r0, #69	; 0x45
 80029c8:	f003 f88c 	bl	8005ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80029cc:	2045      	movs	r0, #69	; 0x45
 80029ce:	f003 f8a5 	bl	8005b1c <HAL_NVIC_EnableIRQ>

}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000

080029e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029f6:	4b42      	ldr	r3, [pc, #264]	; (8002b00 <MX_GPIO_Init+0x120>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	4a41      	ldr	r2, [pc, #260]	; (8002b00 <MX_GPIO_Init+0x120>)
 80029fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a02:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <MX_GPIO_Init+0x120>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0e:	4b3c      	ldr	r3, [pc, #240]	; (8002b00 <MX_GPIO_Init+0x120>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	4a3b      	ldr	r2, [pc, #236]	; (8002b00 <MX_GPIO_Init+0x120>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1a:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <MX_GPIO_Init+0x120>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <MX_GPIO_Init+0x120>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2a:	4a35      	ldr	r2, [pc, #212]	; (8002b00 <MX_GPIO_Init+0x120>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a32:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <MX_GPIO_Init+0x120>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <MX_GPIO_Init+0x120>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	4a2f      	ldr	r2, [pc, #188]	; (8002b00 <MX_GPIO_Init+0x120>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <MX_GPIO_Init+0x120>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BATT_BCKP_DRV_Pin|BAT_SWITCH_OFF_Pin|INV_SWITCH_DRV_Pin|MEAS_PWR_Pin, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a60:	f003 ff02 	bl	8006868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002a6a:	4826      	ldr	r0, [pc, #152]	; (8002b04 <MX_GPIO_Init+0x124>)
 8002a6c:	f003 fefc 	bl	8006868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BATT_BCKP_DRV_Pin BAT_SWITCH_OFF_Pin INV_SWITCH_DRV_Pin MEAS_PWR_Pin */
  GPIO_InitStruct.Pin = BATT_BCKP_DRV_Pin|BAT_SWITCH_OFF_Pin|INV_SWITCH_DRV_Pin|MEAS_PWR_Pin;
 8002a70:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8002a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a76:	2301      	movs	r3, #1
 8002a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	4619      	mov	r1, r3
 8002a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a8c:	f003 fd5a 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C1_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C1_Pin;
 8002a90:	2330      	movs	r3, #48	; 0x30
 8002a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4819      	ldr	r0, [pc, #100]	; (8002b08 <MX_GPIO_Init+0x128>)
 8002aa4:	f003 fd4e 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C2_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C2_Pin;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4812      	ldr	r0, [pc, #72]	; (8002b04 <MX_GPIO_Init+0x124>)
 8002abc:	f003 fd42 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pins : CD_Pin EXT_I_Pin */
  GPIO_InitStruct.Pin = CD_Pin|EXT_I_Pin;
 8002ac0:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480b      	ldr	r0, [pc, #44]	; (8002b04 <MX_GPIO_Init+0x124>)
 8002ad6:	f003 fd35 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8002ada:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	4619      	mov	r1, r3
 8002af2:	4804      	ldr	r0, [pc, #16]	; (8002b04 <MX_GPIO_Init+0x124>)
 8002af4:	f003 fd26 	bl	8006544 <HAL_GPIO_Init>

}
 8002af8:	bf00      	nop
 8002afa:	3728      	adds	r7, #40	; 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	48000400 	.word	0x48000400
 8002b08:	48000800 	.word	0x48000800

08002b0c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	// idle detection needs at least one UART clock to detect the bus is idle. So
	// in the case, that the transmission length is one full buffer length
	// and the start buffer pointer is at 0, it will be also 0 at the end of the
	// transmission. In this case the DMA rollover will increment the RxRollover
	// variable first and len will not be zero.
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {									// Check if it is an "Idle Interrupt"
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b10      	cmp	r3, #16
 8002b20:	f040 8186 	bne.w	8002e30 <HAL_UART_RxCpltCallback+0x324>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);												// clear the interrupt
 8002b24:	4b93      	ldr	r3, [pc, #588]	; (8002d74 <HAL_UART_RxCpltCallback+0x268>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2210      	movs	r2, #16
 8002b2a:	621a      	str	r2, [r3, #32]
		RxCounter++;																	// increment the Rx Counter
 8002b2c:	4b92      	ldr	r3, [pc, #584]	; (8002d78 <HAL_UART_RxCpltCallback+0x26c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	3301      	adds	r3, #1
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	4b90      	ldr	r3, [pc, #576]	; (8002d78 <HAL_UART_RxCpltCallback+0x26c>)
 8002b36:	701a      	strb	r2, [r3, #0]
		uint8_t TxSize = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	76fb      	strb	r3, [r7, #27]
		uint16_t start = RxBfrPos;														// Rx bytes start position (=last buffer position)
 8002b3c:	4b8f      	ldr	r3, [pc, #572]	; (8002d7c <HAL_UART_RxCpltCallback+0x270>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	833b      	strh	r3, [r7, #24]
		RxBfrPos = RX_BFR_SIZE - (uint16_t)huart->hdmarx->Instance->CNDTR;				// determine actual buffer position
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	4b8a      	ldr	r3, [pc, #552]	; (8002d7c <HAL_UART_RxCpltCallback+0x270>)
 8002b54:	801a      	strh	r2, [r3, #0]
		uint16_t len = RX_BFR_SIZE;														// init len with max. size
 8002b56:	237f      	movs	r3, #127	; 0x7f
 8002b58:	84fb      	strh	r3, [r7, #38]	; 0x26

		if(RxRollover < 2)  {
 8002b5a:	4b89      	ldr	r3, [pc, #548]	; (8002d80 <HAL_UART_RxCpltCallback+0x274>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d819      	bhi.n	8002b96 <HAL_UART_RxCpltCallback+0x8a>
			if(RxRollover) {															// rolled over once
 8002b62:	4b87      	ldr	r3, [pc, #540]	; (8002d80 <HAL_UART_RxCpltCallback+0x274>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00f      	beq.n	8002b8a <HAL_UART_RxCpltCallback+0x7e>
				if(RxBfrPos <= start) len = RxBfrPos + RX_BFR_SIZE - start;				// no bytes overwritten
 8002b6a:	4b84      	ldr	r3, [pc, #528]	; (8002d7c <HAL_UART_RxCpltCallback+0x270>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	8b3a      	ldrh	r2, [r7, #24]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d307      	bcc.n	8002b84 <HAL_UART_RxCpltCallback+0x78>
 8002b74:	4b81      	ldr	r3, [pc, #516]	; (8002d7c <HAL_UART_RxCpltCallback+0x270>)
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	8b3b      	ldrh	r3, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	337f      	adds	r3, #127	; 0x7f
 8002b80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b82:	e00a      	b.n	8002b9a <HAL_UART_RxCpltCallback+0x8e>
				else len = RX_BFR_SIZE + 1;												// bytes overwritten error
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b88:	e007      	b.n	8002b9a <HAL_UART_RxCpltCallback+0x8e>
			} else {
				len = RxBfrPos - start;													// no bytes overwritten
 8002b8a:	4b7c      	ldr	r3, [pc, #496]	; (8002d7c <HAL_UART_RxCpltCallback+0x270>)
 8002b8c:	881a      	ldrh	r2, [r3, #0]
 8002b8e:	8b3b      	ldrh	r3, [r7, #24]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b94:	e001      	b.n	8002b9a <HAL_UART_RxCpltCallback+0x8e>
			}
		} else {
			len = RX_BFR_SIZE + 2;														// dual rollover error
 8002b96:	2381      	movs	r3, #129	; 0x81
 8002b98:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if(len && (len <= RX_BFR_SIZE)) {
 8002b9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8125 	beq.w	8002dec <HAL_UART_RxCpltCallback+0x2e0>
 8002ba2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ba4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ba6:	f200 8121 	bhi.w	8002dec <HAL_UART_RxCpltCallback+0x2e0>
//			TxSize = strlen(TxBuffer);
			// add received bytes to TxBuffer
//			uint8_t i;
//			for(i = 0; i < len; i++) *(TxBuffer + TxSize + i) = *(RxBuffer + ((start + i) % RX_BFR_SIZE));
//			TxSize += i;
			if (RxBuffer[start] == 'f' || RxBuffer[start] == 'F') Flag_ShowStats = 4;	//show statistics from Flash
 8002baa:	8b3b      	ldrh	r3, [r7, #24]
 8002bac:	4a75      	ldr	r2, [pc, #468]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	2b66      	cmp	r3, #102	; 0x66
 8002bb2:	d004      	beq.n	8002bbe <HAL_UART_RxCpltCallback+0xb2>
 8002bb4:	8b3b      	ldrh	r3, [r7, #24]
 8002bb6:	4a73      	ldr	r2, [pc, #460]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002bb8:	5cd3      	ldrb	r3, [r2, r3]
 8002bba:	2b46      	cmp	r3, #70	; 0x46
 8002bbc:	d102      	bne.n	8002bc4 <HAL_UART_RxCpltCallback+0xb8>
 8002bbe:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'c' || RxBuffer[start] == 'C') Flag_ShowStats = 5;	//show current statistics
 8002bc4:	8b3b      	ldrh	r3, [r7, #24]
 8002bc6:	4a6f      	ldr	r2, [pc, #444]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002bc8:	5cd3      	ldrb	r3, [r2, r3]
 8002bca:	2b63      	cmp	r3, #99	; 0x63
 8002bcc:	d004      	beq.n	8002bd8 <HAL_UART_RxCpltCallback+0xcc>
 8002bce:	8b3b      	ldrh	r3, [r7, #24]
 8002bd0:	4a6c      	ldr	r2, [pc, #432]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	2b43      	cmp	r3, #67	; 0x43
 8002bd6:	d102      	bne.n	8002bde <HAL_UART_RxCpltCallback+0xd2>
 8002bd8:	4b6b      	ldr	r3, [pc, #428]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002bda:	2205      	movs	r2, #5
 8002bdc:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'w' || RxBuffer[start] == 'W') Flag_ShowStats = 3;	//show WattHours statistics
 8002bde:	8b3b      	ldrh	r3, [r7, #24]
 8002be0:	4a68      	ldr	r2, [pc, #416]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002be2:	5cd3      	ldrb	r3, [r2, r3]
 8002be4:	2b77      	cmp	r3, #119	; 0x77
 8002be6:	d004      	beq.n	8002bf2 <HAL_UART_RxCpltCallback+0xe6>
 8002be8:	8b3b      	ldrh	r3, [r7, #24]
 8002bea:	4a66      	ldr	r2, [pc, #408]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002bec:	5cd3      	ldrb	r3, [r2, r3]
 8002bee:	2b57      	cmp	r3, #87	; 0x57
 8002bf0:	d102      	bne.n	8002bf8 <HAL_UART_RxCpltCallback+0xec>
 8002bf2:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	601a      	str	r2, [r3, #0]
			if (RxBuffer[start] == 'e' || RxBuffer[start] == 'E')						//erase statistics in flash - only newest
 8002bf8:	8b3b      	ldrh	r3, [r7, #24]
 8002bfa:	4a62      	ldr	r2, [pc, #392]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002bfc:	5cd3      	ldrb	r3, [r2, r3]
 8002bfe:	2b65      	cmp	r3, #101	; 0x65
 8002c00:	d004      	beq.n	8002c0c <HAL_UART_RxCpltCallback+0x100>
 8002c02:	8b3b      	ldrh	r3, [r7, #24]
 8002c04:	4a5f      	ldr	r2, [pc, #380]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	2b45      	cmp	r3, #69	; 0x45
 8002c0a:	d11e      	bne.n	8002c4a <HAL_UART_RxCpltCallback+0x13e>
			{
				uint32_t i, temp;
				temp = StatCurrentWh.FlashPageCounter;
 8002c0c:	4b5f      	ldr	r3, [pc, #380]	; (8002d8c <HAL_UART_RxCpltCallback+0x280>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
				for(i = 0; i < sizeof(Stat_Flash); i++)		//clear statistics that will be stored in flash at top of the hour
 8002c12:	2300      	movs	r3, #0
 8002c14:	623b      	str	r3, [r7, #32]
 8002c16:	e00c      	b.n	8002c32 <HAL_UART_RxCpltCallback+0x126>
				{
					((uint8_t *) &StatCurrentWh)[i] = 0;
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	4a5c      	ldr	r2, [pc, #368]	; (8002d8c <HAL_UART_RxCpltCallback+0x280>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
					((uint8_t *) &Stat_Flash)[i] = 0;
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	4a5a      	ldr	r2, [pc, #360]	; (8002d90 <HAL_UART_RxCpltCallback+0x284>)
 8002c26:	4413      	add	r3, r2
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
				for(i = 0; i < sizeof(Stat_Flash); i++)		//clear statistics that will be stored in flash at top of the hour
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	623b      	str	r3, [r7, #32]
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2baf      	cmp	r3, #175	; 0xaf
 8002c36:	d9ef      	bls.n	8002c18 <HAL_UART_RxCpltCallback+0x10c>
				}
				StatCurrentWh.FlashPageCounter = temp;
 8002c38:	4a54      	ldr	r2, [pc, #336]	; (8002d8c <HAL_UART_RxCpltCallback+0x280>)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	6013      	str	r3, [r2, #0]
				Stat_Flash.FlashPageCounter = temp;
 8002c3e:	4a54      	ldr	r2, [pc, #336]	; (8002d90 <HAL_UART_RxCpltCallback+0x284>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	6013      	str	r3, [r2, #0]
				Flag_ShowStats = 4;
 8002c44:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002c46:	2204      	movs	r2, #4
 8002c48:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'd' || RxBuffer[start] == 'D')						//delete current and historical statistics stored in flash
 8002c4a:	8b3b      	ldrh	r3, [r7, #24]
 8002c4c:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d004      	beq.n	8002c5e <HAL_UART_RxCpltCallback+0x152>
 8002c54:	8b3b      	ldrh	r3, [r7, #24]
 8002c56:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	2b44      	cmp	r3, #68	; 0x44
 8002c5c:	d104      	bne.n	8002c68 <HAL_UART_RxCpltCallback+0x15c>
			{
				DeleteStatistics2FLASH();
 8002c5e:	f7fe ff1b 	bl	8001a98 <DeleteStatistics2FLASH>
				Flag_ShowStats = 4;
 8002c62:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002c64:	2204      	movs	r2, #4
 8002c66:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'p' || RxBuffer[start] == 'P')						//show calibration data
 8002c68:	8b3b      	ldrh	r3, [r7, #24]
 8002c6a:	4a46      	ldr	r2, [pc, #280]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	2b70      	cmp	r3, #112	; 0x70
 8002c70:	d004      	beq.n	8002c7c <HAL_UART_RxCpltCallback+0x170>
 8002c72:	8b3b      	ldrh	r3, [r7, #24]
 8002c74:	4a43      	ldr	r2, [pc, #268]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	2b50      	cmp	r3, #80	; 0x50
 8002c7a:	d102      	bne.n	8002c82 <HAL_UART_RxCpltCallback+0x176>
			{
				Flag_ShowStats = 62;
 8002c7c:	4b42      	ldr	r3, [pc, #264]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002c7e:	223e      	movs	r2, #62	; 0x3e
 8002c80:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'o' || RxBuffer[start] == 'O')						//read calibration data from flash
 8002c82:	8b3b      	ldrh	r3, [r7, #24]
 8002c84:	4a3f      	ldr	r2, [pc, #252]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	2b6f      	cmp	r3, #111	; 0x6f
 8002c8a:	d004      	beq.n	8002c96 <HAL_UART_RxCpltCallback+0x18a>
 8002c8c:	8b3b      	ldrh	r3, [r7, #24]
 8002c8e:	4a3d      	ldr	r2, [pc, #244]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002c90:	5cd3      	ldrb	r3, [r2, r3]
 8002c92:	2b4f      	cmp	r3, #79	; 0x4f
 8002c94:	d104      	bne.n	8002ca0 <HAL_UART_RxCpltCallback+0x194>
			{
				Flag_ShowStats = 62;
 8002c96:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002c98:	223e      	movs	r2, #62	; 0x3e
 8002c9a:	601a      	str	r2, [r3, #0]
				RestoreCalValuesFromFLASH();
 8002c9c:	f7fe fd5a 	bl	8001754 <RestoreCalValuesFromFLASH>
			}
			if (RxBuffer[start] == 'l' || RxBuffer[start] == 'L')						//save calibration data
 8002ca0:	8b3b      	ldrh	r3, [r7, #24]
 8002ca2:	4a38      	ldr	r2, [pc, #224]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	2b6c      	cmp	r3, #108	; 0x6c
 8002ca8:	d004      	beq.n	8002cb4 <HAL_UART_RxCpltCallback+0x1a8>
 8002caa:	8b3b      	ldrh	r3, [r7, #24]
 8002cac:	4a35      	ldr	r2, [pc, #212]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	2b4c      	cmp	r3, #76	; 0x4c
 8002cb2:	d104      	bne.n	8002cbe <HAL_UART_RxCpltCallback+0x1b2>
			{
				StoreCalData2FLASH();
 8002cb4:	f7fe fd80 	bl	80017b8 <StoreCalData2FLASH>
				Flag_ShowStats = 62;
 8002cb8:	4b33      	ldr	r3, [pc, #204]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002cba:	223e      	movs	r2, #62	; 0x3e
 8002cbc:	601a      	str	r2, [r3, #0]
			}
			if (RxBuffer[start] == 'k' || RxBuffer[start] == 'K')						//save calibration data
 8002cbe:	8b3b      	ldrh	r3, [r7, #24]
 8002cc0:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	2b6b      	cmp	r3, #107	; 0x6b
 8002cc6:	d004      	beq.n	8002cd2 <HAL_UART_RxCpltCallback+0x1c6>
 8002cc8:	8b3b      	ldrh	r3, [r7, #24]
 8002cca:	4a2e      	ldr	r2, [pc, #184]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002ccc:	5cd3      	ldrb	r3, [r2, r3]
 8002cce:	2b4b      	cmp	r3, #75	; 0x4b
 8002cd0:	d110      	bne.n	8002cf4 <HAL_UART_RxCpltCallback+0x1e8>
			{
				Flag_ShowStats = 62;
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002cd4:	223e      	movs	r2, #62	; 0x3e
 8002cd6:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < sizeof(CalibrationValues); i++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	e007      	b.n	8002cee <HAL_UART_RxCpltCallback+0x1e2>
				{
					((uint8_t *) &CalibrationValues)[i] = 0;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	4a2c      	ldr	r2, [pc, #176]	; (8002d94 <HAL_UART_RxCpltCallback+0x288>)
 8002ce2:	4413      	add	r3, r2
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < sizeof(CalibrationValues); i++)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	3301      	adds	r3, #1
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	2b27      	cmp	r3, #39	; 0x27
 8002cf2:	d9f4      	bls.n	8002cde <HAL_UART_RxCpltCallback+0x1d2>
				}
			}
			if (RxBuffer[start] == '0')													//calibrate inverter "0" current
 8002cf4:	8b3b      	ldrh	r3, [r7, #24]
 8002cf6:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002cf8:	5cd3      	ldrb	r3, [r2, r3]
 8002cfa:	2b30      	cmp	r3, #48	; 0x30
 8002cfc:	d11d      	bne.n	8002d3a <HAL_UART_RxCpltCallback+0x22e>
			{
				Flag_ShowStats = 62;
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002d00:	223e      	movs	r2, #62	; 0x3e
 8002d02:	601a      	str	r2, [r3, #0]
				uint32_t temp;
				temp = 	ConvertIValue(Adc1RawReadings.Inv_current);
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_UART_RxCpltCallback+0x28c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fb7d 	bl	8002408 <ConvertIValue>
 8002d0e:	6138      	str	r0, [r7, #16]
				if (temp < 500)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d16:	d209      	bcs.n	8002d2c <HAL_UART_RxCpltCallback+0x220>
				{
					CalibrationValues.Inv_current_off = (int)temp;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_UART_RxCpltCallback+0x288>)
 8002d1c:	6053      	str	r3, [r2, #4]
					sprintf(TxBuffer, "\r\nInverter current offset: %i\r\n",( int)temp);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	461a      	mov	r2, r3
 8002d22:	491e      	ldr	r1, [pc, #120]	; (8002d9c <HAL_UART_RxCpltCallback+0x290>)
 8002d24:	481e      	ldr	r0, [pc, #120]	; (8002da0 <HAL_UART_RxCpltCallback+0x294>)
 8002d26:	f00b fc4f 	bl	800e5c8 <siprintf>
 8002d2a:	e006      	b.n	8002d3a <HAL_UART_RxCpltCallback+0x22e>
				}
				else
				{
					sprintf(TxBuffer, "\r\nInverter Zero current too high: %i\r\n",( int)Adc1Measurements.Inv_current);
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_UART_RxCpltCallback+0x298>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	491d      	ldr	r1, [pc, #116]	; (8002da8 <HAL_UART_RxCpltCallback+0x29c>)
 8002d34:	481a      	ldr	r0, [pc, #104]	; (8002da0 <HAL_UART_RxCpltCallback+0x294>)
 8002d36:	f00b fc47 	bl	800e5c8 <siprintf>
				}
			}
			if (RxBuffer[start] == '1')													//calibrate PV "0" current
 8002d3a:	8b3b      	ldrh	r3, [r7, #24]
 8002d3c:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <HAL_UART_RxCpltCallback+0x278>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	2b31      	cmp	r3, #49	; 0x31
 8002d42:	d13c      	bne.n	8002dbe <HAL_UART_RxCpltCallback+0x2b2>
			{
				Flag_ShowStats = 62;
 8002d44:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_UART_RxCpltCallback+0x27c>)
 8002d46:	223e      	movs	r2, #62	; 0x3e
 8002d48:	601a      	str	r2, [r3, #0]
				uint32_t temp;
				temp = 	ConvertIValue(Adc1RawReadings.PV_current);
 8002d4a:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <HAL_UART_RxCpltCallback+0x28c>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fb5a 	bl	8002408 <ConvertIValue>
 8002d54:	60f8      	str	r0, [r7, #12]
				if (temp < 500)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d5c:	d228      	bcs.n	8002db0 <HAL_UART_RxCpltCallback+0x2a4>
				{
					CalibrationValues.PV_current_off = (int)temp;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <HAL_UART_RxCpltCallback+0x288>)
 8002d62:	6093      	str	r3, [r2, #8]
					sprintf(TxBuffer, "\r\nPV current offset: %i\r\n",( int)temp);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	461a      	mov	r2, r3
 8002d68:	4910      	ldr	r1, [pc, #64]	; (8002dac <HAL_UART_RxCpltCallback+0x2a0>)
 8002d6a:	480d      	ldr	r0, [pc, #52]	; (8002da0 <HAL_UART_RxCpltCallback+0x294>)
 8002d6c:	f00b fc2c 	bl	800e5c8 <siprintf>
 8002d70:	e025      	b.n	8002dbe <HAL_UART_RxCpltCallback+0x2b2>
 8002d72:	bf00      	nop
 8002d74:	20005bd0 	.word	0x20005bd0
 8002d78:	20000235 	.word	0x20000235
 8002d7c:	20000236 	.word	0x20000236
 8002d80:	20000234 	.word	0x20000234
 8002d84:	20005d1c 	.word	0x20005d1c
 8002d88:	20000260 	.word	0x20000260
 8002d8c:	20005a28 	.word	0x20005a28
 8002d90:	20006214 	.word	0x20006214
 8002d94:	20005c54 	.word	0x20005c54
 8002d98:	200061a8 	.word	0x200061a8
 8002d9c:	08012de0 	.word	0x08012de0
 8002da0:	20005da0 	.word	0x20005da0
 8002da4:	2000599c 	.word	0x2000599c
 8002da8:	08012e00 	.word	0x08012e00
 8002dac:	08012e28 	.word	0x08012e28
				}
				else
				{
					sprintf(TxBuffer, "\r\nPV Zero current too high: %i\r\n",( int)Adc1Measurements.PV_current);
 8002db0:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_UART_RxCpltCallback+0x338>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4924      	ldr	r1, [pc, #144]	; (8002e48 <HAL_UART_RxCpltCallback+0x33c>)
 8002db8:	4824      	ldr	r0, [pc, #144]	; (8002e4c <HAL_UART_RxCpltCallback+0x340>)
 8002dba:	f00b fc05 	bl	800e5c8 <siprintf>
				}
			}
			if (RxBuffer[start] == 'h' || RxBuffer[start] == 'H' || RxBuffer[start] == '?')
 8002dbe:	8b3b      	ldrh	r3, [r7, #24]
 8002dc0:	4a23      	ldr	r2, [pc, #140]	; (8002e50 <HAL_UART_RxCpltCallback+0x344>)
 8002dc2:	5cd3      	ldrb	r3, [r2, r3]
 8002dc4:	2b68      	cmp	r3, #104	; 0x68
 8002dc6:	d009      	beq.n	8002ddc <HAL_UART_RxCpltCallback+0x2d0>
 8002dc8:	8b3b      	ldrh	r3, [r7, #24]
 8002dca:	4a21      	ldr	r2, [pc, #132]	; (8002e50 <HAL_UART_RxCpltCallback+0x344>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	2b48      	cmp	r3, #72	; 0x48
 8002dd0:	d004      	beq.n	8002ddc <HAL_UART_RxCpltCallback+0x2d0>
 8002dd2:	8b3b      	ldrh	r3, [r7, #24]
 8002dd4:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <HAL_UART_RxCpltCallback+0x344>)
 8002dd6:	5cd3      	ldrb	r3, [r2, r3]
 8002dd8:	2b3f      	cmp	r3, #63	; 0x3f
 8002dda:	d124      	bne.n	8002e26 <HAL_UART_RxCpltCallback+0x31a>
			{
				Flag_ShowStats = 60;
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <HAL_UART_RxCpltCallback+0x348>)
 8002dde:	223c      	movs	r2, #60	; 0x3c
 8002de0:	601a      	str	r2, [r3, #0]
				sprintf(TxBuffer, "\r\nhelp: \r\n"
 8002de2:	491d      	ldr	r1, [pc, #116]	; (8002e58 <HAL_UART_RxCpltCallback+0x34c>)
 8002de4:	4819      	ldr	r0, [pc, #100]	; (8002e4c <HAL_UART_RxCpltCallback+0x340>)
 8002de6:	f00b fbef 	bl	800e5c8 <siprintf>
			if (RxBuffer[start] == 'h' || RxBuffer[start] == 'H' || RxBuffer[start] == '?')
 8002dea:	e01c      	b.n	8002e26 <HAL_UART_RxCpltCallback+0x31a>

		} else {
			// buffer overflow error:
//			sprintf(TxBuffer, "NAK RX BUFFER OVERFLOW ERROR %d\r\n", (len - RX_BFR_SIZE));
//			TxSize = strlen(TxBuffer);
			if(HAL_UART_GetError(&huart1)) {	//clear RX errors if occured
 8002dec:	481b      	ldr	r0, [pc, #108]	; (8002e5c <HAL_UART_RxCpltCallback+0x350>)
 8002dee:	f006 fcdf 	bl	80097b0 <HAL_UART_GetError>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d017      	beq.n	8002e28 <HAL_UART_RxCpltCallback+0x31c>
			        HAL_UART_DMAStop(&huart1);                          // STOP Uart
 8002df8:	4818      	ldr	r0, [pc, #96]	; (8002e5c <HAL_UART_RxCpltCallback+0x350>)
 8002dfa:	f006 f93b 	bl	8009074 <HAL_UART_DMAStop>
			        MX_USART1_UART_Init();                              // INIT Uart
 8002dfe:	f7ff fd85 	bl	800290c <MX_USART1_UART_Init>
			        HAL_UART_Receive_DMA(&huart1, RxBuffer, RX_BFR_SIZE);  // START Uart DMA
 8002e02:	227f      	movs	r2, #127	; 0x7f
 8002e04:	4912      	ldr	r1, [pc, #72]	; (8002e50 <HAL_UART_RxCpltCallback+0x344>)
 8002e06:	4815      	ldr	r0, [pc, #84]	; (8002e5c <HAL_UART_RxCpltCallback+0x350>)
 8002e08:	f006 f8de 	bl	8008fc8 <HAL_UART_Receive_DMA>
			        __HAL_UART_CLEAR_IDLEFLAG(&huart1);                 // Clear Idle IT-Flag
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <HAL_UART_RxCpltCallback+0x350>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2210      	movs	r2, #16
 8002e12:	621a      	str	r2, [r3, #32]
			        __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);        // Enable Idle Interrupt
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_UART_RxCpltCallback+0x350>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <HAL_UART_RxCpltCallback+0x350>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0210 	orr.w	r2, r2, #16
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e000      	b.n	8002e28 <HAL_UART_RxCpltCallback+0x31c>
			if (RxBuffer[start] == 'h' || RxBuffer[start] == 'H' || RxBuffer[start] == '?')
 8002e26:	bf00      	nop
			   }
		}

//		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);						// send a response

		RxRollover = 0;																	// reset the Rollover variable
 8002e28:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_UART_RxCpltCallback+0x354>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
	} else {
		// no idle flag? --> DMA rollover occurred
		RxRollover++;		// increment Rollover Counter
	}
}
 8002e2e:	e005      	b.n	8002e3c <HAL_UART_RxCpltCallback+0x330>
		RxRollover++;		// increment Rollover Counter
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_UART_RxCpltCallback+0x354>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_UART_RxCpltCallback+0x354>)
 8002e3a:	701a      	strb	r2, [r3, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	3728      	adds	r7, #40	; 0x28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	2000599c 	.word	0x2000599c
 8002e48:	08012e44 	.word	0x08012e44
 8002e4c:	20005da0 	.word	0x20005da0
 8002e50:	20005d1c 	.word	0x20005d1c
 8002e54:	20000260 	.word	0x20000260
 8002e58:	08012e68 	.word	0x08012e68
 8002e5c:	20005bd0 	.word	0x20005bd0
 8002e60:	20000234 	.word	0x20000234

08002e64 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	// UART Tx Complete Callback;
	TxCounter++;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_UART_TxCpltCallback+0x20>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_UART_TxCpltCallback+0x20>)
 8002e76:	701a      	strb	r2, [r3, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	20000238 	.word	0x20000238

08002e88 <InverterOn_batteryAsBackup>:

void InverterOn_batteryAsBackup(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
	if (StatCurrentWh.DayDuration_current > 900)	//15 minutes in the day/after dawn
 8002e8c:	4b57      	ldr	r3, [pc, #348]	; (8002fec <InverterOn_batteryAsBackup+0x164>)
 8002e8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e92:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002e96:	d905      	bls.n	8002ea4 <InverterOn_batteryAsBackup+0x1c>
	{
		StatCurrentWs.Time_DuskTime = 0;		//clear "after dusk timer" - it's day
 8002e98:	4b55      	ldr	r3, [pc, #340]	; (8002ff0 <InverterOn_batteryAsBackup+0x168>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	64da      	str	r2, [r3, #76]	; 0x4c
		StatCountFlagsWs.ChgStatSaved = 0;		//enable saving daytime stats at dusk
 8002e9e:	4b55      	ldr	r3, [pc, #340]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
	}
	StatCountFlagsWs.EmptyBattStatsSaved = 0;	//clear flag to enable saving stats at the end of discharge at night
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	649a      	str	r2, [r3, #72]	; 0x48
					//charge battery slightly?
					if (((Adc1Measurements.Batt_voltage) < (BATT_MIN_VOLTAGE-BATT_VOLTAGE_MINHYSTERESIS+VoltHysteresisDsChg))  &&
 8002eaa:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <InverterOn_batteryAsBackup+0x170>)
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <InverterOn_batteryAsBackup+0x174>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f503 73a3 	add.w	r3, r3, #326	; 0x146
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d219      	bcs.n	8002eee <InverterOn_batteryAsBackup+0x66>
							((Adc1Measurements.Batt_voltage) > BATT_CRITICAL_MIN_VOLTAGE) &&
 8002eba:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <InverterOn_batteryAsBackup+0x170>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
					if (((Adc1Measurements.Batt_voltage) < (BATT_MIN_VOLTAGE-BATT_VOLTAGE_MINHYSTERESIS+VoltHysteresisDsChg))  &&
 8002ebe:	2bf0      	cmp	r3, #240	; 0xf0
 8002ec0:	d915      	bls.n	8002eee <InverterOn_batteryAsBackup+0x66>
							StatCurrentWs.Ws_BattRecharge < TOUT_BATTRECHARGE)	//prevent too long recharging (be carefoul, cleared every hour)
 8002ec2:	4b4b      	ldr	r3, [pc, #300]	; (8002ff0 <InverterOn_batteryAsBackup+0x168>)
 8002ec4:	691b      	ldr	r3, [r3, #16]
							((Adc1Measurements.Batt_voltage) > BATT_CRITICAL_MIN_VOLTAGE) &&
 8002ec6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002eca:	d210      	bcs.n	8002eee <InverterOn_batteryAsBackup+0x66>
					{//yes, re-charge battery
						BatteryMOS_ON();
 8002ecc:	f7ff f92e 	bl	800212c <BatteryMOS_ON>
						VoltHysteresisDsChg = BATT_VOLTAGE_MINHYSTERESIS;	//hysteresis for min operation batery voltage
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <InverterOn_batteryAsBackup+0x174>)
 8002ed2:	2213      	movs	r2, #19
 8002ed4:	601a      	str	r2, [r3, #0]
						InverterMOS_OFF();	//tbd
 8002ed6:	f7ff f9b1 	bl	800223c <InverterMOS_OFF>
						StatCountFlagsWs.Ws_BattRecharge=1;	//enable to count energy supplied for recharging, in 1Sectimer; will be cleared automatically
 8002eda:	4b46      	ldr	r3, [pc, #280]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	611a      	str	r2, [r3, #16]
						StatCountFlagsWs.Time_BattRecharge=1;	//set flag to prevent INV mos ON
 8002ee0:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	615a      	str	r2, [r3, #20]
						StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 8002ee6:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	651a      	str	r2, [r3, #80]	; 0x50
 8002eec:	e07c      	b.n	8002fe8 <InverterOn_batteryAsBackup+0x160>
					}
					else
					{//no need to recharge battery, check what else you can do
						//prevent BatMosOff when no inv operation; MosOff only once when exiting from batt recharge
						if (StatCountFlagsWs.Time_BattRecharge) BatteryMOS_OFF();
 8002eee:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <InverterOn_batteryAsBackup+0x72>
 8002ef6:	f7ff f959 	bl	80021ac <BatteryMOS_OFF>
						VoltHysteresisDsChg = 0;
 8002efa:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <InverterOn_batteryAsBackup+0x174>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
						StatCountFlagsWs.Time_BattRecharge=0;	//reset flag to enable INV mos ON and disable counting time recharge
 8002f00:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	615a      	str	r2, [r3, #20]

						//switch INV ON only if not battery recharge AND Inverter reset procedure isnt in progress
						//if (!StatCountFlagsWs.Time_BattRecharge
						//		&& !FlagResetInverter) InverterMOS_ON();
						InverterMOS_ON();
 8002f06:	f7ff f981 	bl	800220c <InverterMOS_ON>
						//is inverter working?
						if (Adc1Measurements.Inv_current > INV_CURRENT_MIN)
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <InverterOn_batteryAsBackup+0x170>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002f12:	d908      	bls.n	8002f26 <InverterOn_batteryAsBackup+0x9e>
						{//yes, inverter working
							StatCountFlagsWs.Ws_Inverter=1;	//inverter working, enable to count energy, in 1Sectimer
 8002f14:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	609a      	str	r2, [r3, #8]
							BatteryMOS_OFF();		//it's day, inv working-> switch off battery mos
 8002f1a:	f7ff f947 	bl	80021ac <BatteryMOS_OFF>
							StatCountFlagsWs.InvFault = 0;	//flag to clear invfault occurence
 8002f1e:	4b35      	ldr	r3, [pc, #212]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	635a      	str	r2, [r3, #52]	; 0x34
									}//end of battery fully charged
								}//end of batt not OK to charge
							}//end of inv reset  procedure not launched
						}//end of its day, inv not working
					}//end of no need to recharge battery
}
 8002f24:	e060      	b.n	8002fe8 <InverterOn_batteryAsBackup+0x160>
							if (!StatCountFlagsWs.InvFault)
 8002f26:	4b33      	ldr	r3, [pc, #204]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d107      	bne.n	8002f3e <InverterOn_batteryAsBackup+0xb6>
									StatCurrentWh.InvFaultCntr++;
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <InverterOn_batteryAsBackup+0x164>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	3301      	adds	r3, #1
 8002f34:	4a2d      	ldr	r2, [pc, #180]	; (8002fec <InverterOn_batteryAsBackup+0x164>)
 8002f36:	6313      	str	r3, [r2, #48]	; 0x30
									StatCountFlagsWs.InvFault = 1;
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	635a      	str	r2, [r3, #52]	; 0x34
							StatCountFlagsWs.Time_NoInv=1;	//enable to count time when inv is not working, in 1Sectimer
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	619a      	str	r2, [r3, #24]
							ResetInverterDay();	//try reset inv
 8002f44:	f7fe f950 	bl	80011e8 <ResetInverterDay>
							if (!FlagResetInverter ) 			//if INV Reset procedure is not launched
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <InverterOn_batteryAsBackup+0x178>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d14b      	bne.n	8002fe8 <InverterOn_batteryAsBackup+0x160>
								if ((Adc1Measurements.Batt_voltage) < (BATT_MAX_VOLTAGE+VoltHysteresisChg)
 8002f50:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <InverterOn_batteryAsBackup+0x170>)
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	4b2b      	ldr	r3, [pc, #172]	; (8003004 <InverterOn_batteryAsBackup+0x17c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f203 1391 	addw	r3, r3, #401	; 0x191
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d212      	bcs.n	8002f86 <InverterOn_batteryAsBackup+0xfe>
										&& Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 8002f60:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <InverterOn_batteryAsBackup+0x170>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2bf0      	cmp	r3, #240	; 0xf0
 8002f66:	d90e      	bls.n	8002f86 <InverterOn_batteryAsBackup+0xfe>
									BatteryMOS_ON();
 8002f68:	f7ff f8e0 	bl	800212c <BatteryMOS_ON>
									StatCountFlagsWs.Ws_BattNoInv=1;	//enable to count energy to battery when INV isnt working, in 1Sectimer
 8002f6c:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	605a      	str	r2, [r3, #4]
									StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	651a      	str	r2, [r3, #80]	; 0x50
									VoltHysteresisChg = BATT_VOLTAGE_MAXHYSTERESIS;
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <InverterOn_batteryAsBackup+0x17c>)
 8002f7a:	2214      	movs	r2, #20
 8002f7c:	601a      	str	r2, [r3, #0]
									StatCountFlagsWs.Chg_cycle_count = 0;	//when battery charging unlock flag enabling counting dschg cycles
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
 8002f84:	e030      	b.n	8002fe8 <InverterOn_batteryAsBackup+0x160>
									BatteryMOS_OFF();
 8002f86:	f7ff f911 	bl	80021ac <BatteryMOS_OFF>
									StatCountFlagsWs.Time_NoBattery2Chg=1;	//enable to count time without possibility to charge battery, in 1Sectimer
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	621a      	str	r2, [r3, #32]
									VoltHysteresisChg = 0;
 8002f90:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <InverterOn_batteryAsBackup+0x17c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
									if ((Adc1Measurements.Batt_voltage) > (BATT_MAX_VOLTAGE+VoltHysteresisChg))
 8002f96:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <InverterOn_batteryAsBackup+0x170>)
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <InverterOn_batteryAsBackup+0x17c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f203 1391 	addw	r3, r3, #401	; 0x191
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d920      	bls.n	8002fe8 <InverterOn_batteryAsBackup+0x160>
										StatCurrentWh.Chg_Ah_lastFull=StatCurrentWh.Chg_Ah_current;	//store fully chg Ah
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <InverterOn_batteryAsBackup+0x164>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <InverterOn_batteryAsBackup+0x164>)
 8002fae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
										if (!StatCountFlagsWs.Chg_cycle_c2 && StatCountFlagsWs.Chg_cycle_count)
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <InverterOn_batteryAsBackup+0x14a>
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <InverterOn_batteryAsBackup+0x14a>
											StatCurrentWh.Chg_Volt_lastFull = Adc1Measurements.Batt_voltage;	//store lastvoltage
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <InverterOn_batteryAsBackup+0x170>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <InverterOn_batteryAsBackup+0x164>)
 8002fc8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
											StatCountFlagsWs.Chg_cycle_c2 = 1;
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
										if (!StatCountFlagsWs.Chg_cycle_count)
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <InverterOn_batteryAsBackup+0x160>
											StatCountFlagsWs.Chg_cycle_count = 1; //if not, set flag 'fully charged' to count/set only once
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <InverterOn_batteryAsBackup+0x16c>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
											StatCurrentWh.Dschg_Ah_current=0;	//clear discharge Ah
 8002fe0:	4b02      	ldr	r3, [pc, #8]	; (8002fec <InverterOn_batteryAsBackup+0x164>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002fe6:	e7ff      	b.n	8002fe8 <InverterOn_batteryAsBackup+0x160>
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20005a28 	.word	0x20005a28
 8002ff0:	20005c7c 	.word	0x20005c7c
 8002ff4:	200059c0 	.word	0x200059c0
 8002ff8:	2000599c 	.word	0x2000599c
 8002ffc:	20000254 	.word	0x20000254
 8003000:	200061a4 	.word	0x200061a4
 8003004:	20000250 	.word	0x20000250

08003008 <DischargeProcedure>:

void DischargeProcedure(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
	//VoltHysteresisChg = 0;		//leave Chg hysteresis elevated for transition period during dusk
	StatCountFlagsWs.Time_BattRecharge=0;	//you cant recharge during night, reset procedure
 800300c:	4b69      	ldr	r3, [pc, #420]	; (80031b4 <DischargeProcedure+0x1ac>)
 800300e:	2200      	movs	r2, #0
 8003010:	615a      	str	r2, [r3, #20]
	StatCountFlagsWs.Time_NightTime=1;	//its nighttime, enable to count nightime in 1Sectimer
 8003012:	4b68      	ldr	r3, [pc, #416]	; (80031b4 <DischargeProcedure+0x1ac>)
 8003014:	2201      	movs	r2, #1
 8003016:	61da      	str	r2, [r3, #28]
	StatCountFlagsWs.Time_DuskTime=1;	//its nightitme, enable flag to count time passed from recent dusk;
 8003018:	4b66      	ldr	r3, [pc, #408]	; (80031b4 <DischargeProcedure+0x1ac>)
 800301a:	2201      	movs	r2, #1
 800301c:	64da      	str	r2, [r3, #76]	; 0x4c
	if (StatCurrentWs.Time_DuskTime > 900 && !StatCountFlagsWs.ChgStatSaved)	//15 minutes in the night/after dusk store Chg_Ah_last
 800301e:	4b66      	ldr	r3, [pc, #408]	; (80031b8 <DischargeProcedure+0x1b0>)
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003026:	d934      	bls.n	8003092 <DischargeProcedure+0x8a>
 8003028:	4b62      	ldr	r3, [pc, #392]	; (80031b4 <DischargeProcedure+0x1ac>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d130      	bne.n	8003092 <DischargeProcedure+0x8a>
	{
		StatCountFlagsWs.ChgStatSaved = 1;			//allow saving daytime stats at dusk only once
 8003030:	4b60      	ldr	r3, [pc, #384]	; (80031b4 <DischargeProcedure+0x1ac>)
 8003032:	2201      	movs	r2, #1
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
		StatCurrentWh.Chg_Ah_3 = StatCurrentWh.Chg_Ah_2;
 8003036:	4b61      	ldr	r3, [pc, #388]	; (80031bc <DischargeProcedure+0x1b4>)
 8003038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303c:	4a5f      	ldr	r2, [pc, #380]	; (80031bc <DischargeProcedure+0x1b4>)
 800303e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		StatCurrentWh.Chg_Ah_2 = StatCurrentWh.Chg_Ah_1;
 8003042:	4b5e      	ldr	r3, [pc, #376]	; (80031bc <DischargeProcedure+0x1b4>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	4a5c      	ldr	r2, [pc, #368]	; (80031bc <DischargeProcedure+0x1b4>)
 800304a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		StatCurrentWh.Chg_Ah_1 = StatCurrentWh.Chg_Ah_last;
 800304e:	4b5b      	ldr	r3, [pc, #364]	; (80031bc <DischargeProcedure+0x1b4>)
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003054:	4a59      	ldr	r2, [pc, #356]	; (80031bc <DischargeProcedure+0x1b4>)
 8003056:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		StatCurrentWh.Chg_Ah_last = StatCurrentWh.Chg_Ah_current;
 800305a:	4b58      	ldr	r3, [pc, #352]	; (80031bc <DischargeProcedure+0x1b4>)
 800305c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003060:	4a56      	ldr	r2, [pc, #344]	; (80031bc <DischargeProcedure+0x1b4>)
 8003062:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		StatCurrentWh.DayDuration_3 = StatCurrentWh.DayDuration_2;
 8003066:	4b55      	ldr	r3, [pc, #340]	; (80031bc <DischargeProcedure+0x1b4>)
 8003068:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800306c:	4a53      	ldr	r2, [pc, #332]	; (80031bc <DischargeProcedure+0x1b4>)
 800306e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
		StatCurrentWh.DayDuration_2 = StatCurrentWh.DayDuration_1;
 8003072:	4b52      	ldr	r3, [pc, #328]	; (80031bc <DischargeProcedure+0x1b4>)
 8003074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003078:	4a50      	ldr	r2, [pc, #320]	; (80031bc <DischargeProcedure+0x1b4>)
 800307a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		StatCurrentWh.DayDuration_1 = StatCurrentWh.DayDuration_current;
 800307e:	4b4f      	ldr	r3, [pc, #316]	; (80031bc <DischargeProcedure+0x1b4>)
 8003080:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003084:	4a4d      	ldr	r2, [pc, #308]	; (80031bc <DischargeProcedure+0x1b4>)
 8003086:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		StatCurrentWh.DayDuration_current = 0;
 800308a:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <DischargeProcedure+0x1b4>)
 800308c:	2200      	movs	r2, #0
 800308e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	//batt OK to discharge?
	if (Adc1Measurements.Batt_voltage > (BATT_MIN_VOLTAGE-VoltHysteresisDsChg))
 8003092:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <DischargeProcedure+0x1b8>)
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	4b4b      	ldr	r3, [pc, #300]	; (80031c4 <DischargeProcedure+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f5c3 73ac 	rsb	r3, r3, #344	; 0x158
 800309e:	3301      	adds	r3, #1
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d92f      	bls.n	8003104 <DischargeProcedure+0xfc>
	{//yes, OK to discharge
		StatCountFlagsWs.Dschg_cycle_c2 = 0;		//flag enabling storage dsch stat when batt depleted
 80030a4:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <DischargeProcedure+0x1ac>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c
		StatCountFlagsWs.Dschg_cycle_count = 0;		//clear flag to enable dschg counter when batt empty
 80030aa:	4b42      	ldr	r3, [pc, #264]	; (80031b4 <DischargeProcedure+0x1ac>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
		if (!FlagResetInverter)
 80030b0:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <DischargeProcedure+0x1c0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <DischargeProcedure+0xb4>
		{//if reset procedure isn't in progress, turn on batt mos and inv mos
			//BatteryMOS_ON();
			DelayedInvMosOn();
 80030b8:	f7fd ffd8 	bl	800106c <DelayedInvMosOn>
		}
		ResetInverterNight();
 80030bc:	f7fe f944 	bl	8001348 <ResetInverterNight>
		VoltHysteresisDsChg = BATT_VOLTAGE_MINHYSTERESIS;	//hysteresis for discharge
 80030c0:	4b40      	ldr	r3, [pc, #256]	; (80031c4 <DischargeProcedure+0x1bc>)
 80030c2:	2213      	movs	r2, #19
 80030c4:	601a      	str	r2, [r3, #0]
		if (FlagInverterMOS)
 80030c6:	4b41      	ldr	r3, [pc, #260]	; (80031cc <DischargeProcedure+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <DischargeProcedure+0xd2>
		{
			StatCountFlagsWs.Ws_BattOut=1;	//enable to count energy taken from battery in 1Sectimer
 80030ce:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <DischargeProcedure+0x1ac>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	60da      	str	r2, [r3, #12]
			StatCountFlagsWs.DschgAs=1;		//enable counting ampere-seconds
 80030d4:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <DischargeProcedure+0x1ac>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
		}
		if (Adc1Measurements.Inv_current > INV_CURRENT_MIN)
 80030da:	4b39      	ldr	r3, [pc, #228]	; (80031c0 <DischargeProcedure+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80030e2:	d965      	bls.n	80031b0 <DischargeProcedure+0x1a8>
			if (StatCountFlagsWs.Chg_cycle_count)
 80030e4:	4b33      	ldr	r3, [pc, #204]	; (80031b4 <DischargeProcedure+0x1ac>)
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d061      	beq.n	80031b0 <DischargeProcedure+0x1a8>
			{	//if battery was fully charged before night, increment counter of charge cycles as night starts
				StatCountFlagsWs.Chg_cycle_count=0;
 80030ec:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <DischargeProcedure+0x1ac>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28
				StatCountFlagsWs.Chg_cycle_c2=0;
 80030f2:	4b30      	ldr	r3, [pc, #192]	; (80031b4 <DischargeProcedure+0x1ac>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
				StatCurrentWh.Chg_cycle_count++;
 80030f8:	4b30      	ldr	r3, [pc, #192]	; (80031bc <DischargeProcedure+0x1b4>)
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	3301      	adds	r3, #1
 80030fe:	4a2f      	ldr	r2, [pc, #188]	; (80031bc <DischargeProcedure+0x1b4>)
 8003100:	6293      	str	r3, [r2, #40]	; 0x28
			InverterMOS_ON();		//can be left on, just in any case
			BatteryMOS_OFF();		//shut off controller completely
			}
		}
	}
}
 8003102:	e055      	b.n	80031b0 <DischargeProcedure+0x1a8>
		VoltHysteresisDsChg = 0;
 8003104:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <DischargeProcedure+0x1bc>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
		VoltHysteresisChg = 0;		//most likely will be cleared by uP reset anyway
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <DischargeProcedure+0x1c8>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
		if (!StatCountFlagsWs.Dschg_cycle_c2 && StatCountFlagsWs.Dschg_cycle_count)
 8003110:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <DischargeProcedure+0x1ac>)
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11e      	bne.n	8003156 <DischargeProcedure+0x14e>
 8003118:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <DischargeProcedure+0x1ac>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01a      	beq.n	8003156 <DischargeProcedure+0x14e>
			StatCurrentWh.Dschg_Ah_lastFull_3 = StatCurrentWh.Dschg_Ah_lastFull_2;
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <DischargeProcedure+0x1b4>)
 8003122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003124:	4a25      	ldr	r2, [pc, #148]	; (80031bc <DischargeProcedure+0x1b4>)
 8003126:	6793      	str	r3, [r2, #120]	; 0x78
			StatCurrentWh.Dschg_Ah_lastFull_2 = StatCurrentWh.Dschg_Ah_lastFull_1;
 8003128:	4b24      	ldr	r3, [pc, #144]	; (80031bc <DischargeProcedure+0x1b4>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a23      	ldr	r2, [pc, #140]	; (80031bc <DischargeProcedure+0x1b4>)
 800312e:	6753      	str	r3, [r2, #116]	; 0x74
			StatCurrentWh.Dschg_Ah_lastFull_1 = StatCurrentWh.Dschg_Ah_lastFull;
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <DischargeProcedure+0x1b4>)
 8003132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003134:	4a21      	ldr	r2, [pc, #132]	; (80031bc <DischargeProcedure+0x1b4>)
 8003136:	6713      	str	r3, [r2, #112]	; 0x70
			StatCurrentWh.Dschg_Ah_lastFull = StatCurrentWh.Dschg_Ah_current;	//store fully dschg Ah
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <DischargeProcedure+0x1b4>)
 800313a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313c:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <DischargeProcedure+0x1b4>)
 800313e:	66d3      	str	r3, [r2, #108]	; 0x6c
			StatCurrentWh.Dschg_Volt_lastFull = Adc1Measurements.Batt_voltage;
 8003140:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <DischargeProcedure+0x1b8>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <DischargeProcedure+0x1b4>)
 8003146:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			StatCountFlagsWs.Dschg_cycle_c2 = 1;
 800314a:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <DischargeProcedure+0x1ac>)
 800314c:	2201      	movs	r2, #1
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c
			StatCountFlagsWs.Chg_cycle_c2 = 0;
 8003150:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <DischargeProcedure+0x1ac>)
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
		if (!StatCountFlagsWs.Dschg_cycle_count)	//if battery wasn't fully discharged before, but now it is; do that only once at full discharge
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <DischargeProcedure+0x1ac>)
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	2b00      	cmp	r3, #0
 800315c:	d112      	bne.n	8003184 <DischargeProcedure+0x17c>
			StatCountFlagsWs.Dschg_cycle_count = 1;	//to count only once
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <DischargeProcedure+0x1ac>)
 8003160:	2201      	movs	r2, #1
 8003162:	625a      	str	r2, [r3, #36]	; 0x24
			StatCurrentWh.Dschg_cycle_count++;	//count only once
 8003164:	4b15      	ldr	r3, [pc, #84]	; (80031bc <DischargeProcedure+0x1b4>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	3301      	adds	r3, #1
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <DischargeProcedure+0x1b4>)
 800316c:	6253      	str	r3, [r2, #36]	; 0x24
			StatCountFlagsWs.Chg_cycle_count = 0;	//most likely will be cleared by system reset
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <DischargeProcedure+0x1ac>)
 8003170:	2200      	movs	r2, #0
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
			StatCurrentWh.Chg_Ah_current=0;	//clear charge Ah, likely ill be cleared by reset
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <DischargeProcedure+0x1b4>)
 8003176:	2200      	movs	r2, #0
 8003178:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			InverterMOS_OFF();		//disconnect load (HW 01)
 800317c:	f7ff f85e 	bl	800223c <InverterMOS_OFF>
			BatteryMOS_ON();		//battery sctually can be left ON - sometimes on cloudy evenings when battery depleted there is small current left in PV. below 100mA it can,t be consumed by inverter anyway.
 8003180:	f7fe ffd4 	bl	800212c <BatteryMOS_ON>
		if (StatCountFlagsWs.Dschg_cycle_count && StatCountFlagsWs.Dschg_cycle_c2)
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <DischargeProcedure+0x1ac>)
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2b00      	cmp	r3, #0
 800318a:	d011      	beq.n	80031b0 <DischargeProcedure+0x1a8>
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <DischargeProcedure+0x1ac>)
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <DischargeProcedure+0x1a8>
			if (Uptime.minutes == 0	//and wait for statistics to be saved and then...
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <DischargeProcedure+0x1cc>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <DischargeProcedure+0x1a8>
					&& Uptime.seconds == 2)
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <DischargeProcedure+0x1cc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d105      	bne.n	80031b0 <DischargeProcedure+0x1a8>
			BackupPowerOFF();		//shut off controller completely
 80031a4:	f7fe ff20 	bl	8001fe8 <BackupPowerOFF>
			InverterMOS_ON();		//can be left on, just in any case
 80031a8:	f7ff f830 	bl	800220c <InverterMOS_ON>
			BatteryMOS_OFF();		//shut off controller completely
 80031ac:	f7fe fffe 	bl	80021ac <BatteryMOS_OFF>
}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	200059c0 	.word	0x200059c0
 80031b8:	20005c7c 	.word	0x20005c7c
 80031bc:	20005a28 	.word	0x20005a28
 80031c0:	2000599c 	.word	0x2000599c
 80031c4:	20000254 	.word	0x20000254
 80031c8:	200061a4 	.word	0x200061a4
 80031cc:	20000244 	.word	0x20000244
 80031d0:	20000250 	.word	0x20000250
 80031d4:	20005a18 	.word	0x20005a18

080031d8 <PrintConfig2TxBuffer>:

void PrintConfig2TxBuffer(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08e      	sub	sp, #56	; 0x38
 80031dc:	af0e      	add	r7, sp, #56	; 0x38
	sprintf(TxBuffer,  "\r\nBattery controller for On-Grid PV microinverter\r\n"
 80031de:	f244 6350 	movw	r3, #18000	; 0x4650
 80031e2:	930c      	str	r3, [sp, #48]	; 0x30
 80031e4:	f243 03d4 	movw	r3, #12500	; 0x30d4
 80031e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80031ea:	2323      	movs	r3, #35	; 0x23
 80031ec:	930a      	str	r3, [sp, #40]	; 0x28
 80031ee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80031f2:	9309      	str	r3, [sp, #36]	; 0x24
 80031f4:	2313      	movs	r3, #19
 80031f6:	9308      	str	r3, [sp, #32]
 80031f8:	2314      	movs	r3, #20
 80031fa:	9307      	str	r3, [sp, #28]
 80031fc:	f240 1391 	movw	r3, #401	; 0x191
 8003200:	9306      	str	r3, [sp, #24]
 8003202:	23f0      	movs	r3, #240	; 0xf0
 8003204:	9305      	str	r3, [sp, #20]
 8003206:	f240 1359 	movw	r3, #345	; 0x159
 800320a:	9304      	str	r3, [sp, #16]
 800320c:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8003210:	9303      	str	r3, [sp, #12]
 8003212:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	f44f 7391 	mov.w	r3, #290	; 0x122
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	2350      	movs	r3, #80	; 0x50
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	2334      	movs	r3, #52	; 0x34
 8003224:	2202      	movs	r2, #2
 8003226:	4903      	ldr	r1, [pc, #12]	; (8003234 <PrintConfig2TxBuffer+0x5c>)
 8003228:	4803      	ldr	r0, [pc, #12]	; (8003238 <PrintConfig2TxBuffer+0x60>)
 800322a:	f00b f9cd 	bl	800e5c8 <siprintf>
				"\r\nStart\n\r"
				,HW_VER,NO_FLASH_PAGES,MOSFET_MAX_TEMP,PV_CURRENT_MIN,INV_CURRENT_MIN,PV_OCV_VOLGATE
				,BATT_MIN_VOLTAGE,BATT_CRITICAL_MIN_VOLTAGE,BATT_MAX_VOLTAGE,BATT_VOLTAGE_MAXHYSTERESIS
				,BATT_VOLTAGE_MINHYSTERESIS,TIME2RESET_INV, TIME2OVLD_INV, INV_CURRENT_MAX, INV_CURR_SC
				);
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	080130d4 	.word	0x080130d4
 8003238:	20005da0 	.word	0x20005da0

0800323c <PrintFlashStats2TxBuffer>:
void PrintFlashStats2TxBuffer(void)
{
 800323c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323e:	b0b9      	sub	sp, #228	; 0xe4
 8003240:	af1e      	add	r7, sp, #120	; 0x78
	    	    		"InvOvcCntr %u, InvExtRstCnt %u, "
	    	    		"ChmAhLastF %u, DchmAhLastF %u, "
	    	    		"DschVlastF %u, ChVlastF %u, "
	    	    		"ChgAhlast %u, "
	    	    		"\r\n"
	    	    ,(unsigned int)StatCurrentWh.FlashPageCounter, (unsigned int )StatCurrentWh.Time_NightTime, (unsigned int )StatCurrentWh.Time_NoBattery2Chg, (unsigned int )StatCurrentWh.Time_NoInv
 8003242:	4b4e      	ldr	r3, [pc, #312]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	667b      	str	r3, [r7, #100]	; 0x64
 8003248:	4b4c      	ldr	r3, [pc, #304]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 800324a:	69d9      	ldr	r1, [r3, #28]
 800324c:	6639      	str	r1, [r7, #96]	; 0x60
 800324e:	4b4b      	ldr	r3, [pc, #300]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 8003250:	6a18      	ldr	r0, [r3, #32]
 8003252:	65f8      	str	r0, [r7, #92]	; 0x5c
 8003254:	4b49      	ldr	r3, [pc, #292]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 8003256:	699c      	ldr	r4, [r3, #24]
 8003258:	65bc      	str	r4, [r7, #88]	; 0x58
	    		,(unsigned int)StatCurrentWh.Wh_BattIn
 800325a:	4b48      	ldr	r3, [pc, #288]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 800325c:	685d      	ldr	r5, [r3, #4]
 800325e:	657d      	str	r5, [r7, #84]	; 0x54
	    	    ,(unsigned int)StatCurrentWh.Wh_BattNoInv, (unsigned int )StatCurrentWh.Wh_BattOut
 8003260:	4b46      	ldr	r3, [pc, #280]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 8003262:	689e      	ldr	r6, [r3, #8]
 8003264:	653e      	str	r6, [r7, #80]	; 0x50
 8003266:	4b45      	ldr	r3, [pc, #276]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	64fa      	str	r2, [r7, #76]	; 0x4c
	    		,(unsigned int)StatCurrentWh.Wh_BattRecharge, (unsigned int )StatCurrentWh.Wh_Inverter
 800326c:	4b43      	ldr	r3, [pc, #268]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 800326e:	6959      	ldr	r1, [r3, #20]
 8003270:	64b9      	str	r1, [r7, #72]	; 0x48
 8003272:	4b42      	ldr	r3, [pc, #264]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	647b      	str	r3, [r7, #68]	; 0x44
	    		,(unsigned int)StatCurrentWh.Dschg_cycle_count, (unsigned int )StatCurrentWh.Chg_cycle_count
 8003278:	4b40      	ldr	r3, [pc, #256]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 800327a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800327c:	6438      	str	r0, [r7, #64]	; 0x40
 800327e:	4b3f      	ldr	r3, [pc, #252]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 8003280:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003282:	63fc      	str	r4, [r7, #60]	; 0x3c
	    		,(unsigned int)StatCurrentWh.InvFaultCntr, (unsigned int)StatCurrentWh.InvResetCntr
 8003284:	4b3d      	ldr	r3, [pc, #244]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 8003286:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8003288:	63bd      	str	r5, [r7, #56]	; 0x38
 800328a:	4b3c      	ldr	r3, [pc, #240]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 800328c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800328e:	637e      	str	r6, [r7, #52]	; 0x34
	    		,(unsigned int)StatCurrentWh.MaxTempBatMos, (unsigned int)StatCurrentWh.MaxTempInvMos
 8003290:	4b3a      	ldr	r3, [pc, #232]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 8003292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003294:	633a      	str	r2, [r7, #48]	; 0x30
 8003296:	4b39      	ldr	r3, [pc, #228]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 8003298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800329a:	62f9      	str	r1, [r7, #44]	; 0x2c
				,(unsigned int)StatCurrentWh.MaxTempInvMosCntr, (unsigned int)StatCurrentWh.MaxTempBatMosCntr
 800329c:	4b37      	ldr	r3, [pc, #220]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24
	    		,(unsigned int)StatCurrentWh.MaxInvCurrent, (unsigned int)StatCurrentWh.MaxPVCurrent
 80032a8:	4b34      	ldr	r3, [pc, #208]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032aa:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80032ac:	623c      	str	r4, [r7, #32]
 80032ae:	4b33      	ldr	r3, [pc, #204]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032b0:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80032b2:	61fd      	str	r5, [r7, #28]
				,(unsigned int)StatCurrentWh.MaxInvCurrentCntr, (unsigned int)StatCurrentWh.MaxPVCurrentCntr
 80032b4:	4b31      	ldr	r3, [pc, #196]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032b6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 80032b8:	61be      	str	r6, [r7, #24]
 80032ba:	4b30      	ldr	r3, [pc, #192]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032be:	617a      	str	r2, [r7, #20]
	    		,(unsigned int)StatCurrentWh.MaxBatVoltage, (unsigned int)StatCurrentWh.MinBatVoltage
 80032c0:	4b2e      	ldr	r3, [pc, #184]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032c4:	6139      	str	r1, [r7, #16]
 80032c6:	4b2d      	ldr	r3, [pc, #180]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	60fb      	str	r3, [r7, #12]
				,(unsigned int)StatCurrentWh.MaxBatVoltageCntr, (unsigned int)StatCurrentWh.MinBatVoltageCntr
 80032cc:	4b2b      	ldr	r3, [pc, #172]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032ce:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80032d0:	60b8      	str	r0, [r7, #8]
 80032d2:	4b2a      	ldr	r3, [pc, #168]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032d4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80032d6:	607c      	str	r4, [r7, #4]
	    		,(unsigned int)StatCurrentWh.InvOvcCounter, (unsigned int)StatCurrentWh.InvExtResetCnt
 80032d8:	4b28      	ldr	r3, [pc, #160]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032da:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 80032dc:	4b27      	ldr	r3, [pc, #156]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032de:	6e9d      	ldr	r5, [r3, #104]	; 0x68
	    		,(unsigned int)StatCurrentWh.Chg_Ah_lastFull, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull
 80032e0:	4b26      	ldr	r3, [pc, #152]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032e2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80032e6:	4b25      	ldr	r3, [pc, #148]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032e8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
	    		,(unsigned int)StatCurrentWh.Dschg_Volt_lastFull, (unsigned int)StatCurrentWh.Chg_Volt_lastFull
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032ec:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80032f0:	4b22      	ldr	r3, [pc, #136]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	    		,(unsigned int)StatCurrentWh.Chg_Ah_last
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <PrintFlashStats2TxBuffer+0x140>)
 80032f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	sprintf(TxBuffer, "Stat_Flash:FlashPCount %u, TNightTime %u,TNoBat2Chg %u,TNoInv %u, "
 80032fc:	931d      	str	r3, [sp, #116]	; 0x74
 80032fe:	921c      	str	r2, [sp, #112]	; 0x70
 8003300:	911b      	str	r1, [sp, #108]	; 0x6c
 8003302:	901a      	str	r0, [sp, #104]	; 0x68
 8003304:	9419      	str	r4, [sp, #100]	; 0x64
 8003306:	9518      	str	r5, [sp, #96]	; 0x60
 8003308:	9617      	str	r6, [sp, #92]	; 0x5c
 800330a:	687c      	ldr	r4, [r7, #4]
 800330c:	9416      	str	r4, [sp, #88]	; 0x58
 800330e:	68b8      	ldr	r0, [r7, #8]
 8003310:	9015      	str	r0, [sp, #84]	; 0x54
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	9314      	str	r3, [sp, #80]	; 0x50
 8003316:	6939      	ldr	r1, [r7, #16]
 8003318:	9113      	str	r1, [sp, #76]	; 0x4c
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	9212      	str	r2, [sp, #72]	; 0x48
 800331e:	69be      	ldr	r6, [r7, #24]
 8003320:	9611      	str	r6, [sp, #68]	; 0x44
 8003322:	69fd      	ldr	r5, [r7, #28]
 8003324:	9510      	str	r5, [sp, #64]	; 0x40
 8003326:	6a3c      	ldr	r4, [r7, #32]
 8003328:	940f      	str	r4, [sp, #60]	; 0x3c
 800332a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800332c:	900e      	str	r0, [sp, #56]	; 0x38
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	930d      	str	r3, [sp, #52]	; 0x34
 8003332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003334:	910c      	str	r1, [sp, #48]	; 0x30
 8003336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003338:	920b      	str	r2, [sp, #44]	; 0x2c
 800333a:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800333c:	960a      	str	r6, [sp, #40]	; 0x28
 800333e:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8003340:	9509      	str	r5, [sp, #36]	; 0x24
 8003342:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8003344:	9408      	str	r4, [sp, #32]
 8003346:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003348:	9007      	str	r0, [sp, #28]
 800334a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334c:	9306      	str	r3, [sp, #24]
 800334e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003350:	9105      	str	r1, [sp, #20]
 8003352:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003354:	9204      	str	r2, [sp, #16]
 8003356:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8003358:	9603      	str	r6, [sp, #12]
 800335a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800335c:	9502      	str	r5, [sp, #8]
 800335e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003360:	9401      	str	r4, [sp, #4]
 8003362:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003364:	9000      	str	r0, [sp, #0]
 8003366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003368:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800336a:	4905      	ldr	r1, [pc, #20]	; (8003380 <PrintFlashStats2TxBuffer+0x144>)
 800336c:	4805      	ldr	r0, [pc, #20]	; (8003384 <PrintFlashStats2TxBuffer+0x148>)
 800336e:	f00b f92b 	bl	800e5c8 <siprintf>
	    	    );
}
 8003372:	bf00      	nop
 8003374:	376c      	adds	r7, #108	; 0x6c
 8003376:	46bd      	mov	sp, r7
 8003378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800337a:	bf00      	nop
 800337c:	20005a28 	.word	0x20005a28
 8003380:	080132ac 	.word	0x080132ac
 8003384:	20005da0 	.word	0x20005da0

08003388 <ShowWhStats>:

void ShowWhStats(void)
{
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338a:	b0b1      	sub	sp, #196	; 0xc4
 800338c:	af1a      	add	r7, sp, #104	; 0x68
			"ChmAhLF %u, DchmAhLF %u, "
			"ChgmAhL %u; ChgmAh-1 %u; ChgmAh-2 %u; ChgmAh-3 %u;"
			"DayCurr %u, Day-1 %u, "
			"Day-2 %u, Day-3 %u, "
    		"\r\n"
    ,(unsigned int )StatCurrentWh.FlashPageCounter, (unsigned int )StatCurrentWh.Time_NightTime, (unsigned int )StatCurrentWh.Time_NoBattery2Chg, (unsigned int )StatCurrentWh.Time_NoInv
 800338e:	4b47      	ldr	r3, [pc, #284]	; (80034ac <ShowWhStats+0x124>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	657b      	str	r3, [r7, #84]	; 0x54
 8003394:	4b45      	ldr	r3, [pc, #276]	; (80034ac <ShowWhStats+0x124>)
 8003396:	69d9      	ldr	r1, [r3, #28]
 8003398:	6539      	str	r1, [r7, #80]	; 0x50
 800339a:	4b44      	ldr	r3, [pc, #272]	; (80034ac <ShowWhStats+0x124>)
 800339c:	6a18      	ldr	r0, [r3, #32]
 800339e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80033a0:	4b42      	ldr	r3, [pc, #264]	; (80034ac <ShowWhStats+0x124>)
 80033a2:	699c      	ldr	r4, [r3, #24]
 80033a4:	64bc      	str	r4, [r7, #72]	; 0x48
	,(unsigned int )StatCurrentWh.Wh_BattIn
 80033a6:	4b41      	ldr	r3, [pc, #260]	; (80034ac <ShowWhStats+0x124>)
 80033a8:	685d      	ldr	r5, [r3, #4]
 80033aa:	647d      	str	r5, [r7, #68]	; 0x44
    ,(unsigned int )StatCurrentWh.Wh_BattNoInv, (unsigned int )StatCurrentWh.Wh_BattOut
 80033ac:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <ShowWhStats+0x124>)
 80033ae:	689e      	ldr	r6, [r3, #8]
 80033b0:	643e      	str	r6, [r7, #64]	; 0x40
 80033b2:	4b3e      	ldr	r3, [pc, #248]	; (80034ac <ShowWhStats+0x124>)
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	63fa      	str	r2, [r7, #60]	; 0x3c
	,(unsigned int )StatCurrentWh.Wh_BattRecharge, (unsigned int )StatCurrentWh.Wh_Inverter
 80033b8:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <ShowWhStats+0x124>)
 80033ba:	6959      	ldr	r1, [r3, #20]
 80033bc:	63b9      	str	r1, [r7, #56]	; 0x38
 80033be:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <ShowWhStats+0x124>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	637b      	str	r3, [r7, #52]	; 0x34
	,(unsigned int )StatCurrentWh.Dschg_cycle_count, (unsigned int )StatCurrentWh.Chg_cycle_count
 80033c4:	4b39      	ldr	r3, [pc, #228]	; (80034ac <ShowWhStats+0x124>)
 80033c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80033c8:	6338      	str	r0, [r7, #48]	; 0x30
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <ShowWhStats+0x124>)
 80033cc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80033ce:	62fc      	str	r4, [r7, #44]	; 0x2c
	,(unsigned int)StatCurrentWh.InvFaultCntr, (unsigned int)StatCurrentWh.InvResetCntr
 80033d0:	4b36      	ldr	r3, [pc, #216]	; (80034ac <ShowWhStats+0x124>)
 80033d2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80033d4:	62bd      	str	r5, [r7, #40]	; 0x28
 80033d6:	4b35      	ldr	r3, [pc, #212]	; (80034ac <ShowWhStats+0x124>)
 80033d8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80033da:	627e      	str	r6, [r7, #36]	; 0x24
	,(unsigned int)StatCurrentWh.Chg_Ah_current, (unsigned int)StatCurrentWh.Dschg_Ah_current
 80033dc:	4b33      	ldr	r3, [pc, #204]	; (80034ac <ShowWhStats+0x124>)
 80033de:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80033e2:	623a      	str	r2, [r7, #32]
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <ShowWhStats+0x124>)
 80033e6:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80033e8:	61f9      	str	r1, [r7, #28]
	,(unsigned int)StatCurrentWh.Chg_Ah_lastFull, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull
 80033ea:	4b30      	ldr	r3, [pc, #192]	; (80034ac <ShowWhStats+0x124>)
 80033ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <ShowWhStats+0x124>)
 80033f4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80033f6:	6178      	str	r0, [r7, #20]
	,(unsigned int)StatCurrentWh.Dschg_Ah_lastFull_1, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull_2, (unsigned int)StatCurrentWh.Dschg_Ah_lastFull_3
 80033f8:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <ShowWhStats+0x124>)
 80033fa:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 80033fc:	613c      	str	r4, [r7, #16]
 80033fe:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <ShowWhStats+0x124>)
 8003400:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 8003402:	60fd      	str	r5, [r7, #12]
 8003404:	4b29      	ldr	r3, [pc, #164]	; (80034ac <ShowWhStats+0x124>)
 8003406:	6f9e      	ldr	r6, [r3, #120]	; 0x78
 8003408:	60be      	str	r6, [r7, #8]
	,(unsigned int)StatCurrentWh.Chg_Ah_last, (unsigned int)StatCurrentWh.Chg_Ah_1, (unsigned int)StatCurrentWh.Chg_Ah_2, (unsigned int)StatCurrentWh.Chg_Ah_3
 800340a:	4b28      	ldr	r3, [pc, #160]	; (80034ac <ShowWhStats+0x124>)
 800340c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	4b26      	ldr	r3, [pc, #152]	; (80034ac <ShowWhStats+0x124>)
 8003414:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 8003418:	4b24      	ldr	r3, [pc, #144]	; (80034ac <ShowWhStats+0x124>)
 800341a:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <ShowWhStats+0x124>)
 8003420:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	,(unsigned int)StatCurrentWh.DayDuration_current, (unsigned int)StatCurrentWh.DayDuration_1
 8003424:	4b21      	ldr	r3, [pc, #132]	; (80034ac <ShowWhStats+0x124>)
 8003426:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <ShowWhStats+0x124>)
 800342c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
	,(unsigned int)StatCurrentWh.DayDuration_2, (unsigned int)StatCurrentWh.DayDuration_3
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <ShowWhStats+0x124>)
 8003432:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <ShowWhStats+0x124>)
 8003438:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
	sprintf(TxBuffer, "Wh.FlashPage: %u, TNightTime %u,TNoBatt2Chg %u,TNoInv %u, "
 800343c:	9319      	str	r3, [sp, #100]	; 0x64
 800343e:	9218      	str	r2, [sp, #96]	; 0x60
 8003440:	9117      	str	r1, [sp, #92]	; 0x5c
 8003442:	9016      	str	r0, [sp, #88]	; 0x58
 8003444:	9415      	str	r4, [sp, #84]	; 0x54
 8003446:	9514      	str	r5, [sp, #80]	; 0x50
 8003448:	9613      	str	r6, [sp, #76]	; 0x4c
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	9212      	str	r2, [sp, #72]	; 0x48
 800344e:	68be      	ldr	r6, [r7, #8]
 8003450:	9611      	str	r6, [sp, #68]	; 0x44
 8003452:	68fd      	ldr	r5, [r7, #12]
 8003454:	9510      	str	r5, [sp, #64]	; 0x40
 8003456:	693c      	ldr	r4, [r7, #16]
 8003458:	940f      	str	r4, [sp, #60]	; 0x3c
 800345a:	6978      	ldr	r0, [r7, #20]
 800345c:	900e      	str	r0, [sp, #56]	; 0x38
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	930d      	str	r3, [sp, #52]	; 0x34
 8003462:	69f9      	ldr	r1, [r7, #28]
 8003464:	910c      	str	r1, [sp, #48]	; 0x30
 8003466:	6a3a      	ldr	r2, [r7, #32]
 8003468:	920b      	str	r2, [sp, #44]	; 0x2c
 800346a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800346c:	960a      	str	r6, [sp, #40]	; 0x28
 800346e:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8003470:	9509      	str	r5, [sp, #36]	; 0x24
 8003472:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8003474:	9408      	str	r4, [sp, #32]
 8003476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003478:	9007      	str	r0, [sp, #28]
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	9306      	str	r3, [sp, #24]
 800347e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003480:	9105      	str	r1, [sp, #20]
 8003482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003484:	9204      	str	r2, [sp, #16]
 8003486:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8003488:	9603      	str	r6, [sp, #12]
 800348a:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800348c:	9502      	str	r5, [sp, #8]
 800348e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8003490:	9401      	str	r4, [sp, #4]
 8003492:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003494:	9000      	str	r0, [sp, #0]
 8003496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800349a:	4905      	ldr	r1, [pc, #20]	; (80034b0 <ShowWhStats+0x128>)
 800349c:	4805      	ldr	r0, [pc, #20]	; (80034b4 <ShowWhStats+0x12c>)
 800349e:	f00b f893 	bl	800e5c8 <siprintf>
    );
}
 80034a2:	bf00      	nop
 80034a4:	375c      	adds	r7, #92	; 0x5c
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20005a28 	.word	0x20005a28
 80034b0:	080134c0 	.word	0x080134c0
 80034b4:	20005da0 	.word	0x20005da0

080034b8 <PrintfCalData>:

void PrintfCalData(void)
{
 80034b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ba:	b08b      	sub	sp, #44	; 0x2c
 80034bc:	af08      	add	r7, sp, #32
	sprintf(TxBuffer, "Cal Data: Indicator %u:   "
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <PrintfCalData+0x50>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	4b10      	ldr	r3, [pc, #64]	; (8003508 <PrintfCalData+0x50>)
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <PrintfCalData+0x50>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <PrintfCalData+0x50>)
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	490d      	ldr	r1, [pc, #52]	; (8003508 <PrintfCalData+0x50>)
 80034d4:	6909      	ldr	r1, [r1, #16]
 80034d6:	480c      	ldr	r0, [pc, #48]	; (8003508 <PrintfCalData+0x50>)
 80034d8:	6940      	ldr	r0, [r0, #20]
 80034da:	4c0b      	ldr	r4, [pc, #44]	; (8003508 <PrintfCalData+0x50>)
 80034dc:	69a4      	ldr	r4, [r4, #24]
 80034de:	4d0a      	ldr	r5, [pc, #40]	; (8003508 <PrintfCalData+0x50>)
 80034e0:	69ed      	ldr	r5, [r5, #28]
 80034e2:	4e09      	ldr	r6, [pc, #36]	; (8003508 <PrintfCalData+0x50>)
 80034e4:	6a36      	ldr	r6, [r6, #32]
 80034e6:	9606      	str	r6, [sp, #24]
 80034e8:	9505      	str	r5, [sp, #20]
 80034ea:	9404      	str	r4, [sp, #16]
 80034ec:	9003      	str	r0, [sp, #12]
 80034ee:	9102      	str	r1, [sp, #8]
 80034f0:	9201      	str	r2, [sp, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4904      	ldr	r1, [pc, #16]	; (800350c <PrintfCalData+0x54>)
 80034fa:	4805      	ldr	r0, [pc, #20]	; (8003510 <PrintfCalData+0x58>)
 80034fc:	f00b f864 	bl	800e5c8 <siprintf>
	    	,(int )CalibrationValues.Inv_current_off, (int )CalibrationValues.PV_current_off
	    	,(int )CalibrationValues.PV_voltage, (int )CalibrationValues.Batt_voltage
	    	,(int )CalibrationValues.NTC1_PCB, (int )CalibrationValues.NTC2_Inverter_mos
	    	,(int )CalibrationValues.NTC3_Battery_mos, (int )CalibrationValues.VrefInt
	        );
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003508:	20005c54 	.word	0x20005c54
 800350c:	08013630 	.word	0x08013630
 8003510:	20005da0 	.word	0x20005da0

08003514 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003516:	b09b      	sub	sp, #108	; 0x6c
 8003518:	af0e      	add	r7, sp, #56	; 0x38
 800351a:	6278      	str	r0, [r7, #36]	; 0x24
  /* USER CODE BEGIN 5 */
	uint16_t TxSize = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	85fb      	strh	r3, [r7, #46]	; 0x2e

	InverterMOS_ON();
 8003520:	f7fe fe74 	bl	800220c <InverterMOS_ON>
	HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 0);		//turn ON power for op amp and other stuff
 8003524:	2200      	movs	r2, #0
 8003526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800352a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800352e:	f003 f99b 	bl	8006868 <HAL_GPIO_WritePin>
	RestoreStatisticsFromFLASH();
 8003532:	f7fe f99f 	bl	8001874 <RestoreStatisticsFromFLASH>
	RestoreCalValuesFromFLASH();
 8003536:	f7fe f90d 	bl	8001754 <RestoreCalValuesFromFLASH>
	HAL_UART_MspInit(&huart1);
 800353a:	48a2      	ldr	r0, [pc, #648]	; (80037c4 <StartDefaultTask+0x2b0>)
 800353c:	f000 fd48 	bl	8003fd0 <HAL_UART_MspInit>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8003540:	4ba0      	ldr	r3, [pc, #640]	; (80037c4 <StartDefaultTask+0x2b0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4b9f      	ldr	r3, [pc, #636]	; (80037c4 <StartDefaultTask+0x2b0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0210 	orr.w	r2, r2, #16
 800354e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, RxBuffer, RX_BFR_SIZE);
 8003550:	227f      	movs	r2, #127	; 0x7f
 8003552:	499d      	ldr	r1, [pc, #628]	; (80037c8 <StartDefaultTask+0x2b4>)
 8003554:	489b      	ldr	r0, [pc, #620]	; (80037c4 <StartDefaultTask+0x2b0>)
 8003556:	f005 fd37 	bl	8008fc8 <HAL_UART_Receive_DMA>
	  //HAL_UART_MspDeInit();
#if HW_VER > 01
	BackupPowerON();
 800355a:	f7fe fd15 	bl	8001f88 <BackupPowerON>
#endif
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800355e:	217f      	movs	r1, #127	; 0x7f
 8003560:	489a      	ldr	r0, [pc, #616]	; (80037cc <StartDefaultTask+0x2b8>)
 8003562:	f002 f9a7 	bl	80058b4 <HAL_ADCEx_Calibration_Start>
	osDelay(50);
 8003566:	2032      	movs	r0, #50	; 0x32
 8003568:	f007 f8f5 	bl	800a756 <osDelay>
	if (HAL_ADC_Start_DMA(&hadc1, &Adc1RawReadings.Inv_current , sizeof(Adc1RawReadings)/sizeof(uint32_t)) != HAL_OK) return 0;
 800356c:	2208      	movs	r2, #8
 800356e:	4998      	ldr	r1, [pc, #608]	; (80037d0 <StartDefaultTask+0x2bc>)
 8003570:	4896      	ldr	r0, [pc, #600]	; (80037cc <StartDefaultTask+0x2b8>)
 8003572:	f001 fb77 	bl	8004c64 <HAL_ADC_Start_DMA>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	f040 82b0 	bne.w	8003ade <StartDefaultTask+0x5ca>

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800357e:	2201      	movs	r2, #1
 8003580:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003584:	4893      	ldr	r0, [pc, #588]	; (80037d4 <StartDefaultTask+0x2c0>)
 8003586:	f003 f96f 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800358a:	2201      	movs	r2, #1
 800358c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003590:	4890      	ldr	r0, [pc, #576]	; (80037d4 <StartDefaultTask+0x2c0>)
 8003592:	f003 f969 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8003596:	2201      	movs	r2, #1
 8003598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800359c:	488d      	ldr	r0, [pc, #564]	; (80037d4 <StartDefaultTask+0x2c0>)
 800359e:	f003 f963 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 80035a2:	2201      	movs	r2, #1
 80035a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035a8:	488a      	ldr	r0, [pc, #552]	; (80037d4 <StartDefaultTask+0x2c0>)
 80035aa:	f003 f95d 	bl	8006868 <HAL_GPIO_WritePin>
	PrintConfig2TxBuffer();
 80035ae:	f7ff fe13 	bl	80031d8 <PrintConfig2TxBuffer>
	TxSize = strlen(TxBuffer);
 80035b2:	4889      	ldr	r0, [pc, #548]	; (80037d8 <StartDefaultTask+0x2c4>)
 80035b4:	f7fc fe0c 	bl	80001d0 <strlen>
 80035b8:	4603      	mov	r3, r0
 80035ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 80035bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035be:	461a      	mov	r2, r3
 80035c0:	4985      	ldr	r1, [pc, #532]	; (80037d8 <StartDefaultTask+0x2c4>)
 80035c2:	4880      	ldr	r0, [pc, #512]	; (80037c4 <StartDefaultTask+0x2b0>)
 80035c4:	f005 fc70 	bl	8008ea8 <HAL_UART_Transmit_DMA>
	//BatteryMOS_ON();
	//BatteryMOS_OFF();
	//InverterMOS_OFF();
    //InverterMOS_ON();
	osDelay(5);
 80035c8:	2005      	movs	r0, #5
 80035ca:	f007 f8c4 	bl	800a756 <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035d4:	487f      	ldr	r0, [pc, #508]	; (80037d4 <StartDefaultTask+0x2c0>)
 80035d6:	f003 f947 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035e0:	487c      	ldr	r0, [pc, #496]	; (80037d4 <StartDefaultTask+0x2c0>)
 80035e2:	f003 f941 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80035e6:	2200      	movs	r2, #0
 80035e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035ec:	4879      	ldr	r0, [pc, #484]	; (80037d4 <StartDefaultTask+0x2c0>)
 80035ee:	f003 f93b 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035f8:	4876      	ldr	r0, [pc, #472]	; (80037d4 <StartDefaultTask+0x2c0>)
 80035fa:	f003 f935 	bl	8006868 <HAL_GPIO_WritePin>
	ReadConfig();
 80035fe:	f7fe fc7d 	bl	8001efc <ReadConfig>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ConfigReg & 0b00000001);
 8003602:	4b76      	ldr	r3, [pc, #472]	; (80037dc <StartDefaultTask+0x2c8>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003612:	4870      	ldr	r0, [pc, #448]	; (80037d4 <StartDefaultTask+0x2c0>)
 8003614:	f003 f928 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ConfigReg & 0b00000010);
 8003618:	4b70      	ldr	r3, [pc, #448]	; (80037dc <StartDefaultTask+0x2c8>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003628:	486a      	ldr	r0, [pc, #424]	; (80037d4 <StartDefaultTask+0x2c0>)
 800362a:	f003 f91d 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ConfigReg & 0b00000100);
 800362e:	4b6b      	ldr	r3, [pc, #428]	; (80037dc <StartDefaultTask+0x2c8>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800363e:	4865      	ldr	r0, [pc, #404]	; (80037d4 <StartDefaultTask+0x2c0>)
 8003640:	f003 f912 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ConfigReg & 0b00001000);
 8003644:	4b65      	ldr	r3, [pc, #404]	; (80037dc <StartDefaultTask+0x2c8>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003654:	485f      	ldr	r0, [pc, #380]	; (80037d4 <StartDefaultTask+0x2c0>)
 8003656:	f003 f907 	bl	8006868 <HAL_GPIO_WritePin>
	osDelay(50);
 800365a:	2032      	movs	r0, #50	; 0x32
 800365c:	f007 f87b 	bl	800a756 <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003666:	485b      	ldr	r0, [pc, #364]	; (80037d4 <StartDefaultTask+0x2c0>)
 8003668:	f003 f8fe 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003672:	4858      	ldr	r0, [pc, #352]	; (80037d4 <StartDefaultTask+0x2c0>)
 8003674:	f003 f8f8 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8003678:	2200      	movs	r2, #0
 800367a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800367e:	4855      	ldr	r0, [pc, #340]	; (80037d4 <StartDefaultTask+0x2c0>)
 8003680:	f003 f8f2 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8003684:	2200      	movs	r2, #0
 8003686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800368a:	4852      	ldr	r0, [pc, #328]	; (80037d4 <StartDefaultTask+0x2c0>)
 800368c:	f003 f8ec 	bl	8006868 <HAL_GPIO_WritePin>
    PrintFlashStats2TxBuffer();
 8003690:	f7ff fdd4 	bl	800323c <PrintFlashStats2TxBuffer>
    TxSize = strlen(TxBuffer);
 8003694:	4850      	ldr	r0, [pc, #320]	; (80037d8 <StartDefaultTask+0x2c4>)
 8003696:	f7fc fd9b 	bl	80001d0 <strlen>
 800369a:	4603      	mov	r3, r0
 800369c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 800369e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036a0:	461a      	mov	r2, r3
 80036a2:	494d      	ldr	r1, [pc, #308]	; (80037d8 <StartDefaultTask+0x2c4>)
 80036a4:	4847      	ldr	r0, [pc, #284]	; (80037c4 <StartDefaultTask+0x2b0>)
 80036a6:	f005 fbff 	bl	8008ea8 <HAL_UART_Transmit_DMA>
	osDelay(20);
 80036aa:	2014      	movs	r0, #20
 80036ac:	f007 f853 	bl	800a756 <osDelay>
    PrintfCalData();
 80036b0:	f7ff ff02 	bl	80034b8 <PrintfCalData>
    TxSize = strlen(TxBuffer);
 80036b4:	4848      	ldr	r0, [pc, #288]	; (80037d8 <StartDefaultTask+0x2c4>)
 80036b6:	f7fc fd8b 	bl	80001d0 <strlen>
 80036ba:	4603      	mov	r3, r0
 80036bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 80036be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036c0:	461a      	mov	r2, r3
 80036c2:	4945      	ldr	r1, [pc, #276]	; (80037d8 <StartDefaultTask+0x2c4>)
 80036c4:	483f      	ldr	r0, [pc, #252]	; (80037c4 <StartDefaultTask+0x2b0>)
 80036c6:	f005 fbef 	bl	8008ea8 <HAL_UART_Transmit_DMA>
    osTimerStart(myTimer01Handle, 100);		//start timer
 80036ca:	4b45      	ldr	r3, [pc, #276]	; (80037e0 <StartDefaultTask+0x2cc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2164      	movs	r1, #100	; 0x64
 80036d0:	4618      	mov	r0, r3
 80036d2:	f007 f8ed 	bl	800a8b0 <osTimerStart>
    StatCurrentWh.Chg_Ah_current=0;
 80036d6:	4b43      	ldr	r3, [pc, #268]	; (80037e4 <StartDefaultTask+0x2d0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    StatCurrentWh.Dschg_Ah_current=0;
 80036de:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <StartDefaultTask+0x2d0>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	67da      	str	r2, [r3, #124]	; 0x7c
    StatCountFlagsWs.Dschg_cycle_c2 = 1; 	//block saving dsch data before charging battery (in case of discharged battery during cloudy evenings with multiple possible controller restarts)
 80036e4:	4b40      	ldr	r3, [pc, #256]	; (80037e8 <StartDefaultTask+0x2d4>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	62da      	str	r2, [r3, #44]	; 0x2c
    StatCountFlagsWs.Dschg_cycle_count = 1;	//block saving dsch stats before even starting battery charge
 80036ea:	4b3f      	ldr	r3, [pc, #252]	; (80037e8 <StartDefaultTask+0x2d4>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
    StatCountFlagsWs.ChgStatSaved = 1; 		//chg stats update only after actual charge; prevents any stats update during evening restarts
 80036f0:	4b3d      	ldr	r3, [pc, #244]	; (80037e8 <StartDefaultTask+0x2d4>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
    Adc1Measurements.Batt_voltage = 350;	//strange behavior when restarting at dusk with alkl measurements cleared
 80036f6:	4b3d      	ldr	r3, [pc, #244]	; (80037ec <StartDefaultTask+0x2d8>)
 80036f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80036fc:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {

	osDelay(90);		//one second delay
 80036fe:	205a      	movs	r0, #90	; 0x5a
 8003700:	f007 f829 	bl	800a756 <osDelay>
    HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 0);		//turn ON power for op amp and other stuff; just before soft timer starts
 8003704:	2200      	movs	r2, #0
 8003706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800370a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800370e:	f003 f8ab 	bl	8006868 <HAL_GPIO_WritePin>
    while (!FlagRunMainLoop) {osDelay(2);};		//synchronizing timer with main loop
 8003712:	e002      	b.n	800371a <StartDefaultTask+0x206>
 8003714:	2002      	movs	r0, #2
 8003716:	f007 f81e 	bl	800a756 <osDelay>
 800371a:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <StartDefaultTask+0x2dc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f8      	beq.n	8003714 <StartDefaultTask+0x200>
    //diabling pwr for op amp must be synchronized with ADC. for now permanently ON.
    //HAL_GPIO_WritePin(MEAS_PWR_GPIO_Port, MEAS_PWR_Pin, 1);		//turn OFF power for op amp and other stuff; when procedure is complete
    if (Flag_ShowStats == 3)
 8003722:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <StartDefaultTask+0x2e0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d105      	bne.n	8003736 <StartDefaultTask+0x222>
    {
        Flag_ShowStats = 2;
 800372a:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <StartDefaultTask+0x2e0>)
 800372c:	2202      	movs	r2, #2
 800372e:	601a      	str	r2, [r3, #0]
        ShowWhStats();
 8003730:	f7ff fe2a 	bl	8003388 <ShowWhStats>
 8003734:	e0da      	b.n	80038ec <StartDefaultTask+0x3d8>
    }
    else if (Flag_ShowStats == 2)
 8003736:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <StartDefaultTask+0x2e0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d12e      	bne.n	800379c <StartDefaultTask+0x288>
    {
    	Flag_ShowStats = 1;
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <StartDefaultTask+0x2e0>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]
        		"WsBattNoInv %u; Ws_BattOut %u, "
        		"WsBattRech %u; Ws_Inv %u, "
    			"DuskTime %u, "
    			"ChgmAs %u, DchgmAs %u, "
        		"\r\n"
        ,(unsigned int )StatCurrentWs.Time_NightTime, (unsigned int )StatCurrentWs.Time_NoBattery2Chg, (unsigned int )StatCurrentWs.Time_NoInv
 8003744:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <StartDefaultTask+0x2e4>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	623b      	str	r3, [r7, #32]
 800374a:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <StartDefaultTask+0x2e4>)
 800374c:	6a19      	ldr	r1, [r3, #32]
 800374e:	61f9      	str	r1, [r7, #28]
 8003750:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <StartDefaultTask+0x2e4>)
 8003752:	699b      	ldr	r3, [r3, #24]
    	,(unsigned int )StatCurrentWs.Ws_BattIn
 8003754:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <StartDefaultTask+0x2e4>)
 8003756:	6812      	ldr	r2, [r2, #0]
        ,(unsigned int )StatCurrentWs.Ws_BattNoInv, (unsigned int )StatCurrentWs.Ws_BattOut
 8003758:	4927      	ldr	r1, [pc, #156]	; (80037f8 <StartDefaultTask+0x2e4>)
 800375a:	6849      	ldr	r1, [r1, #4]
 800375c:	4826      	ldr	r0, [pc, #152]	; (80037f8 <StartDefaultTask+0x2e4>)
 800375e:	68c0      	ldr	r0, [r0, #12]
 8003760:	61b8      	str	r0, [r7, #24]
    	,(unsigned int )StatCurrentWs.Ws_BattRecharge, (unsigned int )StatCurrentWs.Ws_Inverter
 8003762:	4c25      	ldr	r4, [pc, #148]	; (80037f8 <StartDefaultTask+0x2e4>)
 8003764:	6924      	ldr	r4, [r4, #16]
 8003766:	4d24      	ldr	r5, [pc, #144]	; (80037f8 <StartDefaultTask+0x2e4>)
 8003768:	68ad      	ldr	r5, [r5, #8]
		,(unsigned int)StatCurrentWs.Time_DuskTime
 800376a:	4e23      	ldr	r6, [pc, #140]	; (80037f8 <StartDefaultTask+0x2e4>)
 800376c:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
		,(unsigned int)StatCurrentWs.ChgAs, (unsigned int)StatCurrentWs.DschgAs
 800376e:	4822      	ldr	r0, [pc, #136]	; (80037f8 <StartDefaultTask+0x2e4>)
 8003770:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8003772:	6178      	str	r0, [r7, #20]
 8003774:	4820      	ldr	r0, [pc, #128]	; (80037f8 <StartDefaultTask+0x2e4>)
 8003776:	6d40      	ldr	r0, [r0, #84]	; 0x54
    	sprintf(TxBuffer, "Ws.TNightTime %u,TNoBat2Chg %u,TNoInv %u, "
 8003778:	9008      	str	r0, [sp, #32]
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	9007      	str	r0, [sp, #28]
 800377e:	9606      	str	r6, [sp, #24]
 8003780:	9505      	str	r5, [sp, #20]
 8003782:	9404      	str	r4, [sp, #16]
 8003784:	69b8      	ldr	r0, [r7, #24]
 8003786:	9003      	str	r0, [sp, #12]
 8003788:	9102      	str	r1, [sp, #8]
 800378a:	9201      	str	r2, [sp, #4]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	491a      	ldr	r1, [pc, #104]	; (80037fc <StartDefaultTask+0x2e8>)
 8003794:	4810      	ldr	r0, [pc, #64]	; (80037d8 <StartDefaultTask+0x2c4>)
 8003796:	f00a ff17 	bl	800e5c8 <siprintf>
 800379a:	e0a7      	b.n	80038ec <StartDefaultTask+0x3d8>
        );
    }
    else if (Flag_ShowStats == 4)	//show flash stats
 800379c:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <StartDefaultTask+0x2e0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d105      	bne.n	80037b0 <StartDefaultTask+0x29c>
    {
    	PrintFlashStats2TxBuffer();
 80037a4:	f7ff fd4a 	bl	800323c <PrintFlashStats2TxBuffer>
    	Flag_ShowStats = 0;
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <StartDefaultTask+0x2e0>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e09d      	b.n	80038ec <StartDefaultTask+0x3d8>
    }
    else if (Flag_ShowStats == 5)		//show config
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <StartDefaultTask+0x2e0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	d123      	bne.n	8003800 <StartDefaultTask+0x2ec>
    {
    	PrintConfig2TxBuffer();
 80037b8:	f7ff fd0e 	bl	80031d8 <PrintConfig2TxBuffer>
    	Flag_ShowStats = 0;
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <StartDefaultTask+0x2e0>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e093      	b.n	80038ec <StartDefaultTask+0x3d8>
 80037c4:	20005bd0 	.word	0x20005bd0
 80037c8:	20005d1c 	.word	0x20005d1c
 80037cc:	20005b24 	.word	0x20005b24
 80037d0:	200061a8 	.word	0x200061a8
 80037d4:	48000400 	.word	0x48000400
 80037d8:	20005da0 	.word	0x20005da0
 80037dc:	20005998 	.word	0x20005998
 80037e0:	20005d9c 	.word	0x20005d9c
 80037e4:	20005a28 	.word	0x20005a28
 80037e8:	200059c0 	.word	0x200059c0
 80037ec:	2000599c 	.word	0x2000599c
 80037f0:	20000264 	.word	0x20000264
 80037f4:	20000260 	.word	0x20000260
 80037f8:	20005c7c 	.word	0x20005c7c
 80037fc:	080136cc 	.word	0x080136cc
    }
    else if (Flag_ShowStats == 1)		//show current Values
 8003800:	4b7e      	ldr	r3, [pc, #504]	; (80039fc <StartDefaultTask+0x4e8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d147      	bne.n	8003898 <StartDefaultTask+0x384>
	{
    	Flag_ShowStats = 0;
 8003808:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <StartDefaultTask+0x4e8>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
				"temp PCB %u; invMOS %u; batMOS %u, "
				" mAInv %u; mAPV %u; "
				"VPV %u; VBat %u; "
				"Ext_I %u, "
				"\r\n"
		,(unsigned int )Uptime.days, (unsigned int )Uptime.hours, (unsigned int )Uptime.minutes, (unsigned int )Uptime.seconds
 800380e:	4b7c      	ldr	r3, [pc, #496]	; (8003a00 <StartDefaultTask+0x4ec>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	623b      	str	r3, [r7, #32]
 8003814:	4b7a      	ldr	r3, [pc, #488]	; (8003a00 <StartDefaultTask+0x4ec>)
 8003816:	6899      	ldr	r1, [r3, #8]
 8003818:	61f9      	str	r1, [r7, #28]
 800381a:	4b79      	ldr	r3, [pc, #484]	; (8003a00 <StartDefaultTask+0x4ec>)
 800381c:	6858      	ldr	r0, [r3, #4]
 800381e:	4b78      	ldr	r3, [pc, #480]	; (8003a00 <StartDefaultTask+0x4ec>)
 8003820:	681c      	ldr	r4, [r3, #0]
		sprintf(TxBuffer, "%u d %u h %u m %u s "
 8003822:	4b78      	ldr	r3, [pc, #480]	; (8003a04 <StartDefaultTask+0x4f0>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	4b77      	ldr	r3, [pc, #476]	; (8003a08 <StartDefaultTask+0x4f4>)
 800382a:	681d      	ldr	r5, [r3, #0]
 800382c:	4b77      	ldr	r3, [pc, #476]	; (8003a0c <StartDefaultTask+0x4f8>)
 800382e:	681e      	ldr	r6, [r3, #0]
 8003830:	4b77      	ldr	r3, [pc, #476]	; (8003a10 <StartDefaultTask+0x4fc>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	617a      	str	r2, [r7, #20]
		,(unsigned int )ConfigReg
		,(unsigned int )FlagInverterMOS, (unsigned int )FlagBatteryMOS, (unsigned int)FlagBackupMOS
		,(unsigned int )Adc1Measurements.NTC1_PCB, (unsigned int )Adc1Measurements.NTC2_Inverter_mos, (unsigned int )Adc1Measurements.NTC3_Battery_mos
 8003836:	4b77      	ldr	r3, [pc, #476]	; (8003a14 <StartDefaultTask+0x500>)
 8003838:	6919      	ldr	r1, [r3, #16]
 800383a:	6139      	str	r1, [r7, #16]
 800383c:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <StartDefaultTask+0x500>)
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b74      	ldr	r3, [pc, #464]	; (8003a14 <StartDefaultTask+0x500>)
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	60ba      	str	r2, [r7, #8]
		,(unsigned int)Adc1Measurements.Inv_current
 8003848:	4b72      	ldr	r3, [pc, #456]	; (8003a14 <StartDefaultTask+0x500>)
 800384a:	6819      	ldr	r1, [r3, #0]
 800384c:	6079      	str	r1, [r7, #4]
		,(unsigned int)Adc1Measurements.PV_current
 800384e:	4b71      	ldr	r3, [pc, #452]	; (8003a14 <StartDefaultTask+0x500>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	603b      	str	r3, [r7, #0]
		,(unsigned int)Adc1Measurements.PV_voltage
 8003854:	4b6f      	ldr	r3, [pc, #444]	; (8003a14 <StartDefaultTask+0x500>)
 8003856:	6899      	ldr	r1, [r3, #8]
		,(unsigned int)Adc1Measurements.Batt_voltage	// (unsigned int)Adc1Measurements.Batt_voltage%100
 8003858:	4b6e      	ldr	r3, [pc, #440]	; (8003a14 <StartDefaultTask+0x500>)
 800385a:	68da      	ldr	r2, [r3, #12]
		sprintf(TxBuffer, "%u d %u h %u m %u s "
 800385c:	4b6e      	ldr	r3, [pc, #440]	; (8003a18 <StartDefaultTask+0x504>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	930d      	str	r3, [sp, #52]	; 0x34
 8003862:	920c      	str	r2, [sp, #48]	; 0x30
 8003864:	910b      	str	r1, [sp, #44]	; 0x2c
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	930a      	str	r3, [sp, #40]	; 0x28
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	9109      	str	r1, [sp, #36]	; 0x24
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	9208      	str	r2, [sp, #32]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	9307      	str	r3, [sp, #28]
 8003876:	6939      	ldr	r1, [r7, #16]
 8003878:	9106      	str	r1, [sp, #24]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	9205      	str	r2, [sp, #20]
 800387e:	9604      	str	r6, [sp, #16]
 8003880:	9503      	str	r5, [sp, #12]
 8003882:	69bd      	ldr	r5, [r7, #24]
 8003884:	9502      	str	r5, [sp, #8]
 8003886:	9401      	str	r4, [sp, #4]
 8003888:	9000      	str	r0, [sp, #0]
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	4963      	ldr	r1, [pc, #396]	; (8003a1c <StartDefaultTask+0x508>)
 8003890:	4863      	ldr	r0, [pc, #396]	; (8003a20 <StartDefaultTask+0x50c>)
 8003892:	f00a fe99 	bl	800e5c8 <siprintf>
 8003896:	e029      	b.n	80038ec <StartDefaultTask+0x3d8>
		,(unsigned int)FlagExt_I
		);
	}
    else if (Flag_ShowStats == 62)	//show calibration data
 8003898:	4b58      	ldr	r3, [pc, #352]	; (80039fc <StartDefaultTask+0x4e8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b3e      	cmp	r3, #62	; 0x3e
 800389e:	d10b      	bne.n	80038b8 <StartDefaultTask+0x3a4>
    {
    	PrintfCalData();
 80038a0:	f7ff fe0a 	bl	80034b8 <PrintfCalData>
    	if (Flag_ShowStats) Flag_ShowStats--;
 80038a4:	4b55      	ldr	r3, [pc, #340]	; (80039fc <StartDefaultTask+0x4e8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01f      	beq.n	80038ec <StartDefaultTask+0x3d8>
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <StartDefaultTask+0x4e8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	4a52      	ldr	r2, [pc, #328]	; (80039fc <StartDefaultTask+0x4e8>)
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e019      	b.n	80038ec <StartDefaultTask+0x3d8>
    }
    else if (Flag_ShowStats == 60)		//show help
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <StartDefaultTask+0x4e8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b3c      	cmp	r3, #60	; 0x3c
 80038be:	d109      	bne.n	80038d4 <StartDefaultTask+0x3c0>
    {
    	if (Flag_ShowStats) Flag_ShowStats--;
 80038c0:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <StartDefaultTask+0x4e8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d011      	beq.n	80038ec <StartDefaultTask+0x3d8>
 80038c8:	4b4c      	ldr	r3, [pc, #304]	; (80039fc <StartDefaultTask+0x4e8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	4a4b      	ldr	r2, [pc, #300]	; (80039fc <StartDefaultTask+0x4e8>)
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e00b      	b.n	80038ec <StartDefaultTask+0x3d8>
    }
    else
    {
    	if (Flag_ShowStats) Flag_ShowStats--;
 80038d4:	4b49      	ldr	r3, [pc, #292]	; (80039fc <StartDefaultTask+0x4e8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <StartDefaultTask+0x3d2>
 80038dc:	4b47      	ldr	r3, [pc, #284]	; (80039fc <StartDefaultTask+0x4e8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	4a46      	ldr	r2, [pc, #280]	; (80039fc <StartDefaultTask+0x4e8>)
 80038e4:	6013      	str	r3, [r2, #0]
    	TxBuffer[0]=0;
 80038e6:	4b4e      	ldr	r3, [pc, #312]	; (8003a20 <StartDefaultTask+0x50c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
    }
    TxSize = strlen(TxBuffer);
 80038ec:	484c      	ldr	r0, [pc, #304]	; (8003a20 <StartDefaultTask+0x50c>)
 80038ee:	f7fc fc6f 	bl	80001d0 <strlen>
 80038f2:	4603      	mov	r3, r0
 80038f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (TxSize>TX_BFR_SIZE) TxSize=TX_BFR_SIZE;
 80038f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fc:	d302      	bcc.n	8003904 <StartDefaultTask+0x3f0>
 80038fe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003902:	85fb      	strh	r3, [r7, #46]	; 0x2e
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)TxBuffer, TxSize);
 8003904:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003906:	461a      	mov	r2, r3
 8003908:	4945      	ldr	r1, [pc, #276]	; (8003a20 <StartDefaultTask+0x50c>)
 800390a:	4846      	ldr	r0, [pc, #280]	; (8003a24 <StartDefaultTask+0x510>)
 800390c:	f005 facc 	bl	8008ea8 <HAL_UART_Transmit_DMA>

    if (Flag_StoreStatistics)
 8003910:	4b45      	ldr	r3, [pc, #276]	; (8003a28 <StartDefaultTask+0x514>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d004      	beq.n	8003922 <StartDefaultTask+0x40e>
    	{
    		StoreStatistics2FLASH();
 8003918:	f7fe f83c 	bl	8001994 <StoreStatistics2FLASH>
    		Flag_StoreStatistics=0;
 800391c:	4b42      	ldr	r3, [pc, #264]	; (8003a28 <StartDefaultTask+0x514>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
    	}

    /*main algorithm*/
    //**************************************CONFIG ENERGY TO MAINS************************************
    if (ConfigReg < CONFIG_BATT_0DELAY)
 8003922:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <StartDefaultTask+0x4f0>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d825      	bhi.n	8003976 <StartDefaultTask+0x462>
    {
    	//is OK to switch on INV mosfet?
    	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 800392a:	4b3a      	ldr	r3, [pc, #232]	; (8003a14 <StartDefaultTask+0x500>)
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	2b50      	cmp	r3, #80	; 0x50
 8003930:	d905      	bls.n	800393e <StartDefaultTask+0x42a>
    	{//no, its too hot
    		ConfigReg = CONFIG_BATT_0DELAY;	//config changed 'energy to battery'
 8003932:	4b34      	ldr	r3, [pc, #208]	; (8003a04 <StartDefaultTask+0x4f0>)
 8003934:	2207      	movs	r2, #7
 8003936:	701a      	strb	r2, [r3, #0]
			InverterMOS_OFF();		//OVT for InvMosfet usually happens during battery discharge
 8003938:	f7fe fc80 	bl	800223c <InverterMOS_OFF>
 800393c:	e6df      	b.n	80036fe <StartDefaultTask+0x1ea>
    	else
    	{//yes, you can switch on INV mosfet
    		//is it day?
    		//caution: too high PV_CURRENT_MIN causes troublesome starting at dawn, controllers disables BATMOSON (batt discharged) but PV current is too weak to keep INVerter operational
    		//too low PV_CURRENT_MIN causes troublesome change operation mode at dusk - inverter causes restarts of controller overloading weak PV current source
			if (Adc1Measurements.PV_current > (PV_CURRENT_MIN - PVCurrentHysteresis) ||
 800393e:	4b35      	ldr	r3, [pc, #212]	; (8003a14 <StartDefaultTask+0x500>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4a3a      	ldr	r2, [pc, #232]	; (8003a2c <StartDefaultTask+0x518>)
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	f5c2 7291 	rsb	r2, r2, #290	; 0x122
 800394a:	4293      	cmp	r3, r2
 800394c:	d804      	bhi.n	8003958 <StartDefaultTask+0x444>
					Adc1Measurements.PV_voltage > PV_OCV_VOLGATE)
 800394e:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <StartDefaultTask+0x500>)
 8003950:	689b      	ldr	r3, [r3, #8]
			if (Adc1Measurements.PV_current > (PV_CURRENT_MIN - PVCurrentHysteresis) ||
 8003952:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8003956:	d908      	bls.n	800396a <StartDefaultTask+0x456>
			{//yes, its day
				PVCurrentHysteresis = PV_CURRENT_HYST;	//to prevent multiple switching day/night at dawn and dusk
 8003958:	4b34      	ldr	r3, [pc, #208]	; (8003a2c <StartDefaultTask+0x518>)
 800395a:	2246      	movs	r2, #70	; 0x46
 800395c:	601a      	str	r2, [r3, #0]
				InverterOn_batteryAsBackup();
 800395e:	f7ff fa93 	bl	8002e88 <InverterOn_batteryAsBackup>
				StatCountFlagsWs.Time_Daytime=1;		//enable to count daytime
 8003962:	4b33      	ldr	r3, [pc, #204]	; (8003a30 <StartDefaultTask+0x51c>)
 8003964:	2201      	movs	r2, #1
 8003966:	63da      	str	r2, [r3, #60]	; 0x3c
 8003968:	e0b8      	b.n	8003adc <StartDefaultTask+0x5c8>
			}//end of its day
    		else
    		{//no, its night
    			PVCurrentHysteresis = 0;	//to prevent multiple switching day/night at dawn and dusk
 800396a:	4b30      	ldr	r3, [pc, #192]	; (8003a2c <StartDefaultTask+0x518>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
    			DischargeProcedure();
 8003970:	f7ff fb4a 	bl	8003008 <DischargeProcedure>
 8003974:	e6c3      	b.n	80036fe <StartDefaultTask+0x1ea>
    		}//closing "its night"
    	}//closing "can switch INV ON"
    }//closing MAINS config
    //************************************CONFIG ENERGY TO BATTERY*********************************
    else if (ConfigReg > CONFIG_MAINS_6DELAY &&
 8003976:	4b23      	ldr	r3, [pc, #140]	; (8003a04 <StartDefaultTask+0x4f0>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b06      	cmp	r3, #6
 800397c:	f240 809d 	bls.w	8003aba <StartDefaultTask+0x5a6>
    		ConfigReg < CONFIG_MAINS_NOBATTDSCHG)
 8003980:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <StartDefaultTask+0x4f0>)
 8003982:	781b      	ldrb	r3, [r3, #0]
    else if (ConfigReg > CONFIG_MAINS_6DELAY &&
 8003984:	2b0d      	cmp	r3, #13
 8003986:	f200 8098 	bhi.w	8003aba <StartDefaultTask+0x5a6>
    {
		//is OK to switch on battery mosfet?
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <StartDefaultTask+0x500>)
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b50      	cmp	r3, #80	; 0x50
 8003990:	d903      	bls.n	800399a <StartDefaultTask+0x486>
		{//no, mosfet's too hot
			ConfigReg = CONFIG_MAINS_0DELAY;	//change config energy to mains
 8003992:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <StartDefaultTask+0x4f0>)
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 8003998:	e0a0      	b.n	8003adc <StartDefaultTask+0x5c8>
		}
		else
		{//yes, you can switch on battery mosfet
			//is it a day?
			if (Adc1Measurements.PV_current > (PV_CURRENT_MIN - PVCurrentHysteresis) || Adc1Measurements.PV_voltage > PV_OCV_VOLGATE)
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <StartDefaultTask+0x500>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4a23      	ldr	r2, [pc, #140]	; (8003a2c <StartDefaultTask+0x518>)
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	f5c2 7291 	rsb	r2, r2, #290	; 0x122
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d804      	bhi.n	80039b4 <StartDefaultTask+0x4a0>
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <StartDefaultTask+0x500>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 80039b2:	d97a      	bls.n	8003aaa <StartDefaultTask+0x596>
			{//yes, its day
				PVCurrentHysteresis = PV_CURRENT_HYST;	//to prevent multiple switching day/night at dawn and dusk
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <StartDefaultTask+0x518>)
 80039b6:	2246      	movs	r2, #70	; 0x46
 80039b8:	601a      	str	r2, [r3, #0]
				StatCountFlagsWs.Time_Daytime=1;		//enable to count daytime
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <StartDefaultTask+0x51c>)
 80039bc:	2201      	movs	r2, #1
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c
				//is batt OK to charge
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <StartDefaultTask+0x500>)
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <StartDefaultTask+0x520>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f203 1391 	addw	r3, r3, #401	; 0x191
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d233      	bcs.n	8003a38 <StartDefaultTask+0x524>
						Adc1Measurements.Batt_voltage > BATT_CRITICAL_MIN_VOLTAGE)
 80039d0:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <StartDefaultTask+0x500>)
 80039d2:	68db      	ldr	r3, [r3, #12]
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 80039d4:	2bf0      	cmp	r3, #240	; 0xf0
 80039d6:	d92f      	bls.n	8003a38 <StartDefaultTask+0x524>
				{//yes, ok to charge
					BatteryMOS_ON();
 80039d8:	f7fe fba8 	bl	800212c <BatteryMOS_ON>
					InverterMOS_OFF();
 80039dc:	f7fe fc2e 	bl	800223c <InverterMOS_OFF>
					VoltHysteresisChg = BATT_VOLTAGE_MAXHYSTERESIS;
 80039e0:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <StartDefaultTask+0x520>)
 80039e2:	2214      	movs	r2, #20
 80039e4:	601a      	str	r2, [r3, #0]
					StatCountFlagsWs.Ws_BattIn=1;	//enable to count energy stored in battery, in 1Sectimer
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <StartDefaultTask+0x51c>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
					StatCountFlagsWs.Chg_cycle_count = 0;	//when battery charging unlock flag enabling counting dschg cycles
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <StartDefaultTask+0x51c>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
					StatCountFlagsWs.ChgAs=1;		//enable counting ampere-seconds
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <StartDefaultTask+0x51c>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	651a      	str	r2, [r3, #80]	; 0x50
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 80039f8:	e05d      	b.n	8003ab6 <StartDefaultTask+0x5a2>
 80039fa:	bf00      	nop
 80039fc:	20000260 	.word	0x20000260
 8003a00:	20005a18 	.word	0x20005a18
 8003a04:	20005998 	.word	0x20005998
 8003a08:	20000244 	.word	0x20000244
 8003a0c:	20000240 	.word	0x20000240
 8003a10:	20000248 	.word	0x20000248
 8003a14:	2000599c 	.word	0x2000599c
 8003a18:	2000024c 	.word	0x2000024c
 8003a1c:	08013764 	.word	0x08013764
 8003a20:	20005da0 	.word	0x20005da0
 8003a24:	20005bd0 	.word	0x20005bd0
 8003a28:	2000025c 	.word	0x2000025c
 8003a2c:	20000258 	.word	0x20000258
 8003a30:	200059c0 	.word	0x200059c0
 8003a34:	20000250 	.word	0x20000250
				}
				else
				{//no, batt not OK to charge
					InverterMOS_ON();
 8003a38:	f7fe fbe8 	bl	800220c <InverterMOS_ON>
					BatteryMOS_OFF();
 8003a3c:	f7fe fbb6 	bl	80021ac <BatteryMOS_OFF>
					StatCountFlagsWs.Time_NoBattery2Chg=1;	//enable to count time without possibility to charge battery, in 1Sectimer
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <StartDefaultTask+0x5d4>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	621a      	str	r2, [r3, #32]
					VoltHysteresisChg = 0;
 8003a46:	4b29      	ldr	r3, [pc, #164]	; (8003aec <StartDefaultTask+0x5d8>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
					if ((Adc1Measurements.Batt_voltage) > (BATT_MAX_VOLTAGE+VoltHysteresisChg))
 8003a4c:	4b28      	ldr	r3, [pc, #160]	; (8003af0 <StartDefaultTask+0x5dc>)
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <StartDefaultTask+0x5d8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f203 1391 	addw	r3, r3, #401	; 0x191
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d92c      	bls.n	8003ab6 <StartDefaultTask+0x5a2>
					{//if battery fully charged, check if it was moment ago.
						StatCurrentWh.Chg_Ah_lastFull=StatCurrentWh.Chg_Ah_current;	//store fully chg Ah
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <StartDefaultTask+0x5e0>)
 8003a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a62:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <StartDefaultTask+0x5e0>)
 8003a64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
						if (!StatCountFlagsWs.Chg_cycle_c2 && StatCountFlagsWs.Chg_cycle_count)
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <StartDefaultTask+0x5d4>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10e      	bne.n	8003a8e <StartDefaultTask+0x57a>
 8003a70:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <StartDefaultTask+0x5d4>)
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <StartDefaultTask+0x57a>
						{
							StatCurrentWh.Chg_Volt_lastFull = Adc1Measurements.Batt_voltage;	//store lastvoltage
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <StartDefaultTask+0x5dc>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <StartDefaultTask+0x5e0>)
 8003a7e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
							StatCountFlagsWs.Chg_cycle_c2 = 1;
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <StartDefaultTask+0x5d4>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
							StatCountFlagsWs.Dschg_cycle_c2 = 0;
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <StartDefaultTask+0x5d4>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	62da      	str	r2, [r3, #44]	; 0x2c
						}
						if (!StatCountFlagsWs.Chg_cycle_count)
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <StartDefaultTask+0x5d4>)
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <StartDefaultTask+0x5a2>
						{
							StatCountFlagsWs.Chg_cycle_count = 1; //if not, set flag 'fully charged' to count/set only once
 8003a96:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <StartDefaultTask+0x5d4>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
							StatCountFlagsWs.Dschg_cycle_count = 0;	//clear flag to enable dschg counter when batt empty
 8003a9c:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <StartDefaultTask+0x5d4>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24
							StatCurrentWh.Dschg_Ah_current=0;	//clear discharge Ah
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <StartDefaultTask+0x5e0>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	67da      	str	r2, [r3, #124]	; 0x7c
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 8003aa8:	e005      	b.n	8003ab6 <StartDefaultTask+0x5a2>
					}
				}
			}
			else
			{//no, its night
				PVCurrentHysteresis = 0;	//to prevent multiple switching day/night at dawn and dusk
 8003aaa:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <StartDefaultTask+0x5e4>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
				DischargeProcedure();
 8003ab0:	f7ff faaa 	bl	8003008 <DischargeProcedure>
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 8003ab4:	e012      	b.n	8003adc <StartDefaultTask+0x5c8>
				if (Adc1Measurements.Batt_voltage < (BATT_MAX_VOLTAGE+VoltHysteresisChg)  &&
 8003ab6:	bf00      	nop
		if (Adc1Measurements.NTC3_Battery_mos > MOSFET_MAX_TEMP)
 8003ab8:	e010      	b.n	8003adc <StartDefaultTask+0x5c8>
			}//closing "its night"
		}//closing "you can switch on batt mosfet"
    }//closing "config battery"
    //************************************CONFIG Spare ENERGY TO BATTERY, but no battery discharge*********************************
    else if (ConfigReg == CONFIG_MAINS_NOBATTDSCHG)
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <StartDefaultTask+0x5e8>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b0e      	cmp	r3, #14
 8003ac0:	f47f ae1d 	bne.w	80036fe <StartDefaultTask+0x1ea>
    {//is OK to switch on INV mosfet?
    	if (Adc1Measurements.NTC2_Inverter_mos > MOSFET_MAX_TEMP)
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <StartDefaultTask+0x5dc>)
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	2b50      	cmp	r3, #80	; 0x50
 8003aca:	d905      	bls.n	8003ad8 <StartDefaultTask+0x5c4>
    	{//no, its too hot
    		ConfigReg = CONFIG_BATT_0DELAY;	//config changed 'energy to battery'
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <StartDefaultTask+0x5e8>)
 8003ace:	2207      	movs	r2, #7
 8003ad0:	701a      	strb	r2, [r3, #0]
			InverterMOS_OFF();		//OVT for InvMosfet usually happens during battery discharge
 8003ad2:	f7fe fbb3 	bl	800223c <InverterMOS_OFF>
 8003ad6:	e612      	b.n	80036fe <StartDefaultTask+0x1ea>
    	}
    	else
    	{//yes, you can switch on INV mosfet
    		InverterOn_batteryAsBackup();
 8003ad8:	f7ff f9d6 	bl	8002e88 <InverterOn_batteryAsBackup>
	osDelay(90);		//one second delay
 8003adc:	e60f      	b.n	80036fe <StartDefaultTask+0x1ea>
	if (HAL_ADC_Start_DMA(&hadc1, &Adc1RawReadings.Inv_current , sizeof(Adc1RawReadings)/sizeof(uint32_t)) != HAL_OK) return 0;
 8003ade:	bf00      	nop
    	}//closing "ok to switch ON INV mosfet"
    }//closing config "spare energy to battery"
  }//closing main loop
  /* USER CODE END 5 */
}
 8003ae0:	3734      	adds	r7, #52	; 0x34
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200059c0 	.word	0x200059c0
 8003aec:	20000250 	.word	0x20000250
 8003af0:	2000599c 	.word	0x2000599c
 8003af4:	20005a28 	.word	0x20005a28
 8003af8:	20000258 	.word	0x20000258
 8003afc:	20005998 	.word	0x20005998

08003b00 <Callback01>:

/* Callback01 function */
void Callback01(void *argument)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	if (count_second) count_second--;
 8003b08:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <Callback01+0x1a8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <Callback01+0x1c>
 8003b10:	4b65      	ldr	r3, [pc, #404]	; (8003ca8 <Callback01+0x1a8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <Callback01+0x1a8>)
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e059      	b.n	8003bd0 <Callback01+0xd0>
					else
					{
						count_second = TICKS_ONESECOND;	//1 for 1sec
 8003b1c:	4b62      	ldr	r3, [pc, #392]	; (8003ca8 <Callback01+0x1a8>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
						Uptime.seconds++;
 8003b22:	4b62      	ldr	r3, [pc, #392]	; (8003cac <Callback01+0x1ac>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3301      	adds	r3, #1
 8003b28:	4a60      	ldr	r2, [pc, #384]	; (8003cac <Callback01+0x1ac>)
 8003b2a:	6013      	str	r3, [r2, #0]
						LedStatusShow();
 8003b2c:	f7fd fd40 	bl	80015b0 <LedStatusShow>
						if (!Flag_ShowStats) Flag_ShowStats=2;				//once a second show secondy stat alternatively with measurements
 8003b30:	4b5f      	ldr	r3, [pc, #380]	; (8003cb0 <Callback01+0x1b0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <Callback01+0x3e>
 8003b38:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <Callback01+0x1b0>)
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	601a      	str	r2, [r3, #0]
						if (count_minutes) count_minutes--;
 8003b3e:	4b5d      	ldr	r3, [pc, #372]	; (8003cb4 <Callback01+0x1b4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <Callback01+0x52>
 8003b46:	4b5b      	ldr	r3, [pc, #364]	; (8003cb4 <Callback01+0x1b4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	4a59      	ldr	r2, [pc, #356]	; (8003cb4 <Callback01+0x1b4>)
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	e03e      	b.n	8003bd0 <Callback01+0xd0>
						else
						{
							count_minutes = TICKS_ONEMINUTE;	//59 for 1 minute
 8003b52:	4b58      	ldr	r3, [pc, #352]	; (8003cb4 <Callback01+0x1b4>)
 8003b54:	223b      	movs	r2, #59	; 0x3b
 8003b56:	601a      	str	r2, [r3, #0]
							Uptime.minutes++;
 8003b58:	4b54      	ldr	r3, [pc, #336]	; (8003cac <Callback01+0x1ac>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	4a53      	ldr	r2, [pc, #332]	; (8003cac <Callback01+0x1ac>)
 8003b60:	6053      	str	r3, [r2, #4]
							Uptime.seconds=0;
 8003b62:	4b52      	ldr	r3, [pc, #328]	; (8003cac <Callback01+0x1ac>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
							ReadConfig();
 8003b68:	f7fe f9c8 	bl	8001efc <ReadConfig>
							Flag_ShowStats=3;				//once a minute show hourly stat
 8003b6c:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <Callback01+0x1b0>)
 8003b6e:	2203      	movs	r2, #3
 8003b70:	601a      	str	r2, [r3, #0]
							if (count_hours) count_hours--;	//60 minutes for one hour
 8003b72:	4b51      	ldr	r3, [pc, #324]	; (8003cb8 <Callback01+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <Callback01+0x86>
 8003b7a:	4b4f      	ldr	r3, [pc, #316]	; (8003cb8 <Callback01+0x1b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	4a4d      	ldr	r2, [pc, #308]	; (8003cb8 <Callback01+0x1b8>)
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	e024      	b.n	8003bd0 <Callback01+0xd0>
							else
							{
								Calculate_WattHours();
 8003b86:	f7fe f92d 	bl	8001de4 <Calculate_WattHours>
								count_hours = TICKS_ONEHOUR;
 8003b8a:	4b4b      	ldr	r3, [pc, #300]	; (8003cb8 <Callback01+0x1b8>)
 8003b8c:	223b      	movs	r2, #59	; 0x3b
 8003b8e:	601a      	str	r2, [r3, #0]
								Uptime.hours++;
 8003b90:	4b46      	ldr	r3, [pc, #280]	; (8003cac <Callback01+0x1ac>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	3301      	adds	r3, #1
 8003b96:	4a45      	ldr	r2, [pc, #276]	; (8003cac <Callback01+0x1ac>)
 8003b98:	6093      	str	r3, [r2, #8]
								Uptime.minutes=0;
 8003b9a:	4b44      	ldr	r3, [pc, #272]	; (8003cac <Callback01+0x1ac>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	605a      	str	r2, [r3, #4]
#if FLASHSTATSAVE_PERIOD == 0	//FLASHSTATSAVE_PERIOD 0-every hour,
								Flag_StoreStatistics = 1;
 8003ba0:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <Callback01+0x1bc>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
#endif
								if (count_days) count_days--;
 8003ba6:	4b46      	ldr	r3, [pc, #280]	; (8003cc0 <Callback01+0x1c0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <Callback01+0xba>
 8003bae:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <Callback01+0x1c0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	4a42      	ldr	r2, [pc, #264]	; (8003cc0 <Callback01+0x1c0>)
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	e00a      	b.n	8003bd0 <Callback01+0xd0>
								else
								{
									count_days = TICKS_ONEDAY;
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <Callback01+0x1c0>)
 8003bbc:	2217      	movs	r2, #23
 8003bbe:	601a      	str	r2, [r3, #0]
									Uptime.days++;
 8003bc0:	4b3a      	ldr	r3, [pc, #232]	; (8003cac <Callback01+0x1ac>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	4a39      	ldr	r2, [pc, #228]	; (8003cac <Callback01+0x1ac>)
 8003bc8:	60d3      	str	r3, [r2, #12]
									Uptime.hours=0;
 8003bca:	4b38      	ldr	r3, [pc, #224]	; (8003cac <Callback01+0x1ac>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	609a      	str	r2, [r3, #8]
								}
							}
						}
					}
		Calculate_WattSeconds();
 8003bd0:	f7fd ffbe 	bl	8001b50 <Calculate_WattSeconds>
		HAL_ADC_Start(&hadc1);
 8003bd4:	483b      	ldr	r0, [pc, #236]	; (8003cc4 <Callback01+0x1c4>)
 8003bd6:	f000 ffe1 	bl	8004b9c <HAL_ADC_Start>
#ifdef DEBUG_EN
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
#endif
		uint32_t temp;
		//Adc1Measurements.Inv_current = ConvertIValue(Adc1RawReadings.Inv_current);
		temp = 	ConvertIValue(Adc1RawReadings.Inv_current);
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <Callback01+0x1c8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fc12 	bl	8002408 <ConvertIValue>
 8003be4:	60f8      	str	r0, [r7, #12]
		if ( temp > CalibrationValues.Inv_current_off) Adc1Measurements.Inv_current = temp-CalibrationValues.Inv_current_off;
 8003be6:	4b39      	ldr	r3, [pc, #228]	; (8003ccc <Callback01+0x1cc>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d907      	bls.n	8003c02 <Callback01+0x102>
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <Callback01+0x1cc>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	4a34      	ldr	r2, [pc, #208]	; (8003cd0 <Callback01+0x1d0>)
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	e002      	b.n	8003c08 <Callback01+0x108>
		else Adc1Measurements.Inv_current = 0;
 8003c02:	4b33      	ldr	r3, [pc, #204]	; (8003cd0 <Callback01+0x1d0>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
		//Adc1Measurements.PV_current = ConvertIValue(Adc1RawReadings.PV_current) ;
		temp = 	ConvertIValue(Adc1RawReadings.PV_current);
 8003c08:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <Callback01+0x1c8>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe fbfb 	bl	8002408 <ConvertIValue>
 8003c12:	60f8      	str	r0, [r7, #12]
		if (temp > CalibrationValues.PV_current_off) Adc1Measurements.PV_current = temp-CalibrationValues.PV_current_off;
 8003c14:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <Callback01+0x1cc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d907      	bls.n	8003c30 <Callback01+0x130>
 8003c20:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <Callback01+0x1cc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	461a      	mov	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <Callback01+0x1d0>)
 8003c2c:	6053      	str	r3, [r2, #4]
 8003c2e:	e002      	b.n	8003c36 <Callback01+0x136>
		else Adc1Measurements.PV_current = 0;
 8003c30:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <Callback01+0x1d0>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	605a      	str	r2, [r3, #4]
			Adc1Measurements.PV_voltage = ConvertVValue(Adc1RawReadings.PV_voltage) ;
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <Callback01+0x1c8>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fb84 	bl	8002348 <ConvertVValue>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4a23      	ldr	r2, [pc, #140]	; (8003cd0 <Callback01+0x1d0>)
 8003c44:	6093      	str	r3, [r2, #8]
			Adc1Measurements.Batt_voltage = ConvertVValue(Adc1RawReadings.Batt_voltage) ;
 8003c46:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <Callback01+0x1c8>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe fb7c 	bl	8002348 <ConvertVValue>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <Callback01+0x1d0>)
 8003c54:	60d3      	str	r3, [r2, #12]
			Adc1Measurements.NTC1_PCB = ConvertNTCvalue(Adc1RawReadings.NTC1_PCB) ;
 8003c56:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <Callback01+0x1c8>)
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fb00 	bl	8002260 <ConvertNTCvalue>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4a1b      	ldr	r2, [pc, #108]	; (8003cd0 <Callback01+0x1d0>)
 8003c64:	6113      	str	r3, [r2, #16]
			Adc1Measurements.NTC2_Inverter_mos = ConvertNTCvalue(Adc1RawReadings.NTC2_Inverter_mos) ;
 8003c66:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <Callback01+0x1c8>)
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe faf8 	bl	8002260 <ConvertNTCvalue>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <Callback01+0x1d0>)
 8003c74:	6153      	str	r3, [r2, #20]
			Adc1Measurements.NTC3_Battery_mos = ConvertNTCvalue(Adc1RawReadings.NTC3_Battery_mos) ;
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <Callback01+0x1c8>)
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe faf0 	bl	8002260 <ConvertNTCvalue>
 8003c80:	4603      	mov	r3, r0
 8003c82:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <Callback01+0x1d0>)
 8003c84:	6193      	str	r3, [r2, #24]
			FlagExt_I = HAL_GPIO_ReadPin(EXT_I_GPIO_Port, EXT_I_Pin);
 8003c86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c8a:	4812      	ldr	r0, [pc, #72]	; (8003cd4 <Callback01+0x1d4>)
 8003c8c:	f002 fdd4 	bl	8006838 <HAL_GPIO_ReadPin>
 8003c90:	4603      	mov	r3, r0
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <Callback01+0x1d8>)
 8003c96:	601a      	str	r2, [r3, #0]
		FlagRunMainLoop = 1;
 8003c98:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <Callback01+0x1dc>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
  /* USER CODE END Callback01 */
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	2000023c 	.word	0x2000023c
 8003cac:	20005a18 	.word	0x20005a18
 8003cb0:	20000260 	.word	0x20000260
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	20000004 	.word	0x20000004
 8003cbc:	2000025c 	.word	0x2000025c
 8003cc0:	20000008 	.word	0x20000008
 8003cc4:	20005b24 	.word	0x20005b24
 8003cc8:	200061a8 	.word	0x200061a8
 8003ccc:	20005c54 	.word	0x20005c54
 8003cd0:	2000599c 	.word	0x2000599c
 8003cd4:	48000400 	.word	0x48000400
 8003cd8:	2000024c 	.word	0x2000024c
 8003cdc:	20000264 	.word	0x20000264

08003ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003cf2:	f000 fbfd 	bl	80044f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40001000 	.word	0x40001000

08003d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d08:	b672      	cpsid	i
}
 8003d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <Error_Handler+0x8>
	...

08003d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <HAL_MspInit+0x4c>)
 8003d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1a:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <HAL_MspInit+0x4c>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6613      	str	r3, [r2, #96]	; 0x60
 8003d22:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <HAL_MspInit+0x4c>)
 8003d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_MspInit+0x4c>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <HAL_MspInit+0x4c>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d38:	6593      	str	r3, [r2, #88]	; 0x58
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_MspInit+0x4c>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d46:	2200      	movs	r2, #0
 8003d48:	210f      	movs	r1, #15
 8003d4a:	f06f 0001 	mvn.w	r0, #1
 8003d4e:	f001 fec9 	bl	8005ae4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b0a2      	sub	sp, #136	; 0x88
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d78:	f107 0318 	add.w	r3, r7, #24
 8003d7c:	225c      	movs	r2, #92	; 0x5c
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f009 fcc4 	bl	800d70e <memset>
  if(hadc->Instance==ADC1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a3f      	ldr	r2, [pc, #252]	; (8003e88 <HAL_ADC_MspInit+0x128>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d177      	bne.n	8003e80 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003d90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003d96:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003d9a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d9c:	f107 0318 	add.w	r3, r7, #24
 8003da0:	4618      	mov	r0, r3
 8003da2:	f003 fc5f 	bl	8007664 <HAL_RCCEx_PeriphCLKConfig>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003dac:	f7ff ffaa 	bl	8003d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003db0:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <HAL_ADC_MspInit+0x12c>)
 8003db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db4:	4a35      	ldr	r2, [pc, #212]	; (8003e8c <HAL_ADC_MspInit+0x12c>)
 8003db6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dbc:	4b33      	ldr	r3, [pc, #204]	; (8003e8c <HAL_ADC_MspInit+0x12c>)
 8003dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc8:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <HAL_ADC_MspInit+0x12c>)
 8003dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dcc:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <HAL_ADC_MspInit+0x12c>)
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <HAL_ADC_MspInit+0x12c>)
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de0:	4b2a      	ldr	r3, [pc, #168]	; (8003e8c <HAL_ADC_MspInit+0x12c>)
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	4a29      	ldr	r2, [pc, #164]	; (8003e8c <HAL_ADC_MspInit+0x12c>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dec:	4b27      	ldr	r3, [pc, #156]	; (8003e8c <HAL_ADC_MspInit+0x12c>)
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003df8:	230f      	movs	r3, #15
 8003dfa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003dfc:	230b      	movs	r3, #11
 8003dfe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4821      	ldr	r0, [pc, #132]	; (8003e90 <HAL_ADC_MspInit+0x130>)
 8003e0c:	f002 fb9a 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003e10:	2307      	movs	r3, #7
 8003e12:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003e14:	230b      	movs	r3, #11
 8003e16:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e20:	4619      	mov	r1, r3
 8003e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e26:	f002 fb8d 	bl	8006544 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e2c:	4a1a      	ldr	r2, [pc, #104]	; (8003e98 <HAL_ADC_MspInit+0x138>)
 8003e2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e36:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e3c:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003e50:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e64:	480b      	ldr	r0, [pc, #44]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e66:	f001 fe67 	bl	8005b38 <HAL_DMA_Init>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8003e70:	f7ff ff48 	bl	8003d04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e78:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e7a:	4a06      	ldr	r2, [pc, #24]	; (8003e94 <HAL_ADC_MspInit+0x134>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e80:	bf00      	nop
 8003e82:	3788      	adds	r7, #136	; 0x88
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	50040000 	.word	0x50040000
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	48000800 	.word	0x48000800
 8003e94:	20005cd4 	.word	0x20005cd4
 8003e98:	40020008 	.word	0x40020008

08003e9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eac:	d10b      	bne.n	8003ec6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x38>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	4a08      	ldr	r2, [pc, #32]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x38>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eba:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x38>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000

08003ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <HAL_TIM_Base_MspInit+0x38>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10b      	bne.n	8003f02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003eea:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <HAL_TIM_Base_MspInit+0x3c>)
 8003eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <HAL_TIM_Base_MspInit+0x3c>)
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef4:	6613      	str	r3, [r2, #96]	; 0x60
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <HAL_TIM_Base_MspInit+0x3c>)
 8003ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40014400 	.word	0x40014400
 8003f14:	40021000 	.word	0x40021000

08003f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f20:	f107 0314 	add.w	r3, r7, #20
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f38:	d11d      	bne.n	8003f76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_TIM_MspPostInit+0xac>)
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	4a21      	ldr	r2, [pc, #132]	; (8003fc4 <HAL_TIM_MspPostInit+0xac>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f46:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <HAL_TIM_MspPostInit+0xac>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BAT_SWITCH_PWM_Pin;
 8003f52:	2320      	movs	r3, #32
 8003f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f56:	2302      	movs	r3, #2
 8003f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f62:	2301      	movs	r3, #1
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SWITCH_PWM_GPIO_Port, &GPIO_InitStruct);
 8003f66:	f107 0314 	add.w	r3, r7, #20
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f70:	f002 fae8 	bl	8006544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003f74:	e021      	b.n	8003fba <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM16)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <HAL_TIM_MspPostInit+0xb0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d11c      	bne.n	8003fba <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <HAL_TIM_MspPostInit+0xac>)
 8003f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f84:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <HAL_TIM_MspPostInit+0xac>)
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f8c:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <HAL_TIM_MspPostInit+0xac>)
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXT_O_Pin;
 8003f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003faa:	230e      	movs	r3, #14
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_O_GPIO_Port, &GPIO_InitStruct);
 8003fae:	f107 0314 	add.w	r3, r7, #20
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4805      	ldr	r0, [pc, #20]	; (8003fcc <HAL_TIM_MspPostInit+0xb4>)
 8003fb6:	f002 fac5 	bl	8006544 <HAL_GPIO_Init>
}
 8003fba:	bf00      	nop
 8003fbc:	3728      	adds	r7, #40	; 0x28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	48000400 	.word	0x48000400

08003fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b0a0      	sub	sp, #128	; 0x80
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fe8:	f107 0310 	add.w	r3, r7, #16
 8003fec:	225c      	movs	r2, #92	; 0x5c
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f009 fb8c 	bl	800d70e <memset>
  if(huart->Instance==USART1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a56      	ldr	r2, [pc, #344]	; (8004154 <HAL_UART_MspInit+0x184>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	f040 80a4 	bne.w	800414a <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004002:	2301      	movs	r3, #1
 8004004:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004006:	2300      	movs	r3, #0
 8004008:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800400a:	f107 0310 	add.w	r3, r7, #16
 800400e:	4618      	mov	r0, r3
 8004010:	f003 fb28 	bl	8007664 <HAL_RCCEx_PeriphCLKConfig>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800401a:	f7ff fe73 	bl	8003d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800401e:	4b4e      	ldr	r3, [pc, #312]	; (8004158 <HAL_UART_MspInit+0x188>)
 8004020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004022:	4a4d      	ldr	r2, [pc, #308]	; (8004158 <HAL_UART_MspInit+0x188>)
 8004024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004028:	6613      	str	r3, [r2, #96]	; 0x60
 800402a:	4b4b      	ldr	r3, [pc, #300]	; (8004158 <HAL_UART_MspInit+0x188>)
 800402c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004036:	4b48      	ldr	r3, [pc, #288]	; (8004158 <HAL_UART_MspInit+0x188>)
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	4a47      	ldr	r2, [pc, #284]	; (8004158 <HAL_UART_MspInit+0x188>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004042:	4b45      	ldr	r3, [pc, #276]	; (8004158 <HAL_UART_MspInit+0x188>)
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800404e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004052:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004054:	2302      	movs	r3, #2
 8004056:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800405c:	2302      	movs	r3, #2
 800405e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004060:	2307      	movs	r3, #7
 8004062:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004064:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004068:	4619      	mov	r1, r3
 800406a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800406e:	f002 fa69 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004076:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004078:	2302      	movs	r3, #2
 800407a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800407c:	2301      	movs	r3, #1
 800407e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004080:	2302      	movs	r3, #2
 8004082:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004084:	2307      	movs	r3, #7
 8004086:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004088:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800408c:	4619      	mov	r1, r3
 800408e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004092:	f002 fa57 	bl	8006544 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8004096:	4b31      	ldr	r3, [pc, #196]	; (800415c <HAL_UART_MspInit+0x18c>)
 8004098:	4a31      	ldr	r2, [pc, #196]	; (8004160 <HAL_UART_MspInit+0x190>)
 800409a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800409c:	4b2f      	ldr	r3, [pc, #188]	; (800415c <HAL_UART_MspInit+0x18c>)
 800409e:	2202      	movs	r2, #2
 80040a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040a2:	4b2e      	ldr	r3, [pc, #184]	; (800415c <HAL_UART_MspInit+0x18c>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a8:	4b2c      	ldr	r3, [pc, #176]	; (800415c <HAL_UART_MspInit+0x18c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040ae:	4b2b      	ldr	r3, [pc, #172]	; (800415c <HAL_UART_MspInit+0x18c>)
 80040b0:	2280      	movs	r2, #128	; 0x80
 80040b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040b4:	4b29      	ldr	r3, [pc, #164]	; (800415c <HAL_UART_MspInit+0x18c>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040ba:	4b28      	ldr	r3, [pc, #160]	; (800415c <HAL_UART_MspInit+0x18c>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80040c0:	4b26      	ldr	r3, [pc, #152]	; (800415c <HAL_UART_MspInit+0x18c>)
 80040c2:	2220      	movs	r2, #32
 80040c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040c6:	4b25      	ldr	r3, [pc, #148]	; (800415c <HAL_UART_MspInit+0x18c>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80040cc:	4823      	ldr	r0, [pc, #140]	; (800415c <HAL_UART_MspInit+0x18c>)
 80040ce:	f001 fd33 	bl	8005b38 <HAL_DMA_Init>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80040d8:	f7ff fe14 	bl	8003d04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1f      	ldr	r2, [pc, #124]	; (800415c <HAL_UART_MspInit+0x18c>)
 80040e0:	671a      	str	r2, [r3, #112]	; 0x70
 80040e2:	4a1e      	ldr	r2, [pc, #120]	; (800415c <HAL_UART_MspInit+0x18c>)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 80040e8:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <HAL_UART_MspInit+0x194>)
 80040ea:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <HAL_UART_MspInit+0x198>)
 80040ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80040ee:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_UART_MspInit+0x194>)
 80040f0:	2202      	movs	r2, #2
 80040f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_UART_MspInit+0x194>)
 80040f6:	2210      	movs	r2, #16
 80040f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040fa:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_UART_MspInit+0x194>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004100:	4b18      	ldr	r3, [pc, #96]	; (8004164 <HAL_UART_MspInit+0x194>)
 8004102:	2280      	movs	r2, #128	; 0x80
 8004104:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_UART_MspInit+0x194>)
 8004108:	2200      	movs	r2, #0
 800410a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800410c:	4b15      	ldr	r3, [pc, #84]	; (8004164 <HAL_UART_MspInit+0x194>)
 800410e:	2200      	movs	r2, #0
 8004110:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_UART_MspInit+0x194>)
 8004114:	2200      	movs	r2, #0
 8004116:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004118:	4b12      	ldr	r3, [pc, #72]	; (8004164 <HAL_UART_MspInit+0x194>)
 800411a:	2200      	movs	r2, #0
 800411c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800411e:	4811      	ldr	r0, [pc, #68]	; (8004164 <HAL_UART_MspInit+0x194>)
 8004120:	f001 fd0a 	bl	8005b38 <HAL_DMA_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 800412a:	f7ff fdeb 	bl	8003d04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a0c      	ldr	r2, [pc, #48]	; (8004164 <HAL_UART_MspInit+0x194>)
 8004132:	66da      	str	r2, [r3, #108]	; 0x6c
 8004134:	4a0b      	ldr	r2, [pc, #44]	; (8004164 <HAL_UART_MspInit+0x194>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800413a:	2200      	movs	r2, #0
 800413c:	2105      	movs	r1, #5
 800413e:	2025      	movs	r0, #37	; 0x25
 8004140:	f001 fcd0 	bl	8005ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004144:	2025      	movs	r0, #37	; 0x25
 8004146:	f001 fce9 	bl	8005b1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800414a:	bf00      	nop
 800414c:	3780      	adds	r7, #128	; 0x80
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40013800 	.word	0x40013800
 8004158:	40021000 	.word	0x40021000
 800415c:	20005b88 	.word	0x20005b88
 8004160:	40020480 	.word	0x40020480
 8004164:	20005ad8 	.word	0x20005ad8
 8004168:	4002046c 	.word	0x4002046c

0800416c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08c      	sub	sp, #48	; 0x30
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800417c:	2200      	movs	r2, #0
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	2036      	movs	r0, #54	; 0x36
 8004182:	f001 fcaf 	bl	8005ae4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004186:	2036      	movs	r0, #54	; 0x36
 8004188:	f001 fcc8 	bl	8005b1c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800418c:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <HAL_InitTick+0x9c>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <HAL_InitTick+0x9c>)
 8004192:	f043 0310 	orr.w	r3, r3, #16
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
 8004198:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <HAL_InitTick+0x9c>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041a4:	f107 0210 	add.w	r2, r7, #16
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f003 f9c6 	bl	8007540 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80041b4:	f003 f998 	bl	80074e8 <HAL_RCC_GetPCLK1Freq>
 80041b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	4a13      	ldr	r2, [pc, #76]	; (800420c <HAL_InitTick+0xa0>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	0c9b      	lsrs	r3, r3, #18
 80041c4:	3b01      	subs	r3, #1
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <HAL_InitTick+0xa4>)
 80041ca:	4a12      	ldr	r2, [pc, #72]	; (8004214 <HAL_InitTick+0xa8>)
 80041cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <HAL_InitTick+0xa4>)
 80041d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80041d6:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <HAL_InitTick+0xa4>)
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <HAL_InitTick+0xa4>)
 80041de:	2200      	movs	r2, #0
 80041e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_InitTick+0xa4>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80041e8:	4809      	ldr	r0, [pc, #36]	; (8004210 <HAL_InitTick+0xa4>)
 80041ea:	f003 fd45 	bl	8007c78 <HAL_TIM_Base_Init>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80041f4:	4806      	ldr	r0, [pc, #24]	; (8004210 <HAL_InitTick+0xa4>)
 80041f6:	f003 fd97 	bl	8007d28 <HAL_TIM_Base_Start_IT>
 80041fa:	4603      	mov	r3, r0
 80041fc:	e000      	b.n	8004200 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
}
 8004200:	4618      	mov	r0, r3
 8004202:	3730      	adds	r7, #48	; 0x30
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	431bde83 	.word	0x431bde83
 8004210:	20006314 	.word	0x20006314
 8004214:	40001000 	.word	0x40001000

08004218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800421c:	e7fe      	b.n	800421c <NMI_Handler+0x4>

0800421e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004222:	e7fe      	b.n	8004222 <HardFault_Handler+0x4>

08004224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004228:	e7fe      	b.n	8004228 <MemManage_Handler+0x4>

0800422a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800422e:	e7fe      	b.n	800422e <BusFault_Handler+0x4>

08004230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004234:	e7fe      	b.n	8004234 <UsageFault_Handler+0x4>

08004236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004248:	4802      	ldr	r0, [pc, #8]	; (8004254 <DMA1_Channel1_IRQHandler+0x10>)
 800424a:	f001 fe0c 	bl	8005e66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20005cd4 	.word	0x20005cd4

08004258 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800425c:	4807      	ldr	r0, [pc, #28]	; (800427c <USART1_IRQHandler+0x24>)
 800425e:	f004 ff9b 	bl	8009198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <USART1_IRQHandler+0x24>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b10      	cmp	r3, #16
 800426e:	d102      	bne.n	8004276 <USART1_IRQHandler+0x1e>
HAL_UART_RxCpltCallback(&huart1);}
 8004270:	4802      	ldr	r0, [pc, #8]	; (800427c <USART1_IRQHandler+0x24>)
 8004272:	f7fe fc4b 	bl	8002b0c <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20005bd0 	.word	0x20005bd0

08004280 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004284:	4802      	ldr	r0, [pc, #8]	; (8004290 <TIM6_DAC_IRQHandler+0x10>)
 8004286:	f003 ff61 	bl	800814c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20006314 	.word	0x20006314

08004294 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004298:	4802      	ldr	r0, [pc, #8]	; (80042a4 <DMA2_Channel6_IRQHandler+0x10>)
 800429a:	f001 fde4 	bl	8005e66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20005ad8 	.word	0x20005ad8

080042a8 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80042ac:	4802      	ldr	r0, [pc, #8]	; (80042b8 <DMA2_Channel7_IRQHandler+0x10>)
 80042ae:	f001 fdda 	bl	8005e66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20005b88 	.word	0x20005b88

080042bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
	return 1;
 80042c0:	2301      	movs	r3, #1
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <_kill>:

int _kill(int pid, int sig)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042d6:	f009 f8e9 	bl	800d4ac <__errno>
 80042da:	4603      	mov	r3, r0
 80042dc:	2216      	movs	r2, #22
 80042de:	601a      	str	r2, [r3, #0]
	return -1;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <_exit>:

void _exit (int status)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042f4:	f04f 31ff 	mov.w	r1, #4294967295
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ffe7 	bl	80042cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80042fe:	e7fe      	b.n	80042fe <_exit+0x12>

08004300 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e00a      	b.n	8004328 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004312:	f3af 8000 	nop.w
 8004316:	4601      	mov	r1, r0
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	60ba      	str	r2, [r7, #8]
 800431e:	b2ca      	uxtb	r2, r1
 8004320:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	3301      	adds	r3, #1
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	dbf0      	blt.n	8004312 <_read+0x12>
	}

return len;
 8004330:	687b      	ldr	r3, [r7, #4]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b086      	sub	sp, #24
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	e009      	b.n	8004360 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	60ba      	str	r2, [r7, #8]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3301      	adds	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	dbf1      	blt.n	800434c <_write+0x12>
	}
	return len;
 8004368:	687b      	ldr	r3, [r7, #4]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <_close>:

int _close(int file)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
	return -1;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800439a:	605a      	str	r2, [r3, #4]
	return 0;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <_isatty>:

int _isatty(int file)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
	return 1;
 80043b2:	2301      	movs	r3, #1
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
	return 0;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <_sbrk+0x5c>)
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <_sbrk+0x60>)
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <_sbrk+0x64>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <_sbrk+0x64>)
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <_sbrk+0x68>)
 80043fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <_sbrk+0x64>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d207      	bcs.n	800441c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800440c:	f009 f84e 	bl	800d4ac <__errno>
 8004410:	4603      	mov	r3, r0
 8004412:	220c      	movs	r2, #12
 8004414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	e009      	b.n	8004430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <_sbrk+0x64>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <_sbrk+0x64>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <_sbrk+0x64>)
 800442c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20010000 	.word	0x20010000
 800443c:	00000400 	.word	0x00000400
 8004440:	20000268 	.word	0x20000268
 8004444:	200063b8 	.word	0x200063b8

08004448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <SystemInit+0x20>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	4a05      	ldr	r2, [pc, #20]	; (8004468 <SystemInit+0x20>)
 8004454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800446c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004470:	f7ff ffea 	bl	8004448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004474:	480c      	ldr	r0, [pc, #48]	; (80044a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004476:	490d      	ldr	r1, [pc, #52]	; (80044ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8004478:	4a0d      	ldr	r2, [pc, #52]	; (80044b0 <LoopForever+0xe>)
  movs r3, #0
 800447a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800447c:	e002      	b.n	8004484 <LoopCopyDataInit>

0800447e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800447e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004482:	3304      	adds	r3, #4

08004484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004488:	d3f9      	bcc.n	800447e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800448a:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800448c:	4c0a      	ldr	r4, [pc, #40]	; (80044b8 <LoopForever+0x16>)
  movs r3, #0
 800448e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004490:	e001      	b.n	8004496 <LoopFillZerobss>

08004492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004494:	3204      	adds	r2, #4

08004496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004498:	d3fb      	bcc.n	8004492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800449a:	f009 f903 	bl	800d6a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800449e:	f7fd fffb 	bl	8002498 <main>

080044a2 <LoopForever>:

LoopForever:
    b LoopForever
 80044a2:	e7fe      	b.n	80044a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80044a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80044a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044ac:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80044b0:	08013da0 	.word	0x08013da0
  ldr r2, =_sbss
 80044b4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80044b8:	200063b4 	.word	0x200063b4

080044bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044bc:	e7fe      	b.n	80044bc <ADC1_IRQHandler>

080044be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044c8:	2003      	movs	r0, #3
 80044ca:	f001 fb00 	bl	8005ace <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044ce:	200f      	movs	r0, #15
 80044d0:	f7ff fe4c 	bl	800416c <HAL_InitTick>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	71fb      	strb	r3, [r7, #7]
 80044de:	e001      	b.n	80044e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044e0:	f7ff fc16 	bl	8003d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044e4:	79fb      	ldrb	r3, [r7, #7]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_IncTick+0x20>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_IncTick+0x24>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4413      	add	r3, r2
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <HAL_IncTick+0x24>)
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000018 	.word	0x20000018
 8004514:	20006360 	.word	0x20006360

08004518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return uwTick;
 800451c:	4b03      	ldr	r3, [pc, #12]	; (800452c <HAL_GetTick+0x14>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20006360 	.word	0x20006360

08004530 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	609a      	str	r2, [r3, #8]
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	609a      	str	r2, [r3, #8]
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3360      	adds	r3, #96	; 0x60
 80045aa:	461a      	mov	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b08      	ldr	r3, [pc, #32]	; (80045dc <LL_ADC_SetOffset+0x44>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80045d0:	bf00      	nop
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	03fff000 	.word	0x03fff000

080045e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3360      	adds	r3, #96	; 0x60
 80045ee:	461a      	mov	r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3360      	adds	r3, #96	; 0x60
 800461c:	461a      	mov	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	431a      	orrs	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3330      	adds	r3, #48	; 0x30
 8004678:	461a      	mov	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	f003 030c 	and.w	r3, r3, #12
 8004684:	4413      	add	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	211f      	movs	r1, #31
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	401a      	ands	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	0e9b      	lsrs	r3, r3, #26
 80046a0:	f003 011f 	and.w	r1, r3, #31
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	431a      	orrs	r2, r3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3314      	adds	r3, #20
 80046d0:	461a      	mov	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	0e5b      	lsrs	r3, r3, #25
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	4413      	add	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	0d1b      	lsrs	r3, r3, #20
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	2107      	movs	r1, #7
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	401a      	ands	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	0d1b      	lsrs	r3, r3, #20
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	fa01 f303 	lsl.w	r3, r1, r3
 8004704:	431a      	orrs	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004730:	43db      	mvns	r3, r3
 8004732:	401a      	ands	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f003 0318 	and.w	r3, r3, #24
 800473a:	4908      	ldr	r1, [pc, #32]	; (800475c <LL_ADC_SetChannelSingleDiff+0x44>)
 800473c:	40d9      	lsrs	r1, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	400b      	ands	r3, r1
 8004742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004746:	431a      	orrs	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	0007ffff 	.word	0x0007ffff

08004760 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6093      	str	r3, [r2, #8]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004798:	d101      	bne.n	800479e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80047bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047e8:	d101      	bne.n	80047ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800480c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004838:	f043 0202 	orr.w	r2, r3, #2
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <LL_ADC_IsEnabled+0x18>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <LL_ADC_IsEnabled+0x1a>
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d101      	bne.n	800488a <LL_ADC_IsDisableOngoing+0x18>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <LL_ADC_IsDisableOngoing+0x1a>
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048ac:	f043 0204 	orr.w	r2, r3, #4
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d101      	bne.n	80048d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d101      	bne.n	80048fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004918:	2300      	movs	r3, #0
 800491a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e12c      	b.n	8004b80 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	2b00      	cmp	r3, #0
 8004932:	d109      	bne.n	8004948 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff fa13 	bl	8003d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff ff19 	bl	8004784 <LL_ADC_IsDeepPowerDownEnabled>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d004      	beq.n	8004962 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff feff 	bl	8004760 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ff34 	bl	80047d4 <LL_ADC_IsInternalRegulatorEnabled>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d115      	bne.n	800499e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff ff18 	bl	80047ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800497c:	4b82      	ldr	r3, [pc, #520]	; (8004b88 <HAL_ADC_Init+0x27c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	099b      	lsrs	r3, r3, #6
 8004982:	4a82      	ldr	r2, [pc, #520]	; (8004b8c <HAL_ADC_Init+0x280>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	099b      	lsrs	r3, r3, #6
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004990:	e002      	b.n	8004998 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	3b01      	subs	r3, #1
 8004996:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f9      	bne.n	8004992 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff ff16 	bl	80047d4 <LL_ADC_IsInternalRegulatorEnabled>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10d      	bne.n	80049ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	f043 0210 	orr.w	r2, r3, #16
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff ff76 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 80049d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f040 80c5 	bne.w	8004b6e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 80c1 	bne.w	8004b6e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80049f4:	f043 0202 	orr.w	r2, r3, #2
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff ff23 	bl	800484c <LL_ADC_IsEnabled>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a0c:	4860      	ldr	r0, [pc, #384]	; (8004b90 <HAL_ADC_Init+0x284>)
 8004a0e:	f7ff ff1d 	bl	800484c <LL_ADC_IsEnabled>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d105      	bne.n	8004a24 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	485d      	ldr	r0, [pc, #372]	; (8004b94 <HAL_ADC_Init+0x288>)
 8004a20:	f7ff fd86 	bl	8004530 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	7e5b      	ldrb	r3, [r3, #25]
 8004a28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004a34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004a3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d106      	bne.n	8004a60 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	3b01      	subs	r3, #1
 8004a58:	045b      	lsls	r3, r3, #17
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	4b45      	ldr	r3, [pc, #276]	; (8004b98 <HAL_ADC_Init+0x28c>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	69b9      	ldr	r1, [r7, #24]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff13 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8004a9a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff ff20 	bl	80048e6 <LL_ADC_INJ_IsConversionOngoing>
 8004aa6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d13d      	bne.n	8004b2a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d13a      	bne.n	8004b2a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ab8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ac0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad0:	f023 0302 	bic.w	r3, r3, #2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	69b9      	ldr	r1, [r7, #24]
 8004ada:	430b      	orrs	r3, r1
 8004adc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d118      	bne.n	8004b1a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004af2:	f023 0304 	bic.w	r3, r3, #4
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b04:	4311      	orrs	r1, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	611a      	str	r2, [r3, #16]
 8004b18:	e007      	b.n	8004b2a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d10c      	bne.n	8004b4c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	f023 010f 	bic.w	r1, r3, #15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	1e5a      	subs	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
 8004b4a:	e007      	b.n	8004b5c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 020f 	bic.w	r2, r2, #15
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b60:	f023 0303 	bic.w	r3, r3, #3
 8004b64:	f043 0201 	orr.w	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54
 8004b6c:	e007      	b.n	8004b7e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f043 0210 	orr.w	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000010 	.word	0x20000010
 8004b8c:	053e2d63 	.word	0x053e2d63
 8004b90:	50040000 	.word	0x50040000
 8004b94:	50040300 	.word	0x50040300
 8004b98:	fff0c007 	.word	0xfff0c007

08004b9c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fe89 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d14f      	bne.n	8004c54 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_ADC_Start+0x26>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e04b      	b.n	8004c5a <HAL_ADC_Start+0xbe>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fccc 	bl	8005568 <ADC_Enable>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d137      	bne.n	8004c4a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfa:	d106      	bne.n	8004c0a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	f023 0206 	bic.w	r2, r3, #6
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	659a      	str	r2, [r3, #88]	; 0x58
 8004c08:	e002      	b.n	8004c10 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	221c      	movs	r2, #28
 8004c16:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fe28 	bl	8004898 <LL_ADC_REG_StartConversion>
 8004c48:	e006      	b.n	8004c58 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c52:	e001      	b.n	8004c58 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c54:	2302      	movs	r3, #2
 8004c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff fe23 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d167      	bne.n	8004d50 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_ADC_Start_DMA+0x2a>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e063      	b.n	8004d56 <HAL_ADC_Start_DMA+0xf2>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fc66 	bl	8005568 <ADC_Enable>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d14f      	bne.n	8004d46 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004caa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d006      	beq.n	8004cd4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cca:	f023 0206 	bic.w	r2, r3, #6
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	659a      	str	r2, [r3, #88]	; 0x58
 8004cd2:	e002      	b.n	8004cda <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <HAL_ADC_Start_DMA+0xfc>)
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <HAL_ADC_Start_DMA+0x100>)
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cee:	4a1e      	ldr	r2, [pc, #120]	; (8004d68 <HAL_ADC_Start_DMA+0x104>)
 8004cf0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	221c      	movs	r2, #28
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0210 	orr.w	r2, r2, #16
 8004d10:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3340      	adds	r3, #64	; 0x40
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f000 ffb9 	bl	8005ca8 <HAL_DMA_Start_IT>
 8004d36:	4603      	mov	r3, r0
 8004d38:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fdaa 	bl	8004898 <LL_ADC_REG_StartConversion>
 8004d44:	e006      	b.n	8004d54 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d4e:	e001      	b.n	8004d54 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d50:	2302      	movs	r3, #2
 8004d52:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	08005733 	.word	0x08005733
 8004d64:	0800580b 	.word	0x0800580b
 8004d68:	08005827 	.word	0x08005827

08004d6c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b0b6      	sub	sp, #216	; 0xd8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x22>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e3b9      	b.n	800553e <HAL_ADC_ConfigChannel+0x796>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fd72 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f040 839e 	bne.w	8005520 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b05      	cmp	r3, #5
 8004dea:	d824      	bhi.n	8004e36 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	3b02      	subs	r3, #2
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d81b      	bhi.n	8004e2e <HAL_ADC_ConfigChannel+0x86>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_ADC_ConfigChannel+0x54>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e0d 	.word	0x08004e0d
 8004e00:	08004e15 	.word	0x08004e15
 8004e04:	08004e1d 	.word	0x08004e1d
 8004e08:	08004e25 	.word	0x08004e25
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	220c      	movs	r2, #12
 8004e10:	605a      	str	r2, [r3, #4]
          break;
 8004e12:	e011      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2212      	movs	r2, #18
 8004e18:	605a      	str	r2, [r3, #4]
          break;
 8004e1a:	e00d      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2218      	movs	r2, #24
 8004e20:	605a      	str	r2, [r3, #4]
          break;
 8004e22:	e009      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e2a:	605a      	str	r2, [r3, #4]
          break;
 8004e2c:	e004      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2206      	movs	r2, #6
 8004e32:	605a      	str	r2, [r3, #4]
          break;
 8004e34:	e000      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004e36:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6859      	ldr	r1, [r3, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	f7ff fc0f 	bl	8004668 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff fd36 	bl	80048c0 <LL_ADC_REG_IsConversionOngoing>
 8004e54:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fd42 	bl	80048e6 <LL_ADC_INJ_IsConversionOngoing>
 8004e62:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f040 81a6 	bne.w	80051bc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f040 81a1 	bne.w	80051bc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6819      	ldr	r1, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f7ff fc1a 	bl	80046c0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695a      	ldr	r2, [r3, #20]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d00a      	beq.n	8004ec4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6919      	ldr	r1, [r3, #16]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ebe:	f7ff fb6b 	bl	8004598 <LL_ADC_SetOffset>
 8004ec2:	e17b      	b.n	80051bc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fb88 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x148>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fb7d 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	0e9b      	lsrs	r3, r3, #26
 8004eea:	f003 021f 	and.w	r2, r3, #31
 8004eee:	e01e      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x186>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff fb72 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004f1e:	2320      	movs	r3, #32
 8004f20:	e004      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f26:	fab3 f383 	clz	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x19e>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	0e9b      	lsrs	r3, r3, #26
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	e018      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x1d0>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f52:	fa93 f3a3 	rbit	r3, r3
 8004f56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004f6a:	2320      	movs	r3, #32
 8004f6c:	e004      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004f6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d106      	bne.n	8004f8a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2200      	movs	r2, #0
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fb41 	bl	800460c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fb25 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x20e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fb1a 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 8004fac:	4603      	mov	r3, r0
 8004fae:	0e9b      	lsrs	r3, r3, #26
 8004fb0:	f003 021f 	and.w	r2, r3, #31
 8004fb4:	e01e      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x24c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2101      	movs	r1, #1
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fb0f 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fcc:	fa93 f3a3 	rbit	r3, r3
 8004fd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004fd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004fe4:	2320      	movs	r3, #32
 8004fe6:	e004      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fec:	fab3 f383 	clz	r3, r3
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d105      	bne.n	800500c <HAL_ADC_ConfigChannel+0x264>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	0e9b      	lsrs	r3, r3, #26
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	e018      	b.n	800503e <HAL_ADC_ConfigChannel+0x296>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005018:	fa93 f3a3 	rbit	r3, r3
 800501c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005020:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005030:	2320      	movs	r3, #32
 8005032:	e004      	b.n	800503e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8005034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005038:	fab3 f383 	clz	r3, r3
 800503c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800503e:	429a      	cmp	r2, r3
 8005040:	d106      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	2101      	movs	r1, #1
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fade 	bl	800460c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2102      	movs	r1, #2
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fac2 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 800505c:	4603      	mov	r3, r0
 800505e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <HAL_ADC_ConfigChannel+0x2d4>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2102      	movs	r1, #2
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fab7 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 8005072:	4603      	mov	r3, r0
 8005074:	0e9b      	lsrs	r3, r3, #26
 8005076:	f003 021f 	and.w	r2, r3, #31
 800507a:	e01e      	b.n	80050ba <HAL_ADC_ConfigChannel+0x312>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff faac 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 8005088:	4603      	mov	r3, r0
 800508a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800509a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800509e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80050a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80050aa:	2320      	movs	r3, #32
 80050ac:	e004      	b.n	80050b8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80050ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050b2:	fab3 f383 	clz	r3, r3
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d105      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x32a>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	0e9b      	lsrs	r3, r3, #26
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	e016      	b.n	8005100 <HAL_ADC_ConfigChannel+0x358>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80050e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80050ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80050f2:	2320      	movs	r3, #32
 80050f4:	e004      	b.n	8005100 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80050f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005100:	429a      	cmp	r2, r3
 8005102:	d106      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	2102      	movs	r1, #2
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff fa7d 	bl	800460c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2103      	movs	r1, #3
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff fa61 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 800511e:	4603      	mov	r3, r0
 8005120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <HAL_ADC_ConfigChannel+0x396>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2103      	movs	r1, #3
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fa56 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 8005134:	4603      	mov	r3, r0
 8005136:	0e9b      	lsrs	r3, r3, #26
 8005138:	f003 021f 	and.w	r2, r3, #31
 800513c:	e017      	b.n	800516e <HAL_ADC_ConfigChannel+0x3c6>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2103      	movs	r1, #3
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fa4b 	bl	80045e0 <LL_ADC_GetOffsetChannel>
 800514a:	4603      	mov	r3, r0
 800514c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005150:	fa93 f3a3 	rbit	r3, r3
 8005154:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005158:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800515a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005160:	2320      	movs	r3, #32
 8005162:	e003      	b.n	800516c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005176:	2b00      	cmp	r3, #0
 8005178:	d105      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x3de>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	0e9b      	lsrs	r3, r3, #26
 8005180:	f003 031f 	and.w	r3, r3, #31
 8005184:	e011      	b.n	80051aa <HAL_ADC_ConfigChannel+0x402>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800518e:	fa93 f3a3 	rbit	r3, r3
 8005192:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005196:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800519e:	2320      	movs	r3, #32
 80051a0:	e003      	b.n	80051aa <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80051a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a4:	fab3 f383 	clz	r3, r3
 80051a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d106      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2200      	movs	r2, #0
 80051b4:	2103      	movs	r1, #3
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff fa28 	bl	800460c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fb43 	bl	800484c <LL_ADC_IsEnabled>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 813f 	bne.w	800544c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6819      	ldr	r1, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	461a      	mov	r2, r3
 80051dc:	f7ff fa9c 	bl	8004718 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a8e      	ldr	r2, [pc, #568]	; (8005420 <HAL_ADC_ConfigChannel+0x678>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	f040 8130 	bne.w	800544c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x46c>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	0e9b      	lsrs	r3, r3, #26
 8005202:	3301      	adds	r3, #1
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2b09      	cmp	r3, #9
 800520a:	bf94      	ite	ls
 800520c:	2301      	movls	r3, #1
 800520e:	2300      	movhi	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	e019      	b.n	8005248 <HAL_ADC_ConfigChannel+0x4a0>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800521c:	fa93 f3a3 	rbit	r3, r3
 8005220:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005224:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800522c:	2320      	movs	r3, #32
 800522e:	e003      	b.n	8005238 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	3301      	adds	r3, #1
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	2b09      	cmp	r3, #9
 8005240:	bf94      	ite	ls
 8005242:	2301      	movls	r3, #1
 8005244:	2300      	movhi	r3, #0
 8005246:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005248:	2b00      	cmp	r3, #0
 800524a:	d079      	beq.n	8005340 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005254:	2b00      	cmp	r3, #0
 8005256:	d107      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x4c0>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	0e9b      	lsrs	r3, r3, #26
 800525e:	3301      	adds	r3, #1
 8005260:	069b      	lsls	r3, r3, #26
 8005262:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005266:	e015      	b.n	8005294 <HAL_ADC_ConfigChannel+0x4ec>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005270:	fa93 f3a3 	rbit	r3, r3
 8005274:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005278:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800527a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8005280:	2320      	movs	r3, #32
 8005282:	e003      	b.n	800528c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8005284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005286:	fab3 f383 	clz	r3, r3
 800528a:	b2db      	uxtb	r3, r3
 800528c:	3301      	adds	r3, #1
 800528e:	069b      	lsls	r3, r3, #26
 8005290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x50c>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	0e9b      	lsrs	r3, r3, #26
 80052a6:	3301      	adds	r3, #1
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	2101      	movs	r1, #1
 80052ae:	fa01 f303 	lsl.w	r3, r1, r3
 80052b2:	e017      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x53c>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052bc:	fa93 f3a3 	rbit	r3, r3
 80052c0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80052c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80052c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80052cc:	2320      	movs	r3, #32
 80052ce:	e003      	b.n	80052d8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80052d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d2:	fab3 f383 	clz	r3, r3
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	3301      	adds	r3, #1
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	2101      	movs	r1, #1
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	ea42 0103 	orr.w	r1, r2, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <HAL_ADC_ConfigChannel+0x562>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	0e9b      	lsrs	r3, r3, #26
 80052fa:	3301      	adds	r3, #1
 80052fc:	f003 021f 	and.w	r2, r3, #31
 8005300:	4613      	mov	r3, r2
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	051b      	lsls	r3, r3, #20
 8005308:	e018      	b.n	800533c <HAL_ADC_ConfigChannel+0x594>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005312:	fa93 f3a3 	rbit	r3, r3
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800531c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005322:	2320      	movs	r3, #32
 8005324:	e003      	b.n	800532e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005328:	fab3 f383 	clz	r3, r3
 800532c:	b2db      	uxtb	r3, r3
 800532e:	3301      	adds	r3, #1
 8005330:	f003 021f 	and.w	r2, r3, #31
 8005334:	4613      	mov	r3, r2
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4413      	add	r3, r2
 800533a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800533c:	430b      	orrs	r3, r1
 800533e:	e080      	b.n	8005442 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005348:	2b00      	cmp	r3, #0
 800534a:	d107      	bne.n	800535c <HAL_ADC_ConfigChannel+0x5b4>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	0e9b      	lsrs	r3, r3, #26
 8005352:	3301      	adds	r3, #1
 8005354:	069b      	lsls	r3, r3, #26
 8005356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800535a:	e015      	b.n	8005388 <HAL_ADC_ConfigChannel+0x5e0>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	fa93 f3a3 	rbit	r3, r3
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005374:	2320      	movs	r3, #32
 8005376:	e003      	b.n	8005380 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	fab3 f383 	clz	r3, r3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	3301      	adds	r3, #1
 8005382:	069b      	lsls	r3, r3, #26
 8005384:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x600>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	0e9b      	lsrs	r3, r3, #26
 800539a:	3301      	adds	r3, #1
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2101      	movs	r1, #1
 80053a2:	fa01 f303 	lsl.w	r3, r1, r3
 80053a6:	e017      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x630>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	fa93 f3a3 	rbit	r3, r3
 80053b4:	61fb      	str	r3, [r7, #28]
  return result;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80053c0:	2320      	movs	r3, #32
 80053c2:	e003      	b.n	80053cc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2101      	movs	r1, #1
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	ea42 0103 	orr.w	r1, r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10d      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x65c>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0e9b      	lsrs	r3, r3, #26
 80053ee:	3301      	adds	r3, #1
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4613      	mov	r3, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	3b1e      	subs	r3, #30
 80053fc:	051b      	lsls	r3, r3, #20
 80053fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005402:	e01d      	b.n	8005440 <HAL_ADC_ConfigChannel+0x698>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	fa93 f3a3 	rbit	r3, r3
 8005410:	613b      	str	r3, [r7, #16]
  return result;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d103      	bne.n	8005424 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800541c:	2320      	movs	r3, #32
 800541e:	e005      	b.n	800542c <HAL_ADC_ConfigChannel+0x684>
 8005420:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	b2db      	uxtb	r3, r3
 800542c:	3301      	adds	r3, #1
 800542e:	f003 021f 	and.w	r2, r3, #31
 8005432:	4613      	mov	r3, r2
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	4413      	add	r3, r2
 8005438:	3b1e      	subs	r3, #30
 800543a:	051b      	lsls	r3, r3, #20
 800543c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005440:	430b      	orrs	r3, r1
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	6892      	ldr	r2, [r2, #8]
 8005446:	4619      	mov	r1, r3
 8005448:	f7ff f93a 	bl	80046c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b3d      	ldr	r3, [pc, #244]	; (8005548 <HAL_ADC_ConfigChannel+0x7a0>)
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d06c      	beq.n	8005532 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005458:	483c      	ldr	r0, [pc, #240]	; (800554c <HAL_ADC_ConfigChannel+0x7a4>)
 800545a:	f7ff f88f 	bl	800457c <LL_ADC_GetCommonPathInternalCh>
 800545e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a3a      	ldr	r2, [pc, #232]	; (8005550 <HAL_ADC_ConfigChannel+0x7a8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d127      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800546c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d121      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a35      	ldr	r2, [pc, #212]	; (8005554 <HAL_ADC_ConfigChannel+0x7ac>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d157      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800548a:	4619      	mov	r1, r3
 800548c:	482f      	ldr	r0, [pc, #188]	; (800554c <HAL_ADC_ConfigChannel+0x7a4>)
 800548e:	f7ff f862 	bl	8004556 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005492:	4b31      	ldr	r3, [pc, #196]	; (8005558 <HAL_ADC_ConfigChannel+0x7b0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	4a30      	ldr	r2, [pc, #192]	; (800555c <HAL_ADC_ConfigChannel+0x7b4>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	099b      	lsrs	r3, r3, #6
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054ac:	e002      	b.n	80054b4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f9      	bne.n	80054ae <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054ba:	e03a      	b.n	8005532 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a27      	ldr	r2, [pc, #156]	; (8005560 <HAL_ADC_ConfigChannel+0x7b8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d113      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x746>
 80054c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10d      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <HAL_ADC_ConfigChannel+0x7ac>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d12a      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054e4:	4619      	mov	r1, r3
 80054e6:	4819      	ldr	r0, [pc, #100]	; (800554c <HAL_ADC_ConfigChannel+0x7a4>)
 80054e8:	f7ff f835 	bl	8004556 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054ec:	e021      	b.n	8005532 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <HAL_ADC_ConfigChannel+0x7bc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d11c      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80054f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d116      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a12      	ldr	r2, [pc, #72]	; (8005554 <HAL_ADC_ConfigChannel+0x7ac>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800550e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005516:	4619      	mov	r1, r3
 8005518:	480c      	ldr	r0, [pc, #48]	; (800554c <HAL_ADC_ConfigChannel+0x7a4>)
 800551a:	f7ff f81c 	bl	8004556 <LL_ADC_SetCommonPathInternalCh>
 800551e:	e008      	b.n	8005532 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800553a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800553e:	4618      	mov	r0, r3
 8005540:	37d8      	adds	r7, #216	; 0xd8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	80080000 	.word	0x80080000
 800554c:	50040300 	.word	0x50040300
 8005550:	c7520000 	.word	0xc7520000
 8005554:	50040000 	.word	0x50040000
 8005558:	20000010 	.word	0x20000010
 800555c:	053e2d63 	.word	0x053e2d63
 8005560:	cb840000 	.word	0xcb840000
 8005564:	80000001 	.word	0x80000001

08005568 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005570:	2300      	movs	r3, #0
 8005572:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff f967 	bl	800484c <LL_ADC_IsEnabled>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d169      	bne.n	8005658 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	4b36      	ldr	r3, [pc, #216]	; (8005664 <ADC_Enable+0xfc>)
 800558c:	4013      	ands	r3, r2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005596:	f043 0210 	orr.w	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a2:	f043 0201 	orr.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e055      	b.n	800565a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff f922 	bl	80047fc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80055b8:	482b      	ldr	r0, [pc, #172]	; (8005668 <ADC_Enable+0x100>)
 80055ba:	f7fe ffdf 	bl	800457c <LL_ADC_GetCommonPathInternalCh>
 80055be:	4603      	mov	r3, r0
 80055c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d013      	beq.n	80055f0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055c8:	4b28      	ldr	r3, [pc, #160]	; (800566c <ADC_Enable+0x104>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	099b      	lsrs	r3, r3, #6
 80055ce:	4a28      	ldr	r2, [pc, #160]	; (8005670 <ADC_Enable+0x108>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	099b      	lsrs	r3, r3, #6
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	4613      	mov	r3, r2
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80055e2:	e002      	b.n	80055ea <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f9      	bne.n	80055e4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80055f0:	f7fe ff92 	bl	8004518 <HAL_GetTick>
 80055f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055f6:	e028      	b.n	800564a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff f925 	bl	800484c <LL_ADC_IsEnabled>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff f8f5 	bl	80047fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005612:	f7fe ff81 	bl	8004518 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d914      	bls.n	800564a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b01      	cmp	r3, #1
 800562c:	d00d      	beq.n	800564a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005632:	f043 0210 	orr.w	r2, r3, #16
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	f043 0201 	orr.w	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e007      	b.n	800565a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b01      	cmp	r3, #1
 8005656:	d1cf      	bne.n	80055f8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	8000003f 	.word	0x8000003f
 8005668:	50040300 	.word	0x50040300
 800566c:	20000010 	.word	0x20000010
 8005670:	053e2d63 	.word	0x053e2d63

08005674 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff f8f6 	bl	8004872 <LL_ADC_IsDisableOngoing>
 8005686:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff f8dd 	bl	800484c <LL_ADC_IsEnabled>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d047      	beq.n	8005728 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d144      	bne.n	8005728 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 030d 	and.w	r3, r3, #13
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10c      	bne.n	80056c6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff f8b7 	bl	8004824 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2203      	movs	r2, #3
 80056bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80056be:	f7fe ff2b 	bl	8004518 <HAL_GetTick>
 80056c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056c4:	e029      	b.n	800571a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ca:	f043 0210 	orr.w	r2, r3, #16
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	f043 0201 	orr.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e023      	b.n	800572a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80056e2:	f7fe ff19 	bl	8004518 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d914      	bls.n	800571a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	f043 0210 	orr.w	r2, r3, #16
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570e:	f043 0201 	orr.w	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e007      	b.n	800572a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1dc      	bne.n	80056e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005748:	2b00      	cmp	r3, #0
 800574a:	d14b      	bne.n	80057e4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005750:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d021      	beq.n	80057aa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe ff69 	bl	8004642 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d032      	beq.n	80057dc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d12b      	bne.n	80057dc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d11f      	bne.n	80057dc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a0:	f043 0201 	orr.w	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54
 80057a8:	e018      	b.n	80057dc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d111      	bne.n	80057dc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	f043 0201 	orr.w	r2, r3, #1
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff fac5 	bl	8004d6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80057e2:	e00e      	b.n	8005802 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff facf 	bl	8004d94 <HAL_ADC_ErrorCallback>
}
 80057f6:	e004      	b.n	8005802 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f7ff fab1 	bl	8004d80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005838:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005844:	f043 0204 	orr.w	r2, r3, #4
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff faa1 	bl	8004d94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <LL_ADC_StartCalibration>:
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800586c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005876:	4313      	orrs	r3, r2
 8005878:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	609a      	str	r2, [r3, #8]
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <LL_ADC_IsCalibrationOnGoing>:
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800589c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a0:	d101      	bne.n	80058a6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80058be:	2300      	movs	r3, #0
 80058c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_ADCEx_Calibration_Start+0x1c>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e04d      	b.n	800596c <HAL_ADCEx_Calibration_Start+0xb8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff fecb 	bl	8005674 <ADC_Disable>
 80058de:	4603      	mov	r3, r0
 80058e0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d136      	bne.n	8005956 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058f0:	f023 0302 	bic.w	r3, r3, #2
 80058f4:	f043 0202 	orr.w	r2, r3, #2
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff ffa9 	bl	800585a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005908:	e014      	b.n	8005934 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3301      	adds	r3, #1
 800590e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005916:	d30d      	bcc.n	8005934 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591c:	f023 0312 	bic.w	r3, r3, #18
 8005920:	f043 0210 	orr.w	r2, r3, #16
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e01b      	b.n	800596c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff ffa7 	bl	800588c <LL_ADC_IsCalibrationOnGoing>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e2      	bne.n	800590a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	f023 0303 	bic.w	r3, r3, #3
 800594c:	f043 0201 	orr.w	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	655a      	str	r2, [r3, #84]	; 0x54
 8005954:	e005      	b.n	8005962 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595a:	f043 0210 	orr.w	r2, r3, #16
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005990:	4013      	ands	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800599c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059a6:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <__NVIC_SetPriorityGrouping+0x44>)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	60d3      	str	r3, [r2, #12]
}
 80059ac:	bf00      	nop
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	e000ed00 	.word	0xe000ed00

080059bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059c0:	4b04      	ldr	r3, [pc, #16]	; (80059d4 <__NVIC_GetPriorityGrouping+0x18>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	f003 0307 	and.w	r3, r3, #7
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	e000ed00 	.word	0xe000ed00

080059d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	db0b      	blt.n	8005a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	f003 021f 	and.w	r2, r3, #31
 80059f0:	4907      	ldr	r1, [pc, #28]	; (8005a10 <__NVIC_EnableIRQ+0x38>)
 80059f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	2001      	movs	r0, #1
 80059fa:	fa00 f202 	lsl.w	r2, r0, r2
 80059fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	e000e100 	.word	0xe000e100

08005a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	6039      	str	r1, [r7, #0]
 8005a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	db0a      	blt.n	8005a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	490c      	ldr	r1, [pc, #48]	; (8005a60 <__NVIC_SetPriority+0x4c>)
 8005a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a32:	0112      	lsls	r2, r2, #4
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	440b      	add	r3, r1
 8005a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a3c:	e00a      	b.n	8005a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	4908      	ldr	r1, [pc, #32]	; (8005a64 <__NVIC_SetPriority+0x50>)
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	3b04      	subs	r3, #4
 8005a4c:	0112      	lsls	r2, r2, #4
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	440b      	add	r3, r1
 8005a52:	761a      	strb	r2, [r3, #24]
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	e000e100 	.word	0xe000e100
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b089      	sub	sp, #36	; 0x24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	f1c3 0307 	rsb	r3, r3, #7
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	bf28      	it	cs
 8005a86:	2304      	movcs	r3, #4
 8005a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	2b06      	cmp	r3, #6
 8005a90:	d902      	bls.n	8005a98 <NVIC_EncodePriority+0x30>
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	3b03      	subs	r3, #3
 8005a96:	e000      	b.n	8005a9a <NVIC_EncodePriority+0x32>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43da      	mvns	r2, r3
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	401a      	ands	r2, r3
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aba:	43d9      	mvns	r1, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac0:	4313      	orrs	r3, r2
         );
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff ff4c 	bl	8005974 <__NVIC_SetPriorityGrouping>
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005af2:	2300      	movs	r3, #0
 8005af4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005af6:	f7ff ff61 	bl	80059bc <__NVIC_GetPriorityGrouping>
 8005afa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	6978      	ldr	r0, [r7, #20]
 8005b02:	f7ff ffb1 	bl	8005a68 <NVIC_EncodePriority>
 8005b06:	4602      	mov	r2, r0
 8005b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ff80 	bl	8005a14 <__NVIC_SetPriority>
}
 8005b14:	bf00      	nop
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff ff54 	bl	80059d8 <__NVIC_EnableIRQ>
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e098      	b.n	8005c7c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4b4d      	ldr	r3, [pc, #308]	; (8005c88 <HAL_DMA_Init+0x150>)
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d80f      	bhi.n	8005b76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	4b4b      	ldr	r3, [pc, #300]	; (8005c8c <HAL_DMA_Init+0x154>)
 8005b5e:	4413      	add	r3, r2
 8005b60:	4a4b      	ldr	r2, [pc, #300]	; (8005c90 <HAL_DMA_Init+0x158>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	091b      	lsrs	r3, r3, #4
 8005b68:	009a      	lsls	r2, r3, #2
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a48      	ldr	r2, [pc, #288]	; (8005c94 <HAL_DMA_Init+0x15c>)
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40
 8005b74:	e00e      	b.n	8005b94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4b46      	ldr	r3, [pc, #280]	; (8005c98 <HAL_DMA_Init+0x160>)
 8005b7e:	4413      	add	r3, r2
 8005b80:	4a43      	ldr	r2, [pc, #268]	; (8005c90 <HAL_DMA_Init+0x158>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	091b      	lsrs	r3, r3, #4
 8005b88:	009a      	lsls	r2, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a42      	ldr	r2, [pc, #264]	; (8005c9c <HAL_DMA_Init+0x164>)
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bee:	d039      	beq.n	8005c64 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	4a27      	ldr	r2, [pc, #156]	; (8005c94 <HAL_DMA_Init+0x15c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d11a      	bne.n	8005c30 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005bfa:	4b29      	ldr	r3, [pc, #164]	; (8005ca0 <HAL_DMA_Init+0x168>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	f003 031c 	and.w	r3, r3, #28
 8005c06:	210f      	movs	r1, #15
 8005c08:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	4924      	ldr	r1, [pc, #144]	; (8005ca0 <HAL_DMA_Init+0x168>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c14:	4b22      	ldr	r3, [pc, #136]	; (8005ca0 <HAL_DMA_Init+0x168>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c20:	f003 031c 	and.w	r3, r3, #28
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	491d      	ldr	r1, [pc, #116]	; (8005ca0 <HAL_DMA_Init+0x168>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]
 8005c2e:	e019      	b.n	8005c64 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c30:	4b1c      	ldr	r3, [pc, #112]	; (8005ca4 <HAL_DMA_Init+0x16c>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c38:	f003 031c 	and.w	r3, r3, #28
 8005c3c:	210f      	movs	r1, #15
 8005c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	4917      	ldr	r1, [pc, #92]	; (8005ca4 <HAL_DMA_Init+0x16c>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c4a:	4b16      	ldr	r3, [pc, #88]	; (8005ca4 <HAL_DMA_Init+0x16c>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6859      	ldr	r1, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	f003 031c 	and.w	r3, r3, #28
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	4911      	ldr	r1, [pc, #68]	; (8005ca4 <HAL_DMA_Init+0x16c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40020407 	.word	0x40020407
 8005c8c:	bffdfff8 	.word	0xbffdfff8
 8005c90:	cccccccd 	.word	0xcccccccd
 8005c94:	40020000 	.word	0x40020000
 8005c98:	bffdfbf8 	.word	0xbffdfbf8
 8005c9c:	40020400 	.word	0x40020400
 8005ca0:	400200a8 	.word	0x400200a8
 8005ca4:	400204a8 	.word	0x400204a8

08005ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_DMA_Start_IT+0x20>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e04b      	b.n	8005d60 <HAL_DMA_Start_IT+0xb8>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d13a      	bne.n	8005d52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f96b 	bl	8005fdc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d008      	beq.n	8005d20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 020e 	orr.w	r2, r2, #14
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e00f      	b.n	8005d40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0204 	bic.w	r2, r2, #4
 8005d2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 020a 	orr.w	r2, r2, #10
 8005d3e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	e005      	b.n	8005d5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d008      	beq.n	8005d92 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2204      	movs	r2, #4
 8005d84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e022      	b.n	8005dd8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 020e 	bic.w	r2, r2, #14
 8005da0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	f003 021c 	and.w	r2, r3, #28
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d005      	beq.n	8005e08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
 8005e06:	e029      	b.n	8005e5c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 020e 	bic.w	r2, r2, #14
 8005e16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0201 	bic.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2c:	f003 021c 	and.w	r2, r3, #28
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	2101      	movs	r1, #1
 8005e36:	fa01 f202 	lsl.w	r2, r1, r2
 8005e3a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
    }
  }
  return status;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	f003 031c 	and.w	r3, r3, #28
 8005e86:	2204      	movs	r2, #4
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d026      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x7a>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d021      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d107      	bne.n	8005eba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0204 	bic.w	r2, r2, #4
 8005eb8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	f003 021c 	and.w	r2, r3, #28
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	2104      	movs	r1, #4
 8005ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ecc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d071      	beq.n	8005fba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005ede:	e06c      	b.n	8005fba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee4:	f003 031c 	and.w	r3, r3, #28
 8005ee8:	2202      	movs	r2, #2
 8005eea:	409a      	lsls	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d02e      	beq.n	8005f52 <HAL_DMA_IRQHandler+0xec>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d029      	beq.n	8005f52 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 020a 	bic.w	r2, r2, #10
 8005f1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	f003 021c 	and.w	r2, r3, #28
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	2102      	movs	r1, #2
 8005f32:	fa01 f202 	lsl.w	r2, r1, r2
 8005f36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d038      	beq.n	8005fba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005f50:	e033      	b.n	8005fba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	f003 031c 	and.w	r3, r3, #28
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	409a      	lsls	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d02a      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x156>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d025      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 020e 	bic.w	r2, r2, #14
 8005f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f84:	f003 021c 	and.w	r2, r3, #28
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d004      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005fba:	bf00      	nop
 8005fbc:	bf00      	nop
}
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	f003 021c 	and.w	r2, r3, #28
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ffc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b10      	cmp	r3, #16
 800600c:	d108      	bne.n	8006020 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800601e:	e007      	b.n	8006030 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]
}
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800604e:	4b2f      	ldr	r3, [pc, #188]	; (800610c <HAL_FLASH_Program+0xd0>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_FLASH_Program+0x1e>
 8006056:	2302      	movs	r3, #2
 8006058:	e053      	b.n	8006102 <HAL_FLASH_Program+0xc6>
 800605a:	4b2c      	ldr	r3, [pc, #176]	; (800610c <HAL_FLASH_Program+0xd0>)
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006060:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006064:	f000 f894 	bl	8006190 <FLASH_WaitForLastOperation>
 8006068:	4603      	mov	r3, r0
 800606a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d143      	bne.n	80060fa <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006072:	4b26      	ldr	r3, [pc, #152]	; (800610c <HAL_FLASH_Program+0xd0>)
 8006074:	2200      	movs	r2, #0
 8006076:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006078:	4b25      	ldr	r3, [pc, #148]	; (8006110 <HAL_FLASH_Program+0xd4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006084:	4b22      	ldr	r3, [pc, #136]	; (8006110 <HAL_FLASH_Program+0xd4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a21      	ldr	r2, [pc, #132]	; (8006110 <HAL_FLASH_Program+0xd4>)
 800608a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800608e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006090:	4b1e      	ldr	r3, [pc, #120]	; (800610c <HAL_FLASH_Program+0xd0>)
 8006092:	2202      	movs	r2, #2
 8006094:	771a      	strb	r2, [r3, #28]
 8006096:	e002      	b.n	800609e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006098:	4b1c      	ldr	r3, [pc, #112]	; (800610c <HAL_FLASH_Program+0xd0>)
 800609a:	2200      	movs	r2, #0
 800609c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d107      	bne.n	80060b4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80060a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a8:	68b8      	ldr	r0, [r7, #8]
 80060aa:	f000 f8c9 	bl	8006240 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80060ae:	2301      	movs	r3, #1
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	e010      	b.n	80060d6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d002      	beq.n	80060c0 <HAL_FLASH_Program+0x84>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d10a      	bne.n	80060d6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	4619      	mov	r1, r3
 80060c4:	68b8      	ldr	r0, [r7, #8]
 80060c6:	f000 f8e1 	bl	800628c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d102      	bne.n	80060d6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80060d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80060d4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80060da:	f000 f859 	bl	8006190 <FLASH_WaitForLastOperation>
 80060de:	4603      	mov	r3, r0
 80060e0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d006      	beq.n	80060f6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80060e8:	4b09      	ldr	r3, [pc, #36]	; (8006110 <HAL_FLASH_Program+0xd4>)
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	43db      	mvns	r3, r3
 80060f0:	4907      	ldr	r1, [pc, #28]	; (8006110 <HAL_FLASH_Program+0xd4>)
 80060f2:	4013      	ands	r3, r2
 80060f4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80060f6:	f000 f9db 	bl	80064b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80060fa:	4b04      	ldr	r3, [pc, #16]	; (800610c <HAL_FLASH_Program+0xd0>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]

  return status;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	2000001c 	.word	0x2000001c
 8006110:	40022000 	.word	0x40022000

08006114 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800611e:	4b0b      	ldr	r3, [pc, #44]	; (800614c <HAL_FLASH_Unlock+0x38>)
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	da0b      	bge.n	800613e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006126:	4b09      	ldr	r3, [pc, #36]	; (800614c <HAL_FLASH_Unlock+0x38>)
 8006128:	4a09      	ldr	r2, [pc, #36]	; (8006150 <HAL_FLASH_Unlock+0x3c>)
 800612a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800612c:	4b07      	ldr	r3, [pc, #28]	; (800614c <HAL_FLASH_Unlock+0x38>)
 800612e:	4a09      	ldr	r2, [pc, #36]	; (8006154 <HAL_FLASH_Unlock+0x40>)
 8006130:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006132:	4b06      	ldr	r3, [pc, #24]	; (800614c <HAL_FLASH_Unlock+0x38>)
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	da01      	bge.n	800613e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800613e:	79fb      	ldrb	r3, [r7, #7]
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	40022000 	.word	0x40022000
 8006150:	45670123 	.word	0x45670123
 8006154:	cdef89ab 	.word	0xcdef89ab

08006158 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_FLASH_Lock+0x1c>)
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	4a04      	ldr	r2, [pc, #16]	; (8006174 <HAL_FLASH_Lock+0x1c>)
 8006162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006166:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	40022000 	.word	0x40022000

08006178 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800617c:	4b03      	ldr	r3, [pc, #12]	; (800618c <HAL_FLASH_GetError+0x14>)
 800617e:	685b      	ldr	r3, [r3, #4]
}
 8006180:	4618      	mov	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	2000001c 	.word	0x2000001c

08006190 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006198:	f7fe f9be 	bl	8004518 <HAL_GetTick>
 800619c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800619e:	e00d      	b.n	80061bc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d009      	beq.n	80061bc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80061a8:	f7fe f9b6 	bl	8004518 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d801      	bhi.n	80061bc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e036      	b.n	800622a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80061bc:	4b1d      	ldr	r3, [pc, #116]	; (8006234 <FLASH_WaitForLastOperation+0xa4>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1eb      	bne.n	80061a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80061c8:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <FLASH_WaitForLastOperation+0xa4>)
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <FLASH_WaitForLastOperation+0xa8>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01e      	beq.n	8006216 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80061d8:	4b18      	ldr	r3, [pc, #96]	; (800623c <FLASH_WaitForLastOperation+0xac>)
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	4a16      	ldr	r2, [pc, #88]	; (800623c <FLASH_WaitForLastOperation+0xac>)
 80061e2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <FLASH_WaitForLastOperation+0x6e>
 80061ee:	4b11      	ldr	r3, [pc, #68]	; (8006234 <FLASH_WaitForLastOperation+0xa4>)
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80061f8:	490e      	ldr	r1, [pc, #56]	; (8006234 <FLASH_WaitForLastOperation+0xa4>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	618b      	str	r3, [r1, #24]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <FLASH_WaitForLastOperation+0x82>
 8006208:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <FLASH_WaitForLastOperation+0xa4>)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006210:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e009      	b.n	800622a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006216:	4b07      	ldr	r3, [pc, #28]	; (8006234 <FLASH_WaitForLastOperation+0xa4>)
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006222:	4b04      	ldr	r3, [pc, #16]	; (8006234 <FLASH_WaitForLastOperation+0xa4>)
 8006224:	2201      	movs	r2, #1
 8006226:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40022000 	.word	0x40022000
 8006238:	0002c3fa 	.word	0x0002c3fa
 800623c:	2000001c 	.word	0x2000001c

08006240 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800624c:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <FLASH_Program_DoubleWord+0x48>)
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	4a0d      	ldr	r2, [pc, #52]	; (8006288 <FLASH_Program_DoubleWord+0x48>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800625e:	f3bf 8f6f 	isb	sy
}
 8006262:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006264:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	000a      	movs	r2, r1
 8006272:	2300      	movs	r3, #0
 8006274:	68f9      	ldr	r1, [r7, #12]
 8006276:	3104      	adds	r1, #4
 8006278:	4613      	mov	r3, r2
 800627a:	600b      	str	r3, [r1, #0]
}
 800627c:	bf00      	nop
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40022000 	.word	0x40022000

0800628c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800628c:	b480      	push	{r7}
 800628e:	b089      	sub	sp, #36	; 0x24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006296:	2340      	movs	r3, #64	; 0x40
 8006298:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80062a2:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <FLASH_Program_Fast+0x68>)
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	4a13      	ldr	r2, [pc, #76]	; (80062f4 <FLASH_Program_Fast+0x68>)
 80062a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ae:	f3ef 8310 	mrs	r3, PRIMASK
 80062b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80062b4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80062b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80062b8:	b672      	cpsid	i
}
 80062ba:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	3304      	adds	r3, #4
 80062c8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	3304      	adds	r3, #4
 80062ce:	617b      	str	r3, [r7, #20]
    row_index--;
 80062d0:	7ffb      	ldrb	r3, [r7, #31]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80062d6:	7ffb      	ldrb	r3, [r7, #31]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1ef      	bne.n	80062bc <FLASH_Program_Fast+0x30>
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f383 8810 	msr	PRIMASK, r3
}
 80062e6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80062e8:	bf00      	nop
 80062ea:	3724      	adds	r7, #36	; 0x24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	40022000 	.word	0x40022000

080062f8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006302:	4b48      	ldr	r3, [pc, #288]	; (8006424 <HAL_FLASHEx_Erase+0x12c>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_FLASHEx_Erase+0x16>
 800630a:	2302      	movs	r3, #2
 800630c:	e085      	b.n	800641a <HAL_FLASHEx_Erase+0x122>
 800630e:	4b45      	ldr	r3, [pc, #276]	; (8006424 <HAL_FLASHEx_Erase+0x12c>)
 8006310:	2201      	movs	r2, #1
 8006312:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006314:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006318:	f7ff ff3a 	bl	8006190 <FLASH_WaitForLastOperation>
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d175      	bne.n	8006412 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006326:	4b3f      	ldr	r3, [pc, #252]	; (8006424 <HAL_FLASHEx_Erase+0x12c>)
 8006328:	2200      	movs	r2, #0
 800632a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800632c:	4b3e      	ldr	r3, [pc, #248]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006334:	2b00      	cmp	r3, #0
 8006336:	d013      	beq.n	8006360 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006338:	4b3b      	ldr	r3, [pc, #236]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006344:	4b38      	ldr	r3, [pc, #224]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a37      	ldr	r2, [pc, #220]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 800634a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800634e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006350:	4b34      	ldr	r3, [pc, #208]	; (8006424 <HAL_FLASHEx_Erase+0x12c>)
 8006352:	2203      	movs	r2, #3
 8006354:	771a      	strb	r2, [r3, #28]
 8006356:	e016      	b.n	8006386 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006358:	4b32      	ldr	r3, [pc, #200]	; (8006424 <HAL_FLASHEx_Erase+0x12c>)
 800635a:	2201      	movs	r2, #1
 800635c:	771a      	strb	r2, [r3, #28]
 800635e:	e012      	b.n	8006386 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006360:	4b31      	ldr	r3, [pc, #196]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006368:	2b00      	cmp	r3, #0
 800636a:	d009      	beq.n	8006380 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800636c:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a2d      	ldr	r2, [pc, #180]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 8006372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006376:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006378:	4b2a      	ldr	r3, [pc, #168]	; (8006424 <HAL_FLASHEx_Erase+0x12c>)
 800637a:	2202      	movs	r2, #2
 800637c:	771a      	strb	r2, [r3, #28]
 800637e:	e002      	b.n	8006386 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006380:	4b28      	ldr	r3, [pc, #160]	; (8006424 <HAL_FLASHEx_Erase+0x12c>)
 8006382:	2200      	movs	r2, #0
 8006384:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d111      	bne.n	80063b2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 f84a 	bl	800642c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006398:	f24c 3050 	movw	r0, #50000	; 0xc350
 800639c:	f7ff fef8 	bl	8006190 <FLASH_WaitForLastOperation>
 80063a0:	4603      	mov	r3, r0
 80063a2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80063a4:	4b20      	ldr	r3, [pc, #128]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 80063aa:	f023 0304 	bic.w	r3, r3, #4
 80063ae:	6153      	str	r3, [r2, #20]
 80063b0:	e02d      	b.n	800640e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f04f 32ff 	mov.w	r2, #4294967295
 80063b8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60bb      	str	r3, [r7, #8]
 80063c0:	e01d      	b.n	80063fe <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	4619      	mov	r1, r3
 80063c8:	68b8      	ldr	r0, [r7, #8]
 80063ca:	f000 f84d 	bl	8006468 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063d2:	f7ff fedd 	bl	8006190 <FLASH_WaitForLastOperation>
 80063d6:	4603      	mov	r3, r0
 80063d8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80063da:	4b13      	ldr	r3, [pc, #76]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	4a12      	ldr	r2, [pc, #72]	; (8006428 <HAL_FLASHEx_Erase+0x130>)
 80063e0:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80063e4:	f023 0302 	bic.w	r3, r3, #2
 80063e8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	601a      	str	r2, [r3, #0]
          break;
 80063f6:	e00a      	b.n	800640e <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	4413      	add	r3, r2
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	d3d9      	bcc.n	80063c2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800640e:	f000 f84f 	bl	80064b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006412:	4b04      	ldr	r3, [pc, #16]	; (8006424 <HAL_FLASHEx_Erase+0x12c>)
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]

  return status;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	2000001c 	.word	0x2000001c
 8006428:	40022000 	.word	0x40022000

0800642c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <FLASH_MassErase+0x38>)
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4a08      	ldr	r2, [pc, #32]	; (8006464 <FLASH_MassErase+0x38>)
 8006444:	f043 0304 	orr.w	r3, r3, #4
 8006448:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <FLASH_MassErase+0x38>)
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	4a05      	ldr	r2, [pc, #20]	; (8006464 <FLASH_MassErase+0x38>)
 8006450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006454:	6153      	str	r3, [r2, #20]
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40022000 	.word	0x40022000

08006468 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006472:	4b0e      	ldr	r3, [pc, #56]	; (80064ac <FLASH_PageErase+0x44>)
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006482:	490a      	ldr	r1, [pc, #40]	; (80064ac <FLASH_PageErase+0x44>)
 8006484:	4313      	orrs	r3, r2
 8006486:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006488:	4b08      	ldr	r3, [pc, #32]	; (80064ac <FLASH_PageErase+0x44>)
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	4a07      	ldr	r2, [pc, #28]	; (80064ac <FLASH_PageErase+0x44>)
 800648e:	f043 0302 	orr.w	r3, r3, #2
 8006492:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <FLASH_PageErase+0x44>)
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	4a04      	ldr	r2, [pc, #16]	; (80064ac <FLASH_PageErase+0x44>)
 800649a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800649e:	6153      	str	r3, [r2, #20]
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	40022000 	.word	0x40022000

080064b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80064b6:	4b21      	ldr	r3, [pc, #132]	; (800653c <FLASH_FlushCaches+0x8c>)
 80064b8:	7f1b      	ldrb	r3, [r3, #28]
 80064ba:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d002      	beq.n	80064c8 <FLASH_FlushCaches+0x18>
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d117      	bne.n	80064f8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <FLASH_FlushCaches+0x90>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <FLASH_FlushCaches+0x90>)
 80064ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064d2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80064d4:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <FLASH_FlushCaches+0x90>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a19      	ldr	r2, [pc, #100]	; (8006540 <FLASH_FlushCaches+0x90>)
 80064da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	4b17      	ldr	r3, [pc, #92]	; (8006540 <FLASH_FlushCaches+0x90>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a16      	ldr	r2, [pc, #88]	; (8006540 <FLASH_FlushCaches+0x90>)
 80064e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064ec:	4b14      	ldr	r3, [pc, #80]	; (8006540 <FLASH_FlushCaches+0x90>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a13      	ldr	r2, [pc, #76]	; (8006540 <FLASH_FlushCaches+0x90>)
 80064f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064f6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d002      	beq.n	8006504 <FLASH_FlushCaches+0x54>
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d111      	bne.n	8006528 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006504:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <FLASH_FlushCaches+0x90>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a0d      	ldr	r2, [pc, #52]	; (8006540 <FLASH_FlushCaches+0x90>)
 800650a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <FLASH_FlushCaches+0x90>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a0a      	ldr	r2, [pc, #40]	; (8006540 <FLASH_FlushCaches+0x90>)
 8006516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800651a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800651c:	4b08      	ldr	r3, [pc, #32]	; (8006540 <FLASH_FlushCaches+0x90>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a07      	ldr	r2, [pc, #28]	; (8006540 <FLASH_FlushCaches+0x90>)
 8006522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006526:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006528:	4b04      	ldr	r3, [pc, #16]	; (800653c <FLASH_FlushCaches+0x8c>)
 800652a:	2200      	movs	r2, #0
 800652c:	771a      	strb	r2, [r3, #28]
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	2000001c 	.word	0x2000001c
 8006540:	40022000 	.word	0x40022000

08006544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006552:	e154      	b.n	80067fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	2101      	movs	r1, #1
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	fa01 f303 	lsl.w	r3, r1, r3
 8006560:	4013      	ands	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8146 	beq.w	80067f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	2b01      	cmp	r3, #1
 8006576:	d005      	beq.n	8006584 <HAL_GPIO_Init+0x40>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d130      	bne.n	80065e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	2203      	movs	r2, #3
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	43db      	mvns	r3, r3
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4013      	ands	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065ba:	2201      	movs	r2, #1
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	fa02 f303 	lsl.w	r3, r2, r3
 80065c2:	43db      	mvns	r3, r3
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4013      	ands	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	091b      	lsrs	r3, r3, #4
 80065d0:	f003 0201 	and.w	r2, r3, #1
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d017      	beq.n	8006622 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	2203      	movs	r2, #3
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	43db      	mvns	r3, r3
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4013      	ands	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d123      	bne.n	8006676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	08da      	lsrs	r2, r3, #3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3208      	adds	r2, #8
 8006636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	220f      	movs	r2, #15
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	43db      	mvns	r3, r3
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4013      	ands	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	08da      	lsrs	r2, r3, #3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3208      	adds	r2, #8
 8006670:	6939      	ldr	r1, [r7, #16]
 8006672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	2203      	movs	r2, #3
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43db      	mvns	r3, r3
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4013      	ands	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f003 0203 	and.w	r2, r3, #3
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	fa02 f303 	lsl.w	r3, r2, r3
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 80a0 	beq.w	80067f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066b8:	4b58      	ldr	r3, [pc, #352]	; (800681c <HAL_GPIO_Init+0x2d8>)
 80066ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066bc:	4a57      	ldr	r2, [pc, #348]	; (800681c <HAL_GPIO_Init+0x2d8>)
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	6613      	str	r3, [r2, #96]	; 0x60
 80066c4:	4b55      	ldr	r3, [pc, #340]	; (800681c <HAL_GPIO_Init+0x2d8>)
 80066c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80066d0:	4a53      	ldr	r2, [pc, #332]	; (8006820 <HAL_GPIO_Init+0x2dc>)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	089b      	lsrs	r3, r3, #2
 80066d6:	3302      	adds	r3, #2
 80066d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	220f      	movs	r2, #15
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4013      	ands	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066fa:	d019      	beq.n	8006730 <HAL_GPIO_Init+0x1ec>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a49      	ldr	r2, [pc, #292]	; (8006824 <HAL_GPIO_Init+0x2e0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d013      	beq.n	800672c <HAL_GPIO_Init+0x1e8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a48      	ldr	r2, [pc, #288]	; (8006828 <HAL_GPIO_Init+0x2e4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00d      	beq.n	8006728 <HAL_GPIO_Init+0x1e4>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a47      	ldr	r2, [pc, #284]	; (800682c <HAL_GPIO_Init+0x2e8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <HAL_GPIO_Init+0x1e0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a46      	ldr	r2, [pc, #280]	; (8006830 <HAL_GPIO_Init+0x2ec>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d101      	bne.n	8006720 <HAL_GPIO_Init+0x1dc>
 800671c:	2304      	movs	r3, #4
 800671e:	e008      	b.n	8006732 <HAL_GPIO_Init+0x1ee>
 8006720:	2307      	movs	r3, #7
 8006722:	e006      	b.n	8006732 <HAL_GPIO_Init+0x1ee>
 8006724:	2303      	movs	r3, #3
 8006726:	e004      	b.n	8006732 <HAL_GPIO_Init+0x1ee>
 8006728:	2302      	movs	r3, #2
 800672a:	e002      	b.n	8006732 <HAL_GPIO_Init+0x1ee>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <HAL_GPIO_Init+0x1ee>
 8006730:	2300      	movs	r3, #0
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	f002 0203 	and.w	r2, r2, #3
 8006738:	0092      	lsls	r2, r2, #2
 800673a:	4093      	lsls	r3, r2
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006742:	4937      	ldr	r1, [pc, #220]	; (8006820 <HAL_GPIO_Init+0x2dc>)
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	089b      	lsrs	r3, r3, #2
 8006748:	3302      	adds	r3, #2
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006750:	4b38      	ldr	r3, [pc, #224]	; (8006834 <HAL_GPIO_Init+0x2f0>)
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	43db      	mvns	r3, r3
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4013      	ands	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006774:	4a2f      	ldr	r2, [pc, #188]	; (8006834 <HAL_GPIO_Init+0x2f0>)
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800677a:	4b2e      	ldr	r3, [pc, #184]	; (8006834 <HAL_GPIO_Init+0x2f0>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	43db      	mvns	r3, r3
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4013      	ands	r3, r2
 8006788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800679e:	4a25      	ldr	r2, [pc, #148]	; (8006834 <HAL_GPIO_Init+0x2f0>)
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80067a4:	4b23      	ldr	r3, [pc, #140]	; (8006834 <HAL_GPIO_Init+0x2f0>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	43db      	mvns	r3, r3
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4013      	ands	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067c8:	4a1a      	ldr	r2, [pc, #104]	; (8006834 <HAL_GPIO_Init+0x2f0>)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80067ce:	4b19      	ldr	r3, [pc, #100]	; (8006834 <HAL_GPIO_Init+0x2f0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	43db      	mvns	r3, r3
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4013      	ands	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067f2:	4a10      	ldr	r2, [pc, #64]	; (8006834 <HAL_GPIO_Init+0x2f0>)
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	3301      	adds	r3, #1
 80067fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	fa22 f303 	lsr.w	r3, r2, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	f47f aea3 	bne.w	8006554 <HAL_GPIO_Init+0x10>
  }
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	40021000 	.word	0x40021000
 8006820:	40010000 	.word	0x40010000
 8006824:	48000400 	.word	0x48000400
 8006828:	48000800 	.word	0x48000800
 800682c:	48000c00 	.word	0x48000c00
 8006830:	48001000 	.word	0x48001000
 8006834:	40010400 	.word	0x40010400

08006838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	887b      	ldrh	r3, [r7, #2]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
 8006854:	e001      	b.n	800685a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	807b      	strh	r3, [r7, #2]
 8006874:	4613      	mov	r3, r2
 8006876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006878:	787b      	ldrb	r3, [r7, #1]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800687e:	887a      	ldrh	r2, [r7, #2]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006884:	e002      	b.n	800688c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006886:	887a      	ldrh	r2, [r7, #2]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068aa:	887a      	ldrh	r2, [r7, #2]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4013      	ands	r3, r2
 80068b0:	041a      	lsls	r2, r3, #16
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	43d9      	mvns	r1, r3
 80068b6:	887b      	ldrh	r3, [r7, #2]
 80068b8:	400b      	ands	r3, r1
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	619a      	str	r2, [r3, #24]
}
 80068c0:	bf00      	nop
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80068d0:	4b04      	ldr	r3, [pc, #16]	; (80068e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80068d8:	4618      	mov	r0, r3
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40007000 	.word	0x40007000

080068e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f6:	d130      	bne.n	800695a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80068f8:	4b23      	ldr	r3, [pc, #140]	; (8006988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006904:	d038      	beq.n	8006978 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006906:	4b20      	ldr	r3, [pc, #128]	; (8006988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800690e:	4a1e      	ldr	r2, [pc, #120]	; (8006988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006910:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006914:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006916:	4b1d      	ldr	r3, [pc, #116]	; (800698c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2232      	movs	r2, #50	; 0x32
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	0c9b      	lsrs	r3, r3, #18
 8006928:	3301      	adds	r3, #1
 800692a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800692c:	e002      	b.n	8006934 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3b01      	subs	r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006934:	4b14      	ldr	r3, [pc, #80]	; (8006988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006940:	d102      	bne.n	8006948 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f2      	bne.n	800692e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006954:	d110      	bne.n	8006978 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e00f      	b.n	800697a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800695a:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006966:	d007      	beq.n	8006978 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006968:	4b07      	ldr	r3, [pc, #28]	; (8006988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006970:	4a05      	ldr	r2, [pc, #20]	; (8006988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006976:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40007000 	.word	0x40007000
 800698c:	20000010 	.word	0x20000010
 8006990:	431bde83 	.word	0x431bde83

08006994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e3fe      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069a6:	4ba1      	ldr	r3, [pc, #644]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 030c 	and.w	r3, r3, #12
 80069ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069b0:	4b9e      	ldr	r3, [pc, #632]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0310 	and.w	r3, r3, #16
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 80e4 	beq.w	8006b90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d007      	beq.n	80069de <HAL_RCC_OscConfig+0x4a>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b0c      	cmp	r3, #12
 80069d2:	f040 808b 	bne.w	8006aec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	f040 8087 	bne.w	8006aec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069de:	4b93      	ldr	r3, [pc, #588]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_RCC_OscConfig+0x62>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e3d6      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1a      	ldr	r2, [r3, #32]
 80069fa:	4b8c      	ldr	r3, [pc, #560]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d004      	beq.n	8006a10 <HAL_RCC_OscConfig+0x7c>
 8006a06:	4b89      	ldr	r3, [pc, #548]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a0e:	e005      	b.n	8006a1c <HAL_RCC_OscConfig+0x88>
 8006a10:	4b86      	ldr	r3, [pc, #536]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a16:	091b      	lsrs	r3, r3, #4
 8006a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d223      	bcs.n	8006a68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fdbd 	bl	80075a4 <RCC_SetFlashLatencyFromMSIRange>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e3b7      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a34:	4b7d      	ldr	r3, [pc, #500]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a7c      	ldr	r2, [pc, #496]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a3a:	f043 0308 	orr.w	r3, r3, #8
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	4b7a      	ldr	r3, [pc, #488]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	4977      	ldr	r1, [pc, #476]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a52:	4b76      	ldr	r3, [pc, #472]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	4972      	ldr	r1, [pc, #456]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	604b      	str	r3, [r1, #4]
 8006a66:	e025      	b.n	8006ab4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a68:	4b70      	ldr	r3, [pc, #448]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a6f      	ldr	r2, [pc, #444]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a6e:	f043 0308 	orr.w	r3, r3, #8
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	4b6d      	ldr	r3, [pc, #436]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	496a      	ldr	r1, [pc, #424]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a86:	4b69      	ldr	r3, [pc, #420]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	4965      	ldr	r1, [pc, #404]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fd7d 	bl	80075a4 <RCC_SetFlashLatencyFromMSIRange>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e377      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ab4:	f000 fc80 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	4b5c      	ldr	r3, [pc, #368]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	091b      	lsrs	r3, r3, #4
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	495a      	ldr	r1, [pc, #360]	; (8006c30 <HAL_RCC_OscConfig+0x29c>)
 8006ac6:	5ccb      	ldrb	r3, [r1, r3]
 8006ac8:	f003 031f 	and.w	r3, r3, #31
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad0:	4a58      	ldr	r2, [pc, #352]	; (8006c34 <HAL_RCC_OscConfig+0x2a0>)
 8006ad2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ad4:	4b58      	ldr	r3, [pc, #352]	; (8006c38 <HAL_RCC_OscConfig+0x2a4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fd fb47 	bl	800416c <HAL_InitTick>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d052      	beq.n	8006b8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	e35b      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d032      	beq.n	8006b5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006af4:	4b4d      	ldr	r3, [pc, #308]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a4c      	ldr	r2, [pc, #304]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b00:	f7fd fd0a 	bl	8004518 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b08:	f7fd fd06 	bl	8004518 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e344      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b1a:	4b44      	ldr	r3, [pc, #272]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b26:	4b41      	ldr	r3, [pc, #260]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a40      	ldr	r2, [pc, #256]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006b2c:	f043 0308 	orr.w	r3, r3, #8
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	4b3e      	ldr	r3, [pc, #248]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	493b      	ldr	r1, [pc, #236]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b44:	4b39      	ldr	r3, [pc, #228]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	021b      	lsls	r3, r3, #8
 8006b52:	4936      	ldr	r1, [pc, #216]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	604b      	str	r3, [r1, #4]
 8006b58:	e01a      	b.n	8006b90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b5a:	4b34      	ldr	r3, [pc, #208]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a33      	ldr	r2, [pc, #204]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006b60:	f023 0301 	bic.w	r3, r3, #1
 8006b64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b66:	f7fd fcd7 	bl	8004518 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b6e:	f7fd fcd3 	bl	8004518 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e311      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b80:	4b2a      	ldr	r3, [pc, #168]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f0      	bne.n	8006b6e <HAL_RCC_OscConfig+0x1da>
 8006b8c:	e000      	b.n	8006b90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d074      	beq.n	8006c86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d005      	beq.n	8006bae <HAL_RCC_OscConfig+0x21a>
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	d10e      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d10b      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bae:	4b1f      	ldr	r3, [pc, #124]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d064      	beq.n	8006c84 <HAL_RCC_OscConfig+0x2f0>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d160      	bne.n	8006c84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e2ee      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bce:	d106      	bne.n	8006bde <HAL_RCC_OscConfig+0x24a>
 8006bd0:	4b16      	ldr	r3, [pc, #88]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	e01d      	b.n	8006c1a <HAL_RCC_OscConfig+0x286>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006be6:	d10c      	bne.n	8006c02 <HAL_RCC_OscConfig+0x26e>
 8006be8:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a0f      	ldr	r2, [pc, #60]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006bee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	e00b      	b.n	8006c1a <HAL_RCC_OscConfig+0x286>
 8006c02:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a06      	ldr	r2, [pc, #24]	; (8006c2c <HAL_RCC_OscConfig+0x298>)
 8006c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01c      	beq.n	8006c5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c22:	f7fd fc79 	bl	8004518 <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c28:	e011      	b.n	8006c4e <HAL_RCC_OscConfig+0x2ba>
 8006c2a:	bf00      	nop
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	0801384c 	.word	0x0801384c
 8006c34:	20000010 	.word	0x20000010
 8006c38:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c3c:	f7fd fc6c 	bl	8004518 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b64      	cmp	r3, #100	; 0x64
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e2aa      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c4e:	4baf      	ldr	r3, [pc, #700]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f0      	beq.n	8006c3c <HAL_RCC_OscConfig+0x2a8>
 8006c5a:	e014      	b.n	8006c86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5c:	f7fd fc5c 	bl	8004518 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c64:	f7fd fc58 	bl	8004518 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b64      	cmp	r3, #100	; 0x64
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e296      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c76:	4ba5      	ldr	r3, [pc, #660]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <HAL_RCC_OscConfig+0x2d0>
 8006c82:	e000      	b.n	8006c86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d060      	beq.n	8006d54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d005      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x310>
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2b0c      	cmp	r3, #12
 8006c9c:	d119      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d116      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ca4:	4b99      	ldr	r3, [pc, #612]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <HAL_RCC_OscConfig+0x328>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e273      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cbc:	4b93      	ldr	r3, [pc, #588]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	061b      	lsls	r3, r3, #24
 8006cca:	4990      	ldr	r1, [pc, #576]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cd0:	e040      	b.n	8006d54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d023      	beq.n	8006d22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cda:	4b8c      	ldr	r3, [pc, #560]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a8b      	ldr	r2, [pc, #556]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce6:	f7fd fc17 	bl	8004518 <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cec:	e008      	b.n	8006d00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cee:	f7fd fc13 	bl	8004518 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e251      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d00:	4b82      	ldr	r3, [pc, #520]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0f0      	beq.n	8006cee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d0c:	4b7f      	ldr	r3, [pc, #508]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	061b      	lsls	r3, r3, #24
 8006d1a:	497c      	ldr	r1, [pc, #496]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	604b      	str	r3, [r1, #4]
 8006d20:	e018      	b.n	8006d54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d22:	4b7a      	ldr	r3, [pc, #488]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a79      	ldr	r2, [pc, #484]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2e:	f7fd fbf3 	bl	8004518 <HAL_GetTick>
 8006d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d34:	e008      	b.n	8006d48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d36:	f7fd fbef 	bl	8004518 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e22d      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d48:	4b70      	ldr	r3, [pc, #448]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1f0      	bne.n	8006d36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d03c      	beq.n	8006dda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01c      	beq.n	8006da2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d68:	4b68      	ldr	r3, [pc, #416]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d6e:	4a67      	ldr	r2, [pc, #412]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006d70:	f043 0301 	orr.w	r3, r3, #1
 8006d74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d78:	f7fd fbce 	bl	8004518 <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d80:	f7fd fbca 	bl	8004518 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e208      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d92:	4b5e      	ldr	r3, [pc, #376]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0ef      	beq.n	8006d80 <HAL_RCC_OscConfig+0x3ec>
 8006da0:	e01b      	b.n	8006dda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006da2:	4b5a      	ldr	r3, [pc, #360]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006da8:	4a58      	ldr	r2, [pc, #352]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db2:	f7fd fbb1 	bl	8004518 <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dba:	f7fd fbad 	bl	8004518 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e1eb      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006dcc:	4b4f      	ldr	r3, [pc, #316]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1ef      	bne.n	8006dba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 80a6 	beq.w	8006f34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006de8:	2300      	movs	r3, #0
 8006dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006dec:	4b47      	ldr	r3, [pc, #284]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10d      	bne.n	8006e14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006df8:	4b44      	ldr	r3, [pc, #272]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfc:	4a43      	ldr	r2, [pc, #268]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e02:	6593      	str	r3, [r2, #88]	; 0x58
 8006e04:	4b41      	ldr	r3, [pc, #260]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e10:	2301      	movs	r3, #1
 8006e12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e14:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <HAL_RCC_OscConfig+0x57c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d118      	bne.n	8006e52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e20:	4b3b      	ldr	r3, [pc, #236]	; (8006f10 <HAL_RCC_OscConfig+0x57c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a3a      	ldr	r2, [pc, #232]	; (8006f10 <HAL_RCC_OscConfig+0x57c>)
 8006e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e2c:	f7fd fb74 	bl	8004518 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e34:	f7fd fb70 	bl	8004518 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e1ae      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e46:	4b32      	ldr	r3, [pc, #200]	; (8006f10 <HAL_RCC_OscConfig+0x57c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d108      	bne.n	8006e6c <HAL_RCC_OscConfig+0x4d8>
 8006e5a:	4b2c      	ldr	r3, [pc, #176]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e60:	4a2a      	ldr	r2, [pc, #168]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006e62:	f043 0301 	orr.w	r3, r3, #1
 8006e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e6a:	e024      	b.n	8006eb6 <HAL_RCC_OscConfig+0x522>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b05      	cmp	r3, #5
 8006e72:	d110      	bne.n	8006e96 <HAL_RCC_OscConfig+0x502>
 8006e74:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	4a24      	ldr	r2, [pc, #144]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006e7c:	f043 0304 	orr.w	r3, r3, #4
 8006e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e84:	4b21      	ldr	r3, [pc, #132]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8a:	4a20      	ldr	r2, [pc, #128]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006e8c:	f043 0301 	orr.w	r3, r3, #1
 8006e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e94:	e00f      	b.n	8006eb6 <HAL_RCC_OscConfig+0x522>
 8006e96:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9c:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006e9e:	f023 0301 	bic.w	r3, r3, #1
 8006ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ea6:	4b19      	ldr	r3, [pc, #100]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eac:	4a17      	ldr	r2, [pc, #92]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006eae:	f023 0304 	bic.w	r3, r3, #4
 8006eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d016      	beq.n	8006eec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebe:	f7fd fb2b 	bl	8004518 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ec4:	e00a      	b.n	8006edc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec6:	f7fd fb27 	bl	8004518 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e163      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <HAL_RCC_OscConfig+0x578>)
 8006ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0ed      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x532>
 8006eea:	e01a      	b.n	8006f22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eec:	f7fd fb14 	bl	8004518 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ef2:	e00f      	b.n	8006f14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ef4:	f7fd fb10 	bl	8004518 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d906      	bls.n	8006f14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e14c      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
 8006f0a:	bf00      	nop
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f14:	4ba5      	ldr	r3, [pc, #660]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e8      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f22:	7ffb      	ldrb	r3, [r7, #31]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d105      	bne.n	8006f34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f28:	4ba0      	ldr	r3, [pc, #640]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2c:	4a9f      	ldr	r2, [pc, #636]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8006f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d03c      	beq.n	8006fba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01c      	beq.n	8006f82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f48:	4b98      	ldr	r3, [pc, #608]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8006f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f4e:	4a97      	ldr	r2, [pc, #604]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8006f50:	f043 0301 	orr.w	r3, r3, #1
 8006f54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f58:	f7fd fade 	bl	8004518 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f60:	f7fd fada 	bl	8004518 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e118      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f72:	4b8e      	ldr	r3, [pc, #568]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8006f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0ef      	beq.n	8006f60 <HAL_RCC_OscConfig+0x5cc>
 8006f80:	e01b      	b.n	8006fba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f82:	4b8a      	ldr	r3, [pc, #552]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8006f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f88:	4a88      	ldr	r2, [pc, #544]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8006f8a:	f023 0301 	bic.w	r3, r3, #1
 8006f8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f92:	f7fd fac1 	bl	8004518 <HAL_GetTick>
 8006f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f98:	e008      	b.n	8006fac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f9a:	f7fd fabd 	bl	8004518 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e0fb      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fac:	4b7f      	ldr	r3, [pc, #508]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8006fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1ef      	bne.n	8006f9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80ef 	beq.w	80071a2 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	f040 80c5 	bne.w	8007158 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006fce:	4b77      	ldr	r3, [pc, #476]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f003 0203 	and.w	r2, r3, #3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d12c      	bne.n	800703c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	3b01      	subs	r3, #1
 8006fee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d123      	bne.n	800703c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007000:	429a      	cmp	r2, r3
 8007002:	d11b      	bne.n	800703c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007010:	429a      	cmp	r2, r3
 8007012:	d113      	bne.n	800703c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	085b      	lsrs	r3, r3, #1
 8007020:	3b01      	subs	r3, #1
 8007022:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007024:	429a      	cmp	r2, r3
 8007026:	d109      	bne.n	800703c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	3b01      	subs	r3, #1
 8007036:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007038:	429a      	cmp	r2, r3
 800703a:	d067      	beq.n	800710c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b0c      	cmp	r3, #12
 8007040:	d062      	beq.n	8007108 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007042:	4b5a      	ldr	r3, [pc, #360]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e0a8      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007052:	4b56      	ldr	r3, [pc, #344]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a55      	ldr	r2, [pc, #340]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8007058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800705c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800705e:	f7fd fa5b 	bl	8004518 <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007064:	e008      	b.n	8007078 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007066:	f7fd fa57 	bl	8004518 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e095      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007078:	4b4c      	ldr	r3, [pc, #304]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1f0      	bne.n	8007066 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007084:	4b49      	ldr	r3, [pc, #292]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	4b49      	ldr	r3, [pc, #292]	; (80071b0 <HAL_RCC_OscConfig+0x81c>)
 800708a:	4013      	ands	r3, r2
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007094:	3a01      	subs	r2, #1
 8007096:	0112      	lsls	r2, r2, #4
 8007098:	4311      	orrs	r1, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800709e:	0212      	lsls	r2, r2, #8
 80070a0:	4311      	orrs	r1, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070a6:	0852      	lsrs	r2, r2, #1
 80070a8:	3a01      	subs	r2, #1
 80070aa:	0552      	lsls	r2, r2, #21
 80070ac:	4311      	orrs	r1, r2
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070b2:	0852      	lsrs	r2, r2, #1
 80070b4:	3a01      	subs	r2, #1
 80070b6:	0652      	lsls	r2, r2, #25
 80070b8:	4311      	orrs	r1, r2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070be:	06d2      	lsls	r2, r2, #27
 80070c0:	430a      	orrs	r2, r1
 80070c2:	493a      	ldr	r1, [pc, #232]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80070c8:	4b38      	ldr	r3, [pc, #224]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a37      	ldr	r2, [pc, #220]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 80070ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070d4:	4b35      	ldr	r3, [pc, #212]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	4a34      	ldr	r2, [pc, #208]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 80070da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070e0:	f7fd fa1a 	bl	8004518 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e8:	f7fd fa16 	bl	8004518 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e054      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070fa:	4b2c      	ldr	r3, [pc, #176]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007106:	e04c      	b.n	80071a2 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e04b      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800710c:	4b27      	ldr	r3, [pc, #156]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d144      	bne.n	80071a2 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007118:	4b24      	ldr	r3, [pc, #144]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a23      	ldr	r2, [pc, #140]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 800711e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007122:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007124:	4b21      	ldr	r3, [pc, #132]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	4a20      	ldr	r2, [pc, #128]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 800712a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800712e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007130:	f7fd f9f2 	bl	8004518 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007138:	f7fd f9ee 	bl	8004518 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e02c      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800714a:	4b18      	ldr	r3, [pc, #96]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f0      	beq.n	8007138 <HAL_RCC_OscConfig+0x7a4>
 8007156:	e024      	b.n	80071a2 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2b0c      	cmp	r3, #12
 800715c:	d01f      	beq.n	800719e <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800715e:	4b13      	ldr	r3, [pc, #76]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a12      	ldr	r2, [pc, #72]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8007164:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716a:	f7fd f9d5 	bl	8004518 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007172:	f7fd f9d1 	bl	8004518 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e00f      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007184:	4b09      	ldr	r3, [pc, #36]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f0      	bne.n	8007172 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	4905      	ldr	r1, [pc, #20]	; (80071ac <HAL_RCC_OscConfig+0x818>)
 8007196:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <HAL_RCC_OscConfig+0x820>)
 8007198:	4013      	ands	r3, r2
 800719a:	60cb      	str	r3, [r1, #12]
 800719c:	e001      	b.n	80071a2 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3720      	adds	r7, #32
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40021000 	.word	0x40021000
 80071b0:	019d808c 	.word	0x019d808c
 80071b4:	feeefffc 	.word	0xfeeefffc

080071b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0e7      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071cc:	4b75      	ldr	r3, [pc, #468]	; (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d910      	bls.n	80071fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071da:	4b72      	ldr	r3, [pc, #456]	; (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f023 0207 	bic.w	r2, r3, #7
 80071e2:	4970      	ldr	r1, [pc, #448]	; (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ea:	4b6e      	ldr	r3, [pc, #440]	; (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d001      	beq.n	80071fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0cf      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d010      	beq.n	800722a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	4b66      	ldr	r3, [pc, #408]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007214:	429a      	cmp	r2, r3
 8007216:	d908      	bls.n	800722a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007218:	4b63      	ldr	r3, [pc, #396]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	4960      	ldr	r1, [pc, #384]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007226:	4313      	orrs	r3, r2
 8007228:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04c      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b03      	cmp	r3, #3
 800723c:	d107      	bne.n	800724e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800723e:	4b5a      	ldr	r3, [pc, #360]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d121      	bne.n	800728e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e0a6      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d107      	bne.n	8007266 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007256:	4b54      	ldr	r3, [pc, #336]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d115      	bne.n	800728e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e09a      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d107      	bne.n	800727e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800726e:	4b4e      	ldr	r3, [pc, #312]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e08e      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800727e:	4b4a      	ldr	r3, [pc, #296]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e086      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800728e:	4b46      	ldr	r3, [pc, #280]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f023 0203 	bic.w	r2, r3, #3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	4943      	ldr	r1, [pc, #268]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 800729c:	4313      	orrs	r3, r2
 800729e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072a0:	f7fd f93a 	bl	8004518 <HAL_GetTick>
 80072a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a6:	e00a      	b.n	80072be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a8:	f7fd f936 	bl	8004518 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e06e      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072be:	4b3a      	ldr	r3, [pc, #232]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 020c 	and.w	r2, r3, #12
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d1eb      	bne.n	80072a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d010      	beq.n	80072fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	4b31      	ldr	r3, [pc, #196]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d208      	bcs.n	80072fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ec:	4b2e      	ldr	r3, [pc, #184]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	492b      	ldr	r1, [pc, #172]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072fe:	4b29      	ldr	r3, [pc, #164]	; (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	429a      	cmp	r2, r3
 800730a:	d210      	bcs.n	800732e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800730c:	4b25      	ldr	r3, [pc, #148]	; (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f023 0207 	bic.w	r2, r3, #7
 8007314:	4923      	ldr	r1, [pc, #140]	; (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	4313      	orrs	r3, r2
 800731a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800731c:	4b21      	ldr	r3, [pc, #132]	; (80073a4 <HAL_RCC_ClockConfig+0x1ec>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d001      	beq.n	800732e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e036      	b.n	800739c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d008      	beq.n	800734c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800733a:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	4918      	ldr	r1, [pc, #96]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007348:	4313      	orrs	r3, r2
 800734a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d009      	beq.n	800736c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007358:	4b13      	ldr	r3, [pc, #76]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	4910      	ldr	r1, [pc, #64]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007368:	4313      	orrs	r3, r2
 800736a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800736c:	f000 f824 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 8007370:	4602      	mov	r2, r0
 8007372:	4b0d      	ldr	r3, [pc, #52]	; (80073a8 <HAL_RCC_ClockConfig+0x1f0>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	091b      	lsrs	r3, r3, #4
 8007378:	f003 030f 	and.w	r3, r3, #15
 800737c:	490b      	ldr	r1, [pc, #44]	; (80073ac <HAL_RCC_ClockConfig+0x1f4>)
 800737e:	5ccb      	ldrb	r3, [r1, r3]
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
 8007388:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <HAL_RCC_ClockConfig+0x1f8>)
 800738a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <HAL_RCC_ClockConfig+0x1fc>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4618      	mov	r0, r3
 8007392:	f7fc feeb 	bl	800416c <HAL_InitTick>
 8007396:	4603      	mov	r3, r0
 8007398:	72fb      	strb	r3, [r7, #11]

  return status;
 800739a:	7afb      	ldrb	r3, [r7, #11]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40022000 	.word	0x40022000
 80073a8:	40021000 	.word	0x40021000
 80073ac:	0801384c 	.word	0x0801384c
 80073b0:	20000010 	.word	0x20000010
 80073b4:	20000014 	.word	0x20000014

080073b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b089      	sub	sp, #36	; 0x24
 80073bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	2300      	movs	r3, #0
 80073c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073c6:	4b3e      	ldr	r3, [pc, #248]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 030c 	and.w	r3, r3, #12
 80073ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073d0:	4b3b      	ldr	r3, [pc, #236]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <HAL_RCC_GetSysClockFreq+0x34>
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	2b0c      	cmp	r3, #12
 80073e4:	d121      	bne.n	800742a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d11e      	bne.n	800742a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80073ec:	4b34      	ldr	r3, [pc, #208]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d107      	bne.n	8007408 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80073f8:	4b31      	ldr	r3, [pc, #196]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80073fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073fe:	0a1b      	lsrs	r3, r3, #8
 8007400:	f003 030f 	and.w	r3, r3, #15
 8007404:	61fb      	str	r3, [r7, #28]
 8007406:	e005      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007408:	4b2d      	ldr	r3, [pc, #180]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	091b      	lsrs	r3, r3, #4
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007414:	4a2b      	ldr	r2, [pc, #172]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800741c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10d      	bne.n	8007440 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007428:	e00a      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b04      	cmp	r3, #4
 800742e:	d102      	bne.n	8007436 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007430:	4b25      	ldr	r3, [pc, #148]	; (80074c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	e004      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b08      	cmp	r3, #8
 800743a:	d101      	bne.n	8007440 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800743c:	4b23      	ldr	r3, [pc, #140]	; (80074cc <HAL_RCC_GetSysClockFreq+0x114>)
 800743e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b0c      	cmp	r3, #12
 8007444:	d134      	bne.n	80074b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007446:	4b1e      	ldr	r3, [pc, #120]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d003      	beq.n	800745e <HAL_RCC_GetSysClockFreq+0xa6>
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b03      	cmp	r3, #3
 800745a:	d003      	beq.n	8007464 <HAL_RCC_GetSysClockFreq+0xac>
 800745c:	e005      	b.n	800746a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800745e:	4b1a      	ldr	r3, [pc, #104]	; (80074c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007460:	617b      	str	r3, [r7, #20]
      break;
 8007462:	e005      	b.n	8007470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007464:	4b19      	ldr	r3, [pc, #100]	; (80074cc <HAL_RCC_GetSysClockFreq+0x114>)
 8007466:	617b      	str	r3, [r7, #20]
      break;
 8007468:	e002      	b.n	8007470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	617b      	str	r3, [r7, #20]
      break;
 800746e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007470:	4b13      	ldr	r3, [pc, #76]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	091b      	lsrs	r3, r3, #4
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	3301      	adds	r3, #1
 800747c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800747e:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	fb02 f203 	mul.w	r2, r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	fbb2 f3f3 	udiv	r3, r2, r3
 8007494:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007496:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	0e5b      	lsrs	r3, r3, #25
 800749c:	f003 0303 	and.w	r3, r3, #3
 80074a0:	3301      	adds	r3, #1
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80074b0:	69bb      	ldr	r3, [r7, #24]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3724      	adds	r7, #36	; 0x24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40021000 	.word	0x40021000
 80074c4:	08013864 	.word	0x08013864
 80074c8:	00f42400 	.word	0x00f42400
 80074cc:	007a1200 	.word	0x007a1200

080074d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074d4:	4b03      	ldr	r3, [pc, #12]	; (80074e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80074d6:	681b      	ldr	r3, [r3, #0]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000010 	.word	0x20000010

080074e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80074ec:	f7ff fff0 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 80074f0:	4602      	mov	r2, r0
 80074f2:	4b06      	ldr	r3, [pc, #24]	; (800750c <HAL_RCC_GetPCLK1Freq+0x24>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	0a1b      	lsrs	r3, r3, #8
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	4904      	ldr	r1, [pc, #16]	; (8007510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074fe:	5ccb      	ldrb	r3, [r1, r3]
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007508:	4618      	mov	r0, r3
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40021000 	.word	0x40021000
 8007510:	0801385c 	.word	0x0801385c

08007514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007518:	f7ff ffda 	bl	80074d0 <HAL_RCC_GetHCLKFreq>
 800751c:	4602      	mov	r2, r0
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	0adb      	lsrs	r3, r3, #11
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	4904      	ldr	r1, [pc, #16]	; (800753c <HAL_RCC_GetPCLK2Freq+0x28>)
 800752a:	5ccb      	ldrb	r3, [r1, r3]
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007534:	4618      	mov	r0, r3
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40021000 	.word	0x40021000
 800753c:	0801385c 	.word	0x0801385c

08007540 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	220f      	movs	r2, #15
 800754e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007550:	4b12      	ldr	r3, [pc, #72]	; (800759c <HAL_RCC_GetClockConfig+0x5c>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 0203 	and.w	r2, r3, #3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800755c:	4b0f      	ldr	r3, [pc, #60]	; (800759c <HAL_RCC_GetClockConfig+0x5c>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007568:	4b0c      	ldr	r3, [pc, #48]	; (800759c <HAL_RCC_GetClockConfig+0x5c>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007574:	4b09      	ldr	r3, [pc, #36]	; (800759c <HAL_RCC_GetClockConfig+0x5c>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	08db      	lsrs	r3, r3, #3
 800757a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007582:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <HAL_RCC_GetClockConfig+0x60>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0207 	and.w	r2, r3, #7
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	601a      	str	r2, [r3, #0]
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40021000 	.word	0x40021000
 80075a0:	40022000 	.word	0x40022000

080075a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80075ac:	2300      	movs	r3, #0
 80075ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80075b0:	4b2a      	ldr	r3, [pc, #168]	; (800765c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80075bc:	f7ff f986 	bl	80068cc <HAL_PWREx_GetVoltageRange>
 80075c0:	6178      	str	r0, [r7, #20]
 80075c2:	e014      	b.n	80075ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80075c4:	4b25      	ldr	r3, [pc, #148]	; (800765c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c8:	4a24      	ldr	r2, [pc, #144]	; (800765c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ce:	6593      	str	r3, [r2, #88]	; 0x58
 80075d0:	4b22      	ldr	r3, [pc, #136]	; (800765c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80075dc:	f7ff f976 	bl	80068cc <HAL_PWREx_GetVoltageRange>
 80075e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80075e2:	4b1e      	ldr	r3, [pc, #120]	; (800765c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e6:	4a1d      	ldr	r2, [pc, #116]	; (800765c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f4:	d10b      	bne.n	800760e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b80      	cmp	r3, #128	; 0x80
 80075fa:	d919      	bls.n	8007630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2ba0      	cmp	r3, #160	; 0xa0
 8007600:	d902      	bls.n	8007608 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007602:	2302      	movs	r3, #2
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	e013      	b.n	8007630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007608:	2301      	movs	r3, #1
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	e010      	b.n	8007630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d902      	bls.n	800761a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007614:	2303      	movs	r3, #3
 8007616:	613b      	str	r3, [r7, #16]
 8007618:	e00a      	b.n	8007630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b80      	cmp	r3, #128	; 0x80
 800761e:	d102      	bne.n	8007626 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007620:	2302      	movs	r3, #2
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	e004      	b.n	8007630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b70      	cmp	r3, #112	; 0x70
 800762a:	d101      	bne.n	8007630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800762c:	2301      	movs	r3, #1
 800762e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007630:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f023 0207 	bic.w	r2, r3, #7
 8007638:	4909      	ldr	r1, [pc, #36]	; (8007660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007640:	4b07      	ldr	r3, [pc, #28]	; (8007660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	429a      	cmp	r2, r3
 800764c:	d001      	beq.n	8007652 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e000      	b.n	8007654 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40021000 	.word	0x40021000
 8007660:	40022000 	.word	0x40022000

08007664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800766c:	2300      	movs	r3, #0
 800766e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007670:	2300      	movs	r3, #0
 8007672:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800767c:	2b00      	cmp	r3, #0
 800767e:	d031      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007684:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007688:	d01a      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800768a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800768e:	d814      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d009      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007694:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007698:	d10f      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800769a:	4b5d      	ldr	r3, [pc, #372]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	4a5c      	ldr	r2, [pc, #368]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076a6:	e00c      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	2100      	movs	r1, #0
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 f9f0 	bl	8007a94 <RCCEx_PLLSAI1_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076b8:	e003      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	74fb      	strb	r3, [r7, #19]
      break;
 80076be:	e000      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80076c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c2:	7cfb      	ldrb	r3, [r7, #19]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10b      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076c8:	4b51      	ldr	r3, [pc, #324]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d6:	494e      	ldr	r1, [pc, #312]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80076de:	e001      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	7cfb      	ldrb	r3, [r7, #19]
 80076e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 809e 	beq.w	800782e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076f2:	2300      	movs	r3, #0
 80076f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076f6:	4b46      	ldr	r3, [pc, #280]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007702:	2301      	movs	r3, #1
 8007704:	e000      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007706:	2300      	movs	r3, #0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00d      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800770c:	4b40      	ldr	r3, [pc, #256]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800770e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007710:	4a3f      	ldr	r2, [pc, #252]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007716:	6593      	str	r3, [r2, #88]	; 0x58
 8007718:	4b3d      	ldr	r3, [pc, #244]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800771a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007720:	60bb      	str	r3, [r7, #8]
 8007722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007724:	2301      	movs	r3, #1
 8007726:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007728:	4b3a      	ldr	r3, [pc, #232]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a39      	ldr	r2, [pc, #228]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800772e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007734:	f7fc fef0 	bl	8004518 <HAL_GetTick>
 8007738:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800773a:	e009      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800773c:	f7fc feec 	bl	8004518 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d902      	bls.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	74fb      	strb	r3, [r7, #19]
        break;
 800774e:	e005      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007750:	4b30      	ldr	r3, [pc, #192]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007758:	2b00      	cmp	r3, #0
 800775a:	d0ef      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800775c:	7cfb      	ldrb	r3, [r7, #19]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d15a      	bne.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007762:	4b2b      	ldr	r3, [pc, #172]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d01e      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	429a      	cmp	r2, r3
 800777c:	d019      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800777e:	4b24      	ldr	r3, [pc, #144]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007788:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800778a:	4b21      	ldr	r3, [pc, #132]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800778c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007790:	4a1f      	ldr	r2, [pc, #124]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800779a:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800779c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a0:	4a1b      	ldr	r2, [pc, #108]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80077aa:	4a19      	ldr	r2, [pc, #100]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d016      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077bc:	f7fc feac 	bl	8004518 <HAL_GetTick>
 80077c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077c2:	e00b      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077c4:	f7fc fea8 	bl	8004518 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d902      	bls.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	74fb      	strb	r3, [r7, #19]
            break;
 80077da:	e006      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077dc:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0ec      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80077ea:	7cfb      	ldrb	r3, [r7, #19]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10b      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fe:	4904      	ldr	r1, [pc, #16]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007800:	4313      	orrs	r3, r2
 8007802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007806:	e009      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007808:	7cfb      	ldrb	r3, [r7, #19]
 800780a:	74bb      	strb	r3, [r7, #18]
 800780c:	e006      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800780e:	bf00      	nop
 8007810:	40021000 	.word	0x40021000
 8007814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007818:	7cfb      	ldrb	r3, [r7, #19]
 800781a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800781c:	7c7b      	ldrb	r3, [r7, #17]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d105      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007822:	4b9b      	ldr	r3, [pc, #620]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007826:	4a9a      	ldr	r2, [pc, #616]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800782c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800783a:	4b95      	ldr	r3, [pc, #596]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800783c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007840:	f023 0203 	bic.w	r2, r3, #3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	4991      	ldr	r1, [pc, #580]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800785c:	4b8c      	ldr	r3, [pc, #560]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800785e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007862:	f023 020c 	bic.w	r2, r3, #12
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	4989      	ldr	r1, [pc, #548]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800786c:	4313      	orrs	r3, r2
 800786e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0304 	and.w	r3, r3, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800787e:	4b84      	ldr	r3, [pc, #528]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	4980      	ldr	r1, [pc, #512]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078a0:	4b7b      	ldr	r3, [pc, #492]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	4978      	ldr	r1, [pc, #480]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078c2:	4b73      	ldr	r3, [pc, #460]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d0:	496f      	ldr	r1, [pc, #444]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80078e4:	4b6a      	ldr	r3, [pc, #424]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	4967      	ldr	r1, [pc, #412]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007906:	4b62      	ldr	r3, [pc, #392]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800790c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	495e      	ldr	r1, [pc, #376]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007916:	4313      	orrs	r3, r2
 8007918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007928:	4b59      	ldr	r3, [pc, #356]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800792a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007936:	4956      	ldr	r1, [pc, #344]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007938:	4313      	orrs	r3, r2
 800793a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800794a:	4b51      	ldr	r3, [pc, #324]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800794c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	494d      	ldr	r1, [pc, #308]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800795a:	4313      	orrs	r3, r2
 800795c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d028      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800796c:	4b48      	ldr	r3, [pc, #288]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800796e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800797a:	4945      	ldr	r1, [pc, #276]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800797c:	4313      	orrs	r3, r2
 800797e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800798a:	d106      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800798c:	4b40      	ldr	r3, [pc, #256]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	4a3f      	ldr	r2, [pc, #252]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007996:	60d3      	str	r3, [r2, #12]
 8007998:	e011      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800799e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079a2:	d10c      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3304      	adds	r3, #4
 80079a8:	2101      	movs	r1, #1
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 f872 	bl	8007a94 <RCCEx_PLLSAI1_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079b4:	7cfb      	ldrb	r3, [r7, #19]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80079ba:	7cfb      	ldrb	r3, [r7, #19]
 80079bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d028      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079ca:	4b31      	ldr	r3, [pc, #196]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d8:	492d      	ldr	r1, [pc, #180]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079e8:	d106      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079ea:	4b29      	ldr	r3, [pc, #164]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	4a28      	ldr	r2, [pc, #160]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80079f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079f4:	60d3      	str	r3, [r2, #12]
 80079f6:	e011      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a00:	d10c      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3304      	adds	r3, #4
 8007a06:	2101      	movs	r1, #1
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 f843 	bl	8007a94 <RCCEx_PLLSAI1_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a12:	7cfb      	ldrb	r3, [r7, #19]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007a18:	7cfb      	ldrb	r3, [r7, #19]
 8007a1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01c      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a28:	4b19      	ldr	r3, [pc, #100]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a36:	4916      	ldr	r1, [pc, #88]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a46:	d10c      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	2102      	movs	r1, #2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f820 	bl	8007a94 <RCCEx_PLLSAI1_Config>
 8007a54:	4603      	mov	r3, r0
 8007a56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a58:	7cfb      	ldrb	r3, [r7, #19]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007a5e:	7cfb      	ldrb	r3, [r7, #19]
 8007a60:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a6e:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a74:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7c:	4904      	ldr	r1, [pc, #16]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007a84:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	40021000 	.word	0x40021000

08007a94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007aa2:	4b74      	ldr	r3, [pc, #464]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d018      	beq.n	8007ae0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007aae:	4b71      	ldr	r3, [pc, #452]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f003 0203 	and.w	r2, r3, #3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d10d      	bne.n	8007ada <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d009      	beq.n	8007ada <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007ac6:	4b6b      	ldr	r3, [pc, #428]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	091b      	lsrs	r3, r3, #4
 8007acc:	f003 0307 	and.w	r3, r3, #7
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d047      	beq.n	8007b6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	73fb      	strb	r3, [r7, #15]
 8007ade:	e044      	b.n	8007b6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d018      	beq.n	8007b1a <RCCEx_PLLSAI1_Config+0x86>
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d825      	bhi.n	8007b38 <RCCEx_PLLSAI1_Config+0xa4>
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d002      	beq.n	8007af6 <RCCEx_PLLSAI1_Config+0x62>
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d009      	beq.n	8007b08 <RCCEx_PLLSAI1_Config+0x74>
 8007af4:	e020      	b.n	8007b38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007af6:	4b5f      	ldr	r3, [pc, #380]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d11d      	bne.n	8007b3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b06:	e01a      	b.n	8007b3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007b08:	4b5a      	ldr	r3, [pc, #360]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d116      	bne.n	8007b42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b18:	e013      	b.n	8007b42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007b1a:	4b56      	ldr	r3, [pc, #344]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10f      	bne.n	8007b46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007b26:	4b53      	ldr	r3, [pc, #332]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b36:	e006      	b.n	8007b46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b3c:	e004      	b.n	8007b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b3e:	bf00      	nop
 8007b40:	e002      	b.n	8007b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b42:	bf00      	nop
 8007b44:	e000      	b.n	8007b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10d      	bne.n	8007b6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007b4e:	4b49      	ldr	r3, [pc, #292]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6819      	ldr	r1, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	430b      	orrs	r3, r1
 8007b64:	4943      	ldr	r1, [pc, #268]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d17c      	bne.n	8007c6a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007b70:	4b40      	ldr	r3, [pc, #256]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a3f      	ldr	r2, [pc, #252]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b7c:	f7fc fccc 	bl	8004518 <HAL_GetTick>
 8007b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b82:	e009      	b.n	8007b98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b84:	f7fc fcc8 	bl	8004518 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d902      	bls.n	8007b98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	73fb      	strb	r3, [r7, #15]
        break;
 8007b96:	e005      	b.n	8007ba4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b98:	4b36      	ldr	r3, [pc, #216]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1ef      	bne.n	8007b84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d15f      	bne.n	8007c6a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d110      	bne.n	8007bd2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bb0:	4b30      	ldr	r3, [pc, #192]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6892      	ldr	r2, [r2, #8]
 8007bc0:	0211      	lsls	r1, r2, #8
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	68d2      	ldr	r2, [r2, #12]
 8007bc6:	06d2      	lsls	r2, r2, #27
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	492a      	ldr	r1, [pc, #168]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	610b      	str	r3, [r1, #16]
 8007bd0:	e027      	b.n	8007c22 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d112      	bne.n	8007bfe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bd8:	4b26      	ldr	r3, [pc, #152]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007be0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6892      	ldr	r2, [r2, #8]
 8007be8:	0211      	lsls	r1, r2, #8
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	6912      	ldr	r2, [r2, #16]
 8007bee:	0852      	lsrs	r2, r2, #1
 8007bf0:	3a01      	subs	r2, #1
 8007bf2:	0552      	lsls	r2, r2, #21
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	491f      	ldr	r1, [pc, #124]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	610b      	str	r3, [r1, #16]
 8007bfc:	e011      	b.n	8007c22 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bfe:	4b1d      	ldr	r3, [pc, #116]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007c06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6892      	ldr	r2, [r2, #8]
 8007c0e:	0211      	lsls	r1, r2, #8
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6952      	ldr	r2, [r2, #20]
 8007c14:	0852      	lsrs	r2, r2, #1
 8007c16:	3a01      	subs	r2, #1
 8007c18:	0652      	lsls	r2, r2, #25
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	4915      	ldr	r1, [pc, #84]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007c22:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a13      	ldr	r2, [pc, #76]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c2e:	f7fc fc73 	bl	8004518 <HAL_GetTick>
 8007c32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c34:	e009      	b.n	8007c4a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c36:	f7fc fc6f 	bl	8004518 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d902      	bls.n	8007c4a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	73fb      	strb	r3, [r7, #15]
          break;
 8007c48:	e005      	b.n	8007c56 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c4a:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0ef      	beq.n	8007c36 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d106      	bne.n	8007c6a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	4903      	ldr	r1, [pc, #12]	; (8007c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	40021000 	.word	0x40021000

08007c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e049      	b.n	8007d1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fc f91a 	bl	8003ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f000 fca4 	bl	8008604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d001      	beq.n	8007d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e03b      	b.n	8007db8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a19      	ldr	r2, [pc, #100]	; (8007dc4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d009      	beq.n	8007d76 <HAL_TIM_Base_Start_IT+0x4e>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6a:	d004      	beq.n	8007d76 <HAL_TIM_Base_Start_IT+0x4e>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d115      	bne.n	8007da2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <HAL_TIM_Base_Start_IT+0xa4>)
 8007d7e:	4013      	ands	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b06      	cmp	r3, #6
 8007d86:	d015      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x8c>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d8e:	d011      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da0:	e008      	b.n	8007db4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0201 	orr.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	e000      	b.n	8007db6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	40012c00 	.word	0x40012c00
 8007dc8:	40014000 	.word	0x40014000
 8007dcc:	00010007 	.word	0x00010007

08007dd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e049      	b.n	8007e76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d106      	bne.n	8007dfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fc f850 	bl	8003e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f000 fbf8 	bl	8008604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <HAL_TIM_PWM_Start+0x24>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	bf14      	ite	ne
 8007e9c:	2301      	movne	r3, #1
 8007e9e:	2300      	moveq	r3, #0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	e03c      	b.n	8007f1e <HAL_TIM_PWM_Start+0x9e>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d109      	bne.n	8007ebe <HAL_TIM_PWM_Start+0x3e>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	bf14      	ite	ne
 8007eb6:	2301      	movne	r3, #1
 8007eb8:	2300      	moveq	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	e02f      	b.n	8007f1e <HAL_TIM_PWM_Start+0x9e>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d109      	bne.n	8007ed8 <HAL_TIM_PWM_Start+0x58>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	bf14      	ite	ne
 8007ed0:	2301      	movne	r3, #1
 8007ed2:	2300      	moveq	r3, #0
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	e022      	b.n	8007f1e <HAL_TIM_PWM_Start+0x9e>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b0c      	cmp	r3, #12
 8007edc:	d109      	bne.n	8007ef2 <HAL_TIM_PWM_Start+0x72>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	bf14      	ite	ne
 8007eea:	2301      	movne	r3, #1
 8007eec:	2300      	moveq	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	e015      	b.n	8007f1e <HAL_TIM_PWM_Start+0x9e>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d109      	bne.n	8007f0c <HAL_TIM_PWM_Start+0x8c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	bf14      	ite	ne
 8007f04:	2301      	movne	r3, #1
 8007f06:	2300      	moveq	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	e008      	b.n	8007f1e <HAL_TIM_PWM_Start+0x9e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	bf14      	ite	ne
 8007f18:	2301      	movne	r3, #1
 8007f1a:	2300      	moveq	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e07e      	b.n	8008024 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <HAL_TIM_PWM_Start+0xb6>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f34:	e023      	b.n	8007f7e <HAL_TIM_PWM_Start+0xfe>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d104      	bne.n	8007f46 <HAL_TIM_PWM_Start+0xc6>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f44:	e01b      	b.n	8007f7e <HAL_TIM_PWM_Start+0xfe>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d104      	bne.n	8007f56 <HAL_TIM_PWM_Start+0xd6>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f54:	e013      	b.n	8007f7e <HAL_TIM_PWM_Start+0xfe>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b0c      	cmp	r3, #12
 8007f5a:	d104      	bne.n	8007f66 <HAL_TIM_PWM_Start+0xe6>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f64:	e00b      	b.n	8007f7e <HAL_TIM_PWM_Start+0xfe>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b10      	cmp	r3, #16
 8007f6a:	d104      	bne.n	8007f76 <HAL_TIM_PWM_Start+0xf6>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f74:	e003      	b.n	8007f7e <HAL_TIM_PWM_Start+0xfe>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2201      	movs	r2, #1
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fe1e 	bl	8008bc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a26      	ldr	r2, [pc, #152]	; (800802c <HAL_TIM_PWM_Start+0x1ac>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d009      	beq.n	8007faa <HAL_TIM_PWM_Start+0x12a>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a25      	ldr	r2, [pc, #148]	; (8008030 <HAL_TIM_PWM_Start+0x1b0>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d004      	beq.n	8007faa <HAL_TIM_PWM_Start+0x12a>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a23      	ldr	r2, [pc, #140]	; (8008034 <HAL_TIM_PWM_Start+0x1b4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d101      	bne.n	8007fae <HAL_TIM_PWM_Start+0x12e>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <HAL_TIM_PWM_Start+0x130>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d007      	beq.n	8007fc4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a18      	ldr	r2, [pc, #96]	; (800802c <HAL_TIM_PWM_Start+0x1ac>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d009      	beq.n	8007fe2 <HAL_TIM_PWM_Start+0x162>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd6:	d004      	beq.n	8007fe2 <HAL_TIM_PWM_Start+0x162>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a14      	ldr	r2, [pc, #80]	; (8008030 <HAL_TIM_PWM_Start+0x1b0>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d115      	bne.n	800800e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	4b13      	ldr	r3, [pc, #76]	; (8008038 <HAL_TIM_PWM_Start+0x1b8>)
 8007fea:	4013      	ands	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b06      	cmp	r3, #6
 8007ff2:	d015      	beq.n	8008020 <HAL_TIM_PWM_Start+0x1a0>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ffa:	d011      	beq.n	8008020 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0201 	orr.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800800c:	e008      	b.n	8008020 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0201 	orr.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e000      	b.n	8008022 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008020:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	40012c00 	.word	0x40012c00
 8008030:	40014000 	.word	0x40014000
 8008034:	40014400 	.word	0x40014400
 8008038:	00010007 	.word	0x00010007

0800803c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fdba 	bl	8008bc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a39      	ldr	r2, [pc, #228]	; (8008140 <HAL_TIM_PWM_Stop+0x104>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_TIM_PWM_Stop+0x36>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a38      	ldr	r2, [pc, #224]	; (8008144 <HAL_TIM_PWM_Stop+0x108>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_TIM_PWM_Stop+0x36>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a36      	ldr	r2, [pc, #216]	; (8008148 <HAL_TIM_PWM_Stop+0x10c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d101      	bne.n	8008076 <HAL_TIM_PWM_Stop+0x3a>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <HAL_TIM_PWM_Stop+0x3c>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d017      	beq.n	80080ac <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6a1a      	ldr	r2, [r3, #32]
 8008082:	f241 1311 	movw	r3, #4369	; 0x1111
 8008086:	4013      	ands	r3, r2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10f      	bne.n	80080ac <HAL_TIM_PWM_Stop+0x70>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6a1a      	ldr	r2, [r3, #32]
 8008092:	f240 4344 	movw	r3, #1092	; 0x444
 8008096:	4013      	ands	r3, r2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d107      	bne.n	80080ac <HAL_TIM_PWM_Stop+0x70>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6a1a      	ldr	r2, [r3, #32]
 80080b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10f      	bne.n	80080dc <HAL_TIM_PWM_Stop+0xa0>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6a1a      	ldr	r2, [r3, #32]
 80080c2:	f240 4344 	movw	r3, #1092	; 0x444
 80080c6:	4013      	ands	r3, r2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d107      	bne.n	80080dc <HAL_TIM_PWM_Stop+0xa0>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0201 	bic.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d104      	bne.n	80080ec <HAL_TIM_PWM_Stop+0xb0>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080ea:	e023      	b.n	8008134 <HAL_TIM_PWM_Stop+0xf8>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d104      	bne.n	80080fc <HAL_TIM_PWM_Stop+0xc0>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080fa:	e01b      	b.n	8008134 <HAL_TIM_PWM_Stop+0xf8>
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b08      	cmp	r3, #8
 8008100:	d104      	bne.n	800810c <HAL_TIM_PWM_Stop+0xd0>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800810a:	e013      	b.n	8008134 <HAL_TIM_PWM_Stop+0xf8>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b0c      	cmp	r3, #12
 8008110:	d104      	bne.n	800811c <HAL_TIM_PWM_Stop+0xe0>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800811a:	e00b      	b.n	8008134 <HAL_TIM_PWM_Stop+0xf8>
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b10      	cmp	r3, #16
 8008120:	d104      	bne.n	800812c <HAL_TIM_PWM_Stop+0xf0>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800812a:	e003      	b.n	8008134 <HAL_TIM_PWM_Stop+0xf8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	40012c00 	.word	0x40012c00
 8008144:	40014000 	.word	0x40014000
 8008148:	40014400 	.word	0x40014400

0800814c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	2b02      	cmp	r3, #2
 8008160:	d122      	bne.n	80081a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b02      	cmp	r3, #2
 800816e:	d11b      	bne.n	80081a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f06f 0202 	mvn.w	r2, #2
 8008178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa1a 	bl	80085c8 <HAL_TIM_IC_CaptureCallback>
 8008194:	e005      	b.n	80081a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa0c 	bl	80085b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fa1d 	bl	80085dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d122      	bne.n	80081fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d11b      	bne.n	80081fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f06f 0204 	mvn.w	r2, #4
 80081cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2202      	movs	r2, #2
 80081d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f9f0 	bl	80085c8 <HAL_TIM_IC_CaptureCallback>
 80081e8:	e005      	b.n	80081f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f9e2 	bl	80085b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f9f3 	bl	80085dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	f003 0308 	and.w	r3, r3, #8
 8008206:	2b08      	cmp	r3, #8
 8008208:	d122      	bne.n	8008250 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f003 0308 	and.w	r3, r3, #8
 8008214:	2b08      	cmp	r3, #8
 8008216:	d11b      	bne.n	8008250 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f06f 0208 	mvn.w	r2, #8
 8008220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2204      	movs	r2, #4
 8008226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f9c6 	bl	80085c8 <HAL_TIM_IC_CaptureCallback>
 800823c:	e005      	b.n	800824a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f9b8 	bl	80085b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f9c9 	bl	80085dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0310 	and.w	r3, r3, #16
 800825a:	2b10      	cmp	r3, #16
 800825c:	d122      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f003 0310 	and.w	r3, r3, #16
 8008268:	2b10      	cmp	r3, #16
 800826a:	d11b      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f06f 0210 	mvn.w	r2, #16
 8008274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2208      	movs	r2, #8
 800827a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f99c 	bl	80085c8 <HAL_TIM_IC_CaptureCallback>
 8008290:	e005      	b.n	800829e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f98e 	bl	80085b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f99f 	bl	80085dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d10e      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d107      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f06f 0201 	mvn.w	r2, #1
 80082c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fb fd08 	bl	8003ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082da:	2b80      	cmp	r3, #128	; 0x80
 80082dc:	d10e      	bne.n	80082fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e8:	2b80      	cmp	r3, #128	; 0x80
 80082ea:	d107      	bne.n	80082fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fd74 	bl	8008de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830a:	d10e      	bne.n	800832a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008316:	2b80      	cmp	r3, #128	; 0x80
 8008318:	d107      	bne.n	800832a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fd67 	bl	8008df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008334:	2b40      	cmp	r3, #64	; 0x40
 8008336:	d10e      	bne.n	8008356 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008342:	2b40      	cmp	r3, #64	; 0x40
 8008344:	d107      	bne.n	8008356 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800834e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f94d 	bl	80085f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	f003 0320 	and.w	r3, r3, #32
 8008360:	2b20      	cmp	r3, #32
 8008362:	d10e      	bne.n	8008382 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b20      	cmp	r3, #32
 8008370:	d107      	bne.n	8008382 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f06f 0220 	mvn.w	r2, #32
 800837a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fd27 	bl	8008dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083a6:	2302      	movs	r3, #2
 80083a8:	e0ff      	b.n	80085aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b14      	cmp	r3, #20
 80083b6:	f200 80f0 	bhi.w	800859a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083ba:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	08008415 	.word	0x08008415
 80083c4:	0800859b 	.word	0x0800859b
 80083c8:	0800859b 	.word	0x0800859b
 80083cc:	0800859b 	.word	0x0800859b
 80083d0:	08008455 	.word	0x08008455
 80083d4:	0800859b 	.word	0x0800859b
 80083d8:	0800859b 	.word	0x0800859b
 80083dc:	0800859b 	.word	0x0800859b
 80083e0:	08008497 	.word	0x08008497
 80083e4:	0800859b 	.word	0x0800859b
 80083e8:	0800859b 	.word	0x0800859b
 80083ec:	0800859b 	.word	0x0800859b
 80083f0:	080084d7 	.word	0x080084d7
 80083f4:	0800859b 	.word	0x0800859b
 80083f8:	0800859b 	.word	0x0800859b
 80083fc:	0800859b 	.word	0x0800859b
 8008400:	08008519 	.word	0x08008519
 8008404:	0800859b 	.word	0x0800859b
 8008408:	0800859b 	.word	0x0800859b
 800840c:	0800859b 	.word	0x0800859b
 8008410:	08008559 	.word	0x08008559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68b9      	ldr	r1, [r7, #8]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f956 	bl	80086cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0208 	orr.w	r2, r2, #8
 800842e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699a      	ldr	r2, [r3, #24]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0204 	bic.w	r2, r2, #4
 800843e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6999      	ldr	r1, [r3, #24]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	691a      	ldr	r2, [r3, #16]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	619a      	str	r2, [r3, #24]
      break;
 8008452:	e0a5      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68b9      	ldr	r1, [r7, #8]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f9b2 	bl	80087c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699a      	ldr	r2, [r3, #24]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800846e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800847e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6999      	ldr	r1, [r3, #24]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	021a      	lsls	r2, r3, #8
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	619a      	str	r2, [r3, #24]
      break;
 8008494:	e084      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fa0b 	bl	80088b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69da      	ldr	r2, [r3, #28]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f042 0208 	orr.w	r2, r2, #8
 80084b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69da      	ldr	r2, [r3, #28]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0204 	bic.w	r2, r2, #4
 80084c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69d9      	ldr	r1, [r3, #28]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	61da      	str	r2, [r3, #28]
      break;
 80084d4:	e064      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fa63 	bl	80089a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	69da      	ldr	r2, [r3, #28]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69da      	ldr	r2, [r3, #28]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69d9      	ldr	r1, [r3, #28]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	021a      	lsls	r2, r3, #8
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	61da      	str	r2, [r3, #28]
      break;
 8008516:	e043      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 faa0 	bl	8008a64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0208 	orr.w	r2, r2, #8
 8008532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 0204 	bic.w	r2, r2, #4
 8008542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691a      	ldr	r2, [r3, #16]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008556:	e023      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68b9      	ldr	r1, [r7, #8]
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fad8 	bl	8008b14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	021a      	lsls	r2, r3, #8
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008598:	e002      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	75fb      	strb	r3, [r7, #23]
      break;
 800859e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop

080085b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a2a      	ldr	r2, [pc, #168]	; (80086c0 <TIM_Base_SetConfig+0xbc>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d003      	beq.n	8008624 <TIM_Base_SetConfig+0x20>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008622:	d108      	bne.n	8008636 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a21      	ldr	r2, [pc, #132]	; (80086c0 <TIM_Base_SetConfig+0xbc>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00b      	beq.n	8008656 <TIM_Base_SetConfig+0x52>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008644:	d007      	beq.n	8008656 <TIM_Base_SetConfig+0x52>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a1e      	ldr	r2, [pc, #120]	; (80086c4 <TIM_Base_SetConfig+0xc0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d003      	beq.n	8008656 <TIM_Base_SetConfig+0x52>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a1d      	ldr	r2, [pc, #116]	; (80086c8 <TIM_Base_SetConfig+0xc4>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d108      	bne.n	8008668 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800865c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	4313      	orrs	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a0c      	ldr	r2, [pc, #48]	; (80086c0 <TIM_Base_SetConfig+0xbc>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d007      	beq.n	80086a4 <TIM_Base_SetConfig+0xa0>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a0b      	ldr	r2, [pc, #44]	; (80086c4 <TIM_Base_SetConfig+0xc0>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d003      	beq.n	80086a4 <TIM_Base_SetConfig+0xa0>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a0a      	ldr	r2, [pc, #40]	; (80086c8 <TIM_Base_SetConfig+0xc4>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d103      	bne.n	80086ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	691a      	ldr	r2, [r3, #16]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	615a      	str	r2, [r3, #20]
}
 80086b2:	bf00      	nop
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	40012c00 	.word	0x40012c00
 80086c4:	40014000 	.word	0x40014000
 80086c8:	40014400 	.word	0x40014400

080086cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	f023 0201 	bic.w	r2, r3, #1
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 0303 	bic.w	r3, r3, #3
 8008706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	4313      	orrs	r3, r2
 8008710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f023 0302 	bic.w	r3, r3, #2
 8008718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a24      	ldr	r2, [pc, #144]	; (80087b8 <TIM_OC1_SetConfig+0xec>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d007      	beq.n	800873c <TIM_OC1_SetConfig+0x70>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a23      	ldr	r2, [pc, #140]	; (80087bc <TIM_OC1_SetConfig+0xf0>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d003      	beq.n	800873c <TIM_OC1_SetConfig+0x70>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a22      	ldr	r2, [pc, #136]	; (80087c0 <TIM_OC1_SetConfig+0xf4>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d10c      	bne.n	8008756 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f023 0308 	bic.w	r3, r3, #8
 8008742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f023 0304 	bic.w	r3, r3, #4
 8008754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a17      	ldr	r2, [pc, #92]	; (80087b8 <TIM_OC1_SetConfig+0xec>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d007      	beq.n	800876e <TIM_OC1_SetConfig+0xa2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a16      	ldr	r2, [pc, #88]	; (80087bc <TIM_OC1_SetConfig+0xf0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d003      	beq.n	800876e <TIM_OC1_SetConfig+0xa2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a15      	ldr	r2, [pc, #84]	; (80087c0 <TIM_OC1_SetConfig+0xf4>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d111      	bne.n	8008792 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800877c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4313      	orrs	r3, r2
 8008786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	621a      	str	r2, [r3, #32]
}
 80087ac:	bf00      	nop
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	40012c00 	.word	0x40012c00
 80087bc:	40014000 	.word	0x40014000
 80087c0:	40014400 	.word	0x40014400

080087c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	f023 0210 	bic.w	r2, r3, #16
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f023 0320 	bic.w	r3, r3, #32
 8008812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a22      	ldr	r2, [pc, #136]	; (80088ac <TIM_OC2_SetConfig+0xe8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d10d      	bne.n	8008844 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800882e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	4313      	orrs	r3, r2
 800883a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008842:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a19      	ldr	r2, [pc, #100]	; (80088ac <TIM_OC2_SetConfig+0xe8>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d007      	beq.n	800885c <TIM_OC2_SetConfig+0x98>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a18      	ldr	r2, [pc, #96]	; (80088b0 <TIM_OC2_SetConfig+0xec>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d003      	beq.n	800885c <TIM_OC2_SetConfig+0x98>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a17      	ldr	r2, [pc, #92]	; (80088b4 <TIM_OC2_SetConfig+0xf0>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d113      	bne.n	8008884 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800886a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	621a      	str	r2, [r3, #32]
}
 800889e:	bf00      	nop
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	40012c00 	.word	0x40012c00
 80088b0:	40014000 	.word	0x40014000
 80088b4:	40014400 	.word	0x40014400

080088b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f023 0303 	bic.w	r3, r3, #3
 80088f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	4313      	orrs	r3, r2
 8008910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a21      	ldr	r2, [pc, #132]	; (800899c <TIM_OC3_SetConfig+0xe4>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d10d      	bne.n	8008936 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a18      	ldr	r2, [pc, #96]	; (800899c <TIM_OC3_SetConfig+0xe4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d007      	beq.n	800894e <TIM_OC3_SetConfig+0x96>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a17      	ldr	r2, [pc, #92]	; (80089a0 <TIM_OC3_SetConfig+0xe8>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d003      	beq.n	800894e <TIM_OC3_SetConfig+0x96>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a16      	ldr	r2, [pc, #88]	; (80089a4 <TIM_OC3_SetConfig+0xec>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d113      	bne.n	8008976 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800895c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	4313      	orrs	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	621a      	str	r2, [r3, #32]
}
 8008990:	bf00      	nop
 8008992:	371c      	adds	r7, #28
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	40012c00 	.word	0x40012c00
 80089a0:	40014000 	.word	0x40014000
 80089a4:	40014400 	.word	0x40014400

080089a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	031b      	lsls	r3, r3, #12
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a14      	ldr	r2, [pc, #80]	; (8008a58 <TIM_OC4_SetConfig+0xb0>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d007      	beq.n	8008a1c <TIM_OC4_SetConfig+0x74>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a13      	ldr	r2, [pc, #76]	; (8008a5c <TIM_OC4_SetConfig+0xb4>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d003      	beq.n	8008a1c <TIM_OC4_SetConfig+0x74>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a12      	ldr	r2, [pc, #72]	; (8008a60 <TIM_OC4_SetConfig+0xb8>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d109      	bne.n	8008a30 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	019b      	lsls	r3, r3, #6
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	621a      	str	r2, [r3, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	40012c00 	.word	0x40012c00
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	40014400 	.word	0x40014400

08008a64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008aa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	041b      	lsls	r3, r3, #16
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a13      	ldr	r2, [pc, #76]	; (8008b08 <TIM_OC5_SetConfig+0xa4>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d007      	beq.n	8008ace <TIM_OC5_SetConfig+0x6a>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a12      	ldr	r2, [pc, #72]	; (8008b0c <TIM_OC5_SetConfig+0xa8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d003      	beq.n	8008ace <TIM_OC5_SetConfig+0x6a>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a11      	ldr	r2, [pc, #68]	; (8008b10 <TIM_OC5_SetConfig+0xac>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d109      	bne.n	8008ae2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	021b      	lsls	r3, r3, #8
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	621a      	str	r2, [r3, #32]
}
 8008afc:	bf00      	nop
 8008afe:	371c      	adds	r7, #28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	40012c00 	.word	0x40012c00
 8008b0c:	40014000 	.word	0x40014000
 8008b10:	40014400 	.word	0x40014400

08008b14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	021b      	lsls	r3, r3, #8
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	051b      	lsls	r3, r3, #20
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a14      	ldr	r2, [pc, #80]	; (8008bbc <TIM_OC6_SetConfig+0xa8>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d007      	beq.n	8008b80 <TIM_OC6_SetConfig+0x6c>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a13      	ldr	r2, [pc, #76]	; (8008bc0 <TIM_OC6_SetConfig+0xac>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d003      	beq.n	8008b80 <TIM_OC6_SetConfig+0x6c>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a12      	ldr	r2, [pc, #72]	; (8008bc4 <TIM_OC6_SetConfig+0xb0>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d109      	bne.n	8008b94 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	029b      	lsls	r3, r3, #10
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	621a      	str	r2, [r3, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	40012c00 	.word	0x40012c00
 8008bc0:	40014000 	.word	0x40014000
 8008bc4:	40014400 	.word	0x40014400

08008bc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f003 031f 	and.w	r3, r3, #31
 8008bda:	2201      	movs	r2, #1
 8008bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008be0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a1a      	ldr	r2, [r3, #32]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	43db      	mvns	r3, r3
 8008bea:	401a      	ands	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6a1a      	ldr	r2, [r3, #32]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f003 031f 	and.w	r3, r3, #31
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8008c00:	431a      	orrs	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	621a      	str	r2, [r3, #32]
}
 8008c06:	bf00      	nop
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
	...

08008c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e04f      	b.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a21      	ldr	r2, [pc, #132]	; (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d108      	bne.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a14      	ldr	r2, [pc, #80]	; (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d009      	beq.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c94:	d004      	beq.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a10      	ldr	r2, [pc, #64]	; (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d10c      	bne.n	8008cba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ca6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40014000 	.word	0x40014000

08008ce0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d101      	bne.n	8008cfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	e060      	b.n	8008dbe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	041b      	lsls	r3, r3, #16
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a14      	ldr	r2, [pc, #80]	; (8008dcc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d115      	bne.n	8008dac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	051b      	lsls	r3, r3, #20
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	40012c00 	.word	0x40012c00

08008dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e040      	b.n	8008ea0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7fb f8ce 	bl	8003fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2224      	movs	r2, #36	; 0x24
 8008e38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0201 	bic.w	r2, r2, #1
 8008e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fcbe 	bl	80097cc <UART_SetConfig>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d101      	bne.n	8008e5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e022      	b.n	8008ea0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fee6 	bl	8009c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689a      	ldr	r2, [r3, #8]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0201 	orr.w	r2, r2, #1
 8008e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 ff6d 	bl	8009d78 <UART_CheckIdleState>
 8008e9e:	4603      	mov	r3, r0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08a      	sub	sp, #40	; 0x28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d178      	bne.n	8008fb0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <HAL_UART_Transmit_DMA+0x22>
 8008ec4:	88fb      	ldrh	r3, [r7, #6]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e071      	b.n	8008fb2 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d101      	bne.n	8008edc <HAL_UART_Transmit_DMA+0x34>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e06a      	b.n	8008fb2 <HAL_UART_Transmit_DMA+0x10a>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	88fa      	ldrh	r2, [r7, #6]
 8008eee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	88fa      	ldrh	r2, [r7, #6]
 8008ef6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2221      	movs	r2, #33	; 0x21
 8008f06:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d02b      	beq.n	8008f68 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f14:	4a29      	ldr	r2, [pc, #164]	; (8008fbc <HAL_UART_Transmit_DMA+0x114>)
 8008f16:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f1c:	4a28      	ldr	r2, [pc, #160]	; (8008fc0 <HAL_UART_Transmit_DMA+0x118>)
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f24:	4a27      	ldr	r2, [pc, #156]	; (8008fc4 <HAL_UART_Transmit_DMA+0x11c>)
 8008f26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f38:	4619      	mov	r1, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3328      	adds	r3, #40	; 0x28
 8008f40:	461a      	mov	r2, r3
 8008f42:	88fb      	ldrh	r3, [r7, #6]
 8008f44:	f7fc feb0 	bl	8005ca8 <HAL_DMA_Start_IT>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00c      	beq.n	8008f68 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2210      	movs	r2, #16
 8008f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2220      	movs	r2, #32
 8008f62:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e024      	b.n	8008fb2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2240      	movs	r2, #64	; 0x40
 8008f6e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	613b      	str	r3, [r7, #16]
   return(result);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f98:	623a      	str	r2, [r7, #32]
 8008f9a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	69f9      	ldr	r1, [r7, #28]
 8008f9e:	6a3a      	ldr	r2, [r7, #32]
 8008fa0:	e841 2300 	strex	r3, r2, [r1]
 8008fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e5      	bne.n	8008f78 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	e000      	b.n	8008fb2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008fb0:	2302      	movs	r3, #2
  }
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3728      	adds	r7, #40	; 0x28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	0800a1f3 	.word	0x0800a1f3
 8008fc0:	0800a28d 	.word	0x0800a28d
 8008fc4:	0800a405 	.word	0x0800a405

08008fc8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	; 0x28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fda:	2b20      	cmp	r3, #32
 8008fdc:	d142      	bne.n	8009064 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <HAL_UART_Receive_DMA+0x22>
 8008fe4:	88fb      	ldrh	r3, [r7, #6]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e03b      	b.n	8009066 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d101      	bne.n	8008ffc <HAL_UART_Receive_DMA+0x34>
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e034      	b.n	8009066 <HAL_UART_Receive_DMA+0x9e>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a18      	ldr	r2, [pc, #96]	; (8009070 <HAL_UART_Receive_DMA+0xa8>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d01f      	beq.n	8009054 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d018      	beq.n	8009054 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	e853 3f00 	ldrex	r3, [r3]
 800902e:	613b      	str	r3, [r7, #16]
   return(result);
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	623b      	str	r3, [r7, #32]
 8009042:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	69f9      	ldr	r1, [r7, #28]
 8009046:	6a3a      	ldr	r2, [r7, #32]
 8009048:	e841 2300 	strex	r3, r2, [r1]
 800904c:	61bb      	str	r3, [r7, #24]
   return(result);
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e6      	bne.n	8009022 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	461a      	mov	r2, r3
 8009058:	68b9      	ldr	r1, [r7, #8]
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 ff9a 	bl	8009f94 <UART_Start_Receive_DMA>
 8009060:	4603      	mov	r3, r0
 8009062:	e000      	b.n	8009066 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009064:	2302      	movs	r3, #2
  }
}
 8009066:	4618      	mov	r0, r3
 8009068:	3728      	adds	r7, #40	; 0x28
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	40008000 	.word	0x40008000

08009074 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b090      	sub	sp, #64	; 0x40
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009086:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009092:	2b80      	cmp	r3, #128	; 0x80
 8009094:	d139      	bne.n	800910a <HAL_UART_DMAStop+0x96>
 8009096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009098:	2b21      	cmp	r3, #33	; 0x21
 800909a:	d136      	bne.n	800910a <HAL_UART_DMAStop+0x96>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3308      	adds	r3, #8
 80090a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090b2:	637b      	str	r3, [r7, #52]	; 0x34
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3308      	adds	r3, #8
 80090ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e5      	bne.n	800909c <HAL_UART_DMAStop+0x28>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d015      	beq.n	8009104 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fc fe43 	bl	8005d68 <HAL_DMA_Abort>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00d      	beq.n	8009104 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fc ff69 	bl	8005fc4 <HAL_DMA_GetError>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b20      	cmp	r3, #32
 80090f6:	d105      	bne.n	8009104 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2210      	movs	r2, #16
 80090fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e044      	b.n	800918e <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 ffeb 	bl	800a0e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009114:	2b40      	cmp	r3, #64	; 0x40
 8009116:	d139      	bne.n	800918c <HAL_UART_DMAStop+0x118>
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	2b22      	cmp	r3, #34	; 0x22
 800911c:	d136      	bne.n	800918c <HAL_UART_DMAStop+0x118>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3308      	adds	r3, #8
 8009124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	e853 3f00 	ldrex	r3, [r3]
 800912c:	60bb      	str	r3, [r7, #8]
   return(result);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009134:	633b      	str	r3, [r7, #48]	; 0x30
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3308      	adds	r3, #8
 800913c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800913e:	61ba      	str	r2, [r7, #24]
 8009140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	6979      	ldr	r1, [r7, #20]
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	613b      	str	r3, [r7, #16]
   return(result);
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e5      	bne.n	800911e <HAL_UART_DMAStop+0xaa>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009156:	2b00      	cmp	r3, #0
 8009158:	d015      	beq.n	8009186 <HAL_UART_DMAStop+0x112>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915e:	4618      	mov	r0, r3
 8009160:	f7fc fe02 	bl	8005d68 <HAL_DMA_Abort>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00d      	beq.n	8009186 <HAL_UART_DMAStop+0x112>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916e:	4618      	mov	r0, r3
 8009170:	f7fc ff28 	bl	8005fc4 <HAL_DMA_GetError>
 8009174:	4603      	mov	r3, r0
 8009176:	2b20      	cmp	r3, #32
 8009178:	d105      	bne.n	8009186 <HAL_UART_DMAStop+0x112>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2210      	movs	r2, #16
 800917e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e003      	b.n	800918e <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 ffd0 	bl	800a12c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3740      	adds	r7, #64	; 0x40
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b0ba      	sub	sp, #232	; 0xe8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80091c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80091c6:	4013      	ands	r3, r2
 80091c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80091cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d115      	bne.n	8009200 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80091d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00f      	beq.n	8009200 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d009      	beq.n	8009200 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 82a6 	beq.w	8009742 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	4798      	blx	r3
      }
      return;
 80091fe:	e2a0      	b.n	8009742 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 8117 	beq.w	8009438 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800920a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d106      	bne.n	8009224 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009216:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800921a:	4b85      	ldr	r3, [pc, #532]	; (8009430 <HAL_UART_IRQHandler+0x298>)
 800921c:	4013      	ands	r3, r2
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 810a 	beq.w	8009438 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d011      	beq.n	8009254 <HAL_UART_IRQHandler+0xbc>
 8009230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2201      	movs	r2, #1
 8009242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800924a:	f043 0201 	orr.w	r2, r3, #1
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d011      	beq.n	8009284 <HAL_UART_IRQHandler+0xec>
 8009260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2202      	movs	r2, #2
 8009272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800927a:	f043 0204 	orr.w	r2, r3, #4
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	d011      	beq.n	80092b4 <HAL_UART_IRQHandler+0x11c>
 8009290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00b      	beq.n	80092b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2204      	movs	r2, #4
 80092a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092aa:	f043 0202 	orr.w	r2, r3, #2
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b8:	f003 0308 	and.w	r3, r3, #8
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d017      	beq.n	80092f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c4:	f003 0320 	and.w	r3, r3, #32
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d105      	bne.n	80092d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80092cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00b      	beq.n	80092f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2208      	movs	r2, #8
 80092de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092e6:	f043 0208 	orr.w	r2, r3, #8
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d012      	beq.n	8009322 <HAL_UART_IRQHandler+0x18a>
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009300:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00c      	beq.n	8009322 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009318:	f043 0220 	orr.w	r2, r3, #32
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 820c 	beq.w	8009746 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800932e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00d      	beq.n	8009356 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800933a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800935c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936a:	2b40      	cmp	r3, #64	; 0x40
 800936c:	d005      	beq.n	800937a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800936e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009372:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009376:	2b00      	cmp	r3, #0
 8009378:	d04f      	beq.n	800941a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fed6 	bl	800a12c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938a:	2b40      	cmp	r3, #64	; 0x40
 800938c:	d141      	bne.n	8009412 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3308      	adds	r3, #8
 8009394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80093a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80093ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1d9      	bne.n	800938e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d013      	beq.n	800940a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e6:	4a13      	ldr	r2, [pc, #76]	; (8009434 <HAL_UART_IRQHandler+0x29c>)
 80093e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fc fcf8 	bl	8005de4 <HAL_DMA_Abort_IT>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d017      	beq.n	800942a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009404:	4610      	mov	r0, r2
 8009406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009408:	e00f      	b.n	800942a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f9ba 	bl	8009784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009410:	e00b      	b.n	800942a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f9b6 	bl	8009784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009418:	e007      	b.n	800942a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f9b2 	bl	8009784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009428:	e18d      	b.n	8009746 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800942a:	bf00      	nop
    return;
 800942c:	e18b      	b.n	8009746 <HAL_UART_IRQHandler+0x5ae>
 800942e:	bf00      	nop
 8009430:	04000120 	.word	0x04000120
 8009434:	0800a481 	.word	0x0800a481

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800943c:	2b01      	cmp	r3, #1
 800943e:	f040 8146 	bne.w	80096ce <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009446:	f003 0310 	and.w	r3, r3, #16
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 813f 	beq.w	80096ce <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009454:	f003 0310 	and.w	r3, r3, #16
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8138 	beq.w	80096ce <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2210      	movs	r2, #16
 8009464:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009470:	2b40      	cmp	r3, #64	; 0x40
 8009472:	f040 80b4 	bne.w	80095de <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009482:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 815f 	beq.w	800974a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009496:	429a      	cmp	r2, r3
 8009498:	f080 8157 	bcs.w	800974a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0320 	and.w	r3, r3, #32
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 8085 	bne.w	80095c2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80094cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1da      	bne.n	80094b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009514:	f023 0301 	bic.w	r3, r3, #1
 8009518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3308      	adds	r3, #8
 8009522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009526:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800952a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800952e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e1      	bne.n	8009502 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3308      	adds	r3, #8
 8009544:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009548:	e853 3f00 	ldrex	r3, [r3]
 800954c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800954e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3308      	adds	r3, #8
 800955e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009564:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e3      	bne.n	800953e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009592:	f023 0310 	bic.w	r3, r3, #16
 8009596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80095a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e4      	bne.n	8009582 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fc fbd3 	bl	8005d68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f8de 	bl	8009798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095dc:	e0b5      	b.n	800974a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 80a7 	beq.w	800974e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8009600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 80a2 	beq.w	800974e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009612:	e853 3f00 	ldrex	r3, [r3]
 8009616:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800961e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800962c:	647b      	str	r3, [r7, #68]	; 0x44
 800962e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009634:	e841 2300 	strex	r3, r2, [r1]
 8009638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800963a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1e4      	bne.n	800960a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3308      	adds	r3, #8
 8009646:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	623b      	str	r3, [r7, #32]
   return(result);
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	f023 0301 	bic.w	r3, r3, #1
 8009656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3308      	adds	r3, #8
 8009660:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009664:	633a      	str	r2, [r7, #48]	; 0x30
 8009666:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800966a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e3      	bne.n	8009640 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2220      	movs	r2, #32
 800967c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	e853 3f00 	ldrex	r3, [r3]
 8009696:	60fb      	str	r3, [r7, #12]
   return(result);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f023 0310 	bic.w	r3, r3, #16
 800969e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80096ac:	61fb      	str	r3, [r7, #28]
 80096ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	69b9      	ldr	r1, [r7, #24]
 80096b2:	69fa      	ldr	r2, [r7, #28]
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	617b      	str	r3, [r7, #20]
   return(result);
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e4      	bne.n	800968a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f866 	bl	8009798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096cc:	e03f      	b.n	800974e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00e      	beq.n	80096f8 <HAL_UART_IRQHandler+0x560>
 80096da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d008      	beq.n	80096f8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 ff05 	bl	800a500 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096f6:	e02d      	b.n	8009754 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80096f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00e      	beq.n	8009722 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970c:	2b00      	cmp	r3, #0
 800970e:	d008      	beq.n	8009722 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01c      	beq.n	8009752 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	4798      	blx	r3
    }
    return;
 8009720:	e017      	b.n	8009752 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d012      	beq.n	8009754 <HAL_UART_IRQHandler+0x5bc>
 800972e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00c      	beq.n	8009754 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 feb6 	bl	800a4ac <UART_EndTransmit_IT>
    return;
 8009740:	e008      	b.n	8009754 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009742:	bf00      	nop
 8009744:	e006      	b.n	8009754 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009746:	bf00      	nop
 8009748:	e004      	b.n	8009754 <HAL_UART_IRQHandler+0x5bc>
      return;
 800974a:	bf00      	nop
 800974c:	e002      	b.n	8009754 <HAL_UART_IRQHandler+0x5bc>
      return;
 800974e:	bf00      	nop
 8009750:	e000      	b.n	8009754 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009752:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009754:	37e8      	adds	r7, #232	; 0xe8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop

0800975c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80097be:	4618      	mov	r0, r3
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
	...

080097cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097cc:	b5b0      	push	{r4, r5, r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689a      	ldr	r2, [r3, #8]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	431a      	orrs	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	431a      	orrs	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	4baa      	ldr	r3, [pc, #680]	; (8009aa0 <UART_SetConfig+0x2d4>)
 80097f8:	4013      	ands	r3, r2
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	6812      	ldr	r2, [r2, #0]
 80097fe:	69f9      	ldr	r1, [r7, #28]
 8009800:	430b      	orrs	r3, r1
 8009802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a9f      	ldr	r2, [pc, #636]	; (8009aa4 <UART_SetConfig+0x2d8>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d004      	beq.n	8009834 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	4313      	orrs	r3, r2
 8009832:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	430a      	orrs	r2, r1
 8009846:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a96      	ldr	r2, [pc, #600]	; (8009aa8 <UART_SetConfig+0x2dc>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d121      	bne.n	8009896 <UART_SetConfig+0xca>
 8009852:	4b96      	ldr	r3, [pc, #600]	; (8009aac <UART_SetConfig+0x2e0>)
 8009854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009858:	f003 0303 	and.w	r3, r3, #3
 800985c:	2b03      	cmp	r3, #3
 800985e:	d817      	bhi.n	8009890 <UART_SetConfig+0xc4>
 8009860:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <UART_SetConfig+0x9c>)
 8009862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009866:	bf00      	nop
 8009868:	08009879 	.word	0x08009879
 800986c:	08009885 	.word	0x08009885
 8009870:	0800987f 	.word	0x0800987f
 8009874:	0800988b 	.word	0x0800988b
 8009878:	2301      	movs	r3, #1
 800987a:	76fb      	strb	r3, [r7, #27]
 800987c:	e096      	b.n	80099ac <UART_SetConfig+0x1e0>
 800987e:	2302      	movs	r3, #2
 8009880:	76fb      	strb	r3, [r7, #27]
 8009882:	e093      	b.n	80099ac <UART_SetConfig+0x1e0>
 8009884:	2304      	movs	r3, #4
 8009886:	76fb      	strb	r3, [r7, #27]
 8009888:	e090      	b.n	80099ac <UART_SetConfig+0x1e0>
 800988a:	2308      	movs	r3, #8
 800988c:	76fb      	strb	r3, [r7, #27]
 800988e:	e08d      	b.n	80099ac <UART_SetConfig+0x1e0>
 8009890:	2310      	movs	r3, #16
 8009892:	76fb      	strb	r3, [r7, #27]
 8009894:	e08a      	b.n	80099ac <UART_SetConfig+0x1e0>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a85      	ldr	r2, [pc, #532]	; (8009ab0 <UART_SetConfig+0x2e4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d132      	bne.n	8009906 <UART_SetConfig+0x13a>
 80098a0:	4b82      	ldr	r3, [pc, #520]	; (8009aac <UART_SetConfig+0x2e0>)
 80098a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a6:	f003 030c 	and.w	r3, r3, #12
 80098aa:	2b0c      	cmp	r3, #12
 80098ac:	d828      	bhi.n	8009900 <UART_SetConfig+0x134>
 80098ae:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <UART_SetConfig+0xe8>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	080098e9 	.word	0x080098e9
 80098b8:	08009901 	.word	0x08009901
 80098bc:	08009901 	.word	0x08009901
 80098c0:	08009901 	.word	0x08009901
 80098c4:	080098f5 	.word	0x080098f5
 80098c8:	08009901 	.word	0x08009901
 80098cc:	08009901 	.word	0x08009901
 80098d0:	08009901 	.word	0x08009901
 80098d4:	080098ef 	.word	0x080098ef
 80098d8:	08009901 	.word	0x08009901
 80098dc:	08009901 	.word	0x08009901
 80098e0:	08009901 	.word	0x08009901
 80098e4:	080098fb 	.word	0x080098fb
 80098e8:	2300      	movs	r3, #0
 80098ea:	76fb      	strb	r3, [r7, #27]
 80098ec:	e05e      	b.n	80099ac <UART_SetConfig+0x1e0>
 80098ee:	2302      	movs	r3, #2
 80098f0:	76fb      	strb	r3, [r7, #27]
 80098f2:	e05b      	b.n	80099ac <UART_SetConfig+0x1e0>
 80098f4:	2304      	movs	r3, #4
 80098f6:	76fb      	strb	r3, [r7, #27]
 80098f8:	e058      	b.n	80099ac <UART_SetConfig+0x1e0>
 80098fa:	2308      	movs	r3, #8
 80098fc:	76fb      	strb	r3, [r7, #27]
 80098fe:	e055      	b.n	80099ac <UART_SetConfig+0x1e0>
 8009900:	2310      	movs	r3, #16
 8009902:	76fb      	strb	r3, [r7, #27]
 8009904:	e052      	b.n	80099ac <UART_SetConfig+0x1e0>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a6a      	ldr	r2, [pc, #424]	; (8009ab4 <UART_SetConfig+0x2e8>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d120      	bne.n	8009952 <UART_SetConfig+0x186>
 8009910:	4b66      	ldr	r3, [pc, #408]	; (8009aac <UART_SetConfig+0x2e0>)
 8009912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009916:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800991a:	2b30      	cmp	r3, #48	; 0x30
 800991c:	d013      	beq.n	8009946 <UART_SetConfig+0x17a>
 800991e:	2b30      	cmp	r3, #48	; 0x30
 8009920:	d814      	bhi.n	800994c <UART_SetConfig+0x180>
 8009922:	2b20      	cmp	r3, #32
 8009924:	d009      	beq.n	800993a <UART_SetConfig+0x16e>
 8009926:	2b20      	cmp	r3, #32
 8009928:	d810      	bhi.n	800994c <UART_SetConfig+0x180>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <UART_SetConfig+0x168>
 800992e:	2b10      	cmp	r3, #16
 8009930:	d006      	beq.n	8009940 <UART_SetConfig+0x174>
 8009932:	e00b      	b.n	800994c <UART_SetConfig+0x180>
 8009934:	2300      	movs	r3, #0
 8009936:	76fb      	strb	r3, [r7, #27]
 8009938:	e038      	b.n	80099ac <UART_SetConfig+0x1e0>
 800993a:	2302      	movs	r3, #2
 800993c:	76fb      	strb	r3, [r7, #27]
 800993e:	e035      	b.n	80099ac <UART_SetConfig+0x1e0>
 8009940:	2304      	movs	r3, #4
 8009942:	76fb      	strb	r3, [r7, #27]
 8009944:	e032      	b.n	80099ac <UART_SetConfig+0x1e0>
 8009946:	2308      	movs	r3, #8
 8009948:	76fb      	strb	r3, [r7, #27]
 800994a:	e02f      	b.n	80099ac <UART_SetConfig+0x1e0>
 800994c:	2310      	movs	r3, #16
 800994e:	76fb      	strb	r3, [r7, #27]
 8009950:	e02c      	b.n	80099ac <UART_SetConfig+0x1e0>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a53      	ldr	r2, [pc, #332]	; (8009aa4 <UART_SetConfig+0x2d8>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d125      	bne.n	80099a8 <UART_SetConfig+0x1dc>
 800995c:	4b53      	ldr	r3, [pc, #332]	; (8009aac <UART_SetConfig+0x2e0>)
 800995e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009962:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800996a:	d017      	beq.n	800999c <UART_SetConfig+0x1d0>
 800996c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009970:	d817      	bhi.n	80099a2 <UART_SetConfig+0x1d6>
 8009972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009976:	d00b      	beq.n	8009990 <UART_SetConfig+0x1c4>
 8009978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800997c:	d811      	bhi.n	80099a2 <UART_SetConfig+0x1d6>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <UART_SetConfig+0x1be>
 8009982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009986:	d006      	beq.n	8009996 <UART_SetConfig+0x1ca>
 8009988:	e00b      	b.n	80099a2 <UART_SetConfig+0x1d6>
 800998a:	2300      	movs	r3, #0
 800998c:	76fb      	strb	r3, [r7, #27]
 800998e:	e00d      	b.n	80099ac <UART_SetConfig+0x1e0>
 8009990:	2302      	movs	r3, #2
 8009992:	76fb      	strb	r3, [r7, #27]
 8009994:	e00a      	b.n	80099ac <UART_SetConfig+0x1e0>
 8009996:	2304      	movs	r3, #4
 8009998:	76fb      	strb	r3, [r7, #27]
 800999a:	e007      	b.n	80099ac <UART_SetConfig+0x1e0>
 800999c:	2308      	movs	r3, #8
 800999e:	76fb      	strb	r3, [r7, #27]
 80099a0:	e004      	b.n	80099ac <UART_SetConfig+0x1e0>
 80099a2:	2310      	movs	r3, #16
 80099a4:	76fb      	strb	r3, [r7, #27]
 80099a6:	e001      	b.n	80099ac <UART_SetConfig+0x1e0>
 80099a8:	2310      	movs	r3, #16
 80099aa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a3c      	ldr	r2, [pc, #240]	; (8009aa4 <UART_SetConfig+0x2d8>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	f040 8082 	bne.w	8009abc <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099b8:	7efb      	ldrb	r3, [r7, #27]
 80099ba:	2b08      	cmp	r3, #8
 80099bc:	d823      	bhi.n	8009a06 <UART_SetConfig+0x23a>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <UART_SetConfig+0x1f8>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099e9 	.word	0x080099e9
 80099c8:	08009a07 	.word	0x08009a07
 80099cc:	080099f1 	.word	0x080099f1
 80099d0:	08009a07 	.word	0x08009a07
 80099d4:	080099f7 	.word	0x080099f7
 80099d8:	08009a07 	.word	0x08009a07
 80099dc:	08009a07 	.word	0x08009a07
 80099e0:	08009a07 	.word	0x08009a07
 80099e4:	080099ff 	.word	0x080099ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099e8:	f7fd fd7e 	bl	80074e8 <HAL_RCC_GetPCLK1Freq>
 80099ec:	6178      	str	r0, [r7, #20]
        break;
 80099ee:	e00f      	b.n	8009a10 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099f0:	4b31      	ldr	r3, [pc, #196]	; (8009ab8 <UART_SetConfig+0x2ec>)
 80099f2:	617b      	str	r3, [r7, #20]
        break;
 80099f4:	e00c      	b.n	8009a10 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099f6:	f7fd fcdf 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 80099fa:	6178      	str	r0, [r7, #20]
        break;
 80099fc:	e008      	b.n	8009a10 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a02:	617b      	str	r3, [r7, #20]
        break;
 8009a04:	e004      	b.n	8009a10 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	76bb      	strb	r3, [r7, #26]
        break;
 8009a0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f000 8100 	beq.w	8009c18 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	4413      	add	r3, r2
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d305      	bcc.n	8009a34 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d902      	bls.n	8009a3a <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	76bb      	strb	r3, [r7, #26]
 8009a38:	e0ee      	b.n	8009c18 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f04f 0100 	mov.w	r1, #0
 8009a42:	f04f 0200 	mov.w	r2, #0
 8009a46:	f04f 0300 	mov.w	r3, #0
 8009a4a:	020b      	lsls	r3, r1, #8
 8009a4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a50:	0202      	lsls	r2, r0, #8
 8009a52:	6879      	ldr	r1, [r7, #4]
 8009a54:	6849      	ldr	r1, [r1, #4]
 8009a56:	0849      	lsrs	r1, r1, #1
 8009a58:	4608      	mov	r0, r1
 8009a5a:	f04f 0100 	mov.w	r1, #0
 8009a5e:	1814      	adds	r4, r2, r0
 8009a60:	eb43 0501 	adc.w	r5, r3, r1
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	f04f 0300 	mov.w	r3, #0
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	f7f7 f909 	bl	8000c88 <__aeabi_uldivmod>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a84:	d308      	bcc.n	8009a98 <UART_SetConfig+0x2cc>
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a8c:	d204      	bcs.n	8009a98 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	60da      	str	r2, [r3, #12]
 8009a96:	e0bf      	b.n	8009c18 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	76bb      	strb	r3, [r7, #26]
 8009a9c:	e0bc      	b.n	8009c18 <UART_SetConfig+0x44c>
 8009a9e:	bf00      	nop
 8009aa0:	efff69f3 	.word	0xefff69f3
 8009aa4:	40008000 	.word	0x40008000
 8009aa8:	40013800 	.word	0x40013800
 8009aac:	40021000 	.word	0x40021000
 8009ab0:	40004400 	.word	0x40004400
 8009ab4:	40004800 	.word	0x40004800
 8009ab8:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac4:	d15b      	bne.n	8009b7e <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8009ac6:	7efb      	ldrb	r3, [r7, #27]
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d828      	bhi.n	8009b1e <UART_SetConfig+0x352>
 8009acc:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <UART_SetConfig+0x308>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009af9 	.word	0x08009af9
 8009ad8:	08009b01 	.word	0x08009b01
 8009adc:	08009b09 	.word	0x08009b09
 8009ae0:	08009b1f 	.word	0x08009b1f
 8009ae4:	08009b0f 	.word	0x08009b0f
 8009ae8:	08009b1f 	.word	0x08009b1f
 8009aec:	08009b1f 	.word	0x08009b1f
 8009af0:	08009b1f 	.word	0x08009b1f
 8009af4:	08009b17 	.word	0x08009b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009af8:	f7fd fcf6 	bl	80074e8 <HAL_RCC_GetPCLK1Freq>
 8009afc:	6178      	str	r0, [r7, #20]
        break;
 8009afe:	e013      	b.n	8009b28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b00:	f7fd fd08 	bl	8007514 <HAL_RCC_GetPCLK2Freq>
 8009b04:	6178      	str	r0, [r7, #20]
        break;
 8009b06:	e00f      	b.n	8009b28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b08:	4b49      	ldr	r3, [pc, #292]	; (8009c30 <UART_SetConfig+0x464>)
 8009b0a:	617b      	str	r3, [r7, #20]
        break;
 8009b0c:	e00c      	b.n	8009b28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b0e:	f7fd fc53 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 8009b12:	6178      	str	r0, [r7, #20]
        break;
 8009b14:	e008      	b.n	8009b28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b1a:	617b      	str	r3, [r7, #20]
        break;
 8009b1c:	e004      	b.n	8009b28 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	76bb      	strb	r3, [r7, #26]
        break;
 8009b26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d074      	beq.n	8009c18 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	005a      	lsls	r2, r3, #1
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	085b      	lsrs	r3, r3, #1
 8009b38:	441a      	add	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b42:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2b0f      	cmp	r3, #15
 8009b48:	d916      	bls.n	8009b78 <UART_SetConfig+0x3ac>
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b50:	d212      	bcs.n	8009b78 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	f023 030f 	bic.w	r3, r3, #15
 8009b5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	085b      	lsrs	r3, r3, #1
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	f003 0307 	and.w	r3, r3, #7
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	89fb      	ldrh	r3, [r7, #14]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	89fa      	ldrh	r2, [r7, #14]
 8009b74:	60da      	str	r2, [r3, #12]
 8009b76:	e04f      	b.n	8009c18 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	76bb      	strb	r3, [r7, #26]
 8009b7c:	e04c      	b.n	8009c18 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b7e:	7efb      	ldrb	r3, [r7, #27]
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d828      	bhi.n	8009bd6 <UART_SetConfig+0x40a>
 8009b84:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <UART_SetConfig+0x3c0>)
 8009b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8a:	bf00      	nop
 8009b8c:	08009bb1 	.word	0x08009bb1
 8009b90:	08009bb9 	.word	0x08009bb9
 8009b94:	08009bc1 	.word	0x08009bc1
 8009b98:	08009bd7 	.word	0x08009bd7
 8009b9c:	08009bc7 	.word	0x08009bc7
 8009ba0:	08009bd7 	.word	0x08009bd7
 8009ba4:	08009bd7 	.word	0x08009bd7
 8009ba8:	08009bd7 	.word	0x08009bd7
 8009bac:	08009bcf 	.word	0x08009bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb0:	f7fd fc9a 	bl	80074e8 <HAL_RCC_GetPCLK1Freq>
 8009bb4:	6178      	str	r0, [r7, #20]
        break;
 8009bb6:	e013      	b.n	8009be0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bb8:	f7fd fcac 	bl	8007514 <HAL_RCC_GetPCLK2Freq>
 8009bbc:	6178      	str	r0, [r7, #20]
        break;
 8009bbe:	e00f      	b.n	8009be0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc0:	4b1b      	ldr	r3, [pc, #108]	; (8009c30 <UART_SetConfig+0x464>)
 8009bc2:	617b      	str	r3, [r7, #20]
        break;
 8009bc4:	e00c      	b.n	8009be0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bc6:	f7fd fbf7 	bl	80073b8 <HAL_RCC_GetSysClockFreq>
 8009bca:	6178      	str	r0, [r7, #20]
        break;
 8009bcc:	e008      	b.n	8009be0 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bd2:	617b      	str	r3, [r7, #20]
        break;
 8009bd4:	e004      	b.n	8009be0 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	76bb      	strb	r3, [r7, #26]
        break;
 8009bde:	bf00      	nop
    }

    if (pclk != 0U)
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d018      	beq.n	8009c18 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	085a      	lsrs	r2, r3, #1
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	441a      	add	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2b0f      	cmp	r3, #15
 8009bfe:	d909      	bls.n	8009c14 <UART_SetConfig+0x448>
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c06:	d205      	bcs.n	8009c14 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	60da      	str	r2, [r3, #12]
 8009c12:	e001      	b.n	8009c18 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009c24:	7ebb      	ldrb	r3, [r7, #26]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3720      	adds	r7, #32
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	00f42400 	.word	0x00f42400

08009c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00a      	beq.n	8009c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	f003 0302 	and.w	r3, r3, #2
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	f003 0308 	and.w	r3, r3, #8
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00a      	beq.n	8009cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc8:	f003 0310 	and.w	r3, r3, #16
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00a      	beq.n	8009ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cea:	f003 0320 	and.w	r3, r3, #32
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d01a      	beq.n	8009d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d32:	d10a      	bne.n	8009d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00a      	beq.n	8009d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	605a      	str	r2, [r3, #4]
  }
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af02      	add	r7, sp, #8
 8009d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d88:	f7fa fbc6 	bl	8004518 <HAL_GetTick>
 8009d8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0308 	and.w	r3, r3, #8
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	d10e      	bne.n	8009dba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f82d 	bl	8009e0a <UART_WaitOnFlagUntilTimeout>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e023      	b.n	8009e02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0304 	and.w	r3, r3, #4
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	d10e      	bne.n	8009de6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f817 	bl	8009e0a <UART_WaitOnFlagUntilTimeout>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e00d      	b.n	8009e02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2220      	movs	r2, #32
 8009dea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2220      	movs	r2, #32
 8009df0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b09c      	sub	sp, #112	; 0x70
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	603b      	str	r3, [r7, #0]
 8009e16:	4613      	mov	r3, r2
 8009e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e1a:	e0a5      	b.n	8009f68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e22:	f000 80a1 	beq.w	8009f68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e26:	f7fa fb77 	bl	8004518 <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d302      	bcc.n	8009e3c <UART_WaitOnFlagUntilTimeout+0x32>
 8009e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d13e      	bne.n	8009eba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e50:	667b      	str	r3, [r7, #100]	; 0x64
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e6      	bne.n	8009e3c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3308      	adds	r3, #8
 8009e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	f023 0301 	bic.w	r3, r3, #1
 8009e84:	663b      	str	r3, [r7, #96]	; 0x60
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009e90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e5      	bne.n	8009e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2220      	movs	r2, #32
 8009eac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e067      	b.n	8009f8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d04f      	beq.n	8009f68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ed6:	d147      	bne.n	8009f68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ee0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	461a      	mov	r2, r3
 8009efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f00:	637b      	str	r3, [r7, #52]	; 0x34
 8009f02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e6      	bne.n	8009ee2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3308      	adds	r3, #8
 8009f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	e853 3f00 	ldrex	r3, [r3]
 8009f22:	613b      	str	r3, [r7, #16]
   return(result);
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f023 0301 	bic.w	r3, r3, #1
 8009f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3308      	adds	r3, #8
 8009f32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f34:	623a      	str	r2, [r7, #32]
 8009f36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f38:	69f9      	ldr	r1, [r7, #28]
 8009f3a:	6a3a      	ldr	r2, [r7, #32]
 8009f3c:	e841 2300 	strex	r3, r2, [r1]
 8009f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1e5      	bne.n	8009f14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2220      	movs	r2, #32
 8009f4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2220      	movs	r2, #32
 8009f52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2220      	movs	r2, #32
 8009f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e010      	b.n	8009f8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	69da      	ldr	r2, [r3, #28]
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	4013      	ands	r3, r2
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	bf0c      	ite	eq
 8009f78:	2301      	moveq	r3, #1
 8009f7a:	2300      	movne	r3, #0
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	461a      	mov	r2, r3
 8009f80:	79fb      	ldrb	r3, [r7, #7]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	f43f af4a 	beq.w	8009e1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3770      	adds	r7, #112	; 0x70
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b096      	sub	sp, #88	; 0x58
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	88fa      	ldrh	r2, [r7, #6]
 8009fac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2222      	movs	r2, #34	; 0x22
 8009fbc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d02b      	beq.n	800a01e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fca:	4a42      	ldr	r2, [pc, #264]	; (800a0d4 <UART_Start_Receive_DMA+0x140>)
 8009fcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd2:	4a41      	ldr	r2, [pc, #260]	; (800a0d8 <UART_Start_Receive_DMA+0x144>)
 8009fd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fda:	4a40      	ldr	r2, [pc, #256]	; (800a0dc <UART_Start_Receive_DMA+0x148>)
 8009fdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3324      	adds	r3, #36	; 0x24
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	88fb      	ldrh	r3, [r7, #6]
 8009ffa:	f7fb fe55 	bl	8005ca8 <HAL_DMA_Start_IT>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00c      	beq.n	800a01e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2210      	movs	r2, #16
 800a008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2220      	movs	r2, #32
 800a018:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e055      	b.n	800a0ca <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d018      	beq.n	800a060 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a042:	657b      	str	r3, [r7, #84]	; 0x54
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a04c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a04e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a054:	e841 2300 	strex	r3, r2, [r1]
 800a058:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a05a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e6      	bne.n	800a02e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3308      	adds	r3, #8
 800a066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06a:	e853 3f00 	ldrex	r3, [r3]
 800a06e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	f043 0301 	orr.w	r3, r3, #1
 800a076:	653b      	str	r3, [r7, #80]	; 0x50
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3308      	adds	r3, #8
 800a07e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a080:	637a      	str	r2, [r7, #52]	; 0x34
 800a082:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a088:	e841 2300 	strex	r3, r2, [r1]
 800a08c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1e5      	bne.n	800a060 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3308      	adds	r3, #8
 800a09a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	e853 3f00 	ldrex	r3, [r3]
 800a0a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	3308      	adds	r3, #8
 800a0b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0b4:	623a      	str	r2, [r7, #32]
 800a0b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b8:	69f9      	ldr	r1, [r7, #28]
 800a0ba:	6a3a      	ldr	r2, [r7, #32]
 800a0bc:	e841 2300 	strex	r3, r2, [r1]
 800a0c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e5      	bne.n	800a094 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3758      	adds	r7, #88	; 0x58
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	0800a2a9 	.word	0x0800a2a9
 800a0d8:	0800a3cd 	.word	0x0800a3cd
 800a0dc:	0800a405 	.word	0x0800a405

0800a0e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b089      	sub	sp, #36	; 0x24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a0fc:	61fb      	str	r3, [r7, #28]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	61bb      	str	r3, [r7, #24]
 800a108:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6979      	ldr	r1, [r7, #20]
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	613b      	str	r3, [r7, #16]
   return(result);
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e6      	bne.n	800a0e8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2220      	movs	r2, #32
 800a11e:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a120:	bf00      	nop
 800a122:	3724      	adds	r7, #36	; 0x24
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b095      	sub	sp, #84	; 0x54
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13c:	e853 3f00 	ldrex	r3, [r3]
 800a140:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a148:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a152:	643b      	str	r3, [r7, #64]	; 0x40
 800a154:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e6      	bne.n	800a134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3308      	adds	r3, #8
 800a16c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	e853 3f00 	ldrex	r3, [r3]
 800a174:	61fb      	str	r3, [r7, #28]
   return(result);
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	f023 0301 	bic.w	r3, r3, #1
 800a17c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3308      	adds	r3, #8
 800a184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a186:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a18e:	e841 2300 	strex	r3, r2, [r1]
 800a192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e5      	bne.n	800a166 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d118      	bne.n	800a1d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f023 0310 	bic.w	r3, r3, #16
 800a1b6:	647b      	str	r3, [r7, #68]	; 0x44
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1c0:	61bb      	str	r3, [r7, #24]
 800a1c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c4:	6979      	ldr	r1, [r7, #20]
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	e841 2300 	strex	r3, r2, [r1]
 800a1cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1e6      	bne.n	800a1a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2220      	movs	r2, #32
 800a1d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a1e6:	bf00      	nop
 800a1e8:	3754      	adds	r7, #84	; 0x54
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b090      	sub	sp, #64	; 0x40
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0320 	and.w	r3, r3, #32
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d137      	bne.n	800a27e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a210:	2200      	movs	r2, #0
 800a212:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3308      	adds	r3, #8
 800a21c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	e853 3f00 	ldrex	r3, [r3]
 800a224:	623b      	str	r3, [r7, #32]
   return(result);
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a22c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3308      	adds	r3, #8
 800a234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a236:	633a      	str	r2, [r7, #48]	; 0x30
 800a238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a23c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e5      	bne.n	800a216 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	60fb      	str	r3, [r7, #12]
   return(result);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a25e:	637b      	str	r3, [r7, #52]	; 0x34
 800a260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	461a      	mov	r2, r3
 800a266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a268:	61fb      	str	r3, [r7, #28]
 800a26a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	69b9      	ldr	r1, [r7, #24]
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	617b      	str	r3, [r7, #20]
   return(result);
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e6      	bne.n	800a24a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a27c:	e002      	b.n	800a284 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a27e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a280:	f7f8 fdf0 	bl	8002e64 <HAL_UART_TxCpltCallback>
}
 800a284:	bf00      	nop
 800a286:	3740      	adds	r7, #64	; 0x40
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a298:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff fa5e 	bl	800975c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2a0:	bf00      	nop
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b09c      	sub	sp, #112	; 0x70
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0320 	and.w	r3, r3, #32
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d170      	bne.n	800a3a6 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800a2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2d4:	e853 3f00 	ldrex	r3, [r3]
 800a2d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2f2:	e841 2300 	strex	r3, r2, [r1]
 800a2f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e6      	bne.n	800a2cc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3308      	adds	r3, #8
 800a304:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a310:	f023 0301 	bic.w	r3, r3, #1
 800a314:	667b      	str	r3, [r7, #100]	; 0x64
 800a316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3308      	adds	r3, #8
 800a31c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a31e:	647a      	str	r2, [r7, #68]	; 0x44
 800a320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e5      	bne.n	800a2fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3308      	adds	r3, #8
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	623b      	str	r3, [r7, #32]
   return(result);
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a348:	663b      	str	r3, [r7, #96]	; 0x60
 800a34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3308      	adds	r3, #8
 800a350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a352:	633a      	str	r2, [r7, #48]	; 0x30
 800a354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a35a:	e841 2300 	strex	r3, r2, [r1]
 800a35e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e5      	bne.n	800a332 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a368:	2220      	movs	r2, #32
 800a36a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a36c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a370:	2b01      	cmp	r3, #1
 800a372:	d118      	bne.n	800a3a6 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	60fb      	str	r3, [r7, #12]
   return(result);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f023 0310 	bic.w	r3, r3, #16
 800a388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a392:	61fb      	str	r3, [r7, #28]
 800a394:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a396:	69b9      	ldr	r1, [r7, #24]
 800a398:	69fa      	ldr	r2, [r7, #28]
 800a39a:	e841 2300 	strex	r3, r2, [r1]
 800a39e:	617b      	str	r3, [r7, #20]
   return(result);
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e6      	bne.n	800a374 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d107      	bne.n	800a3be <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3b8:	f7ff f9ee 	bl	8009798 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3bc:	e002      	b.n	800a3c4 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a3be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3c0:	f7f8 fba4 	bl	8002b0c <HAL_UART_RxCpltCallback>
}
 800a3c4:	bf00      	nop
 800a3c6:	3770      	adds	r7, #112	; 0x70
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d109      	bne.n	800a3f6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3e8:	085b      	lsrs	r3, r3, #1
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7ff f9d2 	bl	8009798 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3f4:	e002      	b.n	800a3fc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7ff f9ba 	bl	8009770 <HAL_UART_RxHalfCpltCallback>
}
 800a3fc:	bf00      	nop
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a410:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a416:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a41c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a428:	2b80      	cmp	r3, #128	; 0x80
 800a42a:	d109      	bne.n	800a440 <UART_DMAError+0x3c>
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	2b21      	cmp	r3, #33	; 0x21
 800a430:	d106      	bne.n	800a440 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2200      	movs	r2, #0
 800a436:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a43a:	6978      	ldr	r0, [r7, #20]
 800a43c:	f7ff fe50 	bl	800a0e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44a:	2b40      	cmp	r3, #64	; 0x40
 800a44c:	d109      	bne.n	800a462 <UART_DMAError+0x5e>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2b22      	cmp	r3, #34	; 0x22
 800a452:	d106      	bne.n	800a462 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2200      	movs	r2, #0
 800a458:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a45c:	6978      	ldr	r0, [r7, #20]
 800a45e:	f7ff fe65 	bl	800a12c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a468:	f043 0210 	orr.w	r2, r3, #16
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a472:	6978      	ldr	r0, [r7, #20]
 800a474:	f7ff f986 	bl	8009784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a478:	bf00      	nop
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f7ff f970 	bl	8009784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4a4:	bf00      	nop
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	e853 3f00 	ldrex	r3, [r3]
 800a4c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4c8:	61fb      	str	r3, [r7, #28]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	61bb      	str	r3, [r7, #24]
 800a4d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d6:	6979      	ldr	r1, [r7, #20]
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	e841 2300 	strex	r3, r2, [r1]
 800a4de:	613b      	str	r3, [r7, #16]
   return(result);
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e6      	bne.n	800a4b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2220      	movs	r2, #32
 800a4ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7f8 fcb6 	bl	8002e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4f8:	bf00      	nop
 800a4fa:	3720      	adds	r7, #32
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <__NVIC_SetPriority>:
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	6039      	str	r1, [r7, #0]
 800a51e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a524:	2b00      	cmp	r3, #0
 800a526:	db0a      	blt.n	800a53e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	490c      	ldr	r1, [pc, #48]	; (800a560 <__NVIC_SetPriority+0x4c>)
 800a52e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a532:	0112      	lsls	r2, r2, #4
 800a534:	b2d2      	uxtb	r2, r2
 800a536:	440b      	add	r3, r1
 800a538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a53c:	e00a      	b.n	800a554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	b2da      	uxtb	r2, r3
 800a542:	4908      	ldr	r1, [pc, #32]	; (800a564 <__NVIC_SetPriority+0x50>)
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	f003 030f 	and.w	r3, r3, #15
 800a54a:	3b04      	subs	r3, #4
 800a54c:	0112      	lsls	r2, r2, #4
 800a54e:	b2d2      	uxtb	r2, r2
 800a550:	440b      	add	r3, r1
 800a552:	761a      	strb	r2, [r3, #24]
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	e000e100 	.word	0xe000e100
 800a564:	e000ed00 	.word	0xe000ed00

0800a568 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a56c:	4b05      	ldr	r3, [pc, #20]	; (800a584 <SysTick_Handler+0x1c>)
 800a56e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a570:	f001 fe52 	bl	800c218 <xTaskGetSchedulerState>
 800a574:	4603      	mov	r3, r0
 800a576:	2b01      	cmp	r3, #1
 800a578:	d001      	beq.n	800a57e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a57a:	f002 fd1d 	bl	800cfb8 <xPortSysTickHandler>
  }
}
 800a57e:	bf00      	nop
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	e000e010 	.word	0xe000e010

0800a588 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a58c:	2100      	movs	r1, #0
 800a58e:	f06f 0004 	mvn.w	r0, #4
 800a592:	f7ff ffbf 	bl	800a514 <__NVIC_SetPriority>
#endif
}
 800a596:	bf00      	nop
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5a2:	f3ef 8305 	mrs	r3, IPSR
 800a5a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a5a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a5ae:	f06f 0305 	mvn.w	r3, #5
 800a5b2:	607b      	str	r3, [r7, #4]
 800a5b4:	e00c      	b.n	800a5d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a5b6:	4b0a      	ldr	r3, [pc, #40]	; (800a5e0 <osKernelInitialize+0x44>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d105      	bne.n	800a5ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a5be:	4b08      	ldr	r3, [pc, #32]	; (800a5e0 <osKernelInitialize+0x44>)
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	607b      	str	r3, [r7, #4]
 800a5c8:	e002      	b.n	800a5d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a5ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a5d0:	687b      	ldr	r3, [r7, #4]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	2000026c 	.word	0x2000026c

0800a5e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5ea:	f3ef 8305 	mrs	r3, IPSR
 800a5ee:	603b      	str	r3, [r7, #0]
  return(result);
 800a5f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <osKernelStart+0x1a>
    stat = osErrorISR;
 800a5f6:	f06f 0305 	mvn.w	r3, #5
 800a5fa:	607b      	str	r3, [r7, #4]
 800a5fc:	e010      	b.n	800a620 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a5fe:	4b0b      	ldr	r3, [pc, #44]	; (800a62c <osKernelStart+0x48>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d109      	bne.n	800a61a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a606:	f7ff ffbf 	bl	800a588 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a60a:	4b08      	ldr	r3, [pc, #32]	; (800a62c <osKernelStart+0x48>)
 800a60c:	2202      	movs	r2, #2
 800a60e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a610:	f001 f978 	bl	800b904 <vTaskStartScheduler>
      stat = osOK;
 800a614:	2300      	movs	r3, #0
 800a616:	607b      	str	r3, [r7, #4]
 800a618:	e002      	b.n	800a620 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295
 800a61e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a620:	687b      	ldr	r3, [r7, #4]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	2000026c 	.word	0x2000026c

0800a630 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a630:	b580      	push	{r7, lr}
 800a632:	b08e      	sub	sp, #56	; 0x38
 800a634:	af04      	add	r7, sp, #16
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a63c:	2300      	movs	r3, #0
 800a63e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a640:	f3ef 8305 	mrs	r3, IPSR
 800a644:	617b      	str	r3, [r7, #20]
  return(result);
 800a646:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d17f      	bne.n	800a74c <osThreadNew+0x11c>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d07c      	beq.n	800a74c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a656:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a658:	2318      	movs	r3, #24
 800a65a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a65c:	2300      	movs	r3, #0
 800a65e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a660:	f04f 33ff 	mov.w	r3, #4294967295
 800a664:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d045      	beq.n	800a6f8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <osThreadNew+0x4a>
        name = attr->name;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d008      	beq.n	800a6a0 <osThreadNew+0x70>
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	2b38      	cmp	r3, #56	; 0x38
 800a692:	d805      	bhi.n	800a6a0 <osThreadNew+0x70>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	f003 0301 	and.w	r3, r3, #1
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <osThreadNew+0x74>
        return (NULL);
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	e054      	b.n	800a74e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d003      	beq.n	800a6b4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	089b      	lsrs	r3, r3, #2
 800a6b2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00e      	beq.n	800a6da <osThreadNew+0xaa>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	2bbf      	cmp	r3, #191	; 0xbf
 800a6c2:	d90a      	bls.n	800a6da <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d006      	beq.n	800a6da <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <osThreadNew+0xaa>
        mem = 1;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	61bb      	str	r3, [r7, #24]
 800a6d8:	e010      	b.n	800a6fc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10c      	bne.n	800a6fc <osThreadNew+0xcc>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d108      	bne.n	800a6fc <osThreadNew+0xcc>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d104      	bne.n	800a6fc <osThreadNew+0xcc>
          mem = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	61bb      	str	r3, [r7, #24]
 800a6f6:	e001      	b.n	800a6fc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d110      	bne.n	800a724 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a70a:	9202      	str	r2, [sp, #8]
 800a70c:	9301      	str	r3, [sp, #4]
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	6a3a      	ldr	r2, [r7, #32]
 800a716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 ff03 	bl	800b524 <xTaskCreateStatic>
 800a71e:	4603      	mov	r3, r0
 800a720:	613b      	str	r3, [r7, #16]
 800a722:	e013      	b.n	800a74c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d110      	bne.n	800a74c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	f107 0310 	add.w	r3, r7, #16
 800a732:	9301      	str	r3, [sp, #4]
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f000 ff4e 	bl	800b5de <xTaskCreate>
 800a742:	4603      	mov	r3, r0
 800a744:	2b01      	cmp	r3, #1
 800a746:	d001      	beq.n	800a74c <osThreadNew+0x11c>
            hTask = NULL;
 800a748:	2300      	movs	r3, #0
 800a74a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a74c:	693b      	ldr	r3, [r7, #16]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3728      	adds	r7, #40	; 0x28
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a75e:	f3ef 8305 	mrs	r3, IPSR
 800a762:	60bb      	str	r3, [r7, #8]
  return(result);
 800a764:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <osDelay+0x1c>
    stat = osErrorISR;
 800a76a:	f06f 0305 	mvn.w	r3, #5
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	e007      	b.n	800a782 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a772:	2300      	movs	r3, #0
 800a774:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 f88d 	bl	800b89c <vTaskDelay>
    }
  }

  return (stat);
 800a782:	68fb      	ldr	r3, [r7, #12]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f002 fa30 	bl	800cbfa <pvTimerGetTimerID>
 800a79a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d005      	beq.n	800a7ae <TimerCallback+0x22>
    callb->func (callb->arg);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	6852      	ldr	r2, [r2, #4]
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	4798      	blx	r3
  }
}
 800a7ae:	bf00      	nop
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
	...

0800a7b8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08c      	sub	sp, #48	; 0x30
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	607a      	str	r2, [r7, #4]
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7cc:	f3ef 8305 	mrs	r3, IPSR
 800a7d0:	613b      	str	r3, [r7, #16]
  return(result);
 800a7d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d163      	bne.n	800a8a0 <osTimerNew+0xe8>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d060      	beq.n	800a8a0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a7de:	2008      	movs	r0, #8
 800a7e0:	f002 fc7a 	bl	800d0d8 <pvPortMalloc>
 800a7e4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d059      	beq.n	800a8a0 <osTimerNew+0xe8>
      callb->func = func;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a7f8:	7afb      	ldrb	r3, [r7, #11]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d102      	bne.n	800a804 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a7fe:	2300      	movs	r3, #0
 800a800:	61fb      	str	r3, [r7, #28]
 800a802:	e001      	b.n	800a808 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a804:	2301      	movs	r3, #1
 800a806:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a808:	f04f 33ff 	mov.w	r3, #4294967295
 800a80c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01c      	beq.n	800a852 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <osTimerNew+0x6e>
          name = attr->name;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d006      	beq.n	800a83c <osTimerNew+0x84>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	2b2b      	cmp	r3, #43	; 0x2b
 800a834:	d902      	bls.n	800a83c <osTimerNew+0x84>
          mem = 1;
 800a836:	2301      	movs	r3, #1
 800a838:	61bb      	str	r3, [r7, #24]
 800a83a:	e00c      	b.n	800a856 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d108      	bne.n	800a856 <osTimerNew+0x9e>
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d104      	bne.n	800a856 <osTimerNew+0x9e>
            mem = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	61bb      	str	r3, [r7, #24]
 800a850:	e001      	b.n	800a856 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d10c      	bne.n	800a876 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <osTimerNew+0xf4>)
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	69fa      	ldr	r2, [r7, #28]
 800a86a:	2101      	movs	r1, #1
 800a86c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a86e:	f001 fe1c 	bl	800c4aa <xTimerCreateStatic>
 800a872:	6238      	str	r0, [r7, #32]
 800a874:	e00b      	b.n	800a88e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d108      	bne.n	800a88e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a87c:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <osTimerNew+0xf4>)
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	69fa      	ldr	r2, [r7, #28]
 800a884:	2101      	movs	r1, #1
 800a886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a888:	f001 fdee 	bl	800c468 <xTimerCreate>
 800a88c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a88e:	6a3b      	ldr	r3, [r7, #32]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d105      	bne.n	800a8a0 <osTimerNew+0xe8>
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <osTimerNew+0xe8>
        vPortFree (callb);
 800a89a:	6978      	ldr	r0, [r7, #20]
 800a89c:	f002 fce8 	bl	800d270 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3728      	adds	r7, #40	; 0x28
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	0800a78d 	.word	0x0800a78d

0800a8b0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	af02      	add	r7, sp, #8
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8be:	f3ef 8305 	mrs	r3, IPSR
 800a8c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <osTimerStart+0x22>
    stat = osErrorISR;
 800a8ca:	f06f 0305 	mvn.w	r3, #5
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	e017      	b.n	800a902 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d103      	bne.n	800a8e0 <osTimerStart+0x30>
    stat = osErrorParameter;
 800a8d8:	f06f 0303 	mvn.w	r3, #3
 800a8dc:	617b      	str	r3, [r7, #20]
 800a8de:	e010      	b.n	800a902 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	2104      	movs	r1, #4
 800a8ea:	6938      	ldr	r0, [r7, #16]
 800a8ec:	f001 fe56 	bl	800c59c <xTimerGenericCommand>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d102      	bne.n	800a8fc <osTimerStart+0x4c>
      stat = osOK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	617b      	str	r3, [r7, #20]
 800a8fa:	e002      	b.n	800a902 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a8fc:	f06f 0302 	mvn.w	r3, #2
 800a900:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a902:	697b      	ldr	r3, [r7, #20]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b088      	sub	sp, #32
 800a910:	af02      	add	r7, sp, #8
 800a912:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a918:	f3ef 8305 	mrs	r3, IPSR
 800a91c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a91e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a920:	2b00      	cmp	r3, #0
 800a922:	d003      	beq.n	800a92c <osTimerStop+0x20>
    stat = osErrorISR;
 800a924:	f06f 0305 	mvn.w	r3, #5
 800a928:	617b      	str	r3, [r7, #20]
 800a92a:	e021      	b.n	800a970 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d103      	bne.n	800a93a <osTimerStop+0x2e>
    stat = osErrorParameter;
 800a932:	f06f 0303 	mvn.w	r3, #3
 800a936:	617b      	str	r3, [r7, #20]
 800a938:	e01a      	b.n	800a970 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800a93a:	6938      	ldr	r0, [r7, #16]
 800a93c:	f002 f934 	bl	800cba8 <xTimerIsTimerActive>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d103      	bne.n	800a94e <osTimerStop+0x42>
      stat = osErrorResource;
 800a946:	f06f 0302 	mvn.w	r3, #2
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	e010      	b.n	800a970 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800a94e:	2300      	movs	r3, #0
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	2300      	movs	r3, #0
 800a954:	2200      	movs	r2, #0
 800a956:	2103      	movs	r1, #3
 800a958:	6938      	ldr	r0, [r7, #16]
 800a95a:	f001 fe1f 	bl	800c59c <xTimerGenericCommand>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b01      	cmp	r3, #1
 800a962:	d102      	bne.n	800a96a <osTimerStop+0x5e>
        stat = osOK;
 800a964:	2300      	movs	r3, #0
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	e002      	b.n	800a970 <osTimerStop+0x64>
      } else {
        stat = osError;
 800a96a:	f04f 33ff 	mov.w	r3, #4294967295
 800a96e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a970:	697b      	ldr	r3, [r7, #20]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
	...

0800a97c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4a07      	ldr	r2, [pc, #28]	; (800a9a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a98c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	4a06      	ldr	r2, [pc, #24]	; (800a9ac <vApplicationGetIdleTaskMemory+0x30>)
 800a992:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a99a:	601a      	str	r2, [r3, #0]
}
 800a99c:	bf00      	nop
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	20000270 	.word	0x20000270
 800a9ac:	20000330 	.word	0x20000330

0800a9b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4a07      	ldr	r2, [pc, #28]	; (800a9dc <vApplicationGetTimerTaskMemory+0x2c>)
 800a9c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	4a06      	ldr	r2, [pc, #24]	; (800a9e0 <vApplicationGetTimerTaskMemory+0x30>)
 800a9c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9ce:	601a      	str	r2, [r3, #0]
}
 800a9d0:	bf00      	nop
 800a9d2:	3714      	adds	r7, #20
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	20001330 	.word	0x20001330
 800a9e0:	200013f0 	.word	0x200013f0

0800a9e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f103 0208 	add.w	r2, r3, #8
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f103 0208 	add.w	r2, r3, #8
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f103 0208 	add.w	r2, r3, #8
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa32:	bf00      	nop
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b085      	sub	sp, #20
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	689a      	ldr	r2, [r3, #8]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	1c5a      	adds	r2, r3, #1
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	601a      	str	r2, [r3, #0]
}
 800aa7a:	bf00      	nop
 800aa7c:	3714      	adds	r7, #20
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9c:	d103      	bne.n	800aaa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	e00c      	b.n	800aac0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	3308      	adds	r3, #8
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	e002      	b.n	800aab4 <vListInsert+0x2e>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d2f6      	bcs.n	800aaae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	601a      	str	r2, [r3, #0]
}
 800aaec:	bf00      	nop
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	6892      	ldr	r2, [r2, #8]
 800ab0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	6852      	ldr	r2, [r2, #4]
 800ab18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d103      	bne.n	800ab2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	689a      	ldr	r2, [r3, #8]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	1e5a      	subs	r2, r3, #1
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10a      	bne.n	800ab76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab72:	bf00      	nop
 800ab74:	e7fe      	b.n	800ab74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab76:	f002 f98d 	bl	800ce94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab82:	68f9      	ldr	r1, [r7, #12]
 800ab84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab86:	fb01 f303 	mul.w	r3, r1, r3
 800ab8a:	441a      	add	r2, r3
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba6:	3b01      	subs	r3, #1
 800aba8:	68f9      	ldr	r1, [r7, #12]
 800abaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abac:	fb01 f303 	mul.w	r3, r1, r3
 800abb0:	441a      	add	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	22ff      	movs	r2, #255	; 0xff
 800abba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	22ff      	movs	r2, #255	; 0xff
 800abc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d114      	bne.n	800abf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d01a      	beq.n	800ac0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3310      	adds	r3, #16
 800abd8:	4618      	mov	r0, r3
 800abda:	f001 f95b 	bl	800be94 <xTaskRemoveFromEventList>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d012      	beq.n	800ac0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abe4:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <xQueueGenericReset+0xcc>)
 800abe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	e009      	b.n	800ac0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3310      	adds	r3, #16
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7ff fef2 	bl	800a9e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3324      	adds	r3, #36	; 0x24
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff feed 	bl	800a9e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac0a:	f002 f973 	bl	800cef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac0e:	2301      	movs	r3, #1
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08e      	sub	sp, #56	; 0x38
 800ac20:	af02      	add	r7, sp, #8
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10a      	bne.n	800ac62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac5e:	bf00      	nop
 800ac60:	e7fe      	b.n	800ac60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <xQueueGenericCreateStatic+0x52>
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <xQueueGenericCreateStatic+0x56>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <xQueueGenericCreateStatic+0x58>
 800ac72:	2300      	movs	r3, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	623b      	str	r3, [r7, #32]
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d102      	bne.n	800ac9a <xQueueGenericCreateStatic+0x7e>
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <xQueueGenericCreateStatic+0x82>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e000      	b.n	800aca0 <xQueueGenericCreateStatic+0x84>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	61fb      	str	r3, [r7, #28]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acba:	2350      	movs	r3, #80	; 0x50
 800acbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b50      	cmp	r3, #80	; 0x50
 800acc2:	d00a      	beq.n	800acda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	61bb      	str	r3, [r7, #24]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800acda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ace0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00d      	beq.n	800ad02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4613      	mov	r3, r2
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 f805 	bl	800ad0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3730      	adds	r7, #48	; 0x30
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d103      	bne.n	800ad28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	e002      	b.n	800ad2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	69b8      	ldr	r0, [r7, #24]
 800ad3e:	f7ff ff05 	bl	800ab4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	78fa      	ldrb	r2, [r7, #3]
 800ad46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08e      	sub	sp, #56	; 0x38
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad62:	2300      	movs	r3, #0
 800ad64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <xQueueGenericSend+0x32>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad82:	bf00      	nop
 800ad84:	e7fe      	b.n	800ad84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d103      	bne.n	800ad94 <xQueueGenericSend+0x40>
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <xQueueGenericSend+0x44>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e000      	b.n	800ad9a <xQueueGenericSend+0x46>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <xQueueGenericSend+0x60>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d103      	bne.n	800adc2 <xQueueGenericSend+0x6e>
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d101      	bne.n	800adc6 <xQueueGenericSend+0x72>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <xQueueGenericSend+0x74>
 800adc6:	2300      	movs	r3, #0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <xQueueGenericSend+0x8e>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	623b      	str	r3, [r7, #32]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ade2:	f001 fa19 	bl	800c218 <xTaskGetSchedulerState>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d102      	bne.n	800adf2 <xQueueGenericSend+0x9e>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d101      	bne.n	800adf6 <xQueueGenericSend+0xa2>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e000      	b.n	800adf8 <xQueueGenericSend+0xa4>
 800adf6:	2300      	movs	r3, #0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10a      	bne.n	800ae12 <xQueueGenericSend+0xbe>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	61fb      	str	r3, [r7, #28]
}
 800ae0e:	bf00      	nop
 800ae10:	e7fe      	b.n	800ae10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae12:	f002 f83f 	bl	800ce94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d302      	bcc.n	800ae28 <xQueueGenericSend+0xd4>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d129      	bne.n	800ae7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae2e:	f000 fa0b 	bl	800b248 <prvCopyDataToQueue>
 800ae32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d010      	beq.n	800ae5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	3324      	adds	r3, #36	; 0x24
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 f827 	bl	800be94 <xTaskRemoveFromEventList>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d013      	beq.n	800ae74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae4c:	4b3f      	ldr	r3, [pc, #252]	; (800af4c <xQueueGenericSend+0x1f8>)
 800ae4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	e00a      	b.n	800ae74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae64:	4b39      	ldr	r3, [pc, #228]	; (800af4c <xQueueGenericSend+0x1f8>)
 800ae66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae74:	f002 f83e 	bl	800cef4 <vPortExitCritical>
				return pdPASS;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e063      	b.n	800af44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d103      	bne.n	800ae8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae82:	f002 f837 	bl	800cef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	e05c      	b.n	800af44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d106      	bne.n	800ae9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae90:	f107 0314 	add.w	r3, r7, #20
 800ae94:	4618      	mov	r0, r3
 800ae96:	f001 f861 	bl	800bf5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae9e:	f002 f829 	bl	800cef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aea2:	f000 fda1 	bl	800b9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aea6:	f001 fff5 	bl	800ce94 <vPortEnterCritical>
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb6:	d103      	bne.n	800aec0 <xQueueGenericSend+0x16c>
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aec6:	b25b      	sxtb	r3, r3
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aecc:	d103      	bne.n	800aed6 <xQueueGenericSend+0x182>
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aed6:	f002 f80d 	bl	800cef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeda:	1d3a      	adds	r2, r7, #4
 800aedc:	f107 0314 	add.w	r3, r7, #20
 800aee0:	4611      	mov	r1, r2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f001 f850 	bl	800bf88 <xTaskCheckForTimeOut>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d124      	bne.n	800af38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aeee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aef0:	f000 faa2 	bl	800b438 <prvIsQueueFull>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d018      	beq.n	800af2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	3310      	adds	r3, #16
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	4611      	mov	r1, r2
 800af02:	4618      	mov	r0, r3
 800af04:	f000 ff76 	bl	800bdf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0a:	f000 fa2d 	bl	800b368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af0e:	f000 fd79 	bl	800ba04 <xTaskResumeAll>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	f47f af7c 	bne.w	800ae12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af1a:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <xQueueGenericSend+0x1f8>)
 800af1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	e772      	b.n	800ae12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af2e:	f000 fa1b 	bl	800b368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af32:	f000 fd67 	bl	800ba04 <xTaskResumeAll>
 800af36:	e76c      	b.n	800ae12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af3a:	f000 fa15 	bl	800b368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af3e:	f000 fd61 	bl	800ba04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af44:	4618      	mov	r0, r3
 800af46:	3738      	adds	r7, #56	; 0x38
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	e000ed04 	.word	0xe000ed04

0800af50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b090      	sub	sp, #64	; 0x40
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10a      	bne.n	800af7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d103      	bne.n	800af8c <xQueueGenericSendFromISR+0x3c>
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <xQueueGenericSendFromISR+0x40>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e000      	b.n	800af92 <xQueueGenericSendFromISR+0x42>
 800af90:	2300      	movs	r3, #0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10a      	bne.n	800afac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afa8:	bf00      	nop
 800afaa:	e7fe      	b.n	800afaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d103      	bne.n	800afba <xQueueGenericSendFromISR+0x6a>
 800afb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d101      	bne.n	800afbe <xQueueGenericSendFromISR+0x6e>
 800afba:	2301      	movs	r3, #1
 800afbc:	e000      	b.n	800afc0 <xQueueGenericSendFromISR+0x70>
 800afbe:	2300      	movs	r3, #0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	623b      	str	r3, [r7, #32]
}
 800afd6:	bf00      	nop
 800afd8:	e7fe      	b.n	800afd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afda:	f002 f83d 	bl	800d058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afde:	f3ef 8211 	mrs	r2, BASEPRI
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	61fa      	str	r2, [r7, #28]
 800aff4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aff6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aff8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b002:	429a      	cmp	r2, r3
 800b004:	d302      	bcc.n	800b00c <xQueueGenericSendFromISR+0xbc>
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d12f      	bne.n	800b06c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b022:	f000 f911 	bl	800b248 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b026:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b02e:	d112      	bne.n	800b056 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	2b00      	cmp	r3, #0
 800b036:	d016      	beq.n	800b066 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	3324      	adds	r3, #36	; 0x24
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 ff29 	bl	800be94 <xTaskRemoveFromEventList>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00e      	beq.n	800b066 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	e007      	b.n	800b066 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b05a:	3301      	adds	r3, #1
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	b25a      	sxtb	r2, r3
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b066:	2301      	movs	r3, #1
 800b068:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b06a:	e001      	b.n	800b070 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b06c:	2300      	movs	r3, #0
 800b06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b072:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b07a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3740      	adds	r7, #64	; 0x40
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08c      	sub	sp, #48	; 0x30
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b094:	2300      	movs	r3, #0
 800b096:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10a      	bne.n	800b0b8 <xQueueReceive+0x30>
	__asm volatile
 800b0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	623b      	str	r3, [r7, #32]
}
 800b0b4:	bf00      	nop
 800b0b6:	e7fe      	b.n	800b0b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d103      	bne.n	800b0c6 <xQueueReceive+0x3e>
 800b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <xQueueReceive+0x42>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e000      	b.n	800b0cc <xQueueReceive+0x44>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10a      	bne.n	800b0e6 <xQueueReceive+0x5e>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	61fb      	str	r3, [r7, #28]
}
 800b0e2:	bf00      	nop
 800b0e4:	e7fe      	b.n	800b0e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0e6:	f001 f897 	bl	800c218 <xTaskGetSchedulerState>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d102      	bne.n	800b0f6 <xQueueReceive+0x6e>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <xQueueReceive+0x72>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <xQueueReceive+0x74>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10a      	bne.n	800b116 <xQueueReceive+0x8e>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	61bb      	str	r3, [r7, #24]
}
 800b112:	bf00      	nop
 800b114:	e7fe      	b.n	800b114 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b116:	f001 febd 	bl	800ce94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	2b00      	cmp	r3, #0
 800b124:	d01f      	beq.n	800b166 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b126:	68b9      	ldr	r1, [r7, #8]
 800b128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b12a:	f000 f8f7 	bl	800b31c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	1e5a      	subs	r2, r3, #1
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00f      	beq.n	800b15e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	3310      	adds	r3, #16
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fea6 	bl	800be94 <xTaskRemoveFromEventList>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d007      	beq.n	800b15e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b14e:	4b3d      	ldr	r3, [pc, #244]	; (800b244 <xQueueReceive+0x1bc>)
 800b150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b154:	601a      	str	r2, [r3, #0]
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b15e:	f001 fec9 	bl	800cef4 <vPortExitCritical>
				return pdPASS;
 800b162:	2301      	movs	r3, #1
 800b164:	e069      	b.n	800b23a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d103      	bne.n	800b174 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b16c:	f001 fec2 	bl	800cef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b170:	2300      	movs	r3, #0
 800b172:	e062      	b.n	800b23a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	2b00      	cmp	r3, #0
 800b178:	d106      	bne.n	800b188 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b17a:	f107 0310 	add.w	r3, r7, #16
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 feec 	bl	800bf5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b184:	2301      	movs	r3, #1
 800b186:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b188:	f001 feb4 	bl	800cef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b18c:	f000 fc2c 	bl	800b9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b190:	f001 fe80 	bl	800ce94 <vPortEnterCritical>
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b19a:	b25b      	sxtb	r3, r3
 800b19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a0:	d103      	bne.n	800b1aa <xQueueReceive+0x122>
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1b0:	b25b      	sxtb	r3, r3
 800b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b6:	d103      	bne.n	800b1c0 <xQueueReceive+0x138>
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1c0:	f001 fe98 	bl	800cef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1c4:	1d3a      	adds	r2, r7, #4
 800b1c6:	f107 0310 	add.w	r3, r7, #16
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fedb 	bl	800bf88 <xTaskCheckForTimeOut>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d123      	bne.n	800b220 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1da:	f000 f917 	bl	800b40c <prvIsQueueEmpty>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d017      	beq.n	800b214 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e6:	3324      	adds	r3, #36	; 0x24
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 fe01 	bl	800bdf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f4:	f000 f8b8 	bl	800b368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1f8:	f000 fc04 	bl	800ba04 <xTaskResumeAll>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d189      	bne.n	800b116 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b202:	4b10      	ldr	r3, [pc, #64]	; (800b244 <xQueueReceive+0x1bc>)
 800b204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	e780      	b.n	800b116 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b216:	f000 f8a7 	bl	800b368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b21a:	f000 fbf3 	bl	800ba04 <xTaskResumeAll>
 800b21e:	e77a      	b.n	800b116 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b222:	f000 f8a1 	bl	800b368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b226:	f000 fbed 	bl	800ba04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b22c:	f000 f8ee 	bl	800b40c <prvIsQueueEmpty>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	f43f af6f 	beq.w	800b116 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3730      	adds	r7, #48	; 0x30
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b254:	2300      	movs	r3, #0
 800b256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10d      	bne.n	800b282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d14d      	bne.n	800b30a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	4618      	mov	r0, r3
 800b274:	f000 ffee 	bl	800c254 <xTaskPriorityDisinherit>
 800b278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	609a      	str	r2, [r3, #8]
 800b280:	e043      	b.n	800b30a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d119      	bne.n	800b2bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6858      	ldr	r0, [r3, #4]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b290:	461a      	mov	r2, r3
 800b292:	68b9      	ldr	r1, [r7, #8]
 800b294:	f002 fa2d 	bl	800d6f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a0:	441a      	add	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	685a      	ldr	r2, [r3, #4]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d32b      	bcc.n	800b30a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	605a      	str	r2, [r3, #4]
 800b2ba:	e026      	b.n	800b30a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	68d8      	ldr	r0, [r3, #12]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	68b9      	ldr	r1, [r7, #8]
 800b2c8:	f002 fa13 	bl	800d6f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	68da      	ldr	r2, [r3, #12]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d4:	425b      	negs	r3, r3
 800b2d6:	441a      	add	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	68da      	ldr	r2, [r3, #12]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d207      	bcs.n	800b2f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	689a      	ldr	r2, [r3, #8]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f0:	425b      	negs	r3, r3
 800b2f2:	441a      	add	r2, r3
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d105      	bne.n	800b30a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	3b01      	subs	r3, #1
 800b308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	1c5a      	adds	r2, r3, #1
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b312:	697b      	ldr	r3, [r7, #20]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3718      	adds	r7, #24
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d018      	beq.n	800b360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68da      	ldr	r2, [r3, #12]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b336:	441a      	add	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	68da      	ldr	r2, [r3, #12]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	429a      	cmp	r2, r3
 800b346:	d303      	bcc.n	800b350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	68d9      	ldr	r1, [r3, #12]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b358:	461a      	mov	r2, r3
 800b35a:	6838      	ldr	r0, [r7, #0]
 800b35c:	f002 f9c9 	bl	800d6f2 <memcpy>
	}
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b370:	f001 fd90 	bl	800ce94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b37a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b37c:	e011      	b.n	800b3a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	2b00      	cmp	r3, #0
 800b384:	d012      	beq.n	800b3ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	3324      	adds	r3, #36	; 0x24
 800b38a:	4618      	mov	r0, r3
 800b38c:	f000 fd82 	bl	800be94 <xTaskRemoveFromEventList>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b396:	f000 fe59 	bl	800c04c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	dce9      	bgt.n	800b37e <prvUnlockQueue+0x16>
 800b3aa:	e000      	b.n	800b3ae <prvUnlockQueue+0x46>
					break;
 800b3ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	22ff      	movs	r2, #255	; 0xff
 800b3b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3b6:	f001 fd9d 	bl	800cef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3ba:	f001 fd6b 	bl	800ce94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3c6:	e011      	b.n	800b3ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d012      	beq.n	800b3f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	3310      	adds	r3, #16
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 fd5d 	bl	800be94 <xTaskRemoveFromEventList>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3e0:	f000 fe34 	bl	800c04c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3e4:	7bbb      	ldrb	r3, [r7, #14]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	dce9      	bgt.n	800b3c8 <prvUnlockQueue+0x60>
 800b3f4:	e000      	b.n	800b3f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	22ff      	movs	r2, #255	; 0xff
 800b3fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b400:	f001 fd78 	bl	800cef4 <vPortExitCritical>
}
 800b404:	bf00      	nop
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b414:	f001 fd3e 	bl	800ce94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b420:	2301      	movs	r3, #1
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e001      	b.n	800b42a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b426:	2300      	movs	r3, #0
 800b428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b42a:	f001 fd63 	bl	800cef4 <vPortExitCritical>

	return xReturn;
 800b42e:	68fb      	ldr	r3, [r7, #12]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b440:	f001 fd28 	bl	800ce94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d102      	bne.n	800b456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b450:	2301      	movs	r3, #1
 800b452:	60fb      	str	r3, [r7, #12]
 800b454:	e001      	b.n	800b45a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b45a:	f001 fd4b 	bl	800cef4 <vPortExitCritical>

	return xReturn;
 800b45e:	68fb      	ldr	r3, [r7, #12]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
 800b476:	e014      	b.n	800b4a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b478:	4a0f      	ldr	r2, [pc, #60]	; (800b4b8 <vQueueAddToRegistry+0x50>)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10b      	bne.n	800b49c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b484:	490c      	ldr	r1, [pc, #48]	; (800b4b8 <vQueueAddToRegistry+0x50>)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b48e:	4a0a      	ldr	r2, [pc, #40]	; (800b4b8 <vQueueAddToRegistry+0x50>)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	00db      	lsls	r3, r3, #3
 800b494:	4413      	add	r3, r2
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b49a:	e006      	b.n	800b4aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	60fb      	str	r3, [r7, #12]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b07      	cmp	r3, #7
 800b4a6:	d9e7      	bls.n	800b478 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b4a8:	bf00      	nop
 800b4aa:	bf00      	nop
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	20006364 	.word	0x20006364

0800b4bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b4cc:	f001 fce2 	bl	800ce94 <vPortEnterCritical>
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4d6:	b25b      	sxtb	r3, r3
 800b4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4dc:	d103      	bne.n	800b4e6 <vQueueWaitForMessageRestricted+0x2a>
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4ec:	b25b      	sxtb	r3, r3
 800b4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f2:	d103      	bne.n	800b4fc <vQueueWaitForMessageRestricted+0x40>
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4fc:	f001 fcfa 	bl	800cef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b504:	2b00      	cmp	r3, #0
 800b506:	d106      	bne.n	800b516 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	3324      	adds	r3, #36	; 0x24
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	68b9      	ldr	r1, [r7, #8]
 800b510:	4618      	mov	r0, r3
 800b512:	f000 fc93 	bl	800be3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b516:	6978      	ldr	r0, [r7, #20]
 800b518:	f7ff ff26 	bl	800b368 <prvUnlockQueue>
	}
 800b51c:	bf00      	nop
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b524:	b580      	push	{r7, lr}
 800b526:	b08e      	sub	sp, #56	; 0x38
 800b528:	af04      	add	r7, sp, #16
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
 800b530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10a      	bne.n	800b54e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	623b      	str	r3, [r7, #32]
}
 800b54a:	bf00      	nop
 800b54c:	e7fe      	b.n	800b54c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10a      	bne.n	800b56a <xTaskCreateStatic+0x46>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	61fb      	str	r3, [r7, #28]
}
 800b566:	bf00      	nop
 800b568:	e7fe      	b.n	800b568 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b56a:	23c0      	movs	r3, #192	; 0xc0
 800b56c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	2bc0      	cmp	r3, #192	; 0xc0
 800b572:	d00a      	beq.n	800b58a <xTaskCreateStatic+0x66>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	61bb      	str	r3, [r7, #24]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b58a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d01e      	beq.n	800b5d0 <xTaskCreateStatic+0xac>
 800b592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b594:	2b00      	cmp	r3, #0
 800b596:	d01b      	beq.n	800b5d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	9303      	str	r3, [sp, #12]
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b0:	9302      	str	r3, [sp, #8]
 800b5b2:	f107 0314 	add.w	r3, r7, #20
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	68b9      	ldr	r1, [r7, #8]
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f000 f850 	bl	800b668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5ca:	f000 f8f7 	bl	800b7bc <prvAddNewTaskToReadyList>
 800b5ce:	e001      	b.n	800b5d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5d4:	697b      	ldr	r3, [r7, #20]
	}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3728      	adds	r7, #40	; 0x28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b08c      	sub	sp, #48	; 0x30
 800b5e2:	af04      	add	r7, sp, #16
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	603b      	str	r3, [r7, #0]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5ee:	88fb      	ldrh	r3, [r7, #6]
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f001 fd70 	bl	800d0d8 <pvPortMalloc>
 800b5f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00e      	beq.n	800b61e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b600:	20c0      	movs	r0, #192	; 0xc0
 800b602:	f001 fd69 	bl	800d0d8 <pvPortMalloc>
 800b606:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d003      	beq.n	800b616 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	631a      	str	r2, [r3, #48]	; 0x30
 800b614:	e005      	b.n	800b622 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b616:	6978      	ldr	r0, [r7, #20]
 800b618:	f001 fe2a 	bl	800d270 <vPortFree>
 800b61c:	e001      	b.n	800b622 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b61e:	2300      	movs	r3, #0
 800b620:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d017      	beq.n	800b658 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b630:	88fa      	ldrh	r2, [r7, #6]
 800b632:	2300      	movs	r3, #0
 800b634:	9303      	str	r3, [sp, #12]
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	9302      	str	r3, [sp, #8]
 800b63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	68b9      	ldr	r1, [r7, #8]
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 f80e 	bl	800b668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b64c:	69f8      	ldr	r0, [r7, #28]
 800b64e:	f000 f8b5 	bl	800b7bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b652:	2301      	movs	r3, #1
 800b654:	61bb      	str	r3, [r7, #24]
 800b656:	e002      	b.n	800b65e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b658:	f04f 33ff 	mov.w	r3, #4294967295
 800b65c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b65e:	69bb      	ldr	r3, [r7, #24]
	}
 800b660:	4618      	mov	r0, r3
 800b662:	3720      	adds	r7, #32
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b088      	sub	sp, #32
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	461a      	mov	r2, r3
 800b680:	21a5      	movs	r1, #165	; 0xa5
 800b682:	f002 f844 	bl	800d70e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b690:	3b01      	subs	r3, #1
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4413      	add	r3, r2
 800b696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	f023 0307 	bic.w	r3, r3, #7
 800b69e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	f003 0307 	and.w	r3, r3, #7
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	617b      	str	r3, [r7, #20]
}
 800b6bc:	bf00      	nop
 800b6be:	e7fe      	b.n	800b6be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d01f      	beq.n	800b706 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	61fb      	str	r3, [r7, #28]
 800b6ca:	e012      	b.n	800b6f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	7819      	ldrb	r1, [r3, #0]
 800b6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	4413      	add	r3, r2
 800b6da:	3334      	adds	r3, #52	; 0x34
 800b6dc:	460a      	mov	r2, r1
 800b6de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	61fb      	str	r3, [r7, #28]
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	2b0f      	cmp	r3, #15
 800b6f6:	d9e9      	bls.n	800b6cc <prvInitialiseNewTask+0x64>
 800b6f8:	e000      	b.n	800b6fc <prvInitialiseNewTask+0x94>
			{
				break;
 800b6fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b704:	e003      	b.n	800b70e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b710:	2b37      	cmp	r3, #55	; 0x37
 800b712:	d901      	bls.n	800b718 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b714:	2337      	movs	r3, #55	; 0x37
 800b716:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b71c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b722:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	2200      	movs	r2, #0
 800b728:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	3304      	adds	r3, #4
 800b72e:	4618      	mov	r0, r3
 800b730:	f7ff f978 	bl	800aa24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	3318      	adds	r3, #24
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff f973 	bl	800aa24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b752:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	2200      	movs	r2, #0
 800b758:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	2200      	movs	r2, #0
 800b75e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	2200      	movs	r2, #0
 800b766:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	3358      	adds	r3, #88	; 0x58
 800b76e:	2260      	movs	r2, #96	; 0x60
 800b770:	2100      	movs	r1, #0
 800b772:	4618      	mov	r0, r3
 800b774:	f001 ffcb 	bl	800d70e <memset>
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	4a0d      	ldr	r2, [pc, #52]	; (800b7b0 <prvInitialiseNewTask+0x148>)
 800b77c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	4a0c      	ldr	r2, [pc, #48]	; (800b7b4 <prvInitialiseNewTask+0x14c>)
 800b782:	661a      	str	r2, [r3, #96]	; 0x60
 800b784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b786:	4a0c      	ldr	r2, [pc, #48]	; (800b7b8 <prvInitialiseNewTask+0x150>)
 800b788:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	68f9      	ldr	r1, [r7, #12]
 800b78e:	69b8      	ldr	r0, [r7, #24]
 800b790:	f001 fa54 	bl	800cc3c <pxPortInitialiseStack>
 800b794:	4602      	mov	r2, r0
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7a6:	bf00      	nop
 800b7a8:	3720      	adds	r7, #32
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	080138b4 	.word	0x080138b4
 800b7b4:	080138d4 	.word	0x080138d4
 800b7b8:	08013894 	.word	0x08013894

0800b7bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7c4:	f001 fb66 	bl	800ce94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7c8:	4b2d      	ldr	r3, [pc, #180]	; (800b880 <prvAddNewTaskToReadyList+0xc4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	4a2c      	ldr	r2, [pc, #176]	; (800b880 <prvAddNewTaskToReadyList+0xc4>)
 800b7d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7d2:	4b2c      	ldr	r3, [pc, #176]	; (800b884 <prvAddNewTaskToReadyList+0xc8>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d109      	bne.n	800b7ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7da:	4a2a      	ldr	r2, [pc, #168]	; (800b884 <prvAddNewTaskToReadyList+0xc8>)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7e0:	4b27      	ldr	r3, [pc, #156]	; (800b880 <prvAddNewTaskToReadyList+0xc4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d110      	bne.n	800b80a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7e8:	f000 fc54 	bl	800c094 <prvInitialiseTaskLists>
 800b7ec:	e00d      	b.n	800b80a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7ee:	4b26      	ldr	r3, [pc, #152]	; (800b888 <prvAddNewTaskToReadyList+0xcc>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d109      	bne.n	800b80a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7f6:	4b23      	ldr	r3, [pc, #140]	; (800b884 <prvAddNewTaskToReadyList+0xc8>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	429a      	cmp	r2, r3
 800b802:	d802      	bhi.n	800b80a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b804:	4a1f      	ldr	r2, [pc, #124]	; (800b884 <prvAddNewTaskToReadyList+0xc8>)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b80a:	4b20      	ldr	r3, [pc, #128]	; (800b88c <prvAddNewTaskToReadyList+0xd0>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3301      	adds	r3, #1
 800b810:	4a1e      	ldr	r2, [pc, #120]	; (800b88c <prvAddNewTaskToReadyList+0xd0>)
 800b812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b814:	4b1d      	ldr	r3, [pc, #116]	; (800b88c <prvAddNewTaskToReadyList+0xd0>)
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b820:	4b1b      	ldr	r3, [pc, #108]	; (800b890 <prvAddNewTaskToReadyList+0xd4>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	429a      	cmp	r2, r3
 800b826:	d903      	bls.n	800b830 <prvAddNewTaskToReadyList+0x74>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	4a18      	ldr	r2, [pc, #96]	; (800b890 <prvAddNewTaskToReadyList+0xd4>)
 800b82e:	6013      	str	r3, [r2, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b834:	4613      	mov	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4a15      	ldr	r2, [pc, #84]	; (800b894 <prvAddNewTaskToReadyList+0xd8>)
 800b83e:	441a      	add	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	3304      	adds	r3, #4
 800b844:	4619      	mov	r1, r3
 800b846:	4610      	mov	r0, r2
 800b848:	f7ff f8f9 	bl	800aa3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b84c:	f001 fb52 	bl	800cef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b850:	4b0d      	ldr	r3, [pc, #52]	; (800b888 <prvAddNewTaskToReadyList+0xcc>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00e      	beq.n	800b876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b858:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <prvAddNewTaskToReadyList+0xc8>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b862:	429a      	cmp	r2, r3
 800b864:	d207      	bcs.n	800b876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b866:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <prvAddNewTaskToReadyList+0xdc>)
 800b868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b876:	bf00      	nop
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	200038c4 	.word	0x200038c4
 800b884:	200033f0 	.word	0x200033f0
 800b888:	200038d0 	.word	0x200038d0
 800b88c:	200038e0 	.word	0x200038e0
 800b890:	200038cc 	.word	0x200038cc
 800b894:	200033f4 	.word	0x200033f4
 800b898:	e000ed04 	.word	0xe000ed04

0800b89c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d017      	beq.n	800b8de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8ae:	4b13      	ldr	r3, [pc, #76]	; (800b8fc <vTaskDelay+0x60>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00a      	beq.n	800b8cc <vTaskDelay+0x30>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	60bb      	str	r3, [r7, #8]
}
 800b8c8:	bf00      	nop
 800b8ca:	e7fe      	b.n	800b8ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8cc:	f000 f88c 	bl	800b9e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fd2c 	bl	800c330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8d8:	f000 f894 	bl	800ba04 <xTaskResumeAll>
 800b8dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d107      	bne.n	800b8f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8e4:	4b06      	ldr	r3, [pc, #24]	; (800b900 <vTaskDelay+0x64>)
 800b8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8f4:	bf00      	nop
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	200038ec 	.word	0x200038ec
 800b900:	e000ed04 	.word	0xe000ed04

0800b904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08a      	sub	sp, #40	; 0x28
 800b908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b912:	463a      	mov	r2, r7
 800b914:	1d39      	adds	r1, r7, #4
 800b916:	f107 0308 	add.w	r3, r7, #8
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff f82e 	bl	800a97c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	9202      	str	r2, [sp, #8]
 800b928:	9301      	str	r3, [sp, #4]
 800b92a:	2300      	movs	r3, #0
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	2300      	movs	r3, #0
 800b930:	460a      	mov	r2, r1
 800b932:	4925      	ldr	r1, [pc, #148]	; (800b9c8 <vTaskStartScheduler+0xc4>)
 800b934:	4825      	ldr	r0, [pc, #148]	; (800b9cc <vTaskStartScheduler+0xc8>)
 800b936:	f7ff fdf5 	bl	800b524 <xTaskCreateStatic>
 800b93a:	4603      	mov	r3, r0
 800b93c:	4a24      	ldr	r2, [pc, #144]	; (800b9d0 <vTaskStartScheduler+0xcc>)
 800b93e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b940:	4b23      	ldr	r3, [pc, #140]	; (800b9d0 <vTaskStartScheduler+0xcc>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b948:	2301      	movs	r3, #1
 800b94a:	617b      	str	r3, [r7, #20]
 800b94c:	e001      	b.n	800b952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b94e:	2300      	movs	r3, #0
 800b950:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d102      	bne.n	800b95e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b958:	f000 fd3e 	bl	800c3d8 <xTimerCreateTimerTask>
 800b95c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d11d      	bne.n	800b9a0 <vTaskStartScheduler+0x9c>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	613b      	str	r3, [r7, #16]
}
 800b976:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b978:	4b16      	ldr	r3, [pc, #88]	; (800b9d4 <vTaskStartScheduler+0xd0>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3358      	adds	r3, #88	; 0x58
 800b97e:	4a16      	ldr	r2, [pc, #88]	; (800b9d8 <vTaskStartScheduler+0xd4>)
 800b980:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b982:	4b16      	ldr	r3, [pc, #88]	; (800b9dc <vTaskStartScheduler+0xd8>)
 800b984:	f04f 32ff 	mov.w	r2, #4294967295
 800b988:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b98a:	4b15      	ldr	r3, [pc, #84]	; (800b9e0 <vTaskStartScheduler+0xdc>)
 800b98c:	2201      	movs	r2, #1
 800b98e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b990:	4b14      	ldr	r3, [pc, #80]	; (800b9e4 <vTaskStartScheduler+0xe0>)
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b996:	f7f5 fb29 	bl	8000fec <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b99a:	f001 f9d9 	bl	800cd50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b99e:	e00e      	b.n	800b9be <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a6:	d10a      	bne.n	800b9be <vTaskStartScheduler+0xba>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	60fb      	str	r3, [r7, #12]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <vTaskStartScheduler+0xb8>
}
 800b9be:	bf00      	nop
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	08013800 	.word	0x08013800
 800b9cc:	0800c065 	.word	0x0800c065
 800b9d0:	200038e8 	.word	0x200038e8
 800b9d4:	200033f0 	.word	0x200033f0
 800b9d8:	20000040 	.word	0x20000040
 800b9dc:	200038e4 	.word	0x200038e4
 800b9e0:	200038d0 	.word	0x200038d0
 800b9e4:	200038c8 	.word	0x200038c8

0800b9e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9ec:	4b04      	ldr	r3, [pc, #16]	; (800ba00 <vTaskSuspendAll+0x18>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	4a03      	ldr	r2, [pc, #12]	; (800ba00 <vTaskSuspendAll+0x18>)
 800b9f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9f6:	bf00      	nop
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	200038ec 	.word	0x200038ec

0800ba04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba12:	4b42      	ldr	r3, [pc, #264]	; (800bb1c <xTaskResumeAll+0x118>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10a      	bne.n	800ba30 <xTaskResumeAll+0x2c>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	603b      	str	r3, [r7, #0]
}
 800ba2c:	bf00      	nop
 800ba2e:	e7fe      	b.n	800ba2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba30:	f001 fa30 	bl	800ce94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba34:	4b39      	ldr	r3, [pc, #228]	; (800bb1c <xTaskResumeAll+0x118>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	4a38      	ldr	r2, [pc, #224]	; (800bb1c <xTaskResumeAll+0x118>)
 800ba3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba3e:	4b37      	ldr	r3, [pc, #220]	; (800bb1c <xTaskResumeAll+0x118>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d162      	bne.n	800bb0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba46:	4b36      	ldr	r3, [pc, #216]	; (800bb20 <xTaskResumeAll+0x11c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d05e      	beq.n	800bb0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba4e:	e02f      	b.n	800bab0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba50:	4b34      	ldr	r3, [pc, #208]	; (800bb24 <xTaskResumeAll+0x120>)
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3318      	adds	r3, #24
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff f84b 	bl	800aaf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3304      	adds	r3, #4
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff f846 	bl	800aaf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba70:	4b2d      	ldr	r3, [pc, #180]	; (800bb28 <xTaskResumeAll+0x124>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d903      	bls.n	800ba80 <xTaskResumeAll+0x7c>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	4a2a      	ldr	r2, [pc, #168]	; (800bb28 <xTaskResumeAll+0x124>)
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4a27      	ldr	r2, [pc, #156]	; (800bb2c <xTaskResumeAll+0x128>)
 800ba8e:	441a      	add	r2, r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3304      	adds	r3, #4
 800ba94:	4619      	mov	r1, r3
 800ba96:	4610      	mov	r0, r2
 800ba98:	f7fe ffd1 	bl	800aa3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa0:	4b23      	ldr	r3, [pc, #140]	; (800bb30 <xTaskResumeAll+0x12c>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d302      	bcc.n	800bab0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800baaa:	4b22      	ldr	r3, [pc, #136]	; (800bb34 <xTaskResumeAll+0x130>)
 800baac:	2201      	movs	r2, #1
 800baae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bab0:	4b1c      	ldr	r3, [pc, #112]	; (800bb24 <xTaskResumeAll+0x120>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1cb      	bne.n	800ba50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800babe:	f000 fb8b 	bl	800c1d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bac2:	4b1d      	ldr	r3, [pc, #116]	; (800bb38 <xTaskResumeAll+0x134>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d010      	beq.n	800baf0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bace:	f000 f847 	bl	800bb60 <xTaskIncrementTick>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bad8:	4b16      	ldr	r3, [pc, #88]	; (800bb34 <xTaskResumeAll+0x130>)
 800bada:	2201      	movs	r2, #1
 800badc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3b01      	subs	r3, #1
 800bae2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1f1      	bne.n	800bace <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800baea:	4b13      	ldr	r3, [pc, #76]	; (800bb38 <xTaskResumeAll+0x134>)
 800baec:	2200      	movs	r2, #0
 800baee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800baf0:	4b10      	ldr	r3, [pc, #64]	; (800bb34 <xTaskResumeAll+0x130>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d009      	beq.n	800bb0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800baf8:	2301      	movs	r3, #1
 800bafa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bafc:	4b0f      	ldr	r3, [pc, #60]	; (800bb3c <xTaskResumeAll+0x138>)
 800bafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb0c:	f001 f9f2 	bl	800cef4 <vPortExitCritical>

	return xAlreadyYielded;
 800bb10:	68bb      	ldr	r3, [r7, #8]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	200038ec 	.word	0x200038ec
 800bb20:	200038c4 	.word	0x200038c4
 800bb24:	20003884 	.word	0x20003884
 800bb28:	200038cc 	.word	0x200038cc
 800bb2c:	200033f4 	.word	0x200033f4
 800bb30:	200033f0 	.word	0x200033f0
 800bb34:	200038d8 	.word	0x200038d8
 800bb38:	200038d4 	.word	0x200038d4
 800bb3c:	e000ed04 	.word	0xe000ed04

0800bb40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb46:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <xTaskGetTickCount+0x1c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb4c:	687b      	ldr	r3, [r7, #4]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	200038c8 	.word	0x200038c8

0800bb60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb6a:	4b4f      	ldr	r3, [pc, #316]	; (800bca8 <xTaskIncrementTick+0x148>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f040 808f 	bne.w	800bc92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb74:	4b4d      	ldr	r3, [pc, #308]	; (800bcac <xTaskIncrementTick+0x14c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb7c:	4a4b      	ldr	r2, [pc, #300]	; (800bcac <xTaskIncrementTick+0x14c>)
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d120      	bne.n	800bbca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb88:	4b49      	ldr	r3, [pc, #292]	; (800bcb0 <xTaskIncrementTick+0x150>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	603b      	str	r3, [r7, #0]
}
 800bba4:	bf00      	nop
 800bba6:	e7fe      	b.n	800bba6 <xTaskIncrementTick+0x46>
 800bba8:	4b41      	ldr	r3, [pc, #260]	; (800bcb0 <xTaskIncrementTick+0x150>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	60fb      	str	r3, [r7, #12]
 800bbae:	4b41      	ldr	r3, [pc, #260]	; (800bcb4 <xTaskIncrementTick+0x154>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a3f      	ldr	r2, [pc, #252]	; (800bcb0 <xTaskIncrementTick+0x150>)
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	4a3f      	ldr	r2, [pc, #252]	; (800bcb4 <xTaskIncrementTick+0x154>)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	4b3e      	ldr	r3, [pc, #248]	; (800bcb8 <xTaskIncrementTick+0x158>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	4a3d      	ldr	r2, [pc, #244]	; (800bcb8 <xTaskIncrementTick+0x158>)
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	f000 fb07 	bl	800c1d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbca:	4b3c      	ldr	r3, [pc, #240]	; (800bcbc <xTaskIncrementTick+0x15c>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d349      	bcc.n	800bc68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbd4:	4b36      	ldr	r3, [pc, #216]	; (800bcb0 <xTaskIncrementTick+0x150>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d104      	bne.n	800bbe8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbde:	4b37      	ldr	r3, [pc, #220]	; (800bcbc <xTaskIncrementTick+0x15c>)
 800bbe0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe4:	601a      	str	r2, [r3, #0]
					break;
 800bbe6:	e03f      	b.n	800bc68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbe8:	4b31      	ldr	r3, [pc, #196]	; (800bcb0 <xTaskIncrementTick+0x150>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d203      	bcs.n	800bc08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc00:	4a2e      	ldr	r2, [pc, #184]	; (800bcbc <xTaskIncrementTick+0x15c>)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc06:	e02f      	b.n	800bc68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fe ff73 	bl	800aaf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d004      	beq.n	800bc24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	3318      	adds	r3, #24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe ff6a 	bl	800aaf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc28:	4b25      	ldr	r3, [pc, #148]	; (800bcc0 <xTaskIncrementTick+0x160>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d903      	bls.n	800bc38 <xTaskIncrementTick+0xd8>
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc34:	4a22      	ldr	r2, [pc, #136]	; (800bcc0 <xTaskIncrementTick+0x160>)
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4a1f      	ldr	r2, [pc, #124]	; (800bcc4 <xTaskIncrementTick+0x164>)
 800bc46:	441a      	add	r2, r3
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4610      	mov	r0, r2
 800bc50:	f7fe fef5 	bl	800aa3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc58:	4b1b      	ldr	r3, [pc, #108]	; (800bcc8 <xTaskIncrementTick+0x168>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d3b8      	bcc.n	800bbd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc62:	2301      	movs	r3, #1
 800bc64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc66:	e7b5      	b.n	800bbd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc68:	4b17      	ldr	r3, [pc, #92]	; (800bcc8 <xTaskIncrementTick+0x168>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc6e:	4915      	ldr	r1, [pc, #84]	; (800bcc4 <xTaskIncrementTick+0x164>)
 800bc70:	4613      	mov	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	440b      	add	r3, r1
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d901      	bls.n	800bc84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc80:	2301      	movs	r3, #1
 800bc82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc84:	4b11      	ldr	r3, [pc, #68]	; (800bccc <xTaskIncrementTick+0x16c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d007      	beq.n	800bc9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	617b      	str	r3, [r7, #20]
 800bc90:	e004      	b.n	800bc9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc92:	4b0f      	ldr	r3, [pc, #60]	; (800bcd0 <xTaskIncrementTick+0x170>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3301      	adds	r3, #1
 800bc98:	4a0d      	ldr	r2, [pc, #52]	; (800bcd0 <xTaskIncrementTick+0x170>)
 800bc9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc9c:	697b      	ldr	r3, [r7, #20]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	200038ec 	.word	0x200038ec
 800bcac:	200038c8 	.word	0x200038c8
 800bcb0:	2000387c 	.word	0x2000387c
 800bcb4:	20003880 	.word	0x20003880
 800bcb8:	200038dc 	.word	0x200038dc
 800bcbc:	200038e4 	.word	0x200038e4
 800bcc0:	200038cc 	.word	0x200038cc
 800bcc4:	200033f4 	.word	0x200033f4
 800bcc8:	200033f0 	.word	0x200033f0
 800bccc:	200038d8 	.word	0x200038d8
 800bcd0:	200038d4 	.word	0x200038d4

0800bcd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcda:	4b3e      	ldr	r3, [pc, #248]	; (800bdd4 <vTaskSwitchContext+0x100>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d003      	beq.n	800bcea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bce2:	4b3d      	ldr	r3, [pc, #244]	; (800bdd8 <vTaskSwitchContext+0x104>)
 800bce4:	2201      	movs	r2, #1
 800bce6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bce8:	e070      	b.n	800bdcc <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800bcea:	4b3b      	ldr	r3, [pc, #236]	; (800bdd8 <vTaskSwitchContext+0x104>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bcf0:	f7f5 f983 	bl	8000ffa <getRunTimeCounterValue>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	4a39      	ldr	r2, [pc, #228]	; (800bddc <vTaskSwitchContext+0x108>)
 800bcf8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bcfa:	4b38      	ldr	r3, [pc, #224]	; (800bddc <vTaskSwitchContext+0x108>)
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	4b38      	ldr	r3, [pc, #224]	; (800bde0 <vTaskSwitchContext+0x10c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d909      	bls.n	800bd1a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bd06:	4b37      	ldr	r3, [pc, #220]	; (800bde4 <vTaskSwitchContext+0x110>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bd0c:	4a33      	ldr	r2, [pc, #204]	; (800bddc <vTaskSwitchContext+0x108>)
 800bd0e:	6810      	ldr	r0, [r2, #0]
 800bd10:	4a33      	ldr	r2, [pc, #204]	; (800bde0 <vTaskSwitchContext+0x10c>)
 800bd12:	6812      	ldr	r2, [r2, #0]
 800bd14:	1a82      	subs	r2, r0, r2
 800bd16:	440a      	add	r2, r1
 800bd18:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bd1a:	4b30      	ldr	r3, [pc, #192]	; (800bddc <vTaskSwitchContext+0x108>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a30      	ldr	r2, [pc, #192]	; (800bde0 <vTaskSwitchContext+0x10c>)
 800bd20:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bd22:	4b30      	ldr	r3, [pc, #192]	; (800bde4 <vTaskSwitchContext+0x110>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	4b2e      	ldr	r3, [pc, #184]	; (800bde4 <vTaskSwitchContext+0x110>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d808      	bhi.n	800bd44 <vTaskSwitchContext+0x70>
 800bd32:	4b2c      	ldr	r3, [pc, #176]	; (800bde4 <vTaskSwitchContext+0x110>)
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	4b2b      	ldr	r3, [pc, #172]	; (800bde4 <vTaskSwitchContext+0x110>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3334      	adds	r3, #52	; 0x34
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4610      	mov	r0, r2
 800bd40:	f7f5 f963 	bl	800100a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd44:	4b28      	ldr	r3, [pc, #160]	; (800bde8 <vTaskSwitchContext+0x114>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	60fb      	str	r3, [r7, #12]
 800bd4a:	e010      	b.n	800bd6e <vTaskSwitchContext+0x9a>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10a      	bne.n	800bd68 <vTaskSwitchContext+0x94>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	607b      	str	r3, [r7, #4]
}
 800bd64:	bf00      	nop
 800bd66:	e7fe      	b.n	800bd66 <vTaskSwitchContext+0x92>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	60fb      	str	r3, [r7, #12]
 800bd6e:	491f      	ldr	r1, [pc, #124]	; (800bdec <vTaskSwitchContext+0x118>)
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	440b      	add	r3, r1
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d0e4      	beq.n	800bd4c <vTaskSwitchContext+0x78>
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	4613      	mov	r3, r2
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4413      	add	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4a17      	ldr	r2, [pc, #92]	; (800bdec <vTaskSwitchContext+0x118>)
 800bd8e:	4413      	add	r3, r2
 800bd90:	60bb      	str	r3, [r7, #8]
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	685a      	ldr	r2, [r3, #4]
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	605a      	str	r2, [r3, #4]
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	685a      	ldr	r2, [r3, #4]
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	3308      	adds	r3, #8
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d104      	bne.n	800bdb2 <vTaskSwitchContext+0xde>
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	605a      	str	r2, [r3, #4]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	4a0a      	ldr	r2, [pc, #40]	; (800bde4 <vTaskSwitchContext+0x110>)
 800bdba:	6013      	str	r3, [r2, #0]
 800bdbc:	4a0a      	ldr	r2, [pc, #40]	; (800bde8 <vTaskSwitchContext+0x114>)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bdc2:	4b08      	ldr	r3, [pc, #32]	; (800bde4 <vTaskSwitchContext+0x110>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	3358      	adds	r3, #88	; 0x58
 800bdc8:	4a09      	ldr	r2, [pc, #36]	; (800bdf0 <vTaskSwitchContext+0x11c>)
 800bdca:	6013      	str	r3, [r2, #0]
}
 800bdcc:	bf00      	nop
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	200038ec 	.word	0x200038ec
 800bdd8:	200038d8 	.word	0x200038d8
 800bddc:	200038f4 	.word	0x200038f4
 800bde0:	200038f0 	.word	0x200038f0
 800bde4:	200033f0 	.word	0x200033f0
 800bde8:	200038cc 	.word	0x200038cc
 800bdec:	200033f4 	.word	0x200033f4
 800bdf0:	20000040 	.word	0x20000040

0800bdf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10a      	bne.n	800be1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	60fb      	str	r3, [r7, #12]
}
 800be16:	bf00      	nop
 800be18:	e7fe      	b.n	800be18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be1a:	4b07      	ldr	r3, [pc, #28]	; (800be38 <vTaskPlaceOnEventList+0x44>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	3318      	adds	r3, #24
 800be20:	4619      	mov	r1, r3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7fe fe2f 	bl	800aa86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be28:	2101      	movs	r1, #1
 800be2a:	6838      	ldr	r0, [r7, #0]
 800be2c:	f000 fa80 	bl	800c330 <prvAddCurrentTaskToDelayedList>
}
 800be30:	bf00      	nop
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	200033f0 	.word	0x200033f0

0800be3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10a      	bne.n	800be64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	617b      	str	r3, [r7, #20]
}
 800be60:	bf00      	nop
 800be62:	e7fe      	b.n	800be62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be64:	4b0a      	ldr	r3, [pc, #40]	; (800be90 <vTaskPlaceOnEventListRestricted+0x54>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3318      	adds	r3, #24
 800be6a:	4619      	mov	r1, r3
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f7fe fde6 	bl	800aa3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d002      	beq.n	800be7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be78:	f04f 33ff 	mov.w	r3, #4294967295
 800be7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be7e:	6879      	ldr	r1, [r7, #4]
 800be80:	68b8      	ldr	r0, [r7, #8]
 800be82:	f000 fa55 	bl	800c330 <prvAddCurrentTaskToDelayedList>
	}
 800be86:	bf00      	nop
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	200033f0 	.word	0x200033f0

0800be94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b086      	sub	sp, #24
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10a      	bne.n	800bec0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	60fb      	str	r3, [r7, #12]
}
 800bebc:	bf00      	nop
 800bebe:	e7fe      	b.n	800bebe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	3318      	adds	r3, #24
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fe fe17 	bl	800aaf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beca:	4b1e      	ldr	r3, [pc, #120]	; (800bf44 <xTaskRemoveFromEventList+0xb0>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d11d      	bne.n	800bf0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	3304      	adds	r3, #4
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fe fe0e 	bl	800aaf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee0:	4b19      	ldr	r3, [pc, #100]	; (800bf48 <xTaskRemoveFromEventList+0xb4>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d903      	bls.n	800bef0 <xTaskRemoveFromEventList+0x5c>
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	4a16      	ldr	r2, [pc, #88]	; (800bf48 <xTaskRemoveFromEventList+0xb4>)
 800beee:	6013      	str	r3, [r2, #0]
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef4:	4613      	mov	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4a13      	ldr	r2, [pc, #76]	; (800bf4c <xTaskRemoveFromEventList+0xb8>)
 800befe:	441a      	add	r2, r3
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	3304      	adds	r3, #4
 800bf04:	4619      	mov	r1, r3
 800bf06:	4610      	mov	r0, r2
 800bf08:	f7fe fd99 	bl	800aa3e <vListInsertEnd>
 800bf0c:	e005      	b.n	800bf1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	3318      	adds	r3, #24
 800bf12:	4619      	mov	r1, r3
 800bf14:	480e      	ldr	r0, [pc, #56]	; (800bf50 <xTaskRemoveFromEventList+0xbc>)
 800bf16:	f7fe fd92 	bl	800aa3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf1e:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <xTaskRemoveFromEventList+0xc0>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d905      	bls.n	800bf34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf2c:	4b0a      	ldr	r3, [pc, #40]	; (800bf58 <xTaskRemoveFromEventList+0xc4>)
 800bf2e:	2201      	movs	r2, #1
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	e001      	b.n	800bf38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf34:	2300      	movs	r3, #0
 800bf36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf38:	697b      	ldr	r3, [r7, #20]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	200038ec 	.word	0x200038ec
 800bf48:	200038cc 	.word	0x200038cc
 800bf4c:	200033f4 	.word	0x200033f4
 800bf50:	20003884 	.word	0x20003884
 800bf54:	200033f0 	.word	0x200033f0
 800bf58:	200038d8 	.word	0x200038d8

0800bf5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf64:	4b06      	ldr	r3, [pc, #24]	; (800bf80 <vTaskInternalSetTimeOutState+0x24>)
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf6c:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <vTaskInternalSetTimeOutState+0x28>)
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	605a      	str	r2, [r3, #4]
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	200038dc 	.word	0x200038dc
 800bf84:	200038c8 	.word	0x200038c8

0800bf88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b088      	sub	sp, #32
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10a      	bne.n	800bfae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	613b      	str	r3, [r7, #16]
}
 800bfaa:	bf00      	nop
 800bfac:	e7fe      	b.n	800bfac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d10a      	bne.n	800bfca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	60fb      	str	r3, [r7, #12]
}
 800bfc6:	bf00      	nop
 800bfc8:	e7fe      	b.n	800bfc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bfca:	f000 ff63 	bl	800ce94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bfce:	4b1d      	ldr	r3, [pc, #116]	; (800c044 <xTaskCheckForTimeOut+0xbc>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe6:	d102      	bne.n	800bfee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	61fb      	str	r3, [r7, #28]
 800bfec:	e023      	b.n	800c036 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	4b15      	ldr	r3, [pc, #84]	; (800c048 <xTaskCheckForTimeOut+0xc0>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d007      	beq.n	800c00a <xTaskCheckForTimeOut+0x82>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	429a      	cmp	r2, r3
 800c002:	d302      	bcc.n	800c00a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c004:	2301      	movs	r3, #1
 800c006:	61fb      	str	r3, [r7, #28]
 800c008:	e015      	b.n	800c036 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	429a      	cmp	r2, r3
 800c012:	d20b      	bcs.n	800c02c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	1ad2      	subs	r2, r2, r3
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f7ff ff9b 	bl	800bf5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c026:	2300      	movs	r3, #0
 800c028:	61fb      	str	r3, [r7, #28]
 800c02a:	e004      	b.n	800c036 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	2200      	movs	r2, #0
 800c030:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c032:	2301      	movs	r3, #1
 800c034:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c036:	f000 ff5d 	bl	800cef4 <vPortExitCritical>

	return xReturn;
 800c03a:	69fb      	ldr	r3, [r7, #28]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3720      	adds	r7, #32
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	200038c8 	.word	0x200038c8
 800c048:	200038dc 	.word	0x200038dc

0800c04c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c04c:	b480      	push	{r7}
 800c04e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c050:	4b03      	ldr	r3, [pc, #12]	; (800c060 <vTaskMissedYield+0x14>)
 800c052:	2201      	movs	r2, #1
 800c054:	601a      	str	r2, [r3, #0]
}
 800c056:	bf00      	nop
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	200038d8 	.word	0x200038d8

0800c064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c06c:	f000 f852 	bl	800c114 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c070:	4b06      	ldr	r3, [pc, #24]	; (800c08c <prvIdleTask+0x28>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d9f9      	bls.n	800c06c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c078:	4b05      	ldr	r3, [pc, #20]	; (800c090 <prvIdleTask+0x2c>)
 800c07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c088:	e7f0      	b.n	800c06c <prvIdleTask+0x8>
 800c08a:	bf00      	nop
 800c08c:	200033f4 	.word	0x200033f4
 800c090:	e000ed04 	.word	0xe000ed04

0800c094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c09a:	2300      	movs	r3, #0
 800c09c:	607b      	str	r3, [r7, #4]
 800c09e:	e00c      	b.n	800c0ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4a12      	ldr	r2, [pc, #72]	; (800c0f4 <prvInitialiseTaskLists+0x60>)
 800c0ac:	4413      	add	r3, r2
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe fc98 	bl	800a9e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	607b      	str	r3, [r7, #4]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b37      	cmp	r3, #55	; 0x37
 800c0be:	d9ef      	bls.n	800c0a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0c0:	480d      	ldr	r0, [pc, #52]	; (800c0f8 <prvInitialiseTaskLists+0x64>)
 800c0c2:	f7fe fc8f 	bl	800a9e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0c6:	480d      	ldr	r0, [pc, #52]	; (800c0fc <prvInitialiseTaskLists+0x68>)
 800c0c8:	f7fe fc8c 	bl	800a9e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c0cc:	480c      	ldr	r0, [pc, #48]	; (800c100 <prvInitialiseTaskLists+0x6c>)
 800c0ce:	f7fe fc89 	bl	800a9e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c0d2:	480c      	ldr	r0, [pc, #48]	; (800c104 <prvInitialiseTaskLists+0x70>)
 800c0d4:	f7fe fc86 	bl	800a9e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c0d8:	480b      	ldr	r0, [pc, #44]	; (800c108 <prvInitialiseTaskLists+0x74>)
 800c0da:	f7fe fc83 	bl	800a9e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c0de:	4b0b      	ldr	r3, [pc, #44]	; (800c10c <prvInitialiseTaskLists+0x78>)
 800c0e0:	4a05      	ldr	r2, [pc, #20]	; (800c0f8 <prvInitialiseTaskLists+0x64>)
 800c0e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c0e4:	4b0a      	ldr	r3, [pc, #40]	; (800c110 <prvInitialiseTaskLists+0x7c>)
 800c0e6:	4a05      	ldr	r2, [pc, #20]	; (800c0fc <prvInitialiseTaskLists+0x68>)
 800c0e8:	601a      	str	r2, [r3, #0]
}
 800c0ea:	bf00      	nop
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	200033f4 	.word	0x200033f4
 800c0f8:	20003854 	.word	0x20003854
 800c0fc:	20003868 	.word	0x20003868
 800c100:	20003884 	.word	0x20003884
 800c104:	20003898 	.word	0x20003898
 800c108:	200038b0 	.word	0x200038b0
 800c10c:	2000387c 	.word	0x2000387c
 800c110:	20003880 	.word	0x20003880

0800c114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c11a:	e019      	b.n	800c150 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c11c:	f000 feba 	bl	800ce94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c120:	4b10      	ldr	r3, [pc, #64]	; (800c164 <prvCheckTasksWaitingTermination+0x50>)
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3304      	adds	r3, #4
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fe fce3 	bl	800aaf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c132:	4b0d      	ldr	r3, [pc, #52]	; (800c168 <prvCheckTasksWaitingTermination+0x54>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	3b01      	subs	r3, #1
 800c138:	4a0b      	ldr	r2, [pc, #44]	; (800c168 <prvCheckTasksWaitingTermination+0x54>)
 800c13a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c13c:	4b0b      	ldr	r3, [pc, #44]	; (800c16c <prvCheckTasksWaitingTermination+0x58>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3b01      	subs	r3, #1
 800c142:	4a0a      	ldr	r2, [pc, #40]	; (800c16c <prvCheckTasksWaitingTermination+0x58>)
 800c144:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c146:	f000 fed5 	bl	800cef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f810 	bl	800c170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c150:	4b06      	ldr	r3, [pc, #24]	; (800c16c <prvCheckTasksWaitingTermination+0x58>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1e1      	bne.n	800c11c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c158:	bf00      	nop
 800c15a:	bf00      	nop
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	20003898 	.word	0x20003898
 800c168:	200038c4 	.word	0x200038c4
 800c16c:	200038ac 	.word	0x200038ac

0800c170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3358      	adds	r3, #88	; 0x58
 800c17c:	4618      	mov	r0, r3
 800c17e:	f002 f9b1 	bl	800e4e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d108      	bne.n	800c19e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c190:	4618      	mov	r0, r3
 800c192:	f001 f86d 	bl	800d270 <vPortFree>
				vPortFree( pxTCB );
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f001 f86a 	bl	800d270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c19c:	e018      	b.n	800c1d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d103      	bne.n	800c1b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f001 f861 	bl	800d270 <vPortFree>
	}
 800c1ae:	e00f      	b.n	800c1d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d00a      	beq.n	800c1d0 <prvDeleteTCB+0x60>
	__asm volatile
 800c1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	60fb      	str	r3, [r7, #12]
}
 800c1cc:	bf00      	nop
 800c1ce:	e7fe      	b.n	800c1ce <prvDeleteTCB+0x5e>
	}
 800c1d0:	bf00      	nop
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1de:	4b0c      	ldr	r3, [pc, #48]	; (800c210 <prvResetNextTaskUnblockTime+0x38>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d104      	bne.n	800c1f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c1e8:	4b0a      	ldr	r3, [pc, #40]	; (800c214 <prvResetNextTaskUnblockTime+0x3c>)
 800c1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c1f0:	e008      	b.n	800c204 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1f2:	4b07      	ldr	r3, [pc, #28]	; (800c210 <prvResetNextTaskUnblockTime+0x38>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	4a04      	ldr	r2, [pc, #16]	; (800c214 <prvResetNextTaskUnblockTime+0x3c>)
 800c202:	6013      	str	r3, [r2, #0]
}
 800c204:	bf00      	nop
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	2000387c 	.word	0x2000387c
 800c214:	200038e4 	.word	0x200038e4

0800c218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c21e:	4b0b      	ldr	r3, [pc, #44]	; (800c24c <xTaskGetSchedulerState+0x34>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d102      	bne.n	800c22c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c226:	2301      	movs	r3, #1
 800c228:	607b      	str	r3, [r7, #4]
 800c22a:	e008      	b.n	800c23e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c22c:	4b08      	ldr	r3, [pc, #32]	; (800c250 <xTaskGetSchedulerState+0x38>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d102      	bne.n	800c23a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c234:	2302      	movs	r3, #2
 800c236:	607b      	str	r3, [r7, #4]
 800c238:	e001      	b.n	800c23e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c23a:	2300      	movs	r3, #0
 800c23c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c23e:	687b      	ldr	r3, [r7, #4]
	}
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	200038d0 	.word	0x200038d0
 800c250:	200038ec 	.word	0x200038ec

0800c254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c254:	b580      	push	{r7, lr}
 800c256:	b086      	sub	sp, #24
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c260:	2300      	movs	r3, #0
 800c262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d056      	beq.n	800c318 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c26a:	4b2e      	ldr	r3, [pc, #184]	; (800c324 <xTaskPriorityDisinherit+0xd0>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	429a      	cmp	r2, r3
 800c272:	d00a      	beq.n	800c28a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	60fb      	str	r3, [r7, #12]
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10a      	bne.n	800c2a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	60bb      	str	r3, [r7, #8]
}
 800c2a4:	bf00      	nop
 800c2a6:	e7fe      	b.n	800c2a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ac:	1e5a      	subs	r2, r3, #1
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d02c      	beq.n	800c318 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d128      	bne.n	800c318 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fe fc14 	bl	800aaf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e8:	4b0f      	ldr	r3, [pc, #60]	; (800c328 <xTaskPriorityDisinherit+0xd4>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d903      	bls.n	800c2f8 <xTaskPriorityDisinherit+0xa4>
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f4:	4a0c      	ldr	r2, [pc, #48]	; (800c328 <xTaskPriorityDisinherit+0xd4>)
 800c2f6:	6013      	str	r3, [r2, #0]
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4a09      	ldr	r2, [pc, #36]	; (800c32c <xTaskPriorityDisinherit+0xd8>)
 800c306:	441a      	add	r2, r3
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	3304      	adds	r3, #4
 800c30c:	4619      	mov	r1, r3
 800c30e:	4610      	mov	r0, r2
 800c310:	f7fe fb95 	bl	800aa3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c314:	2301      	movs	r3, #1
 800c316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c318:	697b      	ldr	r3, [r7, #20]
	}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	200033f0 	.word	0x200033f0
 800c328:	200038cc 	.word	0x200038cc
 800c32c:	200033f4 	.word	0x200033f4

0800c330 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c33a:	4b21      	ldr	r3, [pc, #132]	; (800c3c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c340:	4b20      	ldr	r3, [pc, #128]	; (800c3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	3304      	adds	r3, #4
 800c346:	4618      	mov	r0, r3
 800c348:	f7fe fbd6 	bl	800aaf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c352:	d10a      	bne.n	800c36a <prvAddCurrentTaskToDelayedList+0x3a>
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d007      	beq.n	800c36a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c35a:	4b1a      	ldr	r3, [pc, #104]	; (800c3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3304      	adds	r3, #4
 800c360:	4619      	mov	r1, r3
 800c362:	4819      	ldr	r0, [pc, #100]	; (800c3c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c364:	f7fe fb6b 	bl	800aa3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c368:	e026      	b.n	800c3b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4413      	add	r3, r2
 800c370:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c372:	4b14      	ldr	r3, [pc, #80]	; (800c3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d209      	bcs.n	800c396 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c382:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3304      	adds	r3, #4
 800c38c:	4619      	mov	r1, r3
 800c38e:	4610      	mov	r0, r2
 800c390:	f7fe fb79 	bl	800aa86 <vListInsert>
}
 800c394:	e010      	b.n	800c3b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c396:	4b0e      	ldr	r3, [pc, #56]	; (800c3d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	3304      	adds	r3, #4
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	4610      	mov	r0, r2
 800c3a4:	f7fe fb6f 	bl	800aa86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3a8:	4b0a      	ldr	r3, [pc, #40]	; (800c3d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d202      	bcs.n	800c3b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c3b2:	4a08      	ldr	r2, [pc, #32]	; (800c3d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	6013      	str	r3, [r2, #0]
}
 800c3b8:	bf00      	nop
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	200038c8 	.word	0x200038c8
 800c3c4:	200033f0 	.word	0x200033f0
 800c3c8:	200038b0 	.word	0x200038b0
 800c3cc:	20003880 	.word	0x20003880
 800c3d0:	2000387c 	.word	0x2000387c
 800c3d4:	200038e4 	.word	0x200038e4

0800c3d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08a      	sub	sp, #40	; 0x28
 800c3dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c3e2:	f000 fba1 	bl	800cb28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c3e6:	4b1c      	ldr	r3, [pc, #112]	; (800c458 <xTimerCreateTimerTask+0x80>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d021      	beq.n	800c432 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c3f6:	1d3a      	adds	r2, r7, #4
 800c3f8:	f107 0108 	add.w	r1, r7, #8
 800c3fc:	f107 030c 	add.w	r3, r7, #12
 800c400:	4618      	mov	r0, r3
 800c402:	f7fe fad5 	bl	800a9b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c406:	6879      	ldr	r1, [r7, #4]
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	9202      	str	r2, [sp, #8]
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	2302      	movs	r3, #2
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	2300      	movs	r3, #0
 800c416:	460a      	mov	r2, r1
 800c418:	4910      	ldr	r1, [pc, #64]	; (800c45c <xTimerCreateTimerTask+0x84>)
 800c41a:	4811      	ldr	r0, [pc, #68]	; (800c460 <xTimerCreateTimerTask+0x88>)
 800c41c:	f7ff f882 	bl	800b524 <xTaskCreateStatic>
 800c420:	4603      	mov	r3, r0
 800c422:	4a10      	ldr	r2, [pc, #64]	; (800c464 <xTimerCreateTimerTask+0x8c>)
 800c424:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c426:	4b0f      	ldr	r3, [pc, #60]	; (800c464 <xTimerCreateTimerTask+0x8c>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c42e:	2301      	movs	r3, #1
 800c430:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10a      	bne.n	800c44e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	613b      	str	r3, [r7, #16]
}
 800c44a:	bf00      	nop
 800c44c:	e7fe      	b.n	800c44c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c44e:	697b      	ldr	r3, [r7, #20]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	20003928 	.word	0x20003928
 800c45c:	08013808 	.word	0x08013808
 800c460:	0800c6d1 	.word	0x0800c6d1
 800c464:	2000392c 	.word	0x2000392c

0800c468 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b088      	sub	sp, #32
 800c46c:	af02      	add	r7, sp, #8
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
 800c474:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c476:	202c      	movs	r0, #44	; 0x2c
 800c478:	f000 fe2e 	bl	800d0d8 <pvPortMalloc>
 800c47c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00d      	beq.n	800c4a0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	2200      	movs	r2, #0
 800c488:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	9301      	str	r3, [sp, #4]
 800c490:	6a3b      	ldr	r3, [r7, #32]
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	68b9      	ldr	r1, [r7, #8]
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f000 f843 	bl	800c526 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c4a0:	697b      	ldr	r3, [r7, #20]
	}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b08a      	sub	sp, #40	; 0x28
 800c4ae:	af02      	add	r7, sp, #8
 800c4b0:	60f8      	str	r0, [r7, #12]
 800c4b2:	60b9      	str	r1, [r7, #8]
 800c4b4:	607a      	str	r2, [r7, #4]
 800c4b6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c4b8:	232c      	movs	r3, #44	; 0x2c
 800c4ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	2b2c      	cmp	r3, #44	; 0x2c
 800c4c0:	d00a      	beq.n	800c4d8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c6:	f383 8811 	msr	BASEPRI, r3
 800c4ca:	f3bf 8f6f 	isb	sy
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	61bb      	str	r3, [r7, #24]
}
 800c4d4:	bf00      	nop
 800c4d6:	e7fe      	b.n	800c4d6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10a      	bne.n	800c4f6 <xTimerCreateStatic+0x4c>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	617b      	str	r3, [r7, #20]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00d      	beq.n	800c51c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	2202      	movs	r2, #2
 800c504:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	9301      	str	r3, [sp, #4]
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	68b9      	ldr	r1, [r7, #8]
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f000 f805 	bl	800c526 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c51c:	69fb      	ldr	r3, [r7, #28]
	}
 800c51e:	4618      	mov	r0, r3
 800c520:	3720      	adds	r7, #32
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b086      	sub	sp, #24
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	60b9      	str	r1, [r7, #8]
 800c530:	607a      	str	r2, [r7, #4]
 800c532:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10a      	bne.n	800c550 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	617b      	str	r3, [r7, #20]
}
 800c54c:	bf00      	nop
 800c54e:	e7fe      	b.n	800c54e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	2b00      	cmp	r3, #0
 800c554:	d01e      	beq.n	800c594 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c556:	f000 fae7 	bl	800cb28 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56e:	6a3a      	ldr	r2, [r7, #32]
 800c570:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c574:	3304      	adds	r3, #4
 800c576:	4618      	mov	r0, r3
 800c578:	f7fe fa54 	bl	800aa24 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d008      	beq.n	800c594 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c588:	f043 0304 	orr.w	r3, r3, #4
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c594:	bf00      	nop
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
 800c5a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10a      	bne.n	800c5ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	623b      	str	r3, [r7, #32]
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c5ca:	4b1a      	ldr	r3, [pc, #104]	; (800c634 <xTimerGenericCommand+0x98>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d02a      	beq.n	800c628 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2b05      	cmp	r3, #5
 800c5e2:	dc18      	bgt.n	800c616 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c5e4:	f7ff fe18 	bl	800c218 <xTaskGetSchedulerState>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d109      	bne.n	800c602 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c5ee:	4b11      	ldr	r3, [pc, #68]	; (800c634 <xTimerGenericCommand+0x98>)
 800c5f0:	6818      	ldr	r0, [r3, #0]
 800c5f2:	f107 0110 	add.w	r1, r7, #16
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5fa:	f7fe fbab 	bl	800ad54 <xQueueGenericSend>
 800c5fe:	6278      	str	r0, [r7, #36]	; 0x24
 800c600:	e012      	b.n	800c628 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c602:	4b0c      	ldr	r3, [pc, #48]	; (800c634 <xTimerGenericCommand+0x98>)
 800c604:	6818      	ldr	r0, [r3, #0]
 800c606:	f107 0110 	add.w	r1, r7, #16
 800c60a:	2300      	movs	r3, #0
 800c60c:	2200      	movs	r2, #0
 800c60e:	f7fe fba1 	bl	800ad54 <xQueueGenericSend>
 800c612:	6278      	str	r0, [r7, #36]	; 0x24
 800c614:	e008      	b.n	800c628 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c616:	4b07      	ldr	r3, [pc, #28]	; (800c634 <xTimerGenericCommand+0x98>)
 800c618:	6818      	ldr	r0, [r3, #0]
 800c61a:	f107 0110 	add.w	r1, r7, #16
 800c61e:	2300      	movs	r3, #0
 800c620:	683a      	ldr	r2, [r7, #0]
 800c622:	f7fe fc95 	bl	800af50 <xQueueGenericSendFromISR>
 800c626:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3728      	adds	r7, #40	; 0x28
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	20003928 	.word	0x20003928

0800c638 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b088      	sub	sp, #32
 800c63c:	af02      	add	r7, sp, #8
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c642:	4b22      	ldr	r3, [pc, #136]	; (800c6cc <prvProcessExpiredTimer+0x94>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	3304      	adds	r3, #4
 800c650:	4618      	mov	r0, r3
 800c652:	f7fe fa51 	bl	800aaf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c65c:	f003 0304 	and.w	r3, r3, #4
 800c660:	2b00      	cmp	r3, #0
 800c662:	d022      	beq.n	800c6aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	699a      	ldr	r2, [r3, #24]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	18d1      	adds	r1, r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	6978      	ldr	r0, [r7, #20]
 800c672:	f000 f8d1 	bl	800c818 <prvInsertTimerInActiveList>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d01f      	beq.n	800c6bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c67c:	2300      	movs	r3, #0
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	2300      	movs	r3, #0
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	2100      	movs	r1, #0
 800c686:	6978      	ldr	r0, [r7, #20]
 800c688:	f7ff ff88 	bl	800c59c <xTimerGenericCommand>
 800c68c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d113      	bne.n	800c6bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	60fb      	str	r3, [r7, #12]
}
 800c6a6:	bf00      	nop
 800c6a8:	e7fe      	b.n	800c6a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6b0:	f023 0301 	bic.w	r3, r3, #1
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	6a1b      	ldr	r3, [r3, #32]
 800c6c0:	6978      	ldr	r0, [r7, #20]
 800c6c2:	4798      	blx	r3
}
 800c6c4:	bf00      	nop
 800c6c6:	3718      	adds	r7, #24
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	20003920 	.word	0x20003920

0800c6d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6d8:	f107 0308 	add.w	r3, r7, #8
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 f857 	bl	800c790 <prvGetNextExpireTime>
 800c6e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f000 f803 	bl	800c6f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c6ee:	f000 f8d5 	bl	800c89c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6f2:	e7f1      	b.n	800c6d8 <prvTimerTask+0x8>

0800c6f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c6fe:	f7ff f973 	bl	800b9e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c702:	f107 0308 	add.w	r3, r7, #8
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f866 	bl	800c7d8 <prvSampleTimeNow>
 800c70c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d130      	bne.n	800c776 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10a      	bne.n	800c730 <prvProcessTimerOrBlockTask+0x3c>
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d806      	bhi.n	800c730 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c722:	f7ff f96f 	bl	800ba04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c726:	68f9      	ldr	r1, [r7, #12]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff ff85 	bl	800c638 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c72e:	e024      	b.n	800c77a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d008      	beq.n	800c748 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c736:	4b13      	ldr	r3, [pc, #76]	; (800c784 <prvProcessTimerOrBlockTask+0x90>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <prvProcessTimerOrBlockTask+0x50>
 800c740:	2301      	movs	r3, #1
 800c742:	e000      	b.n	800c746 <prvProcessTimerOrBlockTask+0x52>
 800c744:	2300      	movs	r3, #0
 800c746:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c748:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <prvProcessTimerOrBlockTask+0x94>)
 800c74a:	6818      	ldr	r0, [r3, #0]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	1ad3      	subs	r3, r2, r3
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	4619      	mov	r1, r3
 800c756:	f7fe feb1 	bl	800b4bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c75a:	f7ff f953 	bl	800ba04 <xTaskResumeAll>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10a      	bne.n	800c77a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c764:	4b09      	ldr	r3, [pc, #36]	; (800c78c <prvProcessTimerOrBlockTask+0x98>)
 800c766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c76a:	601a      	str	r2, [r3, #0]
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	f3bf 8f6f 	isb	sy
}
 800c774:	e001      	b.n	800c77a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c776:	f7ff f945 	bl	800ba04 <xTaskResumeAll>
}
 800c77a:	bf00      	nop
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	20003924 	.word	0x20003924
 800c788:	20003928 	.word	0x20003928
 800c78c:	e000ed04 	.word	0xe000ed04

0800c790 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c798:	4b0e      	ldr	r3, [pc, #56]	; (800c7d4 <prvGetNextExpireTime+0x44>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <prvGetNextExpireTime+0x16>
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	e000      	b.n	800c7a8 <prvGetNextExpireTime+0x18>
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d105      	bne.n	800c7c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7b4:	4b07      	ldr	r3, [pc, #28]	; (800c7d4 <prvGetNextExpireTime+0x44>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	e001      	b.n	800c7c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	20003920 	.word	0x20003920

0800c7d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c7e0:	f7ff f9ae 	bl	800bb40 <xTaskGetTickCount>
 800c7e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c7e6:	4b0b      	ldr	r3, [pc, #44]	; (800c814 <prvSampleTimeNow+0x3c>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d205      	bcs.n	800c7fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c7f0:	f000 f936 	bl	800ca60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	e002      	b.n	800c802 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c802:	4a04      	ldr	r2, [pc, #16]	; (800c814 <prvSampleTimeNow+0x3c>)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c808:	68fb      	ldr	r3, [r7, #12]
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20003930 	.word	0x20003930

0800c818 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
 800c824:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c826:	2300      	movs	r3, #0
 800c828:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d812      	bhi.n	800c864 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	1ad2      	subs	r2, r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	699b      	ldr	r3, [r3, #24]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d302      	bcc.n	800c852 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c84c:	2301      	movs	r3, #1
 800c84e:	617b      	str	r3, [r7, #20]
 800c850:	e01b      	b.n	800c88a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c852:	4b10      	ldr	r3, [pc, #64]	; (800c894 <prvInsertTimerInActiveList+0x7c>)
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3304      	adds	r3, #4
 800c85a:	4619      	mov	r1, r3
 800c85c:	4610      	mov	r0, r2
 800c85e:	f7fe f912 	bl	800aa86 <vListInsert>
 800c862:	e012      	b.n	800c88a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d206      	bcs.n	800c87a <prvInsertTimerInActiveList+0x62>
 800c86c:	68ba      	ldr	r2, [r7, #8]
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	429a      	cmp	r2, r3
 800c872:	d302      	bcc.n	800c87a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c874:	2301      	movs	r3, #1
 800c876:	617b      	str	r3, [r7, #20]
 800c878:	e007      	b.n	800c88a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c87a:	4b07      	ldr	r3, [pc, #28]	; (800c898 <prvInsertTimerInActiveList+0x80>)
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	3304      	adds	r3, #4
 800c882:	4619      	mov	r1, r3
 800c884:	4610      	mov	r0, r2
 800c886:	f7fe f8fe 	bl	800aa86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c88a:	697b      	ldr	r3, [r7, #20]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3718      	adds	r7, #24
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	20003924 	.word	0x20003924
 800c898:	20003920 	.word	0x20003920

0800c89c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b08e      	sub	sp, #56	; 0x38
 800c8a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8a2:	e0ca      	b.n	800ca3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	da18      	bge.n	800c8dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c8aa:	1d3b      	adds	r3, r7, #4
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10a      	bne.n	800c8cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	61fb      	str	r3, [r7, #28]
}
 800c8c8:	bf00      	nop
 800c8ca:	e7fe      	b.n	800c8ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8d2:	6850      	ldr	r0, [r2, #4]
 800c8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8d6:	6892      	ldr	r2, [r2, #8]
 800c8d8:	4611      	mov	r1, r2
 800c8da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f2c0 80aa 	blt.w	800ca38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	695b      	ldr	r3, [r3, #20]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d004      	beq.n	800c8fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fe f8ff 	bl	800aaf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8fa:	463b      	mov	r3, r7
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7ff ff6b 	bl	800c7d8 <prvSampleTimeNow>
 800c902:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b09      	cmp	r3, #9
 800c908:	f200 8097 	bhi.w	800ca3a <prvProcessReceivedCommands+0x19e>
 800c90c:	a201      	add	r2, pc, #4	; (adr r2, 800c914 <prvProcessReceivedCommands+0x78>)
 800c90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c912:	bf00      	nop
 800c914:	0800c93d 	.word	0x0800c93d
 800c918:	0800c93d 	.word	0x0800c93d
 800c91c:	0800c93d 	.word	0x0800c93d
 800c920:	0800c9b1 	.word	0x0800c9b1
 800c924:	0800c9c5 	.word	0x0800c9c5
 800c928:	0800ca0f 	.word	0x0800ca0f
 800c92c:	0800c93d 	.word	0x0800c93d
 800c930:	0800c93d 	.word	0x0800c93d
 800c934:	0800c9b1 	.word	0x0800c9b1
 800c938:	0800c9c5 	.word	0x0800c9c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c942:	f043 0301 	orr.w	r3, r3, #1
 800c946:	b2da      	uxtb	r2, r3
 800c948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	699b      	ldr	r3, [r3, #24]
 800c954:	18d1      	adds	r1, r2, r3
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c95c:	f7ff ff5c 	bl	800c818 <prvInsertTimerInActiveList>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d069      	beq.n	800ca3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c96c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c974:	f003 0304 	and.w	r3, r3, #4
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d05e      	beq.n	800ca3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	441a      	add	r2, r3
 800c984:	2300      	movs	r3, #0
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	2300      	movs	r3, #0
 800c98a:	2100      	movs	r1, #0
 800c98c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c98e:	f7ff fe05 	bl	800c59c <xTimerGenericCommand>
 800c992:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c994:	6a3b      	ldr	r3, [r7, #32]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d14f      	bne.n	800ca3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	61bb      	str	r3, [r7, #24]
}
 800c9ac:	bf00      	nop
 800c9ae:	e7fe      	b.n	800c9ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9b6:	f023 0301 	bic.w	r3, r3, #1
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c9c2:	e03a      	b.n	800ca3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ca:	f043 0301 	orr.w	r3, r3, #1
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	699b      	ldr	r3, [r3, #24]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10a      	bne.n	800c9fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	617b      	str	r3, [r7, #20]
}
 800c9f6:	bf00      	nop
 800c9f8:	e7fe      	b.n	800c9f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fc:	699a      	ldr	r2, [r3, #24]
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca00:	18d1      	adds	r1, r2, r3
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca08:	f7ff ff06 	bl	800c818 <prvInsertTimerInActiveList>
					break;
 800ca0c:	e015      	b.n	800ca3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca14:	f003 0302 	and.w	r3, r3, #2
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d103      	bne.n	800ca24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ca1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca1e:	f000 fc27 	bl	800d270 <vPortFree>
 800ca22:	e00a      	b.n	800ca3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca2a:	f023 0301 	bic.w	r3, r3, #1
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca36:	e000      	b.n	800ca3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca3a:	4b08      	ldr	r3, [pc, #32]	; (800ca5c <prvProcessReceivedCommands+0x1c0>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	1d39      	adds	r1, r7, #4
 800ca40:	2200      	movs	r2, #0
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fe fb20 	bl	800b088 <xQueueReceive>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f47f af2a 	bne.w	800c8a4 <prvProcessReceivedCommands+0x8>
	}
}
 800ca50:	bf00      	nop
 800ca52:	bf00      	nop
 800ca54:	3730      	adds	r7, #48	; 0x30
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20003928 	.word	0x20003928

0800ca60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b088      	sub	sp, #32
 800ca64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca66:	e048      	b.n	800cafa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca68:	4b2d      	ldr	r3, [pc, #180]	; (800cb20 <prvSwitchTimerLists+0xc0>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca72:	4b2b      	ldr	r3, [pc, #172]	; (800cb20 <prvSwitchTimerLists+0xc0>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	3304      	adds	r3, #4
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe f839 	bl	800aaf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d02e      	beq.n	800cafa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	693a      	ldr	r2, [r7, #16]
 800caa2:	4413      	add	r3, r2
 800caa4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d90e      	bls.n	800cacc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	68fa      	ldr	r2, [r7, #12]
 800cab8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800caba:	4b19      	ldr	r3, [pc, #100]	; (800cb20 <prvSwitchTimerLists+0xc0>)
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	3304      	adds	r3, #4
 800cac2:	4619      	mov	r1, r3
 800cac4:	4610      	mov	r0, r2
 800cac6:	f7fd ffde 	bl	800aa86 <vListInsert>
 800caca:	e016      	b.n	800cafa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cacc:	2300      	movs	r3, #0
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	2300      	movs	r3, #0
 800cad2:	693a      	ldr	r2, [r7, #16]
 800cad4:	2100      	movs	r1, #0
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f7ff fd60 	bl	800c59c <xTimerGenericCommand>
 800cadc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d10a      	bne.n	800cafa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae8:	f383 8811 	msr	BASEPRI, r3
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	603b      	str	r3, [r7, #0]
}
 800caf6:	bf00      	nop
 800caf8:	e7fe      	b.n	800caf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cafa:	4b09      	ldr	r3, [pc, #36]	; (800cb20 <prvSwitchTimerLists+0xc0>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1b1      	bne.n	800ca68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb04:	4b06      	ldr	r3, [pc, #24]	; (800cb20 <prvSwitchTimerLists+0xc0>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb0a:	4b06      	ldr	r3, [pc, #24]	; (800cb24 <prvSwitchTimerLists+0xc4>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a04      	ldr	r2, [pc, #16]	; (800cb20 <prvSwitchTimerLists+0xc0>)
 800cb10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb12:	4a04      	ldr	r2, [pc, #16]	; (800cb24 <prvSwitchTimerLists+0xc4>)
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	6013      	str	r3, [r2, #0]
}
 800cb18:	bf00      	nop
 800cb1a:	3718      	adds	r7, #24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	20003920 	.word	0x20003920
 800cb24:	20003924 	.word	0x20003924

0800cb28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb2e:	f000 f9b1 	bl	800ce94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <prvCheckForValidListAndQueue+0x60>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d120      	bne.n	800cb7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb3a:	4814      	ldr	r0, [pc, #80]	; (800cb8c <prvCheckForValidListAndQueue+0x64>)
 800cb3c:	f7fd ff52 	bl	800a9e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb40:	4813      	ldr	r0, [pc, #76]	; (800cb90 <prvCheckForValidListAndQueue+0x68>)
 800cb42:	f7fd ff4f 	bl	800a9e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb46:	4b13      	ldr	r3, [pc, #76]	; (800cb94 <prvCheckForValidListAndQueue+0x6c>)
 800cb48:	4a10      	ldr	r2, [pc, #64]	; (800cb8c <prvCheckForValidListAndQueue+0x64>)
 800cb4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb4c:	4b12      	ldr	r3, [pc, #72]	; (800cb98 <prvCheckForValidListAndQueue+0x70>)
 800cb4e:	4a10      	ldr	r2, [pc, #64]	; (800cb90 <prvCheckForValidListAndQueue+0x68>)
 800cb50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cb52:	2300      	movs	r3, #0
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	4b11      	ldr	r3, [pc, #68]	; (800cb9c <prvCheckForValidListAndQueue+0x74>)
 800cb58:	4a11      	ldr	r2, [pc, #68]	; (800cba0 <prvCheckForValidListAndQueue+0x78>)
 800cb5a:	2110      	movs	r1, #16
 800cb5c:	200a      	movs	r0, #10
 800cb5e:	f7fe f85d 	bl	800ac1c <xQueueGenericCreateStatic>
 800cb62:	4603      	mov	r3, r0
 800cb64:	4a08      	ldr	r2, [pc, #32]	; (800cb88 <prvCheckForValidListAndQueue+0x60>)
 800cb66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb68:	4b07      	ldr	r3, [pc, #28]	; (800cb88 <prvCheckForValidListAndQueue+0x60>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d005      	beq.n	800cb7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb70:	4b05      	ldr	r3, [pc, #20]	; (800cb88 <prvCheckForValidListAndQueue+0x60>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	490b      	ldr	r1, [pc, #44]	; (800cba4 <prvCheckForValidListAndQueue+0x7c>)
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fe fc76 	bl	800b468 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb7c:	f000 f9ba 	bl	800cef4 <vPortExitCritical>
}
 800cb80:	bf00      	nop
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	20003928 	.word	0x20003928
 800cb8c:	200038f8 	.word	0x200038f8
 800cb90:	2000390c 	.word	0x2000390c
 800cb94:	20003920 	.word	0x20003920
 800cb98:	20003924 	.word	0x20003924
 800cb9c:	200039d4 	.word	0x200039d4
 800cba0:	20003934 	.word	0x20003934
 800cba4:	08013810 	.word	0x08013810

0800cba8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d10a      	bne.n	800cbd0 <xTimerIsTimerActive+0x28>
	__asm volatile
 800cbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbe:	f383 8811 	msr	BASEPRI, r3
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	f3bf 8f4f 	dsb	sy
 800cbca:	60fb      	str	r3, [r7, #12]
}
 800cbcc:	bf00      	nop
 800cbce:	e7fe      	b.n	800cbce <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800cbd0:	f000 f960 	bl	800ce94 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbda:	f003 0301 	and.w	r3, r3, #1
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d102      	bne.n	800cbe8 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	617b      	str	r3, [r7, #20]
 800cbe6:	e001      	b.n	800cbec <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800cbec:	f000 f982 	bl	800cef4 <vPortExitCritical>

	return xReturn;
 800cbf0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3718      	adds	r7, #24
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b086      	sub	sp, #24
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10a      	bne.n	800cc22 <pvTimerGetTimerID+0x28>
	__asm volatile
 800cc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc10:	f383 8811 	msr	BASEPRI, r3
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	60fb      	str	r3, [r7, #12]
}
 800cc1e:	bf00      	nop
 800cc20:	e7fe      	b.n	800cc20 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800cc22:	f000 f937 	bl	800ce94 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	69db      	ldr	r3, [r3, #28]
 800cc2a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800cc2c:	f000 f962 	bl	800cef4 <vPortExitCritical>

	return pvReturn;
 800cc30:	693b      	ldr	r3, [r7, #16]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
	...

0800cc3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3b04      	subs	r3, #4
 800cc4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	3b04      	subs	r3, #4
 800cc5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	f023 0201 	bic.w	r2, r3, #1
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	3b04      	subs	r3, #4
 800cc6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc6c:	4a0c      	ldr	r2, [pc, #48]	; (800cca0 <pxPortInitialiseStack+0x64>)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	3b14      	subs	r3, #20
 800cc76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3b04      	subs	r3, #4
 800cc82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f06f 0202 	mvn.w	r2, #2
 800cc8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	3b20      	subs	r3, #32
 800cc90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc92:	68fb      	ldr	r3, [r7, #12]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	0800cca5 	.word	0x0800cca5

0800cca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ccae:	4b12      	ldr	r3, [pc, #72]	; (800ccf8 <prvTaskExitError+0x54>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb6:	d00a      	beq.n	800ccce <prvTaskExitError+0x2a>
	__asm volatile
 800ccb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbc:	f383 8811 	msr	BASEPRI, r3
 800ccc0:	f3bf 8f6f 	isb	sy
 800ccc4:	f3bf 8f4f 	dsb	sy
 800ccc8:	60fb      	str	r3, [r7, #12]
}
 800ccca:	bf00      	nop
 800cccc:	e7fe      	b.n	800cccc <prvTaskExitError+0x28>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	60bb      	str	r3, [r7, #8]
}
 800cce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cce2:	bf00      	nop
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d0fc      	beq.n	800cce4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccea:	bf00      	nop
 800ccec:	bf00      	nop
 800ccee:	3714      	adds	r7, #20
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr
 800ccf8:	2000003c 	.word	0x2000003c
 800ccfc:	00000000 	.word	0x00000000

0800cd00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd00:	4b07      	ldr	r3, [pc, #28]	; (800cd20 <pxCurrentTCBConst2>)
 800cd02:	6819      	ldr	r1, [r3, #0]
 800cd04:	6808      	ldr	r0, [r1, #0]
 800cd06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0a:	f380 8809 	msr	PSP, r0
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f04f 0000 	mov.w	r0, #0
 800cd16:	f380 8811 	msr	BASEPRI, r0
 800cd1a:	4770      	bx	lr
 800cd1c:	f3af 8000 	nop.w

0800cd20 <pxCurrentTCBConst2>:
 800cd20:	200033f0 	.word	0x200033f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd24:	bf00      	nop
 800cd26:	bf00      	nop

0800cd28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd28:	4808      	ldr	r0, [pc, #32]	; (800cd4c <prvPortStartFirstTask+0x24>)
 800cd2a:	6800      	ldr	r0, [r0, #0]
 800cd2c:	6800      	ldr	r0, [r0, #0]
 800cd2e:	f380 8808 	msr	MSP, r0
 800cd32:	f04f 0000 	mov.w	r0, #0
 800cd36:	f380 8814 	msr	CONTROL, r0
 800cd3a:	b662      	cpsie	i
 800cd3c:	b661      	cpsie	f
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	df00      	svc	0
 800cd48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd4a:	bf00      	nop
 800cd4c:	e000ed08 	.word	0xe000ed08

0800cd50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd56:	4b46      	ldr	r3, [pc, #280]	; (800ce70 <xPortStartScheduler+0x120>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a46      	ldr	r2, [pc, #280]	; (800ce74 <xPortStartScheduler+0x124>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d10a      	bne.n	800cd76 <xPortStartScheduler+0x26>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	613b      	str	r3, [r7, #16]
}
 800cd72:	bf00      	nop
 800cd74:	e7fe      	b.n	800cd74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd76:	4b3e      	ldr	r3, [pc, #248]	; (800ce70 <xPortStartScheduler+0x120>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a3f      	ldr	r2, [pc, #252]	; (800ce78 <xPortStartScheduler+0x128>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d10a      	bne.n	800cd96 <xPortStartScheduler+0x46>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	60fb      	str	r3, [r7, #12]
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd96:	4b39      	ldr	r3, [pc, #228]	; (800ce7c <xPortStartScheduler+0x12c>)
 800cd98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	22ff      	movs	r2, #255	; 0xff
 800cda6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cdb0:	78fb      	ldrb	r3, [r7, #3]
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	4b31      	ldr	r3, [pc, #196]	; (800ce80 <xPortStartScheduler+0x130>)
 800cdbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdbe:	4b31      	ldr	r3, [pc, #196]	; (800ce84 <xPortStartScheduler+0x134>)
 800cdc0:	2207      	movs	r2, #7
 800cdc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdc4:	e009      	b.n	800cdda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cdc6:	4b2f      	ldr	r3, [pc, #188]	; (800ce84 <xPortStartScheduler+0x134>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	4a2d      	ldr	r2, [pc, #180]	; (800ce84 <xPortStartScheduler+0x134>)
 800cdce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	005b      	lsls	r3, r3, #1
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdda:	78fb      	ldrb	r3, [r7, #3]
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cde2:	2b80      	cmp	r3, #128	; 0x80
 800cde4:	d0ef      	beq.n	800cdc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cde6:	4b27      	ldr	r3, [pc, #156]	; (800ce84 <xPortStartScheduler+0x134>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f1c3 0307 	rsb	r3, r3, #7
 800cdee:	2b04      	cmp	r3, #4
 800cdf0:	d00a      	beq.n	800ce08 <xPortStartScheduler+0xb8>
	__asm volatile
 800cdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	60bb      	str	r3, [r7, #8]
}
 800ce04:	bf00      	nop
 800ce06:	e7fe      	b.n	800ce06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce08:	4b1e      	ldr	r3, [pc, #120]	; (800ce84 <xPortStartScheduler+0x134>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	021b      	lsls	r3, r3, #8
 800ce0e:	4a1d      	ldr	r2, [pc, #116]	; (800ce84 <xPortStartScheduler+0x134>)
 800ce10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce12:	4b1c      	ldr	r3, [pc, #112]	; (800ce84 <xPortStartScheduler+0x134>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce1a:	4a1a      	ldr	r2, [pc, #104]	; (800ce84 <xPortStartScheduler+0x134>)
 800ce1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce26:	4b18      	ldr	r3, [pc, #96]	; (800ce88 <xPortStartScheduler+0x138>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a17      	ldr	r2, [pc, #92]	; (800ce88 <xPortStartScheduler+0x138>)
 800ce2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce32:	4b15      	ldr	r3, [pc, #84]	; (800ce88 <xPortStartScheduler+0x138>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a14      	ldr	r2, [pc, #80]	; (800ce88 <xPortStartScheduler+0x138>)
 800ce38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce3e:	f000 f8dd 	bl	800cffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce42:	4b12      	ldr	r3, [pc, #72]	; (800ce8c <xPortStartScheduler+0x13c>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce48:	f000 f8fc 	bl	800d044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce4c:	4b10      	ldr	r3, [pc, #64]	; (800ce90 <xPortStartScheduler+0x140>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a0f      	ldr	r2, [pc, #60]	; (800ce90 <xPortStartScheduler+0x140>)
 800ce52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ce56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce58:	f7ff ff66 	bl	800cd28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce5c:	f7fe ff3a 	bl	800bcd4 <vTaskSwitchContext>
	prvTaskExitError();
 800ce60:	f7ff ff20 	bl	800cca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3718      	adds	r7, #24
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	e000ed00 	.word	0xe000ed00
 800ce74:	410fc271 	.word	0x410fc271
 800ce78:	410fc270 	.word	0x410fc270
 800ce7c:	e000e400 	.word	0xe000e400
 800ce80:	20003a24 	.word	0x20003a24
 800ce84:	20003a28 	.word	0x20003a28
 800ce88:	e000ed20 	.word	0xe000ed20
 800ce8c:	2000003c 	.word	0x2000003c
 800ce90:	e000ef34 	.word	0xe000ef34

0800ce94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
	__asm volatile
 800ce9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	607b      	str	r3, [r7, #4]
}
 800ceac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ceae:	4b0f      	ldr	r3, [pc, #60]	; (800ceec <vPortEnterCritical+0x58>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	4a0d      	ldr	r2, [pc, #52]	; (800ceec <vPortEnterCritical+0x58>)
 800ceb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ceb8:	4b0c      	ldr	r3, [pc, #48]	; (800ceec <vPortEnterCritical+0x58>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d10f      	bne.n	800cee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cec0:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <vPortEnterCritical+0x5c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	603b      	str	r3, [r7, #0]
}
 800cedc:	bf00      	nop
 800cede:	e7fe      	b.n	800cede <vPortEnterCritical+0x4a>
	}
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr
 800ceec:	2000003c 	.word	0x2000003c
 800cef0:	e000ed04 	.word	0xe000ed04

0800cef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cefa:	4b12      	ldr	r3, [pc, #72]	; (800cf44 <vPortExitCritical+0x50>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10a      	bne.n	800cf18 <vPortExitCritical+0x24>
	__asm volatile
 800cf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf06:	f383 8811 	msr	BASEPRI, r3
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	f3bf 8f4f 	dsb	sy
 800cf12:	607b      	str	r3, [r7, #4]
}
 800cf14:	bf00      	nop
 800cf16:	e7fe      	b.n	800cf16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf18:	4b0a      	ldr	r3, [pc, #40]	; (800cf44 <vPortExitCritical+0x50>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	4a09      	ldr	r2, [pc, #36]	; (800cf44 <vPortExitCritical+0x50>)
 800cf20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf22:	4b08      	ldr	r3, [pc, #32]	; (800cf44 <vPortExitCritical+0x50>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d105      	bne.n	800cf36 <vPortExitCritical+0x42>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	f383 8811 	msr	BASEPRI, r3
}
 800cf34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf36:	bf00      	nop
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	2000003c 	.word	0x2000003c
	...

0800cf50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf50:	f3ef 8009 	mrs	r0, PSP
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	4b15      	ldr	r3, [pc, #84]	; (800cfb0 <pxCurrentTCBConst>)
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	f01e 0f10 	tst.w	lr, #16
 800cf60:	bf08      	it	eq
 800cf62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6a:	6010      	str	r0, [r2, #0]
 800cf6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf74:	f380 8811 	msr	BASEPRI, r0
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f7fe fea8 	bl	800bcd4 <vTaskSwitchContext>
 800cf84:	f04f 0000 	mov.w	r0, #0
 800cf88:	f380 8811 	msr	BASEPRI, r0
 800cf8c:	bc09      	pop	{r0, r3}
 800cf8e:	6819      	ldr	r1, [r3, #0]
 800cf90:	6808      	ldr	r0, [r1, #0]
 800cf92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf96:	f01e 0f10 	tst.w	lr, #16
 800cf9a:	bf08      	it	eq
 800cf9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cfa0:	f380 8809 	msr	PSP, r0
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	f3af 8000 	nop.w

0800cfb0 <pxCurrentTCBConst>:
 800cfb0:	200033f0 	.word	0x200033f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cfb4:	bf00      	nop
 800cfb6:	bf00      	nop

0800cfb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	607b      	str	r3, [r7, #4]
}
 800cfd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfd2:	f7fe fdc5 	bl	800bb60 <xTaskIncrementTick>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d003      	beq.n	800cfe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfdc:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <xPortSysTickHandler+0x40>)
 800cfde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfe2:	601a      	str	r2, [r3, #0]
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	f383 8811 	msr	BASEPRI, r3
}
 800cfee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cff0:	bf00      	nop
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	e000ed04 	.word	0xe000ed04

0800cffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cffc:	b480      	push	{r7}
 800cffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d000:	4b0b      	ldr	r3, [pc, #44]	; (800d030 <vPortSetupTimerInterrupt+0x34>)
 800d002:	2200      	movs	r2, #0
 800d004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d006:	4b0b      	ldr	r3, [pc, #44]	; (800d034 <vPortSetupTimerInterrupt+0x38>)
 800d008:	2200      	movs	r2, #0
 800d00a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d00c:	4b0a      	ldr	r3, [pc, #40]	; (800d038 <vPortSetupTimerInterrupt+0x3c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a0a      	ldr	r2, [pc, #40]	; (800d03c <vPortSetupTimerInterrupt+0x40>)
 800d012:	fba2 2303 	umull	r2, r3, r2, r3
 800d016:	095b      	lsrs	r3, r3, #5
 800d018:	4a09      	ldr	r2, [pc, #36]	; (800d040 <vPortSetupTimerInterrupt+0x44>)
 800d01a:	3b01      	subs	r3, #1
 800d01c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d01e:	4b04      	ldr	r3, [pc, #16]	; (800d030 <vPortSetupTimerInterrupt+0x34>)
 800d020:	2207      	movs	r2, #7
 800d022:	601a      	str	r2, [r3, #0]
}
 800d024:	bf00      	nop
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	e000e010 	.word	0xe000e010
 800d034:	e000e018 	.word	0xe000e018
 800d038:	20000010 	.word	0x20000010
 800d03c:	51eb851f 	.word	0x51eb851f
 800d040:	e000e014 	.word	0xe000e014

0800d044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d054 <vPortEnableVFP+0x10>
 800d048:	6801      	ldr	r1, [r0, #0]
 800d04a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d04e:	6001      	str	r1, [r0, #0]
 800d050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d052:	bf00      	nop
 800d054:	e000ed88 	.word	0xe000ed88

0800d058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d058:	b480      	push	{r7}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d05e:	f3ef 8305 	mrs	r3, IPSR
 800d062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b0f      	cmp	r3, #15
 800d068:	d914      	bls.n	800d094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d06a:	4a17      	ldr	r2, [pc, #92]	; (800d0c8 <vPortValidateInterruptPriority+0x70>)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4413      	add	r3, r2
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d074:	4b15      	ldr	r3, [pc, #84]	; (800d0cc <vPortValidateInterruptPriority+0x74>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	7afa      	ldrb	r2, [r7, #11]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d20a      	bcs.n	800d094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	607b      	str	r3, [r7, #4]
}
 800d090:	bf00      	nop
 800d092:	e7fe      	b.n	800d092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d094:	4b0e      	ldr	r3, [pc, #56]	; (800d0d0 <vPortValidateInterruptPriority+0x78>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d09c:	4b0d      	ldr	r3, [pc, #52]	; (800d0d4 <vPortValidateInterruptPriority+0x7c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d90a      	bls.n	800d0ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	603b      	str	r3, [r7, #0]
}
 800d0b6:	bf00      	nop
 800d0b8:	e7fe      	b.n	800d0b8 <vPortValidateInterruptPriority+0x60>
	}
 800d0ba:	bf00      	nop
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	e000e3f0 	.word	0xe000e3f0
 800d0cc:	20003a24 	.word	0x20003a24
 800d0d0:	e000ed0c 	.word	0xe000ed0c
 800d0d4:	20003a28 	.word	0x20003a28

0800d0d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08a      	sub	sp, #40	; 0x28
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0e4:	f7fe fc80 	bl	800b9e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0e8:	4b5b      	ldr	r3, [pc, #364]	; (800d258 <pvPortMalloc+0x180>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d101      	bne.n	800d0f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0f0:	f000 f920 	bl	800d334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0f4:	4b59      	ldr	r3, [pc, #356]	; (800d25c <pvPortMalloc+0x184>)
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	f040 8093 	bne.w	800d228 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d01d      	beq.n	800d144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d108:	2208      	movs	r2, #8
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4413      	add	r3, r2
 800d10e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f003 0307 	and.w	r3, r3, #7
 800d116:	2b00      	cmp	r3, #0
 800d118:	d014      	beq.n	800d144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f023 0307 	bic.w	r3, r3, #7
 800d120:	3308      	adds	r3, #8
 800d122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f003 0307 	and.w	r3, r3, #7
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00a      	beq.n	800d144 <pvPortMalloc+0x6c>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	617b      	str	r3, [r7, #20]
}
 800d140:	bf00      	nop
 800d142:	e7fe      	b.n	800d142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d06e      	beq.n	800d228 <pvPortMalloc+0x150>
 800d14a:	4b45      	ldr	r3, [pc, #276]	; (800d260 <pvPortMalloc+0x188>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	429a      	cmp	r2, r3
 800d152:	d869      	bhi.n	800d228 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d154:	4b43      	ldr	r3, [pc, #268]	; (800d264 <pvPortMalloc+0x18c>)
 800d156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d158:	4b42      	ldr	r3, [pc, #264]	; (800d264 <pvPortMalloc+0x18c>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d15e:	e004      	b.n	800d16a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	429a      	cmp	r2, r3
 800d172:	d903      	bls.n	800d17c <pvPortMalloc+0xa4>
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1f1      	bne.n	800d160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d17c:	4b36      	ldr	r3, [pc, #216]	; (800d258 <pvPortMalloc+0x180>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d182:	429a      	cmp	r2, r3
 800d184:	d050      	beq.n	800d228 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2208      	movs	r2, #8
 800d18c:	4413      	add	r3, r2
 800d18e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	1ad2      	subs	r2, r2, r3
 800d1a0:	2308      	movs	r3, #8
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d91f      	bls.n	800d1e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	f003 0307 	and.w	r3, r3, #7
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00a      	beq.n	800d1d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	613b      	str	r3, [r7, #16]
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	1ad2      	subs	r2, r2, r3
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1e2:	69b8      	ldr	r0, [r7, #24]
 800d1e4:	f000 f908 	bl	800d3f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1e8:	4b1d      	ldr	r3, [pc, #116]	; (800d260 <pvPortMalloc+0x188>)
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	4a1b      	ldr	r2, [pc, #108]	; (800d260 <pvPortMalloc+0x188>)
 800d1f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1f6:	4b1a      	ldr	r3, [pc, #104]	; (800d260 <pvPortMalloc+0x188>)
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	4b1b      	ldr	r3, [pc, #108]	; (800d268 <pvPortMalloc+0x190>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d203      	bcs.n	800d20a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d202:	4b17      	ldr	r3, [pc, #92]	; (800d260 <pvPortMalloc+0x188>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a18      	ldr	r2, [pc, #96]	; (800d268 <pvPortMalloc+0x190>)
 800d208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	685a      	ldr	r2, [r3, #4]
 800d20e:	4b13      	ldr	r3, [pc, #76]	; (800d25c <pvPortMalloc+0x184>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	431a      	orrs	r2, r3
 800d214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21a:	2200      	movs	r2, #0
 800d21c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d21e:	4b13      	ldr	r3, [pc, #76]	; (800d26c <pvPortMalloc+0x194>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	3301      	adds	r3, #1
 800d224:	4a11      	ldr	r2, [pc, #68]	; (800d26c <pvPortMalloc+0x194>)
 800d226:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d228:	f7fe fbec 	bl	800ba04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	f003 0307 	and.w	r3, r3, #7
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00a      	beq.n	800d24c <pvPortMalloc+0x174>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	60fb      	str	r3, [r7, #12]
}
 800d248:	bf00      	nop
 800d24a:	e7fe      	b.n	800d24a <pvPortMalloc+0x172>
	return pvReturn;
 800d24c:	69fb      	ldr	r3, [r7, #28]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3728      	adds	r7, #40	; 0x28
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	20005974 	.word	0x20005974
 800d25c:	20005988 	.word	0x20005988
 800d260:	20005978 	.word	0x20005978
 800d264:	2000596c 	.word	0x2000596c
 800d268:	2000597c 	.word	0x2000597c
 800d26c:	20005980 	.word	0x20005980

0800d270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d04d      	beq.n	800d31e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d282:	2308      	movs	r3, #8
 800d284:	425b      	negs	r3, r3
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	4413      	add	r3, r2
 800d28a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	4b24      	ldr	r3, [pc, #144]	; (800d328 <vPortFree+0xb8>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4013      	ands	r3, r2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10a      	bne.n	800d2b4 <vPortFree+0x44>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	60fb      	str	r3, [r7, #12]
}
 800d2b0:	bf00      	nop
 800d2b2:	e7fe      	b.n	800d2b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00a      	beq.n	800d2d2 <vPortFree+0x62>
	__asm volatile
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	60bb      	str	r3, [r7, #8]
}
 800d2ce:	bf00      	nop
 800d2d0:	e7fe      	b.n	800d2d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	685a      	ldr	r2, [r3, #4]
 800d2d6:	4b14      	ldr	r3, [pc, #80]	; (800d328 <vPortFree+0xb8>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4013      	ands	r3, r2
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d01e      	beq.n	800d31e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d11a      	bne.n	800d31e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	4b0e      	ldr	r3, [pc, #56]	; (800d328 <vPortFree+0xb8>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	43db      	mvns	r3, r3
 800d2f2:	401a      	ands	r2, r3
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2f8:	f7fe fb76 	bl	800b9e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	685a      	ldr	r2, [r3, #4]
 800d300:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <vPortFree+0xbc>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4413      	add	r3, r2
 800d306:	4a09      	ldr	r2, [pc, #36]	; (800d32c <vPortFree+0xbc>)
 800d308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d30a:	6938      	ldr	r0, [r7, #16]
 800d30c:	f000 f874 	bl	800d3f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d310:	4b07      	ldr	r3, [pc, #28]	; (800d330 <vPortFree+0xc0>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3301      	adds	r3, #1
 800d316:	4a06      	ldr	r2, [pc, #24]	; (800d330 <vPortFree+0xc0>)
 800d318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d31a:	f7fe fb73 	bl	800ba04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d31e:	bf00      	nop
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	20005988 	.word	0x20005988
 800d32c:	20005978 	.word	0x20005978
 800d330:	20005984 	.word	0x20005984

0800d334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d33a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800d33e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d340:	4b27      	ldr	r3, [pc, #156]	; (800d3e0 <prvHeapInit+0xac>)
 800d342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f003 0307 	and.w	r3, r3, #7
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00c      	beq.n	800d368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3307      	adds	r3, #7
 800d352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f023 0307 	bic.w	r3, r3, #7
 800d35a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	4a1f      	ldr	r2, [pc, #124]	; (800d3e0 <prvHeapInit+0xac>)
 800d364:	4413      	add	r3, r2
 800d366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d36c:	4a1d      	ldr	r2, [pc, #116]	; (800d3e4 <prvHeapInit+0xb0>)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d372:	4b1c      	ldr	r3, [pc, #112]	; (800d3e4 <prvHeapInit+0xb0>)
 800d374:	2200      	movs	r2, #0
 800d376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	68ba      	ldr	r2, [r7, #8]
 800d37c:	4413      	add	r3, r2
 800d37e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d380:	2208      	movs	r2, #8
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	1a9b      	subs	r3, r3, r2
 800d386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f023 0307 	bic.w	r3, r3, #7
 800d38e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	4a15      	ldr	r2, [pc, #84]	; (800d3e8 <prvHeapInit+0xb4>)
 800d394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d396:	4b14      	ldr	r3, [pc, #80]	; (800d3e8 <prvHeapInit+0xb4>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2200      	movs	r2, #0
 800d39c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d39e:	4b12      	ldr	r3, [pc, #72]	; (800d3e8 <prvHeapInit+0xb4>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	1ad2      	subs	r2, r2, r3
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d3b4:	4b0c      	ldr	r3, [pc, #48]	; (800d3e8 <prvHeapInit+0xb4>)
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	4a0a      	ldr	r2, [pc, #40]	; (800d3ec <prvHeapInit+0xb8>)
 800d3c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	4a09      	ldr	r2, [pc, #36]	; (800d3f0 <prvHeapInit+0xbc>)
 800d3ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d3cc:	4b09      	ldr	r3, [pc, #36]	; (800d3f4 <prvHeapInit+0xc0>)
 800d3ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d3d2:	601a      	str	r2, [r3, #0]
}
 800d3d4:	bf00      	nop
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	20003a2c 	.word	0x20003a2c
 800d3e4:	2000596c 	.word	0x2000596c
 800d3e8:	20005974 	.word	0x20005974
 800d3ec:	2000597c 	.word	0x2000597c
 800d3f0:	20005978 	.word	0x20005978
 800d3f4:	20005988 	.word	0x20005988

0800d3f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d400:	4b28      	ldr	r3, [pc, #160]	; (800d4a4 <prvInsertBlockIntoFreeList+0xac>)
 800d402:	60fb      	str	r3, [r7, #12]
 800d404:	e002      	b.n	800d40c <prvInsertBlockIntoFreeList+0x14>
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	60fb      	str	r3, [r7, #12]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	429a      	cmp	r2, r3
 800d414:	d8f7      	bhi.n	800d406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	68ba      	ldr	r2, [r7, #8]
 800d420:	4413      	add	r3, r2
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	429a      	cmp	r2, r3
 800d426:	d108      	bne.n	800d43a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	441a      	add	r2, r3
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	441a      	add	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d118      	bne.n	800d480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	4b15      	ldr	r3, [pc, #84]	; (800d4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	429a      	cmp	r2, r3
 800d458:	d00d      	beq.n	800d476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	685a      	ldr	r2, [r3, #4]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	441a      	add	r2, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	601a      	str	r2, [r3, #0]
 800d474:	e008      	b.n	800d488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d476:	4b0c      	ldr	r3, [pc, #48]	; (800d4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	601a      	str	r2, [r3, #0]
 800d47e:	e003      	b.n	800d488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d002      	beq.n	800d496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d496:	bf00      	nop
 800d498:	3714      	adds	r7, #20
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	2000596c 	.word	0x2000596c
 800d4a8:	20005974 	.word	0x20005974

0800d4ac <__errno>:
 800d4ac:	4b01      	ldr	r3, [pc, #4]	; (800d4b4 <__errno+0x8>)
 800d4ae:	6818      	ldr	r0, [r3, #0]
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	20000040 	.word	0x20000040

0800d4b8 <std>:
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	4604      	mov	r4, r0
 800d4be:	e9c0 3300 	strd	r3, r3, [r0]
 800d4c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4c6:	6083      	str	r3, [r0, #8]
 800d4c8:	8181      	strh	r1, [r0, #12]
 800d4ca:	6643      	str	r3, [r0, #100]	; 0x64
 800d4cc:	81c2      	strh	r2, [r0, #14]
 800d4ce:	6183      	str	r3, [r0, #24]
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	2208      	movs	r2, #8
 800d4d4:	305c      	adds	r0, #92	; 0x5c
 800d4d6:	f000 f91a 	bl	800d70e <memset>
 800d4da:	4b05      	ldr	r3, [pc, #20]	; (800d4f0 <std+0x38>)
 800d4dc:	6263      	str	r3, [r4, #36]	; 0x24
 800d4de:	4b05      	ldr	r3, [pc, #20]	; (800d4f4 <std+0x3c>)
 800d4e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d4e2:	4b05      	ldr	r3, [pc, #20]	; (800d4f8 <std+0x40>)
 800d4e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d4e6:	4b05      	ldr	r3, [pc, #20]	; (800d4fc <std+0x44>)
 800d4e8:	6224      	str	r4, [r4, #32]
 800d4ea:	6323      	str	r3, [r4, #48]	; 0x30
 800d4ec:	bd10      	pop	{r4, pc}
 800d4ee:	bf00      	nop
 800d4f0:	0800e609 	.word	0x0800e609
 800d4f4:	0800e62b 	.word	0x0800e62b
 800d4f8:	0800e663 	.word	0x0800e663
 800d4fc:	0800e687 	.word	0x0800e687

0800d500 <_cleanup_r>:
 800d500:	4901      	ldr	r1, [pc, #4]	; (800d508 <_cleanup_r+0x8>)
 800d502:	f000 b8af 	b.w	800d664 <_fwalk_reent>
 800d506:	bf00      	nop
 800d508:	08010235 	.word	0x08010235

0800d50c <__sfmoreglue>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	1e4a      	subs	r2, r1, #1
 800d510:	2568      	movs	r5, #104	; 0x68
 800d512:	4355      	muls	r5, r2
 800d514:	460e      	mov	r6, r1
 800d516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d51a:	f000 f901 	bl	800d720 <_malloc_r>
 800d51e:	4604      	mov	r4, r0
 800d520:	b140      	cbz	r0, 800d534 <__sfmoreglue+0x28>
 800d522:	2100      	movs	r1, #0
 800d524:	e9c0 1600 	strd	r1, r6, [r0]
 800d528:	300c      	adds	r0, #12
 800d52a:	60a0      	str	r0, [r4, #8]
 800d52c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d530:	f000 f8ed 	bl	800d70e <memset>
 800d534:	4620      	mov	r0, r4
 800d536:	bd70      	pop	{r4, r5, r6, pc}

0800d538 <__sfp_lock_acquire>:
 800d538:	4801      	ldr	r0, [pc, #4]	; (800d540 <__sfp_lock_acquire+0x8>)
 800d53a:	f000 b8d8 	b.w	800d6ee <__retarget_lock_acquire_recursive>
 800d53e:	bf00      	nop
 800d540:	200063ac 	.word	0x200063ac

0800d544 <__sfp_lock_release>:
 800d544:	4801      	ldr	r0, [pc, #4]	; (800d54c <__sfp_lock_release+0x8>)
 800d546:	f000 b8d3 	b.w	800d6f0 <__retarget_lock_release_recursive>
 800d54a:	bf00      	nop
 800d54c:	200063ac 	.word	0x200063ac

0800d550 <__sinit_lock_acquire>:
 800d550:	4801      	ldr	r0, [pc, #4]	; (800d558 <__sinit_lock_acquire+0x8>)
 800d552:	f000 b8cc 	b.w	800d6ee <__retarget_lock_acquire_recursive>
 800d556:	bf00      	nop
 800d558:	200063a7 	.word	0x200063a7

0800d55c <__sinit_lock_release>:
 800d55c:	4801      	ldr	r0, [pc, #4]	; (800d564 <__sinit_lock_release+0x8>)
 800d55e:	f000 b8c7 	b.w	800d6f0 <__retarget_lock_release_recursive>
 800d562:	bf00      	nop
 800d564:	200063a7 	.word	0x200063a7

0800d568 <__sinit>:
 800d568:	b510      	push	{r4, lr}
 800d56a:	4604      	mov	r4, r0
 800d56c:	f7ff fff0 	bl	800d550 <__sinit_lock_acquire>
 800d570:	69a3      	ldr	r3, [r4, #24]
 800d572:	b11b      	cbz	r3, 800d57c <__sinit+0x14>
 800d574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d578:	f7ff bff0 	b.w	800d55c <__sinit_lock_release>
 800d57c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d580:	6523      	str	r3, [r4, #80]	; 0x50
 800d582:	4b13      	ldr	r3, [pc, #76]	; (800d5d0 <__sinit+0x68>)
 800d584:	4a13      	ldr	r2, [pc, #76]	; (800d5d4 <__sinit+0x6c>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	62a2      	str	r2, [r4, #40]	; 0x28
 800d58a:	42a3      	cmp	r3, r4
 800d58c:	bf04      	itt	eq
 800d58e:	2301      	moveq	r3, #1
 800d590:	61a3      	streq	r3, [r4, #24]
 800d592:	4620      	mov	r0, r4
 800d594:	f000 f820 	bl	800d5d8 <__sfp>
 800d598:	6060      	str	r0, [r4, #4]
 800d59a:	4620      	mov	r0, r4
 800d59c:	f000 f81c 	bl	800d5d8 <__sfp>
 800d5a0:	60a0      	str	r0, [r4, #8]
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f000 f818 	bl	800d5d8 <__sfp>
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	60e0      	str	r0, [r4, #12]
 800d5ac:	2104      	movs	r1, #4
 800d5ae:	6860      	ldr	r0, [r4, #4]
 800d5b0:	f7ff ff82 	bl	800d4b8 <std>
 800d5b4:	68a0      	ldr	r0, [r4, #8]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	2109      	movs	r1, #9
 800d5ba:	f7ff ff7d 	bl	800d4b8 <std>
 800d5be:	68e0      	ldr	r0, [r4, #12]
 800d5c0:	2202      	movs	r2, #2
 800d5c2:	2112      	movs	r1, #18
 800d5c4:	f7ff ff78 	bl	800d4b8 <std>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	61a3      	str	r3, [r4, #24]
 800d5cc:	e7d2      	b.n	800d574 <__sinit+0xc>
 800d5ce:	bf00      	nop
 800d5d0:	080138f4 	.word	0x080138f4
 800d5d4:	0800d501 	.word	0x0800d501

0800d5d8 <__sfp>:
 800d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5da:	4607      	mov	r7, r0
 800d5dc:	f7ff ffac 	bl	800d538 <__sfp_lock_acquire>
 800d5e0:	4b1e      	ldr	r3, [pc, #120]	; (800d65c <__sfp+0x84>)
 800d5e2:	681e      	ldr	r6, [r3, #0]
 800d5e4:	69b3      	ldr	r3, [r6, #24]
 800d5e6:	b913      	cbnz	r3, 800d5ee <__sfp+0x16>
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f7ff ffbd 	bl	800d568 <__sinit>
 800d5ee:	3648      	adds	r6, #72	; 0x48
 800d5f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	d503      	bpl.n	800d600 <__sfp+0x28>
 800d5f8:	6833      	ldr	r3, [r6, #0]
 800d5fa:	b30b      	cbz	r3, 800d640 <__sfp+0x68>
 800d5fc:	6836      	ldr	r6, [r6, #0]
 800d5fe:	e7f7      	b.n	800d5f0 <__sfp+0x18>
 800d600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d604:	b9d5      	cbnz	r5, 800d63c <__sfp+0x64>
 800d606:	4b16      	ldr	r3, [pc, #88]	; (800d660 <__sfp+0x88>)
 800d608:	60e3      	str	r3, [r4, #12]
 800d60a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d60e:	6665      	str	r5, [r4, #100]	; 0x64
 800d610:	f000 f86c 	bl	800d6ec <__retarget_lock_init_recursive>
 800d614:	f7ff ff96 	bl	800d544 <__sfp_lock_release>
 800d618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d61c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d620:	6025      	str	r5, [r4, #0]
 800d622:	61a5      	str	r5, [r4, #24]
 800d624:	2208      	movs	r2, #8
 800d626:	4629      	mov	r1, r5
 800d628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d62c:	f000 f86f 	bl	800d70e <memset>
 800d630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d638:	4620      	mov	r0, r4
 800d63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d63c:	3468      	adds	r4, #104	; 0x68
 800d63e:	e7d9      	b.n	800d5f4 <__sfp+0x1c>
 800d640:	2104      	movs	r1, #4
 800d642:	4638      	mov	r0, r7
 800d644:	f7ff ff62 	bl	800d50c <__sfmoreglue>
 800d648:	4604      	mov	r4, r0
 800d64a:	6030      	str	r0, [r6, #0]
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d1d5      	bne.n	800d5fc <__sfp+0x24>
 800d650:	f7ff ff78 	bl	800d544 <__sfp_lock_release>
 800d654:	230c      	movs	r3, #12
 800d656:	603b      	str	r3, [r7, #0]
 800d658:	e7ee      	b.n	800d638 <__sfp+0x60>
 800d65a:	bf00      	nop
 800d65c:	080138f4 	.word	0x080138f4
 800d660:	ffff0001 	.word	0xffff0001

0800d664 <_fwalk_reent>:
 800d664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d668:	4606      	mov	r6, r0
 800d66a:	4688      	mov	r8, r1
 800d66c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d670:	2700      	movs	r7, #0
 800d672:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d676:	f1b9 0901 	subs.w	r9, r9, #1
 800d67a:	d505      	bpl.n	800d688 <_fwalk_reent+0x24>
 800d67c:	6824      	ldr	r4, [r4, #0]
 800d67e:	2c00      	cmp	r4, #0
 800d680:	d1f7      	bne.n	800d672 <_fwalk_reent+0xe>
 800d682:	4638      	mov	r0, r7
 800d684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d688:	89ab      	ldrh	r3, [r5, #12]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d907      	bls.n	800d69e <_fwalk_reent+0x3a>
 800d68e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d692:	3301      	adds	r3, #1
 800d694:	d003      	beq.n	800d69e <_fwalk_reent+0x3a>
 800d696:	4629      	mov	r1, r5
 800d698:	4630      	mov	r0, r6
 800d69a:	47c0      	blx	r8
 800d69c:	4307      	orrs	r7, r0
 800d69e:	3568      	adds	r5, #104	; 0x68
 800d6a0:	e7e9      	b.n	800d676 <_fwalk_reent+0x12>
	...

0800d6a4 <__libc_init_array>:
 800d6a4:	b570      	push	{r4, r5, r6, lr}
 800d6a6:	4d0d      	ldr	r5, [pc, #52]	; (800d6dc <__libc_init_array+0x38>)
 800d6a8:	4c0d      	ldr	r4, [pc, #52]	; (800d6e0 <__libc_init_array+0x3c>)
 800d6aa:	1b64      	subs	r4, r4, r5
 800d6ac:	10a4      	asrs	r4, r4, #2
 800d6ae:	2600      	movs	r6, #0
 800d6b0:	42a6      	cmp	r6, r4
 800d6b2:	d109      	bne.n	800d6c8 <__libc_init_array+0x24>
 800d6b4:	4d0b      	ldr	r5, [pc, #44]	; (800d6e4 <__libc_init_array+0x40>)
 800d6b6:	4c0c      	ldr	r4, [pc, #48]	; (800d6e8 <__libc_init_array+0x44>)
 800d6b8:	f005 fb64 	bl	8012d84 <_init>
 800d6bc:	1b64      	subs	r4, r4, r5
 800d6be:	10a4      	asrs	r4, r4, #2
 800d6c0:	2600      	movs	r6, #0
 800d6c2:	42a6      	cmp	r6, r4
 800d6c4:	d105      	bne.n	800d6d2 <__libc_init_array+0x2e>
 800d6c6:	bd70      	pop	{r4, r5, r6, pc}
 800d6c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6cc:	4798      	blx	r3
 800d6ce:	3601      	adds	r6, #1
 800d6d0:	e7ee      	b.n	800d6b0 <__libc_init_array+0xc>
 800d6d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6d6:	4798      	blx	r3
 800d6d8:	3601      	adds	r6, #1
 800d6da:	e7f2      	b.n	800d6c2 <__libc_init_array+0x1e>
 800d6dc:	08013d98 	.word	0x08013d98
 800d6e0:	08013d98 	.word	0x08013d98
 800d6e4:	08013d98 	.word	0x08013d98
 800d6e8:	08013d9c 	.word	0x08013d9c

0800d6ec <__retarget_lock_init_recursive>:
 800d6ec:	4770      	bx	lr

0800d6ee <__retarget_lock_acquire_recursive>:
 800d6ee:	4770      	bx	lr

0800d6f0 <__retarget_lock_release_recursive>:
 800d6f0:	4770      	bx	lr

0800d6f2 <memcpy>:
 800d6f2:	440a      	add	r2, r1
 800d6f4:	4291      	cmp	r1, r2
 800d6f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6fa:	d100      	bne.n	800d6fe <memcpy+0xc>
 800d6fc:	4770      	bx	lr
 800d6fe:	b510      	push	{r4, lr}
 800d700:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d704:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d708:	4291      	cmp	r1, r2
 800d70a:	d1f9      	bne.n	800d700 <memcpy+0xe>
 800d70c:	bd10      	pop	{r4, pc}

0800d70e <memset>:
 800d70e:	4402      	add	r2, r0
 800d710:	4603      	mov	r3, r0
 800d712:	4293      	cmp	r3, r2
 800d714:	d100      	bne.n	800d718 <memset+0xa>
 800d716:	4770      	bx	lr
 800d718:	f803 1b01 	strb.w	r1, [r3], #1
 800d71c:	e7f9      	b.n	800d712 <memset+0x4>
	...

0800d720 <_malloc_r>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	1ccd      	adds	r5, r1, #3
 800d724:	f025 0503 	bic.w	r5, r5, #3
 800d728:	3508      	adds	r5, #8
 800d72a:	2d0c      	cmp	r5, #12
 800d72c:	bf38      	it	cc
 800d72e:	250c      	movcc	r5, #12
 800d730:	2d00      	cmp	r5, #0
 800d732:	4606      	mov	r6, r0
 800d734:	db01      	blt.n	800d73a <_malloc_r+0x1a>
 800d736:	42a9      	cmp	r1, r5
 800d738:	d903      	bls.n	800d742 <_malloc_r+0x22>
 800d73a:	230c      	movs	r3, #12
 800d73c:	6033      	str	r3, [r6, #0]
 800d73e:	2000      	movs	r0, #0
 800d740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d742:	f003 f953 	bl	80109ec <__malloc_lock>
 800d746:	4921      	ldr	r1, [pc, #132]	; (800d7cc <_malloc_r+0xac>)
 800d748:	680a      	ldr	r2, [r1, #0]
 800d74a:	4614      	mov	r4, r2
 800d74c:	b99c      	cbnz	r4, 800d776 <_malloc_r+0x56>
 800d74e:	4f20      	ldr	r7, [pc, #128]	; (800d7d0 <_malloc_r+0xb0>)
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	b923      	cbnz	r3, 800d75e <_malloc_r+0x3e>
 800d754:	4621      	mov	r1, r4
 800d756:	4630      	mov	r0, r6
 800d758:	f000 ff20 	bl	800e59c <_sbrk_r>
 800d75c:	6038      	str	r0, [r7, #0]
 800d75e:	4629      	mov	r1, r5
 800d760:	4630      	mov	r0, r6
 800d762:	f000 ff1b 	bl	800e59c <_sbrk_r>
 800d766:	1c43      	adds	r3, r0, #1
 800d768:	d123      	bne.n	800d7b2 <_malloc_r+0x92>
 800d76a:	230c      	movs	r3, #12
 800d76c:	6033      	str	r3, [r6, #0]
 800d76e:	4630      	mov	r0, r6
 800d770:	f003 f942 	bl	80109f8 <__malloc_unlock>
 800d774:	e7e3      	b.n	800d73e <_malloc_r+0x1e>
 800d776:	6823      	ldr	r3, [r4, #0]
 800d778:	1b5b      	subs	r3, r3, r5
 800d77a:	d417      	bmi.n	800d7ac <_malloc_r+0x8c>
 800d77c:	2b0b      	cmp	r3, #11
 800d77e:	d903      	bls.n	800d788 <_malloc_r+0x68>
 800d780:	6023      	str	r3, [r4, #0]
 800d782:	441c      	add	r4, r3
 800d784:	6025      	str	r5, [r4, #0]
 800d786:	e004      	b.n	800d792 <_malloc_r+0x72>
 800d788:	6863      	ldr	r3, [r4, #4]
 800d78a:	42a2      	cmp	r2, r4
 800d78c:	bf0c      	ite	eq
 800d78e:	600b      	streq	r3, [r1, #0]
 800d790:	6053      	strne	r3, [r2, #4]
 800d792:	4630      	mov	r0, r6
 800d794:	f003 f930 	bl	80109f8 <__malloc_unlock>
 800d798:	f104 000b 	add.w	r0, r4, #11
 800d79c:	1d23      	adds	r3, r4, #4
 800d79e:	f020 0007 	bic.w	r0, r0, #7
 800d7a2:	1ac2      	subs	r2, r0, r3
 800d7a4:	d0cc      	beq.n	800d740 <_malloc_r+0x20>
 800d7a6:	1a1b      	subs	r3, r3, r0
 800d7a8:	50a3      	str	r3, [r4, r2]
 800d7aa:	e7c9      	b.n	800d740 <_malloc_r+0x20>
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	6864      	ldr	r4, [r4, #4]
 800d7b0:	e7cc      	b.n	800d74c <_malloc_r+0x2c>
 800d7b2:	1cc4      	adds	r4, r0, #3
 800d7b4:	f024 0403 	bic.w	r4, r4, #3
 800d7b8:	42a0      	cmp	r0, r4
 800d7ba:	d0e3      	beq.n	800d784 <_malloc_r+0x64>
 800d7bc:	1a21      	subs	r1, r4, r0
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f000 feec 	bl	800e59c <_sbrk_r>
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	d1dd      	bne.n	800d784 <_malloc_r+0x64>
 800d7c8:	e7cf      	b.n	800d76a <_malloc_r+0x4a>
 800d7ca:	bf00      	nop
 800d7cc:	2000598c 	.word	0x2000598c
 800d7d0:	20005990 	.word	0x20005990

0800d7d4 <__cvt>:
 800d7d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d8:	ec55 4b10 	vmov	r4, r5, d0
 800d7dc:	2d00      	cmp	r5, #0
 800d7de:	460e      	mov	r6, r1
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	462b      	mov	r3, r5
 800d7e4:	bfbb      	ittet	lt
 800d7e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d7ea:	461d      	movlt	r5, r3
 800d7ec:	2300      	movge	r3, #0
 800d7ee:	232d      	movlt	r3, #45	; 0x2d
 800d7f0:	700b      	strb	r3, [r1, #0]
 800d7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d7f8:	4691      	mov	r9, r2
 800d7fa:	f023 0820 	bic.w	r8, r3, #32
 800d7fe:	bfbc      	itt	lt
 800d800:	4622      	movlt	r2, r4
 800d802:	4614      	movlt	r4, r2
 800d804:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d808:	d005      	beq.n	800d816 <__cvt+0x42>
 800d80a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d80e:	d100      	bne.n	800d812 <__cvt+0x3e>
 800d810:	3601      	adds	r6, #1
 800d812:	2102      	movs	r1, #2
 800d814:	e000      	b.n	800d818 <__cvt+0x44>
 800d816:	2103      	movs	r1, #3
 800d818:	ab03      	add	r3, sp, #12
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	ab02      	add	r3, sp, #8
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	ec45 4b10 	vmov	d0, r4, r5
 800d824:	4653      	mov	r3, sl
 800d826:	4632      	mov	r2, r6
 800d828:	f001 fe92 	bl	800f550 <_dtoa_r>
 800d82c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d830:	4607      	mov	r7, r0
 800d832:	d102      	bne.n	800d83a <__cvt+0x66>
 800d834:	f019 0f01 	tst.w	r9, #1
 800d838:	d022      	beq.n	800d880 <__cvt+0xac>
 800d83a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d83e:	eb07 0906 	add.w	r9, r7, r6
 800d842:	d110      	bne.n	800d866 <__cvt+0x92>
 800d844:	783b      	ldrb	r3, [r7, #0]
 800d846:	2b30      	cmp	r3, #48	; 0x30
 800d848:	d10a      	bne.n	800d860 <__cvt+0x8c>
 800d84a:	2200      	movs	r2, #0
 800d84c:	2300      	movs	r3, #0
 800d84e:	4620      	mov	r0, r4
 800d850:	4629      	mov	r1, r5
 800d852:	f7f3 f939 	bl	8000ac8 <__aeabi_dcmpeq>
 800d856:	b918      	cbnz	r0, 800d860 <__cvt+0x8c>
 800d858:	f1c6 0601 	rsb	r6, r6, #1
 800d85c:	f8ca 6000 	str.w	r6, [sl]
 800d860:	f8da 3000 	ldr.w	r3, [sl]
 800d864:	4499      	add	r9, r3
 800d866:	2200      	movs	r2, #0
 800d868:	2300      	movs	r3, #0
 800d86a:	4620      	mov	r0, r4
 800d86c:	4629      	mov	r1, r5
 800d86e:	f7f3 f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d872:	b108      	cbz	r0, 800d878 <__cvt+0xa4>
 800d874:	f8cd 900c 	str.w	r9, [sp, #12]
 800d878:	2230      	movs	r2, #48	; 0x30
 800d87a:	9b03      	ldr	r3, [sp, #12]
 800d87c:	454b      	cmp	r3, r9
 800d87e:	d307      	bcc.n	800d890 <__cvt+0xbc>
 800d880:	9b03      	ldr	r3, [sp, #12]
 800d882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d884:	1bdb      	subs	r3, r3, r7
 800d886:	4638      	mov	r0, r7
 800d888:	6013      	str	r3, [r2, #0]
 800d88a:	b004      	add	sp, #16
 800d88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d890:	1c59      	adds	r1, r3, #1
 800d892:	9103      	str	r1, [sp, #12]
 800d894:	701a      	strb	r2, [r3, #0]
 800d896:	e7f0      	b.n	800d87a <__cvt+0xa6>

0800d898 <__exponent>:
 800d898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d89a:	4603      	mov	r3, r0
 800d89c:	2900      	cmp	r1, #0
 800d89e:	bfb8      	it	lt
 800d8a0:	4249      	neglt	r1, r1
 800d8a2:	f803 2b02 	strb.w	r2, [r3], #2
 800d8a6:	bfb4      	ite	lt
 800d8a8:	222d      	movlt	r2, #45	; 0x2d
 800d8aa:	222b      	movge	r2, #43	; 0x2b
 800d8ac:	2909      	cmp	r1, #9
 800d8ae:	7042      	strb	r2, [r0, #1]
 800d8b0:	dd2a      	ble.n	800d908 <__exponent+0x70>
 800d8b2:	f10d 0407 	add.w	r4, sp, #7
 800d8b6:	46a4      	mov	ip, r4
 800d8b8:	270a      	movs	r7, #10
 800d8ba:	46a6      	mov	lr, r4
 800d8bc:	460a      	mov	r2, r1
 800d8be:	fb91 f6f7 	sdiv	r6, r1, r7
 800d8c2:	fb07 1516 	mls	r5, r7, r6, r1
 800d8c6:	3530      	adds	r5, #48	; 0x30
 800d8c8:	2a63      	cmp	r2, #99	; 0x63
 800d8ca:	f104 34ff 	add.w	r4, r4, #4294967295
 800d8ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d8d2:	4631      	mov	r1, r6
 800d8d4:	dcf1      	bgt.n	800d8ba <__exponent+0x22>
 800d8d6:	3130      	adds	r1, #48	; 0x30
 800d8d8:	f1ae 0502 	sub.w	r5, lr, #2
 800d8dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d8e0:	1c44      	adds	r4, r0, #1
 800d8e2:	4629      	mov	r1, r5
 800d8e4:	4561      	cmp	r1, ip
 800d8e6:	d30a      	bcc.n	800d8fe <__exponent+0x66>
 800d8e8:	f10d 0209 	add.w	r2, sp, #9
 800d8ec:	eba2 020e 	sub.w	r2, r2, lr
 800d8f0:	4565      	cmp	r5, ip
 800d8f2:	bf88      	it	hi
 800d8f4:	2200      	movhi	r2, #0
 800d8f6:	4413      	add	r3, r2
 800d8f8:	1a18      	subs	r0, r3, r0
 800d8fa:	b003      	add	sp, #12
 800d8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d902:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d906:	e7ed      	b.n	800d8e4 <__exponent+0x4c>
 800d908:	2330      	movs	r3, #48	; 0x30
 800d90a:	3130      	adds	r1, #48	; 0x30
 800d90c:	7083      	strb	r3, [r0, #2]
 800d90e:	70c1      	strb	r1, [r0, #3]
 800d910:	1d03      	adds	r3, r0, #4
 800d912:	e7f1      	b.n	800d8f8 <__exponent+0x60>

0800d914 <_printf_float>:
 800d914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d918:	ed2d 8b02 	vpush	{d8}
 800d91c:	b08d      	sub	sp, #52	; 0x34
 800d91e:	460c      	mov	r4, r1
 800d920:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d924:	4616      	mov	r6, r2
 800d926:	461f      	mov	r7, r3
 800d928:	4605      	mov	r5, r0
 800d92a:	f003 f82f 	bl	801098c <_localeconv_r>
 800d92e:	f8d0 a000 	ldr.w	sl, [r0]
 800d932:	4650      	mov	r0, sl
 800d934:	f7f2 fc4c 	bl	80001d0 <strlen>
 800d938:	2300      	movs	r3, #0
 800d93a:	930a      	str	r3, [sp, #40]	; 0x28
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	9305      	str	r3, [sp, #20]
 800d940:	f8d8 3000 	ldr.w	r3, [r8]
 800d944:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d948:	3307      	adds	r3, #7
 800d94a:	f023 0307 	bic.w	r3, r3, #7
 800d94e:	f103 0208 	add.w	r2, r3, #8
 800d952:	f8c8 2000 	str.w	r2, [r8]
 800d956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d95e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d962:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d966:	9307      	str	r3, [sp, #28]
 800d968:	f8cd 8018 	str.w	r8, [sp, #24]
 800d96c:	ee08 0a10 	vmov	s16, r0
 800d970:	4b9f      	ldr	r3, [pc, #636]	; (800dbf0 <_printf_float+0x2dc>)
 800d972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d976:	f04f 32ff 	mov.w	r2, #4294967295
 800d97a:	f7f3 f8d7 	bl	8000b2c <__aeabi_dcmpun>
 800d97e:	bb88      	cbnz	r0, 800d9e4 <_printf_float+0xd0>
 800d980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d984:	4b9a      	ldr	r3, [pc, #616]	; (800dbf0 <_printf_float+0x2dc>)
 800d986:	f04f 32ff 	mov.w	r2, #4294967295
 800d98a:	f7f3 f8b1 	bl	8000af0 <__aeabi_dcmple>
 800d98e:	bb48      	cbnz	r0, 800d9e4 <_printf_float+0xd0>
 800d990:	2200      	movs	r2, #0
 800d992:	2300      	movs	r3, #0
 800d994:	4640      	mov	r0, r8
 800d996:	4649      	mov	r1, r9
 800d998:	f7f3 f8a0 	bl	8000adc <__aeabi_dcmplt>
 800d99c:	b110      	cbz	r0, 800d9a4 <_printf_float+0x90>
 800d99e:	232d      	movs	r3, #45	; 0x2d
 800d9a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9a4:	4b93      	ldr	r3, [pc, #588]	; (800dbf4 <_printf_float+0x2e0>)
 800d9a6:	4894      	ldr	r0, [pc, #592]	; (800dbf8 <_printf_float+0x2e4>)
 800d9a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d9ac:	bf94      	ite	ls
 800d9ae:	4698      	movls	r8, r3
 800d9b0:	4680      	movhi	r8, r0
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	6123      	str	r3, [r4, #16]
 800d9b6:	9b05      	ldr	r3, [sp, #20]
 800d9b8:	f023 0204 	bic.w	r2, r3, #4
 800d9bc:	6022      	str	r2, [r4, #0]
 800d9be:	f04f 0900 	mov.w	r9, #0
 800d9c2:	9700      	str	r7, [sp, #0]
 800d9c4:	4633      	mov	r3, r6
 800d9c6:	aa0b      	add	r2, sp, #44	; 0x2c
 800d9c8:	4621      	mov	r1, r4
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f000 f9d8 	bl	800dd80 <_printf_common>
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	f040 8090 	bne.w	800daf6 <_printf_float+0x1e2>
 800d9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9da:	b00d      	add	sp, #52	; 0x34
 800d9dc:	ecbd 8b02 	vpop	{d8}
 800d9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e4:	4642      	mov	r2, r8
 800d9e6:	464b      	mov	r3, r9
 800d9e8:	4640      	mov	r0, r8
 800d9ea:	4649      	mov	r1, r9
 800d9ec:	f7f3 f89e 	bl	8000b2c <__aeabi_dcmpun>
 800d9f0:	b140      	cbz	r0, 800da04 <_printf_float+0xf0>
 800d9f2:	464b      	mov	r3, r9
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	bfbc      	itt	lt
 800d9f8:	232d      	movlt	r3, #45	; 0x2d
 800d9fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d9fe:	487f      	ldr	r0, [pc, #508]	; (800dbfc <_printf_float+0x2e8>)
 800da00:	4b7f      	ldr	r3, [pc, #508]	; (800dc00 <_printf_float+0x2ec>)
 800da02:	e7d1      	b.n	800d9a8 <_printf_float+0x94>
 800da04:	6863      	ldr	r3, [r4, #4]
 800da06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800da0a:	9206      	str	r2, [sp, #24]
 800da0c:	1c5a      	adds	r2, r3, #1
 800da0e:	d13f      	bne.n	800da90 <_printf_float+0x17c>
 800da10:	2306      	movs	r3, #6
 800da12:	6063      	str	r3, [r4, #4]
 800da14:	9b05      	ldr	r3, [sp, #20]
 800da16:	6861      	ldr	r1, [r4, #4]
 800da18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800da1c:	2300      	movs	r3, #0
 800da1e:	9303      	str	r3, [sp, #12]
 800da20:	ab0a      	add	r3, sp, #40	; 0x28
 800da22:	e9cd b301 	strd	fp, r3, [sp, #4]
 800da26:	ab09      	add	r3, sp, #36	; 0x24
 800da28:	ec49 8b10 	vmov	d0, r8, r9
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	6022      	str	r2, [r4, #0]
 800da30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800da34:	4628      	mov	r0, r5
 800da36:	f7ff fecd 	bl	800d7d4 <__cvt>
 800da3a:	9b06      	ldr	r3, [sp, #24]
 800da3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da3e:	2b47      	cmp	r3, #71	; 0x47
 800da40:	4680      	mov	r8, r0
 800da42:	d108      	bne.n	800da56 <_printf_float+0x142>
 800da44:	1cc8      	adds	r0, r1, #3
 800da46:	db02      	blt.n	800da4e <_printf_float+0x13a>
 800da48:	6863      	ldr	r3, [r4, #4]
 800da4a:	4299      	cmp	r1, r3
 800da4c:	dd41      	ble.n	800dad2 <_printf_float+0x1be>
 800da4e:	f1ab 0b02 	sub.w	fp, fp, #2
 800da52:	fa5f fb8b 	uxtb.w	fp, fp
 800da56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da5a:	d820      	bhi.n	800da9e <_printf_float+0x18a>
 800da5c:	3901      	subs	r1, #1
 800da5e:	465a      	mov	r2, fp
 800da60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da64:	9109      	str	r1, [sp, #36]	; 0x24
 800da66:	f7ff ff17 	bl	800d898 <__exponent>
 800da6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da6c:	1813      	adds	r3, r2, r0
 800da6e:	2a01      	cmp	r2, #1
 800da70:	4681      	mov	r9, r0
 800da72:	6123      	str	r3, [r4, #16]
 800da74:	dc02      	bgt.n	800da7c <_printf_float+0x168>
 800da76:	6822      	ldr	r2, [r4, #0]
 800da78:	07d2      	lsls	r2, r2, #31
 800da7a:	d501      	bpl.n	800da80 <_printf_float+0x16c>
 800da7c:	3301      	adds	r3, #1
 800da7e:	6123      	str	r3, [r4, #16]
 800da80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800da84:	2b00      	cmp	r3, #0
 800da86:	d09c      	beq.n	800d9c2 <_printf_float+0xae>
 800da88:	232d      	movs	r3, #45	; 0x2d
 800da8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da8e:	e798      	b.n	800d9c2 <_printf_float+0xae>
 800da90:	9a06      	ldr	r2, [sp, #24]
 800da92:	2a47      	cmp	r2, #71	; 0x47
 800da94:	d1be      	bne.n	800da14 <_printf_float+0x100>
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1bc      	bne.n	800da14 <_printf_float+0x100>
 800da9a:	2301      	movs	r3, #1
 800da9c:	e7b9      	b.n	800da12 <_printf_float+0xfe>
 800da9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800daa2:	d118      	bne.n	800dad6 <_printf_float+0x1c2>
 800daa4:	2900      	cmp	r1, #0
 800daa6:	6863      	ldr	r3, [r4, #4]
 800daa8:	dd0b      	ble.n	800dac2 <_printf_float+0x1ae>
 800daaa:	6121      	str	r1, [r4, #16]
 800daac:	b913      	cbnz	r3, 800dab4 <_printf_float+0x1a0>
 800daae:	6822      	ldr	r2, [r4, #0]
 800dab0:	07d0      	lsls	r0, r2, #31
 800dab2:	d502      	bpl.n	800daba <_printf_float+0x1a6>
 800dab4:	3301      	adds	r3, #1
 800dab6:	440b      	add	r3, r1
 800dab8:	6123      	str	r3, [r4, #16]
 800daba:	65a1      	str	r1, [r4, #88]	; 0x58
 800dabc:	f04f 0900 	mov.w	r9, #0
 800dac0:	e7de      	b.n	800da80 <_printf_float+0x16c>
 800dac2:	b913      	cbnz	r3, 800daca <_printf_float+0x1b6>
 800dac4:	6822      	ldr	r2, [r4, #0]
 800dac6:	07d2      	lsls	r2, r2, #31
 800dac8:	d501      	bpl.n	800dace <_printf_float+0x1ba>
 800daca:	3302      	adds	r3, #2
 800dacc:	e7f4      	b.n	800dab8 <_printf_float+0x1a4>
 800dace:	2301      	movs	r3, #1
 800dad0:	e7f2      	b.n	800dab8 <_printf_float+0x1a4>
 800dad2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dad8:	4299      	cmp	r1, r3
 800dada:	db05      	blt.n	800dae8 <_printf_float+0x1d4>
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	6121      	str	r1, [r4, #16]
 800dae0:	07d8      	lsls	r0, r3, #31
 800dae2:	d5ea      	bpl.n	800daba <_printf_float+0x1a6>
 800dae4:	1c4b      	adds	r3, r1, #1
 800dae6:	e7e7      	b.n	800dab8 <_printf_float+0x1a4>
 800dae8:	2900      	cmp	r1, #0
 800daea:	bfd4      	ite	le
 800daec:	f1c1 0202 	rsble	r2, r1, #2
 800daf0:	2201      	movgt	r2, #1
 800daf2:	4413      	add	r3, r2
 800daf4:	e7e0      	b.n	800dab8 <_printf_float+0x1a4>
 800daf6:	6823      	ldr	r3, [r4, #0]
 800daf8:	055a      	lsls	r2, r3, #21
 800dafa:	d407      	bmi.n	800db0c <_printf_float+0x1f8>
 800dafc:	6923      	ldr	r3, [r4, #16]
 800dafe:	4642      	mov	r2, r8
 800db00:	4631      	mov	r1, r6
 800db02:	4628      	mov	r0, r5
 800db04:	47b8      	blx	r7
 800db06:	3001      	adds	r0, #1
 800db08:	d12c      	bne.n	800db64 <_printf_float+0x250>
 800db0a:	e764      	b.n	800d9d6 <_printf_float+0xc2>
 800db0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db10:	f240 80e0 	bls.w	800dcd4 <_printf_float+0x3c0>
 800db14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db18:	2200      	movs	r2, #0
 800db1a:	2300      	movs	r3, #0
 800db1c:	f7f2 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800db20:	2800      	cmp	r0, #0
 800db22:	d034      	beq.n	800db8e <_printf_float+0x27a>
 800db24:	4a37      	ldr	r2, [pc, #220]	; (800dc04 <_printf_float+0x2f0>)
 800db26:	2301      	movs	r3, #1
 800db28:	4631      	mov	r1, r6
 800db2a:	4628      	mov	r0, r5
 800db2c:	47b8      	blx	r7
 800db2e:	3001      	adds	r0, #1
 800db30:	f43f af51 	beq.w	800d9d6 <_printf_float+0xc2>
 800db34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db38:	429a      	cmp	r2, r3
 800db3a:	db02      	blt.n	800db42 <_printf_float+0x22e>
 800db3c:	6823      	ldr	r3, [r4, #0]
 800db3e:	07d8      	lsls	r0, r3, #31
 800db40:	d510      	bpl.n	800db64 <_printf_float+0x250>
 800db42:	ee18 3a10 	vmov	r3, s16
 800db46:	4652      	mov	r2, sl
 800db48:	4631      	mov	r1, r6
 800db4a:	4628      	mov	r0, r5
 800db4c:	47b8      	blx	r7
 800db4e:	3001      	adds	r0, #1
 800db50:	f43f af41 	beq.w	800d9d6 <_printf_float+0xc2>
 800db54:	f04f 0800 	mov.w	r8, #0
 800db58:	f104 091a 	add.w	r9, r4, #26
 800db5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db5e:	3b01      	subs	r3, #1
 800db60:	4543      	cmp	r3, r8
 800db62:	dc09      	bgt.n	800db78 <_printf_float+0x264>
 800db64:	6823      	ldr	r3, [r4, #0]
 800db66:	079b      	lsls	r3, r3, #30
 800db68:	f100 8105 	bmi.w	800dd76 <_printf_float+0x462>
 800db6c:	68e0      	ldr	r0, [r4, #12]
 800db6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db70:	4298      	cmp	r0, r3
 800db72:	bfb8      	it	lt
 800db74:	4618      	movlt	r0, r3
 800db76:	e730      	b.n	800d9da <_printf_float+0xc6>
 800db78:	2301      	movs	r3, #1
 800db7a:	464a      	mov	r2, r9
 800db7c:	4631      	mov	r1, r6
 800db7e:	4628      	mov	r0, r5
 800db80:	47b8      	blx	r7
 800db82:	3001      	adds	r0, #1
 800db84:	f43f af27 	beq.w	800d9d6 <_printf_float+0xc2>
 800db88:	f108 0801 	add.w	r8, r8, #1
 800db8c:	e7e6      	b.n	800db5c <_printf_float+0x248>
 800db8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db90:	2b00      	cmp	r3, #0
 800db92:	dc39      	bgt.n	800dc08 <_printf_float+0x2f4>
 800db94:	4a1b      	ldr	r2, [pc, #108]	; (800dc04 <_printf_float+0x2f0>)
 800db96:	2301      	movs	r3, #1
 800db98:	4631      	mov	r1, r6
 800db9a:	4628      	mov	r0, r5
 800db9c:	47b8      	blx	r7
 800db9e:	3001      	adds	r0, #1
 800dba0:	f43f af19 	beq.w	800d9d6 <_printf_float+0xc2>
 800dba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	d102      	bne.n	800dbb2 <_printf_float+0x29e>
 800dbac:	6823      	ldr	r3, [r4, #0]
 800dbae:	07d9      	lsls	r1, r3, #31
 800dbb0:	d5d8      	bpl.n	800db64 <_printf_float+0x250>
 800dbb2:	ee18 3a10 	vmov	r3, s16
 800dbb6:	4652      	mov	r2, sl
 800dbb8:	4631      	mov	r1, r6
 800dbba:	4628      	mov	r0, r5
 800dbbc:	47b8      	blx	r7
 800dbbe:	3001      	adds	r0, #1
 800dbc0:	f43f af09 	beq.w	800d9d6 <_printf_float+0xc2>
 800dbc4:	f04f 0900 	mov.w	r9, #0
 800dbc8:	f104 0a1a 	add.w	sl, r4, #26
 800dbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbce:	425b      	negs	r3, r3
 800dbd0:	454b      	cmp	r3, r9
 800dbd2:	dc01      	bgt.n	800dbd8 <_printf_float+0x2c4>
 800dbd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd6:	e792      	b.n	800dafe <_printf_float+0x1ea>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	4652      	mov	r2, sl
 800dbdc:	4631      	mov	r1, r6
 800dbde:	4628      	mov	r0, r5
 800dbe0:	47b8      	blx	r7
 800dbe2:	3001      	adds	r0, #1
 800dbe4:	f43f aef7 	beq.w	800d9d6 <_printf_float+0xc2>
 800dbe8:	f109 0901 	add.w	r9, r9, #1
 800dbec:	e7ee      	b.n	800dbcc <_printf_float+0x2b8>
 800dbee:	bf00      	nop
 800dbf0:	7fefffff 	.word	0x7fefffff
 800dbf4:	080138f8 	.word	0x080138f8
 800dbf8:	080138fc 	.word	0x080138fc
 800dbfc:	08013904 	.word	0x08013904
 800dc00:	08013900 	.word	0x08013900
 800dc04:	08013908 	.word	0x08013908
 800dc08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	bfa8      	it	ge
 800dc10:	461a      	movge	r2, r3
 800dc12:	2a00      	cmp	r2, #0
 800dc14:	4691      	mov	r9, r2
 800dc16:	dc37      	bgt.n	800dc88 <_printf_float+0x374>
 800dc18:	f04f 0b00 	mov.w	fp, #0
 800dc1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc20:	f104 021a 	add.w	r2, r4, #26
 800dc24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc26:	9305      	str	r3, [sp, #20]
 800dc28:	eba3 0309 	sub.w	r3, r3, r9
 800dc2c:	455b      	cmp	r3, fp
 800dc2e:	dc33      	bgt.n	800dc98 <_printf_float+0x384>
 800dc30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc34:	429a      	cmp	r2, r3
 800dc36:	db3b      	blt.n	800dcb0 <_printf_float+0x39c>
 800dc38:	6823      	ldr	r3, [r4, #0]
 800dc3a:	07da      	lsls	r2, r3, #31
 800dc3c:	d438      	bmi.n	800dcb0 <_printf_float+0x39c>
 800dc3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc40:	9b05      	ldr	r3, [sp, #20]
 800dc42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc44:	1ad3      	subs	r3, r2, r3
 800dc46:	eba2 0901 	sub.w	r9, r2, r1
 800dc4a:	4599      	cmp	r9, r3
 800dc4c:	bfa8      	it	ge
 800dc4e:	4699      	movge	r9, r3
 800dc50:	f1b9 0f00 	cmp.w	r9, #0
 800dc54:	dc35      	bgt.n	800dcc2 <_printf_float+0x3ae>
 800dc56:	f04f 0800 	mov.w	r8, #0
 800dc5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc5e:	f104 0a1a 	add.w	sl, r4, #26
 800dc62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc66:	1a9b      	subs	r3, r3, r2
 800dc68:	eba3 0309 	sub.w	r3, r3, r9
 800dc6c:	4543      	cmp	r3, r8
 800dc6e:	f77f af79 	ble.w	800db64 <_printf_float+0x250>
 800dc72:	2301      	movs	r3, #1
 800dc74:	4652      	mov	r2, sl
 800dc76:	4631      	mov	r1, r6
 800dc78:	4628      	mov	r0, r5
 800dc7a:	47b8      	blx	r7
 800dc7c:	3001      	adds	r0, #1
 800dc7e:	f43f aeaa 	beq.w	800d9d6 <_printf_float+0xc2>
 800dc82:	f108 0801 	add.w	r8, r8, #1
 800dc86:	e7ec      	b.n	800dc62 <_printf_float+0x34e>
 800dc88:	4613      	mov	r3, r2
 800dc8a:	4631      	mov	r1, r6
 800dc8c:	4642      	mov	r2, r8
 800dc8e:	4628      	mov	r0, r5
 800dc90:	47b8      	blx	r7
 800dc92:	3001      	adds	r0, #1
 800dc94:	d1c0      	bne.n	800dc18 <_printf_float+0x304>
 800dc96:	e69e      	b.n	800d9d6 <_printf_float+0xc2>
 800dc98:	2301      	movs	r3, #1
 800dc9a:	4631      	mov	r1, r6
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	9205      	str	r2, [sp, #20]
 800dca0:	47b8      	blx	r7
 800dca2:	3001      	adds	r0, #1
 800dca4:	f43f ae97 	beq.w	800d9d6 <_printf_float+0xc2>
 800dca8:	9a05      	ldr	r2, [sp, #20]
 800dcaa:	f10b 0b01 	add.w	fp, fp, #1
 800dcae:	e7b9      	b.n	800dc24 <_printf_float+0x310>
 800dcb0:	ee18 3a10 	vmov	r3, s16
 800dcb4:	4652      	mov	r2, sl
 800dcb6:	4631      	mov	r1, r6
 800dcb8:	4628      	mov	r0, r5
 800dcba:	47b8      	blx	r7
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	d1be      	bne.n	800dc3e <_printf_float+0x32a>
 800dcc0:	e689      	b.n	800d9d6 <_printf_float+0xc2>
 800dcc2:	9a05      	ldr	r2, [sp, #20]
 800dcc4:	464b      	mov	r3, r9
 800dcc6:	4442      	add	r2, r8
 800dcc8:	4631      	mov	r1, r6
 800dcca:	4628      	mov	r0, r5
 800dccc:	47b8      	blx	r7
 800dcce:	3001      	adds	r0, #1
 800dcd0:	d1c1      	bne.n	800dc56 <_printf_float+0x342>
 800dcd2:	e680      	b.n	800d9d6 <_printf_float+0xc2>
 800dcd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcd6:	2a01      	cmp	r2, #1
 800dcd8:	dc01      	bgt.n	800dcde <_printf_float+0x3ca>
 800dcda:	07db      	lsls	r3, r3, #31
 800dcdc:	d538      	bpl.n	800dd50 <_printf_float+0x43c>
 800dcde:	2301      	movs	r3, #1
 800dce0:	4642      	mov	r2, r8
 800dce2:	4631      	mov	r1, r6
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b8      	blx	r7
 800dce8:	3001      	adds	r0, #1
 800dcea:	f43f ae74 	beq.w	800d9d6 <_printf_float+0xc2>
 800dcee:	ee18 3a10 	vmov	r3, s16
 800dcf2:	4652      	mov	r2, sl
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	47b8      	blx	r7
 800dcfa:	3001      	adds	r0, #1
 800dcfc:	f43f ae6b 	beq.w	800d9d6 <_printf_float+0xc2>
 800dd00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd04:	2200      	movs	r2, #0
 800dd06:	2300      	movs	r3, #0
 800dd08:	f7f2 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd0c:	b9d8      	cbnz	r0, 800dd46 <_printf_float+0x432>
 800dd0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd10:	f108 0201 	add.w	r2, r8, #1
 800dd14:	3b01      	subs	r3, #1
 800dd16:	4631      	mov	r1, r6
 800dd18:	4628      	mov	r0, r5
 800dd1a:	47b8      	blx	r7
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	d10e      	bne.n	800dd3e <_printf_float+0x42a>
 800dd20:	e659      	b.n	800d9d6 <_printf_float+0xc2>
 800dd22:	2301      	movs	r3, #1
 800dd24:	4652      	mov	r2, sl
 800dd26:	4631      	mov	r1, r6
 800dd28:	4628      	mov	r0, r5
 800dd2a:	47b8      	blx	r7
 800dd2c:	3001      	adds	r0, #1
 800dd2e:	f43f ae52 	beq.w	800d9d6 <_printf_float+0xc2>
 800dd32:	f108 0801 	add.w	r8, r8, #1
 800dd36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	4543      	cmp	r3, r8
 800dd3c:	dcf1      	bgt.n	800dd22 <_printf_float+0x40e>
 800dd3e:	464b      	mov	r3, r9
 800dd40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dd44:	e6dc      	b.n	800db00 <_printf_float+0x1ec>
 800dd46:	f04f 0800 	mov.w	r8, #0
 800dd4a:	f104 0a1a 	add.w	sl, r4, #26
 800dd4e:	e7f2      	b.n	800dd36 <_printf_float+0x422>
 800dd50:	2301      	movs	r3, #1
 800dd52:	4642      	mov	r2, r8
 800dd54:	e7df      	b.n	800dd16 <_printf_float+0x402>
 800dd56:	2301      	movs	r3, #1
 800dd58:	464a      	mov	r2, r9
 800dd5a:	4631      	mov	r1, r6
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	47b8      	blx	r7
 800dd60:	3001      	adds	r0, #1
 800dd62:	f43f ae38 	beq.w	800d9d6 <_printf_float+0xc2>
 800dd66:	f108 0801 	add.w	r8, r8, #1
 800dd6a:	68e3      	ldr	r3, [r4, #12]
 800dd6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd6e:	1a5b      	subs	r3, r3, r1
 800dd70:	4543      	cmp	r3, r8
 800dd72:	dcf0      	bgt.n	800dd56 <_printf_float+0x442>
 800dd74:	e6fa      	b.n	800db6c <_printf_float+0x258>
 800dd76:	f04f 0800 	mov.w	r8, #0
 800dd7a:	f104 0919 	add.w	r9, r4, #25
 800dd7e:	e7f4      	b.n	800dd6a <_printf_float+0x456>

0800dd80 <_printf_common>:
 800dd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd84:	4616      	mov	r6, r2
 800dd86:	4699      	mov	r9, r3
 800dd88:	688a      	ldr	r2, [r1, #8]
 800dd8a:	690b      	ldr	r3, [r1, #16]
 800dd8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd90:	4293      	cmp	r3, r2
 800dd92:	bfb8      	it	lt
 800dd94:	4613      	movlt	r3, r2
 800dd96:	6033      	str	r3, [r6, #0]
 800dd98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd9c:	4607      	mov	r7, r0
 800dd9e:	460c      	mov	r4, r1
 800dda0:	b10a      	cbz	r2, 800dda6 <_printf_common+0x26>
 800dda2:	3301      	adds	r3, #1
 800dda4:	6033      	str	r3, [r6, #0]
 800dda6:	6823      	ldr	r3, [r4, #0]
 800dda8:	0699      	lsls	r1, r3, #26
 800ddaa:	bf42      	ittt	mi
 800ddac:	6833      	ldrmi	r3, [r6, #0]
 800ddae:	3302      	addmi	r3, #2
 800ddb0:	6033      	strmi	r3, [r6, #0]
 800ddb2:	6825      	ldr	r5, [r4, #0]
 800ddb4:	f015 0506 	ands.w	r5, r5, #6
 800ddb8:	d106      	bne.n	800ddc8 <_printf_common+0x48>
 800ddba:	f104 0a19 	add.w	sl, r4, #25
 800ddbe:	68e3      	ldr	r3, [r4, #12]
 800ddc0:	6832      	ldr	r2, [r6, #0]
 800ddc2:	1a9b      	subs	r3, r3, r2
 800ddc4:	42ab      	cmp	r3, r5
 800ddc6:	dc26      	bgt.n	800de16 <_printf_common+0x96>
 800ddc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ddcc:	1e13      	subs	r3, r2, #0
 800ddce:	6822      	ldr	r2, [r4, #0]
 800ddd0:	bf18      	it	ne
 800ddd2:	2301      	movne	r3, #1
 800ddd4:	0692      	lsls	r2, r2, #26
 800ddd6:	d42b      	bmi.n	800de30 <_printf_common+0xb0>
 800ddd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dddc:	4649      	mov	r1, r9
 800ddde:	4638      	mov	r0, r7
 800dde0:	47c0      	blx	r8
 800dde2:	3001      	adds	r0, #1
 800dde4:	d01e      	beq.n	800de24 <_printf_common+0xa4>
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	68e5      	ldr	r5, [r4, #12]
 800ddea:	6832      	ldr	r2, [r6, #0]
 800ddec:	f003 0306 	and.w	r3, r3, #6
 800ddf0:	2b04      	cmp	r3, #4
 800ddf2:	bf08      	it	eq
 800ddf4:	1aad      	subeq	r5, r5, r2
 800ddf6:	68a3      	ldr	r3, [r4, #8]
 800ddf8:	6922      	ldr	r2, [r4, #16]
 800ddfa:	bf0c      	ite	eq
 800ddfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de00:	2500      	movne	r5, #0
 800de02:	4293      	cmp	r3, r2
 800de04:	bfc4      	itt	gt
 800de06:	1a9b      	subgt	r3, r3, r2
 800de08:	18ed      	addgt	r5, r5, r3
 800de0a:	2600      	movs	r6, #0
 800de0c:	341a      	adds	r4, #26
 800de0e:	42b5      	cmp	r5, r6
 800de10:	d11a      	bne.n	800de48 <_printf_common+0xc8>
 800de12:	2000      	movs	r0, #0
 800de14:	e008      	b.n	800de28 <_printf_common+0xa8>
 800de16:	2301      	movs	r3, #1
 800de18:	4652      	mov	r2, sl
 800de1a:	4649      	mov	r1, r9
 800de1c:	4638      	mov	r0, r7
 800de1e:	47c0      	blx	r8
 800de20:	3001      	adds	r0, #1
 800de22:	d103      	bne.n	800de2c <_printf_common+0xac>
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de2c:	3501      	adds	r5, #1
 800de2e:	e7c6      	b.n	800ddbe <_printf_common+0x3e>
 800de30:	18e1      	adds	r1, r4, r3
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	2030      	movs	r0, #48	; 0x30
 800de36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de3a:	4422      	add	r2, r4
 800de3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800de44:	3302      	adds	r3, #2
 800de46:	e7c7      	b.n	800ddd8 <_printf_common+0x58>
 800de48:	2301      	movs	r3, #1
 800de4a:	4622      	mov	r2, r4
 800de4c:	4649      	mov	r1, r9
 800de4e:	4638      	mov	r0, r7
 800de50:	47c0      	blx	r8
 800de52:	3001      	adds	r0, #1
 800de54:	d0e6      	beq.n	800de24 <_printf_common+0xa4>
 800de56:	3601      	adds	r6, #1
 800de58:	e7d9      	b.n	800de0e <_printf_common+0x8e>
	...

0800de5c <_printf_i>:
 800de5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de60:	460c      	mov	r4, r1
 800de62:	4691      	mov	r9, r2
 800de64:	7e27      	ldrb	r7, [r4, #24]
 800de66:	990c      	ldr	r1, [sp, #48]	; 0x30
 800de68:	2f78      	cmp	r7, #120	; 0x78
 800de6a:	4680      	mov	r8, r0
 800de6c:	469a      	mov	sl, r3
 800de6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de72:	d807      	bhi.n	800de84 <_printf_i+0x28>
 800de74:	2f62      	cmp	r7, #98	; 0x62
 800de76:	d80a      	bhi.n	800de8e <_printf_i+0x32>
 800de78:	2f00      	cmp	r7, #0
 800de7a:	f000 80d8 	beq.w	800e02e <_printf_i+0x1d2>
 800de7e:	2f58      	cmp	r7, #88	; 0x58
 800de80:	f000 80a3 	beq.w	800dfca <_printf_i+0x16e>
 800de84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800de88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de8c:	e03a      	b.n	800df04 <_printf_i+0xa8>
 800de8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de92:	2b15      	cmp	r3, #21
 800de94:	d8f6      	bhi.n	800de84 <_printf_i+0x28>
 800de96:	a001      	add	r0, pc, #4	; (adr r0, 800de9c <_printf_i+0x40>)
 800de98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800de9c:	0800def5 	.word	0x0800def5
 800dea0:	0800df09 	.word	0x0800df09
 800dea4:	0800de85 	.word	0x0800de85
 800dea8:	0800de85 	.word	0x0800de85
 800deac:	0800de85 	.word	0x0800de85
 800deb0:	0800de85 	.word	0x0800de85
 800deb4:	0800df09 	.word	0x0800df09
 800deb8:	0800de85 	.word	0x0800de85
 800debc:	0800de85 	.word	0x0800de85
 800dec0:	0800de85 	.word	0x0800de85
 800dec4:	0800de85 	.word	0x0800de85
 800dec8:	0800e015 	.word	0x0800e015
 800decc:	0800df39 	.word	0x0800df39
 800ded0:	0800dff7 	.word	0x0800dff7
 800ded4:	0800de85 	.word	0x0800de85
 800ded8:	0800de85 	.word	0x0800de85
 800dedc:	0800e037 	.word	0x0800e037
 800dee0:	0800de85 	.word	0x0800de85
 800dee4:	0800df39 	.word	0x0800df39
 800dee8:	0800de85 	.word	0x0800de85
 800deec:	0800de85 	.word	0x0800de85
 800def0:	0800dfff 	.word	0x0800dfff
 800def4:	680b      	ldr	r3, [r1, #0]
 800def6:	1d1a      	adds	r2, r3, #4
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	600a      	str	r2, [r1, #0]
 800defc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df04:	2301      	movs	r3, #1
 800df06:	e0a3      	b.n	800e050 <_printf_i+0x1f4>
 800df08:	6825      	ldr	r5, [r4, #0]
 800df0a:	6808      	ldr	r0, [r1, #0]
 800df0c:	062e      	lsls	r6, r5, #24
 800df0e:	f100 0304 	add.w	r3, r0, #4
 800df12:	d50a      	bpl.n	800df2a <_printf_i+0xce>
 800df14:	6805      	ldr	r5, [r0, #0]
 800df16:	600b      	str	r3, [r1, #0]
 800df18:	2d00      	cmp	r5, #0
 800df1a:	da03      	bge.n	800df24 <_printf_i+0xc8>
 800df1c:	232d      	movs	r3, #45	; 0x2d
 800df1e:	426d      	negs	r5, r5
 800df20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df24:	485e      	ldr	r0, [pc, #376]	; (800e0a0 <_printf_i+0x244>)
 800df26:	230a      	movs	r3, #10
 800df28:	e019      	b.n	800df5e <_printf_i+0x102>
 800df2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800df2e:	6805      	ldr	r5, [r0, #0]
 800df30:	600b      	str	r3, [r1, #0]
 800df32:	bf18      	it	ne
 800df34:	b22d      	sxthne	r5, r5
 800df36:	e7ef      	b.n	800df18 <_printf_i+0xbc>
 800df38:	680b      	ldr	r3, [r1, #0]
 800df3a:	6825      	ldr	r5, [r4, #0]
 800df3c:	1d18      	adds	r0, r3, #4
 800df3e:	6008      	str	r0, [r1, #0]
 800df40:	0628      	lsls	r0, r5, #24
 800df42:	d501      	bpl.n	800df48 <_printf_i+0xec>
 800df44:	681d      	ldr	r5, [r3, #0]
 800df46:	e002      	b.n	800df4e <_printf_i+0xf2>
 800df48:	0669      	lsls	r1, r5, #25
 800df4a:	d5fb      	bpl.n	800df44 <_printf_i+0xe8>
 800df4c:	881d      	ldrh	r5, [r3, #0]
 800df4e:	4854      	ldr	r0, [pc, #336]	; (800e0a0 <_printf_i+0x244>)
 800df50:	2f6f      	cmp	r7, #111	; 0x6f
 800df52:	bf0c      	ite	eq
 800df54:	2308      	moveq	r3, #8
 800df56:	230a      	movne	r3, #10
 800df58:	2100      	movs	r1, #0
 800df5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df5e:	6866      	ldr	r6, [r4, #4]
 800df60:	60a6      	str	r6, [r4, #8]
 800df62:	2e00      	cmp	r6, #0
 800df64:	bfa2      	ittt	ge
 800df66:	6821      	ldrge	r1, [r4, #0]
 800df68:	f021 0104 	bicge.w	r1, r1, #4
 800df6c:	6021      	strge	r1, [r4, #0]
 800df6e:	b90d      	cbnz	r5, 800df74 <_printf_i+0x118>
 800df70:	2e00      	cmp	r6, #0
 800df72:	d04d      	beq.n	800e010 <_printf_i+0x1b4>
 800df74:	4616      	mov	r6, r2
 800df76:	fbb5 f1f3 	udiv	r1, r5, r3
 800df7a:	fb03 5711 	mls	r7, r3, r1, r5
 800df7e:	5dc7      	ldrb	r7, [r0, r7]
 800df80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df84:	462f      	mov	r7, r5
 800df86:	42bb      	cmp	r3, r7
 800df88:	460d      	mov	r5, r1
 800df8a:	d9f4      	bls.n	800df76 <_printf_i+0x11a>
 800df8c:	2b08      	cmp	r3, #8
 800df8e:	d10b      	bne.n	800dfa8 <_printf_i+0x14c>
 800df90:	6823      	ldr	r3, [r4, #0]
 800df92:	07df      	lsls	r7, r3, #31
 800df94:	d508      	bpl.n	800dfa8 <_printf_i+0x14c>
 800df96:	6923      	ldr	r3, [r4, #16]
 800df98:	6861      	ldr	r1, [r4, #4]
 800df9a:	4299      	cmp	r1, r3
 800df9c:	bfde      	ittt	le
 800df9e:	2330      	movle	r3, #48	; 0x30
 800dfa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dfa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dfa8:	1b92      	subs	r2, r2, r6
 800dfaa:	6122      	str	r2, [r4, #16]
 800dfac:	f8cd a000 	str.w	sl, [sp]
 800dfb0:	464b      	mov	r3, r9
 800dfb2:	aa03      	add	r2, sp, #12
 800dfb4:	4621      	mov	r1, r4
 800dfb6:	4640      	mov	r0, r8
 800dfb8:	f7ff fee2 	bl	800dd80 <_printf_common>
 800dfbc:	3001      	adds	r0, #1
 800dfbe:	d14c      	bne.n	800e05a <_printf_i+0x1fe>
 800dfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfc4:	b004      	add	sp, #16
 800dfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfca:	4835      	ldr	r0, [pc, #212]	; (800e0a0 <_printf_i+0x244>)
 800dfcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dfd0:	6823      	ldr	r3, [r4, #0]
 800dfd2:	680e      	ldr	r6, [r1, #0]
 800dfd4:	061f      	lsls	r7, r3, #24
 800dfd6:	f856 5b04 	ldr.w	r5, [r6], #4
 800dfda:	600e      	str	r6, [r1, #0]
 800dfdc:	d514      	bpl.n	800e008 <_printf_i+0x1ac>
 800dfde:	07d9      	lsls	r1, r3, #31
 800dfe0:	bf44      	itt	mi
 800dfe2:	f043 0320 	orrmi.w	r3, r3, #32
 800dfe6:	6023      	strmi	r3, [r4, #0]
 800dfe8:	b91d      	cbnz	r5, 800dff2 <_printf_i+0x196>
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	f023 0320 	bic.w	r3, r3, #32
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	2310      	movs	r3, #16
 800dff4:	e7b0      	b.n	800df58 <_printf_i+0xfc>
 800dff6:	6823      	ldr	r3, [r4, #0]
 800dff8:	f043 0320 	orr.w	r3, r3, #32
 800dffc:	6023      	str	r3, [r4, #0]
 800dffe:	2378      	movs	r3, #120	; 0x78
 800e000:	4828      	ldr	r0, [pc, #160]	; (800e0a4 <_printf_i+0x248>)
 800e002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e006:	e7e3      	b.n	800dfd0 <_printf_i+0x174>
 800e008:	065e      	lsls	r6, r3, #25
 800e00a:	bf48      	it	mi
 800e00c:	b2ad      	uxthmi	r5, r5
 800e00e:	e7e6      	b.n	800dfde <_printf_i+0x182>
 800e010:	4616      	mov	r6, r2
 800e012:	e7bb      	b.n	800df8c <_printf_i+0x130>
 800e014:	680b      	ldr	r3, [r1, #0]
 800e016:	6826      	ldr	r6, [r4, #0]
 800e018:	6960      	ldr	r0, [r4, #20]
 800e01a:	1d1d      	adds	r5, r3, #4
 800e01c:	600d      	str	r5, [r1, #0]
 800e01e:	0635      	lsls	r5, r6, #24
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	d501      	bpl.n	800e028 <_printf_i+0x1cc>
 800e024:	6018      	str	r0, [r3, #0]
 800e026:	e002      	b.n	800e02e <_printf_i+0x1d2>
 800e028:	0671      	lsls	r1, r6, #25
 800e02a:	d5fb      	bpl.n	800e024 <_printf_i+0x1c8>
 800e02c:	8018      	strh	r0, [r3, #0]
 800e02e:	2300      	movs	r3, #0
 800e030:	6123      	str	r3, [r4, #16]
 800e032:	4616      	mov	r6, r2
 800e034:	e7ba      	b.n	800dfac <_printf_i+0x150>
 800e036:	680b      	ldr	r3, [r1, #0]
 800e038:	1d1a      	adds	r2, r3, #4
 800e03a:	600a      	str	r2, [r1, #0]
 800e03c:	681e      	ldr	r6, [r3, #0]
 800e03e:	6862      	ldr	r2, [r4, #4]
 800e040:	2100      	movs	r1, #0
 800e042:	4630      	mov	r0, r6
 800e044:	f7f2 f8cc 	bl	80001e0 <memchr>
 800e048:	b108      	cbz	r0, 800e04e <_printf_i+0x1f2>
 800e04a:	1b80      	subs	r0, r0, r6
 800e04c:	6060      	str	r0, [r4, #4]
 800e04e:	6863      	ldr	r3, [r4, #4]
 800e050:	6123      	str	r3, [r4, #16]
 800e052:	2300      	movs	r3, #0
 800e054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e058:	e7a8      	b.n	800dfac <_printf_i+0x150>
 800e05a:	6923      	ldr	r3, [r4, #16]
 800e05c:	4632      	mov	r2, r6
 800e05e:	4649      	mov	r1, r9
 800e060:	4640      	mov	r0, r8
 800e062:	47d0      	blx	sl
 800e064:	3001      	adds	r0, #1
 800e066:	d0ab      	beq.n	800dfc0 <_printf_i+0x164>
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	079b      	lsls	r3, r3, #30
 800e06c:	d413      	bmi.n	800e096 <_printf_i+0x23a>
 800e06e:	68e0      	ldr	r0, [r4, #12]
 800e070:	9b03      	ldr	r3, [sp, #12]
 800e072:	4298      	cmp	r0, r3
 800e074:	bfb8      	it	lt
 800e076:	4618      	movlt	r0, r3
 800e078:	e7a4      	b.n	800dfc4 <_printf_i+0x168>
 800e07a:	2301      	movs	r3, #1
 800e07c:	4632      	mov	r2, r6
 800e07e:	4649      	mov	r1, r9
 800e080:	4640      	mov	r0, r8
 800e082:	47d0      	blx	sl
 800e084:	3001      	adds	r0, #1
 800e086:	d09b      	beq.n	800dfc0 <_printf_i+0x164>
 800e088:	3501      	adds	r5, #1
 800e08a:	68e3      	ldr	r3, [r4, #12]
 800e08c:	9903      	ldr	r1, [sp, #12]
 800e08e:	1a5b      	subs	r3, r3, r1
 800e090:	42ab      	cmp	r3, r5
 800e092:	dcf2      	bgt.n	800e07a <_printf_i+0x21e>
 800e094:	e7eb      	b.n	800e06e <_printf_i+0x212>
 800e096:	2500      	movs	r5, #0
 800e098:	f104 0619 	add.w	r6, r4, #25
 800e09c:	e7f5      	b.n	800e08a <_printf_i+0x22e>
 800e09e:	bf00      	nop
 800e0a0:	0801390a 	.word	0x0801390a
 800e0a4:	0801391b 	.word	0x0801391b

0800e0a8 <_scanf_float>:
 800e0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ac:	b087      	sub	sp, #28
 800e0ae:	4617      	mov	r7, r2
 800e0b0:	9303      	str	r3, [sp, #12]
 800e0b2:	688b      	ldr	r3, [r1, #8]
 800e0b4:	1e5a      	subs	r2, r3, #1
 800e0b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e0ba:	bf83      	ittte	hi
 800e0bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e0c0:	195b      	addhi	r3, r3, r5
 800e0c2:	9302      	strhi	r3, [sp, #8]
 800e0c4:	2300      	movls	r3, #0
 800e0c6:	bf86      	itte	hi
 800e0c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e0cc:	608b      	strhi	r3, [r1, #8]
 800e0ce:	9302      	strls	r3, [sp, #8]
 800e0d0:	680b      	ldr	r3, [r1, #0]
 800e0d2:	468b      	mov	fp, r1
 800e0d4:	2500      	movs	r5, #0
 800e0d6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e0da:	f84b 3b1c 	str.w	r3, [fp], #28
 800e0de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e0e2:	4680      	mov	r8, r0
 800e0e4:	460c      	mov	r4, r1
 800e0e6:	465e      	mov	r6, fp
 800e0e8:	46aa      	mov	sl, r5
 800e0ea:	46a9      	mov	r9, r5
 800e0ec:	9501      	str	r5, [sp, #4]
 800e0ee:	68a2      	ldr	r2, [r4, #8]
 800e0f0:	b152      	cbz	r2, 800e108 <_scanf_float+0x60>
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b4e      	cmp	r3, #78	; 0x4e
 800e0f8:	d864      	bhi.n	800e1c4 <_scanf_float+0x11c>
 800e0fa:	2b40      	cmp	r3, #64	; 0x40
 800e0fc:	d83c      	bhi.n	800e178 <_scanf_float+0xd0>
 800e0fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e102:	b2c8      	uxtb	r0, r1
 800e104:	280e      	cmp	r0, #14
 800e106:	d93a      	bls.n	800e17e <_scanf_float+0xd6>
 800e108:	f1b9 0f00 	cmp.w	r9, #0
 800e10c:	d003      	beq.n	800e116 <_scanf_float+0x6e>
 800e10e:	6823      	ldr	r3, [r4, #0]
 800e110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e114:	6023      	str	r3, [r4, #0]
 800e116:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e11a:	f1ba 0f01 	cmp.w	sl, #1
 800e11e:	f200 8113 	bhi.w	800e348 <_scanf_float+0x2a0>
 800e122:	455e      	cmp	r6, fp
 800e124:	f200 8105 	bhi.w	800e332 <_scanf_float+0x28a>
 800e128:	2501      	movs	r5, #1
 800e12a:	4628      	mov	r0, r5
 800e12c:	b007      	add	sp, #28
 800e12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e132:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e136:	2a0d      	cmp	r2, #13
 800e138:	d8e6      	bhi.n	800e108 <_scanf_float+0x60>
 800e13a:	a101      	add	r1, pc, #4	; (adr r1, 800e140 <_scanf_float+0x98>)
 800e13c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e140:	0800e27f 	.word	0x0800e27f
 800e144:	0800e109 	.word	0x0800e109
 800e148:	0800e109 	.word	0x0800e109
 800e14c:	0800e109 	.word	0x0800e109
 800e150:	0800e2df 	.word	0x0800e2df
 800e154:	0800e2b7 	.word	0x0800e2b7
 800e158:	0800e109 	.word	0x0800e109
 800e15c:	0800e109 	.word	0x0800e109
 800e160:	0800e28d 	.word	0x0800e28d
 800e164:	0800e109 	.word	0x0800e109
 800e168:	0800e109 	.word	0x0800e109
 800e16c:	0800e109 	.word	0x0800e109
 800e170:	0800e109 	.word	0x0800e109
 800e174:	0800e245 	.word	0x0800e245
 800e178:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e17c:	e7db      	b.n	800e136 <_scanf_float+0x8e>
 800e17e:	290e      	cmp	r1, #14
 800e180:	d8c2      	bhi.n	800e108 <_scanf_float+0x60>
 800e182:	a001      	add	r0, pc, #4	; (adr r0, 800e188 <_scanf_float+0xe0>)
 800e184:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e188:	0800e237 	.word	0x0800e237
 800e18c:	0800e109 	.word	0x0800e109
 800e190:	0800e237 	.word	0x0800e237
 800e194:	0800e2cb 	.word	0x0800e2cb
 800e198:	0800e109 	.word	0x0800e109
 800e19c:	0800e1e5 	.word	0x0800e1e5
 800e1a0:	0800e221 	.word	0x0800e221
 800e1a4:	0800e221 	.word	0x0800e221
 800e1a8:	0800e221 	.word	0x0800e221
 800e1ac:	0800e221 	.word	0x0800e221
 800e1b0:	0800e221 	.word	0x0800e221
 800e1b4:	0800e221 	.word	0x0800e221
 800e1b8:	0800e221 	.word	0x0800e221
 800e1bc:	0800e221 	.word	0x0800e221
 800e1c0:	0800e221 	.word	0x0800e221
 800e1c4:	2b6e      	cmp	r3, #110	; 0x6e
 800e1c6:	d809      	bhi.n	800e1dc <_scanf_float+0x134>
 800e1c8:	2b60      	cmp	r3, #96	; 0x60
 800e1ca:	d8b2      	bhi.n	800e132 <_scanf_float+0x8a>
 800e1cc:	2b54      	cmp	r3, #84	; 0x54
 800e1ce:	d077      	beq.n	800e2c0 <_scanf_float+0x218>
 800e1d0:	2b59      	cmp	r3, #89	; 0x59
 800e1d2:	d199      	bne.n	800e108 <_scanf_float+0x60>
 800e1d4:	2d07      	cmp	r5, #7
 800e1d6:	d197      	bne.n	800e108 <_scanf_float+0x60>
 800e1d8:	2508      	movs	r5, #8
 800e1da:	e029      	b.n	800e230 <_scanf_float+0x188>
 800e1dc:	2b74      	cmp	r3, #116	; 0x74
 800e1de:	d06f      	beq.n	800e2c0 <_scanf_float+0x218>
 800e1e0:	2b79      	cmp	r3, #121	; 0x79
 800e1e2:	e7f6      	b.n	800e1d2 <_scanf_float+0x12a>
 800e1e4:	6821      	ldr	r1, [r4, #0]
 800e1e6:	05c8      	lsls	r0, r1, #23
 800e1e8:	d51a      	bpl.n	800e220 <_scanf_float+0x178>
 800e1ea:	9b02      	ldr	r3, [sp, #8]
 800e1ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e1f0:	6021      	str	r1, [r4, #0]
 800e1f2:	f109 0901 	add.w	r9, r9, #1
 800e1f6:	b11b      	cbz	r3, 800e200 <_scanf_float+0x158>
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	3201      	adds	r2, #1
 800e1fc:	9302      	str	r3, [sp, #8]
 800e1fe:	60a2      	str	r2, [r4, #8]
 800e200:	68a3      	ldr	r3, [r4, #8]
 800e202:	3b01      	subs	r3, #1
 800e204:	60a3      	str	r3, [r4, #8]
 800e206:	6923      	ldr	r3, [r4, #16]
 800e208:	3301      	adds	r3, #1
 800e20a:	6123      	str	r3, [r4, #16]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	3b01      	subs	r3, #1
 800e210:	2b00      	cmp	r3, #0
 800e212:	607b      	str	r3, [r7, #4]
 800e214:	f340 8084 	ble.w	800e320 <_scanf_float+0x278>
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	3301      	adds	r3, #1
 800e21c:	603b      	str	r3, [r7, #0]
 800e21e:	e766      	b.n	800e0ee <_scanf_float+0x46>
 800e220:	eb1a 0f05 	cmn.w	sl, r5
 800e224:	f47f af70 	bne.w	800e108 <_scanf_float+0x60>
 800e228:	6822      	ldr	r2, [r4, #0]
 800e22a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e22e:	6022      	str	r2, [r4, #0]
 800e230:	f806 3b01 	strb.w	r3, [r6], #1
 800e234:	e7e4      	b.n	800e200 <_scanf_float+0x158>
 800e236:	6822      	ldr	r2, [r4, #0]
 800e238:	0610      	lsls	r0, r2, #24
 800e23a:	f57f af65 	bpl.w	800e108 <_scanf_float+0x60>
 800e23e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e242:	e7f4      	b.n	800e22e <_scanf_float+0x186>
 800e244:	f1ba 0f00 	cmp.w	sl, #0
 800e248:	d10e      	bne.n	800e268 <_scanf_float+0x1c0>
 800e24a:	f1b9 0f00 	cmp.w	r9, #0
 800e24e:	d10e      	bne.n	800e26e <_scanf_float+0x1c6>
 800e250:	6822      	ldr	r2, [r4, #0]
 800e252:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e256:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e25a:	d108      	bne.n	800e26e <_scanf_float+0x1c6>
 800e25c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e260:	6022      	str	r2, [r4, #0]
 800e262:	f04f 0a01 	mov.w	sl, #1
 800e266:	e7e3      	b.n	800e230 <_scanf_float+0x188>
 800e268:	f1ba 0f02 	cmp.w	sl, #2
 800e26c:	d055      	beq.n	800e31a <_scanf_float+0x272>
 800e26e:	2d01      	cmp	r5, #1
 800e270:	d002      	beq.n	800e278 <_scanf_float+0x1d0>
 800e272:	2d04      	cmp	r5, #4
 800e274:	f47f af48 	bne.w	800e108 <_scanf_float+0x60>
 800e278:	3501      	adds	r5, #1
 800e27a:	b2ed      	uxtb	r5, r5
 800e27c:	e7d8      	b.n	800e230 <_scanf_float+0x188>
 800e27e:	f1ba 0f01 	cmp.w	sl, #1
 800e282:	f47f af41 	bne.w	800e108 <_scanf_float+0x60>
 800e286:	f04f 0a02 	mov.w	sl, #2
 800e28a:	e7d1      	b.n	800e230 <_scanf_float+0x188>
 800e28c:	b97d      	cbnz	r5, 800e2ae <_scanf_float+0x206>
 800e28e:	f1b9 0f00 	cmp.w	r9, #0
 800e292:	f47f af3c 	bne.w	800e10e <_scanf_float+0x66>
 800e296:	6822      	ldr	r2, [r4, #0]
 800e298:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e29c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e2a0:	f47f af39 	bne.w	800e116 <_scanf_float+0x6e>
 800e2a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e2a8:	6022      	str	r2, [r4, #0]
 800e2aa:	2501      	movs	r5, #1
 800e2ac:	e7c0      	b.n	800e230 <_scanf_float+0x188>
 800e2ae:	2d03      	cmp	r5, #3
 800e2b0:	d0e2      	beq.n	800e278 <_scanf_float+0x1d0>
 800e2b2:	2d05      	cmp	r5, #5
 800e2b4:	e7de      	b.n	800e274 <_scanf_float+0x1cc>
 800e2b6:	2d02      	cmp	r5, #2
 800e2b8:	f47f af26 	bne.w	800e108 <_scanf_float+0x60>
 800e2bc:	2503      	movs	r5, #3
 800e2be:	e7b7      	b.n	800e230 <_scanf_float+0x188>
 800e2c0:	2d06      	cmp	r5, #6
 800e2c2:	f47f af21 	bne.w	800e108 <_scanf_float+0x60>
 800e2c6:	2507      	movs	r5, #7
 800e2c8:	e7b2      	b.n	800e230 <_scanf_float+0x188>
 800e2ca:	6822      	ldr	r2, [r4, #0]
 800e2cc:	0591      	lsls	r1, r2, #22
 800e2ce:	f57f af1b 	bpl.w	800e108 <_scanf_float+0x60>
 800e2d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e2d6:	6022      	str	r2, [r4, #0]
 800e2d8:	f8cd 9004 	str.w	r9, [sp, #4]
 800e2dc:	e7a8      	b.n	800e230 <_scanf_float+0x188>
 800e2de:	6822      	ldr	r2, [r4, #0]
 800e2e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e2e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e2e8:	d006      	beq.n	800e2f8 <_scanf_float+0x250>
 800e2ea:	0550      	lsls	r0, r2, #21
 800e2ec:	f57f af0c 	bpl.w	800e108 <_scanf_float+0x60>
 800e2f0:	f1b9 0f00 	cmp.w	r9, #0
 800e2f4:	f43f af0f 	beq.w	800e116 <_scanf_float+0x6e>
 800e2f8:	0591      	lsls	r1, r2, #22
 800e2fa:	bf58      	it	pl
 800e2fc:	9901      	ldrpl	r1, [sp, #4]
 800e2fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e302:	bf58      	it	pl
 800e304:	eba9 0101 	subpl.w	r1, r9, r1
 800e308:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e30c:	bf58      	it	pl
 800e30e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e312:	6022      	str	r2, [r4, #0]
 800e314:	f04f 0900 	mov.w	r9, #0
 800e318:	e78a      	b.n	800e230 <_scanf_float+0x188>
 800e31a:	f04f 0a03 	mov.w	sl, #3
 800e31e:	e787      	b.n	800e230 <_scanf_float+0x188>
 800e320:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e324:	4639      	mov	r1, r7
 800e326:	4640      	mov	r0, r8
 800e328:	4798      	blx	r3
 800e32a:	2800      	cmp	r0, #0
 800e32c:	f43f aedf 	beq.w	800e0ee <_scanf_float+0x46>
 800e330:	e6ea      	b.n	800e108 <_scanf_float+0x60>
 800e332:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e336:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e33a:	463a      	mov	r2, r7
 800e33c:	4640      	mov	r0, r8
 800e33e:	4798      	blx	r3
 800e340:	6923      	ldr	r3, [r4, #16]
 800e342:	3b01      	subs	r3, #1
 800e344:	6123      	str	r3, [r4, #16]
 800e346:	e6ec      	b.n	800e122 <_scanf_float+0x7a>
 800e348:	1e6b      	subs	r3, r5, #1
 800e34a:	2b06      	cmp	r3, #6
 800e34c:	d825      	bhi.n	800e39a <_scanf_float+0x2f2>
 800e34e:	2d02      	cmp	r5, #2
 800e350:	d836      	bhi.n	800e3c0 <_scanf_float+0x318>
 800e352:	455e      	cmp	r6, fp
 800e354:	f67f aee8 	bls.w	800e128 <_scanf_float+0x80>
 800e358:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e35c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e360:	463a      	mov	r2, r7
 800e362:	4640      	mov	r0, r8
 800e364:	4798      	blx	r3
 800e366:	6923      	ldr	r3, [r4, #16]
 800e368:	3b01      	subs	r3, #1
 800e36a:	6123      	str	r3, [r4, #16]
 800e36c:	e7f1      	b.n	800e352 <_scanf_float+0x2aa>
 800e36e:	9802      	ldr	r0, [sp, #8]
 800e370:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e374:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e378:	9002      	str	r0, [sp, #8]
 800e37a:	463a      	mov	r2, r7
 800e37c:	4640      	mov	r0, r8
 800e37e:	4798      	blx	r3
 800e380:	6923      	ldr	r3, [r4, #16]
 800e382:	3b01      	subs	r3, #1
 800e384:	6123      	str	r3, [r4, #16]
 800e386:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e38a:	fa5f fa8a 	uxtb.w	sl, sl
 800e38e:	f1ba 0f02 	cmp.w	sl, #2
 800e392:	d1ec      	bne.n	800e36e <_scanf_float+0x2c6>
 800e394:	3d03      	subs	r5, #3
 800e396:	b2ed      	uxtb	r5, r5
 800e398:	1b76      	subs	r6, r6, r5
 800e39a:	6823      	ldr	r3, [r4, #0]
 800e39c:	05da      	lsls	r2, r3, #23
 800e39e:	d52f      	bpl.n	800e400 <_scanf_float+0x358>
 800e3a0:	055b      	lsls	r3, r3, #21
 800e3a2:	d510      	bpl.n	800e3c6 <_scanf_float+0x31e>
 800e3a4:	455e      	cmp	r6, fp
 800e3a6:	f67f aebf 	bls.w	800e128 <_scanf_float+0x80>
 800e3aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e3b2:	463a      	mov	r2, r7
 800e3b4:	4640      	mov	r0, r8
 800e3b6:	4798      	blx	r3
 800e3b8:	6923      	ldr	r3, [r4, #16]
 800e3ba:	3b01      	subs	r3, #1
 800e3bc:	6123      	str	r3, [r4, #16]
 800e3be:	e7f1      	b.n	800e3a4 <_scanf_float+0x2fc>
 800e3c0:	46aa      	mov	sl, r5
 800e3c2:	9602      	str	r6, [sp, #8]
 800e3c4:	e7df      	b.n	800e386 <_scanf_float+0x2de>
 800e3c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e3ca:	6923      	ldr	r3, [r4, #16]
 800e3cc:	2965      	cmp	r1, #101	; 0x65
 800e3ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800e3d2:	f106 35ff 	add.w	r5, r6, #4294967295
 800e3d6:	6123      	str	r3, [r4, #16]
 800e3d8:	d00c      	beq.n	800e3f4 <_scanf_float+0x34c>
 800e3da:	2945      	cmp	r1, #69	; 0x45
 800e3dc:	d00a      	beq.n	800e3f4 <_scanf_float+0x34c>
 800e3de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3e2:	463a      	mov	r2, r7
 800e3e4:	4640      	mov	r0, r8
 800e3e6:	4798      	blx	r3
 800e3e8:	6923      	ldr	r3, [r4, #16]
 800e3ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	1eb5      	subs	r5, r6, #2
 800e3f2:	6123      	str	r3, [r4, #16]
 800e3f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3f8:	463a      	mov	r2, r7
 800e3fa:	4640      	mov	r0, r8
 800e3fc:	4798      	blx	r3
 800e3fe:	462e      	mov	r6, r5
 800e400:	6825      	ldr	r5, [r4, #0]
 800e402:	f015 0510 	ands.w	r5, r5, #16
 800e406:	d158      	bne.n	800e4ba <_scanf_float+0x412>
 800e408:	7035      	strb	r5, [r6, #0]
 800e40a:	6823      	ldr	r3, [r4, #0]
 800e40c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e414:	d11c      	bne.n	800e450 <_scanf_float+0x3a8>
 800e416:	9b01      	ldr	r3, [sp, #4]
 800e418:	454b      	cmp	r3, r9
 800e41a:	eba3 0209 	sub.w	r2, r3, r9
 800e41e:	d124      	bne.n	800e46a <_scanf_float+0x3c2>
 800e420:	2200      	movs	r2, #0
 800e422:	4659      	mov	r1, fp
 800e424:	4640      	mov	r0, r8
 800e426:	f000 ff59 	bl	800f2dc <_strtod_r>
 800e42a:	9b03      	ldr	r3, [sp, #12]
 800e42c:	6821      	ldr	r1, [r4, #0]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f011 0f02 	tst.w	r1, #2
 800e434:	ec57 6b10 	vmov	r6, r7, d0
 800e438:	f103 0204 	add.w	r2, r3, #4
 800e43c:	d020      	beq.n	800e480 <_scanf_float+0x3d8>
 800e43e:	9903      	ldr	r1, [sp, #12]
 800e440:	600a      	str	r2, [r1, #0]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	e9c3 6700 	strd	r6, r7, [r3]
 800e448:	68e3      	ldr	r3, [r4, #12]
 800e44a:	3301      	adds	r3, #1
 800e44c:	60e3      	str	r3, [r4, #12]
 800e44e:	e66c      	b.n	800e12a <_scanf_float+0x82>
 800e450:	9b04      	ldr	r3, [sp, #16]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d0e4      	beq.n	800e420 <_scanf_float+0x378>
 800e456:	9905      	ldr	r1, [sp, #20]
 800e458:	230a      	movs	r3, #10
 800e45a:	462a      	mov	r2, r5
 800e45c:	3101      	adds	r1, #1
 800e45e:	4640      	mov	r0, r8
 800e460:	f000 ffc6 	bl	800f3f0 <_strtol_r>
 800e464:	9b04      	ldr	r3, [sp, #16]
 800e466:	9e05      	ldr	r6, [sp, #20]
 800e468:	1ac2      	subs	r2, r0, r3
 800e46a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e46e:	429e      	cmp	r6, r3
 800e470:	bf28      	it	cs
 800e472:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e476:	4912      	ldr	r1, [pc, #72]	; (800e4c0 <_scanf_float+0x418>)
 800e478:	4630      	mov	r0, r6
 800e47a:	f000 f8a5 	bl	800e5c8 <siprintf>
 800e47e:	e7cf      	b.n	800e420 <_scanf_float+0x378>
 800e480:	f011 0f04 	tst.w	r1, #4
 800e484:	9903      	ldr	r1, [sp, #12]
 800e486:	600a      	str	r2, [r1, #0]
 800e488:	d1db      	bne.n	800e442 <_scanf_float+0x39a>
 800e48a:	f8d3 8000 	ldr.w	r8, [r3]
 800e48e:	ee10 2a10 	vmov	r2, s0
 800e492:	ee10 0a10 	vmov	r0, s0
 800e496:	463b      	mov	r3, r7
 800e498:	4639      	mov	r1, r7
 800e49a:	f7f2 fb47 	bl	8000b2c <__aeabi_dcmpun>
 800e49e:	b128      	cbz	r0, 800e4ac <_scanf_float+0x404>
 800e4a0:	4808      	ldr	r0, [pc, #32]	; (800e4c4 <_scanf_float+0x41c>)
 800e4a2:	f000 f88b 	bl	800e5bc <nanf>
 800e4a6:	ed88 0a00 	vstr	s0, [r8]
 800e4aa:	e7cd      	b.n	800e448 <_scanf_float+0x3a0>
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	4639      	mov	r1, r7
 800e4b0:	f7f2 fb9a 	bl	8000be8 <__aeabi_d2f>
 800e4b4:	f8c8 0000 	str.w	r0, [r8]
 800e4b8:	e7c6      	b.n	800e448 <_scanf_float+0x3a0>
 800e4ba:	2500      	movs	r5, #0
 800e4bc:	e635      	b.n	800e12a <_scanf_float+0x82>
 800e4be:	bf00      	nop
 800e4c0:	0801392c 	.word	0x0801392c
 800e4c4:	08013d48 	.word	0x08013d48

0800e4c8 <cleanup_glue>:
 800e4c8:	b538      	push	{r3, r4, r5, lr}
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	6809      	ldr	r1, [r1, #0]
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	b109      	cbz	r1, 800e4d6 <cleanup_glue+0xe>
 800e4d2:	f7ff fff9 	bl	800e4c8 <cleanup_glue>
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	4628      	mov	r0, r5
 800e4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4de:	f002 bf5b 	b.w	8011398 <_free_r>
	...

0800e4e4 <_reclaim_reent>:
 800e4e4:	4b2c      	ldr	r3, [pc, #176]	; (800e598 <_reclaim_reent+0xb4>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4283      	cmp	r3, r0
 800e4ea:	b570      	push	{r4, r5, r6, lr}
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	d051      	beq.n	800e594 <_reclaim_reent+0xb0>
 800e4f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e4f2:	b143      	cbz	r3, 800e506 <_reclaim_reent+0x22>
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d14a      	bne.n	800e590 <_reclaim_reent+0xac>
 800e4fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4fc:	6819      	ldr	r1, [r3, #0]
 800e4fe:	b111      	cbz	r1, 800e506 <_reclaim_reent+0x22>
 800e500:	4620      	mov	r0, r4
 800e502:	f002 ff49 	bl	8011398 <_free_r>
 800e506:	6961      	ldr	r1, [r4, #20]
 800e508:	b111      	cbz	r1, 800e510 <_reclaim_reent+0x2c>
 800e50a:	4620      	mov	r0, r4
 800e50c:	f002 ff44 	bl	8011398 <_free_r>
 800e510:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e512:	b111      	cbz	r1, 800e51a <_reclaim_reent+0x36>
 800e514:	4620      	mov	r0, r4
 800e516:	f002 ff3f 	bl	8011398 <_free_r>
 800e51a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e51c:	b111      	cbz	r1, 800e524 <_reclaim_reent+0x40>
 800e51e:	4620      	mov	r0, r4
 800e520:	f002 ff3a 	bl	8011398 <_free_r>
 800e524:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e526:	b111      	cbz	r1, 800e52e <_reclaim_reent+0x4a>
 800e528:	4620      	mov	r0, r4
 800e52a:	f002 ff35 	bl	8011398 <_free_r>
 800e52e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e530:	b111      	cbz	r1, 800e538 <_reclaim_reent+0x54>
 800e532:	4620      	mov	r0, r4
 800e534:	f002 ff30 	bl	8011398 <_free_r>
 800e538:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e53a:	b111      	cbz	r1, 800e542 <_reclaim_reent+0x5e>
 800e53c:	4620      	mov	r0, r4
 800e53e:	f002 ff2b 	bl	8011398 <_free_r>
 800e542:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e544:	b111      	cbz	r1, 800e54c <_reclaim_reent+0x68>
 800e546:	4620      	mov	r0, r4
 800e548:	f002 ff26 	bl	8011398 <_free_r>
 800e54c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e54e:	b111      	cbz	r1, 800e556 <_reclaim_reent+0x72>
 800e550:	4620      	mov	r0, r4
 800e552:	f002 ff21 	bl	8011398 <_free_r>
 800e556:	69a3      	ldr	r3, [r4, #24]
 800e558:	b1e3      	cbz	r3, 800e594 <_reclaim_reent+0xb0>
 800e55a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e55c:	4620      	mov	r0, r4
 800e55e:	4798      	blx	r3
 800e560:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e562:	b1b9      	cbz	r1, 800e594 <_reclaim_reent+0xb0>
 800e564:	4620      	mov	r0, r4
 800e566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e56a:	f7ff bfad 	b.w	800e4c8 <cleanup_glue>
 800e56e:	5949      	ldr	r1, [r1, r5]
 800e570:	b941      	cbnz	r1, 800e584 <_reclaim_reent+0xa0>
 800e572:	3504      	adds	r5, #4
 800e574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e576:	2d80      	cmp	r5, #128	; 0x80
 800e578:	68d9      	ldr	r1, [r3, #12]
 800e57a:	d1f8      	bne.n	800e56e <_reclaim_reent+0x8a>
 800e57c:	4620      	mov	r0, r4
 800e57e:	f002 ff0b 	bl	8011398 <_free_r>
 800e582:	e7ba      	b.n	800e4fa <_reclaim_reent+0x16>
 800e584:	680e      	ldr	r6, [r1, #0]
 800e586:	4620      	mov	r0, r4
 800e588:	f002 ff06 	bl	8011398 <_free_r>
 800e58c:	4631      	mov	r1, r6
 800e58e:	e7ef      	b.n	800e570 <_reclaim_reent+0x8c>
 800e590:	2500      	movs	r5, #0
 800e592:	e7ef      	b.n	800e574 <_reclaim_reent+0x90>
 800e594:	bd70      	pop	{r4, r5, r6, pc}
 800e596:	bf00      	nop
 800e598:	20000040 	.word	0x20000040

0800e59c <_sbrk_r>:
 800e59c:	b538      	push	{r3, r4, r5, lr}
 800e59e:	4d06      	ldr	r5, [pc, #24]	; (800e5b8 <_sbrk_r+0x1c>)
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	4608      	mov	r0, r1
 800e5a6:	602b      	str	r3, [r5, #0]
 800e5a8:	f7f5 ff18 	bl	80043dc <_sbrk>
 800e5ac:	1c43      	adds	r3, r0, #1
 800e5ae:	d102      	bne.n	800e5b6 <_sbrk_r+0x1a>
 800e5b0:	682b      	ldr	r3, [r5, #0]
 800e5b2:	b103      	cbz	r3, 800e5b6 <_sbrk_r+0x1a>
 800e5b4:	6023      	str	r3, [r4, #0]
 800e5b6:	bd38      	pop	{r3, r4, r5, pc}
 800e5b8:	200063b0 	.word	0x200063b0

0800e5bc <nanf>:
 800e5bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e5c4 <nanf+0x8>
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop
 800e5c4:	7fc00000 	.word	0x7fc00000

0800e5c8 <siprintf>:
 800e5c8:	b40e      	push	{r1, r2, r3}
 800e5ca:	b500      	push	{lr}
 800e5cc:	b09c      	sub	sp, #112	; 0x70
 800e5ce:	ab1d      	add	r3, sp, #116	; 0x74
 800e5d0:	9002      	str	r0, [sp, #8]
 800e5d2:	9006      	str	r0, [sp, #24]
 800e5d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e5d8:	4809      	ldr	r0, [pc, #36]	; (800e600 <siprintf+0x38>)
 800e5da:	9107      	str	r1, [sp, #28]
 800e5dc:	9104      	str	r1, [sp, #16]
 800e5de:	4909      	ldr	r1, [pc, #36]	; (800e604 <siprintf+0x3c>)
 800e5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5e4:	9105      	str	r1, [sp, #20]
 800e5e6:	6800      	ldr	r0, [r0, #0]
 800e5e8:	9301      	str	r3, [sp, #4]
 800e5ea:	a902      	add	r1, sp, #8
 800e5ec:	f002 ff80 	bl	80114f0 <_svfiprintf_r>
 800e5f0:	9b02      	ldr	r3, [sp, #8]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	701a      	strb	r2, [r3, #0]
 800e5f6:	b01c      	add	sp, #112	; 0x70
 800e5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5fc:	b003      	add	sp, #12
 800e5fe:	4770      	bx	lr
 800e600:	20000040 	.word	0x20000040
 800e604:	ffff0208 	.word	0xffff0208

0800e608 <__sread>:
 800e608:	b510      	push	{r4, lr}
 800e60a:	460c      	mov	r4, r1
 800e60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e610:	f003 f86e 	bl	80116f0 <_read_r>
 800e614:	2800      	cmp	r0, #0
 800e616:	bfab      	itete	ge
 800e618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e61a:	89a3      	ldrhlt	r3, [r4, #12]
 800e61c:	181b      	addge	r3, r3, r0
 800e61e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e622:	bfac      	ite	ge
 800e624:	6563      	strge	r3, [r4, #84]	; 0x54
 800e626:	81a3      	strhlt	r3, [r4, #12]
 800e628:	bd10      	pop	{r4, pc}

0800e62a <__swrite>:
 800e62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e62e:	461f      	mov	r7, r3
 800e630:	898b      	ldrh	r3, [r1, #12]
 800e632:	05db      	lsls	r3, r3, #23
 800e634:	4605      	mov	r5, r0
 800e636:	460c      	mov	r4, r1
 800e638:	4616      	mov	r6, r2
 800e63a:	d505      	bpl.n	800e648 <__swrite+0x1e>
 800e63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e640:	2302      	movs	r3, #2
 800e642:	2200      	movs	r2, #0
 800e644:	f002 f9a6 	bl	8010994 <_lseek_r>
 800e648:	89a3      	ldrh	r3, [r4, #12]
 800e64a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e64e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e652:	81a3      	strh	r3, [r4, #12]
 800e654:	4632      	mov	r2, r6
 800e656:	463b      	mov	r3, r7
 800e658:	4628      	mov	r0, r5
 800e65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e65e:	f000 bec9 	b.w	800f3f4 <_write_r>

0800e662 <__sseek>:
 800e662:	b510      	push	{r4, lr}
 800e664:	460c      	mov	r4, r1
 800e666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e66a:	f002 f993 	bl	8010994 <_lseek_r>
 800e66e:	1c43      	adds	r3, r0, #1
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	bf15      	itete	ne
 800e674:	6560      	strne	r0, [r4, #84]	; 0x54
 800e676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e67a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e67e:	81a3      	strheq	r3, [r4, #12]
 800e680:	bf18      	it	ne
 800e682:	81a3      	strhne	r3, [r4, #12]
 800e684:	bd10      	pop	{r4, pc}

0800e686 <__sclose>:
 800e686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e68a:	f000 bec5 	b.w	800f418 <_close_r>

0800e68e <sulp>:
 800e68e:	b570      	push	{r4, r5, r6, lr}
 800e690:	4604      	mov	r4, r0
 800e692:	460d      	mov	r5, r1
 800e694:	ec45 4b10 	vmov	d0, r4, r5
 800e698:	4616      	mov	r6, r2
 800e69a:	f002 fd1f 	bl	80110dc <__ulp>
 800e69e:	ec51 0b10 	vmov	r0, r1, d0
 800e6a2:	b17e      	cbz	r6, 800e6c4 <sulp+0x36>
 800e6a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e6a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	dd09      	ble.n	800e6c4 <sulp+0x36>
 800e6b0:	051b      	lsls	r3, r3, #20
 800e6b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e6b6:	2400      	movs	r4, #0
 800e6b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e6bc:	4622      	mov	r2, r4
 800e6be:	462b      	mov	r3, r5
 800e6c0:	f7f1 ff9a 	bl	80005f8 <__aeabi_dmul>
 800e6c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e6c8 <_strtod_l>:
 800e6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6cc:	b0a3      	sub	sp, #140	; 0x8c
 800e6ce:	461f      	mov	r7, r3
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	931e      	str	r3, [sp, #120]	; 0x78
 800e6d4:	4ba4      	ldr	r3, [pc, #656]	; (800e968 <_strtod_l+0x2a0>)
 800e6d6:	9219      	str	r2, [sp, #100]	; 0x64
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	9307      	str	r3, [sp, #28]
 800e6dc:	4604      	mov	r4, r0
 800e6de:	4618      	mov	r0, r3
 800e6e0:	4688      	mov	r8, r1
 800e6e2:	f7f1 fd75 	bl	80001d0 <strlen>
 800e6e6:	f04f 0a00 	mov.w	sl, #0
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	f04f 0b00 	mov.w	fp, #0
 800e6f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e6f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6f6:	781a      	ldrb	r2, [r3, #0]
 800e6f8:	2a2b      	cmp	r2, #43	; 0x2b
 800e6fa:	d04c      	beq.n	800e796 <_strtod_l+0xce>
 800e6fc:	d839      	bhi.n	800e772 <_strtod_l+0xaa>
 800e6fe:	2a0d      	cmp	r2, #13
 800e700:	d832      	bhi.n	800e768 <_strtod_l+0xa0>
 800e702:	2a08      	cmp	r2, #8
 800e704:	d832      	bhi.n	800e76c <_strtod_l+0xa4>
 800e706:	2a00      	cmp	r2, #0
 800e708:	d03c      	beq.n	800e784 <_strtod_l+0xbc>
 800e70a:	2300      	movs	r3, #0
 800e70c:	930e      	str	r3, [sp, #56]	; 0x38
 800e70e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e710:	7833      	ldrb	r3, [r6, #0]
 800e712:	2b30      	cmp	r3, #48	; 0x30
 800e714:	f040 80b4 	bne.w	800e880 <_strtod_l+0x1b8>
 800e718:	7873      	ldrb	r3, [r6, #1]
 800e71a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e71e:	2b58      	cmp	r3, #88	; 0x58
 800e720:	d16c      	bne.n	800e7fc <_strtod_l+0x134>
 800e722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e724:	9301      	str	r3, [sp, #4]
 800e726:	ab1e      	add	r3, sp, #120	; 0x78
 800e728:	9702      	str	r7, [sp, #8]
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	4a8f      	ldr	r2, [pc, #572]	; (800e96c <_strtod_l+0x2a4>)
 800e72e:	ab1f      	add	r3, sp, #124	; 0x7c
 800e730:	a91d      	add	r1, sp, #116	; 0x74
 800e732:	4620      	mov	r0, r4
 800e734:	f001 fe22 	bl	801037c <__gethex>
 800e738:	f010 0707 	ands.w	r7, r0, #7
 800e73c:	4605      	mov	r5, r0
 800e73e:	d005      	beq.n	800e74c <_strtod_l+0x84>
 800e740:	2f06      	cmp	r7, #6
 800e742:	d12a      	bne.n	800e79a <_strtod_l+0xd2>
 800e744:	3601      	adds	r6, #1
 800e746:	2300      	movs	r3, #0
 800e748:	961d      	str	r6, [sp, #116]	; 0x74
 800e74a:	930e      	str	r3, [sp, #56]	; 0x38
 800e74c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f040 8596 	bne.w	800f280 <_strtod_l+0xbb8>
 800e754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e756:	b1db      	cbz	r3, 800e790 <_strtod_l+0xc8>
 800e758:	4652      	mov	r2, sl
 800e75a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e75e:	ec43 2b10 	vmov	d0, r2, r3
 800e762:	b023      	add	sp, #140	; 0x8c
 800e764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e768:	2a20      	cmp	r2, #32
 800e76a:	d1ce      	bne.n	800e70a <_strtod_l+0x42>
 800e76c:	3301      	adds	r3, #1
 800e76e:	931d      	str	r3, [sp, #116]	; 0x74
 800e770:	e7c0      	b.n	800e6f4 <_strtod_l+0x2c>
 800e772:	2a2d      	cmp	r2, #45	; 0x2d
 800e774:	d1c9      	bne.n	800e70a <_strtod_l+0x42>
 800e776:	2201      	movs	r2, #1
 800e778:	920e      	str	r2, [sp, #56]	; 0x38
 800e77a:	1c5a      	adds	r2, r3, #1
 800e77c:	921d      	str	r2, [sp, #116]	; 0x74
 800e77e:	785b      	ldrb	r3, [r3, #1]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d1c4      	bne.n	800e70e <_strtod_l+0x46>
 800e784:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e786:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	f040 8576 	bne.w	800f27c <_strtod_l+0xbb4>
 800e790:	4652      	mov	r2, sl
 800e792:	465b      	mov	r3, fp
 800e794:	e7e3      	b.n	800e75e <_strtod_l+0x96>
 800e796:	2200      	movs	r2, #0
 800e798:	e7ee      	b.n	800e778 <_strtod_l+0xb0>
 800e79a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e79c:	b13a      	cbz	r2, 800e7ae <_strtod_l+0xe6>
 800e79e:	2135      	movs	r1, #53	; 0x35
 800e7a0:	a820      	add	r0, sp, #128	; 0x80
 800e7a2:	f002 fda6 	bl	80112f2 <__copybits>
 800e7a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f002 f96b 	bl	8010a84 <_Bfree>
 800e7ae:	3f01      	subs	r7, #1
 800e7b0:	2f05      	cmp	r7, #5
 800e7b2:	d807      	bhi.n	800e7c4 <_strtod_l+0xfc>
 800e7b4:	e8df f007 	tbb	[pc, r7]
 800e7b8:	1d180b0e 	.word	0x1d180b0e
 800e7bc:	030e      	.short	0x030e
 800e7be:	f04f 0b00 	mov.w	fp, #0
 800e7c2:	46da      	mov	sl, fp
 800e7c4:	0728      	lsls	r0, r5, #28
 800e7c6:	d5c1      	bpl.n	800e74c <_strtod_l+0x84>
 800e7c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e7cc:	e7be      	b.n	800e74c <_strtod_l+0x84>
 800e7ce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e7d2:	e7f7      	b.n	800e7c4 <_strtod_l+0xfc>
 800e7d4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e7d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e7da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e7de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e7e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e7e6:	e7ed      	b.n	800e7c4 <_strtod_l+0xfc>
 800e7e8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e970 <_strtod_l+0x2a8>
 800e7ec:	f04f 0a00 	mov.w	sl, #0
 800e7f0:	e7e8      	b.n	800e7c4 <_strtod_l+0xfc>
 800e7f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e7f6:	f04f 3aff 	mov.w	sl, #4294967295
 800e7fa:	e7e3      	b.n	800e7c4 <_strtod_l+0xfc>
 800e7fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	921d      	str	r2, [sp, #116]	; 0x74
 800e802:	785b      	ldrb	r3, [r3, #1]
 800e804:	2b30      	cmp	r3, #48	; 0x30
 800e806:	d0f9      	beq.n	800e7fc <_strtod_l+0x134>
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d09f      	beq.n	800e74c <_strtod_l+0x84>
 800e80c:	2301      	movs	r3, #1
 800e80e:	f04f 0900 	mov.w	r9, #0
 800e812:	9304      	str	r3, [sp, #16]
 800e814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e816:	930a      	str	r3, [sp, #40]	; 0x28
 800e818:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e81c:	464f      	mov	r7, r9
 800e81e:	220a      	movs	r2, #10
 800e820:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e822:	7806      	ldrb	r6, [r0, #0]
 800e824:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e828:	b2d9      	uxtb	r1, r3
 800e82a:	2909      	cmp	r1, #9
 800e82c:	d92a      	bls.n	800e884 <_strtod_l+0x1bc>
 800e82e:	9907      	ldr	r1, [sp, #28]
 800e830:	462a      	mov	r2, r5
 800e832:	f002 ff79 	bl	8011728 <strncmp>
 800e836:	b398      	cbz	r0, 800e8a0 <_strtod_l+0x1d8>
 800e838:	2000      	movs	r0, #0
 800e83a:	4633      	mov	r3, r6
 800e83c:	463d      	mov	r5, r7
 800e83e:	9007      	str	r0, [sp, #28]
 800e840:	4602      	mov	r2, r0
 800e842:	2b65      	cmp	r3, #101	; 0x65
 800e844:	d001      	beq.n	800e84a <_strtod_l+0x182>
 800e846:	2b45      	cmp	r3, #69	; 0x45
 800e848:	d118      	bne.n	800e87c <_strtod_l+0x1b4>
 800e84a:	b91d      	cbnz	r5, 800e854 <_strtod_l+0x18c>
 800e84c:	9b04      	ldr	r3, [sp, #16]
 800e84e:	4303      	orrs	r3, r0
 800e850:	d098      	beq.n	800e784 <_strtod_l+0xbc>
 800e852:	2500      	movs	r5, #0
 800e854:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e858:	f108 0301 	add.w	r3, r8, #1
 800e85c:	931d      	str	r3, [sp, #116]	; 0x74
 800e85e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e862:	2b2b      	cmp	r3, #43	; 0x2b
 800e864:	d075      	beq.n	800e952 <_strtod_l+0x28a>
 800e866:	2b2d      	cmp	r3, #45	; 0x2d
 800e868:	d07b      	beq.n	800e962 <_strtod_l+0x29a>
 800e86a:	f04f 0c00 	mov.w	ip, #0
 800e86e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e872:	2909      	cmp	r1, #9
 800e874:	f240 8082 	bls.w	800e97c <_strtod_l+0x2b4>
 800e878:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e87c:	2600      	movs	r6, #0
 800e87e:	e09d      	b.n	800e9bc <_strtod_l+0x2f4>
 800e880:	2300      	movs	r3, #0
 800e882:	e7c4      	b.n	800e80e <_strtod_l+0x146>
 800e884:	2f08      	cmp	r7, #8
 800e886:	bfd8      	it	le
 800e888:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e88a:	f100 0001 	add.w	r0, r0, #1
 800e88e:	bfda      	itte	le
 800e890:	fb02 3301 	mlale	r3, r2, r1, r3
 800e894:	9309      	strle	r3, [sp, #36]	; 0x24
 800e896:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e89a:	3701      	adds	r7, #1
 800e89c:	901d      	str	r0, [sp, #116]	; 0x74
 800e89e:	e7bf      	b.n	800e820 <_strtod_l+0x158>
 800e8a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8a2:	195a      	adds	r2, r3, r5
 800e8a4:	921d      	str	r2, [sp, #116]	; 0x74
 800e8a6:	5d5b      	ldrb	r3, [r3, r5]
 800e8a8:	2f00      	cmp	r7, #0
 800e8aa:	d037      	beq.n	800e91c <_strtod_l+0x254>
 800e8ac:	9007      	str	r0, [sp, #28]
 800e8ae:	463d      	mov	r5, r7
 800e8b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e8b4:	2a09      	cmp	r2, #9
 800e8b6:	d912      	bls.n	800e8de <_strtod_l+0x216>
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	e7c2      	b.n	800e842 <_strtod_l+0x17a>
 800e8bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8be:	1c5a      	adds	r2, r3, #1
 800e8c0:	921d      	str	r2, [sp, #116]	; 0x74
 800e8c2:	785b      	ldrb	r3, [r3, #1]
 800e8c4:	3001      	adds	r0, #1
 800e8c6:	2b30      	cmp	r3, #48	; 0x30
 800e8c8:	d0f8      	beq.n	800e8bc <_strtod_l+0x1f4>
 800e8ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e8ce:	2a08      	cmp	r2, #8
 800e8d0:	f200 84db 	bhi.w	800f28a <_strtod_l+0xbc2>
 800e8d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e8d6:	9007      	str	r0, [sp, #28]
 800e8d8:	2000      	movs	r0, #0
 800e8da:	920a      	str	r2, [sp, #40]	; 0x28
 800e8dc:	4605      	mov	r5, r0
 800e8de:	3b30      	subs	r3, #48	; 0x30
 800e8e0:	f100 0201 	add.w	r2, r0, #1
 800e8e4:	d014      	beq.n	800e910 <_strtod_l+0x248>
 800e8e6:	9907      	ldr	r1, [sp, #28]
 800e8e8:	4411      	add	r1, r2
 800e8ea:	9107      	str	r1, [sp, #28]
 800e8ec:	462a      	mov	r2, r5
 800e8ee:	eb00 0e05 	add.w	lr, r0, r5
 800e8f2:	210a      	movs	r1, #10
 800e8f4:	4572      	cmp	r2, lr
 800e8f6:	d113      	bne.n	800e920 <_strtod_l+0x258>
 800e8f8:	182a      	adds	r2, r5, r0
 800e8fa:	2a08      	cmp	r2, #8
 800e8fc:	f105 0501 	add.w	r5, r5, #1
 800e900:	4405      	add	r5, r0
 800e902:	dc1c      	bgt.n	800e93e <_strtod_l+0x276>
 800e904:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e906:	220a      	movs	r2, #10
 800e908:	fb02 3301 	mla	r3, r2, r1, r3
 800e90c:	9309      	str	r3, [sp, #36]	; 0x24
 800e90e:	2200      	movs	r2, #0
 800e910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e912:	1c59      	adds	r1, r3, #1
 800e914:	911d      	str	r1, [sp, #116]	; 0x74
 800e916:	785b      	ldrb	r3, [r3, #1]
 800e918:	4610      	mov	r0, r2
 800e91a:	e7c9      	b.n	800e8b0 <_strtod_l+0x1e8>
 800e91c:	4638      	mov	r0, r7
 800e91e:	e7d2      	b.n	800e8c6 <_strtod_l+0x1fe>
 800e920:	2a08      	cmp	r2, #8
 800e922:	dc04      	bgt.n	800e92e <_strtod_l+0x266>
 800e924:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e926:	434e      	muls	r6, r1
 800e928:	9609      	str	r6, [sp, #36]	; 0x24
 800e92a:	3201      	adds	r2, #1
 800e92c:	e7e2      	b.n	800e8f4 <_strtod_l+0x22c>
 800e92e:	f102 0c01 	add.w	ip, r2, #1
 800e932:	f1bc 0f10 	cmp.w	ip, #16
 800e936:	bfd8      	it	le
 800e938:	fb01 f909 	mulle.w	r9, r1, r9
 800e93c:	e7f5      	b.n	800e92a <_strtod_l+0x262>
 800e93e:	2d10      	cmp	r5, #16
 800e940:	bfdc      	itt	le
 800e942:	220a      	movle	r2, #10
 800e944:	fb02 3909 	mlale	r9, r2, r9, r3
 800e948:	e7e1      	b.n	800e90e <_strtod_l+0x246>
 800e94a:	2300      	movs	r3, #0
 800e94c:	9307      	str	r3, [sp, #28]
 800e94e:	2201      	movs	r2, #1
 800e950:	e77c      	b.n	800e84c <_strtod_l+0x184>
 800e952:	f04f 0c00 	mov.w	ip, #0
 800e956:	f108 0302 	add.w	r3, r8, #2
 800e95a:	931d      	str	r3, [sp, #116]	; 0x74
 800e95c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e960:	e785      	b.n	800e86e <_strtod_l+0x1a6>
 800e962:	f04f 0c01 	mov.w	ip, #1
 800e966:	e7f6      	b.n	800e956 <_strtod_l+0x28e>
 800e968:	08013b88 	.word	0x08013b88
 800e96c:	08013934 	.word	0x08013934
 800e970:	7ff00000 	.word	0x7ff00000
 800e974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e976:	1c59      	adds	r1, r3, #1
 800e978:	911d      	str	r1, [sp, #116]	; 0x74
 800e97a:	785b      	ldrb	r3, [r3, #1]
 800e97c:	2b30      	cmp	r3, #48	; 0x30
 800e97e:	d0f9      	beq.n	800e974 <_strtod_l+0x2ac>
 800e980:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e984:	2908      	cmp	r1, #8
 800e986:	f63f af79 	bhi.w	800e87c <_strtod_l+0x1b4>
 800e98a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e98e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e990:	9308      	str	r3, [sp, #32]
 800e992:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e994:	1c59      	adds	r1, r3, #1
 800e996:	911d      	str	r1, [sp, #116]	; 0x74
 800e998:	785b      	ldrb	r3, [r3, #1]
 800e99a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e99e:	2e09      	cmp	r6, #9
 800e9a0:	d937      	bls.n	800ea12 <_strtod_l+0x34a>
 800e9a2:	9e08      	ldr	r6, [sp, #32]
 800e9a4:	1b89      	subs	r1, r1, r6
 800e9a6:	2908      	cmp	r1, #8
 800e9a8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e9ac:	dc02      	bgt.n	800e9b4 <_strtod_l+0x2ec>
 800e9ae:	4576      	cmp	r6, lr
 800e9b0:	bfa8      	it	ge
 800e9b2:	4676      	movge	r6, lr
 800e9b4:	f1bc 0f00 	cmp.w	ip, #0
 800e9b8:	d000      	beq.n	800e9bc <_strtod_l+0x2f4>
 800e9ba:	4276      	negs	r6, r6
 800e9bc:	2d00      	cmp	r5, #0
 800e9be:	d14f      	bne.n	800ea60 <_strtod_l+0x398>
 800e9c0:	9904      	ldr	r1, [sp, #16]
 800e9c2:	4301      	orrs	r1, r0
 800e9c4:	f47f aec2 	bne.w	800e74c <_strtod_l+0x84>
 800e9c8:	2a00      	cmp	r2, #0
 800e9ca:	f47f aedb 	bne.w	800e784 <_strtod_l+0xbc>
 800e9ce:	2b69      	cmp	r3, #105	; 0x69
 800e9d0:	d027      	beq.n	800ea22 <_strtod_l+0x35a>
 800e9d2:	dc24      	bgt.n	800ea1e <_strtod_l+0x356>
 800e9d4:	2b49      	cmp	r3, #73	; 0x49
 800e9d6:	d024      	beq.n	800ea22 <_strtod_l+0x35a>
 800e9d8:	2b4e      	cmp	r3, #78	; 0x4e
 800e9da:	f47f aed3 	bne.w	800e784 <_strtod_l+0xbc>
 800e9de:	499e      	ldr	r1, [pc, #632]	; (800ec58 <_strtod_l+0x590>)
 800e9e0:	a81d      	add	r0, sp, #116	; 0x74
 800e9e2:	f001 ff23 	bl	801082c <__match>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	f43f aecc 	beq.w	800e784 <_strtod_l+0xbc>
 800e9ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	2b28      	cmp	r3, #40	; 0x28
 800e9f2:	d12d      	bne.n	800ea50 <_strtod_l+0x388>
 800e9f4:	4999      	ldr	r1, [pc, #612]	; (800ec5c <_strtod_l+0x594>)
 800e9f6:	aa20      	add	r2, sp, #128	; 0x80
 800e9f8:	a81d      	add	r0, sp, #116	; 0x74
 800e9fa:	f001 ff2b 	bl	8010854 <__hexnan>
 800e9fe:	2805      	cmp	r0, #5
 800ea00:	d126      	bne.n	800ea50 <_strtod_l+0x388>
 800ea02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea04:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ea08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ea0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ea10:	e69c      	b.n	800e74c <_strtod_l+0x84>
 800ea12:	210a      	movs	r1, #10
 800ea14:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ea18:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ea1c:	e7b9      	b.n	800e992 <_strtod_l+0x2ca>
 800ea1e:	2b6e      	cmp	r3, #110	; 0x6e
 800ea20:	e7db      	b.n	800e9da <_strtod_l+0x312>
 800ea22:	498f      	ldr	r1, [pc, #572]	; (800ec60 <_strtod_l+0x598>)
 800ea24:	a81d      	add	r0, sp, #116	; 0x74
 800ea26:	f001 ff01 	bl	801082c <__match>
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	f43f aeaa 	beq.w	800e784 <_strtod_l+0xbc>
 800ea30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ea32:	498c      	ldr	r1, [pc, #560]	; (800ec64 <_strtod_l+0x59c>)
 800ea34:	3b01      	subs	r3, #1
 800ea36:	a81d      	add	r0, sp, #116	; 0x74
 800ea38:	931d      	str	r3, [sp, #116]	; 0x74
 800ea3a:	f001 fef7 	bl	801082c <__match>
 800ea3e:	b910      	cbnz	r0, 800ea46 <_strtod_l+0x37e>
 800ea40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ea42:	3301      	adds	r3, #1
 800ea44:	931d      	str	r3, [sp, #116]	; 0x74
 800ea46:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ec74 <_strtod_l+0x5ac>
 800ea4a:	f04f 0a00 	mov.w	sl, #0
 800ea4e:	e67d      	b.n	800e74c <_strtod_l+0x84>
 800ea50:	4885      	ldr	r0, [pc, #532]	; (800ec68 <_strtod_l+0x5a0>)
 800ea52:	f002 fe61 	bl	8011718 <nan>
 800ea56:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ea5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ea5e:	e675      	b.n	800e74c <_strtod_l+0x84>
 800ea60:	9b07      	ldr	r3, [sp, #28]
 800ea62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea64:	1af3      	subs	r3, r6, r3
 800ea66:	2f00      	cmp	r7, #0
 800ea68:	bf08      	it	eq
 800ea6a:	462f      	moveq	r7, r5
 800ea6c:	2d10      	cmp	r5, #16
 800ea6e:	9308      	str	r3, [sp, #32]
 800ea70:	46a8      	mov	r8, r5
 800ea72:	bfa8      	it	ge
 800ea74:	f04f 0810 	movge.w	r8, #16
 800ea78:	f7f1 fd44 	bl	8000504 <__aeabi_ui2d>
 800ea7c:	2d09      	cmp	r5, #9
 800ea7e:	4682      	mov	sl, r0
 800ea80:	468b      	mov	fp, r1
 800ea82:	dd13      	ble.n	800eaac <_strtod_l+0x3e4>
 800ea84:	4b79      	ldr	r3, [pc, #484]	; (800ec6c <_strtod_l+0x5a4>)
 800ea86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ea8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ea8e:	f7f1 fdb3 	bl	80005f8 <__aeabi_dmul>
 800ea92:	4682      	mov	sl, r0
 800ea94:	4648      	mov	r0, r9
 800ea96:	468b      	mov	fp, r1
 800ea98:	f7f1 fd34 	bl	8000504 <__aeabi_ui2d>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4650      	mov	r0, sl
 800eaa2:	4659      	mov	r1, fp
 800eaa4:	f7f1 fbf2 	bl	800028c <__adddf3>
 800eaa8:	4682      	mov	sl, r0
 800eaaa:	468b      	mov	fp, r1
 800eaac:	2d0f      	cmp	r5, #15
 800eaae:	dc38      	bgt.n	800eb22 <_strtod_l+0x45a>
 800eab0:	9b08      	ldr	r3, [sp, #32]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f43f ae4a 	beq.w	800e74c <_strtod_l+0x84>
 800eab8:	dd24      	ble.n	800eb04 <_strtod_l+0x43c>
 800eaba:	2b16      	cmp	r3, #22
 800eabc:	dc0b      	bgt.n	800ead6 <_strtod_l+0x40e>
 800eabe:	4d6b      	ldr	r5, [pc, #428]	; (800ec6c <_strtod_l+0x5a4>)
 800eac0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800eac4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800eac8:	4652      	mov	r2, sl
 800eaca:	465b      	mov	r3, fp
 800eacc:	f7f1 fd94 	bl	80005f8 <__aeabi_dmul>
 800ead0:	4682      	mov	sl, r0
 800ead2:	468b      	mov	fp, r1
 800ead4:	e63a      	b.n	800e74c <_strtod_l+0x84>
 800ead6:	9a08      	ldr	r2, [sp, #32]
 800ead8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800eadc:	4293      	cmp	r3, r2
 800eade:	db20      	blt.n	800eb22 <_strtod_l+0x45a>
 800eae0:	4c62      	ldr	r4, [pc, #392]	; (800ec6c <_strtod_l+0x5a4>)
 800eae2:	f1c5 050f 	rsb	r5, r5, #15
 800eae6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800eaea:	4652      	mov	r2, sl
 800eaec:	465b      	mov	r3, fp
 800eaee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaf2:	f7f1 fd81 	bl	80005f8 <__aeabi_dmul>
 800eaf6:	9b08      	ldr	r3, [sp, #32]
 800eaf8:	1b5d      	subs	r5, r3, r5
 800eafa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800eafe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eb02:	e7e3      	b.n	800eacc <_strtod_l+0x404>
 800eb04:	9b08      	ldr	r3, [sp, #32]
 800eb06:	3316      	adds	r3, #22
 800eb08:	db0b      	blt.n	800eb22 <_strtod_l+0x45a>
 800eb0a:	9b07      	ldr	r3, [sp, #28]
 800eb0c:	4a57      	ldr	r2, [pc, #348]	; (800ec6c <_strtod_l+0x5a4>)
 800eb0e:	1b9e      	subs	r6, r3, r6
 800eb10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800eb14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eb18:	4650      	mov	r0, sl
 800eb1a:	4659      	mov	r1, fp
 800eb1c:	f7f1 fe96 	bl	800084c <__aeabi_ddiv>
 800eb20:	e7d6      	b.n	800ead0 <_strtod_l+0x408>
 800eb22:	9b08      	ldr	r3, [sp, #32]
 800eb24:	eba5 0808 	sub.w	r8, r5, r8
 800eb28:	4498      	add	r8, r3
 800eb2a:	f1b8 0f00 	cmp.w	r8, #0
 800eb2e:	dd71      	ble.n	800ec14 <_strtod_l+0x54c>
 800eb30:	f018 030f 	ands.w	r3, r8, #15
 800eb34:	d00a      	beq.n	800eb4c <_strtod_l+0x484>
 800eb36:	494d      	ldr	r1, [pc, #308]	; (800ec6c <_strtod_l+0x5a4>)
 800eb38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eb3c:	4652      	mov	r2, sl
 800eb3e:	465b      	mov	r3, fp
 800eb40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb44:	f7f1 fd58 	bl	80005f8 <__aeabi_dmul>
 800eb48:	4682      	mov	sl, r0
 800eb4a:	468b      	mov	fp, r1
 800eb4c:	f038 080f 	bics.w	r8, r8, #15
 800eb50:	d04d      	beq.n	800ebee <_strtod_l+0x526>
 800eb52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800eb56:	dd22      	ble.n	800eb9e <_strtod_l+0x4d6>
 800eb58:	2500      	movs	r5, #0
 800eb5a:	462e      	mov	r6, r5
 800eb5c:	9509      	str	r5, [sp, #36]	; 0x24
 800eb5e:	9507      	str	r5, [sp, #28]
 800eb60:	2322      	movs	r3, #34	; 0x22
 800eb62:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ec74 <_strtod_l+0x5ac>
 800eb66:	6023      	str	r3, [r4, #0]
 800eb68:	f04f 0a00 	mov.w	sl, #0
 800eb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	f43f adec 	beq.w	800e74c <_strtod_l+0x84>
 800eb74:	991e      	ldr	r1, [sp, #120]	; 0x78
 800eb76:	4620      	mov	r0, r4
 800eb78:	f001 ff84 	bl	8010a84 <_Bfree>
 800eb7c:	9907      	ldr	r1, [sp, #28]
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f001 ff80 	bl	8010a84 <_Bfree>
 800eb84:	4631      	mov	r1, r6
 800eb86:	4620      	mov	r0, r4
 800eb88:	f001 ff7c 	bl	8010a84 <_Bfree>
 800eb8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f001 ff78 	bl	8010a84 <_Bfree>
 800eb94:	4629      	mov	r1, r5
 800eb96:	4620      	mov	r0, r4
 800eb98:	f001 ff74 	bl	8010a84 <_Bfree>
 800eb9c:	e5d6      	b.n	800e74c <_strtod_l+0x84>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800eba4:	4650      	mov	r0, sl
 800eba6:	4659      	mov	r1, fp
 800eba8:	4699      	mov	r9, r3
 800ebaa:	f1b8 0f01 	cmp.w	r8, #1
 800ebae:	dc21      	bgt.n	800ebf4 <_strtod_l+0x52c>
 800ebb0:	b10b      	cbz	r3, 800ebb6 <_strtod_l+0x4ee>
 800ebb2:	4682      	mov	sl, r0
 800ebb4:	468b      	mov	fp, r1
 800ebb6:	4b2e      	ldr	r3, [pc, #184]	; (800ec70 <_strtod_l+0x5a8>)
 800ebb8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ebbc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ebc0:	4652      	mov	r2, sl
 800ebc2:	465b      	mov	r3, fp
 800ebc4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ebc8:	f7f1 fd16 	bl	80005f8 <__aeabi_dmul>
 800ebcc:	4b29      	ldr	r3, [pc, #164]	; (800ec74 <_strtod_l+0x5ac>)
 800ebce:	460a      	mov	r2, r1
 800ebd0:	400b      	ands	r3, r1
 800ebd2:	4929      	ldr	r1, [pc, #164]	; (800ec78 <_strtod_l+0x5b0>)
 800ebd4:	428b      	cmp	r3, r1
 800ebd6:	4682      	mov	sl, r0
 800ebd8:	d8be      	bhi.n	800eb58 <_strtod_l+0x490>
 800ebda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ebde:	428b      	cmp	r3, r1
 800ebe0:	bf86      	itte	hi
 800ebe2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ec7c <_strtod_l+0x5b4>
 800ebe6:	f04f 3aff 	movhi.w	sl, #4294967295
 800ebea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ebee:	2300      	movs	r3, #0
 800ebf0:	9304      	str	r3, [sp, #16]
 800ebf2:	e081      	b.n	800ecf8 <_strtod_l+0x630>
 800ebf4:	f018 0f01 	tst.w	r8, #1
 800ebf8:	d007      	beq.n	800ec0a <_strtod_l+0x542>
 800ebfa:	4b1d      	ldr	r3, [pc, #116]	; (800ec70 <_strtod_l+0x5a8>)
 800ebfc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec04:	f7f1 fcf8 	bl	80005f8 <__aeabi_dmul>
 800ec08:	2301      	movs	r3, #1
 800ec0a:	f109 0901 	add.w	r9, r9, #1
 800ec0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ec12:	e7ca      	b.n	800ebaa <_strtod_l+0x4e2>
 800ec14:	d0eb      	beq.n	800ebee <_strtod_l+0x526>
 800ec16:	f1c8 0800 	rsb	r8, r8, #0
 800ec1a:	f018 020f 	ands.w	r2, r8, #15
 800ec1e:	d00a      	beq.n	800ec36 <_strtod_l+0x56e>
 800ec20:	4b12      	ldr	r3, [pc, #72]	; (800ec6c <_strtod_l+0x5a4>)
 800ec22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec26:	4650      	mov	r0, sl
 800ec28:	4659      	mov	r1, fp
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	f7f1 fe0d 	bl	800084c <__aeabi_ddiv>
 800ec32:	4682      	mov	sl, r0
 800ec34:	468b      	mov	fp, r1
 800ec36:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ec3a:	d0d8      	beq.n	800ebee <_strtod_l+0x526>
 800ec3c:	f1b8 0f1f 	cmp.w	r8, #31
 800ec40:	dd1e      	ble.n	800ec80 <_strtod_l+0x5b8>
 800ec42:	2500      	movs	r5, #0
 800ec44:	462e      	mov	r6, r5
 800ec46:	9509      	str	r5, [sp, #36]	; 0x24
 800ec48:	9507      	str	r5, [sp, #28]
 800ec4a:	2322      	movs	r3, #34	; 0x22
 800ec4c:	f04f 0a00 	mov.w	sl, #0
 800ec50:	f04f 0b00 	mov.w	fp, #0
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	e789      	b.n	800eb6c <_strtod_l+0x4a4>
 800ec58:	08013905 	.word	0x08013905
 800ec5c:	08013948 	.word	0x08013948
 800ec60:	080138fd 	.word	0x080138fd
 800ec64:	08013a8c 	.word	0x08013a8c
 800ec68:	08013d48 	.word	0x08013d48
 800ec6c:	08013c28 	.word	0x08013c28
 800ec70:	08013c00 	.word	0x08013c00
 800ec74:	7ff00000 	.word	0x7ff00000
 800ec78:	7ca00000 	.word	0x7ca00000
 800ec7c:	7fefffff 	.word	0x7fefffff
 800ec80:	f018 0310 	ands.w	r3, r8, #16
 800ec84:	bf18      	it	ne
 800ec86:	236a      	movne	r3, #106	; 0x6a
 800ec88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800f040 <_strtod_l+0x978>
 800ec8c:	9304      	str	r3, [sp, #16]
 800ec8e:	4650      	mov	r0, sl
 800ec90:	4659      	mov	r1, fp
 800ec92:	2300      	movs	r3, #0
 800ec94:	f018 0f01 	tst.w	r8, #1
 800ec98:	d004      	beq.n	800eca4 <_strtod_l+0x5dc>
 800ec9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ec9e:	f7f1 fcab 	bl	80005f8 <__aeabi_dmul>
 800eca2:	2301      	movs	r3, #1
 800eca4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800eca8:	f109 0908 	add.w	r9, r9, #8
 800ecac:	d1f2      	bne.n	800ec94 <_strtod_l+0x5cc>
 800ecae:	b10b      	cbz	r3, 800ecb4 <_strtod_l+0x5ec>
 800ecb0:	4682      	mov	sl, r0
 800ecb2:	468b      	mov	fp, r1
 800ecb4:	9b04      	ldr	r3, [sp, #16]
 800ecb6:	b1bb      	cbz	r3, 800ece8 <_strtod_l+0x620>
 800ecb8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ecbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	4659      	mov	r1, fp
 800ecc4:	dd10      	ble.n	800ece8 <_strtod_l+0x620>
 800ecc6:	2b1f      	cmp	r3, #31
 800ecc8:	f340 8128 	ble.w	800ef1c <_strtod_l+0x854>
 800eccc:	2b34      	cmp	r3, #52	; 0x34
 800ecce:	bfde      	ittt	le
 800ecd0:	3b20      	suble	r3, #32
 800ecd2:	f04f 32ff 	movle.w	r2, #4294967295
 800ecd6:	fa02 f303 	lslle.w	r3, r2, r3
 800ecda:	f04f 0a00 	mov.w	sl, #0
 800ecde:	bfcc      	ite	gt
 800ece0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ece4:	ea03 0b01 	andle.w	fp, r3, r1
 800ece8:	2200      	movs	r2, #0
 800ecea:	2300      	movs	r3, #0
 800ecec:	4650      	mov	r0, sl
 800ecee:	4659      	mov	r1, fp
 800ecf0:	f7f1 feea 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d1a4      	bne.n	800ec42 <_strtod_l+0x57a>
 800ecf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecfa:	9300      	str	r3, [sp, #0]
 800ecfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ecfe:	462b      	mov	r3, r5
 800ed00:	463a      	mov	r2, r7
 800ed02:	4620      	mov	r0, r4
 800ed04:	f001 ff2a 	bl	8010b5c <__s2b>
 800ed08:	9009      	str	r0, [sp, #36]	; 0x24
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	f43f af24 	beq.w	800eb58 <_strtod_l+0x490>
 800ed10:	9b07      	ldr	r3, [sp, #28]
 800ed12:	1b9e      	subs	r6, r3, r6
 800ed14:	9b08      	ldr	r3, [sp, #32]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	bfb4      	ite	lt
 800ed1a:	4633      	movlt	r3, r6
 800ed1c:	2300      	movge	r3, #0
 800ed1e:	9310      	str	r3, [sp, #64]	; 0x40
 800ed20:	9b08      	ldr	r3, [sp, #32]
 800ed22:	2500      	movs	r5, #0
 800ed24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ed28:	9318      	str	r3, [sp, #96]	; 0x60
 800ed2a:	462e      	mov	r6, r5
 800ed2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed2e:	4620      	mov	r0, r4
 800ed30:	6859      	ldr	r1, [r3, #4]
 800ed32:	f001 fe67 	bl	8010a04 <_Balloc>
 800ed36:	9007      	str	r0, [sp, #28]
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	f43f af11 	beq.w	800eb60 <_strtod_l+0x498>
 800ed3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed40:	691a      	ldr	r2, [r3, #16]
 800ed42:	3202      	adds	r2, #2
 800ed44:	f103 010c 	add.w	r1, r3, #12
 800ed48:	0092      	lsls	r2, r2, #2
 800ed4a:	300c      	adds	r0, #12
 800ed4c:	f7fe fcd1 	bl	800d6f2 <memcpy>
 800ed50:	ec4b ab10 	vmov	d0, sl, fp
 800ed54:	aa20      	add	r2, sp, #128	; 0x80
 800ed56:	a91f      	add	r1, sp, #124	; 0x7c
 800ed58:	4620      	mov	r0, r4
 800ed5a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ed5e:	f002 fa39 	bl	80111d4 <__d2b>
 800ed62:	901e      	str	r0, [sp, #120]	; 0x78
 800ed64:	2800      	cmp	r0, #0
 800ed66:	f43f aefb 	beq.w	800eb60 <_strtod_l+0x498>
 800ed6a:	2101      	movs	r1, #1
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f001 ff8f 	bl	8010c90 <__i2b>
 800ed72:	4606      	mov	r6, r0
 800ed74:	2800      	cmp	r0, #0
 800ed76:	f43f aef3 	beq.w	800eb60 <_strtod_l+0x498>
 800ed7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ed7c:	9904      	ldr	r1, [sp, #16]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	bfab      	itete	ge
 800ed82:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ed84:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ed86:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ed88:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ed8c:	bfac      	ite	ge
 800ed8e:	eb03 0902 	addge.w	r9, r3, r2
 800ed92:	1ad7      	sublt	r7, r2, r3
 800ed94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ed96:	eba3 0801 	sub.w	r8, r3, r1
 800ed9a:	4490      	add	r8, r2
 800ed9c:	4ba3      	ldr	r3, [pc, #652]	; (800f02c <_strtod_l+0x964>)
 800ed9e:	f108 38ff 	add.w	r8, r8, #4294967295
 800eda2:	4598      	cmp	r8, r3
 800eda4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eda8:	f280 80cc 	bge.w	800ef44 <_strtod_l+0x87c>
 800edac:	eba3 0308 	sub.w	r3, r3, r8
 800edb0:	2b1f      	cmp	r3, #31
 800edb2:	eba2 0203 	sub.w	r2, r2, r3
 800edb6:	f04f 0101 	mov.w	r1, #1
 800edba:	f300 80b6 	bgt.w	800ef2a <_strtod_l+0x862>
 800edbe:	fa01 f303 	lsl.w	r3, r1, r3
 800edc2:	9311      	str	r3, [sp, #68]	; 0x44
 800edc4:	2300      	movs	r3, #0
 800edc6:	930c      	str	r3, [sp, #48]	; 0x30
 800edc8:	eb09 0802 	add.w	r8, r9, r2
 800edcc:	9b04      	ldr	r3, [sp, #16]
 800edce:	45c1      	cmp	r9, r8
 800edd0:	4417      	add	r7, r2
 800edd2:	441f      	add	r7, r3
 800edd4:	464b      	mov	r3, r9
 800edd6:	bfa8      	it	ge
 800edd8:	4643      	movge	r3, r8
 800edda:	42bb      	cmp	r3, r7
 800eddc:	bfa8      	it	ge
 800edde:	463b      	movge	r3, r7
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	bfc2      	ittt	gt
 800ede4:	eba8 0803 	subgt.w	r8, r8, r3
 800ede8:	1aff      	subgt	r7, r7, r3
 800edea:	eba9 0903 	subgt.w	r9, r9, r3
 800edee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	dd17      	ble.n	800ee24 <_strtod_l+0x75c>
 800edf4:	4631      	mov	r1, r6
 800edf6:	461a      	mov	r2, r3
 800edf8:	4620      	mov	r0, r4
 800edfa:	f002 f805 	bl	8010e08 <__pow5mult>
 800edfe:	4606      	mov	r6, r0
 800ee00:	2800      	cmp	r0, #0
 800ee02:	f43f aead 	beq.w	800eb60 <_strtod_l+0x498>
 800ee06:	4601      	mov	r1, r0
 800ee08:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f001 ff56 	bl	8010cbc <__multiply>
 800ee10:	900f      	str	r0, [sp, #60]	; 0x3c
 800ee12:	2800      	cmp	r0, #0
 800ee14:	f43f aea4 	beq.w	800eb60 <_strtod_l+0x498>
 800ee18:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f001 fe32 	bl	8010a84 <_Bfree>
 800ee20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee22:	931e      	str	r3, [sp, #120]	; 0x78
 800ee24:	f1b8 0f00 	cmp.w	r8, #0
 800ee28:	f300 8091 	bgt.w	800ef4e <_strtod_l+0x886>
 800ee2c:	9b08      	ldr	r3, [sp, #32]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	dd08      	ble.n	800ee44 <_strtod_l+0x77c>
 800ee32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ee34:	9907      	ldr	r1, [sp, #28]
 800ee36:	4620      	mov	r0, r4
 800ee38:	f001 ffe6 	bl	8010e08 <__pow5mult>
 800ee3c:	9007      	str	r0, [sp, #28]
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	f43f ae8e 	beq.w	800eb60 <_strtod_l+0x498>
 800ee44:	2f00      	cmp	r7, #0
 800ee46:	dd08      	ble.n	800ee5a <_strtod_l+0x792>
 800ee48:	9907      	ldr	r1, [sp, #28]
 800ee4a:	463a      	mov	r2, r7
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f002 f835 	bl	8010ebc <__lshift>
 800ee52:	9007      	str	r0, [sp, #28]
 800ee54:	2800      	cmp	r0, #0
 800ee56:	f43f ae83 	beq.w	800eb60 <_strtod_l+0x498>
 800ee5a:	f1b9 0f00 	cmp.w	r9, #0
 800ee5e:	dd08      	ble.n	800ee72 <_strtod_l+0x7aa>
 800ee60:	4631      	mov	r1, r6
 800ee62:	464a      	mov	r2, r9
 800ee64:	4620      	mov	r0, r4
 800ee66:	f002 f829 	bl	8010ebc <__lshift>
 800ee6a:	4606      	mov	r6, r0
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	f43f ae77 	beq.w	800eb60 <_strtod_l+0x498>
 800ee72:	9a07      	ldr	r2, [sp, #28]
 800ee74:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee76:	4620      	mov	r0, r4
 800ee78:	f002 f8a8 	bl	8010fcc <__mdiff>
 800ee7c:	4605      	mov	r5, r0
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	f43f ae6e 	beq.w	800eb60 <_strtod_l+0x498>
 800ee84:	68c3      	ldr	r3, [r0, #12]
 800ee86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee88:	2300      	movs	r3, #0
 800ee8a:	60c3      	str	r3, [r0, #12]
 800ee8c:	4631      	mov	r1, r6
 800ee8e:	f002 f881 	bl	8010f94 <__mcmp>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	da65      	bge.n	800ef62 <_strtod_l+0x89a>
 800ee96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee98:	ea53 030a 	orrs.w	r3, r3, sl
 800ee9c:	f040 8087 	bne.w	800efae <_strtod_l+0x8e6>
 800eea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f040 8082 	bne.w	800efae <_strtod_l+0x8e6>
 800eeaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eeae:	0d1b      	lsrs	r3, r3, #20
 800eeb0:	051b      	lsls	r3, r3, #20
 800eeb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800eeb6:	d97a      	bls.n	800efae <_strtod_l+0x8e6>
 800eeb8:	696b      	ldr	r3, [r5, #20]
 800eeba:	b913      	cbnz	r3, 800eec2 <_strtod_l+0x7fa>
 800eebc:	692b      	ldr	r3, [r5, #16]
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	dd75      	ble.n	800efae <_strtod_l+0x8e6>
 800eec2:	4629      	mov	r1, r5
 800eec4:	2201      	movs	r2, #1
 800eec6:	4620      	mov	r0, r4
 800eec8:	f001 fff8 	bl	8010ebc <__lshift>
 800eecc:	4631      	mov	r1, r6
 800eece:	4605      	mov	r5, r0
 800eed0:	f002 f860 	bl	8010f94 <__mcmp>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	dd6a      	ble.n	800efae <_strtod_l+0x8e6>
 800eed8:	9904      	ldr	r1, [sp, #16]
 800eeda:	4a55      	ldr	r2, [pc, #340]	; (800f030 <_strtod_l+0x968>)
 800eedc:	465b      	mov	r3, fp
 800eede:	2900      	cmp	r1, #0
 800eee0:	f000 8085 	beq.w	800efee <_strtod_l+0x926>
 800eee4:	ea02 010b 	and.w	r1, r2, fp
 800eee8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eeec:	dc7f      	bgt.n	800efee <_strtod_l+0x926>
 800eeee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eef2:	f77f aeaa 	ble.w	800ec4a <_strtod_l+0x582>
 800eef6:	4a4f      	ldr	r2, [pc, #316]	; (800f034 <_strtod_l+0x96c>)
 800eef8:	2300      	movs	r3, #0
 800eefa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800eefe:	4650      	mov	r0, sl
 800ef00:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ef04:	4659      	mov	r1, fp
 800ef06:	f7f1 fb77 	bl	80005f8 <__aeabi_dmul>
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	4303      	orrs	r3, r0
 800ef0e:	bf08      	it	eq
 800ef10:	2322      	moveq	r3, #34	; 0x22
 800ef12:	4682      	mov	sl, r0
 800ef14:	468b      	mov	fp, r1
 800ef16:	bf08      	it	eq
 800ef18:	6023      	streq	r3, [r4, #0]
 800ef1a:	e62b      	b.n	800eb74 <_strtod_l+0x4ac>
 800ef1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef20:	fa02 f303 	lsl.w	r3, r2, r3
 800ef24:	ea03 0a0a 	and.w	sl, r3, sl
 800ef28:	e6de      	b.n	800ece8 <_strtod_l+0x620>
 800ef2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ef2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ef32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ef36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ef3a:	fa01 f308 	lsl.w	r3, r1, r8
 800ef3e:	930c      	str	r3, [sp, #48]	; 0x30
 800ef40:	9111      	str	r1, [sp, #68]	; 0x44
 800ef42:	e741      	b.n	800edc8 <_strtod_l+0x700>
 800ef44:	2300      	movs	r3, #0
 800ef46:	930c      	str	r3, [sp, #48]	; 0x30
 800ef48:	2301      	movs	r3, #1
 800ef4a:	9311      	str	r3, [sp, #68]	; 0x44
 800ef4c:	e73c      	b.n	800edc8 <_strtod_l+0x700>
 800ef4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ef50:	4642      	mov	r2, r8
 800ef52:	4620      	mov	r0, r4
 800ef54:	f001 ffb2 	bl	8010ebc <__lshift>
 800ef58:	901e      	str	r0, [sp, #120]	; 0x78
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	f47f af66 	bne.w	800ee2c <_strtod_l+0x764>
 800ef60:	e5fe      	b.n	800eb60 <_strtod_l+0x498>
 800ef62:	465f      	mov	r7, fp
 800ef64:	d16e      	bne.n	800f044 <_strtod_l+0x97c>
 800ef66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef6c:	b342      	cbz	r2, 800efc0 <_strtod_l+0x8f8>
 800ef6e:	4a32      	ldr	r2, [pc, #200]	; (800f038 <_strtod_l+0x970>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d128      	bne.n	800efc6 <_strtod_l+0x8fe>
 800ef74:	9b04      	ldr	r3, [sp, #16]
 800ef76:	4650      	mov	r0, sl
 800ef78:	b1eb      	cbz	r3, 800efb6 <_strtod_l+0x8ee>
 800ef7a:	4a2d      	ldr	r2, [pc, #180]	; (800f030 <_strtod_l+0x968>)
 800ef7c:	403a      	ands	r2, r7
 800ef7e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ef82:	f04f 31ff 	mov.w	r1, #4294967295
 800ef86:	d819      	bhi.n	800efbc <_strtod_l+0x8f4>
 800ef88:	0d12      	lsrs	r2, r2, #20
 800ef8a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ef8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ef92:	4298      	cmp	r0, r3
 800ef94:	d117      	bne.n	800efc6 <_strtod_l+0x8fe>
 800ef96:	4b29      	ldr	r3, [pc, #164]	; (800f03c <_strtod_l+0x974>)
 800ef98:	429f      	cmp	r7, r3
 800ef9a:	d102      	bne.n	800efa2 <_strtod_l+0x8da>
 800ef9c:	3001      	adds	r0, #1
 800ef9e:	f43f addf 	beq.w	800eb60 <_strtod_l+0x498>
 800efa2:	4b23      	ldr	r3, [pc, #140]	; (800f030 <_strtod_l+0x968>)
 800efa4:	403b      	ands	r3, r7
 800efa6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800efaa:	f04f 0a00 	mov.w	sl, #0
 800efae:	9b04      	ldr	r3, [sp, #16]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d1a0      	bne.n	800eef6 <_strtod_l+0x82e>
 800efb4:	e5de      	b.n	800eb74 <_strtod_l+0x4ac>
 800efb6:	f04f 33ff 	mov.w	r3, #4294967295
 800efba:	e7ea      	b.n	800ef92 <_strtod_l+0x8ca>
 800efbc:	460b      	mov	r3, r1
 800efbe:	e7e8      	b.n	800ef92 <_strtod_l+0x8ca>
 800efc0:	ea53 030a 	orrs.w	r3, r3, sl
 800efc4:	d088      	beq.n	800eed8 <_strtod_l+0x810>
 800efc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efc8:	b1db      	cbz	r3, 800f002 <_strtod_l+0x93a>
 800efca:	423b      	tst	r3, r7
 800efcc:	d0ef      	beq.n	800efae <_strtod_l+0x8e6>
 800efce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efd0:	9a04      	ldr	r2, [sp, #16]
 800efd2:	4650      	mov	r0, sl
 800efd4:	4659      	mov	r1, fp
 800efd6:	b1c3      	cbz	r3, 800f00a <_strtod_l+0x942>
 800efd8:	f7ff fb59 	bl	800e68e <sulp>
 800efdc:	4602      	mov	r2, r0
 800efde:	460b      	mov	r3, r1
 800efe0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800efe4:	f7f1 f952 	bl	800028c <__adddf3>
 800efe8:	4682      	mov	sl, r0
 800efea:	468b      	mov	fp, r1
 800efec:	e7df      	b.n	800efae <_strtod_l+0x8e6>
 800efee:	4013      	ands	r3, r2
 800eff0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eff4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eff8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800effc:	f04f 3aff 	mov.w	sl, #4294967295
 800f000:	e7d5      	b.n	800efae <_strtod_l+0x8e6>
 800f002:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f004:	ea13 0f0a 	tst.w	r3, sl
 800f008:	e7e0      	b.n	800efcc <_strtod_l+0x904>
 800f00a:	f7ff fb40 	bl	800e68e <sulp>
 800f00e:	4602      	mov	r2, r0
 800f010:	460b      	mov	r3, r1
 800f012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f016:	f7f1 f937 	bl	8000288 <__aeabi_dsub>
 800f01a:	2200      	movs	r2, #0
 800f01c:	2300      	movs	r3, #0
 800f01e:	4682      	mov	sl, r0
 800f020:	468b      	mov	fp, r1
 800f022:	f7f1 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 800f026:	2800      	cmp	r0, #0
 800f028:	d0c1      	beq.n	800efae <_strtod_l+0x8e6>
 800f02a:	e60e      	b.n	800ec4a <_strtod_l+0x582>
 800f02c:	fffffc02 	.word	0xfffffc02
 800f030:	7ff00000 	.word	0x7ff00000
 800f034:	39500000 	.word	0x39500000
 800f038:	000fffff 	.word	0x000fffff
 800f03c:	7fefffff 	.word	0x7fefffff
 800f040:	08013960 	.word	0x08013960
 800f044:	4631      	mov	r1, r6
 800f046:	4628      	mov	r0, r5
 800f048:	f002 f920 	bl	801128c <__ratio>
 800f04c:	ec59 8b10 	vmov	r8, r9, d0
 800f050:	ee10 0a10 	vmov	r0, s0
 800f054:	2200      	movs	r2, #0
 800f056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f05a:	4649      	mov	r1, r9
 800f05c:	f7f1 fd48 	bl	8000af0 <__aeabi_dcmple>
 800f060:	2800      	cmp	r0, #0
 800f062:	d07c      	beq.n	800f15e <_strtod_l+0xa96>
 800f064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f066:	2b00      	cmp	r3, #0
 800f068:	d04c      	beq.n	800f104 <_strtod_l+0xa3c>
 800f06a:	4b95      	ldr	r3, [pc, #596]	; (800f2c0 <_strtod_l+0xbf8>)
 800f06c:	2200      	movs	r2, #0
 800f06e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f072:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f2c0 <_strtod_l+0xbf8>
 800f076:	f04f 0800 	mov.w	r8, #0
 800f07a:	4b92      	ldr	r3, [pc, #584]	; (800f2c4 <_strtod_l+0xbfc>)
 800f07c:	403b      	ands	r3, r7
 800f07e:	9311      	str	r3, [sp, #68]	; 0x44
 800f080:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f082:	4b91      	ldr	r3, [pc, #580]	; (800f2c8 <_strtod_l+0xc00>)
 800f084:	429a      	cmp	r2, r3
 800f086:	f040 80b2 	bne.w	800f1ee <_strtod_l+0xb26>
 800f08a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f08e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f092:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f096:	ec4b ab10 	vmov	d0, sl, fp
 800f09a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800f09e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f0a2:	f002 f81b 	bl	80110dc <__ulp>
 800f0a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f0aa:	ec53 2b10 	vmov	r2, r3, d0
 800f0ae:	f7f1 faa3 	bl	80005f8 <__aeabi_dmul>
 800f0b2:	4652      	mov	r2, sl
 800f0b4:	465b      	mov	r3, fp
 800f0b6:	f7f1 f8e9 	bl	800028c <__adddf3>
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	4981      	ldr	r1, [pc, #516]	; (800f2c4 <_strtod_l+0xbfc>)
 800f0be:	4a83      	ldr	r2, [pc, #524]	; (800f2cc <_strtod_l+0xc04>)
 800f0c0:	4019      	ands	r1, r3
 800f0c2:	4291      	cmp	r1, r2
 800f0c4:	4682      	mov	sl, r0
 800f0c6:	d95e      	bls.n	800f186 <_strtod_l+0xabe>
 800f0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d103      	bne.n	800f0da <_strtod_l+0xa12>
 800f0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	f43f ad43 	beq.w	800eb60 <_strtod_l+0x498>
 800f0da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f2d8 <_strtod_l+0xc10>
 800f0de:	f04f 3aff 	mov.w	sl, #4294967295
 800f0e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f001 fccd 	bl	8010a84 <_Bfree>
 800f0ea:	9907      	ldr	r1, [sp, #28]
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f001 fcc9 	bl	8010a84 <_Bfree>
 800f0f2:	4631      	mov	r1, r6
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f001 fcc5 	bl	8010a84 <_Bfree>
 800f0fa:	4629      	mov	r1, r5
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	f001 fcc1 	bl	8010a84 <_Bfree>
 800f102:	e613      	b.n	800ed2c <_strtod_l+0x664>
 800f104:	f1ba 0f00 	cmp.w	sl, #0
 800f108:	d11b      	bne.n	800f142 <_strtod_l+0xa7a>
 800f10a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f10e:	b9f3      	cbnz	r3, 800f14e <_strtod_l+0xa86>
 800f110:	4b6b      	ldr	r3, [pc, #428]	; (800f2c0 <_strtod_l+0xbf8>)
 800f112:	2200      	movs	r2, #0
 800f114:	4640      	mov	r0, r8
 800f116:	4649      	mov	r1, r9
 800f118:	f7f1 fce0 	bl	8000adc <__aeabi_dcmplt>
 800f11c:	b9d0      	cbnz	r0, 800f154 <_strtod_l+0xa8c>
 800f11e:	4640      	mov	r0, r8
 800f120:	4649      	mov	r1, r9
 800f122:	4b6b      	ldr	r3, [pc, #428]	; (800f2d0 <_strtod_l+0xc08>)
 800f124:	2200      	movs	r2, #0
 800f126:	f7f1 fa67 	bl	80005f8 <__aeabi_dmul>
 800f12a:	4680      	mov	r8, r0
 800f12c:	4689      	mov	r9, r1
 800f12e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f132:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f136:	931b      	str	r3, [sp, #108]	; 0x6c
 800f138:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f13c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f140:	e79b      	b.n	800f07a <_strtod_l+0x9b2>
 800f142:	f1ba 0f01 	cmp.w	sl, #1
 800f146:	d102      	bne.n	800f14e <_strtod_l+0xa86>
 800f148:	2f00      	cmp	r7, #0
 800f14a:	f43f ad7e 	beq.w	800ec4a <_strtod_l+0x582>
 800f14e:	4b61      	ldr	r3, [pc, #388]	; (800f2d4 <_strtod_l+0xc0c>)
 800f150:	2200      	movs	r2, #0
 800f152:	e78c      	b.n	800f06e <_strtod_l+0x9a6>
 800f154:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f2d0 <_strtod_l+0xc08>
 800f158:	f04f 0800 	mov.w	r8, #0
 800f15c:	e7e7      	b.n	800f12e <_strtod_l+0xa66>
 800f15e:	4b5c      	ldr	r3, [pc, #368]	; (800f2d0 <_strtod_l+0xc08>)
 800f160:	4640      	mov	r0, r8
 800f162:	4649      	mov	r1, r9
 800f164:	2200      	movs	r2, #0
 800f166:	f7f1 fa47 	bl	80005f8 <__aeabi_dmul>
 800f16a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f16c:	4680      	mov	r8, r0
 800f16e:	4689      	mov	r9, r1
 800f170:	b933      	cbnz	r3, 800f180 <_strtod_l+0xab8>
 800f172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f176:	9012      	str	r0, [sp, #72]	; 0x48
 800f178:	9313      	str	r3, [sp, #76]	; 0x4c
 800f17a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f17e:	e7dd      	b.n	800f13c <_strtod_l+0xa74>
 800f180:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f184:	e7f9      	b.n	800f17a <_strtod_l+0xab2>
 800f186:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f18a:	9b04      	ldr	r3, [sp, #16]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1a8      	bne.n	800f0e2 <_strtod_l+0xa1a>
 800f190:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f194:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f196:	0d1b      	lsrs	r3, r3, #20
 800f198:	051b      	lsls	r3, r3, #20
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d1a1      	bne.n	800f0e2 <_strtod_l+0xa1a>
 800f19e:	4640      	mov	r0, r8
 800f1a0:	4649      	mov	r1, r9
 800f1a2:	f7f1 fd89 	bl	8000cb8 <__aeabi_d2lz>
 800f1a6:	f7f1 f9f9 	bl	800059c <__aeabi_l2d>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	4640      	mov	r0, r8
 800f1b0:	4649      	mov	r1, r9
 800f1b2:	f7f1 f869 	bl	8000288 <__aeabi_dsub>
 800f1b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f1b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f1bc:	ea43 030a 	orr.w	r3, r3, sl
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	4680      	mov	r8, r0
 800f1c4:	4689      	mov	r9, r1
 800f1c6:	d053      	beq.n	800f270 <_strtod_l+0xba8>
 800f1c8:	a335      	add	r3, pc, #212	; (adr r3, 800f2a0 <_strtod_l+0xbd8>)
 800f1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ce:	f7f1 fc85 	bl	8000adc <__aeabi_dcmplt>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	f47f acce 	bne.w	800eb74 <_strtod_l+0x4ac>
 800f1d8:	a333      	add	r3, pc, #204	; (adr r3, 800f2a8 <_strtod_l+0xbe0>)
 800f1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1de:	4640      	mov	r0, r8
 800f1e0:	4649      	mov	r1, r9
 800f1e2:	f7f1 fc99 	bl	8000b18 <__aeabi_dcmpgt>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	f43f af7b 	beq.w	800f0e2 <_strtod_l+0xa1a>
 800f1ec:	e4c2      	b.n	800eb74 <_strtod_l+0x4ac>
 800f1ee:	9b04      	ldr	r3, [sp, #16]
 800f1f0:	b333      	cbz	r3, 800f240 <_strtod_l+0xb78>
 800f1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f1f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f1f8:	d822      	bhi.n	800f240 <_strtod_l+0xb78>
 800f1fa:	a32d      	add	r3, pc, #180	; (adr r3, 800f2b0 <_strtod_l+0xbe8>)
 800f1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f200:	4640      	mov	r0, r8
 800f202:	4649      	mov	r1, r9
 800f204:	f7f1 fc74 	bl	8000af0 <__aeabi_dcmple>
 800f208:	b1a0      	cbz	r0, 800f234 <_strtod_l+0xb6c>
 800f20a:	4649      	mov	r1, r9
 800f20c:	4640      	mov	r0, r8
 800f20e:	f7f1 fccb 	bl	8000ba8 <__aeabi_d2uiz>
 800f212:	2801      	cmp	r0, #1
 800f214:	bf38      	it	cc
 800f216:	2001      	movcc	r0, #1
 800f218:	f7f1 f974 	bl	8000504 <__aeabi_ui2d>
 800f21c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f21e:	4680      	mov	r8, r0
 800f220:	4689      	mov	r9, r1
 800f222:	bb13      	cbnz	r3, 800f26a <_strtod_l+0xba2>
 800f224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f228:	9014      	str	r0, [sp, #80]	; 0x50
 800f22a:	9315      	str	r3, [sp, #84]	; 0x54
 800f22c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f230:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f236:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f238:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f23c:	1a9b      	subs	r3, r3, r2
 800f23e:	930d      	str	r3, [sp, #52]	; 0x34
 800f240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f244:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f248:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f24c:	f001 ff46 	bl	80110dc <__ulp>
 800f250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f254:	ec53 2b10 	vmov	r2, r3, d0
 800f258:	f7f1 f9ce 	bl	80005f8 <__aeabi_dmul>
 800f25c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f260:	f7f1 f814 	bl	800028c <__adddf3>
 800f264:	4682      	mov	sl, r0
 800f266:	468b      	mov	fp, r1
 800f268:	e78f      	b.n	800f18a <_strtod_l+0xac2>
 800f26a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f26e:	e7dd      	b.n	800f22c <_strtod_l+0xb64>
 800f270:	a311      	add	r3, pc, #68	; (adr r3, 800f2b8 <_strtod_l+0xbf0>)
 800f272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f276:	f7f1 fc31 	bl	8000adc <__aeabi_dcmplt>
 800f27a:	e7b4      	b.n	800f1e6 <_strtod_l+0xb1e>
 800f27c:	2300      	movs	r3, #0
 800f27e:	930e      	str	r3, [sp, #56]	; 0x38
 800f280:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f282:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f284:	6013      	str	r3, [r2, #0]
 800f286:	f7ff ba65 	b.w	800e754 <_strtod_l+0x8c>
 800f28a:	2b65      	cmp	r3, #101	; 0x65
 800f28c:	f43f ab5d 	beq.w	800e94a <_strtod_l+0x282>
 800f290:	2b45      	cmp	r3, #69	; 0x45
 800f292:	f43f ab5a 	beq.w	800e94a <_strtod_l+0x282>
 800f296:	2201      	movs	r2, #1
 800f298:	f7ff bb92 	b.w	800e9c0 <_strtod_l+0x2f8>
 800f29c:	f3af 8000 	nop.w
 800f2a0:	94a03595 	.word	0x94a03595
 800f2a4:	3fdfffff 	.word	0x3fdfffff
 800f2a8:	35afe535 	.word	0x35afe535
 800f2ac:	3fe00000 	.word	0x3fe00000
 800f2b0:	ffc00000 	.word	0xffc00000
 800f2b4:	41dfffff 	.word	0x41dfffff
 800f2b8:	94a03595 	.word	0x94a03595
 800f2bc:	3fcfffff 	.word	0x3fcfffff
 800f2c0:	3ff00000 	.word	0x3ff00000
 800f2c4:	7ff00000 	.word	0x7ff00000
 800f2c8:	7fe00000 	.word	0x7fe00000
 800f2cc:	7c9fffff 	.word	0x7c9fffff
 800f2d0:	3fe00000 	.word	0x3fe00000
 800f2d4:	bff00000 	.word	0xbff00000
 800f2d8:	7fefffff 	.word	0x7fefffff

0800f2dc <_strtod_r>:
 800f2dc:	4b01      	ldr	r3, [pc, #4]	; (800f2e4 <_strtod_r+0x8>)
 800f2de:	f7ff b9f3 	b.w	800e6c8 <_strtod_l>
 800f2e2:	bf00      	nop
 800f2e4:	200000a8 	.word	0x200000a8

0800f2e8 <_strtol_l.isra.0>:
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2ee:	d001      	beq.n	800f2f4 <_strtol_l.isra.0+0xc>
 800f2f0:	2b24      	cmp	r3, #36	; 0x24
 800f2f2:	d906      	bls.n	800f302 <_strtol_l.isra.0+0x1a>
 800f2f4:	f7fe f8da 	bl	800d4ac <__errno>
 800f2f8:	2316      	movs	r3, #22
 800f2fa:	6003      	str	r3, [r0, #0]
 800f2fc:	2000      	movs	r0, #0
 800f2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f302:	4f3a      	ldr	r7, [pc, #232]	; (800f3ec <_strtol_l.isra.0+0x104>)
 800f304:	468e      	mov	lr, r1
 800f306:	4676      	mov	r6, lr
 800f308:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f30c:	5de5      	ldrb	r5, [r4, r7]
 800f30e:	f015 0508 	ands.w	r5, r5, #8
 800f312:	d1f8      	bne.n	800f306 <_strtol_l.isra.0+0x1e>
 800f314:	2c2d      	cmp	r4, #45	; 0x2d
 800f316:	d134      	bne.n	800f382 <_strtol_l.isra.0+0x9a>
 800f318:	f89e 4000 	ldrb.w	r4, [lr]
 800f31c:	f04f 0801 	mov.w	r8, #1
 800f320:	f106 0e02 	add.w	lr, r6, #2
 800f324:	2b00      	cmp	r3, #0
 800f326:	d05c      	beq.n	800f3e2 <_strtol_l.isra.0+0xfa>
 800f328:	2b10      	cmp	r3, #16
 800f32a:	d10c      	bne.n	800f346 <_strtol_l.isra.0+0x5e>
 800f32c:	2c30      	cmp	r4, #48	; 0x30
 800f32e:	d10a      	bne.n	800f346 <_strtol_l.isra.0+0x5e>
 800f330:	f89e 4000 	ldrb.w	r4, [lr]
 800f334:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f338:	2c58      	cmp	r4, #88	; 0x58
 800f33a:	d14d      	bne.n	800f3d8 <_strtol_l.isra.0+0xf0>
 800f33c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f340:	2310      	movs	r3, #16
 800f342:	f10e 0e02 	add.w	lr, lr, #2
 800f346:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f34a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f34e:	2600      	movs	r6, #0
 800f350:	fbbc f9f3 	udiv	r9, ip, r3
 800f354:	4635      	mov	r5, r6
 800f356:	fb03 ca19 	mls	sl, r3, r9, ip
 800f35a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f35e:	2f09      	cmp	r7, #9
 800f360:	d818      	bhi.n	800f394 <_strtol_l.isra.0+0xac>
 800f362:	463c      	mov	r4, r7
 800f364:	42a3      	cmp	r3, r4
 800f366:	dd24      	ble.n	800f3b2 <_strtol_l.isra.0+0xca>
 800f368:	2e00      	cmp	r6, #0
 800f36a:	db1f      	blt.n	800f3ac <_strtol_l.isra.0+0xc4>
 800f36c:	45a9      	cmp	r9, r5
 800f36e:	d31d      	bcc.n	800f3ac <_strtol_l.isra.0+0xc4>
 800f370:	d101      	bne.n	800f376 <_strtol_l.isra.0+0x8e>
 800f372:	45a2      	cmp	sl, r4
 800f374:	db1a      	blt.n	800f3ac <_strtol_l.isra.0+0xc4>
 800f376:	fb05 4503 	mla	r5, r5, r3, r4
 800f37a:	2601      	movs	r6, #1
 800f37c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f380:	e7eb      	b.n	800f35a <_strtol_l.isra.0+0x72>
 800f382:	2c2b      	cmp	r4, #43	; 0x2b
 800f384:	bf08      	it	eq
 800f386:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f38a:	46a8      	mov	r8, r5
 800f38c:	bf08      	it	eq
 800f38e:	f106 0e02 	addeq.w	lr, r6, #2
 800f392:	e7c7      	b.n	800f324 <_strtol_l.isra.0+0x3c>
 800f394:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f398:	2f19      	cmp	r7, #25
 800f39a:	d801      	bhi.n	800f3a0 <_strtol_l.isra.0+0xb8>
 800f39c:	3c37      	subs	r4, #55	; 0x37
 800f39e:	e7e1      	b.n	800f364 <_strtol_l.isra.0+0x7c>
 800f3a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f3a4:	2f19      	cmp	r7, #25
 800f3a6:	d804      	bhi.n	800f3b2 <_strtol_l.isra.0+0xca>
 800f3a8:	3c57      	subs	r4, #87	; 0x57
 800f3aa:	e7db      	b.n	800f364 <_strtol_l.isra.0+0x7c>
 800f3ac:	f04f 36ff 	mov.w	r6, #4294967295
 800f3b0:	e7e4      	b.n	800f37c <_strtol_l.isra.0+0x94>
 800f3b2:	2e00      	cmp	r6, #0
 800f3b4:	da05      	bge.n	800f3c2 <_strtol_l.isra.0+0xda>
 800f3b6:	2322      	movs	r3, #34	; 0x22
 800f3b8:	6003      	str	r3, [r0, #0]
 800f3ba:	4665      	mov	r5, ip
 800f3bc:	b942      	cbnz	r2, 800f3d0 <_strtol_l.isra.0+0xe8>
 800f3be:	4628      	mov	r0, r5
 800f3c0:	e79d      	b.n	800f2fe <_strtol_l.isra.0+0x16>
 800f3c2:	f1b8 0f00 	cmp.w	r8, #0
 800f3c6:	d000      	beq.n	800f3ca <_strtol_l.isra.0+0xe2>
 800f3c8:	426d      	negs	r5, r5
 800f3ca:	2a00      	cmp	r2, #0
 800f3cc:	d0f7      	beq.n	800f3be <_strtol_l.isra.0+0xd6>
 800f3ce:	b10e      	cbz	r6, 800f3d4 <_strtol_l.isra.0+0xec>
 800f3d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f3d4:	6011      	str	r1, [r2, #0]
 800f3d6:	e7f2      	b.n	800f3be <_strtol_l.isra.0+0xd6>
 800f3d8:	2430      	movs	r4, #48	; 0x30
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d1b3      	bne.n	800f346 <_strtol_l.isra.0+0x5e>
 800f3de:	2308      	movs	r3, #8
 800f3e0:	e7b1      	b.n	800f346 <_strtol_l.isra.0+0x5e>
 800f3e2:	2c30      	cmp	r4, #48	; 0x30
 800f3e4:	d0a4      	beq.n	800f330 <_strtol_l.isra.0+0x48>
 800f3e6:	230a      	movs	r3, #10
 800f3e8:	e7ad      	b.n	800f346 <_strtol_l.isra.0+0x5e>
 800f3ea:	bf00      	nop
 800f3ec:	08013989 	.word	0x08013989

0800f3f0 <_strtol_r>:
 800f3f0:	f7ff bf7a 	b.w	800f2e8 <_strtol_l.isra.0>

0800f3f4 <_write_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4d07      	ldr	r5, [pc, #28]	; (800f414 <_write_r+0x20>)
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	4608      	mov	r0, r1
 800f3fc:	4611      	mov	r1, r2
 800f3fe:	2200      	movs	r2, #0
 800f400:	602a      	str	r2, [r5, #0]
 800f402:	461a      	mov	r2, r3
 800f404:	f7f4 ff99 	bl	800433a <_write>
 800f408:	1c43      	adds	r3, r0, #1
 800f40a:	d102      	bne.n	800f412 <_write_r+0x1e>
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	b103      	cbz	r3, 800f412 <_write_r+0x1e>
 800f410:	6023      	str	r3, [r4, #0]
 800f412:	bd38      	pop	{r3, r4, r5, pc}
 800f414:	200063b0 	.word	0x200063b0

0800f418 <_close_r>:
 800f418:	b538      	push	{r3, r4, r5, lr}
 800f41a:	4d06      	ldr	r5, [pc, #24]	; (800f434 <_close_r+0x1c>)
 800f41c:	2300      	movs	r3, #0
 800f41e:	4604      	mov	r4, r0
 800f420:	4608      	mov	r0, r1
 800f422:	602b      	str	r3, [r5, #0]
 800f424:	f7f4 ffa5 	bl	8004372 <_close>
 800f428:	1c43      	adds	r3, r0, #1
 800f42a:	d102      	bne.n	800f432 <_close_r+0x1a>
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	b103      	cbz	r3, 800f432 <_close_r+0x1a>
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	200063b0 	.word	0x200063b0

0800f438 <quorem>:
 800f438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f43c:	6903      	ldr	r3, [r0, #16]
 800f43e:	690c      	ldr	r4, [r1, #16]
 800f440:	42a3      	cmp	r3, r4
 800f442:	4607      	mov	r7, r0
 800f444:	f2c0 8081 	blt.w	800f54a <quorem+0x112>
 800f448:	3c01      	subs	r4, #1
 800f44a:	f101 0814 	add.w	r8, r1, #20
 800f44e:	f100 0514 	add.w	r5, r0, #20
 800f452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f456:	9301      	str	r3, [sp, #4]
 800f458:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f45c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f460:	3301      	adds	r3, #1
 800f462:	429a      	cmp	r2, r3
 800f464:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f468:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f46c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f470:	d331      	bcc.n	800f4d6 <quorem+0x9e>
 800f472:	f04f 0e00 	mov.w	lr, #0
 800f476:	4640      	mov	r0, r8
 800f478:	46ac      	mov	ip, r5
 800f47a:	46f2      	mov	sl, lr
 800f47c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f480:	b293      	uxth	r3, r2
 800f482:	fb06 e303 	mla	r3, r6, r3, lr
 800f486:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	ebaa 0303 	sub.w	r3, sl, r3
 800f490:	0c12      	lsrs	r2, r2, #16
 800f492:	f8dc a000 	ldr.w	sl, [ip]
 800f496:	fb06 e202 	mla	r2, r6, r2, lr
 800f49a:	fa13 f38a 	uxtah	r3, r3, sl
 800f49e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f4a2:	fa1f fa82 	uxth.w	sl, r2
 800f4a6:	f8dc 2000 	ldr.w	r2, [ip]
 800f4aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f4ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4b8:	4581      	cmp	r9, r0
 800f4ba:	f84c 3b04 	str.w	r3, [ip], #4
 800f4be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f4c2:	d2db      	bcs.n	800f47c <quorem+0x44>
 800f4c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800f4c8:	b92b      	cbnz	r3, 800f4d6 <quorem+0x9e>
 800f4ca:	9b01      	ldr	r3, [sp, #4]
 800f4cc:	3b04      	subs	r3, #4
 800f4ce:	429d      	cmp	r5, r3
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	d32e      	bcc.n	800f532 <quorem+0xfa>
 800f4d4:	613c      	str	r4, [r7, #16]
 800f4d6:	4638      	mov	r0, r7
 800f4d8:	f001 fd5c 	bl	8010f94 <__mcmp>
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	db24      	blt.n	800f52a <quorem+0xf2>
 800f4e0:	3601      	adds	r6, #1
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	f04f 0c00 	mov.w	ip, #0
 800f4e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f4ec:	f8d0 e000 	ldr.w	lr, [r0]
 800f4f0:	b293      	uxth	r3, r2
 800f4f2:	ebac 0303 	sub.w	r3, ip, r3
 800f4f6:	0c12      	lsrs	r2, r2, #16
 800f4f8:	fa13 f38e 	uxtah	r3, r3, lr
 800f4fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f504:	b29b      	uxth	r3, r3
 800f506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f50a:	45c1      	cmp	r9, r8
 800f50c:	f840 3b04 	str.w	r3, [r0], #4
 800f510:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f514:	d2e8      	bcs.n	800f4e8 <quorem+0xb0>
 800f516:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f51a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f51e:	b922      	cbnz	r2, 800f52a <quorem+0xf2>
 800f520:	3b04      	subs	r3, #4
 800f522:	429d      	cmp	r5, r3
 800f524:	461a      	mov	r2, r3
 800f526:	d30a      	bcc.n	800f53e <quorem+0x106>
 800f528:	613c      	str	r4, [r7, #16]
 800f52a:	4630      	mov	r0, r6
 800f52c:	b003      	add	sp, #12
 800f52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f532:	6812      	ldr	r2, [r2, #0]
 800f534:	3b04      	subs	r3, #4
 800f536:	2a00      	cmp	r2, #0
 800f538:	d1cc      	bne.n	800f4d4 <quorem+0x9c>
 800f53a:	3c01      	subs	r4, #1
 800f53c:	e7c7      	b.n	800f4ce <quorem+0x96>
 800f53e:	6812      	ldr	r2, [r2, #0]
 800f540:	3b04      	subs	r3, #4
 800f542:	2a00      	cmp	r2, #0
 800f544:	d1f0      	bne.n	800f528 <quorem+0xf0>
 800f546:	3c01      	subs	r4, #1
 800f548:	e7eb      	b.n	800f522 <quorem+0xea>
 800f54a:	2000      	movs	r0, #0
 800f54c:	e7ee      	b.n	800f52c <quorem+0xf4>
	...

0800f550 <_dtoa_r>:
 800f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	ed2d 8b02 	vpush	{d8}
 800f558:	ec57 6b10 	vmov	r6, r7, d0
 800f55c:	b095      	sub	sp, #84	; 0x54
 800f55e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f560:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f564:	9105      	str	r1, [sp, #20]
 800f566:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f56a:	4604      	mov	r4, r0
 800f56c:	9209      	str	r2, [sp, #36]	; 0x24
 800f56e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f570:	b975      	cbnz	r5, 800f590 <_dtoa_r+0x40>
 800f572:	2010      	movs	r0, #16
 800f574:	f001 fa20 	bl	80109b8 <malloc>
 800f578:	4602      	mov	r2, r0
 800f57a:	6260      	str	r0, [r4, #36]	; 0x24
 800f57c:	b920      	cbnz	r0, 800f588 <_dtoa_r+0x38>
 800f57e:	4bb2      	ldr	r3, [pc, #712]	; (800f848 <_dtoa_r+0x2f8>)
 800f580:	21ea      	movs	r1, #234	; 0xea
 800f582:	48b2      	ldr	r0, [pc, #712]	; (800f84c <_dtoa_r+0x2fc>)
 800f584:	f002 f8f0 	bl	8011768 <__assert_func>
 800f588:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f58c:	6005      	str	r5, [r0, #0]
 800f58e:	60c5      	str	r5, [r0, #12]
 800f590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f592:	6819      	ldr	r1, [r3, #0]
 800f594:	b151      	cbz	r1, 800f5ac <_dtoa_r+0x5c>
 800f596:	685a      	ldr	r2, [r3, #4]
 800f598:	604a      	str	r2, [r1, #4]
 800f59a:	2301      	movs	r3, #1
 800f59c:	4093      	lsls	r3, r2
 800f59e:	608b      	str	r3, [r1, #8]
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	f001 fa6f 	bl	8010a84 <_Bfree>
 800f5a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	601a      	str	r2, [r3, #0]
 800f5ac:	1e3b      	subs	r3, r7, #0
 800f5ae:	bfb9      	ittee	lt
 800f5b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f5b4:	9303      	strlt	r3, [sp, #12]
 800f5b6:	2300      	movge	r3, #0
 800f5b8:	f8c8 3000 	strge.w	r3, [r8]
 800f5bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f5c0:	4ba3      	ldr	r3, [pc, #652]	; (800f850 <_dtoa_r+0x300>)
 800f5c2:	bfbc      	itt	lt
 800f5c4:	2201      	movlt	r2, #1
 800f5c6:	f8c8 2000 	strlt.w	r2, [r8]
 800f5ca:	ea33 0309 	bics.w	r3, r3, r9
 800f5ce:	d11b      	bne.n	800f608 <_dtoa_r+0xb8>
 800f5d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800f5d6:	6013      	str	r3, [r2, #0]
 800f5d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5dc:	4333      	orrs	r3, r6
 800f5de:	f000 857a 	beq.w	80100d6 <_dtoa_r+0xb86>
 800f5e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5e4:	b963      	cbnz	r3, 800f600 <_dtoa_r+0xb0>
 800f5e6:	4b9b      	ldr	r3, [pc, #620]	; (800f854 <_dtoa_r+0x304>)
 800f5e8:	e024      	b.n	800f634 <_dtoa_r+0xe4>
 800f5ea:	4b9b      	ldr	r3, [pc, #620]	; (800f858 <_dtoa_r+0x308>)
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	3308      	adds	r3, #8
 800f5f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5f2:	6013      	str	r3, [r2, #0]
 800f5f4:	9800      	ldr	r0, [sp, #0]
 800f5f6:	b015      	add	sp, #84	; 0x54
 800f5f8:	ecbd 8b02 	vpop	{d8}
 800f5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f600:	4b94      	ldr	r3, [pc, #592]	; (800f854 <_dtoa_r+0x304>)
 800f602:	9300      	str	r3, [sp, #0]
 800f604:	3303      	adds	r3, #3
 800f606:	e7f3      	b.n	800f5f0 <_dtoa_r+0xa0>
 800f608:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f60c:	2200      	movs	r2, #0
 800f60e:	ec51 0b17 	vmov	r0, r1, d7
 800f612:	2300      	movs	r3, #0
 800f614:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f618:	f7f1 fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800f61c:	4680      	mov	r8, r0
 800f61e:	b158      	cbz	r0, 800f638 <_dtoa_r+0xe8>
 800f620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f622:	2301      	movs	r3, #1
 800f624:	6013      	str	r3, [r2, #0]
 800f626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f628:	2b00      	cmp	r3, #0
 800f62a:	f000 8551 	beq.w	80100d0 <_dtoa_r+0xb80>
 800f62e:	488b      	ldr	r0, [pc, #556]	; (800f85c <_dtoa_r+0x30c>)
 800f630:	6018      	str	r0, [r3, #0]
 800f632:	1e43      	subs	r3, r0, #1
 800f634:	9300      	str	r3, [sp, #0]
 800f636:	e7dd      	b.n	800f5f4 <_dtoa_r+0xa4>
 800f638:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f63c:	aa12      	add	r2, sp, #72	; 0x48
 800f63e:	a913      	add	r1, sp, #76	; 0x4c
 800f640:	4620      	mov	r0, r4
 800f642:	f001 fdc7 	bl	80111d4 <__d2b>
 800f646:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f64a:	4683      	mov	fp, r0
 800f64c:	2d00      	cmp	r5, #0
 800f64e:	d07c      	beq.n	800f74a <_dtoa_r+0x1fa>
 800f650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f652:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f656:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f65a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f65e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f662:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f666:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f66a:	4b7d      	ldr	r3, [pc, #500]	; (800f860 <_dtoa_r+0x310>)
 800f66c:	2200      	movs	r2, #0
 800f66e:	4630      	mov	r0, r6
 800f670:	4639      	mov	r1, r7
 800f672:	f7f0 fe09 	bl	8000288 <__aeabi_dsub>
 800f676:	a36e      	add	r3, pc, #440	; (adr r3, 800f830 <_dtoa_r+0x2e0>)
 800f678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67c:	f7f0 ffbc 	bl	80005f8 <__aeabi_dmul>
 800f680:	a36d      	add	r3, pc, #436	; (adr r3, 800f838 <_dtoa_r+0x2e8>)
 800f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f686:	f7f0 fe01 	bl	800028c <__adddf3>
 800f68a:	4606      	mov	r6, r0
 800f68c:	4628      	mov	r0, r5
 800f68e:	460f      	mov	r7, r1
 800f690:	f7f0 ff48 	bl	8000524 <__aeabi_i2d>
 800f694:	a36a      	add	r3, pc, #424	; (adr r3, 800f840 <_dtoa_r+0x2f0>)
 800f696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69a:	f7f0 ffad 	bl	80005f8 <__aeabi_dmul>
 800f69e:	4602      	mov	r2, r0
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	4639      	mov	r1, r7
 800f6a6:	f7f0 fdf1 	bl	800028c <__adddf3>
 800f6aa:	4606      	mov	r6, r0
 800f6ac:	460f      	mov	r7, r1
 800f6ae:	f7f1 fa53 	bl	8000b58 <__aeabi_d2iz>
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	4682      	mov	sl, r0
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	4639      	mov	r1, r7
 800f6bc:	f7f1 fa0e 	bl	8000adc <__aeabi_dcmplt>
 800f6c0:	b148      	cbz	r0, 800f6d6 <_dtoa_r+0x186>
 800f6c2:	4650      	mov	r0, sl
 800f6c4:	f7f0 ff2e 	bl	8000524 <__aeabi_i2d>
 800f6c8:	4632      	mov	r2, r6
 800f6ca:	463b      	mov	r3, r7
 800f6cc:	f7f1 f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6d0:	b908      	cbnz	r0, 800f6d6 <_dtoa_r+0x186>
 800f6d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6d6:	f1ba 0f16 	cmp.w	sl, #22
 800f6da:	d854      	bhi.n	800f786 <_dtoa_r+0x236>
 800f6dc:	4b61      	ldr	r3, [pc, #388]	; (800f864 <_dtoa_r+0x314>)
 800f6de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f6ea:	f7f1 f9f7 	bl	8000adc <__aeabi_dcmplt>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d04b      	beq.n	800f78a <_dtoa_r+0x23a>
 800f6f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	930e      	str	r3, [sp, #56]	; 0x38
 800f6fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f6fc:	1b5d      	subs	r5, r3, r5
 800f6fe:	1e6b      	subs	r3, r5, #1
 800f700:	9304      	str	r3, [sp, #16]
 800f702:	bf43      	ittte	mi
 800f704:	2300      	movmi	r3, #0
 800f706:	f1c5 0801 	rsbmi	r8, r5, #1
 800f70a:	9304      	strmi	r3, [sp, #16]
 800f70c:	f04f 0800 	movpl.w	r8, #0
 800f710:	f1ba 0f00 	cmp.w	sl, #0
 800f714:	db3b      	blt.n	800f78e <_dtoa_r+0x23e>
 800f716:	9b04      	ldr	r3, [sp, #16]
 800f718:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f71c:	4453      	add	r3, sl
 800f71e:	9304      	str	r3, [sp, #16]
 800f720:	2300      	movs	r3, #0
 800f722:	9306      	str	r3, [sp, #24]
 800f724:	9b05      	ldr	r3, [sp, #20]
 800f726:	2b09      	cmp	r3, #9
 800f728:	d869      	bhi.n	800f7fe <_dtoa_r+0x2ae>
 800f72a:	2b05      	cmp	r3, #5
 800f72c:	bfc4      	itt	gt
 800f72e:	3b04      	subgt	r3, #4
 800f730:	9305      	strgt	r3, [sp, #20]
 800f732:	9b05      	ldr	r3, [sp, #20]
 800f734:	f1a3 0302 	sub.w	r3, r3, #2
 800f738:	bfcc      	ite	gt
 800f73a:	2500      	movgt	r5, #0
 800f73c:	2501      	movle	r5, #1
 800f73e:	2b03      	cmp	r3, #3
 800f740:	d869      	bhi.n	800f816 <_dtoa_r+0x2c6>
 800f742:	e8df f003 	tbb	[pc, r3]
 800f746:	4e2c      	.short	0x4e2c
 800f748:	5a4c      	.short	0x5a4c
 800f74a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f74e:	441d      	add	r5, r3
 800f750:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f754:	2b20      	cmp	r3, #32
 800f756:	bfc1      	itttt	gt
 800f758:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f75c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f760:	fa09 f303 	lslgt.w	r3, r9, r3
 800f764:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f768:	bfda      	itte	le
 800f76a:	f1c3 0320 	rsble	r3, r3, #32
 800f76e:	fa06 f003 	lslle.w	r0, r6, r3
 800f772:	4318      	orrgt	r0, r3
 800f774:	f7f0 fec6 	bl	8000504 <__aeabi_ui2d>
 800f778:	2301      	movs	r3, #1
 800f77a:	4606      	mov	r6, r0
 800f77c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f780:	3d01      	subs	r5, #1
 800f782:	9310      	str	r3, [sp, #64]	; 0x40
 800f784:	e771      	b.n	800f66a <_dtoa_r+0x11a>
 800f786:	2301      	movs	r3, #1
 800f788:	e7b6      	b.n	800f6f8 <_dtoa_r+0x1a8>
 800f78a:	900e      	str	r0, [sp, #56]	; 0x38
 800f78c:	e7b5      	b.n	800f6fa <_dtoa_r+0x1aa>
 800f78e:	f1ca 0300 	rsb	r3, sl, #0
 800f792:	9306      	str	r3, [sp, #24]
 800f794:	2300      	movs	r3, #0
 800f796:	eba8 080a 	sub.w	r8, r8, sl
 800f79a:	930d      	str	r3, [sp, #52]	; 0x34
 800f79c:	e7c2      	b.n	800f724 <_dtoa_r+0x1d4>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	9308      	str	r3, [sp, #32]
 800f7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	dc39      	bgt.n	800f81c <_dtoa_r+0x2cc>
 800f7a8:	f04f 0901 	mov.w	r9, #1
 800f7ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800f7b0:	464b      	mov	r3, r9
 800f7b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f7b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	6042      	str	r2, [r0, #4]
 800f7bc:	2204      	movs	r2, #4
 800f7be:	f102 0614 	add.w	r6, r2, #20
 800f7c2:	429e      	cmp	r6, r3
 800f7c4:	6841      	ldr	r1, [r0, #4]
 800f7c6:	d92f      	bls.n	800f828 <_dtoa_r+0x2d8>
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f001 f91b 	bl	8010a04 <_Balloc>
 800f7ce:	9000      	str	r0, [sp, #0]
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d14b      	bne.n	800f86c <_dtoa_r+0x31c>
 800f7d4:	4b24      	ldr	r3, [pc, #144]	; (800f868 <_dtoa_r+0x318>)
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f7dc:	e6d1      	b.n	800f582 <_dtoa_r+0x32>
 800f7de:	2301      	movs	r3, #1
 800f7e0:	e7de      	b.n	800f7a0 <_dtoa_r+0x250>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	9308      	str	r3, [sp, #32]
 800f7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e8:	eb0a 0903 	add.w	r9, sl, r3
 800f7ec:	f109 0301 	add.w	r3, r9, #1
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	9301      	str	r3, [sp, #4]
 800f7f4:	bfb8      	it	lt
 800f7f6:	2301      	movlt	r3, #1
 800f7f8:	e7dd      	b.n	800f7b6 <_dtoa_r+0x266>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e7f2      	b.n	800f7e4 <_dtoa_r+0x294>
 800f7fe:	2501      	movs	r5, #1
 800f800:	2300      	movs	r3, #0
 800f802:	9305      	str	r3, [sp, #20]
 800f804:	9508      	str	r5, [sp, #32]
 800f806:	f04f 39ff 	mov.w	r9, #4294967295
 800f80a:	2200      	movs	r2, #0
 800f80c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f810:	2312      	movs	r3, #18
 800f812:	9209      	str	r2, [sp, #36]	; 0x24
 800f814:	e7cf      	b.n	800f7b6 <_dtoa_r+0x266>
 800f816:	2301      	movs	r3, #1
 800f818:	9308      	str	r3, [sp, #32]
 800f81a:	e7f4      	b.n	800f806 <_dtoa_r+0x2b6>
 800f81c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f820:	f8cd 9004 	str.w	r9, [sp, #4]
 800f824:	464b      	mov	r3, r9
 800f826:	e7c6      	b.n	800f7b6 <_dtoa_r+0x266>
 800f828:	3101      	adds	r1, #1
 800f82a:	6041      	str	r1, [r0, #4]
 800f82c:	0052      	lsls	r2, r2, #1
 800f82e:	e7c6      	b.n	800f7be <_dtoa_r+0x26e>
 800f830:	636f4361 	.word	0x636f4361
 800f834:	3fd287a7 	.word	0x3fd287a7
 800f838:	8b60c8b3 	.word	0x8b60c8b3
 800f83c:	3fc68a28 	.word	0x3fc68a28
 800f840:	509f79fb 	.word	0x509f79fb
 800f844:	3fd34413 	.word	0x3fd34413
 800f848:	08013a96 	.word	0x08013a96
 800f84c:	08013aad 	.word	0x08013aad
 800f850:	7ff00000 	.word	0x7ff00000
 800f854:	08013a92 	.word	0x08013a92
 800f858:	08013a89 	.word	0x08013a89
 800f85c:	08013909 	.word	0x08013909
 800f860:	3ff80000 	.word	0x3ff80000
 800f864:	08013c28 	.word	0x08013c28
 800f868:	08013b0c 	.word	0x08013b0c
 800f86c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f86e:	9a00      	ldr	r2, [sp, #0]
 800f870:	601a      	str	r2, [r3, #0]
 800f872:	9b01      	ldr	r3, [sp, #4]
 800f874:	2b0e      	cmp	r3, #14
 800f876:	f200 80ad 	bhi.w	800f9d4 <_dtoa_r+0x484>
 800f87a:	2d00      	cmp	r5, #0
 800f87c:	f000 80aa 	beq.w	800f9d4 <_dtoa_r+0x484>
 800f880:	f1ba 0f00 	cmp.w	sl, #0
 800f884:	dd36      	ble.n	800f8f4 <_dtoa_r+0x3a4>
 800f886:	4ac3      	ldr	r2, [pc, #780]	; (800fb94 <_dtoa_r+0x644>)
 800f888:	f00a 030f 	and.w	r3, sl, #15
 800f88c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f890:	ed93 7b00 	vldr	d7, [r3]
 800f894:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f898:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f89c:	eeb0 8a47 	vmov.f32	s16, s14
 800f8a0:	eef0 8a67 	vmov.f32	s17, s15
 800f8a4:	d016      	beq.n	800f8d4 <_dtoa_r+0x384>
 800f8a6:	4bbc      	ldr	r3, [pc, #752]	; (800fb98 <_dtoa_r+0x648>)
 800f8a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f8ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f8b0:	f7f0 ffcc 	bl	800084c <__aeabi_ddiv>
 800f8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8b8:	f007 070f 	and.w	r7, r7, #15
 800f8bc:	2503      	movs	r5, #3
 800f8be:	4eb6      	ldr	r6, [pc, #728]	; (800fb98 <_dtoa_r+0x648>)
 800f8c0:	b957      	cbnz	r7, 800f8d8 <_dtoa_r+0x388>
 800f8c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8c6:	ec53 2b18 	vmov	r2, r3, d8
 800f8ca:	f7f0 ffbf 	bl	800084c <__aeabi_ddiv>
 800f8ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8d2:	e029      	b.n	800f928 <_dtoa_r+0x3d8>
 800f8d4:	2502      	movs	r5, #2
 800f8d6:	e7f2      	b.n	800f8be <_dtoa_r+0x36e>
 800f8d8:	07f9      	lsls	r1, r7, #31
 800f8da:	d508      	bpl.n	800f8ee <_dtoa_r+0x39e>
 800f8dc:	ec51 0b18 	vmov	r0, r1, d8
 800f8e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f8e4:	f7f0 fe88 	bl	80005f8 <__aeabi_dmul>
 800f8e8:	ec41 0b18 	vmov	d8, r0, r1
 800f8ec:	3501      	adds	r5, #1
 800f8ee:	107f      	asrs	r7, r7, #1
 800f8f0:	3608      	adds	r6, #8
 800f8f2:	e7e5      	b.n	800f8c0 <_dtoa_r+0x370>
 800f8f4:	f000 80a6 	beq.w	800fa44 <_dtoa_r+0x4f4>
 800f8f8:	f1ca 0600 	rsb	r6, sl, #0
 800f8fc:	4ba5      	ldr	r3, [pc, #660]	; (800fb94 <_dtoa_r+0x644>)
 800f8fe:	4fa6      	ldr	r7, [pc, #664]	; (800fb98 <_dtoa_r+0x648>)
 800f900:	f006 020f 	and.w	r2, r6, #15
 800f904:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f910:	f7f0 fe72 	bl	80005f8 <__aeabi_dmul>
 800f914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f918:	1136      	asrs	r6, r6, #4
 800f91a:	2300      	movs	r3, #0
 800f91c:	2502      	movs	r5, #2
 800f91e:	2e00      	cmp	r6, #0
 800f920:	f040 8085 	bne.w	800fa2e <_dtoa_r+0x4de>
 800f924:	2b00      	cmp	r3, #0
 800f926:	d1d2      	bne.n	800f8ce <_dtoa_r+0x37e>
 800f928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	f000 808c 	beq.w	800fa48 <_dtoa_r+0x4f8>
 800f930:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f934:	4b99      	ldr	r3, [pc, #612]	; (800fb9c <_dtoa_r+0x64c>)
 800f936:	2200      	movs	r2, #0
 800f938:	4630      	mov	r0, r6
 800f93a:	4639      	mov	r1, r7
 800f93c:	f7f1 f8ce 	bl	8000adc <__aeabi_dcmplt>
 800f940:	2800      	cmp	r0, #0
 800f942:	f000 8081 	beq.w	800fa48 <_dtoa_r+0x4f8>
 800f946:	9b01      	ldr	r3, [sp, #4]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d07d      	beq.n	800fa48 <_dtoa_r+0x4f8>
 800f94c:	f1b9 0f00 	cmp.w	r9, #0
 800f950:	dd3c      	ble.n	800f9cc <_dtoa_r+0x47c>
 800f952:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f956:	9307      	str	r3, [sp, #28]
 800f958:	2200      	movs	r2, #0
 800f95a:	4b91      	ldr	r3, [pc, #580]	; (800fba0 <_dtoa_r+0x650>)
 800f95c:	4630      	mov	r0, r6
 800f95e:	4639      	mov	r1, r7
 800f960:	f7f0 fe4a 	bl	80005f8 <__aeabi_dmul>
 800f964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f968:	3501      	adds	r5, #1
 800f96a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f96e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f972:	4628      	mov	r0, r5
 800f974:	f7f0 fdd6 	bl	8000524 <__aeabi_i2d>
 800f978:	4632      	mov	r2, r6
 800f97a:	463b      	mov	r3, r7
 800f97c:	f7f0 fe3c 	bl	80005f8 <__aeabi_dmul>
 800f980:	4b88      	ldr	r3, [pc, #544]	; (800fba4 <_dtoa_r+0x654>)
 800f982:	2200      	movs	r2, #0
 800f984:	f7f0 fc82 	bl	800028c <__adddf3>
 800f988:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f990:	9303      	str	r3, [sp, #12]
 800f992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f994:	2b00      	cmp	r3, #0
 800f996:	d15c      	bne.n	800fa52 <_dtoa_r+0x502>
 800f998:	4b83      	ldr	r3, [pc, #524]	; (800fba8 <_dtoa_r+0x658>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	4630      	mov	r0, r6
 800f99e:	4639      	mov	r1, r7
 800f9a0:	f7f0 fc72 	bl	8000288 <__aeabi_dsub>
 800f9a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9a8:	4606      	mov	r6, r0
 800f9aa:	460f      	mov	r7, r1
 800f9ac:	f7f1 f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	f040 8296 	bne.w	800fee2 <_dtoa_r+0x992>
 800f9b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9c0:	4639      	mov	r1, r7
 800f9c2:	f7f1 f88b 	bl	8000adc <__aeabi_dcmplt>
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	f040 8288 	bne.w	800fedc <_dtoa_r+0x98c>
 800f9cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f9d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	f2c0 8158 	blt.w	800fc8c <_dtoa_r+0x73c>
 800f9dc:	f1ba 0f0e 	cmp.w	sl, #14
 800f9e0:	f300 8154 	bgt.w	800fc8c <_dtoa_r+0x73c>
 800f9e4:	4b6b      	ldr	r3, [pc, #428]	; (800fb94 <_dtoa_r+0x644>)
 800f9e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f9ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f280 80e3 	bge.w	800fbbc <_dtoa_r+0x66c>
 800f9f6:	9b01      	ldr	r3, [sp, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	f300 80df 	bgt.w	800fbbc <_dtoa_r+0x66c>
 800f9fe:	f040 826d 	bne.w	800fedc <_dtoa_r+0x98c>
 800fa02:	4b69      	ldr	r3, [pc, #420]	; (800fba8 <_dtoa_r+0x658>)
 800fa04:	2200      	movs	r2, #0
 800fa06:	4640      	mov	r0, r8
 800fa08:	4649      	mov	r1, r9
 800fa0a:	f7f0 fdf5 	bl	80005f8 <__aeabi_dmul>
 800fa0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa12:	f7f1 f877 	bl	8000b04 <__aeabi_dcmpge>
 800fa16:	9e01      	ldr	r6, [sp, #4]
 800fa18:	4637      	mov	r7, r6
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	f040 8243 	bne.w	800fea6 <_dtoa_r+0x956>
 800fa20:	9d00      	ldr	r5, [sp, #0]
 800fa22:	2331      	movs	r3, #49	; 0x31
 800fa24:	f805 3b01 	strb.w	r3, [r5], #1
 800fa28:	f10a 0a01 	add.w	sl, sl, #1
 800fa2c:	e23f      	b.n	800feae <_dtoa_r+0x95e>
 800fa2e:	07f2      	lsls	r2, r6, #31
 800fa30:	d505      	bpl.n	800fa3e <_dtoa_r+0x4ee>
 800fa32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa36:	f7f0 fddf 	bl	80005f8 <__aeabi_dmul>
 800fa3a:	3501      	adds	r5, #1
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	1076      	asrs	r6, r6, #1
 800fa40:	3708      	adds	r7, #8
 800fa42:	e76c      	b.n	800f91e <_dtoa_r+0x3ce>
 800fa44:	2502      	movs	r5, #2
 800fa46:	e76f      	b.n	800f928 <_dtoa_r+0x3d8>
 800fa48:	9b01      	ldr	r3, [sp, #4]
 800fa4a:	f8cd a01c 	str.w	sl, [sp, #28]
 800fa4e:	930c      	str	r3, [sp, #48]	; 0x30
 800fa50:	e78d      	b.n	800f96e <_dtoa_r+0x41e>
 800fa52:	9900      	ldr	r1, [sp, #0]
 800fa54:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fa56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa58:	4b4e      	ldr	r3, [pc, #312]	; (800fb94 <_dtoa_r+0x644>)
 800fa5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa5e:	4401      	add	r1, r0
 800fa60:	9102      	str	r1, [sp, #8]
 800fa62:	9908      	ldr	r1, [sp, #32]
 800fa64:	eeb0 8a47 	vmov.f32	s16, s14
 800fa68:	eef0 8a67 	vmov.f32	s17, s15
 800fa6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa74:	2900      	cmp	r1, #0
 800fa76:	d045      	beq.n	800fb04 <_dtoa_r+0x5b4>
 800fa78:	494c      	ldr	r1, [pc, #304]	; (800fbac <_dtoa_r+0x65c>)
 800fa7a:	2000      	movs	r0, #0
 800fa7c:	f7f0 fee6 	bl	800084c <__aeabi_ddiv>
 800fa80:	ec53 2b18 	vmov	r2, r3, d8
 800fa84:	f7f0 fc00 	bl	8000288 <__aeabi_dsub>
 800fa88:	9d00      	ldr	r5, [sp, #0]
 800fa8a:	ec41 0b18 	vmov	d8, r0, r1
 800fa8e:	4639      	mov	r1, r7
 800fa90:	4630      	mov	r0, r6
 800fa92:	f7f1 f861 	bl	8000b58 <__aeabi_d2iz>
 800fa96:	900c      	str	r0, [sp, #48]	; 0x30
 800fa98:	f7f0 fd44 	bl	8000524 <__aeabi_i2d>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	460b      	mov	r3, r1
 800faa0:	4630      	mov	r0, r6
 800faa2:	4639      	mov	r1, r7
 800faa4:	f7f0 fbf0 	bl	8000288 <__aeabi_dsub>
 800faa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faaa:	3330      	adds	r3, #48	; 0x30
 800faac:	f805 3b01 	strb.w	r3, [r5], #1
 800fab0:	ec53 2b18 	vmov	r2, r3, d8
 800fab4:	4606      	mov	r6, r0
 800fab6:	460f      	mov	r7, r1
 800fab8:	f7f1 f810 	bl	8000adc <__aeabi_dcmplt>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	d165      	bne.n	800fb8c <_dtoa_r+0x63c>
 800fac0:	4632      	mov	r2, r6
 800fac2:	463b      	mov	r3, r7
 800fac4:	4935      	ldr	r1, [pc, #212]	; (800fb9c <_dtoa_r+0x64c>)
 800fac6:	2000      	movs	r0, #0
 800fac8:	f7f0 fbde 	bl	8000288 <__aeabi_dsub>
 800facc:	ec53 2b18 	vmov	r2, r3, d8
 800fad0:	f7f1 f804 	bl	8000adc <__aeabi_dcmplt>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	f040 80b9 	bne.w	800fc4c <_dtoa_r+0x6fc>
 800fada:	9b02      	ldr	r3, [sp, #8]
 800fadc:	429d      	cmp	r5, r3
 800fade:	f43f af75 	beq.w	800f9cc <_dtoa_r+0x47c>
 800fae2:	4b2f      	ldr	r3, [pc, #188]	; (800fba0 <_dtoa_r+0x650>)
 800fae4:	ec51 0b18 	vmov	r0, r1, d8
 800fae8:	2200      	movs	r2, #0
 800faea:	f7f0 fd85 	bl	80005f8 <__aeabi_dmul>
 800faee:	4b2c      	ldr	r3, [pc, #176]	; (800fba0 <_dtoa_r+0x650>)
 800faf0:	ec41 0b18 	vmov	d8, r0, r1
 800faf4:	2200      	movs	r2, #0
 800faf6:	4630      	mov	r0, r6
 800faf8:	4639      	mov	r1, r7
 800fafa:	f7f0 fd7d 	bl	80005f8 <__aeabi_dmul>
 800fafe:	4606      	mov	r6, r0
 800fb00:	460f      	mov	r7, r1
 800fb02:	e7c4      	b.n	800fa8e <_dtoa_r+0x53e>
 800fb04:	ec51 0b17 	vmov	r0, r1, d7
 800fb08:	f7f0 fd76 	bl	80005f8 <__aeabi_dmul>
 800fb0c:	9b02      	ldr	r3, [sp, #8]
 800fb0e:	9d00      	ldr	r5, [sp, #0]
 800fb10:	930c      	str	r3, [sp, #48]	; 0x30
 800fb12:	ec41 0b18 	vmov	d8, r0, r1
 800fb16:	4639      	mov	r1, r7
 800fb18:	4630      	mov	r0, r6
 800fb1a:	f7f1 f81d 	bl	8000b58 <__aeabi_d2iz>
 800fb1e:	9011      	str	r0, [sp, #68]	; 0x44
 800fb20:	f7f0 fd00 	bl	8000524 <__aeabi_i2d>
 800fb24:	4602      	mov	r2, r0
 800fb26:	460b      	mov	r3, r1
 800fb28:	4630      	mov	r0, r6
 800fb2a:	4639      	mov	r1, r7
 800fb2c:	f7f0 fbac 	bl	8000288 <__aeabi_dsub>
 800fb30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb32:	3330      	adds	r3, #48	; 0x30
 800fb34:	f805 3b01 	strb.w	r3, [r5], #1
 800fb38:	9b02      	ldr	r3, [sp, #8]
 800fb3a:	429d      	cmp	r5, r3
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	460f      	mov	r7, r1
 800fb40:	f04f 0200 	mov.w	r2, #0
 800fb44:	d134      	bne.n	800fbb0 <_dtoa_r+0x660>
 800fb46:	4b19      	ldr	r3, [pc, #100]	; (800fbac <_dtoa_r+0x65c>)
 800fb48:	ec51 0b18 	vmov	r0, r1, d8
 800fb4c:	f7f0 fb9e 	bl	800028c <__adddf3>
 800fb50:	4602      	mov	r2, r0
 800fb52:	460b      	mov	r3, r1
 800fb54:	4630      	mov	r0, r6
 800fb56:	4639      	mov	r1, r7
 800fb58:	f7f0 ffde 	bl	8000b18 <__aeabi_dcmpgt>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	d175      	bne.n	800fc4c <_dtoa_r+0x6fc>
 800fb60:	ec53 2b18 	vmov	r2, r3, d8
 800fb64:	4911      	ldr	r1, [pc, #68]	; (800fbac <_dtoa_r+0x65c>)
 800fb66:	2000      	movs	r0, #0
 800fb68:	f7f0 fb8e 	bl	8000288 <__aeabi_dsub>
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	460b      	mov	r3, r1
 800fb70:	4630      	mov	r0, r6
 800fb72:	4639      	mov	r1, r7
 800fb74:	f7f0 ffb2 	bl	8000adc <__aeabi_dcmplt>
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	f43f af27 	beq.w	800f9cc <_dtoa_r+0x47c>
 800fb7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb80:	1e6b      	subs	r3, r5, #1
 800fb82:	930c      	str	r3, [sp, #48]	; 0x30
 800fb84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb88:	2b30      	cmp	r3, #48	; 0x30
 800fb8a:	d0f8      	beq.n	800fb7e <_dtoa_r+0x62e>
 800fb8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fb90:	e04a      	b.n	800fc28 <_dtoa_r+0x6d8>
 800fb92:	bf00      	nop
 800fb94:	08013c28 	.word	0x08013c28
 800fb98:	08013c00 	.word	0x08013c00
 800fb9c:	3ff00000 	.word	0x3ff00000
 800fba0:	40240000 	.word	0x40240000
 800fba4:	401c0000 	.word	0x401c0000
 800fba8:	40140000 	.word	0x40140000
 800fbac:	3fe00000 	.word	0x3fe00000
 800fbb0:	4baf      	ldr	r3, [pc, #700]	; (800fe70 <_dtoa_r+0x920>)
 800fbb2:	f7f0 fd21 	bl	80005f8 <__aeabi_dmul>
 800fbb6:	4606      	mov	r6, r0
 800fbb8:	460f      	mov	r7, r1
 800fbba:	e7ac      	b.n	800fb16 <_dtoa_r+0x5c6>
 800fbbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fbc0:	9d00      	ldr	r5, [sp, #0]
 800fbc2:	4642      	mov	r2, r8
 800fbc4:	464b      	mov	r3, r9
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	4639      	mov	r1, r7
 800fbca:	f7f0 fe3f 	bl	800084c <__aeabi_ddiv>
 800fbce:	f7f0 ffc3 	bl	8000b58 <__aeabi_d2iz>
 800fbd2:	9002      	str	r0, [sp, #8]
 800fbd4:	f7f0 fca6 	bl	8000524 <__aeabi_i2d>
 800fbd8:	4642      	mov	r2, r8
 800fbda:	464b      	mov	r3, r9
 800fbdc:	f7f0 fd0c 	bl	80005f8 <__aeabi_dmul>
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	4630      	mov	r0, r6
 800fbe6:	4639      	mov	r1, r7
 800fbe8:	f7f0 fb4e 	bl	8000288 <__aeabi_dsub>
 800fbec:	9e02      	ldr	r6, [sp, #8]
 800fbee:	9f01      	ldr	r7, [sp, #4]
 800fbf0:	3630      	adds	r6, #48	; 0x30
 800fbf2:	f805 6b01 	strb.w	r6, [r5], #1
 800fbf6:	9e00      	ldr	r6, [sp, #0]
 800fbf8:	1bae      	subs	r6, r5, r6
 800fbfa:	42b7      	cmp	r7, r6
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	460b      	mov	r3, r1
 800fc00:	d137      	bne.n	800fc72 <_dtoa_r+0x722>
 800fc02:	f7f0 fb43 	bl	800028c <__adddf3>
 800fc06:	4642      	mov	r2, r8
 800fc08:	464b      	mov	r3, r9
 800fc0a:	4606      	mov	r6, r0
 800fc0c:	460f      	mov	r7, r1
 800fc0e:	f7f0 ff83 	bl	8000b18 <__aeabi_dcmpgt>
 800fc12:	b9c8      	cbnz	r0, 800fc48 <_dtoa_r+0x6f8>
 800fc14:	4642      	mov	r2, r8
 800fc16:	464b      	mov	r3, r9
 800fc18:	4630      	mov	r0, r6
 800fc1a:	4639      	mov	r1, r7
 800fc1c:	f7f0 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc20:	b110      	cbz	r0, 800fc28 <_dtoa_r+0x6d8>
 800fc22:	9b02      	ldr	r3, [sp, #8]
 800fc24:	07d9      	lsls	r1, r3, #31
 800fc26:	d40f      	bmi.n	800fc48 <_dtoa_r+0x6f8>
 800fc28:	4620      	mov	r0, r4
 800fc2a:	4659      	mov	r1, fp
 800fc2c:	f000 ff2a 	bl	8010a84 <_Bfree>
 800fc30:	2300      	movs	r3, #0
 800fc32:	702b      	strb	r3, [r5, #0]
 800fc34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc36:	f10a 0001 	add.w	r0, sl, #1
 800fc3a:	6018      	str	r0, [r3, #0]
 800fc3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	f43f acd8 	beq.w	800f5f4 <_dtoa_r+0xa4>
 800fc44:	601d      	str	r5, [r3, #0]
 800fc46:	e4d5      	b.n	800f5f4 <_dtoa_r+0xa4>
 800fc48:	f8cd a01c 	str.w	sl, [sp, #28]
 800fc4c:	462b      	mov	r3, r5
 800fc4e:	461d      	mov	r5, r3
 800fc50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc54:	2a39      	cmp	r2, #57	; 0x39
 800fc56:	d108      	bne.n	800fc6a <_dtoa_r+0x71a>
 800fc58:	9a00      	ldr	r2, [sp, #0]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d1f7      	bne.n	800fc4e <_dtoa_r+0x6fe>
 800fc5e:	9a07      	ldr	r2, [sp, #28]
 800fc60:	9900      	ldr	r1, [sp, #0]
 800fc62:	3201      	adds	r2, #1
 800fc64:	9207      	str	r2, [sp, #28]
 800fc66:	2230      	movs	r2, #48	; 0x30
 800fc68:	700a      	strb	r2, [r1, #0]
 800fc6a:	781a      	ldrb	r2, [r3, #0]
 800fc6c:	3201      	adds	r2, #1
 800fc6e:	701a      	strb	r2, [r3, #0]
 800fc70:	e78c      	b.n	800fb8c <_dtoa_r+0x63c>
 800fc72:	4b7f      	ldr	r3, [pc, #508]	; (800fe70 <_dtoa_r+0x920>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	f7f0 fcbf 	bl	80005f8 <__aeabi_dmul>
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	4606      	mov	r6, r0
 800fc80:	460f      	mov	r7, r1
 800fc82:	f7f0 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	d09b      	beq.n	800fbc2 <_dtoa_r+0x672>
 800fc8a:	e7cd      	b.n	800fc28 <_dtoa_r+0x6d8>
 800fc8c:	9a08      	ldr	r2, [sp, #32]
 800fc8e:	2a00      	cmp	r2, #0
 800fc90:	f000 80c4 	beq.w	800fe1c <_dtoa_r+0x8cc>
 800fc94:	9a05      	ldr	r2, [sp, #20]
 800fc96:	2a01      	cmp	r2, #1
 800fc98:	f300 80a8 	bgt.w	800fdec <_dtoa_r+0x89c>
 800fc9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fc9e:	2a00      	cmp	r2, #0
 800fca0:	f000 80a0 	beq.w	800fde4 <_dtoa_r+0x894>
 800fca4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fca8:	9e06      	ldr	r6, [sp, #24]
 800fcaa:	4645      	mov	r5, r8
 800fcac:	9a04      	ldr	r2, [sp, #16]
 800fcae:	2101      	movs	r1, #1
 800fcb0:	441a      	add	r2, r3
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	4498      	add	r8, r3
 800fcb6:	9204      	str	r2, [sp, #16]
 800fcb8:	f000 ffea 	bl	8010c90 <__i2b>
 800fcbc:	4607      	mov	r7, r0
 800fcbe:	2d00      	cmp	r5, #0
 800fcc0:	dd0b      	ble.n	800fcda <_dtoa_r+0x78a>
 800fcc2:	9b04      	ldr	r3, [sp, #16]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	dd08      	ble.n	800fcda <_dtoa_r+0x78a>
 800fcc8:	42ab      	cmp	r3, r5
 800fcca:	9a04      	ldr	r2, [sp, #16]
 800fccc:	bfa8      	it	ge
 800fcce:	462b      	movge	r3, r5
 800fcd0:	eba8 0803 	sub.w	r8, r8, r3
 800fcd4:	1aed      	subs	r5, r5, r3
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	9304      	str	r3, [sp, #16]
 800fcda:	9b06      	ldr	r3, [sp, #24]
 800fcdc:	b1fb      	cbz	r3, 800fd1e <_dtoa_r+0x7ce>
 800fcde:	9b08      	ldr	r3, [sp, #32]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f000 809f 	beq.w	800fe24 <_dtoa_r+0x8d4>
 800fce6:	2e00      	cmp	r6, #0
 800fce8:	dd11      	ble.n	800fd0e <_dtoa_r+0x7be>
 800fcea:	4639      	mov	r1, r7
 800fcec:	4632      	mov	r2, r6
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f001 f88a 	bl	8010e08 <__pow5mult>
 800fcf4:	465a      	mov	r2, fp
 800fcf6:	4601      	mov	r1, r0
 800fcf8:	4607      	mov	r7, r0
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	f000 ffde 	bl	8010cbc <__multiply>
 800fd00:	4659      	mov	r1, fp
 800fd02:	9007      	str	r0, [sp, #28]
 800fd04:	4620      	mov	r0, r4
 800fd06:	f000 febd 	bl	8010a84 <_Bfree>
 800fd0a:	9b07      	ldr	r3, [sp, #28]
 800fd0c:	469b      	mov	fp, r3
 800fd0e:	9b06      	ldr	r3, [sp, #24]
 800fd10:	1b9a      	subs	r2, r3, r6
 800fd12:	d004      	beq.n	800fd1e <_dtoa_r+0x7ce>
 800fd14:	4659      	mov	r1, fp
 800fd16:	4620      	mov	r0, r4
 800fd18:	f001 f876 	bl	8010e08 <__pow5mult>
 800fd1c:	4683      	mov	fp, r0
 800fd1e:	2101      	movs	r1, #1
 800fd20:	4620      	mov	r0, r4
 800fd22:	f000 ffb5 	bl	8010c90 <__i2b>
 800fd26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	dd7c      	ble.n	800fe28 <_dtoa_r+0x8d8>
 800fd2e:	461a      	mov	r2, r3
 800fd30:	4601      	mov	r1, r0
 800fd32:	4620      	mov	r0, r4
 800fd34:	f001 f868 	bl	8010e08 <__pow5mult>
 800fd38:	9b05      	ldr	r3, [sp, #20]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	4606      	mov	r6, r0
 800fd3e:	dd76      	ble.n	800fe2e <_dtoa_r+0x8de>
 800fd40:	2300      	movs	r3, #0
 800fd42:	9306      	str	r3, [sp, #24]
 800fd44:	6933      	ldr	r3, [r6, #16]
 800fd46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fd4a:	6918      	ldr	r0, [r3, #16]
 800fd4c:	f000 ff50 	bl	8010bf0 <__hi0bits>
 800fd50:	f1c0 0020 	rsb	r0, r0, #32
 800fd54:	9b04      	ldr	r3, [sp, #16]
 800fd56:	4418      	add	r0, r3
 800fd58:	f010 001f 	ands.w	r0, r0, #31
 800fd5c:	f000 8086 	beq.w	800fe6c <_dtoa_r+0x91c>
 800fd60:	f1c0 0320 	rsb	r3, r0, #32
 800fd64:	2b04      	cmp	r3, #4
 800fd66:	dd7f      	ble.n	800fe68 <_dtoa_r+0x918>
 800fd68:	f1c0 001c 	rsb	r0, r0, #28
 800fd6c:	9b04      	ldr	r3, [sp, #16]
 800fd6e:	4403      	add	r3, r0
 800fd70:	4480      	add	r8, r0
 800fd72:	4405      	add	r5, r0
 800fd74:	9304      	str	r3, [sp, #16]
 800fd76:	f1b8 0f00 	cmp.w	r8, #0
 800fd7a:	dd05      	ble.n	800fd88 <_dtoa_r+0x838>
 800fd7c:	4659      	mov	r1, fp
 800fd7e:	4642      	mov	r2, r8
 800fd80:	4620      	mov	r0, r4
 800fd82:	f001 f89b 	bl	8010ebc <__lshift>
 800fd86:	4683      	mov	fp, r0
 800fd88:	9b04      	ldr	r3, [sp, #16]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	dd05      	ble.n	800fd9a <_dtoa_r+0x84a>
 800fd8e:	4631      	mov	r1, r6
 800fd90:	461a      	mov	r2, r3
 800fd92:	4620      	mov	r0, r4
 800fd94:	f001 f892 	bl	8010ebc <__lshift>
 800fd98:	4606      	mov	r6, r0
 800fd9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d069      	beq.n	800fe74 <_dtoa_r+0x924>
 800fda0:	4631      	mov	r1, r6
 800fda2:	4658      	mov	r0, fp
 800fda4:	f001 f8f6 	bl	8010f94 <__mcmp>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	da63      	bge.n	800fe74 <_dtoa_r+0x924>
 800fdac:	2300      	movs	r3, #0
 800fdae:	4659      	mov	r1, fp
 800fdb0:	220a      	movs	r2, #10
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f000 fe88 	bl	8010ac8 <__multadd>
 800fdb8:	9b08      	ldr	r3, [sp, #32]
 800fdba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdbe:	4683      	mov	fp, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f000 818f 	beq.w	80100e4 <_dtoa_r+0xb94>
 800fdc6:	4639      	mov	r1, r7
 800fdc8:	2300      	movs	r3, #0
 800fdca:	220a      	movs	r2, #10
 800fdcc:	4620      	mov	r0, r4
 800fdce:	f000 fe7b 	bl	8010ac8 <__multadd>
 800fdd2:	f1b9 0f00 	cmp.w	r9, #0
 800fdd6:	4607      	mov	r7, r0
 800fdd8:	f300 808e 	bgt.w	800fef8 <_dtoa_r+0x9a8>
 800fddc:	9b05      	ldr	r3, [sp, #20]
 800fdde:	2b02      	cmp	r3, #2
 800fde0:	dc50      	bgt.n	800fe84 <_dtoa_r+0x934>
 800fde2:	e089      	b.n	800fef8 <_dtoa_r+0x9a8>
 800fde4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fde6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fdea:	e75d      	b.n	800fca8 <_dtoa_r+0x758>
 800fdec:	9b01      	ldr	r3, [sp, #4]
 800fdee:	1e5e      	subs	r6, r3, #1
 800fdf0:	9b06      	ldr	r3, [sp, #24]
 800fdf2:	42b3      	cmp	r3, r6
 800fdf4:	bfbf      	itttt	lt
 800fdf6:	9b06      	ldrlt	r3, [sp, #24]
 800fdf8:	9606      	strlt	r6, [sp, #24]
 800fdfa:	1af2      	sublt	r2, r6, r3
 800fdfc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fdfe:	bfb6      	itet	lt
 800fe00:	189b      	addlt	r3, r3, r2
 800fe02:	1b9e      	subge	r6, r3, r6
 800fe04:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	bfb8      	it	lt
 800fe0a:	2600      	movlt	r6, #0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	bfb5      	itete	lt
 800fe10:	eba8 0503 	sublt.w	r5, r8, r3
 800fe14:	9b01      	ldrge	r3, [sp, #4]
 800fe16:	2300      	movlt	r3, #0
 800fe18:	4645      	movge	r5, r8
 800fe1a:	e747      	b.n	800fcac <_dtoa_r+0x75c>
 800fe1c:	9e06      	ldr	r6, [sp, #24]
 800fe1e:	9f08      	ldr	r7, [sp, #32]
 800fe20:	4645      	mov	r5, r8
 800fe22:	e74c      	b.n	800fcbe <_dtoa_r+0x76e>
 800fe24:	9a06      	ldr	r2, [sp, #24]
 800fe26:	e775      	b.n	800fd14 <_dtoa_r+0x7c4>
 800fe28:	9b05      	ldr	r3, [sp, #20]
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	dc18      	bgt.n	800fe60 <_dtoa_r+0x910>
 800fe2e:	9b02      	ldr	r3, [sp, #8]
 800fe30:	b9b3      	cbnz	r3, 800fe60 <_dtoa_r+0x910>
 800fe32:	9b03      	ldr	r3, [sp, #12]
 800fe34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe38:	b9a3      	cbnz	r3, 800fe64 <_dtoa_r+0x914>
 800fe3a:	9b03      	ldr	r3, [sp, #12]
 800fe3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe40:	0d1b      	lsrs	r3, r3, #20
 800fe42:	051b      	lsls	r3, r3, #20
 800fe44:	b12b      	cbz	r3, 800fe52 <_dtoa_r+0x902>
 800fe46:	9b04      	ldr	r3, [sp, #16]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	9304      	str	r3, [sp, #16]
 800fe4c:	f108 0801 	add.w	r8, r8, #1
 800fe50:	2301      	movs	r3, #1
 800fe52:	9306      	str	r3, [sp, #24]
 800fe54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	f47f af74 	bne.w	800fd44 <_dtoa_r+0x7f4>
 800fe5c:	2001      	movs	r0, #1
 800fe5e:	e779      	b.n	800fd54 <_dtoa_r+0x804>
 800fe60:	2300      	movs	r3, #0
 800fe62:	e7f6      	b.n	800fe52 <_dtoa_r+0x902>
 800fe64:	9b02      	ldr	r3, [sp, #8]
 800fe66:	e7f4      	b.n	800fe52 <_dtoa_r+0x902>
 800fe68:	d085      	beq.n	800fd76 <_dtoa_r+0x826>
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	301c      	adds	r0, #28
 800fe6e:	e77d      	b.n	800fd6c <_dtoa_r+0x81c>
 800fe70:	40240000 	.word	0x40240000
 800fe74:	9b01      	ldr	r3, [sp, #4]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	dc38      	bgt.n	800feec <_dtoa_r+0x99c>
 800fe7a:	9b05      	ldr	r3, [sp, #20]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	dd35      	ble.n	800feec <_dtoa_r+0x99c>
 800fe80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fe84:	f1b9 0f00 	cmp.w	r9, #0
 800fe88:	d10d      	bne.n	800fea6 <_dtoa_r+0x956>
 800fe8a:	4631      	mov	r1, r6
 800fe8c:	464b      	mov	r3, r9
 800fe8e:	2205      	movs	r2, #5
 800fe90:	4620      	mov	r0, r4
 800fe92:	f000 fe19 	bl	8010ac8 <__multadd>
 800fe96:	4601      	mov	r1, r0
 800fe98:	4606      	mov	r6, r0
 800fe9a:	4658      	mov	r0, fp
 800fe9c:	f001 f87a 	bl	8010f94 <__mcmp>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	f73f adbd 	bgt.w	800fa20 <_dtoa_r+0x4d0>
 800fea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fea8:	9d00      	ldr	r5, [sp, #0]
 800feaa:	ea6f 0a03 	mvn.w	sl, r3
 800feae:	f04f 0800 	mov.w	r8, #0
 800feb2:	4631      	mov	r1, r6
 800feb4:	4620      	mov	r0, r4
 800feb6:	f000 fde5 	bl	8010a84 <_Bfree>
 800feba:	2f00      	cmp	r7, #0
 800febc:	f43f aeb4 	beq.w	800fc28 <_dtoa_r+0x6d8>
 800fec0:	f1b8 0f00 	cmp.w	r8, #0
 800fec4:	d005      	beq.n	800fed2 <_dtoa_r+0x982>
 800fec6:	45b8      	cmp	r8, r7
 800fec8:	d003      	beq.n	800fed2 <_dtoa_r+0x982>
 800feca:	4641      	mov	r1, r8
 800fecc:	4620      	mov	r0, r4
 800fece:	f000 fdd9 	bl	8010a84 <_Bfree>
 800fed2:	4639      	mov	r1, r7
 800fed4:	4620      	mov	r0, r4
 800fed6:	f000 fdd5 	bl	8010a84 <_Bfree>
 800feda:	e6a5      	b.n	800fc28 <_dtoa_r+0x6d8>
 800fedc:	2600      	movs	r6, #0
 800fede:	4637      	mov	r7, r6
 800fee0:	e7e1      	b.n	800fea6 <_dtoa_r+0x956>
 800fee2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fee4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fee8:	4637      	mov	r7, r6
 800feea:	e599      	b.n	800fa20 <_dtoa_r+0x4d0>
 800feec:	9b08      	ldr	r3, [sp, #32]
 800feee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	f000 80fd 	beq.w	80100f2 <_dtoa_r+0xba2>
 800fef8:	2d00      	cmp	r5, #0
 800fefa:	dd05      	ble.n	800ff08 <_dtoa_r+0x9b8>
 800fefc:	4639      	mov	r1, r7
 800fefe:	462a      	mov	r2, r5
 800ff00:	4620      	mov	r0, r4
 800ff02:	f000 ffdb 	bl	8010ebc <__lshift>
 800ff06:	4607      	mov	r7, r0
 800ff08:	9b06      	ldr	r3, [sp, #24]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d05c      	beq.n	800ffc8 <_dtoa_r+0xa78>
 800ff0e:	6879      	ldr	r1, [r7, #4]
 800ff10:	4620      	mov	r0, r4
 800ff12:	f000 fd77 	bl	8010a04 <_Balloc>
 800ff16:	4605      	mov	r5, r0
 800ff18:	b928      	cbnz	r0, 800ff26 <_dtoa_r+0x9d6>
 800ff1a:	4b80      	ldr	r3, [pc, #512]	; (801011c <_dtoa_r+0xbcc>)
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ff22:	f7ff bb2e 	b.w	800f582 <_dtoa_r+0x32>
 800ff26:	693a      	ldr	r2, [r7, #16]
 800ff28:	3202      	adds	r2, #2
 800ff2a:	0092      	lsls	r2, r2, #2
 800ff2c:	f107 010c 	add.w	r1, r7, #12
 800ff30:	300c      	adds	r0, #12
 800ff32:	f7fd fbde 	bl	800d6f2 <memcpy>
 800ff36:	2201      	movs	r2, #1
 800ff38:	4629      	mov	r1, r5
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f000 ffbe 	bl	8010ebc <__lshift>
 800ff40:	9b00      	ldr	r3, [sp, #0]
 800ff42:	3301      	adds	r3, #1
 800ff44:	9301      	str	r3, [sp, #4]
 800ff46:	9b00      	ldr	r3, [sp, #0]
 800ff48:	444b      	add	r3, r9
 800ff4a:	9307      	str	r3, [sp, #28]
 800ff4c:	9b02      	ldr	r3, [sp, #8]
 800ff4e:	f003 0301 	and.w	r3, r3, #1
 800ff52:	46b8      	mov	r8, r7
 800ff54:	9306      	str	r3, [sp, #24]
 800ff56:	4607      	mov	r7, r0
 800ff58:	9b01      	ldr	r3, [sp, #4]
 800ff5a:	4631      	mov	r1, r6
 800ff5c:	3b01      	subs	r3, #1
 800ff5e:	4658      	mov	r0, fp
 800ff60:	9302      	str	r3, [sp, #8]
 800ff62:	f7ff fa69 	bl	800f438 <quorem>
 800ff66:	4603      	mov	r3, r0
 800ff68:	3330      	adds	r3, #48	; 0x30
 800ff6a:	9004      	str	r0, [sp, #16]
 800ff6c:	4641      	mov	r1, r8
 800ff6e:	4658      	mov	r0, fp
 800ff70:	9308      	str	r3, [sp, #32]
 800ff72:	f001 f80f 	bl	8010f94 <__mcmp>
 800ff76:	463a      	mov	r2, r7
 800ff78:	4681      	mov	r9, r0
 800ff7a:	4631      	mov	r1, r6
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	f001 f825 	bl	8010fcc <__mdiff>
 800ff82:	68c2      	ldr	r2, [r0, #12]
 800ff84:	9b08      	ldr	r3, [sp, #32]
 800ff86:	4605      	mov	r5, r0
 800ff88:	bb02      	cbnz	r2, 800ffcc <_dtoa_r+0xa7c>
 800ff8a:	4601      	mov	r1, r0
 800ff8c:	4658      	mov	r0, fp
 800ff8e:	f001 f801 	bl	8010f94 <__mcmp>
 800ff92:	9b08      	ldr	r3, [sp, #32]
 800ff94:	4602      	mov	r2, r0
 800ff96:	4629      	mov	r1, r5
 800ff98:	4620      	mov	r0, r4
 800ff9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ff9e:	f000 fd71 	bl	8010a84 <_Bfree>
 800ffa2:	9b05      	ldr	r3, [sp, #20]
 800ffa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffa6:	9d01      	ldr	r5, [sp, #4]
 800ffa8:	ea43 0102 	orr.w	r1, r3, r2
 800ffac:	9b06      	ldr	r3, [sp, #24]
 800ffae:	430b      	orrs	r3, r1
 800ffb0:	9b08      	ldr	r3, [sp, #32]
 800ffb2:	d10d      	bne.n	800ffd0 <_dtoa_r+0xa80>
 800ffb4:	2b39      	cmp	r3, #57	; 0x39
 800ffb6:	d029      	beq.n	801000c <_dtoa_r+0xabc>
 800ffb8:	f1b9 0f00 	cmp.w	r9, #0
 800ffbc:	dd01      	ble.n	800ffc2 <_dtoa_r+0xa72>
 800ffbe:	9b04      	ldr	r3, [sp, #16]
 800ffc0:	3331      	adds	r3, #49	; 0x31
 800ffc2:	9a02      	ldr	r2, [sp, #8]
 800ffc4:	7013      	strb	r3, [r2, #0]
 800ffc6:	e774      	b.n	800feb2 <_dtoa_r+0x962>
 800ffc8:	4638      	mov	r0, r7
 800ffca:	e7b9      	b.n	800ff40 <_dtoa_r+0x9f0>
 800ffcc:	2201      	movs	r2, #1
 800ffce:	e7e2      	b.n	800ff96 <_dtoa_r+0xa46>
 800ffd0:	f1b9 0f00 	cmp.w	r9, #0
 800ffd4:	db06      	blt.n	800ffe4 <_dtoa_r+0xa94>
 800ffd6:	9905      	ldr	r1, [sp, #20]
 800ffd8:	ea41 0909 	orr.w	r9, r1, r9
 800ffdc:	9906      	ldr	r1, [sp, #24]
 800ffde:	ea59 0101 	orrs.w	r1, r9, r1
 800ffe2:	d120      	bne.n	8010026 <_dtoa_r+0xad6>
 800ffe4:	2a00      	cmp	r2, #0
 800ffe6:	ddec      	ble.n	800ffc2 <_dtoa_r+0xa72>
 800ffe8:	4659      	mov	r1, fp
 800ffea:	2201      	movs	r2, #1
 800ffec:	4620      	mov	r0, r4
 800ffee:	9301      	str	r3, [sp, #4]
 800fff0:	f000 ff64 	bl	8010ebc <__lshift>
 800fff4:	4631      	mov	r1, r6
 800fff6:	4683      	mov	fp, r0
 800fff8:	f000 ffcc 	bl	8010f94 <__mcmp>
 800fffc:	2800      	cmp	r0, #0
 800fffe:	9b01      	ldr	r3, [sp, #4]
 8010000:	dc02      	bgt.n	8010008 <_dtoa_r+0xab8>
 8010002:	d1de      	bne.n	800ffc2 <_dtoa_r+0xa72>
 8010004:	07da      	lsls	r2, r3, #31
 8010006:	d5dc      	bpl.n	800ffc2 <_dtoa_r+0xa72>
 8010008:	2b39      	cmp	r3, #57	; 0x39
 801000a:	d1d8      	bne.n	800ffbe <_dtoa_r+0xa6e>
 801000c:	9a02      	ldr	r2, [sp, #8]
 801000e:	2339      	movs	r3, #57	; 0x39
 8010010:	7013      	strb	r3, [r2, #0]
 8010012:	462b      	mov	r3, r5
 8010014:	461d      	mov	r5, r3
 8010016:	3b01      	subs	r3, #1
 8010018:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801001c:	2a39      	cmp	r2, #57	; 0x39
 801001e:	d050      	beq.n	80100c2 <_dtoa_r+0xb72>
 8010020:	3201      	adds	r2, #1
 8010022:	701a      	strb	r2, [r3, #0]
 8010024:	e745      	b.n	800feb2 <_dtoa_r+0x962>
 8010026:	2a00      	cmp	r2, #0
 8010028:	dd03      	ble.n	8010032 <_dtoa_r+0xae2>
 801002a:	2b39      	cmp	r3, #57	; 0x39
 801002c:	d0ee      	beq.n	801000c <_dtoa_r+0xabc>
 801002e:	3301      	adds	r3, #1
 8010030:	e7c7      	b.n	800ffc2 <_dtoa_r+0xa72>
 8010032:	9a01      	ldr	r2, [sp, #4]
 8010034:	9907      	ldr	r1, [sp, #28]
 8010036:	f802 3c01 	strb.w	r3, [r2, #-1]
 801003a:	428a      	cmp	r2, r1
 801003c:	d02a      	beq.n	8010094 <_dtoa_r+0xb44>
 801003e:	4659      	mov	r1, fp
 8010040:	2300      	movs	r3, #0
 8010042:	220a      	movs	r2, #10
 8010044:	4620      	mov	r0, r4
 8010046:	f000 fd3f 	bl	8010ac8 <__multadd>
 801004a:	45b8      	cmp	r8, r7
 801004c:	4683      	mov	fp, r0
 801004e:	f04f 0300 	mov.w	r3, #0
 8010052:	f04f 020a 	mov.w	r2, #10
 8010056:	4641      	mov	r1, r8
 8010058:	4620      	mov	r0, r4
 801005a:	d107      	bne.n	801006c <_dtoa_r+0xb1c>
 801005c:	f000 fd34 	bl	8010ac8 <__multadd>
 8010060:	4680      	mov	r8, r0
 8010062:	4607      	mov	r7, r0
 8010064:	9b01      	ldr	r3, [sp, #4]
 8010066:	3301      	adds	r3, #1
 8010068:	9301      	str	r3, [sp, #4]
 801006a:	e775      	b.n	800ff58 <_dtoa_r+0xa08>
 801006c:	f000 fd2c 	bl	8010ac8 <__multadd>
 8010070:	4639      	mov	r1, r7
 8010072:	4680      	mov	r8, r0
 8010074:	2300      	movs	r3, #0
 8010076:	220a      	movs	r2, #10
 8010078:	4620      	mov	r0, r4
 801007a:	f000 fd25 	bl	8010ac8 <__multadd>
 801007e:	4607      	mov	r7, r0
 8010080:	e7f0      	b.n	8010064 <_dtoa_r+0xb14>
 8010082:	f1b9 0f00 	cmp.w	r9, #0
 8010086:	9a00      	ldr	r2, [sp, #0]
 8010088:	bfcc      	ite	gt
 801008a:	464d      	movgt	r5, r9
 801008c:	2501      	movle	r5, #1
 801008e:	4415      	add	r5, r2
 8010090:	f04f 0800 	mov.w	r8, #0
 8010094:	4659      	mov	r1, fp
 8010096:	2201      	movs	r2, #1
 8010098:	4620      	mov	r0, r4
 801009a:	9301      	str	r3, [sp, #4]
 801009c:	f000 ff0e 	bl	8010ebc <__lshift>
 80100a0:	4631      	mov	r1, r6
 80100a2:	4683      	mov	fp, r0
 80100a4:	f000 ff76 	bl	8010f94 <__mcmp>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	dcb2      	bgt.n	8010012 <_dtoa_r+0xac2>
 80100ac:	d102      	bne.n	80100b4 <_dtoa_r+0xb64>
 80100ae:	9b01      	ldr	r3, [sp, #4]
 80100b0:	07db      	lsls	r3, r3, #31
 80100b2:	d4ae      	bmi.n	8010012 <_dtoa_r+0xac2>
 80100b4:	462b      	mov	r3, r5
 80100b6:	461d      	mov	r5, r3
 80100b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100bc:	2a30      	cmp	r2, #48	; 0x30
 80100be:	d0fa      	beq.n	80100b6 <_dtoa_r+0xb66>
 80100c0:	e6f7      	b.n	800feb2 <_dtoa_r+0x962>
 80100c2:	9a00      	ldr	r2, [sp, #0]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d1a5      	bne.n	8010014 <_dtoa_r+0xac4>
 80100c8:	f10a 0a01 	add.w	sl, sl, #1
 80100cc:	2331      	movs	r3, #49	; 0x31
 80100ce:	e779      	b.n	800ffc4 <_dtoa_r+0xa74>
 80100d0:	4b13      	ldr	r3, [pc, #76]	; (8010120 <_dtoa_r+0xbd0>)
 80100d2:	f7ff baaf 	b.w	800f634 <_dtoa_r+0xe4>
 80100d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100d8:	2b00      	cmp	r3, #0
 80100da:	f47f aa86 	bne.w	800f5ea <_dtoa_r+0x9a>
 80100de:	4b11      	ldr	r3, [pc, #68]	; (8010124 <_dtoa_r+0xbd4>)
 80100e0:	f7ff baa8 	b.w	800f634 <_dtoa_r+0xe4>
 80100e4:	f1b9 0f00 	cmp.w	r9, #0
 80100e8:	dc03      	bgt.n	80100f2 <_dtoa_r+0xba2>
 80100ea:	9b05      	ldr	r3, [sp, #20]
 80100ec:	2b02      	cmp	r3, #2
 80100ee:	f73f aec9 	bgt.w	800fe84 <_dtoa_r+0x934>
 80100f2:	9d00      	ldr	r5, [sp, #0]
 80100f4:	4631      	mov	r1, r6
 80100f6:	4658      	mov	r0, fp
 80100f8:	f7ff f99e 	bl	800f438 <quorem>
 80100fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010100:	f805 3b01 	strb.w	r3, [r5], #1
 8010104:	9a00      	ldr	r2, [sp, #0]
 8010106:	1aaa      	subs	r2, r5, r2
 8010108:	4591      	cmp	r9, r2
 801010a:	ddba      	ble.n	8010082 <_dtoa_r+0xb32>
 801010c:	4659      	mov	r1, fp
 801010e:	2300      	movs	r3, #0
 8010110:	220a      	movs	r2, #10
 8010112:	4620      	mov	r0, r4
 8010114:	f000 fcd8 	bl	8010ac8 <__multadd>
 8010118:	4683      	mov	fp, r0
 801011a:	e7eb      	b.n	80100f4 <_dtoa_r+0xba4>
 801011c:	08013b0c 	.word	0x08013b0c
 8010120:	08013908 	.word	0x08013908
 8010124:	08013a89 	.word	0x08013a89

08010128 <__sflush_r>:
 8010128:	898a      	ldrh	r2, [r1, #12]
 801012a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801012e:	4605      	mov	r5, r0
 8010130:	0710      	lsls	r0, r2, #28
 8010132:	460c      	mov	r4, r1
 8010134:	d458      	bmi.n	80101e8 <__sflush_r+0xc0>
 8010136:	684b      	ldr	r3, [r1, #4]
 8010138:	2b00      	cmp	r3, #0
 801013a:	dc05      	bgt.n	8010148 <__sflush_r+0x20>
 801013c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801013e:	2b00      	cmp	r3, #0
 8010140:	dc02      	bgt.n	8010148 <__sflush_r+0x20>
 8010142:	2000      	movs	r0, #0
 8010144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801014a:	2e00      	cmp	r6, #0
 801014c:	d0f9      	beq.n	8010142 <__sflush_r+0x1a>
 801014e:	2300      	movs	r3, #0
 8010150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010154:	682f      	ldr	r7, [r5, #0]
 8010156:	602b      	str	r3, [r5, #0]
 8010158:	d032      	beq.n	80101c0 <__sflush_r+0x98>
 801015a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801015c:	89a3      	ldrh	r3, [r4, #12]
 801015e:	075a      	lsls	r2, r3, #29
 8010160:	d505      	bpl.n	801016e <__sflush_r+0x46>
 8010162:	6863      	ldr	r3, [r4, #4]
 8010164:	1ac0      	subs	r0, r0, r3
 8010166:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010168:	b10b      	cbz	r3, 801016e <__sflush_r+0x46>
 801016a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801016c:	1ac0      	subs	r0, r0, r3
 801016e:	2300      	movs	r3, #0
 8010170:	4602      	mov	r2, r0
 8010172:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010174:	6a21      	ldr	r1, [r4, #32]
 8010176:	4628      	mov	r0, r5
 8010178:	47b0      	blx	r6
 801017a:	1c43      	adds	r3, r0, #1
 801017c:	89a3      	ldrh	r3, [r4, #12]
 801017e:	d106      	bne.n	801018e <__sflush_r+0x66>
 8010180:	6829      	ldr	r1, [r5, #0]
 8010182:	291d      	cmp	r1, #29
 8010184:	d82c      	bhi.n	80101e0 <__sflush_r+0xb8>
 8010186:	4a2a      	ldr	r2, [pc, #168]	; (8010230 <__sflush_r+0x108>)
 8010188:	40ca      	lsrs	r2, r1
 801018a:	07d6      	lsls	r6, r2, #31
 801018c:	d528      	bpl.n	80101e0 <__sflush_r+0xb8>
 801018e:	2200      	movs	r2, #0
 8010190:	6062      	str	r2, [r4, #4]
 8010192:	04d9      	lsls	r1, r3, #19
 8010194:	6922      	ldr	r2, [r4, #16]
 8010196:	6022      	str	r2, [r4, #0]
 8010198:	d504      	bpl.n	80101a4 <__sflush_r+0x7c>
 801019a:	1c42      	adds	r2, r0, #1
 801019c:	d101      	bne.n	80101a2 <__sflush_r+0x7a>
 801019e:	682b      	ldr	r3, [r5, #0]
 80101a0:	b903      	cbnz	r3, 80101a4 <__sflush_r+0x7c>
 80101a2:	6560      	str	r0, [r4, #84]	; 0x54
 80101a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101a6:	602f      	str	r7, [r5, #0]
 80101a8:	2900      	cmp	r1, #0
 80101aa:	d0ca      	beq.n	8010142 <__sflush_r+0x1a>
 80101ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101b0:	4299      	cmp	r1, r3
 80101b2:	d002      	beq.n	80101ba <__sflush_r+0x92>
 80101b4:	4628      	mov	r0, r5
 80101b6:	f001 f8ef 	bl	8011398 <_free_r>
 80101ba:	2000      	movs	r0, #0
 80101bc:	6360      	str	r0, [r4, #52]	; 0x34
 80101be:	e7c1      	b.n	8010144 <__sflush_r+0x1c>
 80101c0:	6a21      	ldr	r1, [r4, #32]
 80101c2:	2301      	movs	r3, #1
 80101c4:	4628      	mov	r0, r5
 80101c6:	47b0      	blx	r6
 80101c8:	1c41      	adds	r1, r0, #1
 80101ca:	d1c7      	bne.n	801015c <__sflush_r+0x34>
 80101cc:	682b      	ldr	r3, [r5, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d0c4      	beq.n	801015c <__sflush_r+0x34>
 80101d2:	2b1d      	cmp	r3, #29
 80101d4:	d001      	beq.n	80101da <__sflush_r+0xb2>
 80101d6:	2b16      	cmp	r3, #22
 80101d8:	d101      	bne.n	80101de <__sflush_r+0xb6>
 80101da:	602f      	str	r7, [r5, #0]
 80101dc:	e7b1      	b.n	8010142 <__sflush_r+0x1a>
 80101de:	89a3      	ldrh	r3, [r4, #12]
 80101e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101e4:	81a3      	strh	r3, [r4, #12]
 80101e6:	e7ad      	b.n	8010144 <__sflush_r+0x1c>
 80101e8:	690f      	ldr	r7, [r1, #16]
 80101ea:	2f00      	cmp	r7, #0
 80101ec:	d0a9      	beq.n	8010142 <__sflush_r+0x1a>
 80101ee:	0793      	lsls	r3, r2, #30
 80101f0:	680e      	ldr	r6, [r1, #0]
 80101f2:	bf08      	it	eq
 80101f4:	694b      	ldreq	r3, [r1, #20]
 80101f6:	600f      	str	r7, [r1, #0]
 80101f8:	bf18      	it	ne
 80101fa:	2300      	movne	r3, #0
 80101fc:	eba6 0807 	sub.w	r8, r6, r7
 8010200:	608b      	str	r3, [r1, #8]
 8010202:	f1b8 0f00 	cmp.w	r8, #0
 8010206:	dd9c      	ble.n	8010142 <__sflush_r+0x1a>
 8010208:	6a21      	ldr	r1, [r4, #32]
 801020a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801020c:	4643      	mov	r3, r8
 801020e:	463a      	mov	r2, r7
 8010210:	4628      	mov	r0, r5
 8010212:	47b0      	blx	r6
 8010214:	2800      	cmp	r0, #0
 8010216:	dc06      	bgt.n	8010226 <__sflush_r+0xfe>
 8010218:	89a3      	ldrh	r3, [r4, #12]
 801021a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801021e:	81a3      	strh	r3, [r4, #12]
 8010220:	f04f 30ff 	mov.w	r0, #4294967295
 8010224:	e78e      	b.n	8010144 <__sflush_r+0x1c>
 8010226:	4407      	add	r7, r0
 8010228:	eba8 0800 	sub.w	r8, r8, r0
 801022c:	e7e9      	b.n	8010202 <__sflush_r+0xda>
 801022e:	bf00      	nop
 8010230:	20400001 	.word	0x20400001

08010234 <_fflush_r>:
 8010234:	b538      	push	{r3, r4, r5, lr}
 8010236:	690b      	ldr	r3, [r1, #16]
 8010238:	4605      	mov	r5, r0
 801023a:	460c      	mov	r4, r1
 801023c:	b913      	cbnz	r3, 8010244 <_fflush_r+0x10>
 801023e:	2500      	movs	r5, #0
 8010240:	4628      	mov	r0, r5
 8010242:	bd38      	pop	{r3, r4, r5, pc}
 8010244:	b118      	cbz	r0, 801024e <_fflush_r+0x1a>
 8010246:	6983      	ldr	r3, [r0, #24]
 8010248:	b90b      	cbnz	r3, 801024e <_fflush_r+0x1a>
 801024a:	f7fd f98d 	bl	800d568 <__sinit>
 801024e:	4b14      	ldr	r3, [pc, #80]	; (80102a0 <_fflush_r+0x6c>)
 8010250:	429c      	cmp	r4, r3
 8010252:	d11b      	bne.n	801028c <_fflush_r+0x58>
 8010254:	686c      	ldr	r4, [r5, #4]
 8010256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d0ef      	beq.n	801023e <_fflush_r+0xa>
 801025e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010260:	07d0      	lsls	r0, r2, #31
 8010262:	d404      	bmi.n	801026e <_fflush_r+0x3a>
 8010264:	0599      	lsls	r1, r3, #22
 8010266:	d402      	bmi.n	801026e <_fflush_r+0x3a>
 8010268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801026a:	f7fd fa40 	bl	800d6ee <__retarget_lock_acquire_recursive>
 801026e:	4628      	mov	r0, r5
 8010270:	4621      	mov	r1, r4
 8010272:	f7ff ff59 	bl	8010128 <__sflush_r>
 8010276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010278:	07da      	lsls	r2, r3, #31
 801027a:	4605      	mov	r5, r0
 801027c:	d4e0      	bmi.n	8010240 <_fflush_r+0xc>
 801027e:	89a3      	ldrh	r3, [r4, #12]
 8010280:	059b      	lsls	r3, r3, #22
 8010282:	d4dd      	bmi.n	8010240 <_fflush_r+0xc>
 8010284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010286:	f7fd fa33 	bl	800d6f0 <__retarget_lock_release_recursive>
 801028a:	e7d9      	b.n	8010240 <_fflush_r+0xc>
 801028c:	4b05      	ldr	r3, [pc, #20]	; (80102a4 <_fflush_r+0x70>)
 801028e:	429c      	cmp	r4, r3
 8010290:	d101      	bne.n	8010296 <_fflush_r+0x62>
 8010292:	68ac      	ldr	r4, [r5, #8]
 8010294:	e7df      	b.n	8010256 <_fflush_r+0x22>
 8010296:	4b04      	ldr	r3, [pc, #16]	; (80102a8 <_fflush_r+0x74>)
 8010298:	429c      	cmp	r4, r3
 801029a:	bf08      	it	eq
 801029c:	68ec      	ldreq	r4, [r5, #12]
 801029e:	e7da      	b.n	8010256 <_fflush_r+0x22>
 80102a0:	080138b4 	.word	0x080138b4
 80102a4:	080138d4 	.word	0x080138d4
 80102a8:	08013894 	.word	0x08013894

080102ac <rshift>:
 80102ac:	6903      	ldr	r3, [r0, #16]
 80102ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80102b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80102ba:	f100 0414 	add.w	r4, r0, #20
 80102be:	dd45      	ble.n	801034c <rshift+0xa0>
 80102c0:	f011 011f 	ands.w	r1, r1, #31
 80102c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80102c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80102cc:	d10c      	bne.n	80102e8 <rshift+0x3c>
 80102ce:	f100 0710 	add.w	r7, r0, #16
 80102d2:	4629      	mov	r1, r5
 80102d4:	42b1      	cmp	r1, r6
 80102d6:	d334      	bcc.n	8010342 <rshift+0x96>
 80102d8:	1a9b      	subs	r3, r3, r2
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	1eea      	subs	r2, r5, #3
 80102de:	4296      	cmp	r6, r2
 80102e0:	bf38      	it	cc
 80102e2:	2300      	movcc	r3, #0
 80102e4:	4423      	add	r3, r4
 80102e6:	e015      	b.n	8010314 <rshift+0x68>
 80102e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80102ec:	f1c1 0820 	rsb	r8, r1, #32
 80102f0:	40cf      	lsrs	r7, r1
 80102f2:	f105 0e04 	add.w	lr, r5, #4
 80102f6:	46a1      	mov	r9, r4
 80102f8:	4576      	cmp	r6, lr
 80102fa:	46f4      	mov	ip, lr
 80102fc:	d815      	bhi.n	801032a <rshift+0x7e>
 80102fe:	1a9b      	subs	r3, r3, r2
 8010300:	009a      	lsls	r2, r3, #2
 8010302:	3a04      	subs	r2, #4
 8010304:	3501      	adds	r5, #1
 8010306:	42ae      	cmp	r6, r5
 8010308:	bf38      	it	cc
 801030a:	2200      	movcc	r2, #0
 801030c:	18a3      	adds	r3, r4, r2
 801030e:	50a7      	str	r7, [r4, r2]
 8010310:	b107      	cbz	r7, 8010314 <rshift+0x68>
 8010312:	3304      	adds	r3, #4
 8010314:	1b1a      	subs	r2, r3, r4
 8010316:	42a3      	cmp	r3, r4
 8010318:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801031c:	bf08      	it	eq
 801031e:	2300      	moveq	r3, #0
 8010320:	6102      	str	r2, [r0, #16]
 8010322:	bf08      	it	eq
 8010324:	6143      	streq	r3, [r0, #20]
 8010326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801032a:	f8dc c000 	ldr.w	ip, [ip]
 801032e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010332:	ea4c 0707 	orr.w	r7, ip, r7
 8010336:	f849 7b04 	str.w	r7, [r9], #4
 801033a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801033e:	40cf      	lsrs	r7, r1
 8010340:	e7da      	b.n	80102f8 <rshift+0x4c>
 8010342:	f851 cb04 	ldr.w	ip, [r1], #4
 8010346:	f847 cf04 	str.w	ip, [r7, #4]!
 801034a:	e7c3      	b.n	80102d4 <rshift+0x28>
 801034c:	4623      	mov	r3, r4
 801034e:	e7e1      	b.n	8010314 <rshift+0x68>

08010350 <__hexdig_fun>:
 8010350:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010354:	2b09      	cmp	r3, #9
 8010356:	d802      	bhi.n	801035e <__hexdig_fun+0xe>
 8010358:	3820      	subs	r0, #32
 801035a:	b2c0      	uxtb	r0, r0
 801035c:	4770      	bx	lr
 801035e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010362:	2b05      	cmp	r3, #5
 8010364:	d801      	bhi.n	801036a <__hexdig_fun+0x1a>
 8010366:	3847      	subs	r0, #71	; 0x47
 8010368:	e7f7      	b.n	801035a <__hexdig_fun+0xa>
 801036a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801036e:	2b05      	cmp	r3, #5
 8010370:	d801      	bhi.n	8010376 <__hexdig_fun+0x26>
 8010372:	3827      	subs	r0, #39	; 0x27
 8010374:	e7f1      	b.n	801035a <__hexdig_fun+0xa>
 8010376:	2000      	movs	r0, #0
 8010378:	4770      	bx	lr
	...

0801037c <__gethex>:
 801037c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010380:	ed2d 8b02 	vpush	{d8}
 8010384:	b089      	sub	sp, #36	; 0x24
 8010386:	ee08 0a10 	vmov	s16, r0
 801038a:	9304      	str	r3, [sp, #16]
 801038c:	4bbc      	ldr	r3, [pc, #752]	; (8010680 <__gethex+0x304>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	9301      	str	r3, [sp, #4]
 8010392:	4618      	mov	r0, r3
 8010394:	468b      	mov	fp, r1
 8010396:	4690      	mov	r8, r2
 8010398:	f7ef ff1a 	bl	80001d0 <strlen>
 801039c:	9b01      	ldr	r3, [sp, #4]
 801039e:	f8db 2000 	ldr.w	r2, [fp]
 80103a2:	4403      	add	r3, r0
 80103a4:	4682      	mov	sl, r0
 80103a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80103aa:	9305      	str	r3, [sp, #20]
 80103ac:	1c93      	adds	r3, r2, #2
 80103ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80103b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80103b6:	32fe      	adds	r2, #254	; 0xfe
 80103b8:	18d1      	adds	r1, r2, r3
 80103ba:	461f      	mov	r7, r3
 80103bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80103c0:	9100      	str	r1, [sp, #0]
 80103c2:	2830      	cmp	r0, #48	; 0x30
 80103c4:	d0f8      	beq.n	80103b8 <__gethex+0x3c>
 80103c6:	f7ff ffc3 	bl	8010350 <__hexdig_fun>
 80103ca:	4604      	mov	r4, r0
 80103cc:	2800      	cmp	r0, #0
 80103ce:	d13a      	bne.n	8010446 <__gethex+0xca>
 80103d0:	9901      	ldr	r1, [sp, #4]
 80103d2:	4652      	mov	r2, sl
 80103d4:	4638      	mov	r0, r7
 80103d6:	f001 f9a7 	bl	8011728 <strncmp>
 80103da:	4605      	mov	r5, r0
 80103dc:	2800      	cmp	r0, #0
 80103de:	d168      	bne.n	80104b2 <__gethex+0x136>
 80103e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80103e4:	eb07 060a 	add.w	r6, r7, sl
 80103e8:	f7ff ffb2 	bl	8010350 <__hexdig_fun>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d062      	beq.n	80104b6 <__gethex+0x13a>
 80103f0:	4633      	mov	r3, r6
 80103f2:	7818      	ldrb	r0, [r3, #0]
 80103f4:	2830      	cmp	r0, #48	; 0x30
 80103f6:	461f      	mov	r7, r3
 80103f8:	f103 0301 	add.w	r3, r3, #1
 80103fc:	d0f9      	beq.n	80103f2 <__gethex+0x76>
 80103fe:	f7ff ffa7 	bl	8010350 <__hexdig_fun>
 8010402:	2301      	movs	r3, #1
 8010404:	fab0 f480 	clz	r4, r0
 8010408:	0964      	lsrs	r4, r4, #5
 801040a:	4635      	mov	r5, r6
 801040c:	9300      	str	r3, [sp, #0]
 801040e:	463a      	mov	r2, r7
 8010410:	4616      	mov	r6, r2
 8010412:	3201      	adds	r2, #1
 8010414:	7830      	ldrb	r0, [r6, #0]
 8010416:	f7ff ff9b 	bl	8010350 <__hexdig_fun>
 801041a:	2800      	cmp	r0, #0
 801041c:	d1f8      	bne.n	8010410 <__gethex+0x94>
 801041e:	9901      	ldr	r1, [sp, #4]
 8010420:	4652      	mov	r2, sl
 8010422:	4630      	mov	r0, r6
 8010424:	f001 f980 	bl	8011728 <strncmp>
 8010428:	b980      	cbnz	r0, 801044c <__gethex+0xd0>
 801042a:	b94d      	cbnz	r5, 8010440 <__gethex+0xc4>
 801042c:	eb06 050a 	add.w	r5, r6, sl
 8010430:	462a      	mov	r2, r5
 8010432:	4616      	mov	r6, r2
 8010434:	3201      	adds	r2, #1
 8010436:	7830      	ldrb	r0, [r6, #0]
 8010438:	f7ff ff8a 	bl	8010350 <__hexdig_fun>
 801043c:	2800      	cmp	r0, #0
 801043e:	d1f8      	bne.n	8010432 <__gethex+0xb6>
 8010440:	1bad      	subs	r5, r5, r6
 8010442:	00ad      	lsls	r5, r5, #2
 8010444:	e004      	b.n	8010450 <__gethex+0xd4>
 8010446:	2400      	movs	r4, #0
 8010448:	4625      	mov	r5, r4
 801044a:	e7e0      	b.n	801040e <__gethex+0x92>
 801044c:	2d00      	cmp	r5, #0
 801044e:	d1f7      	bne.n	8010440 <__gethex+0xc4>
 8010450:	7833      	ldrb	r3, [r6, #0]
 8010452:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010456:	2b50      	cmp	r3, #80	; 0x50
 8010458:	d13b      	bne.n	80104d2 <__gethex+0x156>
 801045a:	7873      	ldrb	r3, [r6, #1]
 801045c:	2b2b      	cmp	r3, #43	; 0x2b
 801045e:	d02c      	beq.n	80104ba <__gethex+0x13e>
 8010460:	2b2d      	cmp	r3, #45	; 0x2d
 8010462:	d02e      	beq.n	80104c2 <__gethex+0x146>
 8010464:	1c71      	adds	r1, r6, #1
 8010466:	f04f 0900 	mov.w	r9, #0
 801046a:	7808      	ldrb	r0, [r1, #0]
 801046c:	f7ff ff70 	bl	8010350 <__hexdig_fun>
 8010470:	1e43      	subs	r3, r0, #1
 8010472:	b2db      	uxtb	r3, r3
 8010474:	2b18      	cmp	r3, #24
 8010476:	d82c      	bhi.n	80104d2 <__gethex+0x156>
 8010478:	f1a0 0210 	sub.w	r2, r0, #16
 801047c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010480:	f7ff ff66 	bl	8010350 <__hexdig_fun>
 8010484:	1e43      	subs	r3, r0, #1
 8010486:	b2db      	uxtb	r3, r3
 8010488:	2b18      	cmp	r3, #24
 801048a:	d91d      	bls.n	80104c8 <__gethex+0x14c>
 801048c:	f1b9 0f00 	cmp.w	r9, #0
 8010490:	d000      	beq.n	8010494 <__gethex+0x118>
 8010492:	4252      	negs	r2, r2
 8010494:	4415      	add	r5, r2
 8010496:	f8cb 1000 	str.w	r1, [fp]
 801049a:	b1e4      	cbz	r4, 80104d6 <__gethex+0x15a>
 801049c:	9b00      	ldr	r3, [sp, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	bf14      	ite	ne
 80104a2:	2700      	movne	r7, #0
 80104a4:	2706      	moveq	r7, #6
 80104a6:	4638      	mov	r0, r7
 80104a8:	b009      	add	sp, #36	; 0x24
 80104aa:	ecbd 8b02 	vpop	{d8}
 80104ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104b2:	463e      	mov	r6, r7
 80104b4:	4625      	mov	r5, r4
 80104b6:	2401      	movs	r4, #1
 80104b8:	e7ca      	b.n	8010450 <__gethex+0xd4>
 80104ba:	f04f 0900 	mov.w	r9, #0
 80104be:	1cb1      	adds	r1, r6, #2
 80104c0:	e7d3      	b.n	801046a <__gethex+0xee>
 80104c2:	f04f 0901 	mov.w	r9, #1
 80104c6:	e7fa      	b.n	80104be <__gethex+0x142>
 80104c8:	230a      	movs	r3, #10
 80104ca:	fb03 0202 	mla	r2, r3, r2, r0
 80104ce:	3a10      	subs	r2, #16
 80104d0:	e7d4      	b.n	801047c <__gethex+0x100>
 80104d2:	4631      	mov	r1, r6
 80104d4:	e7df      	b.n	8010496 <__gethex+0x11a>
 80104d6:	1bf3      	subs	r3, r6, r7
 80104d8:	3b01      	subs	r3, #1
 80104da:	4621      	mov	r1, r4
 80104dc:	2b07      	cmp	r3, #7
 80104de:	dc0b      	bgt.n	80104f8 <__gethex+0x17c>
 80104e0:	ee18 0a10 	vmov	r0, s16
 80104e4:	f000 fa8e 	bl	8010a04 <_Balloc>
 80104e8:	4604      	mov	r4, r0
 80104ea:	b940      	cbnz	r0, 80104fe <__gethex+0x182>
 80104ec:	4b65      	ldr	r3, [pc, #404]	; (8010684 <__gethex+0x308>)
 80104ee:	4602      	mov	r2, r0
 80104f0:	21de      	movs	r1, #222	; 0xde
 80104f2:	4865      	ldr	r0, [pc, #404]	; (8010688 <__gethex+0x30c>)
 80104f4:	f001 f938 	bl	8011768 <__assert_func>
 80104f8:	3101      	adds	r1, #1
 80104fa:	105b      	asrs	r3, r3, #1
 80104fc:	e7ee      	b.n	80104dc <__gethex+0x160>
 80104fe:	f100 0914 	add.w	r9, r0, #20
 8010502:	f04f 0b00 	mov.w	fp, #0
 8010506:	f1ca 0301 	rsb	r3, sl, #1
 801050a:	f8cd 9008 	str.w	r9, [sp, #8]
 801050e:	f8cd b000 	str.w	fp, [sp]
 8010512:	9306      	str	r3, [sp, #24]
 8010514:	42b7      	cmp	r7, r6
 8010516:	d340      	bcc.n	801059a <__gethex+0x21e>
 8010518:	9802      	ldr	r0, [sp, #8]
 801051a:	9b00      	ldr	r3, [sp, #0]
 801051c:	f840 3b04 	str.w	r3, [r0], #4
 8010520:	eba0 0009 	sub.w	r0, r0, r9
 8010524:	1080      	asrs	r0, r0, #2
 8010526:	0146      	lsls	r6, r0, #5
 8010528:	6120      	str	r0, [r4, #16]
 801052a:	4618      	mov	r0, r3
 801052c:	f000 fb60 	bl	8010bf0 <__hi0bits>
 8010530:	1a30      	subs	r0, r6, r0
 8010532:	f8d8 6000 	ldr.w	r6, [r8]
 8010536:	42b0      	cmp	r0, r6
 8010538:	dd63      	ble.n	8010602 <__gethex+0x286>
 801053a:	1b87      	subs	r7, r0, r6
 801053c:	4639      	mov	r1, r7
 801053e:	4620      	mov	r0, r4
 8010540:	f000 fefa 	bl	8011338 <__any_on>
 8010544:	4682      	mov	sl, r0
 8010546:	b1a8      	cbz	r0, 8010574 <__gethex+0x1f8>
 8010548:	1e7b      	subs	r3, r7, #1
 801054a:	1159      	asrs	r1, r3, #5
 801054c:	f003 021f 	and.w	r2, r3, #31
 8010550:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010554:	f04f 0a01 	mov.w	sl, #1
 8010558:	fa0a f202 	lsl.w	r2, sl, r2
 801055c:	420a      	tst	r2, r1
 801055e:	d009      	beq.n	8010574 <__gethex+0x1f8>
 8010560:	4553      	cmp	r3, sl
 8010562:	dd05      	ble.n	8010570 <__gethex+0x1f4>
 8010564:	1eb9      	subs	r1, r7, #2
 8010566:	4620      	mov	r0, r4
 8010568:	f000 fee6 	bl	8011338 <__any_on>
 801056c:	2800      	cmp	r0, #0
 801056e:	d145      	bne.n	80105fc <__gethex+0x280>
 8010570:	f04f 0a02 	mov.w	sl, #2
 8010574:	4639      	mov	r1, r7
 8010576:	4620      	mov	r0, r4
 8010578:	f7ff fe98 	bl	80102ac <rshift>
 801057c:	443d      	add	r5, r7
 801057e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010582:	42ab      	cmp	r3, r5
 8010584:	da4c      	bge.n	8010620 <__gethex+0x2a4>
 8010586:	ee18 0a10 	vmov	r0, s16
 801058a:	4621      	mov	r1, r4
 801058c:	f000 fa7a 	bl	8010a84 <_Bfree>
 8010590:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010592:	2300      	movs	r3, #0
 8010594:	6013      	str	r3, [r2, #0]
 8010596:	27a3      	movs	r7, #163	; 0xa3
 8010598:	e785      	b.n	80104a6 <__gethex+0x12a>
 801059a:	1e73      	subs	r3, r6, #1
 801059c:	9a05      	ldr	r2, [sp, #20]
 801059e:	9303      	str	r3, [sp, #12]
 80105a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80105a4:	4293      	cmp	r3, r2
 80105a6:	d019      	beq.n	80105dc <__gethex+0x260>
 80105a8:	f1bb 0f20 	cmp.w	fp, #32
 80105ac:	d107      	bne.n	80105be <__gethex+0x242>
 80105ae:	9b02      	ldr	r3, [sp, #8]
 80105b0:	9a00      	ldr	r2, [sp, #0]
 80105b2:	f843 2b04 	str.w	r2, [r3], #4
 80105b6:	9302      	str	r3, [sp, #8]
 80105b8:	2300      	movs	r3, #0
 80105ba:	9300      	str	r3, [sp, #0]
 80105bc:	469b      	mov	fp, r3
 80105be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80105c2:	f7ff fec5 	bl	8010350 <__hexdig_fun>
 80105c6:	9b00      	ldr	r3, [sp, #0]
 80105c8:	f000 000f 	and.w	r0, r0, #15
 80105cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80105d0:	4303      	orrs	r3, r0
 80105d2:	9300      	str	r3, [sp, #0]
 80105d4:	f10b 0b04 	add.w	fp, fp, #4
 80105d8:	9b03      	ldr	r3, [sp, #12]
 80105da:	e00d      	b.n	80105f8 <__gethex+0x27c>
 80105dc:	9b03      	ldr	r3, [sp, #12]
 80105de:	9a06      	ldr	r2, [sp, #24]
 80105e0:	4413      	add	r3, r2
 80105e2:	42bb      	cmp	r3, r7
 80105e4:	d3e0      	bcc.n	80105a8 <__gethex+0x22c>
 80105e6:	4618      	mov	r0, r3
 80105e8:	9901      	ldr	r1, [sp, #4]
 80105ea:	9307      	str	r3, [sp, #28]
 80105ec:	4652      	mov	r2, sl
 80105ee:	f001 f89b 	bl	8011728 <strncmp>
 80105f2:	9b07      	ldr	r3, [sp, #28]
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d1d7      	bne.n	80105a8 <__gethex+0x22c>
 80105f8:	461e      	mov	r6, r3
 80105fa:	e78b      	b.n	8010514 <__gethex+0x198>
 80105fc:	f04f 0a03 	mov.w	sl, #3
 8010600:	e7b8      	b.n	8010574 <__gethex+0x1f8>
 8010602:	da0a      	bge.n	801061a <__gethex+0x29e>
 8010604:	1a37      	subs	r7, r6, r0
 8010606:	4621      	mov	r1, r4
 8010608:	ee18 0a10 	vmov	r0, s16
 801060c:	463a      	mov	r2, r7
 801060e:	f000 fc55 	bl	8010ebc <__lshift>
 8010612:	1bed      	subs	r5, r5, r7
 8010614:	4604      	mov	r4, r0
 8010616:	f100 0914 	add.w	r9, r0, #20
 801061a:	f04f 0a00 	mov.w	sl, #0
 801061e:	e7ae      	b.n	801057e <__gethex+0x202>
 8010620:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010624:	42a8      	cmp	r0, r5
 8010626:	dd72      	ble.n	801070e <__gethex+0x392>
 8010628:	1b45      	subs	r5, r0, r5
 801062a:	42ae      	cmp	r6, r5
 801062c:	dc36      	bgt.n	801069c <__gethex+0x320>
 801062e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010632:	2b02      	cmp	r3, #2
 8010634:	d02a      	beq.n	801068c <__gethex+0x310>
 8010636:	2b03      	cmp	r3, #3
 8010638:	d02c      	beq.n	8010694 <__gethex+0x318>
 801063a:	2b01      	cmp	r3, #1
 801063c:	d115      	bne.n	801066a <__gethex+0x2ee>
 801063e:	42ae      	cmp	r6, r5
 8010640:	d113      	bne.n	801066a <__gethex+0x2ee>
 8010642:	2e01      	cmp	r6, #1
 8010644:	d10b      	bne.n	801065e <__gethex+0x2e2>
 8010646:	9a04      	ldr	r2, [sp, #16]
 8010648:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801064c:	6013      	str	r3, [r2, #0]
 801064e:	2301      	movs	r3, #1
 8010650:	6123      	str	r3, [r4, #16]
 8010652:	f8c9 3000 	str.w	r3, [r9]
 8010656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010658:	2762      	movs	r7, #98	; 0x62
 801065a:	601c      	str	r4, [r3, #0]
 801065c:	e723      	b.n	80104a6 <__gethex+0x12a>
 801065e:	1e71      	subs	r1, r6, #1
 8010660:	4620      	mov	r0, r4
 8010662:	f000 fe69 	bl	8011338 <__any_on>
 8010666:	2800      	cmp	r0, #0
 8010668:	d1ed      	bne.n	8010646 <__gethex+0x2ca>
 801066a:	ee18 0a10 	vmov	r0, s16
 801066e:	4621      	mov	r1, r4
 8010670:	f000 fa08 	bl	8010a84 <_Bfree>
 8010674:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010676:	2300      	movs	r3, #0
 8010678:	6013      	str	r3, [r2, #0]
 801067a:	2750      	movs	r7, #80	; 0x50
 801067c:	e713      	b.n	80104a6 <__gethex+0x12a>
 801067e:	bf00      	nop
 8010680:	08013b88 	.word	0x08013b88
 8010684:	08013b0c 	.word	0x08013b0c
 8010688:	08013b1d 	.word	0x08013b1d
 801068c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801068e:	2b00      	cmp	r3, #0
 8010690:	d1eb      	bne.n	801066a <__gethex+0x2ee>
 8010692:	e7d8      	b.n	8010646 <__gethex+0x2ca>
 8010694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010696:	2b00      	cmp	r3, #0
 8010698:	d1d5      	bne.n	8010646 <__gethex+0x2ca>
 801069a:	e7e6      	b.n	801066a <__gethex+0x2ee>
 801069c:	1e6f      	subs	r7, r5, #1
 801069e:	f1ba 0f00 	cmp.w	sl, #0
 80106a2:	d131      	bne.n	8010708 <__gethex+0x38c>
 80106a4:	b127      	cbz	r7, 80106b0 <__gethex+0x334>
 80106a6:	4639      	mov	r1, r7
 80106a8:	4620      	mov	r0, r4
 80106aa:	f000 fe45 	bl	8011338 <__any_on>
 80106ae:	4682      	mov	sl, r0
 80106b0:	117b      	asrs	r3, r7, #5
 80106b2:	2101      	movs	r1, #1
 80106b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80106b8:	f007 071f 	and.w	r7, r7, #31
 80106bc:	fa01 f707 	lsl.w	r7, r1, r7
 80106c0:	421f      	tst	r7, r3
 80106c2:	4629      	mov	r1, r5
 80106c4:	4620      	mov	r0, r4
 80106c6:	bf18      	it	ne
 80106c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80106cc:	1b76      	subs	r6, r6, r5
 80106ce:	f7ff fded 	bl	80102ac <rshift>
 80106d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80106d6:	2702      	movs	r7, #2
 80106d8:	f1ba 0f00 	cmp.w	sl, #0
 80106dc:	d048      	beq.n	8010770 <__gethex+0x3f4>
 80106de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80106e2:	2b02      	cmp	r3, #2
 80106e4:	d015      	beq.n	8010712 <__gethex+0x396>
 80106e6:	2b03      	cmp	r3, #3
 80106e8:	d017      	beq.n	801071a <__gethex+0x39e>
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d109      	bne.n	8010702 <__gethex+0x386>
 80106ee:	f01a 0f02 	tst.w	sl, #2
 80106f2:	d006      	beq.n	8010702 <__gethex+0x386>
 80106f4:	f8d9 0000 	ldr.w	r0, [r9]
 80106f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80106fc:	f01a 0f01 	tst.w	sl, #1
 8010700:	d10e      	bne.n	8010720 <__gethex+0x3a4>
 8010702:	f047 0710 	orr.w	r7, r7, #16
 8010706:	e033      	b.n	8010770 <__gethex+0x3f4>
 8010708:	f04f 0a01 	mov.w	sl, #1
 801070c:	e7d0      	b.n	80106b0 <__gethex+0x334>
 801070e:	2701      	movs	r7, #1
 8010710:	e7e2      	b.n	80106d8 <__gethex+0x35c>
 8010712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010714:	f1c3 0301 	rsb	r3, r3, #1
 8010718:	9315      	str	r3, [sp, #84]	; 0x54
 801071a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801071c:	2b00      	cmp	r3, #0
 801071e:	d0f0      	beq.n	8010702 <__gethex+0x386>
 8010720:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010724:	f104 0314 	add.w	r3, r4, #20
 8010728:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801072c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010730:	f04f 0c00 	mov.w	ip, #0
 8010734:	4618      	mov	r0, r3
 8010736:	f853 2b04 	ldr.w	r2, [r3], #4
 801073a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801073e:	d01c      	beq.n	801077a <__gethex+0x3fe>
 8010740:	3201      	adds	r2, #1
 8010742:	6002      	str	r2, [r0, #0]
 8010744:	2f02      	cmp	r7, #2
 8010746:	f104 0314 	add.w	r3, r4, #20
 801074a:	d13f      	bne.n	80107cc <__gethex+0x450>
 801074c:	f8d8 2000 	ldr.w	r2, [r8]
 8010750:	3a01      	subs	r2, #1
 8010752:	42b2      	cmp	r2, r6
 8010754:	d10a      	bne.n	801076c <__gethex+0x3f0>
 8010756:	1171      	asrs	r1, r6, #5
 8010758:	2201      	movs	r2, #1
 801075a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801075e:	f006 061f 	and.w	r6, r6, #31
 8010762:	fa02 f606 	lsl.w	r6, r2, r6
 8010766:	421e      	tst	r6, r3
 8010768:	bf18      	it	ne
 801076a:	4617      	movne	r7, r2
 801076c:	f047 0720 	orr.w	r7, r7, #32
 8010770:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010772:	601c      	str	r4, [r3, #0]
 8010774:	9b04      	ldr	r3, [sp, #16]
 8010776:	601d      	str	r5, [r3, #0]
 8010778:	e695      	b.n	80104a6 <__gethex+0x12a>
 801077a:	4299      	cmp	r1, r3
 801077c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010780:	d8d8      	bhi.n	8010734 <__gethex+0x3b8>
 8010782:	68a3      	ldr	r3, [r4, #8]
 8010784:	459b      	cmp	fp, r3
 8010786:	db19      	blt.n	80107bc <__gethex+0x440>
 8010788:	6861      	ldr	r1, [r4, #4]
 801078a:	ee18 0a10 	vmov	r0, s16
 801078e:	3101      	adds	r1, #1
 8010790:	f000 f938 	bl	8010a04 <_Balloc>
 8010794:	4681      	mov	r9, r0
 8010796:	b918      	cbnz	r0, 80107a0 <__gethex+0x424>
 8010798:	4b1a      	ldr	r3, [pc, #104]	; (8010804 <__gethex+0x488>)
 801079a:	4602      	mov	r2, r0
 801079c:	2184      	movs	r1, #132	; 0x84
 801079e:	e6a8      	b.n	80104f2 <__gethex+0x176>
 80107a0:	6922      	ldr	r2, [r4, #16]
 80107a2:	3202      	adds	r2, #2
 80107a4:	f104 010c 	add.w	r1, r4, #12
 80107a8:	0092      	lsls	r2, r2, #2
 80107aa:	300c      	adds	r0, #12
 80107ac:	f7fc ffa1 	bl	800d6f2 <memcpy>
 80107b0:	4621      	mov	r1, r4
 80107b2:	ee18 0a10 	vmov	r0, s16
 80107b6:	f000 f965 	bl	8010a84 <_Bfree>
 80107ba:	464c      	mov	r4, r9
 80107bc:	6923      	ldr	r3, [r4, #16]
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80107c4:	6122      	str	r2, [r4, #16]
 80107c6:	2201      	movs	r2, #1
 80107c8:	615a      	str	r2, [r3, #20]
 80107ca:	e7bb      	b.n	8010744 <__gethex+0x3c8>
 80107cc:	6922      	ldr	r2, [r4, #16]
 80107ce:	455a      	cmp	r2, fp
 80107d0:	dd0b      	ble.n	80107ea <__gethex+0x46e>
 80107d2:	2101      	movs	r1, #1
 80107d4:	4620      	mov	r0, r4
 80107d6:	f7ff fd69 	bl	80102ac <rshift>
 80107da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80107de:	3501      	adds	r5, #1
 80107e0:	42ab      	cmp	r3, r5
 80107e2:	f6ff aed0 	blt.w	8010586 <__gethex+0x20a>
 80107e6:	2701      	movs	r7, #1
 80107e8:	e7c0      	b.n	801076c <__gethex+0x3f0>
 80107ea:	f016 061f 	ands.w	r6, r6, #31
 80107ee:	d0fa      	beq.n	80107e6 <__gethex+0x46a>
 80107f0:	449a      	add	sl, r3
 80107f2:	f1c6 0620 	rsb	r6, r6, #32
 80107f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80107fa:	f000 f9f9 	bl	8010bf0 <__hi0bits>
 80107fe:	42b0      	cmp	r0, r6
 8010800:	dbe7      	blt.n	80107d2 <__gethex+0x456>
 8010802:	e7f0      	b.n	80107e6 <__gethex+0x46a>
 8010804:	08013b0c 	.word	0x08013b0c

08010808 <L_shift>:
 8010808:	f1c2 0208 	rsb	r2, r2, #8
 801080c:	0092      	lsls	r2, r2, #2
 801080e:	b570      	push	{r4, r5, r6, lr}
 8010810:	f1c2 0620 	rsb	r6, r2, #32
 8010814:	6843      	ldr	r3, [r0, #4]
 8010816:	6804      	ldr	r4, [r0, #0]
 8010818:	fa03 f506 	lsl.w	r5, r3, r6
 801081c:	432c      	orrs	r4, r5
 801081e:	40d3      	lsrs	r3, r2
 8010820:	6004      	str	r4, [r0, #0]
 8010822:	f840 3f04 	str.w	r3, [r0, #4]!
 8010826:	4288      	cmp	r0, r1
 8010828:	d3f4      	bcc.n	8010814 <L_shift+0xc>
 801082a:	bd70      	pop	{r4, r5, r6, pc}

0801082c <__match>:
 801082c:	b530      	push	{r4, r5, lr}
 801082e:	6803      	ldr	r3, [r0, #0]
 8010830:	3301      	adds	r3, #1
 8010832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010836:	b914      	cbnz	r4, 801083e <__match+0x12>
 8010838:	6003      	str	r3, [r0, #0]
 801083a:	2001      	movs	r0, #1
 801083c:	bd30      	pop	{r4, r5, pc}
 801083e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010842:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010846:	2d19      	cmp	r5, #25
 8010848:	bf98      	it	ls
 801084a:	3220      	addls	r2, #32
 801084c:	42a2      	cmp	r2, r4
 801084e:	d0f0      	beq.n	8010832 <__match+0x6>
 8010850:	2000      	movs	r0, #0
 8010852:	e7f3      	b.n	801083c <__match+0x10>

08010854 <__hexnan>:
 8010854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010858:	680b      	ldr	r3, [r1, #0]
 801085a:	6801      	ldr	r1, [r0, #0]
 801085c:	115e      	asrs	r6, r3, #5
 801085e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010862:	f013 031f 	ands.w	r3, r3, #31
 8010866:	b087      	sub	sp, #28
 8010868:	bf18      	it	ne
 801086a:	3604      	addne	r6, #4
 801086c:	2500      	movs	r5, #0
 801086e:	1f37      	subs	r7, r6, #4
 8010870:	4682      	mov	sl, r0
 8010872:	4690      	mov	r8, r2
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	f846 5c04 	str.w	r5, [r6, #-4]
 801087a:	46b9      	mov	r9, r7
 801087c:	463c      	mov	r4, r7
 801087e:	9502      	str	r5, [sp, #8]
 8010880:	46ab      	mov	fp, r5
 8010882:	784a      	ldrb	r2, [r1, #1]
 8010884:	1c4b      	adds	r3, r1, #1
 8010886:	9303      	str	r3, [sp, #12]
 8010888:	b342      	cbz	r2, 80108dc <__hexnan+0x88>
 801088a:	4610      	mov	r0, r2
 801088c:	9105      	str	r1, [sp, #20]
 801088e:	9204      	str	r2, [sp, #16]
 8010890:	f7ff fd5e 	bl	8010350 <__hexdig_fun>
 8010894:	2800      	cmp	r0, #0
 8010896:	d14f      	bne.n	8010938 <__hexnan+0xe4>
 8010898:	9a04      	ldr	r2, [sp, #16]
 801089a:	9905      	ldr	r1, [sp, #20]
 801089c:	2a20      	cmp	r2, #32
 801089e:	d818      	bhi.n	80108d2 <__hexnan+0x7e>
 80108a0:	9b02      	ldr	r3, [sp, #8]
 80108a2:	459b      	cmp	fp, r3
 80108a4:	dd13      	ble.n	80108ce <__hexnan+0x7a>
 80108a6:	454c      	cmp	r4, r9
 80108a8:	d206      	bcs.n	80108b8 <__hexnan+0x64>
 80108aa:	2d07      	cmp	r5, #7
 80108ac:	dc04      	bgt.n	80108b8 <__hexnan+0x64>
 80108ae:	462a      	mov	r2, r5
 80108b0:	4649      	mov	r1, r9
 80108b2:	4620      	mov	r0, r4
 80108b4:	f7ff ffa8 	bl	8010808 <L_shift>
 80108b8:	4544      	cmp	r4, r8
 80108ba:	d950      	bls.n	801095e <__hexnan+0x10a>
 80108bc:	2300      	movs	r3, #0
 80108be:	f1a4 0904 	sub.w	r9, r4, #4
 80108c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80108c6:	f8cd b008 	str.w	fp, [sp, #8]
 80108ca:	464c      	mov	r4, r9
 80108cc:	461d      	mov	r5, r3
 80108ce:	9903      	ldr	r1, [sp, #12]
 80108d0:	e7d7      	b.n	8010882 <__hexnan+0x2e>
 80108d2:	2a29      	cmp	r2, #41	; 0x29
 80108d4:	d156      	bne.n	8010984 <__hexnan+0x130>
 80108d6:	3102      	adds	r1, #2
 80108d8:	f8ca 1000 	str.w	r1, [sl]
 80108dc:	f1bb 0f00 	cmp.w	fp, #0
 80108e0:	d050      	beq.n	8010984 <__hexnan+0x130>
 80108e2:	454c      	cmp	r4, r9
 80108e4:	d206      	bcs.n	80108f4 <__hexnan+0xa0>
 80108e6:	2d07      	cmp	r5, #7
 80108e8:	dc04      	bgt.n	80108f4 <__hexnan+0xa0>
 80108ea:	462a      	mov	r2, r5
 80108ec:	4649      	mov	r1, r9
 80108ee:	4620      	mov	r0, r4
 80108f0:	f7ff ff8a 	bl	8010808 <L_shift>
 80108f4:	4544      	cmp	r4, r8
 80108f6:	d934      	bls.n	8010962 <__hexnan+0x10e>
 80108f8:	f1a8 0204 	sub.w	r2, r8, #4
 80108fc:	4623      	mov	r3, r4
 80108fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8010902:	f842 1f04 	str.w	r1, [r2, #4]!
 8010906:	429f      	cmp	r7, r3
 8010908:	d2f9      	bcs.n	80108fe <__hexnan+0xaa>
 801090a:	1b3b      	subs	r3, r7, r4
 801090c:	f023 0303 	bic.w	r3, r3, #3
 8010910:	3304      	adds	r3, #4
 8010912:	3401      	adds	r4, #1
 8010914:	3e03      	subs	r6, #3
 8010916:	42b4      	cmp	r4, r6
 8010918:	bf88      	it	hi
 801091a:	2304      	movhi	r3, #4
 801091c:	4443      	add	r3, r8
 801091e:	2200      	movs	r2, #0
 8010920:	f843 2b04 	str.w	r2, [r3], #4
 8010924:	429f      	cmp	r7, r3
 8010926:	d2fb      	bcs.n	8010920 <__hexnan+0xcc>
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	b91b      	cbnz	r3, 8010934 <__hexnan+0xe0>
 801092c:	4547      	cmp	r7, r8
 801092e:	d127      	bne.n	8010980 <__hexnan+0x12c>
 8010930:	2301      	movs	r3, #1
 8010932:	603b      	str	r3, [r7, #0]
 8010934:	2005      	movs	r0, #5
 8010936:	e026      	b.n	8010986 <__hexnan+0x132>
 8010938:	3501      	adds	r5, #1
 801093a:	2d08      	cmp	r5, #8
 801093c:	f10b 0b01 	add.w	fp, fp, #1
 8010940:	dd06      	ble.n	8010950 <__hexnan+0xfc>
 8010942:	4544      	cmp	r4, r8
 8010944:	d9c3      	bls.n	80108ce <__hexnan+0x7a>
 8010946:	2300      	movs	r3, #0
 8010948:	f844 3c04 	str.w	r3, [r4, #-4]
 801094c:	2501      	movs	r5, #1
 801094e:	3c04      	subs	r4, #4
 8010950:	6822      	ldr	r2, [r4, #0]
 8010952:	f000 000f 	and.w	r0, r0, #15
 8010956:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801095a:	6022      	str	r2, [r4, #0]
 801095c:	e7b7      	b.n	80108ce <__hexnan+0x7a>
 801095e:	2508      	movs	r5, #8
 8010960:	e7b5      	b.n	80108ce <__hexnan+0x7a>
 8010962:	9b01      	ldr	r3, [sp, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d0df      	beq.n	8010928 <__hexnan+0xd4>
 8010968:	f04f 32ff 	mov.w	r2, #4294967295
 801096c:	f1c3 0320 	rsb	r3, r3, #32
 8010970:	fa22 f303 	lsr.w	r3, r2, r3
 8010974:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010978:	401a      	ands	r2, r3
 801097a:	f846 2c04 	str.w	r2, [r6, #-4]
 801097e:	e7d3      	b.n	8010928 <__hexnan+0xd4>
 8010980:	3f04      	subs	r7, #4
 8010982:	e7d1      	b.n	8010928 <__hexnan+0xd4>
 8010984:	2004      	movs	r0, #4
 8010986:	b007      	add	sp, #28
 8010988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801098c <_localeconv_r>:
 801098c:	4800      	ldr	r0, [pc, #0]	; (8010990 <_localeconv_r+0x4>)
 801098e:	4770      	bx	lr
 8010990:	20000198 	.word	0x20000198

08010994 <_lseek_r>:
 8010994:	b538      	push	{r3, r4, r5, lr}
 8010996:	4d07      	ldr	r5, [pc, #28]	; (80109b4 <_lseek_r+0x20>)
 8010998:	4604      	mov	r4, r0
 801099a:	4608      	mov	r0, r1
 801099c:	4611      	mov	r1, r2
 801099e:	2200      	movs	r2, #0
 80109a0:	602a      	str	r2, [r5, #0]
 80109a2:	461a      	mov	r2, r3
 80109a4:	f7f3 fd0c 	bl	80043c0 <_lseek>
 80109a8:	1c43      	adds	r3, r0, #1
 80109aa:	d102      	bne.n	80109b2 <_lseek_r+0x1e>
 80109ac:	682b      	ldr	r3, [r5, #0]
 80109ae:	b103      	cbz	r3, 80109b2 <_lseek_r+0x1e>
 80109b0:	6023      	str	r3, [r4, #0]
 80109b2:	bd38      	pop	{r3, r4, r5, pc}
 80109b4:	200063b0 	.word	0x200063b0

080109b8 <malloc>:
 80109b8:	4b02      	ldr	r3, [pc, #8]	; (80109c4 <malloc+0xc>)
 80109ba:	4601      	mov	r1, r0
 80109bc:	6818      	ldr	r0, [r3, #0]
 80109be:	f7fc beaf 	b.w	800d720 <_malloc_r>
 80109c2:	bf00      	nop
 80109c4:	20000040 	.word	0x20000040

080109c8 <__ascii_mbtowc>:
 80109c8:	b082      	sub	sp, #8
 80109ca:	b901      	cbnz	r1, 80109ce <__ascii_mbtowc+0x6>
 80109cc:	a901      	add	r1, sp, #4
 80109ce:	b142      	cbz	r2, 80109e2 <__ascii_mbtowc+0x1a>
 80109d0:	b14b      	cbz	r3, 80109e6 <__ascii_mbtowc+0x1e>
 80109d2:	7813      	ldrb	r3, [r2, #0]
 80109d4:	600b      	str	r3, [r1, #0]
 80109d6:	7812      	ldrb	r2, [r2, #0]
 80109d8:	1e10      	subs	r0, r2, #0
 80109da:	bf18      	it	ne
 80109dc:	2001      	movne	r0, #1
 80109de:	b002      	add	sp, #8
 80109e0:	4770      	bx	lr
 80109e2:	4610      	mov	r0, r2
 80109e4:	e7fb      	b.n	80109de <__ascii_mbtowc+0x16>
 80109e6:	f06f 0001 	mvn.w	r0, #1
 80109ea:	e7f8      	b.n	80109de <__ascii_mbtowc+0x16>

080109ec <__malloc_lock>:
 80109ec:	4801      	ldr	r0, [pc, #4]	; (80109f4 <__malloc_lock+0x8>)
 80109ee:	f7fc be7e 	b.w	800d6ee <__retarget_lock_acquire_recursive>
 80109f2:	bf00      	nop
 80109f4:	200063a8 	.word	0x200063a8

080109f8 <__malloc_unlock>:
 80109f8:	4801      	ldr	r0, [pc, #4]	; (8010a00 <__malloc_unlock+0x8>)
 80109fa:	f7fc be79 	b.w	800d6f0 <__retarget_lock_release_recursive>
 80109fe:	bf00      	nop
 8010a00:	200063a8 	.word	0x200063a8

08010a04 <_Balloc>:
 8010a04:	b570      	push	{r4, r5, r6, lr}
 8010a06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a08:	4604      	mov	r4, r0
 8010a0a:	460d      	mov	r5, r1
 8010a0c:	b976      	cbnz	r6, 8010a2c <_Balloc+0x28>
 8010a0e:	2010      	movs	r0, #16
 8010a10:	f7ff ffd2 	bl	80109b8 <malloc>
 8010a14:	4602      	mov	r2, r0
 8010a16:	6260      	str	r0, [r4, #36]	; 0x24
 8010a18:	b920      	cbnz	r0, 8010a24 <_Balloc+0x20>
 8010a1a:	4b18      	ldr	r3, [pc, #96]	; (8010a7c <_Balloc+0x78>)
 8010a1c:	4818      	ldr	r0, [pc, #96]	; (8010a80 <_Balloc+0x7c>)
 8010a1e:	2166      	movs	r1, #102	; 0x66
 8010a20:	f000 fea2 	bl	8011768 <__assert_func>
 8010a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a28:	6006      	str	r6, [r0, #0]
 8010a2a:	60c6      	str	r6, [r0, #12]
 8010a2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a2e:	68f3      	ldr	r3, [r6, #12]
 8010a30:	b183      	cbz	r3, 8010a54 <_Balloc+0x50>
 8010a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a3a:	b9b8      	cbnz	r0, 8010a6c <_Balloc+0x68>
 8010a3c:	2101      	movs	r1, #1
 8010a3e:	fa01 f605 	lsl.w	r6, r1, r5
 8010a42:	1d72      	adds	r2, r6, #5
 8010a44:	0092      	lsls	r2, r2, #2
 8010a46:	4620      	mov	r0, r4
 8010a48:	f000 fc97 	bl	801137a <_calloc_r>
 8010a4c:	b160      	cbz	r0, 8010a68 <_Balloc+0x64>
 8010a4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a52:	e00e      	b.n	8010a72 <_Balloc+0x6e>
 8010a54:	2221      	movs	r2, #33	; 0x21
 8010a56:	2104      	movs	r1, #4
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f000 fc8e 	bl	801137a <_calloc_r>
 8010a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a60:	60f0      	str	r0, [r6, #12]
 8010a62:	68db      	ldr	r3, [r3, #12]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d1e4      	bne.n	8010a32 <_Balloc+0x2e>
 8010a68:	2000      	movs	r0, #0
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}
 8010a6c:	6802      	ldr	r2, [r0, #0]
 8010a6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010a72:	2300      	movs	r3, #0
 8010a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a78:	e7f7      	b.n	8010a6a <_Balloc+0x66>
 8010a7a:	bf00      	nop
 8010a7c:	08013a96 	.word	0x08013a96
 8010a80:	08013b9c 	.word	0x08013b9c

08010a84 <_Bfree>:
 8010a84:	b570      	push	{r4, r5, r6, lr}
 8010a86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a88:	4605      	mov	r5, r0
 8010a8a:	460c      	mov	r4, r1
 8010a8c:	b976      	cbnz	r6, 8010aac <_Bfree+0x28>
 8010a8e:	2010      	movs	r0, #16
 8010a90:	f7ff ff92 	bl	80109b8 <malloc>
 8010a94:	4602      	mov	r2, r0
 8010a96:	6268      	str	r0, [r5, #36]	; 0x24
 8010a98:	b920      	cbnz	r0, 8010aa4 <_Bfree+0x20>
 8010a9a:	4b09      	ldr	r3, [pc, #36]	; (8010ac0 <_Bfree+0x3c>)
 8010a9c:	4809      	ldr	r0, [pc, #36]	; (8010ac4 <_Bfree+0x40>)
 8010a9e:	218a      	movs	r1, #138	; 0x8a
 8010aa0:	f000 fe62 	bl	8011768 <__assert_func>
 8010aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010aa8:	6006      	str	r6, [r0, #0]
 8010aaa:	60c6      	str	r6, [r0, #12]
 8010aac:	b13c      	cbz	r4, 8010abe <_Bfree+0x3a>
 8010aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ab0:	6862      	ldr	r2, [r4, #4]
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ab8:	6021      	str	r1, [r4, #0]
 8010aba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010abe:	bd70      	pop	{r4, r5, r6, pc}
 8010ac0:	08013a96 	.word	0x08013a96
 8010ac4:	08013b9c 	.word	0x08013b9c

08010ac8 <__multadd>:
 8010ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010acc:	690e      	ldr	r6, [r1, #16]
 8010ace:	4607      	mov	r7, r0
 8010ad0:	4698      	mov	r8, r3
 8010ad2:	460c      	mov	r4, r1
 8010ad4:	f101 0014 	add.w	r0, r1, #20
 8010ad8:	2300      	movs	r3, #0
 8010ada:	6805      	ldr	r5, [r0, #0]
 8010adc:	b2a9      	uxth	r1, r5
 8010ade:	fb02 8101 	mla	r1, r2, r1, r8
 8010ae2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010ae6:	0c2d      	lsrs	r5, r5, #16
 8010ae8:	fb02 c505 	mla	r5, r2, r5, ip
 8010aec:	b289      	uxth	r1, r1
 8010aee:	3301      	adds	r3, #1
 8010af0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010af4:	429e      	cmp	r6, r3
 8010af6:	f840 1b04 	str.w	r1, [r0], #4
 8010afa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010afe:	dcec      	bgt.n	8010ada <__multadd+0x12>
 8010b00:	f1b8 0f00 	cmp.w	r8, #0
 8010b04:	d022      	beq.n	8010b4c <__multadd+0x84>
 8010b06:	68a3      	ldr	r3, [r4, #8]
 8010b08:	42b3      	cmp	r3, r6
 8010b0a:	dc19      	bgt.n	8010b40 <__multadd+0x78>
 8010b0c:	6861      	ldr	r1, [r4, #4]
 8010b0e:	4638      	mov	r0, r7
 8010b10:	3101      	adds	r1, #1
 8010b12:	f7ff ff77 	bl	8010a04 <_Balloc>
 8010b16:	4605      	mov	r5, r0
 8010b18:	b928      	cbnz	r0, 8010b26 <__multadd+0x5e>
 8010b1a:	4602      	mov	r2, r0
 8010b1c:	4b0d      	ldr	r3, [pc, #52]	; (8010b54 <__multadd+0x8c>)
 8010b1e:	480e      	ldr	r0, [pc, #56]	; (8010b58 <__multadd+0x90>)
 8010b20:	21b5      	movs	r1, #181	; 0xb5
 8010b22:	f000 fe21 	bl	8011768 <__assert_func>
 8010b26:	6922      	ldr	r2, [r4, #16]
 8010b28:	3202      	adds	r2, #2
 8010b2a:	f104 010c 	add.w	r1, r4, #12
 8010b2e:	0092      	lsls	r2, r2, #2
 8010b30:	300c      	adds	r0, #12
 8010b32:	f7fc fdde 	bl	800d6f2 <memcpy>
 8010b36:	4621      	mov	r1, r4
 8010b38:	4638      	mov	r0, r7
 8010b3a:	f7ff ffa3 	bl	8010a84 <_Bfree>
 8010b3e:	462c      	mov	r4, r5
 8010b40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010b44:	3601      	adds	r6, #1
 8010b46:	f8c3 8014 	str.w	r8, [r3, #20]
 8010b4a:	6126      	str	r6, [r4, #16]
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b52:	bf00      	nop
 8010b54:	08013b0c 	.word	0x08013b0c
 8010b58:	08013b9c 	.word	0x08013b9c

08010b5c <__s2b>:
 8010b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b60:	460c      	mov	r4, r1
 8010b62:	4615      	mov	r5, r2
 8010b64:	461f      	mov	r7, r3
 8010b66:	2209      	movs	r2, #9
 8010b68:	3308      	adds	r3, #8
 8010b6a:	4606      	mov	r6, r0
 8010b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b70:	2100      	movs	r1, #0
 8010b72:	2201      	movs	r2, #1
 8010b74:	429a      	cmp	r2, r3
 8010b76:	db09      	blt.n	8010b8c <__s2b+0x30>
 8010b78:	4630      	mov	r0, r6
 8010b7a:	f7ff ff43 	bl	8010a04 <_Balloc>
 8010b7e:	b940      	cbnz	r0, 8010b92 <__s2b+0x36>
 8010b80:	4602      	mov	r2, r0
 8010b82:	4b19      	ldr	r3, [pc, #100]	; (8010be8 <__s2b+0x8c>)
 8010b84:	4819      	ldr	r0, [pc, #100]	; (8010bec <__s2b+0x90>)
 8010b86:	21ce      	movs	r1, #206	; 0xce
 8010b88:	f000 fdee 	bl	8011768 <__assert_func>
 8010b8c:	0052      	lsls	r2, r2, #1
 8010b8e:	3101      	adds	r1, #1
 8010b90:	e7f0      	b.n	8010b74 <__s2b+0x18>
 8010b92:	9b08      	ldr	r3, [sp, #32]
 8010b94:	6143      	str	r3, [r0, #20]
 8010b96:	2d09      	cmp	r5, #9
 8010b98:	f04f 0301 	mov.w	r3, #1
 8010b9c:	6103      	str	r3, [r0, #16]
 8010b9e:	dd16      	ble.n	8010bce <__s2b+0x72>
 8010ba0:	f104 0909 	add.w	r9, r4, #9
 8010ba4:	46c8      	mov	r8, r9
 8010ba6:	442c      	add	r4, r5
 8010ba8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010bac:	4601      	mov	r1, r0
 8010bae:	3b30      	subs	r3, #48	; 0x30
 8010bb0:	220a      	movs	r2, #10
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	f7ff ff88 	bl	8010ac8 <__multadd>
 8010bb8:	45a0      	cmp	r8, r4
 8010bba:	d1f5      	bne.n	8010ba8 <__s2b+0x4c>
 8010bbc:	f1a5 0408 	sub.w	r4, r5, #8
 8010bc0:	444c      	add	r4, r9
 8010bc2:	1b2d      	subs	r5, r5, r4
 8010bc4:	1963      	adds	r3, r4, r5
 8010bc6:	42bb      	cmp	r3, r7
 8010bc8:	db04      	blt.n	8010bd4 <__s2b+0x78>
 8010bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bce:	340a      	adds	r4, #10
 8010bd0:	2509      	movs	r5, #9
 8010bd2:	e7f6      	b.n	8010bc2 <__s2b+0x66>
 8010bd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010bd8:	4601      	mov	r1, r0
 8010bda:	3b30      	subs	r3, #48	; 0x30
 8010bdc:	220a      	movs	r2, #10
 8010bde:	4630      	mov	r0, r6
 8010be0:	f7ff ff72 	bl	8010ac8 <__multadd>
 8010be4:	e7ee      	b.n	8010bc4 <__s2b+0x68>
 8010be6:	bf00      	nop
 8010be8:	08013b0c 	.word	0x08013b0c
 8010bec:	08013b9c 	.word	0x08013b9c

08010bf0 <__hi0bits>:
 8010bf0:	0c03      	lsrs	r3, r0, #16
 8010bf2:	041b      	lsls	r3, r3, #16
 8010bf4:	b9d3      	cbnz	r3, 8010c2c <__hi0bits+0x3c>
 8010bf6:	0400      	lsls	r0, r0, #16
 8010bf8:	2310      	movs	r3, #16
 8010bfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010bfe:	bf04      	itt	eq
 8010c00:	0200      	lsleq	r0, r0, #8
 8010c02:	3308      	addeq	r3, #8
 8010c04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010c08:	bf04      	itt	eq
 8010c0a:	0100      	lsleq	r0, r0, #4
 8010c0c:	3304      	addeq	r3, #4
 8010c0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010c12:	bf04      	itt	eq
 8010c14:	0080      	lsleq	r0, r0, #2
 8010c16:	3302      	addeq	r3, #2
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	db05      	blt.n	8010c28 <__hi0bits+0x38>
 8010c1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010c20:	f103 0301 	add.w	r3, r3, #1
 8010c24:	bf08      	it	eq
 8010c26:	2320      	moveq	r3, #32
 8010c28:	4618      	mov	r0, r3
 8010c2a:	4770      	bx	lr
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	e7e4      	b.n	8010bfa <__hi0bits+0xa>

08010c30 <__lo0bits>:
 8010c30:	6803      	ldr	r3, [r0, #0]
 8010c32:	f013 0207 	ands.w	r2, r3, #7
 8010c36:	4601      	mov	r1, r0
 8010c38:	d00b      	beq.n	8010c52 <__lo0bits+0x22>
 8010c3a:	07da      	lsls	r2, r3, #31
 8010c3c:	d424      	bmi.n	8010c88 <__lo0bits+0x58>
 8010c3e:	0798      	lsls	r0, r3, #30
 8010c40:	bf49      	itett	mi
 8010c42:	085b      	lsrmi	r3, r3, #1
 8010c44:	089b      	lsrpl	r3, r3, #2
 8010c46:	2001      	movmi	r0, #1
 8010c48:	600b      	strmi	r3, [r1, #0]
 8010c4a:	bf5c      	itt	pl
 8010c4c:	600b      	strpl	r3, [r1, #0]
 8010c4e:	2002      	movpl	r0, #2
 8010c50:	4770      	bx	lr
 8010c52:	b298      	uxth	r0, r3
 8010c54:	b9b0      	cbnz	r0, 8010c84 <__lo0bits+0x54>
 8010c56:	0c1b      	lsrs	r3, r3, #16
 8010c58:	2010      	movs	r0, #16
 8010c5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010c5e:	bf04      	itt	eq
 8010c60:	0a1b      	lsreq	r3, r3, #8
 8010c62:	3008      	addeq	r0, #8
 8010c64:	071a      	lsls	r2, r3, #28
 8010c66:	bf04      	itt	eq
 8010c68:	091b      	lsreq	r3, r3, #4
 8010c6a:	3004      	addeq	r0, #4
 8010c6c:	079a      	lsls	r2, r3, #30
 8010c6e:	bf04      	itt	eq
 8010c70:	089b      	lsreq	r3, r3, #2
 8010c72:	3002      	addeq	r0, #2
 8010c74:	07da      	lsls	r2, r3, #31
 8010c76:	d403      	bmi.n	8010c80 <__lo0bits+0x50>
 8010c78:	085b      	lsrs	r3, r3, #1
 8010c7a:	f100 0001 	add.w	r0, r0, #1
 8010c7e:	d005      	beq.n	8010c8c <__lo0bits+0x5c>
 8010c80:	600b      	str	r3, [r1, #0]
 8010c82:	4770      	bx	lr
 8010c84:	4610      	mov	r0, r2
 8010c86:	e7e8      	b.n	8010c5a <__lo0bits+0x2a>
 8010c88:	2000      	movs	r0, #0
 8010c8a:	4770      	bx	lr
 8010c8c:	2020      	movs	r0, #32
 8010c8e:	4770      	bx	lr

08010c90 <__i2b>:
 8010c90:	b510      	push	{r4, lr}
 8010c92:	460c      	mov	r4, r1
 8010c94:	2101      	movs	r1, #1
 8010c96:	f7ff feb5 	bl	8010a04 <_Balloc>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	b928      	cbnz	r0, 8010caa <__i2b+0x1a>
 8010c9e:	4b05      	ldr	r3, [pc, #20]	; (8010cb4 <__i2b+0x24>)
 8010ca0:	4805      	ldr	r0, [pc, #20]	; (8010cb8 <__i2b+0x28>)
 8010ca2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010ca6:	f000 fd5f 	bl	8011768 <__assert_func>
 8010caa:	2301      	movs	r3, #1
 8010cac:	6144      	str	r4, [r0, #20]
 8010cae:	6103      	str	r3, [r0, #16]
 8010cb0:	bd10      	pop	{r4, pc}
 8010cb2:	bf00      	nop
 8010cb4:	08013b0c 	.word	0x08013b0c
 8010cb8:	08013b9c 	.word	0x08013b9c

08010cbc <__multiply>:
 8010cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc0:	4614      	mov	r4, r2
 8010cc2:	690a      	ldr	r2, [r1, #16]
 8010cc4:	6923      	ldr	r3, [r4, #16]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	bfb8      	it	lt
 8010cca:	460b      	movlt	r3, r1
 8010ccc:	460d      	mov	r5, r1
 8010cce:	bfbc      	itt	lt
 8010cd0:	4625      	movlt	r5, r4
 8010cd2:	461c      	movlt	r4, r3
 8010cd4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010cd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010cdc:	68ab      	ldr	r3, [r5, #8]
 8010cde:	6869      	ldr	r1, [r5, #4]
 8010ce0:	eb0a 0709 	add.w	r7, sl, r9
 8010ce4:	42bb      	cmp	r3, r7
 8010ce6:	b085      	sub	sp, #20
 8010ce8:	bfb8      	it	lt
 8010cea:	3101      	addlt	r1, #1
 8010cec:	f7ff fe8a 	bl	8010a04 <_Balloc>
 8010cf0:	b930      	cbnz	r0, 8010d00 <__multiply+0x44>
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	4b42      	ldr	r3, [pc, #264]	; (8010e00 <__multiply+0x144>)
 8010cf6:	4843      	ldr	r0, [pc, #268]	; (8010e04 <__multiply+0x148>)
 8010cf8:	f240 115d 	movw	r1, #349	; 0x15d
 8010cfc:	f000 fd34 	bl	8011768 <__assert_func>
 8010d00:	f100 0614 	add.w	r6, r0, #20
 8010d04:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010d08:	4633      	mov	r3, r6
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	4543      	cmp	r3, r8
 8010d0e:	d31e      	bcc.n	8010d4e <__multiply+0x92>
 8010d10:	f105 0c14 	add.w	ip, r5, #20
 8010d14:	f104 0314 	add.w	r3, r4, #20
 8010d18:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010d1c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010d20:	9202      	str	r2, [sp, #8]
 8010d22:	ebac 0205 	sub.w	r2, ip, r5
 8010d26:	3a15      	subs	r2, #21
 8010d28:	f022 0203 	bic.w	r2, r2, #3
 8010d2c:	3204      	adds	r2, #4
 8010d2e:	f105 0115 	add.w	r1, r5, #21
 8010d32:	458c      	cmp	ip, r1
 8010d34:	bf38      	it	cc
 8010d36:	2204      	movcc	r2, #4
 8010d38:	9201      	str	r2, [sp, #4]
 8010d3a:	9a02      	ldr	r2, [sp, #8]
 8010d3c:	9303      	str	r3, [sp, #12]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d808      	bhi.n	8010d54 <__multiply+0x98>
 8010d42:	2f00      	cmp	r7, #0
 8010d44:	dc55      	bgt.n	8010df2 <__multiply+0x136>
 8010d46:	6107      	str	r7, [r0, #16]
 8010d48:	b005      	add	sp, #20
 8010d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d4e:	f843 2b04 	str.w	r2, [r3], #4
 8010d52:	e7db      	b.n	8010d0c <__multiply+0x50>
 8010d54:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d58:	f1ba 0f00 	cmp.w	sl, #0
 8010d5c:	d020      	beq.n	8010da0 <__multiply+0xe4>
 8010d5e:	f105 0e14 	add.w	lr, r5, #20
 8010d62:	46b1      	mov	r9, r6
 8010d64:	2200      	movs	r2, #0
 8010d66:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010d6a:	f8d9 b000 	ldr.w	fp, [r9]
 8010d6e:	b2a1      	uxth	r1, r4
 8010d70:	fa1f fb8b 	uxth.w	fp, fp
 8010d74:	fb0a b101 	mla	r1, sl, r1, fp
 8010d78:	4411      	add	r1, r2
 8010d7a:	f8d9 2000 	ldr.w	r2, [r9]
 8010d7e:	0c24      	lsrs	r4, r4, #16
 8010d80:	0c12      	lsrs	r2, r2, #16
 8010d82:	fb0a 2404 	mla	r4, sl, r4, r2
 8010d86:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010d8a:	b289      	uxth	r1, r1
 8010d8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010d90:	45f4      	cmp	ip, lr
 8010d92:	f849 1b04 	str.w	r1, [r9], #4
 8010d96:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010d9a:	d8e4      	bhi.n	8010d66 <__multiply+0xaa>
 8010d9c:	9901      	ldr	r1, [sp, #4]
 8010d9e:	5072      	str	r2, [r6, r1]
 8010da0:	9a03      	ldr	r2, [sp, #12]
 8010da2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010da6:	3304      	adds	r3, #4
 8010da8:	f1b9 0f00 	cmp.w	r9, #0
 8010dac:	d01f      	beq.n	8010dee <__multiply+0x132>
 8010dae:	6834      	ldr	r4, [r6, #0]
 8010db0:	f105 0114 	add.w	r1, r5, #20
 8010db4:	46b6      	mov	lr, r6
 8010db6:	f04f 0a00 	mov.w	sl, #0
 8010dba:	880a      	ldrh	r2, [r1, #0]
 8010dbc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010dc0:	fb09 b202 	mla	r2, r9, r2, fp
 8010dc4:	4492      	add	sl, r2
 8010dc6:	b2a4      	uxth	r4, r4
 8010dc8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010dcc:	f84e 4b04 	str.w	r4, [lr], #4
 8010dd0:	f851 4b04 	ldr.w	r4, [r1], #4
 8010dd4:	f8be 2000 	ldrh.w	r2, [lr]
 8010dd8:	0c24      	lsrs	r4, r4, #16
 8010dda:	fb09 2404 	mla	r4, r9, r4, r2
 8010dde:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010de2:	458c      	cmp	ip, r1
 8010de4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010de8:	d8e7      	bhi.n	8010dba <__multiply+0xfe>
 8010dea:	9a01      	ldr	r2, [sp, #4]
 8010dec:	50b4      	str	r4, [r6, r2]
 8010dee:	3604      	adds	r6, #4
 8010df0:	e7a3      	b.n	8010d3a <__multiply+0x7e>
 8010df2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d1a5      	bne.n	8010d46 <__multiply+0x8a>
 8010dfa:	3f01      	subs	r7, #1
 8010dfc:	e7a1      	b.n	8010d42 <__multiply+0x86>
 8010dfe:	bf00      	nop
 8010e00:	08013b0c 	.word	0x08013b0c
 8010e04:	08013b9c 	.word	0x08013b9c

08010e08 <__pow5mult>:
 8010e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e0c:	4615      	mov	r5, r2
 8010e0e:	f012 0203 	ands.w	r2, r2, #3
 8010e12:	4606      	mov	r6, r0
 8010e14:	460f      	mov	r7, r1
 8010e16:	d007      	beq.n	8010e28 <__pow5mult+0x20>
 8010e18:	4c25      	ldr	r4, [pc, #148]	; (8010eb0 <__pow5mult+0xa8>)
 8010e1a:	3a01      	subs	r2, #1
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e22:	f7ff fe51 	bl	8010ac8 <__multadd>
 8010e26:	4607      	mov	r7, r0
 8010e28:	10ad      	asrs	r5, r5, #2
 8010e2a:	d03d      	beq.n	8010ea8 <__pow5mult+0xa0>
 8010e2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e2e:	b97c      	cbnz	r4, 8010e50 <__pow5mult+0x48>
 8010e30:	2010      	movs	r0, #16
 8010e32:	f7ff fdc1 	bl	80109b8 <malloc>
 8010e36:	4602      	mov	r2, r0
 8010e38:	6270      	str	r0, [r6, #36]	; 0x24
 8010e3a:	b928      	cbnz	r0, 8010e48 <__pow5mult+0x40>
 8010e3c:	4b1d      	ldr	r3, [pc, #116]	; (8010eb4 <__pow5mult+0xac>)
 8010e3e:	481e      	ldr	r0, [pc, #120]	; (8010eb8 <__pow5mult+0xb0>)
 8010e40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e44:	f000 fc90 	bl	8011768 <__assert_func>
 8010e48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e4c:	6004      	str	r4, [r0, #0]
 8010e4e:	60c4      	str	r4, [r0, #12]
 8010e50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e58:	b94c      	cbnz	r4, 8010e6e <__pow5mult+0x66>
 8010e5a:	f240 2171 	movw	r1, #625	; 0x271
 8010e5e:	4630      	mov	r0, r6
 8010e60:	f7ff ff16 	bl	8010c90 <__i2b>
 8010e64:	2300      	movs	r3, #0
 8010e66:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	6003      	str	r3, [r0, #0]
 8010e6e:	f04f 0900 	mov.w	r9, #0
 8010e72:	07eb      	lsls	r3, r5, #31
 8010e74:	d50a      	bpl.n	8010e8c <__pow5mult+0x84>
 8010e76:	4639      	mov	r1, r7
 8010e78:	4622      	mov	r2, r4
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	f7ff ff1e 	bl	8010cbc <__multiply>
 8010e80:	4639      	mov	r1, r7
 8010e82:	4680      	mov	r8, r0
 8010e84:	4630      	mov	r0, r6
 8010e86:	f7ff fdfd 	bl	8010a84 <_Bfree>
 8010e8a:	4647      	mov	r7, r8
 8010e8c:	106d      	asrs	r5, r5, #1
 8010e8e:	d00b      	beq.n	8010ea8 <__pow5mult+0xa0>
 8010e90:	6820      	ldr	r0, [r4, #0]
 8010e92:	b938      	cbnz	r0, 8010ea4 <__pow5mult+0x9c>
 8010e94:	4622      	mov	r2, r4
 8010e96:	4621      	mov	r1, r4
 8010e98:	4630      	mov	r0, r6
 8010e9a:	f7ff ff0f 	bl	8010cbc <__multiply>
 8010e9e:	6020      	str	r0, [r4, #0]
 8010ea0:	f8c0 9000 	str.w	r9, [r0]
 8010ea4:	4604      	mov	r4, r0
 8010ea6:	e7e4      	b.n	8010e72 <__pow5mult+0x6a>
 8010ea8:	4638      	mov	r0, r7
 8010eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eae:	bf00      	nop
 8010eb0:	08013cf0 	.word	0x08013cf0
 8010eb4:	08013a96 	.word	0x08013a96
 8010eb8:	08013b9c 	.word	0x08013b9c

08010ebc <__lshift>:
 8010ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ec0:	460c      	mov	r4, r1
 8010ec2:	6849      	ldr	r1, [r1, #4]
 8010ec4:	6923      	ldr	r3, [r4, #16]
 8010ec6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010eca:	68a3      	ldr	r3, [r4, #8]
 8010ecc:	4607      	mov	r7, r0
 8010ece:	4691      	mov	r9, r2
 8010ed0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ed4:	f108 0601 	add.w	r6, r8, #1
 8010ed8:	42b3      	cmp	r3, r6
 8010eda:	db0b      	blt.n	8010ef4 <__lshift+0x38>
 8010edc:	4638      	mov	r0, r7
 8010ede:	f7ff fd91 	bl	8010a04 <_Balloc>
 8010ee2:	4605      	mov	r5, r0
 8010ee4:	b948      	cbnz	r0, 8010efa <__lshift+0x3e>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	4b28      	ldr	r3, [pc, #160]	; (8010f8c <__lshift+0xd0>)
 8010eea:	4829      	ldr	r0, [pc, #164]	; (8010f90 <__lshift+0xd4>)
 8010eec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010ef0:	f000 fc3a 	bl	8011768 <__assert_func>
 8010ef4:	3101      	adds	r1, #1
 8010ef6:	005b      	lsls	r3, r3, #1
 8010ef8:	e7ee      	b.n	8010ed8 <__lshift+0x1c>
 8010efa:	2300      	movs	r3, #0
 8010efc:	f100 0114 	add.w	r1, r0, #20
 8010f00:	f100 0210 	add.w	r2, r0, #16
 8010f04:	4618      	mov	r0, r3
 8010f06:	4553      	cmp	r3, sl
 8010f08:	db33      	blt.n	8010f72 <__lshift+0xb6>
 8010f0a:	6920      	ldr	r0, [r4, #16]
 8010f0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f10:	f104 0314 	add.w	r3, r4, #20
 8010f14:	f019 091f 	ands.w	r9, r9, #31
 8010f18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f20:	d02b      	beq.n	8010f7a <__lshift+0xbe>
 8010f22:	f1c9 0e20 	rsb	lr, r9, #32
 8010f26:	468a      	mov	sl, r1
 8010f28:	2200      	movs	r2, #0
 8010f2a:	6818      	ldr	r0, [r3, #0]
 8010f2c:	fa00 f009 	lsl.w	r0, r0, r9
 8010f30:	4302      	orrs	r2, r0
 8010f32:	f84a 2b04 	str.w	r2, [sl], #4
 8010f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f3a:	459c      	cmp	ip, r3
 8010f3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f40:	d8f3      	bhi.n	8010f2a <__lshift+0x6e>
 8010f42:	ebac 0304 	sub.w	r3, ip, r4
 8010f46:	3b15      	subs	r3, #21
 8010f48:	f023 0303 	bic.w	r3, r3, #3
 8010f4c:	3304      	adds	r3, #4
 8010f4e:	f104 0015 	add.w	r0, r4, #21
 8010f52:	4584      	cmp	ip, r0
 8010f54:	bf38      	it	cc
 8010f56:	2304      	movcc	r3, #4
 8010f58:	50ca      	str	r2, [r1, r3]
 8010f5a:	b10a      	cbz	r2, 8010f60 <__lshift+0xa4>
 8010f5c:	f108 0602 	add.w	r6, r8, #2
 8010f60:	3e01      	subs	r6, #1
 8010f62:	4638      	mov	r0, r7
 8010f64:	612e      	str	r6, [r5, #16]
 8010f66:	4621      	mov	r1, r4
 8010f68:	f7ff fd8c 	bl	8010a84 <_Bfree>
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f72:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f76:	3301      	adds	r3, #1
 8010f78:	e7c5      	b.n	8010f06 <__lshift+0x4a>
 8010f7a:	3904      	subs	r1, #4
 8010f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f80:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f84:	459c      	cmp	ip, r3
 8010f86:	d8f9      	bhi.n	8010f7c <__lshift+0xc0>
 8010f88:	e7ea      	b.n	8010f60 <__lshift+0xa4>
 8010f8a:	bf00      	nop
 8010f8c:	08013b0c 	.word	0x08013b0c
 8010f90:	08013b9c 	.word	0x08013b9c

08010f94 <__mcmp>:
 8010f94:	b530      	push	{r4, r5, lr}
 8010f96:	6902      	ldr	r2, [r0, #16]
 8010f98:	690c      	ldr	r4, [r1, #16]
 8010f9a:	1b12      	subs	r2, r2, r4
 8010f9c:	d10e      	bne.n	8010fbc <__mcmp+0x28>
 8010f9e:	f100 0314 	add.w	r3, r0, #20
 8010fa2:	3114      	adds	r1, #20
 8010fa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010fa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010fac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010fb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010fb4:	42a5      	cmp	r5, r4
 8010fb6:	d003      	beq.n	8010fc0 <__mcmp+0x2c>
 8010fb8:	d305      	bcc.n	8010fc6 <__mcmp+0x32>
 8010fba:	2201      	movs	r2, #1
 8010fbc:	4610      	mov	r0, r2
 8010fbe:	bd30      	pop	{r4, r5, pc}
 8010fc0:	4283      	cmp	r3, r0
 8010fc2:	d3f3      	bcc.n	8010fac <__mcmp+0x18>
 8010fc4:	e7fa      	b.n	8010fbc <__mcmp+0x28>
 8010fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010fca:	e7f7      	b.n	8010fbc <__mcmp+0x28>

08010fcc <__mdiff>:
 8010fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd0:	460c      	mov	r4, r1
 8010fd2:	4606      	mov	r6, r0
 8010fd4:	4611      	mov	r1, r2
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	4617      	mov	r7, r2
 8010fda:	f7ff ffdb 	bl	8010f94 <__mcmp>
 8010fde:	1e05      	subs	r5, r0, #0
 8010fe0:	d110      	bne.n	8011004 <__mdiff+0x38>
 8010fe2:	4629      	mov	r1, r5
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	f7ff fd0d 	bl	8010a04 <_Balloc>
 8010fea:	b930      	cbnz	r0, 8010ffa <__mdiff+0x2e>
 8010fec:	4b39      	ldr	r3, [pc, #228]	; (80110d4 <__mdiff+0x108>)
 8010fee:	4602      	mov	r2, r0
 8010ff0:	f240 2132 	movw	r1, #562	; 0x232
 8010ff4:	4838      	ldr	r0, [pc, #224]	; (80110d8 <__mdiff+0x10c>)
 8010ff6:	f000 fbb7 	bl	8011768 <__assert_func>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011004:	bfa4      	itt	ge
 8011006:	463b      	movge	r3, r7
 8011008:	4627      	movge	r7, r4
 801100a:	4630      	mov	r0, r6
 801100c:	6879      	ldr	r1, [r7, #4]
 801100e:	bfa6      	itte	ge
 8011010:	461c      	movge	r4, r3
 8011012:	2500      	movge	r5, #0
 8011014:	2501      	movlt	r5, #1
 8011016:	f7ff fcf5 	bl	8010a04 <_Balloc>
 801101a:	b920      	cbnz	r0, 8011026 <__mdiff+0x5a>
 801101c:	4b2d      	ldr	r3, [pc, #180]	; (80110d4 <__mdiff+0x108>)
 801101e:	4602      	mov	r2, r0
 8011020:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011024:	e7e6      	b.n	8010ff4 <__mdiff+0x28>
 8011026:	693e      	ldr	r6, [r7, #16]
 8011028:	60c5      	str	r5, [r0, #12]
 801102a:	6925      	ldr	r5, [r4, #16]
 801102c:	f107 0114 	add.w	r1, r7, #20
 8011030:	f104 0914 	add.w	r9, r4, #20
 8011034:	f100 0e14 	add.w	lr, r0, #20
 8011038:	f107 0210 	add.w	r2, r7, #16
 801103c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011040:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011044:	46f2      	mov	sl, lr
 8011046:	2700      	movs	r7, #0
 8011048:	f859 3b04 	ldr.w	r3, [r9], #4
 801104c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011050:	fa1f f883 	uxth.w	r8, r3
 8011054:	fa17 f78b 	uxtah	r7, r7, fp
 8011058:	0c1b      	lsrs	r3, r3, #16
 801105a:	eba7 0808 	sub.w	r8, r7, r8
 801105e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011062:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011066:	fa1f f888 	uxth.w	r8, r8
 801106a:	141f      	asrs	r7, r3, #16
 801106c:	454d      	cmp	r5, r9
 801106e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011072:	f84a 3b04 	str.w	r3, [sl], #4
 8011076:	d8e7      	bhi.n	8011048 <__mdiff+0x7c>
 8011078:	1b2b      	subs	r3, r5, r4
 801107a:	3b15      	subs	r3, #21
 801107c:	f023 0303 	bic.w	r3, r3, #3
 8011080:	3304      	adds	r3, #4
 8011082:	3415      	adds	r4, #21
 8011084:	42a5      	cmp	r5, r4
 8011086:	bf38      	it	cc
 8011088:	2304      	movcc	r3, #4
 801108a:	4419      	add	r1, r3
 801108c:	4473      	add	r3, lr
 801108e:	469e      	mov	lr, r3
 8011090:	460d      	mov	r5, r1
 8011092:	4565      	cmp	r5, ip
 8011094:	d30e      	bcc.n	80110b4 <__mdiff+0xe8>
 8011096:	f10c 0203 	add.w	r2, ip, #3
 801109a:	1a52      	subs	r2, r2, r1
 801109c:	f022 0203 	bic.w	r2, r2, #3
 80110a0:	3903      	subs	r1, #3
 80110a2:	458c      	cmp	ip, r1
 80110a4:	bf38      	it	cc
 80110a6:	2200      	movcc	r2, #0
 80110a8:	441a      	add	r2, r3
 80110aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80110ae:	b17b      	cbz	r3, 80110d0 <__mdiff+0x104>
 80110b0:	6106      	str	r6, [r0, #16]
 80110b2:	e7a5      	b.n	8011000 <__mdiff+0x34>
 80110b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80110b8:	fa17 f488 	uxtah	r4, r7, r8
 80110bc:	1422      	asrs	r2, r4, #16
 80110be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80110c2:	b2a4      	uxth	r4, r4
 80110c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80110c8:	f84e 4b04 	str.w	r4, [lr], #4
 80110cc:	1417      	asrs	r7, r2, #16
 80110ce:	e7e0      	b.n	8011092 <__mdiff+0xc6>
 80110d0:	3e01      	subs	r6, #1
 80110d2:	e7ea      	b.n	80110aa <__mdiff+0xde>
 80110d4:	08013b0c 	.word	0x08013b0c
 80110d8:	08013b9c 	.word	0x08013b9c

080110dc <__ulp>:
 80110dc:	b082      	sub	sp, #8
 80110de:	ed8d 0b00 	vstr	d0, [sp]
 80110e2:	9b01      	ldr	r3, [sp, #4]
 80110e4:	4912      	ldr	r1, [pc, #72]	; (8011130 <__ulp+0x54>)
 80110e6:	4019      	ands	r1, r3
 80110e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80110ec:	2900      	cmp	r1, #0
 80110ee:	dd05      	ble.n	80110fc <__ulp+0x20>
 80110f0:	2200      	movs	r2, #0
 80110f2:	460b      	mov	r3, r1
 80110f4:	ec43 2b10 	vmov	d0, r2, r3
 80110f8:	b002      	add	sp, #8
 80110fa:	4770      	bx	lr
 80110fc:	4249      	negs	r1, r1
 80110fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011102:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011106:	f04f 0200 	mov.w	r2, #0
 801110a:	f04f 0300 	mov.w	r3, #0
 801110e:	da04      	bge.n	801111a <__ulp+0x3e>
 8011110:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011114:	fa41 f300 	asr.w	r3, r1, r0
 8011118:	e7ec      	b.n	80110f4 <__ulp+0x18>
 801111a:	f1a0 0114 	sub.w	r1, r0, #20
 801111e:	291e      	cmp	r1, #30
 8011120:	bfda      	itte	le
 8011122:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011126:	fa20 f101 	lsrle.w	r1, r0, r1
 801112a:	2101      	movgt	r1, #1
 801112c:	460a      	mov	r2, r1
 801112e:	e7e1      	b.n	80110f4 <__ulp+0x18>
 8011130:	7ff00000 	.word	0x7ff00000

08011134 <__b2d>:
 8011134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011136:	6905      	ldr	r5, [r0, #16]
 8011138:	f100 0714 	add.w	r7, r0, #20
 801113c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011140:	1f2e      	subs	r6, r5, #4
 8011142:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011146:	4620      	mov	r0, r4
 8011148:	f7ff fd52 	bl	8010bf0 <__hi0bits>
 801114c:	f1c0 0320 	rsb	r3, r0, #32
 8011150:	280a      	cmp	r0, #10
 8011152:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80111d0 <__b2d+0x9c>
 8011156:	600b      	str	r3, [r1, #0]
 8011158:	dc14      	bgt.n	8011184 <__b2d+0x50>
 801115a:	f1c0 0e0b 	rsb	lr, r0, #11
 801115e:	fa24 f10e 	lsr.w	r1, r4, lr
 8011162:	42b7      	cmp	r7, r6
 8011164:	ea41 030c 	orr.w	r3, r1, ip
 8011168:	bf34      	ite	cc
 801116a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801116e:	2100      	movcs	r1, #0
 8011170:	3015      	adds	r0, #21
 8011172:	fa04 f000 	lsl.w	r0, r4, r0
 8011176:	fa21 f10e 	lsr.w	r1, r1, lr
 801117a:	ea40 0201 	orr.w	r2, r0, r1
 801117e:	ec43 2b10 	vmov	d0, r2, r3
 8011182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011184:	42b7      	cmp	r7, r6
 8011186:	bf3a      	itte	cc
 8011188:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801118c:	f1a5 0608 	subcc.w	r6, r5, #8
 8011190:	2100      	movcs	r1, #0
 8011192:	380b      	subs	r0, #11
 8011194:	d017      	beq.n	80111c6 <__b2d+0x92>
 8011196:	f1c0 0c20 	rsb	ip, r0, #32
 801119a:	fa04 f500 	lsl.w	r5, r4, r0
 801119e:	42be      	cmp	r6, r7
 80111a0:	fa21 f40c 	lsr.w	r4, r1, ip
 80111a4:	ea45 0504 	orr.w	r5, r5, r4
 80111a8:	bf8c      	ite	hi
 80111aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80111ae:	2400      	movls	r4, #0
 80111b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80111b4:	fa01 f000 	lsl.w	r0, r1, r0
 80111b8:	fa24 f40c 	lsr.w	r4, r4, ip
 80111bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80111c0:	ea40 0204 	orr.w	r2, r0, r4
 80111c4:	e7db      	b.n	801117e <__b2d+0x4a>
 80111c6:	ea44 030c 	orr.w	r3, r4, ip
 80111ca:	460a      	mov	r2, r1
 80111cc:	e7d7      	b.n	801117e <__b2d+0x4a>
 80111ce:	bf00      	nop
 80111d0:	3ff00000 	.word	0x3ff00000

080111d4 <__d2b>:
 80111d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80111d8:	4689      	mov	r9, r1
 80111da:	2101      	movs	r1, #1
 80111dc:	ec57 6b10 	vmov	r6, r7, d0
 80111e0:	4690      	mov	r8, r2
 80111e2:	f7ff fc0f 	bl	8010a04 <_Balloc>
 80111e6:	4604      	mov	r4, r0
 80111e8:	b930      	cbnz	r0, 80111f8 <__d2b+0x24>
 80111ea:	4602      	mov	r2, r0
 80111ec:	4b25      	ldr	r3, [pc, #148]	; (8011284 <__d2b+0xb0>)
 80111ee:	4826      	ldr	r0, [pc, #152]	; (8011288 <__d2b+0xb4>)
 80111f0:	f240 310a 	movw	r1, #778	; 0x30a
 80111f4:	f000 fab8 	bl	8011768 <__assert_func>
 80111f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80111fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011200:	bb35      	cbnz	r5, 8011250 <__d2b+0x7c>
 8011202:	2e00      	cmp	r6, #0
 8011204:	9301      	str	r3, [sp, #4]
 8011206:	d028      	beq.n	801125a <__d2b+0x86>
 8011208:	4668      	mov	r0, sp
 801120a:	9600      	str	r6, [sp, #0]
 801120c:	f7ff fd10 	bl	8010c30 <__lo0bits>
 8011210:	9900      	ldr	r1, [sp, #0]
 8011212:	b300      	cbz	r0, 8011256 <__d2b+0x82>
 8011214:	9a01      	ldr	r2, [sp, #4]
 8011216:	f1c0 0320 	rsb	r3, r0, #32
 801121a:	fa02 f303 	lsl.w	r3, r2, r3
 801121e:	430b      	orrs	r3, r1
 8011220:	40c2      	lsrs	r2, r0
 8011222:	6163      	str	r3, [r4, #20]
 8011224:	9201      	str	r2, [sp, #4]
 8011226:	9b01      	ldr	r3, [sp, #4]
 8011228:	61a3      	str	r3, [r4, #24]
 801122a:	2b00      	cmp	r3, #0
 801122c:	bf14      	ite	ne
 801122e:	2202      	movne	r2, #2
 8011230:	2201      	moveq	r2, #1
 8011232:	6122      	str	r2, [r4, #16]
 8011234:	b1d5      	cbz	r5, 801126c <__d2b+0x98>
 8011236:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801123a:	4405      	add	r5, r0
 801123c:	f8c9 5000 	str.w	r5, [r9]
 8011240:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011244:	f8c8 0000 	str.w	r0, [r8]
 8011248:	4620      	mov	r0, r4
 801124a:	b003      	add	sp, #12
 801124c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011254:	e7d5      	b.n	8011202 <__d2b+0x2e>
 8011256:	6161      	str	r1, [r4, #20]
 8011258:	e7e5      	b.n	8011226 <__d2b+0x52>
 801125a:	a801      	add	r0, sp, #4
 801125c:	f7ff fce8 	bl	8010c30 <__lo0bits>
 8011260:	9b01      	ldr	r3, [sp, #4]
 8011262:	6163      	str	r3, [r4, #20]
 8011264:	2201      	movs	r2, #1
 8011266:	6122      	str	r2, [r4, #16]
 8011268:	3020      	adds	r0, #32
 801126a:	e7e3      	b.n	8011234 <__d2b+0x60>
 801126c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011270:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011274:	f8c9 0000 	str.w	r0, [r9]
 8011278:	6918      	ldr	r0, [r3, #16]
 801127a:	f7ff fcb9 	bl	8010bf0 <__hi0bits>
 801127e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011282:	e7df      	b.n	8011244 <__d2b+0x70>
 8011284:	08013b0c 	.word	0x08013b0c
 8011288:	08013b9c 	.word	0x08013b9c

0801128c <__ratio>:
 801128c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011290:	4688      	mov	r8, r1
 8011292:	4669      	mov	r1, sp
 8011294:	4681      	mov	r9, r0
 8011296:	f7ff ff4d 	bl	8011134 <__b2d>
 801129a:	a901      	add	r1, sp, #4
 801129c:	4640      	mov	r0, r8
 801129e:	ec55 4b10 	vmov	r4, r5, d0
 80112a2:	f7ff ff47 	bl	8011134 <__b2d>
 80112a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80112aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80112ae:	eba3 0c02 	sub.w	ip, r3, r2
 80112b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80112b6:	1a9b      	subs	r3, r3, r2
 80112b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80112bc:	ec51 0b10 	vmov	r0, r1, d0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	bfd6      	itet	le
 80112c4:	460a      	movle	r2, r1
 80112c6:	462a      	movgt	r2, r5
 80112c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80112cc:	468b      	mov	fp, r1
 80112ce:	462f      	mov	r7, r5
 80112d0:	bfd4      	ite	le
 80112d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80112d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80112da:	4620      	mov	r0, r4
 80112dc:	ee10 2a10 	vmov	r2, s0
 80112e0:	465b      	mov	r3, fp
 80112e2:	4639      	mov	r1, r7
 80112e4:	f7ef fab2 	bl	800084c <__aeabi_ddiv>
 80112e8:	ec41 0b10 	vmov	d0, r0, r1
 80112ec:	b003      	add	sp, #12
 80112ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080112f2 <__copybits>:
 80112f2:	3901      	subs	r1, #1
 80112f4:	b570      	push	{r4, r5, r6, lr}
 80112f6:	1149      	asrs	r1, r1, #5
 80112f8:	6914      	ldr	r4, [r2, #16]
 80112fa:	3101      	adds	r1, #1
 80112fc:	f102 0314 	add.w	r3, r2, #20
 8011300:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011304:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011308:	1f05      	subs	r5, r0, #4
 801130a:	42a3      	cmp	r3, r4
 801130c:	d30c      	bcc.n	8011328 <__copybits+0x36>
 801130e:	1aa3      	subs	r3, r4, r2
 8011310:	3b11      	subs	r3, #17
 8011312:	f023 0303 	bic.w	r3, r3, #3
 8011316:	3211      	adds	r2, #17
 8011318:	42a2      	cmp	r2, r4
 801131a:	bf88      	it	hi
 801131c:	2300      	movhi	r3, #0
 801131e:	4418      	add	r0, r3
 8011320:	2300      	movs	r3, #0
 8011322:	4288      	cmp	r0, r1
 8011324:	d305      	bcc.n	8011332 <__copybits+0x40>
 8011326:	bd70      	pop	{r4, r5, r6, pc}
 8011328:	f853 6b04 	ldr.w	r6, [r3], #4
 801132c:	f845 6f04 	str.w	r6, [r5, #4]!
 8011330:	e7eb      	b.n	801130a <__copybits+0x18>
 8011332:	f840 3b04 	str.w	r3, [r0], #4
 8011336:	e7f4      	b.n	8011322 <__copybits+0x30>

08011338 <__any_on>:
 8011338:	f100 0214 	add.w	r2, r0, #20
 801133c:	6900      	ldr	r0, [r0, #16]
 801133e:	114b      	asrs	r3, r1, #5
 8011340:	4298      	cmp	r0, r3
 8011342:	b510      	push	{r4, lr}
 8011344:	db11      	blt.n	801136a <__any_on+0x32>
 8011346:	dd0a      	ble.n	801135e <__any_on+0x26>
 8011348:	f011 011f 	ands.w	r1, r1, #31
 801134c:	d007      	beq.n	801135e <__any_on+0x26>
 801134e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011352:	fa24 f001 	lsr.w	r0, r4, r1
 8011356:	fa00 f101 	lsl.w	r1, r0, r1
 801135a:	428c      	cmp	r4, r1
 801135c:	d10b      	bne.n	8011376 <__any_on+0x3e>
 801135e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011362:	4293      	cmp	r3, r2
 8011364:	d803      	bhi.n	801136e <__any_on+0x36>
 8011366:	2000      	movs	r0, #0
 8011368:	bd10      	pop	{r4, pc}
 801136a:	4603      	mov	r3, r0
 801136c:	e7f7      	b.n	801135e <__any_on+0x26>
 801136e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011372:	2900      	cmp	r1, #0
 8011374:	d0f5      	beq.n	8011362 <__any_on+0x2a>
 8011376:	2001      	movs	r0, #1
 8011378:	e7f6      	b.n	8011368 <__any_on+0x30>

0801137a <_calloc_r>:
 801137a:	b513      	push	{r0, r1, r4, lr}
 801137c:	434a      	muls	r2, r1
 801137e:	4611      	mov	r1, r2
 8011380:	9201      	str	r2, [sp, #4]
 8011382:	f7fc f9cd 	bl	800d720 <_malloc_r>
 8011386:	4604      	mov	r4, r0
 8011388:	b118      	cbz	r0, 8011392 <_calloc_r+0x18>
 801138a:	9a01      	ldr	r2, [sp, #4]
 801138c:	2100      	movs	r1, #0
 801138e:	f7fc f9be 	bl	800d70e <memset>
 8011392:	4620      	mov	r0, r4
 8011394:	b002      	add	sp, #8
 8011396:	bd10      	pop	{r4, pc}

08011398 <_free_r>:
 8011398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801139a:	2900      	cmp	r1, #0
 801139c:	d048      	beq.n	8011430 <_free_r+0x98>
 801139e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113a2:	9001      	str	r0, [sp, #4]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	f1a1 0404 	sub.w	r4, r1, #4
 80113aa:	bfb8      	it	lt
 80113ac:	18e4      	addlt	r4, r4, r3
 80113ae:	f7ff fb1d 	bl	80109ec <__malloc_lock>
 80113b2:	4a20      	ldr	r2, [pc, #128]	; (8011434 <_free_r+0x9c>)
 80113b4:	9801      	ldr	r0, [sp, #4]
 80113b6:	6813      	ldr	r3, [r2, #0]
 80113b8:	4615      	mov	r5, r2
 80113ba:	b933      	cbnz	r3, 80113ca <_free_r+0x32>
 80113bc:	6063      	str	r3, [r4, #4]
 80113be:	6014      	str	r4, [r2, #0]
 80113c0:	b003      	add	sp, #12
 80113c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80113c6:	f7ff bb17 	b.w	80109f8 <__malloc_unlock>
 80113ca:	42a3      	cmp	r3, r4
 80113cc:	d90b      	bls.n	80113e6 <_free_r+0x4e>
 80113ce:	6821      	ldr	r1, [r4, #0]
 80113d0:	1862      	adds	r2, r4, r1
 80113d2:	4293      	cmp	r3, r2
 80113d4:	bf04      	itt	eq
 80113d6:	681a      	ldreq	r2, [r3, #0]
 80113d8:	685b      	ldreq	r3, [r3, #4]
 80113da:	6063      	str	r3, [r4, #4]
 80113dc:	bf04      	itt	eq
 80113de:	1852      	addeq	r2, r2, r1
 80113e0:	6022      	streq	r2, [r4, #0]
 80113e2:	602c      	str	r4, [r5, #0]
 80113e4:	e7ec      	b.n	80113c0 <_free_r+0x28>
 80113e6:	461a      	mov	r2, r3
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	b10b      	cbz	r3, 80113f0 <_free_r+0x58>
 80113ec:	42a3      	cmp	r3, r4
 80113ee:	d9fa      	bls.n	80113e6 <_free_r+0x4e>
 80113f0:	6811      	ldr	r1, [r2, #0]
 80113f2:	1855      	adds	r5, r2, r1
 80113f4:	42a5      	cmp	r5, r4
 80113f6:	d10b      	bne.n	8011410 <_free_r+0x78>
 80113f8:	6824      	ldr	r4, [r4, #0]
 80113fa:	4421      	add	r1, r4
 80113fc:	1854      	adds	r4, r2, r1
 80113fe:	42a3      	cmp	r3, r4
 8011400:	6011      	str	r1, [r2, #0]
 8011402:	d1dd      	bne.n	80113c0 <_free_r+0x28>
 8011404:	681c      	ldr	r4, [r3, #0]
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	6053      	str	r3, [r2, #4]
 801140a:	4421      	add	r1, r4
 801140c:	6011      	str	r1, [r2, #0]
 801140e:	e7d7      	b.n	80113c0 <_free_r+0x28>
 8011410:	d902      	bls.n	8011418 <_free_r+0x80>
 8011412:	230c      	movs	r3, #12
 8011414:	6003      	str	r3, [r0, #0]
 8011416:	e7d3      	b.n	80113c0 <_free_r+0x28>
 8011418:	6825      	ldr	r5, [r4, #0]
 801141a:	1961      	adds	r1, r4, r5
 801141c:	428b      	cmp	r3, r1
 801141e:	bf04      	itt	eq
 8011420:	6819      	ldreq	r1, [r3, #0]
 8011422:	685b      	ldreq	r3, [r3, #4]
 8011424:	6063      	str	r3, [r4, #4]
 8011426:	bf04      	itt	eq
 8011428:	1949      	addeq	r1, r1, r5
 801142a:	6021      	streq	r1, [r4, #0]
 801142c:	6054      	str	r4, [r2, #4]
 801142e:	e7c7      	b.n	80113c0 <_free_r+0x28>
 8011430:	b003      	add	sp, #12
 8011432:	bd30      	pop	{r4, r5, pc}
 8011434:	2000598c 	.word	0x2000598c

08011438 <__ssputs_r>:
 8011438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801143c:	688e      	ldr	r6, [r1, #8]
 801143e:	429e      	cmp	r6, r3
 8011440:	4682      	mov	sl, r0
 8011442:	460c      	mov	r4, r1
 8011444:	4690      	mov	r8, r2
 8011446:	461f      	mov	r7, r3
 8011448:	d838      	bhi.n	80114bc <__ssputs_r+0x84>
 801144a:	898a      	ldrh	r2, [r1, #12]
 801144c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011450:	d032      	beq.n	80114b8 <__ssputs_r+0x80>
 8011452:	6825      	ldr	r5, [r4, #0]
 8011454:	6909      	ldr	r1, [r1, #16]
 8011456:	eba5 0901 	sub.w	r9, r5, r1
 801145a:	6965      	ldr	r5, [r4, #20]
 801145c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011460:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011464:	3301      	adds	r3, #1
 8011466:	444b      	add	r3, r9
 8011468:	106d      	asrs	r5, r5, #1
 801146a:	429d      	cmp	r5, r3
 801146c:	bf38      	it	cc
 801146e:	461d      	movcc	r5, r3
 8011470:	0553      	lsls	r3, r2, #21
 8011472:	d531      	bpl.n	80114d8 <__ssputs_r+0xa0>
 8011474:	4629      	mov	r1, r5
 8011476:	f7fc f953 	bl	800d720 <_malloc_r>
 801147a:	4606      	mov	r6, r0
 801147c:	b950      	cbnz	r0, 8011494 <__ssputs_r+0x5c>
 801147e:	230c      	movs	r3, #12
 8011480:	f8ca 3000 	str.w	r3, [sl]
 8011484:	89a3      	ldrh	r3, [r4, #12]
 8011486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801148a:	81a3      	strh	r3, [r4, #12]
 801148c:	f04f 30ff 	mov.w	r0, #4294967295
 8011490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011494:	6921      	ldr	r1, [r4, #16]
 8011496:	464a      	mov	r2, r9
 8011498:	f7fc f92b 	bl	800d6f2 <memcpy>
 801149c:	89a3      	ldrh	r3, [r4, #12]
 801149e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80114a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114a6:	81a3      	strh	r3, [r4, #12]
 80114a8:	6126      	str	r6, [r4, #16]
 80114aa:	6165      	str	r5, [r4, #20]
 80114ac:	444e      	add	r6, r9
 80114ae:	eba5 0509 	sub.w	r5, r5, r9
 80114b2:	6026      	str	r6, [r4, #0]
 80114b4:	60a5      	str	r5, [r4, #8]
 80114b6:	463e      	mov	r6, r7
 80114b8:	42be      	cmp	r6, r7
 80114ba:	d900      	bls.n	80114be <__ssputs_r+0x86>
 80114bc:	463e      	mov	r6, r7
 80114be:	4632      	mov	r2, r6
 80114c0:	6820      	ldr	r0, [r4, #0]
 80114c2:	4641      	mov	r1, r8
 80114c4:	f000 f980 	bl	80117c8 <memmove>
 80114c8:	68a3      	ldr	r3, [r4, #8]
 80114ca:	6822      	ldr	r2, [r4, #0]
 80114cc:	1b9b      	subs	r3, r3, r6
 80114ce:	4432      	add	r2, r6
 80114d0:	60a3      	str	r3, [r4, #8]
 80114d2:	6022      	str	r2, [r4, #0]
 80114d4:	2000      	movs	r0, #0
 80114d6:	e7db      	b.n	8011490 <__ssputs_r+0x58>
 80114d8:	462a      	mov	r2, r5
 80114da:	f000 f98f 	bl	80117fc <_realloc_r>
 80114de:	4606      	mov	r6, r0
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d1e1      	bne.n	80114a8 <__ssputs_r+0x70>
 80114e4:	6921      	ldr	r1, [r4, #16]
 80114e6:	4650      	mov	r0, sl
 80114e8:	f7ff ff56 	bl	8011398 <_free_r>
 80114ec:	e7c7      	b.n	801147e <__ssputs_r+0x46>
	...

080114f0 <_svfiprintf_r>:
 80114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f4:	4698      	mov	r8, r3
 80114f6:	898b      	ldrh	r3, [r1, #12]
 80114f8:	061b      	lsls	r3, r3, #24
 80114fa:	b09d      	sub	sp, #116	; 0x74
 80114fc:	4607      	mov	r7, r0
 80114fe:	460d      	mov	r5, r1
 8011500:	4614      	mov	r4, r2
 8011502:	d50e      	bpl.n	8011522 <_svfiprintf_r+0x32>
 8011504:	690b      	ldr	r3, [r1, #16]
 8011506:	b963      	cbnz	r3, 8011522 <_svfiprintf_r+0x32>
 8011508:	2140      	movs	r1, #64	; 0x40
 801150a:	f7fc f909 	bl	800d720 <_malloc_r>
 801150e:	6028      	str	r0, [r5, #0]
 8011510:	6128      	str	r0, [r5, #16]
 8011512:	b920      	cbnz	r0, 801151e <_svfiprintf_r+0x2e>
 8011514:	230c      	movs	r3, #12
 8011516:	603b      	str	r3, [r7, #0]
 8011518:	f04f 30ff 	mov.w	r0, #4294967295
 801151c:	e0d1      	b.n	80116c2 <_svfiprintf_r+0x1d2>
 801151e:	2340      	movs	r3, #64	; 0x40
 8011520:	616b      	str	r3, [r5, #20]
 8011522:	2300      	movs	r3, #0
 8011524:	9309      	str	r3, [sp, #36]	; 0x24
 8011526:	2320      	movs	r3, #32
 8011528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801152c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011530:	2330      	movs	r3, #48	; 0x30
 8011532:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80116dc <_svfiprintf_r+0x1ec>
 8011536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801153a:	f04f 0901 	mov.w	r9, #1
 801153e:	4623      	mov	r3, r4
 8011540:	469a      	mov	sl, r3
 8011542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011546:	b10a      	cbz	r2, 801154c <_svfiprintf_r+0x5c>
 8011548:	2a25      	cmp	r2, #37	; 0x25
 801154a:	d1f9      	bne.n	8011540 <_svfiprintf_r+0x50>
 801154c:	ebba 0b04 	subs.w	fp, sl, r4
 8011550:	d00b      	beq.n	801156a <_svfiprintf_r+0x7a>
 8011552:	465b      	mov	r3, fp
 8011554:	4622      	mov	r2, r4
 8011556:	4629      	mov	r1, r5
 8011558:	4638      	mov	r0, r7
 801155a:	f7ff ff6d 	bl	8011438 <__ssputs_r>
 801155e:	3001      	adds	r0, #1
 8011560:	f000 80aa 	beq.w	80116b8 <_svfiprintf_r+0x1c8>
 8011564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011566:	445a      	add	r2, fp
 8011568:	9209      	str	r2, [sp, #36]	; 0x24
 801156a:	f89a 3000 	ldrb.w	r3, [sl]
 801156e:	2b00      	cmp	r3, #0
 8011570:	f000 80a2 	beq.w	80116b8 <_svfiprintf_r+0x1c8>
 8011574:	2300      	movs	r3, #0
 8011576:	f04f 32ff 	mov.w	r2, #4294967295
 801157a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801157e:	f10a 0a01 	add.w	sl, sl, #1
 8011582:	9304      	str	r3, [sp, #16]
 8011584:	9307      	str	r3, [sp, #28]
 8011586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801158a:	931a      	str	r3, [sp, #104]	; 0x68
 801158c:	4654      	mov	r4, sl
 801158e:	2205      	movs	r2, #5
 8011590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011594:	4851      	ldr	r0, [pc, #324]	; (80116dc <_svfiprintf_r+0x1ec>)
 8011596:	f7ee fe23 	bl	80001e0 <memchr>
 801159a:	9a04      	ldr	r2, [sp, #16]
 801159c:	b9d8      	cbnz	r0, 80115d6 <_svfiprintf_r+0xe6>
 801159e:	06d0      	lsls	r0, r2, #27
 80115a0:	bf44      	itt	mi
 80115a2:	2320      	movmi	r3, #32
 80115a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115a8:	0711      	lsls	r1, r2, #28
 80115aa:	bf44      	itt	mi
 80115ac:	232b      	movmi	r3, #43	; 0x2b
 80115ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115b2:	f89a 3000 	ldrb.w	r3, [sl]
 80115b6:	2b2a      	cmp	r3, #42	; 0x2a
 80115b8:	d015      	beq.n	80115e6 <_svfiprintf_r+0xf6>
 80115ba:	9a07      	ldr	r2, [sp, #28]
 80115bc:	4654      	mov	r4, sl
 80115be:	2000      	movs	r0, #0
 80115c0:	f04f 0c0a 	mov.w	ip, #10
 80115c4:	4621      	mov	r1, r4
 80115c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115ca:	3b30      	subs	r3, #48	; 0x30
 80115cc:	2b09      	cmp	r3, #9
 80115ce:	d94e      	bls.n	801166e <_svfiprintf_r+0x17e>
 80115d0:	b1b0      	cbz	r0, 8011600 <_svfiprintf_r+0x110>
 80115d2:	9207      	str	r2, [sp, #28]
 80115d4:	e014      	b.n	8011600 <_svfiprintf_r+0x110>
 80115d6:	eba0 0308 	sub.w	r3, r0, r8
 80115da:	fa09 f303 	lsl.w	r3, r9, r3
 80115de:	4313      	orrs	r3, r2
 80115e0:	9304      	str	r3, [sp, #16]
 80115e2:	46a2      	mov	sl, r4
 80115e4:	e7d2      	b.n	801158c <_svfiprintf_r+0x9c>
 80115e6:	9b03      	ldr	r3, [sp, #12]
 80115e8:	1d19      	adds	r1, r3, #4
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	9103      	str	r1, [sp, #12]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	bfbb      	ittet	lt
 80115f2:	425b      	neglt	r3, r3
 80115f4:	f042 0202 	orrlt.w	r2, r2, #2
 80115f8:	9307      	strge	r3, [sp, #28]
 80115fa:	9307      	strlt	r3, [sp, #28]
 80115fc:	bfb8      	it	lt
 80115fe:	9204      	strlt	r2, [sp, #16]
 8011600:	7823      	ldrb	r3, [r4, #0]
 8011602:	2b2e      	cmp	r3, #46	; 0x2e
 8011604:	d10c      	bne.n	8011620 <_svfiprintf_r+0x130>
 8011606:	7863      	ldrb	r3, [r4, #1]
 8011608:	2b2a      	cmp	r3, #42	; 0x2a
 801160a:	d135      	bne.n	8011678 <_svfiprintf_r+0x188>
 801160c:	9b03      	ldr	r3, [sp, #12]
 801160e:	1d1a      	adds	r2, r3, #4
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	9203      	str	r2, [sp, #12]
 8011614:	2b00      	cmp	r3, #0
 8011616:	bfb8      	it	lt
 8011618:	f04f 33ff 	movlt.w	r3, #4294967295
 801161c:	3402      	adds	r4, #2
 801161e:	9305      	str	r3, [sp, #20]
 8011620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80116ec <_svfiprintf_r+0x1fc>
 8011624:	7821      	ldrb	r1, [r4, #0]
 8011626:	2203      	movs	r2, #3
 8011628:	4650      	mov	r0, sl
 801162a:	f7ee fdd9 	bl	80001e0 <memchr>
 801162e:	b140      	cbz	r0, 8011642 <_svfiprintf_r+0x152>
 8011630:	2340      	movs	r3, #64	; 0x40
 8011632:	eba0 000a 	sub.w	r0, r0, sl
 8011636:	fa03 f000 	lsl.w	r0, r3, r0
 801163a:	9b04      	ldr	r3, [sp, #16]
 801163c:	4303      	orrs	r3, r0
 801163e:	3401      	adds	r4, #1
 8011640:	9304      	str	r3, [sp, #16]
 8011642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011646:	4826      	ldr	r0, [pc, #152]	; (80116e0 <_svfiprintf_r+0x1f0>)
 8011648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801164c:	2206      	movs	r2, #6
 801164e:	f7ee fdc7 	bl	80001e0 <memchr>
 8011652:	2800      	cmp	r0, #0
 8011654:	d038      	beq.n	80116c8 <_svfiprintf_r+0x1d8>
 8011656:	4b23      	ldr	r3, [pc, #140]	; (80116e4 <_svfiprintf_r+0x1f4>)
 8011658:	bb1b      	cbnz	r3, 80116a2 <_svfiprintf_r+0x1b2>
 801165a:	9b03      	ldr	r3, [sp, #12]
 801165c:	3307      	adds	r3, #7
 801165e:	f023 0307 	bic.w	r3, r3, #7
 8011662:	3308      	adds	r3, #8
 8011664:	9303      	str	r3, [sp, #12]
 8011666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011668:	4433      	add	r3, r6
 801166a:	9309      	str	r3, [sp, #36]	; 0x24
 801166c:	e767      	b.n	801153e <_svfiprintf_r+0x4e>
 801166e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011672:	460c      	mov	r4, r1
 8011674:	2001      	movs	r0, #1
 8011676:	e7a5      	b.n	80115c4 <_svfiprintf_r+0xd4>
 8011678:	2300      	movs	r3, #0
 801167a:	3401      	adds	r4, #1
 801167c:	9305      	str	r3, [sp, #20]
 801167e:	4619      	mov	r1, r3
 8011680:	f04f 0c0a 	mov.w	ip, #10
 8011684:	4620      	mov	r0, r4
 8011686:	f810 2b01 	ldrb.w	r2, [r0], #1
 801168a:	3a30      	subs	r2, #48	; 0x30
 801168c:	2a09      	cmp	r2, #9
 801168e:	d903      	bls.n	8011698 <_svfiprintf_r+0x1a8>
 8011690:	2b00      	cmp	r3, #0
 8011692:	d0c5      	beq.n	8011620 <_svfiprintf_r+0x130>
 8011694:	9105      	str	r1, [sp, #20]
 8011696:	e7c3      	b.n	8011620 <_svfiprintf_r+0x130>
 8011698:	fb0c 2101 	mla	r1, ip, r1, r2
 801169c:	4604      	mov	r4, r0
 801169e:	2301      	movs	r3, #1
 80116a0:	e7f0      	b.n	8011684 <_svfiprintf_r+0x194>
 80116a2:	ab03      	add	r3, sp, #12
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	462a      	mov	r2, r5
 80116a8:	4b0f      	ldr	r3, [pc, #60]	; (80116e8 <_svfiprintf_r+0x1f8>)
 80116aa:	a904      	add	r1, sp, #16
 80116ac:	4638      	mov	r0, r7
 80116ae:	f7fc f931 	bl	800d914 <_printf_float>
 80116b2:	1c42      	adds	r2, r0, #1
 80116b4:	4606      	mov	r6, r0
 80116b6:	d1d6      	bne.n	8011666 <_svfiprintf_r+0x176>
 80116b8:	89ab      	ldrh	r3, [r5, #12]
 80116ba:	065b      	lsls	r3, r3, #25
 80116bc:	f53f af2c 	bmi.w	8011518 <_svfiprintf_r+0x28>
 80116c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116c2:	b01d      	add	sp, #116	; 0x74
 80116c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c8:	ab03      	add	r3, sp, #12
 80116ca:	9300      	str	r3, [sp, #0]
 80116cc:	462a      	mov	r2, r5
 80116ce:	4b06      	ldr	r3, [pc, #24]	; (80116e8 <_svfiprintf_r+0x1f8>)
 80116d0:	a904      	add	r1, sp, #16
 80116d2:	4638      	mov	r0, r7
 80116d4:	f7fc fbc2 	bl	800de5c <_printf_i>
 80116d8:	e7eb      	b.n	80116b2 <_svfiprintf_r+0x1c2>
 80116da:	bf00      	nop
 80116dc:	08013cfc 	.word	0x08013cfc
 80116e0:	08013d06 	.word	0x08013d06
 80116e4:	0800d915 	.word	0x0800d915
 80116e8:	08011439 	.word	0x08011439
 80116ec:	08013d02 	.word	0x08013d02

080116f0 <_read_r>:
 80116f0:	b538      	push	{r3, r4, r5, lr}
 80116f2:	4d07      	ldr	r5, [pc, #28]	; (8011710 <_read_r+0x20>)
 80116f4:	4604      	mov	r4, r0
 80116f6:	4608      	mov	r0, r1
 80116f8:	4611      	mov	r1, r2
 80116fa:	2200      	movs	r2, #0
 80116fc:	602a      	str	r2, [r5, #0]
 80116fe:	461a      	mov	r2, r3
 8011700:	f7f2 fdfe 	bl	8004300 <_read>
 8011704:	1c43      	adds	r3, r0, #1
 8011706:	d102      	bne.n	801170e <_read_r+0x1e>
 8011708:	682b      	ldr	r3, [r5, #0]
 801170a:	b103      	cbz	r3, 801170e <_read_r+0x1e>
 801170c:	6023      	str	r3, [r4, #0]
 801170e:	bd38      	pop	{r3, r4, r5, pc}
 8011710:	200063b0 	.word	0x200063b0
 8011714:	00000000 	.word	0x00000000

08011718 <nan>:
 8011718:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011720 <nan+0x8>
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop
 8011720:	00000000 	.word	0x00000000
 8011724:	7ff80000 	.word	0x7ff80000

08011728 <strncmp>:
 8011728:	b510      	push	{r4, lr}
 801172a:	b16a      	cbz	r2, 8011748 <strncmp+0x20>
 801172c:	3901      	subs	r1, #1
 801172e:	1884      	adds	r4, r0, r2
 8011730:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011734:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011738:	4293      	cmp	r3, r2
 801173a:	d103      	bne.n	8011744 <strncmp+0x1c>
 801173c:	42a0      	cmp	r0, r4
 801173e:	d001      	beq.n	8011744 <strncmp+0x1c>
 8011740:	2b00      	cmp	r3, #0
 8011742:	d1f5      	bne.n	8011730 <strncmp+0x8>
 8011744:	1a98      	subs	r0, r3, r2
 8011746:	bd10      	pop	{r4, pc}
 8011748:	4610      	mov	r0, r2
 801174a:	e7fc      	b.n	8011746 <strncmp+0x1e>

0801174c <__ascii_wctomb>:
 801174c:	b149      	cbz	r1, 8011762 <__ascii_wctomb+0x16>
 801174e:	2aff      	cmp	r2, #255	; 0xff
 8011750:	bf85      	ittet	hi
 8011752:	238a      	movhi	r3, #138	; 0x8a
 8011754:	6003      	strhi	r3, [r0, #0]
 8011756:	700a      	strbls	r2, [r1, #0]
 8011758:	f04f 30ff 	movhi.w	r0, #4294967295
 801175c:	bf98      	it	ls
 801175e:	2001      	movls	r0, #1
 8011760:	4770      	bx	lr
 8011762:	4608      	mov	r0, r1
 8011764:	4770      	bx	lr
	...

08011768 <__assert_func>:
 8011768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801176a:	4614      	mov	r4, r2
 801176c:	461a      	mov	r2, r3
 801176e:	4b09      	ldr	r3, [pc, #36]	; (8011794 <__assert_func+0x2c>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	4605      	mov	r5, r0
 8011774:	68d8      	ldr	r0, [r3, #12]
 8011776:	b14c      	cbz	r4, 801178c <__assert_func+0x24>
 8011778:	4b07      	ldr	r3, [pc, #28]	; (8011798 <__assert_func+0x30>)
 801177a:	9100      	str	r1, [sp, #0]
 801177c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011780:	4906      	ldr	r1, [pc, #24]	; (801179c <__assert_func+0x34>)
 8011782:	462b      	mov	r3, r5
 8011784:	f000 f80e 	bl	80117a4 <fiprintf>
 8011788:	f000 fa78 	bl	8011c7c <abort>
 801178c:	4b04      	ldr	r3, [pc, #16]	; (80117a0 <__assert_func+0x38>)
 801178e:	461c      	mov	r4, r3
 8011790:	e7f3      	b.n	801177a <__assert_func+0x12>
 8011792:	bf00      	nop
 8011794:	20000040 	.word	0x20000040
 8011798:	08013d0d 	.word	0x08013d0d
 801179c:	08013d1a 	.word	0x08013d1a
 80117a0:	08013d48 	.word	0x08013d48

080117a4 <fiprintf>:
 80117a4:	b40e      	push	{r1, r2, r3}
 80117a6:	b503      	push	{r0, r1, lr}
 80117a8:	4601      	mov	r1, r0
 80117aa:	ab03      	add	r3, sp, #12
 80117ac:	4805      	ldr	r0, [pc, #20]	; (80117c4 <fiprintf+0x20>)
 80117ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80117b2:	6800      	ldr	r0, [r0, #0]
 80117b4:	9301      	str	r3, [sp, #4]
 80117b6:	f000 f871 	bl	801189c <_vfiprintf_r>
 80117ba:	b002      	add	sp, #8
 80117bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80117c0:	b003      	add	sp, #12
 80117c2:	4770      	bx	lr
 80117c4:	20000040 	.word	0x20000040

080117c8 <memmove>:
 80117c8:	4288      	cmp	r0, r1
 80117ca:	b510      	push	{r4, lr}
 80117cc:	eb01 0402 	add.w	r4, r1, r2
 80117d0:	d902      	bls.n	80117d8 <memmove+0x10>
 80117d2:	4284      	cmp	r4, r0
 80117d4:	4623      	mov	r3, r4
 80117d6:	d807      	bhi.n	80117e8 <memmove+0x20>
 80117d8:	1e43      	subs	r3, r0, #1
 80117da:	42a1      	cmp	r1, r4
 80117dc:	d008      	beq.n	80117f0 <memmove+0x28>
 80117de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117e6:	e7f8      	b.n	80117da <memmove+0x12>
 80117e8:	4402      	add	r2, r0
 80117ea:	4601      	mov	r1, r0
 80117ec:	428a      	cmp	r2, r1
 80117ee:	d100      	bne.n	80117f2 <memmove+0x2a>
 80117f0:	bd10      	pop	{r4, pc}
 80117f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117fa:	e7f7      	b.n	80117ec <memmove+0x24>

080117fc <_realloc_r>:
 80117fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117fe:	4607      	mov	r7, r0
 8011800:	4614      	mov	r4, r2
 8011802:	460e      	mov	r6, r1
 8011804:	b921      	cbnz	r1, 8011810 <_realloc_r+0x14>
 8011806:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801180a:	4611      	mov	r1, r2
 801180c:	f7fb bf88 	b.w	800d720 <_malloc_r>
 8011810:	b922      	cbnz	r2, 801181c <_realloc_r+0x20>
 8011812:	f7ff fdc1 	bl	8011398 <_free_r>
 8011816:	4625      	mov	r5, r4
 8011818:	4628      	mov	r0, r5
 801181a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801181c:	f000 fa9a 	bl	8011d54 <_malloc_usable_size_r>
 8011820:	42a0      	cmp	r0, r4
 8011822:	d20f      	bcs.n	8011844 <_realloc_r+0x48>
 8011824:	4621      	mov	r1, r4
 8011826:	4638      	mov	r0, r7
 8011828:	f7fb ff7a 	bl	800d720 <_malloc_r>
 801182c:	4605      	mov	r5, r0
 801182e:	2800      	cmp	r0, #0
 8011830:	d0f2      	beq.n	8011818 <_realloc_r+0x1c>
 8011832:	4631      	mov	r1, r6
 8011834:	4622      	mov	r2, r4
 8011836:	f7fb ff5c 	bl	800d6f2 <memcpy>
 801183a:	4631      	mov	r1, r6
 801183c:	4638      	mov	r0, r7
 801183e:	f7ff fdab 	bl	8011398 <_free_r>
 8011842:	e7e9      	b.n	8011818 <_realloc_r+0x1c>
 8011844:	4635      	mov	r5, r6
 8011846:	e7e7      	b.n	8011818 <_realloc_r+0x1c>

08011848 <__sfputc_r>:
 8011848:	6893      	ldr	r3, [r2, #8]
 801184a:	3b01      	subs	r3, #1
 801184c:	2b00      	cmp	r3, #0
 801184e:	b410      	push	{r4}
 8011850:	6093      	str	r3, [r2, #8]
 8011852:	da08      	bge.n	8011866 <__sfputc_r+0x1e>
 8011854:	6994      	ldr	r4, [r2, #24]
 8011856:	42a3      	cmp	r3, r4
 8011858:	db01      	blt.n	801185e <__sfputc_r+0x16>
 801185a:	290a      	cmp	r1, #10
 801185c:	d103      	bne.n	8011866 <__sfputc_r+0x1e>
 801185e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011862:	f000 b94b 	b.w	8011afc <__swbuf_r>
 8011866:	6813      	ldr	r3, [r2, #0]
 8011868:	1c58      	adds	r0, r3, #1
 801186a:	6010      	str	r0, [r2, #0]
 801186c:	7019      	strb	r1, [r3, #0]
 801186e:	4608      	mov	r0, r1
 8011870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011874:	4770      	bx	lr

08011876 <__sfputs_r>:
 8011876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011878:	4606      	mov	r6, r0
 801187a:	460f      	mov	r7, r1
 801187c:	4614      	mov	r4, r2
 801187e:	18d5      	adds	r5, r2, r3
 8011880:	42ac      	cmp	r4, r5
 8011882:	d101      	bne.n	8011888 <__sfputs_r+0x12>
 8011884:	2000      	movs	r0, #0
 8011886:	e007      	b.n	8011898 <__sfputs_r+0x22>
 8011888:	f814 1b01 	ldrb.w	r1, [r4], #1
 801188c:	463a      	mov	r2, r7
 801188e:	4630      	mov	r0, r6
 8011890:	f7ff ffda 	bl	8011848 <__sfputc_r>
 8011894:	1c43      	adds	r3, r0, #1
 8011896:	d1f3      	bne.n	8011880 <__sfputs_r+0xa>
 8011898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801189c <_vfiprintf_r>:
 801189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a0:	460d      	mov	r5, r1
 80118a2:	b09d      	sub	sp, #116	; 0x74
 80118a4:	4614      	mov	r4, r2
 80118a6:	4698      	mov	r8, r3
 80118a8:	4606      	mov	r6, r0
 80118aa:	b118      	cbz	r0, 80118b4 <_vfiprintf_r+0x18>
 80118ac:	6983      	ldr	r3, [r0, #24]
 80118ae:	b90b      	cbnz	r3, 80118b4 <_vfiprintf_r+0x18>
 80118b0:	f7fb fe5a 	bl	800d568 <__sinit>
 80118b4:	4b89      	ldr	r3, [pc, #548]	; (8011adc <_vfiprintf_r+0x240>)
 80118b6:	429d      	cmp	r5, r3
 80118b8:	d11b      	bne.n	80118f2 <_vfiprintf_r+0x56>
 80118ba:	6875      	ldr	r5, [r6, #4]
 80118bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118be:	07d9      	lsls	r1, r3, #31
 80118c0:	d405      	bmi.n	80118ce <_vfiprintf_r+0x32>
 80118c2:	89ab      	ldrh	r3, [r5, #12]
 80118c4:	059a      	lsls	r2, r3, #22
 80118c6:	d402      	bmi.n	80118ce <_vfiprintf_r+0x32>
 80118c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118ca:	f7fb ff10 	bl	800d6ee <__retarget_lock_acquire_recursive>
 80118ce:	89ab      	ldrh	r3, [r5, #12]
 80118d0:	071b      	lsls	r3, r3, #28
 80118d2:	d501      	bpl.n	80118d8 <_vfiprintf_r+0x3c>
 80118d4:	692b      	ldr	r3, [r5, #16]
 80118d6:	b9eb      	cbnz	r3, 8011914 <_vfiprintf_r+0x78>
 80118d8:	4629      	mov	r1, r5
 80118da:	4630      	mov	r0, r6
 80118dc:	f000 f960 	bl	8011ba0 <__swsetup_r>
 80118e0:	b1c0      	cbz	r0, 8011914 <_vfiprintf_r+0x78>
 80118e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118e4:	07dc      	lsls	r4, r3, #31
 80118e6:	d50e      	bpl.n	8011906 <_vfiprintf_r+0x6a>
 80118e8:	f04f 30ff 	mov.w	r0, #4294967295
 80118ec:	b01d      	add	sp, #116	; 0x74
 80118ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118f2:	4b7b      	ldr	r3, [pc, #492]	; (8011ae0 <_vfiprintf_r+0x244>)
 80118f4:	429d      	cmp	r5, r3
 80118f6:	d101      	bne.n	80118fc <_vfiprintf_r+0x60>
 80118f8:	68b5      	ldr	r5, [r6, #8]
 80118fa:	e7df      	b.n	80118bc <_vfiprintf_r+0x20>
 80118fc:	4b79      	ldr	r3, [pc, #484]	; (8011ae4 <_vfiprintf_r+0x248>)
 80118fe:	429d      	cmp	r5, r3
 8011900:	bf08      	it	eq
 8011902:	68f5      	ldreq	r5, [r6, #12]
 8011904:	e7da      	b.n	80118bc <_vfiprintf_r+0x20>
 8011906:	89ab      	ldrh	r3, [r5, #12]
 8011908:	0598      	lsls	r0, r3, #22
 801190a:	d4ed      	bmi.n	80118e8 <_vfiprintf_r+0x4c>
 801190c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801190e:	f7fb feef 	bl	800d6f0 <__retarget_lock_release_recursive>
 8011912:	e7e9      	b.n	80118e8 <_vfiprintf_r+0x4c>
 8011914:	2300      	movs	r3, #0
 8011916:	9309      	str	r3, [sp, #36]	; 0x24
 8011918:	2320      	movs	r3, #32
 801191a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801191e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011922:	2330      	movs	r3, #48	; 0x30
 8011924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011ae8 <_vfiprintf_r+0x24c>
 8011928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801192c:	f04f 0901 	mov.w	r9, #1
 8011930:	4623      	mov	r3, r4
 8011932:	469a      	mov	sl, r3
 8011934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011938:	b10a      	cbz	r2, 801193e <_vfiprintf_r+0xa2>
 801193a:	2a25      	cmp	r2, #37	; 0x25
 801193c:	d1f9      	bne.n	8011932 <_vfiprintf_r+0x96>
 801193e:	ebba 0b04 	subs.w	fp, sl, r4
 8011942:	d00b      	beq.n	801195c <_vfiprintf_r+0xc0>
 8011944:	465b      	mov	r3, fp
 8011946:	4622      	mov	r2, r4
 8011948:	4629      	mov	r1, r5
 801194a:	4630      	mov	r0, r6
 801194c:	f7ff ff93 	bl	8011876 <__sfputs_r>
 8011950:	3001      	adds	r0, #1
 8011952:	f000 80aa 	beq.w	8011aaa <_vfiprintf_r+0x20e>
 8011956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011958:	445a      	add	r2, fp
 801195a:	9209      	str	r2, [sp, #36]	; 0x24
 801195c:	f89a 3000 	ldrb.w	r3, [sl]
 8011960:	2b00      	cmp	r3, #0
 8011962:	f000 80a2 	beq.w	8011aaa <_vfiprintf_r+0x20e>
 8011966:	2300      	movs	r3, #0
 8011968:	f04f 32ff 	mov.w	r2, #4294967295
 801196c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011970:	f10a 0a01 	add.w	sl, sl, #1
 8011974:	9304      	str	r3, [sp, #16]
 8011976:	9307      	str	r3, [sp, #28]
 8011978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801197c:	931a      	str	r3, [sp, #104]	; 0x68
 801197e:	4654      	mov	r4, sl
 8011980:	2205      	movs	r2, #5
 8011982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011986:	4858      	ldr	r0, [pc, #352]	; (8011ae8 <_vfiprintf_r+0x24c>)
 8011988:	f7ee fc2a 	bl	80001e0 <memchr>
 801198c:	9a04      	ldr	r2, [sp, #16]
 801198e:	b9d8      	cbnz	r0, 80119c8 <_vfiprintf_r+0x12c>
 8011990:	06d1      	lsls	r1, r2, #27
 8011992:	bf44      	itt	mi
 8011994:	2320      	movmi	r3, #32
 8011996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801199a:	0713      	lsls	r3, r2, #28
 801199c:	bf44      	itt	mi
 801199e:	232b      	movmi	r3, #43	; 0x2b
 80119a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119a4:	f89a 3000 	ldrb.w	r3, [sl]
 80119a8:	2b2a      	cmp	r3, #42	; 0x2a
 80119aa:	d015      	beq.n	80119d8 <_vfiprintf_r+0x13c>
 80119ac:	9a07      	ldr	r2, [sp, #28]
 80119ae:	4654      	mov	r4, sl
 80119b0:	2000      	movs	r0, #0
 80119b2:	f04f 0c0a 	mov.w	ip, #10
 80119b6:	4621      	mov	r1, r4
 80119b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119bc:	3b30      	subs	r3, #48	; 0x30
 80119be:	2b09      	cmp	r3, #9
 80119c0:	d94e      	bls.n	8011a60 <_vfiprintf_r+0x1c4>
 80119c2:	b1b0      	cbz	r0, 80119f2 <_vfiprintf_r+0x156>
 80119c4:	9207      	str	r2, [sp, #28]
 80119c6:	e014      	b.n	80119f2 <_vfiprintf_r+0x156>
 80119c8:	eba0 0308 	sub.w	r3, r0, r8
 80119cc:	fa09 f303 	lsl.w	r3, r9, r3
 80119d0:	4313      	orrs	r3, r2
 80119d2:	9304      	str	r3, [sp, #16]
 80119d4:	46a2      	mov	sl, r4
 80119d6:	e7d2      	b.n	801197e <_vfiprintf_r+0xe2>
 80119d8:	9b03      	ldr	r3, [sp, #12]
 80119da:	1d19      	adds	r1, r3, #4
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	9103      	str	r1, [sp, #12]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	bfbb      	ittet	lt
 80119e4:	425b      	neglt	r3, r3
 80119e6:	f042 0202 	orrlt.w	r2, r2, #2
 80119ea:	9307      	strge	r3, [sp, #28]
 80119ec:	9307      	strlt	r3, [sp, #28]
 80119ee:	bfb8      	it	lt
 80119f0:	9204      	strlt	r2, [sp, #16]
 80119f2:	7823      	ldrb	r3, [r4, #0]
 80119f4:	2b2e      	cmp	r3, #46	; 0x2e
 80119f6:	d10c      	bne.n	8011a12 <_vfiprintf_r+0x176>
 80119f8:	7863      	ldrb	r3, [r4, #1]
 80119fa:	2b2a      	cmp	r3, #42	; 0x2a
 80119fc:	d135      	bne.n	8011a6a <_vfiprintf_r+0x1ce>
 80119fe:	9b03      	ldr	r3, [sp, #12]
 8011a00:	1d1a      	adds	r2, r3, #4
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	9203      	str	r2, [sp, #12]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	bfb8      	it	lt
 8011a0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a0e:	3402      	adds	r4, #2
 8011a10:	9305      	str	r3, [sp, #20]
 8011a12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011af8 <_vfiprintf_r+0x25c>
 8011a16:	7821      	ldrb	r1, [r4, #0]
 8011a18:	2203      	movs	r2, #3
 8011a1a:	4650      	mov	r0, sl
 8011a1c:	f7ee fbe0 	bl	80001e0 <memchr>
 8011a20:	b140      	cbz	r0, 8011a34 <_vfiprintf_r+0x198>
 8011a22:	2340      	movs	r3, #64	; 0x40
 8011a24:	eba0 000a 	sub.w	r0, r0, sl
 8011a28:	fa03 f000 	lsl.w	r0, r3, r0
 8011a2c:	9b04      	ldr	r3, [sp, #16]
 8011a2e:	4303      	orrs	r3, r0
 8011a30:	3401      	adds	r4, #1
 8011a32:	9304      	str	r3, [sp, #16]
 8011a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a38:	482c      	ldr	r0, [pc, #176]	; (8011aec <_vfiprintf_r+0x250>)
 8011a3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a3e:	2206      	movs	r2, #6
 8011a40:	f7ee fbce 	bl	80001e0 <memchr>
 8011a44:	2800      	cmp	r0, #0
 8011a46:	d03f      	beq.n	8011ac8 <_vfiprintf_r+0x22c>
 8011a48:	4b29      	ldr	r3, [pc, #164]	; (8011af0 <_vfiprintf_r+0x254>)
 8011a4a:	bb1b      	cbnz	r3, 8011a94 <_vfiprintf_r+0x1f8>
 8011a4c:	9b03      	ldr	r3, [sp, #12]
 8011a4e:	3307      	adds	r3, #7
 8011a50:	f023 0307 	bic.w	r3, r3, #7
 8011a54:	3308      	adds	r3, #8
 8011a56:	9303      	str	r3, [sp, #12]
 8011a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a5a:	443b      	add	r3, r7
 8011a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8011a5e:	e767      	b.n	8011930 <_vfiprintf_r+0x94>
 8011a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a64:	460c      	mov	r4, r1
 8011a66:	2001      	movs	r0, #1
 8011a68:	e7a5      	b.n	80119b6 <_vfiprintf_r+0x11a>
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	3401      	adds	r4, #1
 8011a6e:	9305      	str	r3, [sp, #20]
 8011a70:	4619      	mov	r1, r3
 8011a72:	f04f 0c0a 	mov.w	ip, #10
 8011a76:	4620      	mov	r0, r4
 8011a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a7c:	3a30      	subs	r2, #48	; 0x30
 8011a7e:	2a09      	cmp	r2, #9
 8011a80:	d903      	bls.n	8011a8a <_vfiprintf_r+0x1ee>
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d0c5      	beq.n	8011a12 <_vfiprintf_r+0x176>
 8011a86:	9105      	str	r1, [sp, #20]
 8011a88:	e7c3      	b.n	8011a12 <_vfiprintf_r+0x176>
 8011a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a8e:	4604      	mov	r4, r0
 8011a90:	2301      	movs	r3, #1
 8011a92:	e7f0      	b.n	8011a76 <_vfiprintf_r+0x1da>
 8011a94:	ab03      	add	r3, sp, #12
 8011a96:	9300      	str	r3, [sp, #0]
 8011a98:	462a      	mov	r2, r5
 8011a9a:	4b16      	ldr	r3, [pc, #88]	; (8011af4 <_vfiprintf_r+0x258>)
 8011a9c:	a904      	add	r1, sp, #16
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	f7fb ff38 	bl	800d914 <_printf_float>
 8011aa4:	4607      	mov	r7, r0
 8011aa6:	1c78      	adds	r0, r7, #1
 8011aa8:	d1d6      	bne.n	8011a58 <_vfiprintf_r+0x1bc>
 8011aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011aac:	07d9      	lsls	r1, r3, #31
 8011aae:	d405      	bmi.n	8011abc <_vfiprintf_r+0x220>
 8011ab0:	89ab      	ldrh	r3, [r5, #12]
 8011ab2:	059a      	lsls	r2, r3, #22
 8011ab4:	d402      	bmi.n	8011abc <_vfiprintf_r+0x220>
 8011ab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ab8:	f7fb fe1a 	bl	800d6f0 <__retarget_lock_release_recursive>
 8011abc:	89ab      	ldrh	r3, [r5, #12]
 8011abe:	065b      	lsls	r3, r3, #25
 8011ac0:	f53f af12 	bmi.w	80118e8 <_vfiprintf_r+0x4c>
 8011ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ac6:	e711      	b.n	80118ec <_vfiprintf_r+0x50>
 8011ac8:	ab03      	add	r3, sp, #12
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	462a      	mov	r2, r5
 8011ace:	4b09      	ldr	r3, [pc, #36]	; (8011af4 <_vfiprintf_r+0x258>)
 8011ad0:	a904      	add	r1, sp, #16
 8011ad2:	4630      	mov	r0, r6
 8011ad4:	f7fc f9c2 	bl	800de5c <_printf_i>
 8011ad8:	e7e4      	b.n	8011aa4 <_vfiprintf_r+0x208>
 8011ada:	bf00      	nop
 8011adc:	080138b4 	.word	0x080138b4
 8011ae0:	080138d4 	.word	0x080138d4
 8011ae4:	08013894 	.word	0x08013894
 8011ae8:	08013cfc 	.word	0x08013cfc
 8011aec:	08013d06 	.word	0x08013d06
 8011af0:	0800d915 	.word	0x0800d915
 8011af4:	08011877 	.word	0x08011877
 8011af8:	08013d02 	.word	0x08013d02

08011afc <__swbuf_r>:
 8011afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011afe:	460e      	mov	r6, r1
 8011b00:	4614      	mov	r4, r2
 8011b02:	4605      	mov	r5, r0
 8011b04:	b118      	cbz	r0, 8011b0e <__swbuf_r+0x12>
 8011b06:	6983      	ldr	r3, [r0, #24]
 8011b08:	b90b      	cbnz	r3, 8011b0e <__swbuf_r+0x12>
 8011b0a:	f7fb fd2d 	bl	800d568 <__sinit>
 8011b0e:	4b21      	ldr	r3, [pc, #132]	; (8011b94 <__swbuf_r+0x98>)
 8011b10:	429c      	cmp	r4, r3
 8011b12:	d12b      	bne.n	8011b6c <__swbuf_r+0x70>
 8011b14:	686c      	ldr	r4, [r5, #4]
 8011b16:	69a3      	ldr	r3, [r4, #24]
 8011b18:	60a3      	str	r3, [r4, #8]
 8011b1a:	89a3      	ldrh	r3, [r4, #12]
 8011b1c:	071a      	lsls	r2, r3, #28
 8011b1e:	d52f      	bpl.n	8011b80 <__swbuf_r+0x84>
 8011b20:	6923      	ldr	r3, [r4, #16]
 8011b22:	b36b      	cbz	r3, 8011b80 <__swbuf_r+0x84>
 8011b24:	6923      	ldr	r3, [r4, #16]
 8011b26:	6820      	ldr	r0, [r4, #0]
 8011b28:	1ac0      	subs	r0, r0, r3
 8011b2a:	6963      	ldr	r3, [r4, #20]
 8011b2c:	b2f6      	uxtb	r6, r6
 8011b2e:	4283      	cmp	r3, r0
 8011b30:	4637      	mov	r7, r6
 8011b32:	dc04      	bgt.n	8011b3e <__swbuf_r+0x42>
 8011b34:	4621      	mov	r1, r4
 8011b36:	4628      	mov	r0, r5
 8011b38:	f7fe fb7c 	bl	8010234 <_fflush_r>
 8011b3c:	bb30      	cbnz	r0, 8011b8c <__swbuf_r+0x90>
 8011b3e:	68a3      	ldr	r3, [r4, #8]
 8011b40:	3b01      	subs	r3, #1
 8011b42:	60a3      	str	r3, [r4, #8]
 8011b44:	6823      	ldr	r3, [r4, #0]
 8011b46:	1c5a      	adds	r2, r3, #1
 8011b48:	6022      	str	r2, [r4, #0]
 8011b4a:	701e      	strb	r6, [r3, #0]
 8011b4c:	6963      	ldr	r3, [r4, #20]
 8011b4e:	3001      	adds	r0, #1
 8011b50:	4283      	cmp	r3, r0
 8011b52:	d004      	beq.n	8011b5e <__swbuf_r+0x62>
 8011b54:	89a3      	ldrh	r3, [r4, #12]
 8011b56:	07db      	lsls	r3, r3, #31
 8011b58:	d506      	bpl.n	8011b68 <__swbuf_r+0x6c>
 8011b5a:	2e0a      	cmp	r6, #10
 8011b5c:	d104      	bne.n	8011b68 <__swbuf_r+0x6c>
 8011b5e:	4621      	mov	r1, r4
 8011b60:	4628      	mov	r0, r5
 8011b62:	f7fe fb67 	bl	8010234 <_fflush_r>
 8011b66:	b988      	cbnz	r0, 8011b8c <__swbuf_r+0x90>
 8011b68:	4638      	mov	r0, r7
 8011b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b6c:	4b0a      	ldr	r3, [pc, #40]	; (8011b98 <__swbuf_r+0x9c>)
 8011b6e:	429c      	cmp	r4, r3
 8011b70:	d101      	bne.n	8011b76 <__swbuf_r+0x7a>
 8011b72:	68ac      	ldr	r4, [r5, #8]
 8011b74:	e7cf      	b.n	8011b16 <__swbuf_r+0x1a>
 8011b76:	4b09      	ldr	r3, [pc, #36]	; (8011b9c <__swbuf_r+0xa0>)
 8011b78:	429c      	cmp	r4, r3
 8011b7a:	bf08      	it	eq
 8011b7c:	68ec      	ldreq	r4, [r5, #12]
 8011b7e:	e7ca      	b.n	8011b16 <__swbuf_r+0x1a>
 8011b80:	4621      	mov	r1, r4
 8011b82:	4628      	mov	r0, r5
 8011b84:	f000 f80c 	bl	8011ba0 <__swsetup_r>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	d0cb      	beq.n	8011b24 <__swbuf_r+0x28>
 8011b8c:	f04f 37ff 	mov.w	r7, #4294967295
 8011b90:	e7ea      	b.n	8011b68 <__swbuf_r+0x6c>
 8011b92:	bf00      	nop
 8011b94:	080138b4 	.word	0x080138b4
 8011b98:	080138d4 	.word	0x080138d4
 8011b9c:	08013894 	.word	0x08013894

08011ba0 <__swsetup_r>:
 8011ba0:	4b32      	ldr	r3, [pc, #200]	; (8011c6c <__swsetup_r+0xcc>)
 8011ba2:	b570      	push	{r4, r5, r6, lr}
 8011ba4:	681d      	ldr	r5, [r3, #0]
 8011ba6:	4606      	mov	r6, r0
 8011ba8:	460c      	mov	r4, r1
 8011baa:	b125      	cbz	r5, 8011bb6 <__swsetup_r+0x16>
 8011bac:	69ab      	ldr	r3, [r5, #24]
 8011bae:	b913      	cbnz	r3, 8011bb6 <__swsetup_r+0x16>
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	f7fb fcd9 	bl	800d568 <__sinit>
 8011bb6:	4b2e      	ldr	r3, [pc, #184]	; (8011c70 <__swsetup_r+0xd0>)
 8011bb8:	429c      	cmp	r4, r3
 8011bba:	d10f      	bne.n	8011bdc <__swsetup_r+0x3c>
 8011bbc:	686c      	ldr	r4, [r5, #4]
 8011bbe:	89a3      	ldrh	r3, [r4, #12]
 8011bc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011bc4:	0719      	lsls	r1, r3, #28
 8011bc6:	d42c      	bmi.n	8011c22 <__swsetup_r+0x82>
 8011bc8:	06dd      	lsls	r5, r3, #27
 8011bca:	d411      	bmi.n	8011bf0 <__swsetup_r+0x50>
 8011bcc:	2309      	movs	r3, #9
 8011bce:	6033      	str	r3, [r6, #0]
 8011bd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011bd4:	81a3      	strh	r3, [r4, #12]
 8011bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bda:	e03e      	b.n	8011c5a <__swsetup_r+0xba>
 8011bdc:	4b25      	ldr	r3, [pc, #148]	; (8011c74 <__swsetup_r+0xd4>)
 8011bde:	429c      	cmp	r4, r3
 8011be0:	d101      	bne.n	8011be6 <__swsetup_r+0x46>
 8011be2:	68ac      	ldr	r4, [r5, #8]
 8011be4:	e7eb      	b.n	8011bbe <__swsetup_r+0x1e>
 8011be6:	4b24      	ldr	r3, [pc, #144]	; (8011c78 <__swsetup_r+0xd8>)
 8011be8:	429c      	cmp	r4, r3
 8011bea:	bf08      	it	eq
 8011bec:	68ec      	ldreq	r4, [r5, #12]
 8011bee:	e7e6      	b.n	8011bbe <__swsetup_r+0x1e>
 8011bf0:	0758      	lsls	r0, r3, #29
 8011bf2:	d512      	bpl.n	8011c1a <__swsetup_r+0x7a>
 8011bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bf6:	b141      	cbz	r1, 8011c0a <__swsetup_r+0x6a>
 8011bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bfc:	4299      	cmp	r1, r3
 8011bfe:	d002      	beq.n	8011c06 <__swsetup_r+0x66>
 8011c00:	4630      	mov	r0, r6
 8011c02:	f7ff fbc9 	bl	8011398 <_free_r>
 8011c06:	2300      	movs	r3, #0
 8011c08:	6363      	str	r3, [r4, #52]	; 0x34
 8011c0a:	89a3      	ldrh	r3, [r4, #12]
 8011c0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c10:	81a3      	strh	r3, [r4, #12]
 8011c12:	2300      	movs	r3, #0
 8011c14:	6063      	str	r3, [r4, #4]
 8011c16:	6923      	ldr	r3, [r4, #16]
 8011c18:	6023      	str	r3, [r4, #0]
 8011c1a:	89a3      	ldrh	r3, [r4, #12]
 8011c1c:	f043 0308 	orr.w	r3, r3, #8
 8011c20:	81a3      	strh	r3, [r4, #12]
 8011c22:	6923      	ldr	r3, [r4, #16]
 8011c24:	b94b      	cbnz	r3, 8011c3a <__swsetup_r+0x9a>
 8011c26:	89a3      	ldrh	r3, [r4, #12]
 8011c28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c30:	d003      	beq.n	8011c3a <__swsetup_r+0x9a>
 8011c32:	4621      	mov	r1, r4
 8011c34:	4630      	mov	r0, r6
 8011c36:	f000 f84d 	bl	8011cd4 <__smakebuf_r>
 8011c3a:	89a0      	ldrh	r0, [r4, #12]
 8011c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c40:	f010 0301 	ands.w	r3, r0, #1
 8011c44:	d00a      	beq.n	8011c5c <__swsetup_r+0xbc>
 8011c46:	2300      	movs	r3, #0
 8011c48:	60a3      	str	r3, [r4, #8]
 8011c4a:	6963      	ldr	r3, [r4, #20]
 8011c4c:	425b      	negs	r3, r3
 8011c4e:	61a3      	str	r3, [r4, #24]
 8011c50:	6923      	ldr	r3, [r4, #16]
 8011c52:	b943      	cbnz	r3, 8011c66 <__swsetup_r+0xc6>
 8011c54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011c58:	d1ba      	bne.n	8011bd0 <__swsetup_r+0x30>
 8011c5a:	bd70      	pop	{r4, r5, r6, pc}
 8011c5c:	0781      	lsls	r1, r0, #30
 8011c5e:	bf58      	it	pl
 8011c60:	6963      	ldrpl	r3, [r4, #20]
 8011c62:	60a3      	str	r3, [r4, #8]
 8011c64:	e7f4      	b.n	8011c50 <__swsetup_r+0xb0>
 8011c66:	2000      	movs	r0, #0
 8011c68:	e7f7      	b.n	8011c5a <__swsetup_r+0xba>
 8011c6a:	bf00      	nop
 8011c6c:	20000040 	.word	0x20000040
 8011c70:	080138b4 	.word	0x080138b4
 8011c74:	080138d4 	.word	0x080138d4
 8011c78:	08013894 	.word	0x08013894

08011c7c <abort>:
 8011c7c:	b508      	push	{r3, lr}
 8011c7e:	2006      	movs	r0, #6
 8011c80:	f000 f898 	bl	8011db4 <raise>
 8011c84:	2001      	movs	r0, #1
 8011c86:	f7f2 fb31 	bl	80042ec <_exit>

08011c8a <__swhatbuf_r>:
 8011c8a:	b570      	push	{r4, r5, r6, lr}
 8011c8c:	460e      	mov	r6, r1
 8011c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c92:	2900      	cmp	r1, #0
 8011c94:	b096      	sub	sp, #88	; 0x58
 8011c96:	4614      	mov	r4, r2
 8011c98:	461d      	mov	r5, r3
 8011c9a:	da07      	bge.n	8011cac <__swhatbuf_r+0x22>
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	602b      	str	r3, [r5, #0]
 8011ca0:	89b3      	ldrh	r3, [r6, #12]
 8011ca2:	061a      	lsls	r2, r3, #24
 8011ca4:	d410      	bmi.n	8011cc8 <__swhatbuf_r+0x3e>
 8011ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011caa:	e00e      	b.n	8011cca <__swhatbuf_r+0x40>
 8011cac:	466a      	mov	r2, sp
 8011cae:	f000 f89d 	bl	8011dec <_fstat_r>
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	dbf2      	blt.n	8011c9c <__swhatbuf_r+0x12>
 8011cb6:	9a01      	ldr	r2, [sp, #4]
 8011cb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011cbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011cc0:	425a      	negs	r2, r3
 8011cc2:	415a      	adcs	r2, r3
 8011cc4:	602a      	str	r2, [r5, #0]
 8011cc6:	e7ee      	b.n	8011ca6 <__swhatbuf_r+0x1c>
 8011cc8:	2340      	movs	r3, #64	; 0x40
 8011cca:	2000      	movs	r0, #0
 8011ccc:	6023      	str	r3, [r4, #0]
 8011cce:	b016      	add	sp, #88	; 0x58
 8011cd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08011cd4 <__smakebuf_r>:
 8011cd4:	898b      	ldrh	r3, [r1, #12]
 8011cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011cd8:	079d      	lsls	r5, r3, #30
 8011cda:	4606      	mov	r6, r0
 8011cdc:	460c      	mov	r4, r1
 8011cde:	d507      	bpl.n	8011cf0 <__smakebuf_r+0x1c>
 8011ce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ce4:	6023      	str	r3, [r4, #0]
 8011ce6:	6123      	str	r3, [r4, #16]
 8011ce8:	2301      	movs	r3, #1
 8011cea:	6163      	str	r3, [r4, #20]
 8011cec:	b002      	add	sp, #8
 8011cee:	bd70      	pop	{r4, r5, r6, pc}
 8011cf0:	ab01      	add	r3, sp, #4
 8011cf2:	466a      	mov	r2, sp
 8011cf4:	f7ff ffc9 	bl	8011c8a <__swhatbuf_r>
 8011cf8:	9900      	ldr	r1, [sp, #0]
 8011cfa:	4605      	mov	r5, r0
 8011cfc:	4630      	mov	r0, r6
 8011cfe:	f7fb fd0f 	bl	800d720 <_malloc_r>
 8011d02:	b948      	cbnz	r0, 8011d18 <__smakebuf_r+0x44>
 8011d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d08:	059a      	lsls	r2, r3, #22
 8011d0a:	d4ef      	bmi.n	8011cec <__smakebuf_r+0x18>
 8011d0c:	f023 0303 	bic.w	r3, r3, #3
 8011d10:	f043 0302 	orr.w	r3, r3, #2
 8011d14:	81a3      	strh	r3, [r4, #12]
 8011d16:	e7e3      	b.n	8011ce0 <__smakebuf_r+0xc>
 8011d18:	4b0d      	ldr	r3, [pc, #52]	; (8011d50 <__smakebuf_r+0x7c>)
 8011d1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011d1c:	89a3      	ldrh	r3, [r4, #12]
 8011d1e:	6020      	str	r0, [r4, #0]
 8011d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d24:	81a3      	strh	r3, [r4, #12]
 8011d26:	9b00      	ldr	r3, [sp, #0]
 8011d28:	6163      	str	r3, [r4, #20]
 8011d2a:	9b01      	ldr	r3, [sp, #4]
 8011d2c:	6120      	str	r0, [r4, #16]
 8011d2e:	b15b      	cbz	r3, 8011d48 <__smakebuf_r+0x74>
 8011d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d34:	4630      	mov	r0, r6
 8011d36:	f000 f86b 	bl	8011e10 <_isatty_r>
 8011d3a:	b128      	cbz	r0, 8011d48 <__smakebuf_r+0x74>
 8011d3c:	89a3      	ldrh	r3, [r4, #12]
 8011d3e:	f023 0303 	bic.w	r3, r3, #3
 8011d42:	f043 0301 	orr.w	r3, r3, #1
 8011d46:	81a3      	strh	r3, [r4, #12]
 8011d48:	89a0      	ldrh	r0, [r4, #12]
 8011d4a:	4305      	orrs	r5, r0
 8011d4c:	81a5      	strh	r5, [r4, #12]
 8011d4e:	e7cd      	b.n	8011cec <__smakebuf_r+0x18>
 8011d50:	0800d501 	.word	0x0800d501

08011d54 <_malloc_usable_size_r>:
 8011d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d58:	1f18      	subs	r0, r3, #4
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	bfbc      	itt	lt
 8011d5e:	580b      	ldrlt	r3, [r1, r0]
 8011d60:	18c0      	addlt	r0, r0, r3
 8011d62:	4770      	bx	lr

08011d64 <_raise_r>:
 8011d64:	291f      	cmp	r1, #31
 8011d66:	b538      	push	{r3, r4, r5, lr}
 8011d68:	4604      	mov	r4, r0
 8011d6a:	460d      	mov	r5, r1
 8011d6c:	d904      	bls.n	8011d78 <_raise_r+0x14>
 8011d6e:	2316      	movs	r3, #22
 8011d70:	6003      	str	r3, [r0, #0]
 8011d72:	f04f 30ff 	mov.w	r0, #4294967295
 8011d76:	bd38      	pop	{r3, r4, r5, pc}
 8011d78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011d7a:	b112      	cbz	r2, 8011d82 <_raise_r+0x1e>
 8011d7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d80:	b94b      	cbnz	r3, 8011d96 <_raise_r+0x32>
 8011d82:	4620      	mov	r0, r4
 8011d84:	f000 f830 	bl	8011de8 <_getpid_r>
 8011d88:	462a      	mov	r2, r5
 8011d8a:	4601      	mov	r1, r0
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d92:	f000 b817 	b.w	8011dc4 <_kill_r>
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d00a      	beq.n	8011db0 <_raise_r+0x4c>
 8011d9a:	1c59      	adds	r1, r3, #1
 8011d9c:	d103      	bne.n	8011da6 <_raise_r+0x42>
 8011d9e:	2316      	movs	r3, #22
 8011da0:	6003      	str	r3, [r0, #0]
 8011da2:	2001      	movs	r0, #1
 8011da4:	e7e7      	b.n	8011d76 <_raise_r+0x12>
 8011da6:	2400      	movs	r4, #0
 8011da8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011dac:	4628      	mov	r0, r5
 8011dae:	4798      	blx	r3
 8011db0:	2000      	movs	r0, #0
 8011db2:	e7e0      	b.n	8011d76 <_raise_r+0x12>

08011db4 <raise>:
 8011db4:	4b02      	ldr	r3, [pc, #8]	; (8011dc0 <raise+0xc>)
 8011db6:	4601      	mov	r1, r0
 8011db8:	6818      	ldr	r0, [r3, #0]
 8011dba:	f7ff bfd3 	b.w	8011d64 <_raise_r>
 8011dbe:	bf00      	nop
 8011dc0:	20000040 	.word	0x20000040

08011dc4 <_kill_r>:
 8011dc4:	b538      	push	{r3, r4, r5, lr}
 8011dc6:	4d07      	ldr	r5, [pc, #28]	; (8011de4 <_kill_r+0x20>)
 8011dc8:	2300      	movs	r3, #0
 8011dca:	4604      	mov	r4, r0
 8011dcc:	4608      	mov	r0, r1
 8011dce:	4611      	mov	r1, r2
 8011dd0:	602b      	str	r3, [r5, #0]
 8011dd2:	f7f2 fa7b 	bl	80042cc <_kill>
 8011dd6:	1c43      	adds	r3, r0, #1
 8011dd8:	d102      	bne.n	8011de0 <_kill_r+0x1c>
 8011dda:	682b      	ldr	r3, [r5, #0]
 8011ddc:	b103      	cbz	r3, 8011de0 <_kill_r+0x1c>
 8011dde:	6023      	str	r3, [r4, #0]
 8011de0:	bd38      	pop	{r3, r4, r5, pc}
 8011de2:	bf00      	nop
 8011de4:	200063b0 	.word	0x200063b0

08011de8 <_getpid_r>:
 8011de8:	f7f2 ba68 	b.w	80042bc <_getpid>

08011dec <_fstat_r>:
 8011dec:	b538      	push	{r3, r4, r5, lr}
 8011dee:	4d07      	ldr	r5, [pc, #28]	; (8011e0c <_fstat_r+0x20>)
 8011df0:	2300      	movs	r3, #0
 8011df2:	4604      	mov	r4, r0
 8011df4:	4608      	mov	r0, r1
 8011df6:	4611      	mov	r1, r2
 8011df8:	602b      	str	r3, [r5, #0]
 8011dfa:	f7f2 fac6 	bl	800438a <_fstat>
 8011dfe:	1c43      	adds	r3, r0, #1
 8011e00:	d102      	bne.n	8011e08 <_fstat_r+0x1c>
 8011e02:	682b      	ldr	r3, [r5, #0]
 8011e04:	b103      	cbz	r3, 8011e08 <_fstat_r+0x1c>
 8011e06:	6023      	str	r3, [r4, #0]
 8011e08:	bd38      	pop	{r3, r4, r5, pc}
 8011e0a:	bf00      	nop
 8011e0c:	200063b0 	.word	0x200063b0

08011e10 <_isatty_r>:
 8011e10:	b538      	push	{r3, r4, r5, lr}
 8011e12:	4d06      	ldr	r5, [pc, #24]	; (8011e2c <_isatty_r+0x1c>)
 8011e14:	2300      	movs	r3, #0
 8011e16:	4604      	mov	r4, r0
 8011e18:	4608      	mov	r0, r1
 8011e1a:	602b      	str	r3, [r5, #0]
 8011e1c:	f7f2 fac5 	bl	80043aa <_isatty>
 8011e20:	1c43      	adds	r3, r0, #1
 8011e22:	d102      	bne.n	8011e2a <_isatty_r+0x1a>
 8011e24:	682b      	ldr	r3, [r5, #0]
 8011e26:	b103      	cbz	r3, 8011e2a <_isatty_r+0x1a>
 8011e28:	6023      	str	r3, [r4, #0]
 8011e2a:	bd38      	pop	{r3, r4, r5, pc}
 8011e2c:	200063b0 	.word	0x200063b0

08011e30 <pow>:
 8011e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e34:	ec59 8b10 	vmov	r8, r9, d0
 8011e38:	ec57 6b11 	vmov	r6, r7, d1
 8011e3c:	f000 f8a8 	bl	8011f90 <__ieee754_pow>
 8011e40:	4b4e      	ldr	r3, [pc, #312]	; (8011f7c <pow+0x14c>)
 8011e42:	f993 3000 	ldrsb.w	r3, [r3]
 8011e46:	3301      	adds	r3, #1
 8011e48:	ec55 4b10 	vmov	r4, r5, d0
 8011e4c:	d015      	beq.n	8011e7a <pow+0x4a>
 8011e4e:	4632      	mov	r2, r6
 8011e50:	463b      	mov	r3, r7
 8011e52:	4630      	mov	r0, r6
 8011e54:	4639      	mov	r1, r7
 8011e56:	f7ee fe69 	bl	8000b2c <__aeabi_dcmpun>
 8011e5a:	b970      	cbnz	r0, 8011e7a <pow+0x4a>
 8011e5c:	4642      	mov	r2, r8
 8011e5e:	464b      	mov	r3, r9
 8011e60:	4640      	mov	r0, r8
 8011e62:	4649      	mov	r1, r9
 8011e64:	f7ee fe62 	bl	8000b2c <__aeabi_dcmpun>
 8011e68:	2200      	movs	r2, #0
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	b148      	cbz	r0, 8011e82 <pow+0x52>
 8011e6e:	4630      	mov	r0, r6
 8011e70:	4639      	mov	r1, r7
 8011e72:	f7ee fe29 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e76:	2800      	cmp	r0, #0
 8011e78:	d17d      	bne.n	8011f76 <pow+0x146>
 8011e7a:	ec45 4b10 	vmov	d0, r4, r5
 8011e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e82:	4640      	mov	r0, r8
 8011e84:	4649      	mov	r1, r9
 8011e86:	f7ee fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e8a:	b1e0      	cbz	r0, 8011ec6 <pow+0x96>
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	2300      	movs	r3, #0
 8011e90:	4630      	mov	r0, r6
 8011e92:	4639      	mov	r1, r7
 8011e94:	f7ee fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	d16c      	bne.n	8011f76 <pow+0x146>
 8011e9c:	ec47 6b10 	vmov	d0, r6, r7
 8011ea0:	f000 fe55 	bl	8012b4e <finite>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d0e8      	beq.n	8011e7a <pow+0x4a>
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	2300      	movs	r3, #0
 8011eac:	4630      	mov	r0, r6
 8011eae:	4639      	mov	r1, r7
 8011eb0:	f7ee fe14 	bl	8000adc <__aeabi_dcmplt>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	d0e0      	beq.n	8011e7a <pow+0x4a>
 8011eb8:	f7fb faf8 	bl	800d4ac <__errno>
 8011ebc:	2321      	movs	r3, #33	; 0x21
 8011ebe:	6003      	str	r3, [r0, #0]
 8011ec0:	2400      	movs	r4, #0
 8011ec2:	4d2f      	ldr	r5, [pc, #188]	; (8011f80 <pow+0x150>)
 8011ec4:	e7d9      	b.n	8011e7a <pow+0x4a>
 8011ec6:	ec45 4b10 	vmov	d0, r4, r5
 8011eca:	f000 fe40 	bl	8012b4e <finite>
 8011ece:	bbb8      	cbnz	r0, 8011f40 <pow+0x110>
 8011ed0:	ec49 8b10 	vmov	d0, r8, r9
 8011ed4:	f000 fe3b 	bl	8012b4e <finite>
 8011ed8:	b390      	cbz	r0, 8011f40 <pow+0x110>
 8011eda:	ec47 6b10 	vmov	d0, r6, r7
 8011ede:	f000 fe36 	bl	8012b4e <finite>
 8011ee2:	b368      	cbz	r0, 8011f40 <pow+0x110>
 8011ee4:	4622      	mov	r2, r4
 8011ee6:	462b      	mov	r3, r5
 8011ee8:	4620      	mov	r0, r4
 8011eea:	4629      	mov	r1, r5
 8011eec:	f7ee fe1e 	bl	8000b2c <__aeabi_dcmpun>
 8011ef0:	b160      	cbz	r0, 8011f0c <pow+0xdc>
 8011ef2:	f7fb fadb 	bl	800d4ac <__errno>
 8011ef6:	2321      	movs	r3, #33	; 0x21
 8011ef8:	6003      	str	r3, [r0, #0]
 8011efa:	2200      	movs	r2, #0
 8011efc:	2300      	movs	r3, #0
 8011efe:	4610      	mov	r0, r2
 8011f00:	4619      	mov	r1, r3
 8011f02:	f7ee fca3 	bl	800084c <__aeabi_ddiv>
 8011f06:	4604      	mov	r4, r0
 8011f08:	460d      	mov	r5, r1
 8011f0a:	e7b6      	b.n	8011e7a <pow+0x4a>
 8011f0c:	f7fb face 	bl	800d4ac <__errno>
 8011f10:	2322      	movs	r3, #34	; 0x22
 8011f12:	6003      	str	r3, [r0, #0]
 8011f14:	2200      	movs	r2, #0
 8011f16:	2300      	movs	r3, #0
 8011f18:	4640      	mov	r0, r8
 8011f1a:	4649      	mov	r1, r9
 8011f1c:	f7ee fdde 	bl	8000adc <__aeabi_dcmplt>
 8011f20:	2400      	movs	r4, #0
 8011f22:	b158      	cbz	r0, 8011f3c <pow+0x10c>
 8011f24:	ec47 6b10 	vmov	d0, r6, r7
 8011f28:	f000 fe1c 	bl	8012b64 <rint>
 8011f2c:	4632      	mov	r2, r6
 8011f2e:	ec51 0b10 	vmov	r0, r1, d0
 8011f32:	463b      	mov	r3, r7
 8011f34:	f7ee fdc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d0c2      	beq.n	8011ec2 <pow+0x92>
 8011f3c:	4d11      	ldr	r5, [pc, #68]	; (8011f84 <pow+0x154>)
 8011f3e:	e79c      	b.n	8011e7a <pow+0x4a>
 8011f40:	2200      	movs	r2, #0
 8011f42:	2300      	movs	r3, #0
 8011f44:	4620      	mov	r0, r4
 8011f46:	4629      	mov	r1, r5
 8011f48:	f7ee fdbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	d094      	beq.n	8011e7a <pow+0x4a>
 8011f50:	ec49 8b10 	vmov	d0, r8, r9
 8011f54:	f000 fdfb 	bl	8012b4e <finite>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d08e      	beq.n	8011e7a <pow+0x4a>
 8011f5c:	ec47 6b10 	vmov	d0, r6, r7
 8011f60:	f000 fdf5 	bl	8012b4e <finite>
 8011f64:	2800      	cmp	r0, #0
 8011f66:	d088      	beq.n	8011e7a <pow+0x4a>
 8011f68:	f7fb faa0 	bl	800d4ac <__errno>
 8011f6c:	2322      	movs	r3, #34	; 0x22
 8011f6e:	6003      	str	r3, [r0, #0]
 8011f70:	2400      	movs	r4, #0
 8011f72:	2500      	movs	r5, #0
 8011f74:	e781      	b.n	8011e7a <pow+0x4a>
 8011f76:	4d04      	ldr	r5, [pc, #16]	; (8011f88 <pow+0x158>)
 8011f78:	2400      	movs	r4, #0
 8011f7a:	e77e      	b.n	8011e7a <pow+0x4a>
 8011f7c:	20000214 	.word	0x20000214
 8011f80:	fff00000 	.word	0xfff00000
 8011f84:	7ff00000 	.word	0x7ff00000
 8011f88:	3ff00000 	.word	0x3ff00000
 8011f8c:	00000000 	.word	0x00000000

08011f90 <__ieee754_pow>:
 8011f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f94:	ed2d 8b06 	vpush	{d8-d10}
 8011f98:	b08d      	sub	sp, #52	; 0x34
 8011f9a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011f9e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8011fa2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8011fa6:	ea56 0100 	orrs.w	r1, r6, r0
 8011faa:	ec53 2b10 	vmov	r2, r3, d0
 8011fae:	f000 84d1 	beq.w	8012954 <__ieee754_pow+0x9c4>
 8011fb2:	497f      	ldr	r1, [pc, #508]	; (80121b0 <__ieee754_pow+0x220>)
 8011fb4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011fb8:	428c      	cmp	r4, r1
 8011fba:	ee10 8a10 	vmov	r8, s0
 8011fbe:	4699      	mov	r9, r3
 8011fc0:	dc09      	bgt.n	8011fd6 <__ieee754_pow+0x46>
 8011fc2:	d103      	bne.n	8011fcc <__ieee754_pow+0x3c>
 8011fc4:	b97a      	cbnz	r2, 8011fe6 <__ieee754_pow+0x56>
 8011fc6:	42a6      	cmp	r6, r4
 8011fc8:	dd02      	ble.n	8011fd0 <__ieee754_pow+0x40>
 8011fca:	e00c      	b.n	8011fe6 <__ieee754_pow+0x56>
 8011fcc:	428e      	cmp	r6, r1
 8011fce:	dc02      	bgt.n	8011fd6 <__ieee754_pow+0x46>
 8011fd0:	428e      	cmp	r6, r1
 8011fd2:	d110      	bne.n	8011ff6 <__ieee754_pow+0x66>
 8011fd4:	b178      	cbz	r0, 8011ff6 <__ieee754_pow+0x66>
 8011fd6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011fda:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011fde:	ea54 0308 	orrs.w	r3, r4, r8
 8011fe2:	f000 84b7 	beq.w	8012954 <__ieee754_pow+0x9c4>
 8011fe6:	4873      	ldr	r0, [pc, #460]	; (80121b4 <__ieee754_pow+0x224>)
 8011fe8:	b00d      	add	sp, #52	; 0x34
 8011fea:	ecbd 8b06 	vpop	{d8-d10}
 8011fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff2:	f7ff bb91 	b.w	8011718 <nan>
 8011ff6:	f1b9 0f00 	cmp.w	r9, #0
 8011ffa:	da36      	bge.n	801206a <__ieee754_pow+0xda>
 8011ffc:	496e      	ldr	r1, [pc, #440]	; (80121b8 <__ieee754_pow+0x228>)
 8011ffe:	428e      	cmp	r6, r1
 8012000:	dc51      	bgt.n	80120a6 <__ieee754_pow+0x116>
 8012002:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8012006:	428e      	cmp	r6, r1
 8012008:	f340 84af 	ble.w	801296a <__ieee754_pow+0x9da>
 801200c:	1531      	asrs	r1, r6, #20
 801200e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012012:	2914      	cmp	r1, #20
 8012014:	dd0f      	ble.n	8012036 <__ieee754_pow+0xa6>
 8012016:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801201a:	fa20 fc01 	lsr.w	ip, r0, r1
 801201e:	fa0c f101 	lsl.w	r1, ip, r1
 8012022:	4281      	cmp	r1, r0
 8012024:	f040 84a1 	bne.w	801296a <__ieee754_pow+0x9da>
 8012028:	f00c 0c01 	and.w	ip, ip, #1
 801202c:	f1cc 0102 	rsb	r1, ip, #2
 8012030:	9100      	str	r1, [sp, #0]
 8012032:	b180      	cbz	r0, 8012056 <__ieee754_pow+0xc6>
 8012034:	e059      	b.n	80120ea <__ieee754_pow+0x15a>
 8012036:	2800      	cmp	r0, #0
 8012038:	d155      	bne.n	80120e6 <__ieee754_pow+0x156>
 801203a:	f1c1 0114 	rsb	r1, r1, #20
 801203e:	fa46 fc01 	asr.w	ip, r6, r1
 8012042:	fa0c f101 	lsl.w	r1, ip, r1
 8012046:	42b1      	cmp	r1, r6
 8012048:	f040 848c 	bne.w	8012964 <__ieee754_pow+0x9d4>
 801204c:	f00c 0c01 	and.w	ip, ip, #1
 8012050:	f1cc 0102 	rsb	r1, ip, #2
 8012054:	9100      	str	r1, [sp, #0]
 8012056:	4959      	ldr	r1, [pc, #356]	; (80121bc <__ieee754_pow+0x22c>)
 8012058:	428e      	cmp	r6, r1
 801205a:	d12d      	bne.n	80120b8 <__ieee754_pow+0x128>
 801205c:	2f00      	cmp	r7, #0
 801205e:	da79      	bge.n	8012154 <__ieee754_pow+0x1c4>
 8012060:	4956      	ldr	r1, [pc, #344]	; (80121bc <__ieee754_pow+0x22c>)
 8012062:	2000      	movs	r0, #0
 8012064:	f7ee fbf2 	bl	800084c <__aeabi_ddiv>
 8012068:	e016      	b.n	8012098 <__ieee754_pow+0x108>
 801206a:	2100      	movs	r1, #0
 801206c:	9100      	str	r1, [sp, #0]
 801206e:	2800      	cmp	r0, #0
 8012070:	d13b      	bne.n	80120ea <__ieee754_pow+0x15a>
 8012072:	494f      	ldr	r1, [pc, #316]	; (80121b0 <__ieee754_pow+0x220>)
 8012074:	428e      	cmp	r6, r1
 8012076:	d1ee      	bne.n	8012056 <__ieee754_pow+0xc6>
 8012078:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801207c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012080:	ea53 0308 	orrs.w	r3, r3, r8
 8012084:	f000 8466 	beq.w	8012954 <__ieee754_pow+0x9c4>
 8012088:	4b4d      	ldr	r3, [pc, #308]	; (80121c0 <__ieee754_pow+0x230>)
 801208a:	429c      	cmp	r4, r3
 801208c:	dd0d      	ble.n	80120aa <__ieee754_pow+0x11a>
 801208e:	2f00      	cmp	r7, #0
 8012090:	f280 8464 	bge.w	801295c <__ieee754_pow+0x9cc>
 8012094:	2000      	movs	r0, #0
 8012096:	2100      	movs	r1, #0
 8012098:	ec41 0b10 	vmov	d0, r0, r1
 801209c:	b00d      	add	sp, #52	; 0x34
 801209e:	ecbd 8b06 	vpop	{d8-d10}
 80120a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a6:	2102      	movs	r1, #2
 80120a8:	e7e0      	b.n	801206c <__ieee754_pow+0xdc>
 80120aa:	2f00      	cmp	r7, #0
 80120ac:	daf2      	bge.n	8012094 <__ieee754_pow+0x104>
 80120ae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80120b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80120b6:	e7ef      	b.n	8012098 <__ieee754_pow+0x108>
 80120b8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80120bc:	d104      	bne.n	80120c8 <__ieee754_pow+0x138>
 80120be:	4610      	mov	r0, r2
 80120c0:	4619      	mov	r1, r3
 80120c2:	f7ee fa99 	bl	80005f8 <__aeabi_dmul>
 80120c6:	e7e7      	b.n	8012098 <__ieee754_pow+0x108>
 80120c8:	493e      	ldr	r1, [pc, #248]	; (80121c4 <__ieee754_pow+0x234>)
 80120ca:	428f      	cmp	r7, r1
 80120cc:	d10d      	bne.n	80120ea <__ieee754_pow+0x15a>
 80120ce:	f1b9 0f00 	cmp.w	r9, #0
 80120d2:	db0a      	blt.n	80120ea <__ieee754_pow+0x15a>
 80120d4:	ec43 2b10 	vmov	d0, r2, r3
 80120d8:	b00d      	add	sp, #52	; 0x34
 80120da:	ecbd 8b06 	vpop	{d8-d10}
 80120de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e2:	f000 bc77 	b.w	80129d4 <__ieee754_sqrt>
 80120e6:	2100      	movs	r1, #0
 80120e8:	9100      	str	r1, [sp, #0]
 80120ea:	ec43 2b10 	vmov	d0, r2, r3
 80120ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80120f2:	f000 fd23 	bl	8012b3c <fabs>
 80120f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120fa:	ec51 0b10 	vmov	r0, r1, d0
 80120fe:	f1b8 0f00 	cmp.w	r8, #0
 8012102:	d12a      	bne.n	801215a <__ieee754_pow+0x1ca>
 8012104:	b12c      	cbz	r4, 8012112 <__ieee754_pow+0x182>
 8012106:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80121bc <__ieee754_pow+0x22c>
 801210a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801210e:	45e6      	cmp	lr, ip
 8012110:	d123      	bne.n	801215a <__ieee754_pow+0x1ca>
 8012112:	2f00      	cmp	r7, #0
 8012114:	da05      	bge.n	8012122 <__ieee754_pow+0x192>
 8012116:	4602      	mov	r2, r0
 8012118:	460b      	mov	r3, r1
 801211a:	2000      	movs	r0, #0
 801211c:	4927      	ldr	r1, [pc, #156]	; (80121bc <__ieee754_pow+0x22c>)
 801211e:	f7ee fb95 	bl	800084c <__aeabi_ddiv>
 8012122:	f1b9 0f00 	cmp.w	r9, #0
 8012126:	dab7      	bge.n	8012098 <__ieee754_pow+0x108>
 8012128:	9b00      	ldr	r3, [sp, #0]
 801212a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801212e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012132:	4323      	orrs	r3, r4
 8012134:	d108      	bne.n	8012148 <__ieee754_pow+0x1b8>
 8012136:	4602      	mov	r2, r0
 8012138:	460b      	mov	r3, r1
 801213a:	4610      	mov	r0, r2
 801213c:	4619      	mov	r1, r3
 801213e:	f7ee f8a3 	bl	8000288 <__aeabi_dsub>
 8012142:	4602      	mov	r2, r0
 8012144:	460b      	mov	r3, r1
 8012146:	e78d      	b.n	8012064 <__ieee754_pow+0xd4>
 8012148:	9b00      	ldr	r3, [sp, #0]
 801214a:	2b01      	cmp	r3, #1
 801214c:	d1a4      	bne.n	8012098 <__ieee754_pow+0x108>
 801214e:	4602      	mov	r2, r0
 8012150:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012154:	4610      	mov	r0, r2
 8012156:	4619      	mov	r1, r3
 8012158:	e79e      	b.n	8012098 <__ieee754_pow+0x108>
 801215a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801215e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8012162:	950a      	str	r5, [sp, #40]	; 0x28
 8012164:	9d00      	ldr	r5, [sp, #0]
 8012166:	46ac      	mov	ip, r5
 8012168:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801216a:	ea5c 0505 	orrs.w	r5, ip, r5
 801216e:	d0e4      	beq.n	801213a <__ieee754_pow+0x1aa>
 8012170:	4b15      	ldr	r3, [pc, #84]	; (80121c8 <__ieee754_pow+0x238>)
 8012172:	429e      	cmp	r6, r3
 8012174:	f340 80fc 	ble.w	8012370 <__ieee754_pow+0x3e0>
 8012178:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801217c:	429e      	cmp	r6, r3
 801217e:	4b10      	ldr	r3, [pc, #64]	; (80121c0 <__ieee754_pow+0x230>)
 8012180:	dd07      	ble.n	8012192 <__ieee754_pow+0x202>
 8012182:	429c      	cmp	r4, r3
 8012184:	dc0a      	bgt.n	801219c <__ieee754_pow+0x20c>
 8012186:	2f00      	cmp	r7, #0
 8012188:	da84      	bge.n	8012094 <__ieee754_pow+0x104>
 801218a:	a307      	add	r3, pc, #28	; (adr r3, 80121a8 <__ieee754_pow+0x218>)
 801218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012190:	e795      	b.n	80120be <__ieee754_pow+0x12e>
 8012192:	429c      	cmp	r4, r3
 8012194:	dbf7      	blt.n	8012186 <__ieee754_pow+0x1f6>
 8012196:	4b09      	ldr	r3, [pc, #36]	; (80121bc <__ieee754_pow+0x22c>)
 8012198:	429c      	cmp	r4, r3
 801219a:	dd17      	ble.n	80121cc <__ieee754_pow+0x23c>
 801219c:	2f00      	cmp	r7, #0
 801219e:	dcf4      	bgt.n	801218a <__ieee754_pow+0x1fa>
 80121a0:	e778      	b.n	8012094 <__ieee754_pow+0x104>
 80121a2:	bf00      	nop
 80121a4:	f3af 8000 	nop.w
 80121a8:	8800759c 	.word	0x8800759c
 80121ac:	7e37e43c 	.word	0x7e37e43c
 80121b0:	7ff00000 	.word	0x7ff00000
 80121b4:	08013d48 	.word	0x08013d48
 80121b8:	433fffff 	.word	0x433fffff
 80121bc:	3ff00000 	.word	0x3ff00000
 80121c0:	3fefffff 	.word	0x3fefffff
 80121c4:	3fe00000 	.word	0x3fe00000
 80121c8:	41e00000 	.word	0x41e00000
 80121cc:	4b64      	ldr	r3, [pc, #400]	; (8012360 <__ieee754_pow+0x3d0>)
 80121ce:	2200      	movs	r2, #0
 80121d0:	f7ee f85a 	bl	8000288 <__aeabi_dsub>
 80121d4:	a356      	add	r3, pc, #344	; (adr r3, 8012330 <__ieee754_pow+0x3a0>)
 80121d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121da:	4604      	mov	r4, r0
 80121dc:	460d      	mov	r5, r1
 80121de:	f7ee fa0b 	bl	80005f8 <__aeabi_dmul>
 80121e2:	a355      	add	r3, pc, #340	; (adr r3, 8012338 <__ieee754_pow+0x3a8>)
 80121e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e8:	4606      	mov	r6, r0
 80121ea:	460f      	mov	r7, r1
 80121ec:	4620      	mov	r0, r4
 80121ee:	4629      	mov	r1, r5
 80121f0:	f7ee fa02 	bl	80005f8 <__aeabi_dmul>
 80121f4:	4b5b      	ldr	r3, [pc, #364]	; (8012364 <__ieee754_pow+0x3d4>)
 80121f6:	4682      	mov	sl, r0
 80121f8:	468b      	mov	fp, r1
 80121fa:	2200      	movs	r2, #0
 80121fc:	4620      	mov	r0, r4
 80121fe:	4629      	mov	r1, r5
 8012200:	f7ee f9fa 	bl	80005f8 <__aeabi_dmul>
 8012204:	4602      	mov	r2, r0
 8012206:	460b      	mov	r3, r1
 8012208:	a14d      	add	r1, pc, #308	; (adr r1, 8012340 <__ieee754_pow+0x3b0>)
 801220a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801220e:	f7ee f83b 	bl	8000288 <__aeabi_dsub>
 8012212:	4622      	mov	r2, r4
 8012214:	462b      	mov	r3, r5
 8012216:	f7ee f9ef 	bl	80005f8 <__aeabi_dmul>
 801221a:	4602      	mov	r2, r0
 801221c:	460b      	mov	r3, r1
 801221e:	2000      	movs	r0, #0
 8012220:	4951      	ldr	r1, [pc, #324]	; (8012368 <__ieee754_pow+0x3d8>)
 8012222:	f7ee f831 	bl	8000288 <__aeabi_dsub>
 8012226:	4622      	mov	r2, r4
 8012228:	4680      	mov	r8, r0
 801222a:	4689      	mov	r9, r1
 801222c:	462b      	mov	r3, r5
 801222e:	4620      	mov	r0, r4
 8012230:	4629      	mov	r1, r5
 8012232:	f7ee f9e1 	bl	80005f8 <__aeabi_dmul>
 8012236:	4602      	mov	r2, r0
 8012238:	460b      	mov	r3, r1
 801223a:	4640      	mov	r0, r8
 801223c:	4649      	mov	r1, r9
 801223e:	f7ee f9db 	bl	80005f8 <__aeabi_dmul>
 8012242:	a341      	add	r3, pc, #260	; (adr r3, 8012348 <__ieee754_pow+0x3b8>)
 8012244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012248:	f7ee f9d6 	bl	80005f8 <__aeabi_dmul>
 801224c:	4602      	mov	r2, r0
 801224e:	460b      	mov	r3, r1
 8012250:	4650      	mov	r0, sl
 8012252:	4659      	mov	r1, fp
 8012254:	f7ee f818 	bl	8000288 <__aeabi_dsub>
 8012258:	4602      	mov	r2, r0
 801225a:	460b      	mov	r3, r1
 801225c:	4680      	mov	r8, r0
 801225e:	4689      	mov	r9, r1
 8012260:	4630      	mov	r0, r6
 8012262:	4639      	mov	r1, r7
 8012264:	f7ee f812 	bl	800028c <__adddf3>
 8012268:	2400      	movs	r4, #0
 801226a:	4632      	mov	r2, r6
 801226c:	463b      	mov	r3, r7
 801226e:	4620      	mov	r0, r4
 8012270:	460d      	mov	r5, r1
 8012272:	f7ee f809 	bl	8000288 <__aeabi_dsub>
 8012276:	4602      	mov	r2, r0
 8012278:	460b      	mov	r3, r1
 801227a:	4640      	mov	r0, r8
 801227c:	4649      	mov	r1, r9
 801227e:	f7ee f803 	bl	8000288 <__aeabi_dsub>
 8012282:	9b00      	ldr	r3, [sp, #0]
 8012284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012286:	3b01      	subs	r3, #1
 8012288:	4313      	orrs	r3, r2
 801228a:	4682      	mov	sl, r0
 801228c:	468b      	mov	fp, r1
 801228e:	f040 81f1 	bne.w	8012674 <__ieee754_pow+0x6e4>
 8012292:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012350 <__ieee754_pow+0x3c0>
 8012296:	eeb0 8a47 	vmov.f32	s16, s14
 801229a:	eef0 8a67 	vmov.f32	s17, s15
 801229e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80122a2:	2600      	movs	r6, #0
 80122a4:	4632      	mov	r2, r6
 80122a6:	463b      	mov	r3, r7
 80122a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122ac:	f7ed ffec 	bl	8000288 <__aeabi_dsub>
 80122b0:	4622      	mov	r2, r4
 80122b2:	462b      	mov	r3, r5
 80122b4:	f7ee f9a0 	bl	80005f8 <__aeabi_dmul>
 80122b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122bc:	4680      	mov	r8, r0
 80122be:	4689      	mov	r9, r1
 80122c0:	4650      	mov	r0, sl
 80122c2:	4659      	mov	r1, fp
 80122c4:	f7ee f998 	bl	80005f8 <__aeabi_dmul>
 80122c8:	4602      	mov	r2, r0
 80122ca:	460b      	mov	r3, r1
 80122cc:	4640      	mov	r0, r8
 80122ce:	4649      	mov	r1, r9
 80122d0:	f7ed ffdc 	bl	800028c <__adddf3>
 80122d4:	4632      	mov	r2, r6
 80122d6:	463b      	mov	r3, r7
 80122d8:	4680      	mov	r8, r0
 80122da:	4689      	mov	r9, r1
 80122dc:	4620      	mov	r0, r4
 80122de:	4629      	mov	r1, r5
 80122e0:	f7ee f98a 	bl	80005f8 <__aeabi_dmul>
 80122e4:	460b      	mov	r3, r1
 80122e6:	4604      	mov	r4, r0
 80122e8:	460d      	mov	r5, r1
 80122ea:	4602      	mov	r2, r0
 80122ec:	4649      	mov	r1, r9
 80122ee:	4640      	mov	r0, r8
 80122f0:	f7ed ffcc 	bl	800028c <__adddf3>
 80122f4:	4b1d      	ldr	r3, [pc, #116]	; (801236c <__ieee754_pow+0x3dc>)
 80122f6:	4299      	cmp	r1, r3
 80122f8:	ec45 4b19 	vmov	d9, r4, r5
 80122fc:	4606      	mov	r6, r0
 80122fe:	460f      	mov	r7, r1
 8012300:	468b      	mov	fp, r1
 8012302:	f340 82fe 	ble.w	8012902 <__ieee754_pow+0x972>
 8012306:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801230a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801230e:	4303      	orrs	r3, r0
 8012310:	f000 81f0 	beq.w	80126f4 <__ieee754_pow+0x764>
 8012314:	a310      	add	r3, pc, #64	; (adr r3, 8012358 <__ieee754_pow+0x3c8>)
 8012316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231a:	ec51 0b18 	vmov	r0, r1, d8
 801231e:	f7ee f96b 	bl	80005f8 <__aeabi_dmul>
 8012322:	a30d      	add	r3, pc, #52	; (adr r3, 8012358 <__ieee754_pow+0x3c8>)
 8012324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012328:	e6cb      	b.n	80120c2 <__ieee754_pow+0x132>
 801232a:	bf00      	nop
 801232c:	f3af 8000 	nop.w
 8012330:	60000000 	.word	0x60000000
 8012334:	3ff71547 	.word	0x3ff71547
 8012338:	f85ddf44 	.word	0xf85ddf44
 801233c:	3e54ae0b 	.word	0x3e54ae0b
 8012340:	55555555 	.word	0x55555555
 8012344:	3fd55555 	.word	0x3fd55555
 8012348:	652b82fe 	.word	0x652b82fe
 801234c:	3ff71547 	.word	0x3ff71547
 8012350:	00000000 	.word	0x00000000
 8012354:	bff00000 	.word	0xbff00000
 8012358:	8800759c 	.word	0x8800759c
 801235c:	7e37e43c 	.word	0x7e37e43c
 8012360:	3ff00000 	.word	0x3ff00000
 8012364:	3fd00000 	.word	0x3fd00000
 8012368:	3fe00000 	.word	0x3fe00000
 801236c:	408fffff 	.word	0x408fffff
 8012370:	4bd7      	ldr	r3, [pc, #860]	; (80126d0 <__ieee754_pow+0x740>)
 8012372:	ea03 0309 	and.w	r3, r3, r9
 8012376:	2200      	movs	r2, #0
 8012378:	b92b      	cbnz	r3, 8012386 <__ieee754_pow+0x3f6>
 801237a:	4bd6      	ldr	r3, [pc, #856]	; (80126d4 <__ieee754_pow+0x744>)
 801237c:	f7ee f93c 	bl	80005f8 <__aeabi_dmul>
 8012380:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012384:	460c      	mov	r4, r1
 8012386:	1523      	asrs	r3, r4, #20
 8012388:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801238c:	4413      	add	r3, r2
 801238e:	9309      	str	r3, [sp, #36]	; 0x24
 8012390:	4bd1      	ldr	r3, [pc, #836]	; (80126d8 <__ieee754_pow+0x748>)
 8012392:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012396:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801239a:	429c      	cmp	r4, r3
 801239c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80123a0:	dd08      	ble.n	80123b4 <__ieee754_pow+0x424>
 80123a2:	4bce      	ldr	r3, [pc, #824]	; (80126dc <__ieee754_pow+0x74c>)
 80123a4:	429c      	cmp	r4, r3
 80123a6:	f340 8163 	ble.w	8012670 <__ieee754_pow+0x6e0>
 80123aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ac:	3301      	adds	r3, #1
 80123ae:	9309      	str	r3, [sp, #36]	; 0x24
 80123b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80123b4:	2400      	movs	r4, #0
 80123b6:	00e3      	lsls	r3, r4, #3
 80123b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80123ba:	4bc9      	ldr	r3, [pc, #804]	; (80126e0 <__ieee754_pow+0x750>)
 80123bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80123c0:	ed93 7b00 	vldr	d7, [r3]
 80123c4:	4629      	mov	r1, r5
 80123c6:	ec53 2b17 	vmov	r2, r3, d7
 80123ca:	eeb0 8a47 	vmov.f32	s16, s14
 80123ce:	eef0 8a67 	vmov.f32	s17, s15
 80123d2:	4682      	mov	sl, r0
 80123d4:	f7ed ff58 	bl	8000288 <__aeabi_dsub>
 80123d8:	4652      	mov	r2, sl
 80123da:	4606      	mov	r6, r0
 80123dc:	460f      	mov	r7, r1
 80123de:	462b      	mov	r3, r5
 80123e0:	ec51 0b18 	vmov	r0, r1, d8
 80123e4:	f7ed ff52 	bl	800028c <__adddf3>
 80123e8:	4602      	mov	r2, r0
 80123ea:	460b      	mov	r3, r1
 80123ec:	2000      	movs	r0, #0
 80123ee:	49bd      	ldr	r1, [pc, #756]	; (80126e4 <__ieee754_pow+0x754>)
 80123f0:	f7ee fa2c 	bl	800084c <__aeabi_ddiv>
 80123f4:	ec41 0b19 	vmov	d9, r0, r1
 80123f8:	4602      	mov	r2, r0
 80123fa:	460b      	mov	r3, r1
 80123fc:	4630      	mov	r0, r6
 80123fe:	4639      	mov	r1, r7
 8012400:	f7ee f8fa 	bl	80005f8 <__aeabi_dmul>
 8012404:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012408:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801240c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012410:	2300      	movs	r3, #0
 8012412:	9304      	str	r3, [sp, #16]
 8012414:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012418:	46ab      	mov	fp, r5
 801241a:	106d      	asrs	r5, r5, #1
 801241c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012420:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012424:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012428:	2200      	movs	r2, #0
 801242a:	4640      	mov	r0, r8
 801242c:	4649      	mov	r1, r9
 801242e:	4614      	mov	r4, r2
 8012430:	461d      	mov	r5, r3
 8012432:	f7ee f8e1 	bl	80005f8 <__aeabi_dmul>
 8012436:	4602      	mov	r2, r0
 8012438:	460b      	mov	r3, r1
 801243a:	4630      	mov	r0, r6
 801243c:	4639      	mov	r1, r7
 801243e:	f7ed ff23 	bl	8000288 <__aeabi_dsub>
 8012442:	ec53 2b18 	vmov	r2, r3, d8
 8012446:	4606      	mov	r6, r0
 8012448:	460f      	mov	r7, r1
 801244a:	4620      	mov	r0, r4
 801244c:	4629      	mov	r1, r5
 801244e:	f7ed ff1b 	bl	8000288 <__aeabi_dsub>
 8012452:	4602      	mov	r2, r0
 8012454:	460b      	mov	r3, r1
 8012456:	4650      	mov	r0, sl
 8012458:	4659      	mov	r1, fp
 801245a:	f7ed ff15 	bl	8000288 <__aeabi_dsub>
 801245e:	4642      	mov	r2, r8
 8012460:	464b      	mov	r3, r9
 8012462:	f7ee f8c9 	bl	80005f8 <__aeabi_dmul>
 8012466:	4602      	mov	r2, r0
 8012468:	460b      	mov	r3, r1
 801246a:	4630      	mov	r0, r6
 801246c:	4639      	mov	r1, r7
 801246e:	f7ed ff0b 	bl	8000288 <__aeabi_dsub>
 8012472:	ec53 2b19 	vmov	r2, r3, d9
 8012476:	f7ee f8bf 	bl	80005f8 <__aeabi_dmul>
 801247a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801247e:	ec41 0b18 	vmov	d8, r0, r1
 8012482:	4610      	mov	r0, r2
 8012484:	4619      	mov	r1, r3
 8012486:	f7ee f8b7 	bl	80005f8 <__aeabi_dmul>
 801248a:	a37d      	add	r3, pc, #500	; (adr r3, 8012680 <__ieee754_pow+0x6f0>)
 801248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012490:	4604      	mov	r4, r0
 8012492:	460d      	mov	r5, r1
 8012494:	f7ee f8b0 	bl	80005f8 <__aeabi_dmul>
 8012498:	a37b      	add	r3, pc, #492	; (adr r3, 8012688 <__ieee754_pow+0x6f8>)
 801249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249e:	f7ed fef5 	bl	800028c <__adddf3>
 80124a2:	4622      	mov	r2, r4
 80124a4:	462b      	mov	r3, r5
 80124a6:	f7ee f8a7 	bl	80005f8 <__aeabi_dmul>
 80124aa:	a379      	add	r3, pc, #484	; (adr r3, 8012690 <__ieee754_pow+0x700>)
 80124ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b0:	f7ed feec 	bl	800028c <__adddf3>
 80124b4:	4622      	mov	r2, r4
 80124b6:	462b      	mov	r3, r5
 80124b8:	f7ee f89e 	bl	80005f8 <__aeabi_dmul>
 80124bc:	a376      	add	r3, pc, #472	; (adr r3, 8012698 <__ieee754_pow+0x708>)
 80124be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c2:	f7ed fee3 	bl	800028c <__adddf3>
 80124c6:	4622      	mov	r2, r4
 80124c8:	462b      	mov	r3, r5
 80124ca:	f7ee f895 	bl	80005f8 <__aeabi_dmul>
 80124ce:	a374      	add	r3, pc, #464	; (adr r3, 80126a0 <__ieee754_pow+0x710>)
 80124d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d4:	f7ed feda 	bl	800028c <__adddf3>
 80124d8:	4622      	mov	r2, r4
 80124da:	462b      	mov	r3, r5
 80124dc:	f7ee f88c 	bl	80005f8 <__aeabi_dmul>
 80124e0:	a371      	add	r3, pc, #452	; (adr r3, 80126a8 <__ieee754_pow+0x718>)
 80124e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e6:	f7ed fed1 	bl	800028c <__adddf3>
 80124ea:	4622      	mov	r2, r4
 80124ec:	4606      	mov	r6, r0
 80124ee:	460f      	mov	r7, r1
 80124f0:	462b      	mov	r3, r5
 80124f2:	4620      	mov	r0, r4
 80124f4:	4629      	mov	r1, r5
 80124f6:	f7ee f87f 	bl	80005f8 <__aeabi_dmul>
 80124fa:	4602      	mov	r2, r0
 80124fc:	460b      	mov	r3, r1
 80124fe:	4630      	mov	r0, r6
 8012500:	4639      	mov	r1, r7
 8012502:	f7ee f879 	bl	80005f8 <__aeabi_dmul>
 8012506:	4642      	mov	r2, r8
 8012508:	4604      	mov	r4, r0
 801250a:	460d      	mov	r5, r1
 801250c:	464b      	mov	r3, r9
 801250e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012512:	f7ed febb 	bl	800028c <__adddf3>
 8012516:	ec53 2b18 	vmov	r2, r3, d8
 801251a:	f7ee f86d 	bl	80005f8 <__aeabi_dmul>
 801251e:	4622      	mov	r2, r4
 8012520:	462b      	mov	r3, r5
 8012522:	f7ed feb3 	bl	800028c <__adddf3>
 8012526:	4642      	mov	r2, r8
 8012528:	4682      	mov	sl, r0
 801252a:	468b      	mov	fp, r1
 801252c:	464b      	mov	r3, r9
 801252e:	4640      	mov	r0, r8
 8012530:	4649      	mov	r1, r9
 8012532:	f7ee f861 	bl	80005f8 <__aeabi_dmul>
 8012536:	4b6c      	ldr	r3, [pc, #432]	; (80126e8 <__ieee754_pow+0x758>)
 8012538:	2200      	movs	r2, #0
 801253a:	4606      	mov	r6, r0
 801253c:	460f      	mov	r7, r1
 801253e:	f7ed fea5 	bl	800028c <__adddf3>
 8012542:	4652      	mov	r2, sl
 8012544:	465b      	mov	r3, fp
 8012546:	f7ed fea1 	bl	800028c <__adddf3>
 801254a:	9c04      	ldr	r4, [sp, #16]
 801254c:	460d      	mov	r5, r1
 801254e:	4622      	mov	r2, r4
 8012550:	460b      	mov	r3, r1
 8012552:	4640      	mov	r0, r8
 8012554:	4649      	mov	r1, r9
 8012556:	f7ee f84f 	bl	80005f8 <__aeabi_dmul>
 801255a:	4b63      	ldr	r3, [pc, #396]	; (80126e8 <__ieee754_pow+0x758>)
 801255c:	4680      	mov	r8, r0
 801255e:	4689      	mov	r9, r1
 8012560:	2200      	movs	r2, #0
 8012562:	4620      	mov	r0, r4
 8012564:	4629      	mov	r1, r5
 8012566:	f7ed fe8f 	bl	8000288 <__aeabi_dsub>
 801256a:	4632      	mov	r2, r6
 801256c:	463b      	mov	r3, r7
 801256e:	f7ed fe8b 	bl	8000288 <__aeabi_dsub>
 8012572:	4602      	mov	r2, r0
 8012574:	460b      	mov	r3, r1
 8012576:	4650      	mov	r0, sl
 8012578:	4659      	mov	r1, fp
 801257a:	f7ed fe85 	bl	8000288 <__aeabi_dsub>
 801257e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012582:	f7ee f839 	bl	80005f8 <__aeabi_dmul>
 8012586:	4622      	mov	r2, r4
 8012588:	4606      	mov	r6, r0
 801258a:	460f      	mov	r7, r1
 801258c:	462b      	mov	r3, r5
 801258e:	ec51 0b18 	vmov	r0, r1, d8
 8012592:	f7ee f831 	bl	80005f8 <__aeabi_dmul>
 8012596:	4602      	mov	r2, r0
 8012598:	460b      	mov	r3, r1
 801259a:	4630      	mov	r0, r6
 801259c:	4639      	mov	r1, r7
 801259e:	f7ed fe75 	bl	800028c <__adddf3>
 80125a2:	4606      	mov	r6, r0
 80125a4:	460f      	mov	r7, r1
 80125a6:	4602      	mov	r2, r0
 80125a8:	460b      	mov	r3, r1
 80125aa:	4640      	mov	r0, r8
 80125ac:	4649      	mov	r1, r9
 80125ae:	f7ed fe6d 	bl	800028c <__adddf3>
 80125b2:	9c04      	ldr	r4, [sp, #16]
 80125b4:	a33e      	add	r3, pc, #248	; (adr r3, 80126b0 <__ieee754_pow+0x720>)
 80125b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ba:	4620      	mov	r0, r4
 80125bc:	460d      	mov	r5, r1
 80125be:	f7ee f81b 	bl	80005f8 <__aeabi_dmul>
 80125c2:	4642      	mov	r2, r8
 80125c4:	ec41 0b18 	vmov	d8, r0, r1
 80125c8:	464b      	mov	r3, r9
 80125ca:	4620      	mov	r0, r4
 80125cc:	4629      	mov	r1, r5
 80125ce:	f7ed fe5b 	bl	8000288 <__aeabi_dsub>
 80125d2:	4602      	mov	r2, r0
 80125d4:	460b      	mov	r3, r1
 80125d6:	4630      	mov	r0, r6
 80125d8:	4639      	mov	r1, r7
 80125da:	f7ed fe55 	bl	8000288 <__aeabi_dsub>
 80125de:	a336      	add	r3, pc, #216	; (adr r3, 80126b8 <__ieee754_pow+0x728>)
 80125e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e4:	f7ee f808 	bl	80005f8 <__aeabi_dmul>
 80125e8:	a335      	add	r3, pc, #212	; (adr r3, 80126c0 <__ieee754_pow+0x730>)
 80125ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ee:	4606      	mov	r6, r0
 80125f0:	460f      	mov	r7, r1
 80125f2:	4620      	mov	r0, r4
 80125f4:	4629      	mov	r1, r5
 80125f6:	f7ed ffff 	bl	80005f8 <__aeabi_dmul>
 80125fa:	4602      	mov	r2, r0
 80125fc:	460b      	mov	r3, r1
 80125fe:	4630      	mov	r0, r6
 8012600:	4639      	mov	r1, r7
 8012602:	f7ed fe43 	bl	800028c <__adddf3>
 8012606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012608:	4b38      	ldr	r3, [pc, #224]	; (80126ec <__ieee754_pow+0x75c>)
 801260a:	4413      	add	r3, r2
 801260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012610:	f7ed fe3c 	bl	800028c <__adddf3>
 8012614:	4682      	mov	sl, r0
 8012616:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012618:	468b      	mov	fp, r1
 801261a:	f7ed ff83 	bl	8000524 <__aeabi_i2d>
 801261e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012620:	4b33      	ldr	r3, [pc, #204]	; (80126f0 <__ieee754_pow+0x760>)
 8012622:	4413      	add	r3, r2
 8012624:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012628:	4606      	mov	r6, r0
 801262a:	460f      	mov	r7, r1
 801262c:	4652      	mov	r2, sl
 801262e:	465b      	mov	r3, fp
 8012630:	ec51 0b18 	vmov	r0, r1, d8
 8012634:	f7ed fe2a 	bl	800028c <__adddf3>
 8012638:	4642      	mov	r2, r8
 801263a:	464b      	mov	r3, r9
 801263c:	f7ed fe26 	bl	800028c <__adddf3>
 8012640:	4632      	mov	r2, r6
 8012642:	463b      	mov	r3, r7
 8012644:	f7ed fe22 	bl	800028c <__adddf3>
 8012648:	9c04      	ldr	r4, [sp, #16]
 801264a:	4632      	mov	r2, r6
 801264c:	463b      	mov	r3, r7
 801264e:	4620      	mov	r0, r4
 8012650:	460d      	mov	r5, r1
 8012652:	f7ed fe19 	bl	8000288 <__aeabi_dsub>
 8012656:	4642      	mov	r2, r8
 8012658:	464b      	mov	r3, r9
 801265a:	f7ed fe15 	bl	8000288 <__aeabi_dsub>
 801265e:	ec53 2b18 	vmov	r2, r3, d8
 8012662:	f7ed fe11 	bl	8000288 <__aeabi_dsub>
 8012666:	4602      	mov	r2, r0
 8012668:	460b      	mov	r3, r1
 801266a:	4650      	mov	r0, sl
 801266c:	4659      	mov	r1, fp
 801266e:	e606      	b.n	801227e <__ieee754_pow+0x2ee>
 8012670:	2401      	movs	r4, #1
 8012672:	e6a0      	b.n	80123b6 <__ieee754_pow+0x426>
 8012674:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80126c8 <__ieee754_pow+0x738>
 8012678:	e60d      	b.n	8012296 <__ieee754_pow+0x306>
 801267a:	bf00      	nop
 801267c:	f3af 8000 	nop.w
 8012680:	4a454eef 	.word	0x4a454eef
 8012684:	3fca7e28 	.word	0x3fca7e28
 8012688:	93c9db65 	.word	0x93c9db65
 801268c:	3fcd864a 	.word	0x3fcd864a
 8012690:	a91d4101 	.word	0xa91d4101
 8012694:	3fd17460 	.word	0x3fd17460
 8012698:	518f264d 	.word	0x518f264d
 801269c:	3fd55555 	.word	0x3fd55555
 80126a0:	db6fabff 	.word	0xdb6fabff
 80126a4:	3fdb6db6 	.word	0x3fdb6db6
 80126a8:	33333303 	.word	0x33333303
 80126ac:	3fe33333 	.word	0x3fe33333
 80126b0:	e0000000 	.word	0xe0000000
 80126b4:	3feec709 	.word	0x3feec709
 80126b8:	dc3a03fd 	.word	0xdc3a03fd
 80126bc:	3feec709 	.word	0x3feec709
 80126c0:	145b01f5 	.word	0x145b01f5
 80126c4:	be3e2fe0 	.word	0xbe3e2fe0
 80126c8:	00000000 	.word	0x00000000
 80126cc:	3ff00000 	.word	0x3ff00000
 80126d0:	7ff00000 	.word	0x7ff00000
 80126d4:	43400000 	.word	0x43400000
 80126d8:	0003988e 	.word	0x0003988e
 80126dc:	000bb679 	.word	0x000bb679
 80126e0:	08013d50 	.word	0x08013d50
 80126e4:	3ff00000 	.word	0x3ff00000
 80126e8:	40080000 	.word	0x40080000
 80126ec:	08013d70 	.word	0x08013d70
 80126f0:	08013d60 	.word	0x08013d60
 80126f4:	a3b5      	add	r3, pc, #724	; (adr r3, 80129cc <__ieee754_pow+0xa3c>)
 80126f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fa:	4640      	mov	r0, r8
 80126fc:	4649      	mov	r1, r9
 80126fe:	f7ed fdc5 	bl	800028c <__adddf3>
 8012702:	4622      	mov	r2, r4
 8012704:	ec41 0b1a 	vmov	d10, r0, r1
 8012708:	462b      	mov	r3, r5
 801270a:	4630      	mov	r0, r6
 801270c:	4639      	mov	r1, r7
 801270e:	f7ed fdbb 	bl	8000288 <__aeabi_dsub>
 8012712:	4602      	mov	r2, r0
 8012714:	460b      	mov	r3, r1
 8012716:	ec51 0b1a 	vmov	r0, r1, d10
 801271a:	f7ee f9fd 	bl	8000b18 <__aeabi_dcmpgt>
 801271e:	2800      	cmp	r0, #0
 8012720:	f47f adf8 	bne.w	8012314 <__ieee754_pow+0x384>
 8012724:	4aa4      	ldr	r2, [pc, #656]	; (80129b8 <__ieee754_pow+0xa28>)
 8012726:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801272a:	4293      	cmp	r3, r2
 801272c:	f340 810b 	ble.w	8012946 <__ieee754_pow+0x9b6>
 8012730:	151b      	asrs	r3, r3, #20
 8012732:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012736:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801273a:	fa4a f303 	asr.w	r3, sl, r3
 801273e:	445b      	add	r3, fp
 8012740:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012744:	4e9d      	ldr	r6, [pc, #628]	; (80129bc <__ieee754_pow+0xa2c>)
 8012746:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801274a:	4116      	asrs	r6, r2
 801274c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012750:	2000      	movs	r0, #0
 8012752:	ea23 0106 	bic.w	r1, r3, r6
 8012756:	f1c2 0214 	rsb	r2, r2, #20
 801275a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801275e:	fa4a fa02 	asr.w	sl, sl, r2
 8012762:	f1bb 0f00 	cmp.w	fp, #0
 8012766:	4602      	mov	r2, r0
 8012768:	460b      	mov	r3, r1
 801276a:	4620      	mov	r0, r4
 801276c:	4629      	mov	r1, r5
 801276e:	bfb8      	it	lt
 8012770:	f1ca 0a00 	rsblt	sl, sl, #0
 8012774:	f7ed fd88 	bl	8000288 <__aeabi_dsub>
 8012778:	ec41 0b19 	vmov	d9, r0, r1
 801277c:	4642      	mov	r2, r8
 801277e:	464b      	mov	r3, r9
 8012780:	ec51 0b19 	vmov	r0, r1, d9
 8012784:	f7ed fd82 	bl	800028c <__adddf3>
 8012788:	2400      	movs	r4, #0
 801278a:	a379      	add	r3, pc, #484	; (adr r3, 8012970 <__ieee754_pow+0x9e0>)
 801278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012790:	4620      	mov	r0, r4
 8012792:	460d      	mov	r5, r1
 8012794:	f7ed ff30 	bl	80005f8 <__aeabi_dmul>
 8012798:	ec53 2b19 	vmov	r2, r3, d9
 801279c:	4606      	mov	r6, r0
 801279e:	460f      	mov	r7, r1
 80127a0:	4620      	mov	r0, r4
 80127a2:	4629      	mov	r1, r5
 80127a4:	f7ed fd70 	bl	8000288 <__aeabi_dsub>
 80127a8:	4602      	mov	r2, r0
 80127aa:	460b      	mov	r3, r1
 80127ac:	4640      	mov	r0, r8
 80127ae:	4649      	mov	r1, r9
 80127b0:	f7ed fd6a 	bl	8000288 <__aeabi_dsub>
 80127b4:	a370      	add	r3, pc, #448	; (adr r3, 8012978 <__ieee754_pow+0x9e8>)
 80127b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ba:	f7ed ff1d 	bl	80005f8 <__aeabi_dmul>
 80127be:	a370      	add	r3, pc, #448	; (adr r3, 8012980 <__ieee754_pow+0x9f0>)
 80127c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c4:	4680      	mov	r8, r0
 80127c6:	4689      	mov	r9, r1
 80127c8:	4620      	mov	r0, r4
 80127ca:	4629      	mov	r1, r5
 80127cc:	f7ed ff14 	bl	80005f8 <__aeabi_dmul>
 80127d0:	4602      	mov	r2, r0
 80127d2:	460b      	mov	r3, r1
 80127d4:	4640      	mov	r0, r8
 80127d6:	4649      	mov	r1, r9
 80127d8:	f7ed fd58 	bl	800028c <__adddf3>
 80127dc:	4604      	mov	r4, r0
 80127de:	460d      	mov	r5, r1
 80127e0:	4602      	mov	r2, r0
 80127e2:	460b      	mov	r3, r1
 80127e4:	4630      	mov	r0, r6
 80127e6:	4639      	mov	r1, r7
 80127e8:	f7ed fd50 	bl	800028c <__adddf3>
 80127ec:	4632      	mov	r2, r6
 80127ee:	463b      	mov	r3, r7
 80127f0:	4680      	mov	r8, r0
 80127f2:	4689      	mov	r9, r1
 80127f4:	f7ed fd48 	bl	8000288 <__aeabi_dsub>
 80127f8:	4602      	mov	r2, r0
 80127fa:	460b      	mov	r3, r1
 80127fc:	4620      	mov	r0, r4
 80127fe:	4629      	mov	r1, r5
 8012800:	f7ed fd42 	bl	8000288 <__aeabi_dsub>
 8012804:	4642      	mov	r2, r8
 8012806:	4606      	mov	r6, r0
 8012808:	460f      	mov	r7, r1
 801280a:	464b      	mov	r3, r9
 801280c:	4640      	mov	r0, r8
 801280e:	4649      	mov	r1, r9
 8012810:	f7ed fef2 	bl	80005f8 <__aeabi_dmul>
 8012814:	a35c      	add	r3, pc, #368	; (adr r3, 8012988 <__ieee754_pow+0x9f8>)
 8012816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281a:	4604      	mov	r4, r0
 801281c:	460d      	mov	r5, r1
 801281e:	f7ed feeb 	bl	80005f8 <__aeabi_dmul>
 8012822:	a35b      	add	r3, pc, #364	; (adr r3, 8012990 <__ieee754_pow+0xa00>)
 8012824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012828:	f7ed fd2e 	bl	8000288 <__aeabi_dsub>
 801282c:	4622      	mov	r2, r4
 801282e:	462b      	mov	r3, r5
 8012830:	f7ed fee2 	bl	80005f8 <__aeabi_dmul>
 8012834:	a358      	add	r3, pc, #352	; (adr r3, 8012998 <__ieee754_pow+0xa08>)
 8012836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283a:	f7ed fd27 	bl	800028c <__adddf3>
 801283e:	4622      	mov	r2, r4
 8012840:	462b      	mov	r3, r5
 8012842:	f7ed fed9 	bl	80005f8 <__aeabi_dmul>
 8012846:	a356      	add	r3, pc, #344	; (adr r3, 80129a0 <__ieee754_pow+0xa10>)
 8012848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284c:	f7ed fd1c 	bl	8000288 <__aeabi_dsub>
 8012850:	4622      	mov	r2, r4
 8012852:	462b      	mov	r3, r5
 8012854:	f7ed fed0 	bl	80005f8 <__aeabi_dmul>
 8012858:	a353      	add	r3, pc, #332	; (adr r3, 80129a8 <__ieee754_pow+0xa18>)
 801285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285e:	f7ed fd15 	bl	800028c <__adddf3>
 8012862:	4622      	mov	r2, r4
 8012864:	462b      	mov	r3, r5
 8012866:	f7ed fec7 	bl	80005f8 <__aeabi_dmul>
 801286a:	4602      	mov	r2, r0
 801286c:	460b      	mov	r3, r1
 801286e:	4640      	mov	r0, r8
 8012870:	4649      	mov	r1, r9
 8012872:	f7ed fd09 	bl	8000288 <__aeabi_dsub>
 8012876:	4604      	mov	r4, r0
 8012878:	460d      	mov	r5, r1
 801287a:	4602      	mov	r2, r0
 801287c:	460b      	mov	r3, r1
 801287e:	4640      	mov	r0, r8
 8012880:	4649      	mov	r1, r9
 8012882:	f7ed feb9 	bl	80005f8 <__aeabi_dmul>
 8012886:	2200      	movs	r2, #0
 8012888:	ec41 0b19 	vmov	d9, r0, r1
 801288c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012890:	4620      	mov	r0, r4
 8012892:	4629      	mov	r1, r5
 8012894:	f7ed fcf8 	bl	8000288 <__aeabi_dsub>
 8012898:	4602      	mov	r2, r0
 801289a:	460b      	mov	r3, r1
 801289c:	ec51 0b19 	vmov	r0, r1, d9
 80128a0:	f7ed ffd4 	bl	800084c <__aeabi_ddiv>
 80128a4:	4632      	mov	r2, r6
 80128a6:	4604      	mov	r4, r0
 80128a8:	460d      	mov	r5, r1
 80128aa:	463b      	mov	r3, r7
 80128ac:	4640      	mov	r0, r8
 80128ae:	4649      	mov	r1, r9
 80128b0:	f7ed fea2 	bl	80005f8 <__aeabi_dmul>
 80128b4:	4632      	mov	r2, r6
 80128b6:	463b      	mov	r3, r7
 80128b8:	f7ed fce8 	bl	800028c <__adddf3>
 80128bc:	4602      	mov	r2, r0
 80128be:	460b      	mov	r3, r1
 80128c0:	4620      	mov	r0, r4
 80128c2:	4629      	mov	r1, r5
 80128c4:	f7ed fce0 	bl	8000288 <__aeabi_dsub>
 80128c8:	4642      	mov	r2, r8
 80128ca:	464b      	mov	r3, r9
 80128cc:	f7ed fcdc 	bl	8000288 <__aeabi_dsub>
 80128d0:	460b      	mov	r3, r1
 80128d2:	4602      	mov	r2, r0
 80128d4:	493a      	ldr	r1, [pc, #232]	; (80129c0 <__ieee754_pow+0xa30>)
 80128d6:	2000      	movs	r0, #0
 80128d8:	f7ed fcd6 	bl	8000288 <__aeabi_dsub>
 80128dc:	e9cd 0100 	strd	r0, r1, [sp]
 80128e0:	9b01      	ldr	r3, [sp, #4]
 80128e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80128e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80128ea:	da2f      	bge.n	801294c <__ieee754_pow+0x9bc>
 80128ec:	4650      	mov	r0, sl
 80128ee:	ed9d 0b00 	vldr	d0, [sp]
 80128f2:	f000 f9c1 	bl	8012c78 <scalbn>
 80128f6:	ec51 0b10 	vmov	r0, r1, d0
 80128fa:	ec53 2b18 	vmov	r2, r3, d8
 80128fe:	f7ff bbe0 	b.w	80120c2 <__ieee754_pow+0x132>
 8012902:	4b30      	ldr	r3, [pc, #192]	; (80129c4 <__ieee754_pow+0xa34>)
 8012904:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012908:	429e      	cmp	r6, r3
 801290a:	f77f af0b 	ble.w	8012724 <__ieee754_pow+0x794>
 801290e:	4b2e      	ldr	r3, [pc, #184]	; (80129c8 <__ieee754_pow+0xa38>)
 8012910:	440b      	add	r3, r1
 8012912:	4303      	orrs	r3, r0
 8012914:	d00b      	beq.n	801292e <__ieee754_pow+0x99e>
 8012916:	a326      	add	r3, pc, #152	; (adr r3, 80129b0 <__ieee754_pow+0xa20>)
 8012918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291c:	ec51 0b18 	vmov	r0, r1, d8
 8012920:	f7ed fe6a 	bl	80005f8 <__aeabi_dmul>
 8012924:	a322      	add	r3, pc, #136	; (adr r3, 80129b0 <__ieee754_pow+0xa20>)
 8012926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801292a:	f7ff bbca 	b.w	80120c2 <__ieee754_pow+0x132>
 801292e:	4622      	mov	r2, r4
 8012930:	462b      	mov	r3, r5
 8012932:	f7ed fca9 	bl	8000288 <__aeabi_dsub>
 8012936:	4642      	mov	r2, r8
 8012938:	464b      	mov	r3, r9
 801293a:	f7ee f8e3 	bl	8000b04 <__aeabi_dcmpge>
 801293e:	2800      	cmp	r0, #0
 8012940:	f43f aef0 	beq.w	8012724 <__ieee754_pow+0x794>
 8012944:	e7e7      	b.n	8012916 <__ieee754_pow+0x986>
 8012946:	f04f 0a00 	mov.w	sl, #0
 801294a:	e717      	b.n	801277c <__ieee754_pow+0x7ec>
 801294c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012950:	4619      	mov	r1, r3
 8012952:	e7d2      	b.n	80128fa <__ieee754_pow+0x96a>
 8012954:	491a      	ldr	r1, [pc, #104]	; (80129c0 <__ieee754_pow+0xa30>)
 8012956:	2000      	movs	r0, #0
 8012958:	f7ff bb9e 	b.w	8012098 <__ieee754_pow+0x108>
 801295c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012960:	f7ff bb9a 	b.w	8012098 <__ieee754_pow+0x108>
 8012964:	9000      	str	r0, [sp, #0]
 8012966:	f7ff bb76 	b.w	8012056 <__ieee754_pow+0xc6>
 801296a:	2100      	movs	r1, #0
 801296c:	f7ff bb60 	b.w	8012030 <__ieee754_pow+0xa0>
 8012970:	00000000 	.word	0x00000000
 8012974:	3fe62e43 	.word	0x3fe62e43
 8012978:	fefa39ef 	.word	0xfefa39ef
 801297c:	3fe62e42 	.word	0x3fe62e42
 8012980:	0ca86c39 	.word	0x0ca86c39
 8012984:	be205c61 	.word	0xbe205c61
 8012988:	72bea4d0 	.word	0x72bea4d0
 801298c:	3e663769 	.word	0x3e663769
 8012990:	c5d26bf1 	.word	0xc5d26bf1
 8012994:	3ebbbd41 	.word	0x3ebbbd41
 8012998:	af25de2c 	.word	0xaf25de2c
 801299c:	3f11566a 	.word	0x3f11566a
 80129a0:	16bebd93 	.word	0x16bebd93
 80129a4:	3f66c16c 	.word	0x3f66c16c
 80129a8:	5555553e 	.word	0x5555553e
 80129ac:	3fc55555 	.word	0x3fc55555
 80129b0:	c2f8f359 	.word	0xc2f8f359
 80129b4:	01a56e1f 	.word	0x01a56e1f
 80129b8:	3fe00000 	.word	0x3fe00000
 80129bc:	000fffff 	.word	0x000fffff
 80129c0:	3ff00000 	.word	0x3ff00000
 80129c4:	4090cbff 	.word	0x4090cbff
 80129c8:	3f6f3400 	.word	0x3f6f3400
 80129cc:	652b82fe 	.word	0x652b82fe
 80129d0:	3c971547 	.word	0x3c971547

080129d4 <__ieee754_sqrt>:
 80129d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129d8:	ec55 4b10 	vmov	r4, r5, d0
 80129dc:	4e56      	ldr	r6, [pc, #344]	; (8012b38 <__ieee754_sqrt+0x164>)
 80129de:	43ae      	bics	r6, r5
 80129e0:	ee10 0a10 	vmov	r0, s0
 80129e4:	ee10 3a10 	vmov	r3, s0
 80129e8:	4629      	mov	r1, r5
 80129ea:	462a      	mov	r2, r5
 80129ec:	d110      	bne.n	8012a10 <__ieee754_sqrt+0x3c>
 80129ee:	ee10 2a10 	vmov	r2, s0
 80129f2:	462b      	mov	r3, r5
 80129f4:	f7ed fe00 	bl	80005f8 <__aeabi_dmul>
 80129f8:	4602      	mov	r2, r0
 80129fa:	460b      	mov	r3, r1
 80129fc:	4620      	mov	r0, r4
 80129fe:	4629      	mov	r1, r5
 8012a00:	f7ed fc44 	bl	800028c <__adddf3>
 8012a04:	4604      	mov	r4, r0
 8012a06:	460d      	mov	r5, r1
 8012a08:	ec45 4b10 	vmov	d0, r4, r5
 8012a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a10:	2d00      	cmp	r5, #0
 8012a12:	dc10      	bgt.n	8012a36 <__ieee754_sqrt+0x62>
 8012a14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012a18:	4330      	orrs	r0, r6
 8012a1a:	d0f5      	beq.n	8012a08 <__ieee754_sqrt+0x34>
 8012a1c:	b15d      	cbz	r5, 8012a36 <__ieee754_sqrt+0x62>
 8012a1e:	ee10 2a10 	vmov	r2, s0
 8012a22:	462b      	mov	r3, r5
 8012a24:	ee10 0a10 	vmov	r0, s0
 8012a28:	f7ed fc2e 	bl	8000288 <__aeabi_dsub>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	460b      	mov	r3, r1
 8012a30:	f7ed ff0c 	bl	800084c <__aeabi_ddiv>
 8012a34:	e7e6      	b.n	8012a04 <__ieee754_sqrt+0x30>
 8012a36:	1509      	asrs	r1, r1, #20
 8012a38:	d076      	beq.n	8012b28 <__ieee754_sqrt+0x154>
 8012a3a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012a3e:	07ce      	lsls	r6, r1, #31
 8012a40:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8012a44:	bf5e      	ittt	pl
 8012a46:	0fda      	lsrpl	r2, r3, #31
 8012a48:	005b      	lslpl	r3, r3, #1
 8012a4a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8012a4e:	0fda      	lsrs	r2, r3, #31
 8012a50:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8012a54:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8012a58:	2000      	movs	r0, #0
 8012a5a:	106d      	asrs	r5, r5, #1
 8012a5c:	005b      	lsls	r3, r3, #1
 8012a5e:	f04f 0e16 	mov.w	lr, #22
 8012a62:	4684      	mov	ip, r0
 8012a64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012a68:	eb0c 0401 	add.w	r4, ip, r1
 8012a6c:	4294      	cmp	r4, r2
 8012a6e:	bfde      	ittt	le
 8012a70:	1b12      	suble	r2, r2, r4
 8012a72:	eb04 0c01 	addle.w	ip, r4, r1
 8012a76:	1840      	addle	r0, r0, r1
 8012a78:	0052      	lsls	r2, r2, #1
 8012a7a:	f1be 0e01 	subs.w	lr, lr, #1
 8012a7e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012a82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012a86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012a8a:	d1ed      	bne.n	8012a68 <__ieee754_sqrt+0x94>
 8012a8c:	4671      	mov	r1, lr
 8012a8e:	2720      	movs	r7, #32
 8012a90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012a94:	4562      	cmp	r2, ip
 8012a96:	eb04 060e 	add.w	r6, r4, lr
 8012a9a:	dc02      	bgt.n	8012aa2 <__ieee754_sqrt+0xce>
 8012a9c:	d113      	bne.n	8012ac6 <__ieee754_sqrt+0xf2>
 8012a9e:	429e      	cmp	r6, r3
 8012aa0:	d811      	bhi.n	8012ac6 <__ieee754_sqrt+0xf2>
 8012aa2:	2e00      	cmp	r6, #0
 8012aa4:	eb06 0e04 	add.w	lr, r6, r4
 8012aa8:	da43      	bge.n	8012b32 <__ieee754_sqrt+0x15e>
 8012aaa:	f1be 0f00 	cmp.w	lr, #0
 8012aae:	db40      	blt.n	8012b32 <__ieee754_sqrt+0x15e>
 8012ab0:	f10c 0801 	add.w	r8, ip, #1
 8012ab4:	eba2 020c 	sub.w	r2, r2, ip
 8012ab8:	429e      	cmp	r6, r3
 8012aba:	bf88      	it	hi
 8012abc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012ac0:	1b9b      	subs	r3, r3, r6
 8012ac2:	4421      	add	r1, r4
 8012ac4:	46c4      	mov	ip, r8
 8012ac6:	0052      	lsls	r2, r2, #1
 8012ac8:	3f01      	subs	r7, #1
 8012aca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012ace:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012ad2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ad6:	d1dd      	bne.n	8012a94 <__ieee754_sqrt+0xc0>
 8012ad8:	4313      	orrs	r3, r2
 8012ada:	d006      	beq.n	8012aea <__ieee754_sqrt+0x116>
 8012adc:	1c4c      	adds	r4, r1, #1
 8012ade:	bf13      	iteet	ne
 8012ae0:	3101      	addne	r1, #1
 8012ae2:	3001      	addeq	r0, #1
 8012ae4:	4639      	moveq	r1, r7
 8012ae6:	f021 0101 	bicne.w	r1, r1, #1
 8012aea:	1043      	asrs	r3, r0, #1
 8012aec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012af0:	0849      	lsrs	r1, r1, #1
 8012af2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012af6:	07c2      	lsls	r2, r0, #31
 8012af8:	bf48      	it	mi
 8012afa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8012afe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8012b02:	460c      	mov	r4, r1
 8012b04:	463d      	mov	r5, r7
 8012b06:	e77f      	b.n	8012a08 <__ieee754_sqrt+0x34>
 8012b08:	0ada      	lsrs	r2, r3, #11
 8012b0a:	3815      	subs	r0, #21
 8012b0c:	055b      	lsls	r3, r3, #21
 8012b0e:	2a00      	cmp	r2, #0
 8012b10:	d0fa      	beq.n	8012b08 <__ieee754_sqrt+0x134>
 8012b12:	02d7      	lsls	r7, r2, #11
 8012b14:	d50a      	bpl.n	8012b2c <__ieee754_sqrt+0x158>
 8012b16:	f1c1 0420 	rsb	r4, r1, #32
 8012b1a:	fa23 f404 	lsr.w	r4, r3, r4
 8012b1e:	1e4d      	subs	r5, r1, #1
 8012b20:	408b      	lsls	r3, r1
 8012b22:	4322      	orrs	r2, r4
 8012b24:	1b41      	subs	r1, r0, r5
 8012b26:	e788      	b.n	8012a3a <__ieee754_sqrt+0x66>
 8012b28:	4608      	mov	r0, r1
 8012b2a:	e7f0      	b.n	8012b0e <__ieee754_sqrt+0x13a>
 8012b2c:	0052      	lsls	r2, r2, #1
 8012b2e:	3101      	adds	r1, #1
 8012b30:	e7ef      	b.n	8012b12 <__ieee754_sqrt+0x13e>
 8012b32:	46e0      	mov	r8, ip
 8012b34:	e7be      	b.n	8012ab4 <__ieee754_sqrt+0xe0>
 8012b36:	bf00      	nop
 8012b38:	7ff00000 	.word	0x7ff00000

08012b3c <fabs>:
 8012b3c:	ec51 0b10 	vmov	r0, r1, d0
 8012b40:	ee10 2a10 	vmov	r2, s0
 8012b44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012b48:	ec43 2b10 	vmov	d0, r2, r3
 8012b4c:	4770      	bx	lr

08012b4e <finite>:
 8012b4e:	b082      	sub	sp, #8
 8012b50:	ed8d 0b00 	vstr	d0, [sp]
 8012b54:	9801      	ldr	r0, [sp, #4]
 8012b56:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012b5a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012b5e:	0fc0      	lsrs	r0, r0, #31
 8012b60:	b002      	add	sp, #8
 8012b62:	4770      	bx	lr

08012b64 <rint>:
 8012b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b66:	ec51 0b10 	vmov	r0, r1, d0
 8012b6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012b6e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012b72:	2e13      	cmp	r6, #19
 8012b74:	ee10 4a10 	vmov	r4, s0
 8012b78:	460b      	mov	r3, r1
 8012b7a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012b7e:	dc58      	bgt.n	8012c32 <rint+0xce>
 8012b80:	2e00      	cmp	r6, #0
 8012b82:	da2b      	bge.n	8012bdc <rint+0x78>
 8012b84:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012b88:	4302      	orrs	r2, r0
 8012b8a:	d023      	beq.n	8012bd4 <rint+0x70>
 8012b8c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012b90:	4302      	orrs	r2, r0
 8012b92:	4254      	negs	r4, r2
 8012b94:	4314      	orrs	r4, r2
 8012b96:	0c4b      	lsrs	r3, r1, #17
 8012b98:	0b24      	lsrs	r4, r4, #12
 8012b9a:	045b      	lsls	r3, r3, #17
 8012b9c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012ba0:	ea44 0103 	orr.w	r1, r4, r3
 8012ba4:	4b32      	ldr	r3, [pc, #200]	; (8012c70 <rint+0x10c>)
 8012ba6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012baa:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012bae:	4602      	mov	r2, r0
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	4639      	mov	r1, r7
 8012bb6:	f7ed fb69 	bl	800028c <__adddf3>
 8012bba:	e9cd 0100 	strd	r0, r1, [sp]
 8012bbe:	463b      	mov	r3, r7
 8012bc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bc4:	4632      	mov	r2, r6
 8012bc6:	f7ed fb5f 	bl	8000288 <__aeabi_dsub>
 8012bca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012bce:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012bd2:	4639      	mov	r1, r7
 8012bd4:	ec41 0b10 	vmov	d0, r0, r1
 8012bd8:	b003      	add	sp, #12
 8012bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bdc:	4a25      	ldr	r2, [pc, #148]	; (8012c74 <rint+0x110>)
 8012bde:	4132      	asrs	r2, r6
 8012be0:	ea01 0702 	and.w	r7, r1, r2
 8012be4:	4307      	orrs	r7, r0
 8012be6:	d0f5      	beq.n	8012bd4 <rint+0x70>
 8012be8:	0851      	lsrs	r1, r2, #1
 8012bea:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8012bee:	4314      	orrs	r4, r2
 8012bf0:	d00c      	beq.n	8012c0c <rint+0xa8>
 8012bf2:	ea23 0201 	bic.w	r2, r3, r1
 8012bf6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012bfa:	2e13      	cmp	r6, #19
 8012bfc:	fa43 f606 	asr.w	r6, r3, r6
 8012c00:	bf0c      	ite	eq
 8012c02:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012c06:	2400      	movne	r4, #0
 8012c08:	ea42 0306 	orr.w	r3, r2, r6
 8012c0c:	4918      	ldr	r1, [pc, #96]	; (8012c70 <rint+0x10c>)
 8012c0e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012c12:	4622      	mov	r2, r4
 8012c14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012c18:	4620      	mov	r0, r4
 8012c1a:	4629      	mov	r1, r5
 8012c1c:	f7ed fb36 	bl	800028c <__adddf3>
 8012c20:	e9cd 0100 	strd	r0, r1, [sp]
 8012c24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c28:	4622      	mov	r2, r4
 8012c2a:	462b      	mov	r3, r5
 8012c2c:	f7ed fb2c 	bl	8000288 <__aeabi_dsub>
 8012c30:	e7d0      	b.n	8012bd4 <rint+0x70>
 8012c32:	2e33      	cmp	r6, #51	; 0x33
 8012c34:	dd07      	ble.n	8012c46 <rint+0xe2>
 8012c36:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012c3a:	d1cb      	bne.n	8012bd4 <rint+0x70>
 8012c3c:	ee10 2a10 	vmov	r2, s0
 8012c40:	f7ed fb24 	bl	800028c <__adddf3>
 8012c44:	e7c6      	b.n	8012bd4 <rint+0x70>
 8012c46:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012c4a:	f04f 36ff 	mov.w	r6, #4294967295
 8012c4e:	40d6      	lsrs	r6, r2
 8012c50:	4230      	tst	r0, r6
 8012c52:	d0bf      	beq.n	8012bd4 <rint+0x70>
 8012c54:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8012c58:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8012c5c:	bf1f      	itttt	ne
 8012c5e:	ea24 0101 	bicne.w	r1, r4, r1
 8012c62:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012c66:	fa44 f202 	asrne.w	r2, r4, r2
 8012c6a:	ea41 0402 	orrne.w	r4, r1, r2
 8012c6e:	e7cd      	b.n	8012c0c <rint+0xa8>
 8012c70:	08013d80 	.word	0x08013d80
 8012c74:	000fffff 	.word	0x000fffff

08012c78 <scalbn>:
 8012c78:	b570      	push	{r4, r5, r6, lr}
 8012c7a:	ec55 4b10 	vmov	r4, r5, d0
 8012c7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012c82:	4606      	mov	r6, r0
 8012c84:	462b      	mov	r3, r5
 8012c86:	b99a      	cbnz	r2, 8012cb0 <scalbn+0x38>
 8012c88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c8c:	4323      	orrs	r3, r4
 8012c8e:	d036      	beq.n	8012cfe <scalbn+0x86>
 8012c90:	4b39      	ldr	r3, [pc, #228]	; (8012d78 <scalbn+0x100>)
 8012c92:	4629      	mov	r1, r5
 8012c94:	ee10 0a10 	vmov	r0, s0
 8012c98:	2200      	movs	r2, #0
 8012c9a:	f7ed fcad 	bl	80005f8 <__aeabi_dmul>
 8012c9e:	4b37      	ldr	r3, [pc, #220]	; (8012d7c <scalbn+0x104>)
 8012ca0:	429e      	cmp	r6, r3
 8012ca2:	4604      	mov	r4, r0
 8012ca4:	460d      	mov	r5, r1
 8012ca6:	da10      	bge.n	8012cca <scalbn+0x52>
 8012ca8:	a32b      	add	r3, pc, #172	; (adr r3, 8012d58 <scalbn+0xe0>)
 8012caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cae:	e03a      	b.n	8012d26 <scalbn+0xae>
 8012cb0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012cb4:	428a      	cmp	r2, r1
 8012cb6:	d10c      	bne.n	8012cd2 <scalbn+0x5a>
 8012cb8:	ee10 2a10 	vmov	r2, s0
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	f7ed fae4 	bl	800028c <__adddf3>
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	460d      	mov	r5, r1
 8012cc8:	e019      	b.n	8012cfe <scalbn+0x86>
 8012cca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012cce:	460b      	mov	r3, r1
 8012cd0:	3a36      	subs	r2, #54	; 0x36
 8012cd2:	4432      	add	r2, r6
 8012cd4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012cd8:	428a      	cmp	r2, r1
 8012cda:	dd08      	ble.n	8012cee <scalbn+0x76>
 8012cdc:	2d00      	cmp	r5, #0
 8012cde:	a120      	add	r1, pc, #128	; (adr r1, 8012d60 <scalbn+0xe8>)
 8012ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ce4:	da1c      	bge.n	8012d20 <scalbn+0xa8>
 8012ce6:	a120      	add	r1, pc, #128	; (adr r1, 8012d68 <scalbn+0xf0>)
 8012ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cec:	e018      	b.n	8012d20 <scalbn+0xa8>
 8012cee:	2a00      	cmp	r2, #0
 8012cf0:	dd08      	ble.n	8012d04 <scalbn+0x8c>
 8012cf2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012cf6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012cfa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012cfe:	ec45 4b10 	vmov	d0, r4, r5
 8012d02:	bd70      	pop	{r4, r5, r6, pc}
 8012d04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012d08:	da19      	bge.n	8012d3e <scalbn+0xc6>
 8012d0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012d0e:	429e      	cmp	r6, r3
 8012d10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012d14:	dd0a      	ble.n	8012d2c <scalbn+0xb4>
 8012d16:	a112      	add	r1, pc, #72	; (adr r1, 8012d60 <scalbn+0xe8>)
 8012d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d1e2      	bne.n	8012ce6 <scalbn+0x6e>
 8012d20:	a30f      	add	r3, pc, #60	; (adr r3, 8012d60 <scalbn+0xe8>)
 8012d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d26:	f7ed fc67 	bl	80005f8 <__aeabi_dmul>
 8012d2a:	e7cb      	b.n	8012cc4 <scalbn+0x4c>
 8012d2c:	a10a      	add	r1, pc, #40	; (adr r1, 8012d58 <scalbn+0xe0>)
 8012d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d0b8      	beq.n	8012ca8 <scalbn+0x30>
 8012d36:	a10e      	add	r1, pc, #56	; (adr r1, 8012d70 <scalbn+0xf8>)
 8012d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d3c:	e7b4      	b.n	8012ca8 <scalbn+0x30>
 8012d3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012d42:	3236      	adds	r2, #54	; 0x36
 8012d44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012d48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	4b0c      	ldr	r3, [pc, #48]	; (8012d80 <scalbn+0x108>)
 8012d50:	2200      	movs	r2, #0
 8012d52:	e7e8      	b.n	8012d26 <scalbn+0xae>
 8012d54:	f3af 8000 	nop.w
 8012d58:	c2f8f359 	.word	0xc2f8f359
 8012d5c:	01a56e1f 	.word	0x01a56e1f
 8012d60:	8800759c 	.word	0x8800759c
 8012d64:	7e37e43c 	.word	0x7e37e43c
 8012d68:	8800759c 	.word	0x8800759c
 8012d6c:	fe37e43c 	.word	0xfe37e43c
 8012d70:	c2f8f359 	.word	0xc2f8f359
 8012d74:	81a56e1f 	.word	0x81a56e1f
 8012d78:	43500000 	.word	0x43500000
 8012d7c:	ffff3cb0 	.word	0xffff3cb0
 8012d80:	3c900000 	.word	0x3c900000

08012d84 <_init>:
 8012d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d86:	bf00      	nop
 8012d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d8a:	bc08      	pop	{r3}
 8012d8c:	469e      	mov	lr, r3
 8012d8e:	4770      	bx	lr

08012d90 <_fini>:
 8012d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d92:	bf00      	nop
 8012d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d96:	bc08      	pop	{r3}
 8012d98:	469e      	mov	lr, r3
 8012d9a:	4770      	bx	lr
